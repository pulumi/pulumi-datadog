// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to list all existing logs pipelines for use in other resources.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const pipelines = datadog.getLogsPipelines({});
 * // Using data source to set pipeline order
 * const lpo = new datadog.LogsPipelineOrder("lpo", {
 *     name: "lpo",
 *     pipelines: pipelines.then(pipelines => .map(pipeline => (pipeline.id))),
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getLogsPipelines(args?: GetLogsPipelinesArgs, opts?: pulumi.InvokeOptions): Promise<GetLogsPipelinesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("datadog:index/getLogsPipelines:getLogsPipelines", {
        "isReadOnly": args.isReadOnly,
    }, opts);
}

/**
 * A collection of arguments for invoking getLogsPipelines.
 */
export interface GetLogsPipelinesArgs {
    isReadOnly?: string;
}

/**
 * A collection of values returned by getLogsPipelines.
 */
export interface GetLogsPipelinesResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Filter parameter for retrieved pipelines
     */
    readonly isReadOnly?: string;
    /**
     * List of logs pipelines
     */
    readonly logsPipelines: outputs.GetLogsPipelinesLogsPipeline[];
}
/**
 * Use this data source to list all existing logs pipelines for use in other resources.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const pipelines = datadog.getLogsPipelines({});
 * // Using data source to set pipeline order
 * const lpo = new datadog.LogsPipelineOrder("lpo", {
 *     name: "lpo",
 *     pipelines: pipelines.then(pipelines => .map(pipeline => (pipeline.id))),
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getLogsPipelinesOutput(args?: GetLogsPipelinesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLogsPipelinesResult> {
    return pulumi.output(args).apply((a: any) => getLogsPipelines(a, opts))
}

/**
 * A collection of arguments for invoking getLogsPipelines.
 */
export interface GetLogsPipelinesOutputArgs {
    isReadOnly?: pulumi.Input<string>;
}
