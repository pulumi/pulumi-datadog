// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog SpansMetric resource. This can be used to create and manage Datadog spans_metric.
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import datadog:index/spansMetric:SpansMetric testing_spans_metric testing.span.metric
 * ```
 */
export class SpansMetric extends pulumi.CustomResource {
    /**
     * Get an existing SpansMetric resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpansMetricState, opts?: pulumi.CustomResourceOptions): SpansMetric {
        return new SpansMetric(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/spansMetric:SpansMetric';

    /**
     * Returns true if the given object is an instance of SpansMetric.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpansMetric {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpansMetric.__pulumiType;
    }

    public readonly compute!: pulumi.Output<outputs.SpansMetricCompute | undefined>;
    public readonly filter!: pulumi.Output<outputs.SpansMetricFilter | undefined>;
    public readonly groupBies!: pulumi.Output<outputs.SpansMetricGroupBy[] | undefined>;
    /**
     * The name of the span-based metric. This field can't be updated after creation.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a SpansMetric resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpansMetricArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpansMetricArgs | SpansMetricState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpansMetricState | undefined;
            resourceInputs["compute"] = state ? state.compute : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["groupBies"] = state ? state.groupBies : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as SpansMetricArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["compute"] = args ? args.compute : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["groupBies"] = args ? args.groupBies : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpansMetric.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SpansMetric resources.
 */
export interface SpansMetricState {
    compute?: pulumi.Input<inputs.SpansMetricCompute>;
    filter?: pulumi.Input<inputs.SpansMetricFilter>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.SpansMetricGroupBy>[]>;
    /**
     * The name of the span-based metric. This field can't be updated after creation.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SpansMetric resource.
 */
export interface SpansMetricArgs {
    compute?: pulumi.Input<inputs.SpansMetricCompute>;
    filter?: pulumi.Input<inputs.SpansMetricFilter>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.SpansMetricGroupBy>[]>;
    /**
     * The name of the span-based metric. This field can't be updated after creation.
     */
    name: pulumi.Input<string>;
}
