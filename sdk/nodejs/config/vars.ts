// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("datadog");

/**
 * (Required unless validate is false) Datadog API key. This can also be set via the DD_API_KEY environment variable.
 */
export declare const apiKey: string | undefined;
Object.defineProperty(exports, "apiKey", {
    get() {
        return __config.get("apiKey");
    },
    enumerable: true,
});

/**
 * The API URL. This can also be set via the DD_HOST environment variable, and defaults to `https://api.datadoghq.com`.
 * Note that this URL must not end with the `/api/` path. For example, `https://api.datadoghq.com/` is a correct value,
 * while `https://api.datadoghq.com/api/` is not. And if you're working with "EU" version of Datadog, use
 * `https://api.datadoghq.eu/`. Other Datadog region examples: `https://api.us5.datadoghq.com/`,
 * `https://api.us3.datadoghq.com/` and `https://api.ddog-gov.com/`. See https://docs.datadoghq.com/getting_started/site/
 * for all available regions.
 */
export declare const apiUrl: string | undefined;
Object.defineProperty(exports, "apiUrl", {
    get() {
        return __config.get("apiUrl");
    },
    enumerable: true,
});

/**
 * (Required unless validate is false) Datadog APP key. This can also be set via the DD_APP_KEY environment variable.
 */
export declare const appKey: string | undefined;
Object.defineProperty(exports, "appKey", {
    get() {
        return __config.get("appKey");
    },
    enumerable: true,
});

/**
 * The AWS access key ID; used for cloud-provider-based authentication. This can also be set using the `AWS_ACCESS_KEY_ID`
 * environment variable. Required when using `cloudProviderType` set to `aws`.
 */
export declare const awsAccessKeyId: string | undefined;
Object.defineProperty(exports, "awsAccessKeyId", {
    get() {
        return __config.get("awsAccessKeyId");
    },
    enumerable: true,
});

/**
 * The AWS secret access key; used for cloud-provider-based authentication. This can also be set using the
 * `AWS_SECRET_ACCESS_KEY` environment variable. Required when using `cloudProviderType` set to `aws`.
 */
export declare const awsSecretAccessKey: string | undefined;
Object.defineProperty(exports, "awsSecretAccessKey", {
    get() {
        return __config.get("awsSecretAccessKey");
    },
    enumerable: true,
});

/**
 * The AWS session token; used for cloud-provider-based authentication. This can also be set using the `AWS_SESSION_TOKEN`
 * environment variable. Required when using `cloudProviderType` set to `aws` and using temporary credentials.
 */
export declare const awsSessionToken: string | undefined;
Object.defineProperty(exports, "awsSessionToken", {
    get() {
        return __config.get("awsSessionToken");
    },
    enumerable: true,
});

/**
 * The cloud provider region specifier; used for cloud-provider-based authentication. For example, `us-east-1` for AWS.
 */
export declare const cloudProviderRegion: string | undefined;
Object.defineProperty(exports, "cloudProviderRegion", {
    get() {
        return __config.get("cloudProviderRegion");
    },
    enumerable: true,
});

/**
 * Specifies the cloud provider used for cloud-provider-based authentication, enabling keyless access without API or app
 * keys. Only [`aws`] is supported. This feature is in Preview. If you'd like to enable it for your organization, contact
 * [support](https://docs.datadoghq.com/help/).
 */
export declare const cloudProviderType: string | undefined;
Object.defineProperty(exports, "cloudProviderType", {
    get() {
        return __config.get("cloudProviderType");
    },
    enumerable: true,
});

/**
 * [Experimental - Logs Pipelines, Monitors Security Monitoring Rules, and Service Level Objectives only] Configuration
 * block containing settings to apply default resource tags across all resources.
 */
export declare const defaultTags: outputs.config.DefaultTags | undefined;
Object.defineProperty(exports, "defaultTags", {
    get() {
        return __config.getObject<outputs.config.DefaultTags>("defaultTags");
    },
    enumerable: true,
});

/**
 * The HTTP request retry back off base. Defaults to 2.
 */
export declare const httpClientRetryBackoffBase: number | undefined;
Object.defineProperty(exports, "httpClientRetryBackoffBase", {
    get() {
        return __config.getObject<number>("httpClientRetryBackoffBase");
    },
    enumerable: true,
});

/**
 * The HTTP request retry back off multiplier. Defaults to 2.
 */
export declare const httpClientRetryBackoffMultiplier: number | undefined;
Object.defineProperty(exports, "httpClientRetryBackoffMultiplier", {
    get() {
        return __config.getObject<number>("httpClientRetryBackoffMultiplier");
    },
    enumerable: true,
});

/**
 * Enables request retries on HTTP status codes 429 and 5xx. Valid values are [`true`, `false`]. Defaults to `true`.
 */
export declare const httpClientRetryEnabled: string | undefined;
Object.defineProperty(exports, "httpClientRetryEnabled", {
    get() {
        return __config.get("httpClientRetryEnabled");
    },
    enumerable: true,
});

/**
 * The HTTP request maximum retry number. Defaults to 3.
 */
export declare const httpClientRetryMaxRetries: number | undefined;
Object.defineProperty(exports, "httpClientRetryMaxRetries", {
    get() {
        return __config.getObject<number>("httpClientRetryMaxRetries");
    },
    enumerable: true,
});

/**
 * The HTTP request retry timeout period. Defaults to 60 seconds.
 */
export declare const httpClientRetryTimeout: number | undefined;
Object.defineProperty(exports, "httpClientRetryTimeout", {
    get() {
        return __config.getObject<number>("httpClientRetryTimeout");
    },
    enumerable: true,
});

/**
 * The organization UUID; used for cloud-provider-based authentication. See the [Datadog API
 * documentation](https://docs.datadoghq.com/api/v1/organizations/) for more information.
 */
export declare const orgUuid: string | undefined;
Object.defineProperty(exports, "orgUuid", {
    get() {
        return __config.get("orgUuid");
    },
    enumerable: true,
});

/**
 * Enables validation of the provided API key during provider initialization. Valid values are [`true`, `false`]. Default
 * is true. When false, apiKey won't be checked.
 */
export declare const validate: string | undefined;
Object.defineProperty(exports, "validate", {
    get() {
        return __config.get("validate");
    },
    enumerable: true,
});

