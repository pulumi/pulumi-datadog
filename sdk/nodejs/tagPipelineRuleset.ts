// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog Tag Pipeline Ruleset resource.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import datadog:index/tagPipelineRuleset:TagPipelineRuleset example "your-ruleset-id-here"
 * ```
 */
export class TagPipelineRuleset extends pulumi.CustomResource {
    /**
     * Get an existing TagPipelineRuleset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TagPipelineRulesetState, opts?: pulumi.CustomResourceOptions): TagPipelineRuleset {
        return new TagPipelineRuleset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/tagPipelineRuleset:TagPipelineRuleset';

    /**
     * Returns true if the given object is an instance of TagPipelineRuleset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TagPipelineRuleset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TagPipelineRuleset.__pulumiType;
    }

    /**
     * Whether the ruleset is enabled.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * The name of the ruleset.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The position of the ruleset in the pipeline.
     */
    declare public /*out*/ readonly position: pulumi.Output<number>;
    /**
     * The rules in the ruleset.
     */
    declare public readonly rules: pulumi.Output<outputs.TagPipelineRulesetRule[] | undefined>;
    /**
     * The version of the ruleset.
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a TagPipelineRuleset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TagPipelineRulesetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TagPipelineRulesetArgs | TagPipelineRulesetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TagPipelineRulesetState | undefined;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["position"] = state?.position;
            resourceInputs["rules"] = state?.rules;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as TagPipelineRulesetArgs | undefined;
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["rules"] = args?.rules;
            resourceInputs["position"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TagPipelineRuleset.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TagPipelineRuleset resources.
 */
export interface TagPipelineRulesetState {
    /**
     * Whether the ruleset is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the ruleset.
     */
    name?: pulumi.Input<string>;
    /**
     * The position of the ruleset in the pipeline.
     */
    position?: pulumi.Input<number>;
    /**
     * The rules in the ruleset.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.TagPipelineRulesetRule>[]>;
    /**
     * The version of the ruleset.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TagPipelineRuleset resource.
 */
export interface TagPipelineRulesetArgs {
    /**
     * Whether the ruleset is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the ruleset.
     */
    name: pulumi.Input<string>;
    /**
     * The rules in the ruleset.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.TagPipelineRulesetRule>[]>;
}
