// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog monitor resource. This can be used to create and manage Datadog monitors.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const foo = new datadog.Monitor("foo", {
 *     name: "Name for monitor foo",
 *     type: "metric alert",
 *     message: "Monitor triggered. Notify: @hipchat-channel",
 *     escalationMessage: "Escalation message @pagerduty",
 *     query: "avg(last_1h):avg:aws.ec2.cpu{environment:foo,host:foo} by {host} > 4",
 *     monitorThresholds: {
 *         warning: "2",
 *         critical: "4",
 *     },
 *     includeTags: true,
 *     tags: [
 *         "foo:bar",
 *         "team:fooBar",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import datadog:index/monitor:Monitor bytes_received_localhost 2081
 * ```
 */
export class Monitor extends pulumi.CustomResource {
    /**
     * Get an existing Monitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorState, opts?: pulumi.CustomResourceOptions): Monitor {
        return new Monitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/monitor:Monitor';

    /**
     * Returns true if the given object is an instance of Monitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Monitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Monitor.__pulumiType;
    }

    /**
     * A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log monitors. Defaults to `false`.
     */
    declare public readonly enableLogsSample: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not a list of samples which triggered the alert is included. This is only used by CI Test and Pipeline monitors.
     */
    declare public readonly enableSamples: pulumi.Output<boolean | undefined>;
    /**
     * A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
     */
    declare public readonly escalationMessage: pulumi.Output<string | undefined>;
    /**
     * (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer.
     *
     * For example, if the value is set to `300` (5min), the `timeframe` is set to `last5m` and the time is 7:00, the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have data during evaluation.
     */
    declare public readonly evaluationDelay: pulumi.Output<number>;
    /**
     * A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. SLO, composite monitor).
     */
    declare public readonly forceDelete: pulumi.Output<boolean | undefined>;
    /**
     * The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour, and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
     */
    declare public readonly groupRetentionDuration: pulumi.Output<string | undefined>;
    /**
     * Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to `false`.
     */
    declare public readonly groupbySimpleMonitor: pulumi.Output<boolean | undefined>;
    /**
     * A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title.
     */
    declare public readonly includeTags: pulumi.Output<boolean | undefined>;
    /**
     * A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`.
     *
     * @deprecated Use `restrictedRoles`.
     */
    declare public readonly locked: pulumi.Output<boolean | undefined>;
    /**
     * A message to include with notifications for this monitor.
     */
    declare public readonly message: pulumi.Output<string>;
    /**
     * A mapping containing `recoveryWindow` and `triggerWindow` values, e.g. `last15m` . Can only be used for, and are required for, anomaly monitors.
     */
    declare public readonly monitorThresholdWindows: pulumi.Output<outputs.MonitorMonitorThresholdWindows | undefined>;
    /**
     * Alert thresholds of the monitor.
     */
    declare public readonly monitorThresholds: pulumi.Output<outputs.MonitorMonitorThresholds | undefined>;
    /**
     * Name of Datadog monitor.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The time (in seconds) to skip evaluations for new groups.
     *
     * `newGroupDelay` overrides `newHostDelay` if it is set to a nonzero value.
     */
    declare public readonly newGroupDelay: pulumi.Output<number | undefined>;
    /**
     * **Deprecated**. See `newGroupDelay`. Time (in seconds) to allow a host to boot and applications to fully start before starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors and monitors not grouped by host. The only case when this should be used is to override the default and set `newHostDelay` to zero for monitors grouped by host.
     *
     * @deprecated Use `newGroupDelay` except when setting `newHostDelay` to zero.
     */
    declare public readonly newHostDelay: pulumi.Output<number | undefined>;
    /**
     * The number of minutes before a monitor will notify when data stops reporting.
     *
     * We recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
     */
    declare public readonly noDataTimeframe: pulumi.Output<number | undefined>;
    /**
     * Toggles the display of additional content sent in the monitor notification.
     */
    declare public readonly notificationPresetName: pulumi.Output<string | undefined>;
    /**
     * A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
     */
    declare public readonly notifyAudit: pulumi.Output<boolean | undefined>;
    /**
     * Controls what granularity a monitor alerts on. Only available for monitors with groupings. For instance, a monitor grouped by `cluster`, `namespace`, and `pod` can be configured to only notify on each new `cluster` violating the alert conditions by setting `notifyBy` to `['cluster']`. Tags mentioned in `notifyBy` must be a subset of the grouping tags in the query. For example, a query grouped by `cluster` and `namespace` cannot notify on `region`. Setting `notifyBy` to `[*]` configures the monitor to notify as a simple-alert.
     */
    declare public readonly notifyBies: pulumi.Output<string[] | undefined>;
    /**
     * A boolean indicating whether this monitor will notify when data stops reporting.
     */
    declare public readonly notifyNoData: pulumi.Output<boolean | undefined>;
    /**
     * Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results in different behavior depending on the monitor query type. For monitors using `Count` queries, an empty monitor evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than `Count`, for example `Gauge`, `Measure`, or `Rate`, the monitor shows the last known status. This option is not available for Service Check, Composite, or SLO monitors. Valid values are: `showNoData`, `showAndNotifyNoData`, `resolve`, and `default`.
     */
    declare public readonly onMissingData: pulumi.Output<string | undefined>;
    /**
     * Integer from 1 (high) to 5 (low) indicating alert severity.
     */
    declare public readonly priority: pulumi.Output<string | undefined>;
    declare public readonly query: pulumi.Output<string>;
    /**
     * The number of minutes after the last notification before a monitor will re-notify on the current status. It will only re-notify if it's not resolved.
     */
    declare public readonly renotifyInterval: pulumi.Output<number | undefined>;
    /**
     * The number of re-notification messages that should be sent on the current status.
     */
    declare public readonly renotifyOccurrences: pulumi.Output<number | undefined>;
    /**
     * The types of statuses for which re-notification messages should be sent.
     */
    declare public readonly renotifyStatuses: pulumi.Output<string[] | undefined>;
    /**
     * A boolean indicating whether this monitor needs a full window of data before it's evaluated. Datadog strongly recommends you set this to `false` for sparse metrics, otherwise some evaluations may be skipped. If there's a customSchedule set, `requireFullWindow` must be false and will be ignored.
     */
    declare public readonly requireFullWindow: pulumi.Output<boolean | undefined>;
    declare public readonly restrictedRoles: pulumi.Output<string[] | undefined>;
    /**
     * Configuration options for scheduling.
     */
    declare public readonly schedulingOptions: pulumi.Output<outputs.MonitorSchedulingOption[] | undefined>;
    /**
     * A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
     */
    declare public readonly tags: pulumi.Output<string[]>;
    /**
     * The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
     */
    declare public readonly timeoutH: pulumi.Output<number | undefined>;
    /**
     * The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type cannot be changed after a monitor is created.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * If set to `false`, skip the validation call done during plan.
     */
    declare public readonly validate: pulumi.Output<boolean | undefined>;
    declare public readonly variables: pulumi.Output<outputs.MonitorVariables | undefined>;

    /**
     * Create a Monitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorArgs | MonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorState | undefined;
            resourceInputs["enableLogsSample"] = state?.enableLogsSample;
            resourceInputs["enableSamples"] = state?.enableSamples;
            resourceInputs["escalationMessage"] = state?.escalationMessage;
            resourceInputs["evaluationDelay"] = state?.evaluationDelay;
            resourceInputs["forceDelete"] = state?.forceDelete;
            resourceInputs["groupRetentionDuration"] = state?.groupRetentionDuration;
            resourceInputs["groupbySimpleMonitor"] = state?.groupbySimpleMonitor;
            resourceInputs["includeTags"] = state?.includeTags;
            resourceInputs["locked"] = state?.locked;
            resourceInputs["message"] = state?.message;
            resourceInputs["monitorThresholdWindows"] = state?.monitorThresholdWindows;
            resourceInputs["monitorThresholds"] = state?.monitorThresholds;
            resourceInputs["name"] = state?.name;
            resourceInputs["newGroupDelay"] = state?.newGroupDelay;
            resourceInputs["newHostDelay"] = state?.newHostDelay;
            resourceInputs["noDataTimeframe"] = state?.noDataTimeframe;
            resourceInputs["notificationPresetName"] = state?.notificationPresetName;
            resourceInputs["notifyAudit"] = state?.notifyAudit;
            resourceInputs["notifyBies"] = state?.notifyBies;
            resourceInputs["notifyNoData"] = state?.notifyNoData;
            resourceInputs["onMissingData"] = state?.onMissingData;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["query"] = state?.query;
            resourceInputs["renotifyInterval"] = state?.renotifyInterval;
            resourceInputs["renotifyOccurrences"] = state?.renotifyOccurrences;
            resourceInputs["renotifyStatuses"] = state?.renotifyStatuses;
            resourceInputs["requireFullWindow"] = state?.requireFullWindow;
            resourceInputs["restrictedRoles"] = state?.restrictedRoles;
            resourceInputs["schedulingOptions"] = state?.schedulingOptions;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["timeoutH"] = state?.timeoutH;
            resourceInputs["type"] = state?.type;
            resourceInputs["validate"] = state?.validate;
            resourceInputs["variables"] = state?.variables;
        } else {
            const args = argsOrState as MonitorArgs | undefined;
            if (args?.message === undefined && !opts.urn) {
                throw new Error("Missing required property 'message'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.query === undefined && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["enableLogsSample"] = args?.enableLogsSample;
            resourceInputs["enableSamples"] = args?.enableSamples;
            resourceInputs["escalationMessage"] = args?.escalationMessage;
            resourceInputs["evaluationDelay"] = args?.evaluationDelay;
            resourceInputs["forceDelete"] = args?.forceDelete;
            resourceInputs["groupRetentionDuration"] = args?.groupRetentionDuration;
            resourceInputs["groupbySimpleMonitor"] = args?.groupbySimpleMonitor;
            resourceInputs["includeTags"] = args?.includeTags;
            resourceInputs["locked"] = args?.locked;
            resourceInputs["message"] = args?.message;
            resourceInputs["monitorThresholdWindows"] = args?.monitorThresholdWindows;
            resourceInputs["monitorThresholds"] = args?.monitorThresholds;
            resourceInputs["name"] = args?.name;
            resourceInputs["newGroupDelay"] = args?.newGroupDelay;
            resourceInputs["newHostDelay"] = args?.newHostDelay;
            resourceInputs["noDataTimeframe"] = args?.noDataTimeframe;
            resourceInputs["notificationPresetName"] = args?.notificationPresetName;
            resourceInputs["notifyAudit"] = args?.notifyAudit;
            resourceInputs["notifyBies"] = args?.notifyBies;
            resourceInputs["notifyNoData"] = args?.notifyNoData;
            resourceInputs["onMissingData"] = args?.onMissingData;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["query"] = args?.query;
            resourceInputs["renotifyInterval"] = args?.renotifyInterval;
            resourceInputs["renotifyOccurrences"] = args?.renotifyOccurrences;
            resourceInputs["renotifyStatuses"] = args?.renotifyStatuses;
            resourceInputs["requireFullWindow"] = args?.requireFullWindow;
            resourceInputs["restrictedRoles"] = args?.restrictedRoles;
            resourceInputs["schedulingOptions"] = args?.schedulingOptions;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeoutH"] = args?.timeoutH;
            resourceInputs["type"] = args?.type;
            resourceInputs["validate"] = args?.validate;
            resourceInputs["variables"] = args?.variables;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Monitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Monitor resources.
 */
export interface MonitorState {
    /**
     * A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log monitors. Defaults to `false`.
     */
    enableLogsSample?: pulumi.Input<boolean>;
    /**
     * Whether or not a list of samples which triggered the alert is included. This is only used by CI Test and Pipeline monitors.
     */
    enableSamples?: pulumi.Input<boolean>;
    /**
     * A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
     */
    escalationMessage?: pulumi.Input<string>;
    /**
     * (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer.
     *
     * For example, if the value is set to `300` (5min), the `timeframe` is set to `last5m` and the time is 7:00, the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have data during evaluation.
     */
    evaluationDelay?: pulumi.Input<number>;
    /**
     * A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. SLO, composite monitor).
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour, and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
     */
    groupRetentionDuration?: pulumi.Input<string>;
    /**
     * Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to `false`.
     */
    groupbySimpleMonitor?: pulumi.Input<boolean>;
    /**
     * A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title.
     */
    includeTags?: pulumi.Input<boolean>;
    /**
     * A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`.
     *
     * @deprecated Use `restrictedRoles`.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * A message to include with notifications for this monitor.
     */
    message?: pulumi.Input<string>;
    /**
     * A mapping containing `recoveryWindow` and `triggerWindow` values, e.g. `last15m` . Can only be used for, and are required for, anomaly monitors.
     */
    monitorThresholdWindows?: pulumi.Input<inputs.MonitorMonitorThresholdWindows>;
    /**
     * Alert thresholds of the monitor.
     */
    monitorThresholds?: pulumi.Input<inputs.MonitorMonitorThresholds>;
    /**
     * Name of Datadog monitor.
     */
    name?: pulumi.Input<string>;
    /**
     * The time (in seconds) to skip evaluations for new groups.
     *
     * `newGroupDelay` overrides `newHostDelay` if it is set to a nonzero value.
     */
    newGroupDelay?: pulumi.Input<number>;
    /**
     * **Deprecated**. See `newGroupDelay`. Time (in seconds) to allow a host to boot and applications to fully start before starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors and monitors not grouped by host. The only case when this should be used is to override the default and set `newHostDelay` to zero for monitors grouped by host.
     *
     * @deprecated Use `newGroupDelay` except when setting `newHostDelay` to zero.
     */
    newHostDelay?: pulumi.Input<number>;
    /**
     * The number of minutes before a monitor will notify when data stops reporting.
     *
     * We recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
     */
    noDataTimeframe?: pulumi.Input<number>;
    /**
     * Toggles the display of additional content sent in the monitor notification.
     */
    notificationPresetName?: pulumi.Input<string>;
    /**
     * A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
     */
    notifyAudit?: pulumi.Input<boolean>;
    /**
     * Controls what granularity a monitor alerts on. Only available for monitors with groupings. For instance, a monitor grouped by `cluster`, `namespace`, and `pod` can be configured to only notify on each new `cluster` violating the alert conditions by setting `notifyBy` to `['cluster']`. Tags mentioned in `notifyBy` must be a subset of the grouping tags in the query. For example, a query grouped by `cluster` and `namespace` cannot notify on `region`. Setting `notifyBy` to `[*]` configures the monitor to notify as a simple-alert.
     */
    notifyBies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A boolean indicating whether this monitor will notify when data stops reporting.
     */
    notifyNoData?: pulumi.Input<boolean>;
    /**
     * Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results in different behavior depending on the monitor query type. For monitors using `Count` queries, an empty monitor evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than `Count`, for example `Gauge`, `Measure`, or `Rate`, the monitor shows the last known status. This option is not available for Service Check, Composite, or SLO monitors. Valid values are: `showNoData`, `showAndNotifyNoData`, `resolve`, and `default`.
     */
    onMissingData?: pulumi.Input<string>;
    /**
     * Integer from 1 (high) to 5 (low) indicating alert severity.
     */
    priority?: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    /**
     * The number of minutes after the last notification before a monitor will re-notify on the current status. It will only re-notify if it's not resolved.
     */
    renotifyInterval?: pulumi.Input<number>;
    /**
     * The number of re-notification messages that should be sent on the current status.
     */
    renotifyOccurrences?: pulumi.Input<number>;
    /**
     * The types of statuses for which re-notification messages should be sent.
     */
    renotifyStatuses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A boolean indicating whether this monitor needs a full window of data before it's evaluated. Datadog strongly recommends you set this to `false` for sparse metrics, otherwise some evaluations may be skipped. If there's a customSchedule set, `requireFullWindow` must be false and will be ignored.
     */
    requireFullWindow?: pulumi.Input<boolean>;
    restrictedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration options for scheduling.
     */
    schedulingOptions?: pulumi.Input<pulumi.Input<inputs.MonitorSchedulingOption>[]>;
    /**
     * A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
     */
    timeoutH?: pulumi.Input<number>;
    /**
     * The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type cannot be changed after a monitor is created.
     */
    type?: pulumi.Input<string>;
    /**
     * If set to `false`, skip the validation call done during plan.
     */
    validate?: pulumi.Input<boolean>;
    variables?: pulumi.Input<inputs.MonitorVariables>;
}

/**
 * The set of arguments for constructing a Monitor resource.
 */
export interface MonitorArgs {
    /**
     * A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log monitors. Defaults to `false`.
     */
    enableLogsSample?: pulumi.Input<boolean>;
    /**
     * Whether or not a list of samples which triggered the alert is included. This is only used by CI Test and Pipeline monitors.
     */
    enableSamples?: pulumi.Input<boolean>;
    /**
     * A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
     */
    escalationMessage?: pulumi.Input<string>;
    /**
     * (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer.
     *
     * For example, if the value is set to `300` (5min), the `timeframe` is set to `last5m` and the time is 7:00, the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have data during evaluation.
     */
    evaluationDelay?: pulumi.Input<number>;
    /**
     * A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. SLO, composite monitor).
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour, and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
     */
    groupRetentionDuration?: pulumi.Input<string>;
    /**
     * Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to `false`.
     */
    groupbySimpleMonitor?: pulumi.Input<boolean>;
    /**
     * A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title.
     */
    includeTags?: pulumi.Input<boolean>;
    /**
     * A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`.
     *
     * @deprecated Use `restrictedRoles`.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * A message to include with notifications for this monitor.
     */
    message: pulumi.Input<string>;
    /**
     * A mapping containing `recoveryWindow` and `triggerWindow` values, e.g. `last15m` . Can only be used for, and are required for, anomaly monitors.
     */
    monitorThresholdWindows?: pulumi.Input<inputs.MonitorMonitorThresholdWindows>;
    /**
     * Alert thresholds of the monitor.
     */
    monitorThresholds?: pulumi.Input<inputs.MonitorMonitorThresholds>;
    /**
     * Name of Datadog monitor.
     */
    name: pulumi.Input<string>;
    /**
     * The time (in seconds) to skip evaluations for new groups.
     *
     * `newGroupDelay` overrides `newHostDelay` if it is set to a nonzero value.
     */
    newGroupDelay?: pulumi.Input<number>;
    /**
     * **Deprecated**. See `newGroupDelay`. Time (in seconds) to allow a host to boot and applications to fully start before starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors and monitors not grouped by host. The only case when this should be used is to override the default and set `newHostDelay` to zero for monitors grouped by host.
     *
     * @deprecated Use `newGroupDelay` except when setting `newHostDelay` to zero.
     */
    newHostDelay?: pulumi.Input<number>;
    /**
     * The number of minutes before a monitor will notify when data stops reporting.
     *
     * We recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
     */
    noDataTimeframe?: pulumi.Input<number>;
    /**
     * Toggles the display of additional content sent in the monitor notification.
     */
    notificationPresetName?: pulumi.Input<string>;
    /**
     * A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
     */
    notifyAudit?: pulumi.Input<boolean>;
    /**
     * Controls what granularity a monitor alerts on. Only available for monitors with groupings. For instance, a monitor grouped by `cluster`, `namespace`, and `pod` can be configured to only notify on each new `cluster` violating the alert conditions by setting `notifyBy` to `['cluster']`. Tags mentioned in `notifyBy` must be a subset of the grouping tags in the query. For example, a query grouped by `cluster` and `namespace` cannot notify on `region`. Setting `notifyBy` to `[*]` configures the monitor to notify as a simple-alert.
     */
    notifyBies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A boolean indicating whether this monitor will notify when data stops reporting.
     */
    notifyNoData?: pulumi.Input<boolean>;
    /**
     * Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results in different behavior depending on the monitor query type. For monitors using `Count` queries, an empty monitor evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than `Count`, for example `Gauge`, `Measure`, or `Rate`, the monitor shows the last known status. This option is not available for Service Check, Composite, or SLO monitors. Valid values are: `showNoData`, `showAndNotifyNoData`, `resolve`, and `default`.
     */
    onMissingData?: pulumi.Input<string>;
    /**
     * Integer from 1 (high) to 5 (low) indicating alert severity.
     */
    priority?: pulumi.Input<string>;
    query: pulumi.Input<string>;
    /**
     * The number of minutes after the last notification before a monitor will re-notify on the current status. It will only re-notify if it's not resolved.
     */
    renotifyInterval?: pulumi.Input<number>;
    /**
     * The number of re-notification messages that should be sent on the current status.
     */
    renotifyOccurrences?: pulumi.Input<number>;
    /**
     * The types of statuses for which re-notification messages should be sent.
     */
    renotifyStatuses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A boolean indicating whether this monitor needs a full window of data before it's evaluated. Datadog strongly recommends you set this to `false` for sparse metrics, otherwise some evaluations may be skipped. If there's a customSchedule set, `requireFullWindow` must be false and will be ignored.
     */
    requireFullWindow?: pulumi.Input<boolean>;
    restrictedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration options for scheduling.
     */
    schedulingOptions?: pulumi.Input<pulumi.Input<inputs.MonitorSchedulingOption>[]>;
    /**
     * A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
     */
    timeoutH?: pulumi.Input<number>;
    /**
     * The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type cannot be changed after a monitor is created.
     */
    type: pulumi.Input<string>;
    /**
     * If set to `false`, skip the validation call done during plan.
     */
    validate?: pulumi.Input<boolean>;
    variables?: pulumi.Input<inputs.MonitorVariables>;
}
