// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Datadog monitor resource. This can be used to create and manage Datadog monitors.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 * 
 * // Create a new Datadog monitor
 * const foo = new datadog.Monitor("foo", {
 *     escalationMessage: "Escalation message @pagerduty",
 *     includeTags: true,
 *     message: "Monitor triggered. Notify: @hipchat-channel",
 *     name: "Name for monitor foo",
 *     notifyAudit: false,
 *     notifyNoData: false,
 *     query: "avg(last_1h):avg:aws.ec2.cpu{environment:foo,host:foo} by {host} > 4",
 *     renotifyInterval: 60,
 *     silenced: {
 *         "*": 0,
 *     },
 *     tags: [
 *         "foo:bar",
 *         "baz",
 *     ],
 *     thresholds: {
 *         critical: 4,
 *         critical_recovery: 3,
 *         ok: 0,
 *         warning: 2,
 *         warning_recovery: 1,
 *     },
 *     timeoutH: 60,
 *     type: "metric alert",
 * });
 * ```
 */
export class Monitor extends pulumi.CustomResource {
    /**
     * Get an existing Monitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorState, opts?: pulumi.CustomResourceOptions): Monitor {
        return new Monitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'index:index/monitor:Monitor';

    /**
     * Returns true if the given object is an instance of Monitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Monitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Monitor.__pulumiType;
    }

    /**
     * A boolean indicating whether or not to include a list of log values which triggered the alert. Defaults to false. This is only used by log monitors.
     * triggering tags into the title. Defaults to true.
     */
    public readonly enableLogsSample!: pulumi.Output<boolean | undefined>;
    /**
     * A message to include with a re-notification. Supports the '@username'
     * notification allowed elsewhere.
     */
    public readonly escalationMessage!: pulumi.Output<string | undefined>;
    public readonly evaluationDelay!: pulumi.Output<number>;
    /**
     * A boolean indicating whether notifications from this monitor will automatically insert its
     */
    public readonly includeTags!: pulumi.Output<boolean | undefined>;
    /**
     * A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
     */
    public readonly locked!: pulumi.Output<boolean | undefined>;
    /**
     * A message to include with notifications for this monitor.
     * Email notifications can be sent to specific users by using the same '@username' notation as events.
     */
    public readonly message!: pulumi.Output<string>;
    /**
     * Name of Datadog monitor
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Time (in seconds) to allow a host to boot and
     * applications to fully start before starting the evaluation of monitor
     * results. Should be a non negative integer. Defaults to 300.
     * * `evaluation_delay` (Optional, only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer.
     * For example, if the value is set to 300 (5min), the timeframe is set to last_5m and the time is 7:00,
     * the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled
     * metrics to ensure the monitor will always have data during evaluation.
     */
    public readonly newHostDelay!: pulumi.Output<number | undefined>;
    /**
     * The number of minutes before a monitor will notify when data stops reporting. Must be at
     * least 2x the monitor timeframe for metric alerts or 2 minutes for service checks. Default: 2x timeframe for
     * metric alerts, 2 minutes for service checks.
     */
    public readonly noDataTimeframe!: pulumi.Output<number | undefined>;
    /**
     * A boolean indicating whether tagged users will be notified on changes to this monitor.
     * Defaults to false.
     */
    public readonly notifyAudit!: pulumi.Output<boolean | undefined>;
    /**
     * A boolean indicating whether this monitor will notify when data stops reporting. Defaults
     * to false.
     */
    public readonly notifyNoData!: pulumi.Output<boolean | undefined>;
    /**
     * The monitor query to notify on. Note this is not the same query you see in the UI and
     * the syntax is different depending on the monitor `type`, please see the [API Reference](https://docs.datadoghq.com/api/?lang=python#create-a-monitor) for details. **Warning:** `terraform plan` won't perform any validation of the query contents.
     */
    public readonly query!: pulumi.Output<string>;
    /**
     * The number of minutes after the last notification before a monitor will re-notify
     * on the current status. It will only re-notify if it's not resolved.
     */
    public readonly renotifyInterval!: pulumi.Output<number | undefined>;
    /**
     * A boolean indicating whether this monitor needs a full window of data before it's evaluated.
     * We highly recommend you set this to False for sparse metrics, otherwise some evaluations will be skipped.
     * Default: True for "on average", "at all times" and "in total" aggregation. False otherwise.
     */
    public readonly requireFullWindow!: pulumi.Output<boolean | undefined>;
    /**
     * Each scope will be muted until the given POSIX timestamp or forever if the value is 0.
     * To mute the alert completely:
     */
    public readonly silenced!: pulumi.Output<{[key: string]: number} | undefined>;
    /**
     * A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m`. Can only be used for anomaly monitors.
     * * `recovery_window` describes how long an anomalous metric must be normal before the alert recovers.
     */
    public readonly thresholdWindows!: pulumi.Output<{ recoveryWindow?: string, triggerWindow?: string } | undefined>;
    /**
     * 
     * * Metric alerts:
     * A dictionary of thresholds by threshold type. Currently we have four threshold types for metric alerts: critical, critical recovery, warning, and warning recovery. Critical is defined in the query, but can also be specified in this option. Warning and recovery thresholds can only be specified using the thresholds option.
     * Example usage:
     * ```
     * thresholds = {
     * critical          = 90
     * critical_recovery = 85
     * warning           = 80
     * warning_recovery  = 75
     * }
     * ```
     * **Warning:** the `critical` threshold value must match the one contained in the `query` argument. The `threshold` from the previous example is valid along with a query like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 90` but
     * along with something like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 95` would make the Datadog API return a HTTP error 400, complaining "The value provided for parameter 'query' is invalid".
     * * Service checks:
     * A dictionary of thresholds by status. Because service checks can have multiple thresholds, we don't define them directly in the query.
     * Default values:
     * ```
     * thresholds = {
     * ok       = 1
     * critical = 1
     * warning  = 1
     * unknown  = 1
     * }
     * ```
     */
    public readonly thresholds!: pulumi.Output<{ critical?: number, criticalRecovery?: number, ok?: number, unknown?: number, warning?: number, warningRecovery?: number } | undefined>;
    /**
     * The number of hours of the monitor not reporting data before it will automatically resolve
     * from a triggered state. Defaults to false.
     */
    public readonly timeoutH!: pulumi.Output<number | undefined>;
    /**
     * The type of the monitor, chosen from:
     * * `metric alert`
     * * `service check`
     * * `event alert`
     * * `query alert`
     * * `composite`
     * * `log alert`
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Monitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorArgs | MonitorState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as MonitorState | undefined;
            inputs["enableLogsSample"] = state ? state.enableLogsSample : undefined;
            inputs["escalationMessage"] = state ? state.escalationMessage : undefined;
            inputs["evaluationDelay"] = state ? state.evaluationDelay : undefined;
            inputs["includeTags"] = state ? state.includeTags : undefined;
            inputs["locked"] = state ? state.locked : undefined;
            inputs["message"] = state ? state.message : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["newHostDelay"] = state ? state.newHostDelay : undefined;
            inputs["noDataTimeframe"] = state ? state.noDataTimeframe : undefined;
            inputs["notifyAudit"] = state ? state.notifyAudit : undefined;
            inputs["notifyNoData"] = state ? state.notifyNoData : undefined;
            inputs["query"] = state ? state.query : undefined;
            inputs["renotifyInterval"] = state ? state.renotifyInterval : undefined;
            inputs["requireFullWindow"] = state ? state.requireFullWindow : undefined;
            inputs["silenced"] = state ? state.silenced : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["thresholdWindows"] = state ? state.thresholdWindows : undefined;
            inputs["thresholds"] = state ? state.thresholds : undefined;
            inputs["timeoutH"] = state ? state.timeoutH : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as MonitorArgs | undefined;
            if (!args || args.message === undefined) {
                throw new Error("Missing required property 'message'");
            }
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            if (!args || args.query === undefined) {
                throw new Error("Missing required property 'query'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["enableLogsSample"] = args ? args.enableLogsSample : undefined;
            inputs["escalationMessage"] = args ? args.escalationMessage : undefined;
            inputs["evaluationDelay"] = args ? args.evaluationDelay : undefined;
            inputs["includeTags"] = args ? args.includeTags : undefined;
            inputs["locked"] = args ? args.locked : undefined;
            inputs["message"] = args ? args.message : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["newHostDelay"] = args ? args.newHostDelay : undefined;
            inputs["noDataTimeframe"] = args ? args.noDataTimeframe : undefined;
            inputs["notifyAudit"] = args ? args.notifyAudit : undefined;
            inputs["notifyNoData"] = args ? args.notifyNoData : undefined;
            inputs["query"] = args ? args.query : undefined;
            inputs["renotifyInterval"] = args ? args.renotifyInterval : undefined;
            inputs["requireFullWindow"] = args ? args.requireFullWindow : undefined;
            inputs["silenced"] = args ? args.silenced : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["thresholdWindows"] = args ? args.thresholdWindows : undefined;
            inputs["thresholds"] = args ? args.thresholds : undefined;
            inputs["timeoutH"] = args ? args.timeoutH : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        super(Monitor.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Monitor resources.
 */
export interface MonitorState {
    /**
     * A boolean indicating whether or not to include a list of log values which triggered the alert. Defaults to false. This is only used by log monitors.
     * triggering tags into the title. Defaults to true.
     */
    readonly enableLogsSample?: pulumi.Input<boolean>;
    /**
     * A message to include with a re-notification. Supports the '@username'
     * notification allowed elsewhere.
     */
    readonly escalationMessage?: pulumi.Input<string>;
    readonly evaluationDelay?: pulumi.Input<number>;
    /**
     * A boolean indicating whether notifications from this monitor will automatically insert its
     */
    readonly includeTags?: pulumi.Input<boolean>;
    /**
     * A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
     */
    readonly locked?: pulumi.Input<boolean>;
    /**
     * A message to include with notifications for this monitor.
     * Email notifications can be sent to specific users by using the same '@username' notation as events.
     */
    readonly message?: pulumi.Input<string>;
    /**
     * Name of Datadog monitor
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Time (in seconds) to allow a host to boot and
     * applications to fully start before starting the evaluation of monitor
     * results. Should be a non negative integer. Defaults to 300.
     * * `evaluation_delay` (Optional, only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer.
     * For example, if the value is set to 300 (5min), the timeframe is set to last_5m and the time is 7:00,
     * the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled
     * metrics to ensure the monitor will always have data during evaluation.
     */
    readonly newHostDelay?: pulumi.Input<number>;
    /**
     * The number of minutes before a monitor will notify when data stops reporting. Must be at
     * least 2x the monitor timeframe for metric alerts or 2 minutes for service checks. Default: 2x timeframe for
     * metric alerts, 2 minutes for service checks.
     */
    readonly noDataTimeframe?: pulumi.Input<number>;
    /**
     * A boolean indicating whether tagged users will be notified on changes to this monitor.
     * Defaults to false.
     */
    readonly notifyAudit?: pulumi.Input<boolean>;
    /**
     * A boolean indicating whether this monitor will notify when data stops reporting. Defaults
     * to false.
     */
    readonly notifyNoData?: pulumi.Input<boolean>;
    /**
     * The monitor query to notify on. Note this is not the same query you see in the UI and
     * the syntax is different depending on the monitor `type`, please see the [API Reference](https://docs.datadoghq.com/api/?lang=python#create-a-monitor) for details. **Warning:** `terraform plan` won't perform any validation of the query contents.
     */
    readonly query?: pulumi.Input<string>;
    /**
     * The number of minutes after the last notification before a monitor will re-notify
     * on the current status. It will only re-notify if it's not resolved.
     */
    readonly renotifyInterval?: pulumi.Input<number>;
    /**
     * A boolean indicating whether this monitor needs a full window of data before it's evaluated.
     * We highly recommend you set this to False for sparse metrics, otherwise some evaluations will be skipped.
     * Default: True for "on average", "at all times" and "in total" aggregation. False otherwise.
     */
    readonly requireFullWindow?: pulumi.Input<boolean>;
    /**
     * Each scope will be muted until the given POSIX timestamp or forever if the value is 0.
     * To mute the alert completely:
     */
    readonly silenced?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m`. Can only be used for anomaly monitors.
     * * `recovery_window` describes how long an anomalous metric must be normal before the alert recovers.
     */
    readonly thresholdWindows?: pulumi.Input<{ recoveryWindow?: pulumi.Input<string>, triggerWindow?: pulumi.Input<string> }>;
    /**
     * 
     * * Metric alerts:
     * A dictionary of thresholds by threshold type. Currently we have four threshold types for metric alerts: critical, critical recovery, warning, and warning recovery. Critical is defined in the query, but can also be specified in this option. Warning and recovery thresholds can only be specified using the thresholds option.
     * Example usage:
     * ```
     * thresholds = {
     * critical          = 90
     * critical_recovery = 85
     * warning           = 80
     * warning_recovery  = 75
     * }
     * ```
     * **Warning:** the `critical` threshold value must match the one contained in the `query` argument. The `threshold` from the previous example is valid along with a query like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 90` but
     * along with something like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 95` would make the Datadog API return a HTTP error 400, complaining "The value provided for parameter 'query' is invalid".
     * * Service checks:
     * A dictionary of thresholds by status. Because service checks can have multiple thresholds, we don't define them directly in the query.
     * Default values:
     * ```
     * thresholds = {
     * ok       = 1
     * critical = 1
     * warning  = 1
     * unknown  = 1
     * }
     * ```
     */
    readonly thresholds?: pulumi.Input<{ critical?: pulumi.Input<number>, criticalRecovery?: pulumi.Input<number>, ok?: pulumi.Input<number>, unknown?: pulumi.Input<number>, warning?: pulumi.Input<number>, warningRecovery?: pulumi.Input<number> }>;
    /**
     * The number of hours of the monitor not reporting data before it will automatically resolve
     * from a triggered state. Defaults to false.
     */
    readonly timeoutH?: pulumi.Input<number>;
    /**
     * The type of the monitor, chosen from:
     * * `metric alert`
     * * `service check`
     * * `event alert`
     * * `query alert`
     * * `composite`
     * * `log alert`
     */
    readonly type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Monitor resource.
 */
export interface MonitorArgs {
    /**
     * A boolean indicating whether or not to include a list of log values which triggered the alert. Defaults to false. This is only used by log monitors.
     * triggering tags into the title. Defaults to true.
     */
    readonly enableLogsSample?: pulumi.Input<boolean>;
    /**
     * A message to include with a re-notification. Supports the '@username'
     * notification allowed elsewhere.
     */
    readonly escalationMessage?: pulumi.Input<string>;
    readonly evaluationDelay?: pulumi.Input<number>;
    /**
     * A boolean indicating whether notifications from this monitor will automatically insert its
     */
    readonly includeTags?: pulumi.Input<boolean>;
    /**
     * A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
     */
    readonly locked?: pulumi.Input<boolean>;
    /**
     * A message to include with notifications for this monitor.
     * Email notifications can be sent to specific users by using the same '@username' notation as events.
     */
    readonly message: pulumi.Input<string>;
    /**
     * Name of Datadog monitor
     */
    readonly name: pulumi.Input<string>;
    /**
     * Time (in seconds) to allow a host to boot and
     * applications to fully start before starting the evaluation of monitor
     * results. Should be a non negative integer. Defaults to 300.
     * * `evaluation_delay` (Optional, only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer.
     * For example, if the value is set to 300 (5min), the timeframe is set to last_5m and the time is 7:00,
     * the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled
     * metrics to ensure the monitor will always have data during evaluation.
     */
    readonly newHostDelay?: pulumi.Input<number>;
    /**
     * The number of minutes before a monitor will notify when data stops reporting. Must be at
     * least 2x the monitor timeframe for metric alerts or 2 minutes for service checks. Default: 2x timeframe for
     * metric alerts, 2 minutes for service checks.
     */
    readonly noDataTimeframe?: pulumi.Input<number>;
    /**
     * A boolean indicating whether tagged users will be notified on changes to this monitor.
     * Defaults to false.
     */
    readonly notifyAudit?: pulumi.Input<boolean>;
    /**
     * A boolean indicating whether this monitor will notify when data stops reporting. Defaults
     * to false.
     */
    readonly notifyNoData?: pulumi.Input<boolean>;
    /**
     * The monitor query to notify on. Note this is not the same query you see in the UI and
     * the syntax is different depending on the monitor `type`, please see the [API Reference](https://docs.datadoghq.com/api/?lang=python#create-a-monitor) for details. **Warning:** `terraform plan` won't perform any validation of the query contents.
     */
    readonly query: pulumi.Input<string>;
    /**
     * The number of minutes after the last notification before a monitor will re-notify
     * on the current status. It will only re-notify if it's not resolved.
     */
    readonly renotifyInterval?: pulumi.Input<number>;
    /**
     * A boolean indicating whether this monitor needs a full window of data before it's evaluated.
     * We highly recommend you set this to False for sparse metrics, otherwise some evaluations will be skipped.
     * Default: True for "on average", "at all times" and "in total" aggregation. False otherwise.
     */
    readonly requireFullWindow?: pulumi.Input<boolean>;
    /**
     * Each scope will be muted until the given POSIX timestamp or forever if the value is 0.
     * To mute the alert completely:
     */
    readonly silenced?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m`. Can only be used for anomaly monitors.
     * * `recovery_window` describes how long an anomalous metric must be normal before the alert recovers.
     */
    readonly thresholdWindows?: pulumi.Input<{ recoveryWindow?: pulumi.Input<string>, triggerWindow?: pulumi.Input<string> }>;
    /**
     * 
     * * Metric alerts:
     * A dictionary of thresholds by threshold type. Currently we have four threshold types for metric alerts: critical, critical recovery, warning, and warning recovery. Critical is defined in the query, but can also be specified in this option. Warning and recovery thresholds can only be specified using the thresholds option.
     * Example usage:
     * ```
     * thresholds = {
     * critical          = 90
     * critical_recovery = 85
     * warning           = 80
     * warning_recovery  = 75
     * }
     * ```
     * **Warning:** the `critical` threshold value must match the one contained in the `query` argument. The `threshold` from the previous example is valid along with a query like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 90` but
     * along with something like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 95` would make the Datadog API return a HTTP error 400, complaining "The value provided for parameter 'query' is invalid".
     * * Service checks:
     * A dictionary of thresholds by status. Because service checks can have multiple thresholds, we don't define them directly in the query.
     * Default values:
     * ```
     * thresholds = {
     * ok       = 1
     * critical = 1
     * warning  = 1
     * unknown  = 1
     * }
     * ```
     */
    readonly thresholds?: pulumi.Input<{ critical?: pulumi.Input<number>, criticalRecovery?: pulumi.Input<number>, ok?: pulumi.Input<number>, unknown?: pulumi.Input<number>, warning?: pulumi.Input<number>, warningRecovery?: pulumi.Input<number> }>;
    /**
     * The number of hours of the monitor not reporting data before it will automatically resolve
     * from a triggered state. Defaults to false.
     */
    readonly timeoutH?: pulumi.Input<number>;
    /**
     * The type of the monitor, chosen from:
     * * `metric alert`
     * * `service check`
     * * `event alert`
     * * `query alert`
     * * `composite`
     * * `log alert`
     */
    readonly type: pulumi.Input<string>;
}
