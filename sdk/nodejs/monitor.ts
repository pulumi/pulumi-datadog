// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a Datadog monitor resource. This can be used to create and manage Datadog monitors.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * // Create a new Datadog monitor
 * const foo = new datadog.Monitor("foo", {
 *     escalationMessage: "Escalation message @pagerduty",
 *     includeTags: true,
 *     message: "Monitor triggered. Notify: @hipchat-channel",
 *     monitorThresholds: {
 *         critical: "4",
 *         criticalRecovery: "3",
 *         warning: "2",
 *         warningRecovery: "1",
 *     },
 *     name: "Name for monitor foo",
 *     notifyAudit: false,
 *     notifyNoData: false,
 *     query: "avg(last_1h):avg:aws.ec2.cpu{environment:foo,host:foo} by {host} > 4",
 *     renotifyInterval: 60,
 *     tags: [
 *         "foo:bar",
 *         "baz",
 *     ],
 *     type: "metric alert",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import datadog:index/monitor:Monitor bytes_received_localhost 2081
 * ```
 */
export class Monitor extends pulumi.CustomResource {
    /**
     * Get an existing Monitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorState, opts?: pulumi.CustomResourceOptions): Monitor {
        return new Monitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/monitor:Monitor';

    /**
     * Returns true if the given object is an instance of Monitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Monitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Monitor.__pulumiType;
    }

    /**
     * A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log
     * monitors. Defaults to `false`.
     */
    public readonly enableLogsSample!: pulumi.Output<boolean | undefined>;
    /**
     * A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
     */
    public readonly escalationMessage!: pulumi.Output<string | undefined>;
    /**
     * (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer. For example, if the
     * value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data
     * from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have
     * data during evaluation.
     */
    public readonly evaluationDelay!: pulumi.Output<number>;
    /**
     * A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. SLO,
     * composite monitor).
     */
    public readonly forceDelete!: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to
     * `false`.
     */
    public readonly groupbySimpleMonitor!: pulumi.Output<boolean | undefined>;
    /**
     * A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title.
     * Defaults to `true`.
     */
    public readonly includeTags!: pulumi.Output<boolean | undefined>;
    /**
     * A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`.
     */
    public readonly locked!: pulumi.Output<boolean | undefined>;
    /**
     * A message to include with notifications for this monitor.
     */
    public readonly message!: pulumi.Output<string>;
    /**
     * A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are
     * required for, anomaly monitors.
     */
    public readonly monitorThresholdWindows!: pulumi.Output<outputs.MonitorMonitorThresholdWindows | undefined>;
    /**
     * Alert thresholds of the monitor.
     */
    public readonly monitorThresholds!: pulumi.Output<outputs.MonitorMonitorThresholds | undefined>;
    /**
     * Name of Datadog monitor.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The time (in seconds) to skip evaluations for new groups. `new_group_delay` overrides `new_host_delay` if it is set to a
     * nonzero value.
     */
    public readonly newGroupDelay!: pulumi.Output<number | undefined>;
    /**
     * **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before
     * starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors
     * and monitors not grouped by host. Defaults to `300`. The only case when this should be used is to override the default
     * and set `new_host_delay` to zero for monitors grouped by host.
     *
     * @deprecated Use `new_group_delay` except when setting `new_host_delay` to zero.
     */
    public readonly newHostDelay!: pulumi.Output<number | undefined>;
    /**
     * The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes. We
     * recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
     */
    public readonly noDataTimeframe!: pulumi.Output<number | undefined>;
    /**
     * A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
     */
    public readonly notifyAudit!: pulumi.Output<boolean | undefined>;
    /**
     * A boolean indicating whether this monitor will notify when data stops reporting. Defaults to `false`.
     */
    public readonly notifyNoData!: pulumi.Output<boolean | undefined>;
    /**
     * Integer from 1 (high) to 5 (low) indicating alert severity.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending
     * on the monitor type, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for
     * details. `terraform plan` will validate query contents unless `validate` is set to `false`. **Note:** APM latency data
     * is now available as Distribution Metrics. Existing monitors have been migrated automatically but all terraformed
     * monitors can still use the existing metrics. We strongly recommend updating monitor definitions to query the new
     * metrics. To learn more, or to see examples of how to update your terraform definitions to utilize the new distribution
     * metrics, see the [detailed doc](https://docs.datadoghq.com/tracing/guide/ddsketch_trace_metrics/).
     */
    public readonly query!: pulumi.Output<string>;
    /**
     * The number of minutes after the last notification before a monitor will re-notify on the current status. It will only
     * re-notify if it's not resolved.
     */
    public readonly renotifyInterval!: pulumi.Output<number | undefined>;
    /**
     * The number of re-notification messages that should be sent on the current status.
     */
    public readonly renotifyOccurrences!: pulumi.Output<number | undefined>;
    /**
     * The types of statuses for which re-notification messages should be sent.
     */
    public readonly renotifyStatuses!: pulumi.Output<string[] | undefined>;
    /**
     * A boolean indicating whether this monitor needs a full window of data before it's evaluated. We highly recommend you set
     * this to `false` for sparse metrics, otherwise some evaluations will be skipped. Default: `true` for `on average`, `at
     * all times` and `in total` aggregation. `false` otherwise.
     */
    public readonly requireFullWindow!: pulumi.Output<boolean | undefined>;
    public readonly restrictedRoles!: pulumi.Output<string[] | undefined>;
    /**
     * A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors
     * page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The number of hours of the monitor not reporting data before it will automatically resolve from a triggered state.
     */
    public readonly timeoutH!: pulumi.Output<number | undefined>;
    /**
     * The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the
     * Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type
     * cannot be changed after a monitor is created.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * If set to `false`, skip the validation call done during plan.
     */
    public readonly validate!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Monitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorArgs | MonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorState | undefined;
            resourceInputs["enableLogsSample"] = state ? state.enableLogsSample : undefined;
            resourceInputs["escalationMessage"] = state ? state.escalationMessage : undefined;
            resourceInputs["evaluationDelay"] = state ? state.evaluationDelay : undefined;
            resourceInputs["forceDelete"] = state ? state.forceDelete : undefined;
            resourceInputs["groupbySimpleMonitor"] = state ? state.groupbySimpleMonitor : undefined;
            resourceInputs["includeTags"] = state ? state.includeTags : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["monitorThresholdWindows"] = state ? state.monitorThresholdWindows : undefined;
            resourceInputs["monitorThresholds"] = state ? state.monitorThresholds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["newGroupDelay"] = state ? state.newGroupDelay : undefined;
            resourceInputs["newHostDelay"] = state ? state.newHostDelay : undefined;
            resourceInputs["noDataTimeframe"] = state ? state.noDataTimeframe : undefined;
            resourceInputs["notifyAudit"] = state ? state.notifyAudit : undefined;
            resourceInputs["notifyNoData"] = state ? state.notifyNoData : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["renotifyInterval"] = state ? state.renotifyInterval : undefined;
            resourceInputs["renotifyOccurrences"] = state ? state.renotifyOccurrences : undefined;
            resourceInputs["renotifyStatuses"] = state ? state.renotifyStatuses : undefined;
            resourceInputs["requireFullWindow"] = state ? state.requireFullWindow : undefined;
            resourceInputs["restrictedRoles"] = state ? state.restrictedRoles : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeoutH"] = state ? state.timeoutH : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["validate"] = state ? state.validate : undefined;
        } else {
            const args = argsOrState as MonitorArgs | undefined;
            if ((!args || args.message === undefined) && !opts.urn) {
                throw new Error("Missing required property 'message'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.query === undefined) && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["enableLogsSample"] = args ? args.enableLogsSample : undefined;
            resourceInputs["escalationMessage"] = args ? args.escalationMessage : undefined;
            resourceInputs["evaluationDelay"] = args ? args.evaluationDelay : undefined;
            resourceInputs["forceDelete"] = args ? args.forceDelete : undefined;
            resourceInputs["groupbySimpleMonitor"] = args ? args.groupbySimpleMonitor : undefined;
            resourceInputs["includeTags"] = args ? args.includeTags : undefined;
            resourceInputs["locked"] = args ? args.locked : undefined;
            resourceInputs["message"] = args ? args.message : undefined;
            resourceInputs["monitorThresholdWindows"] = args ? args.monitorThresholdWindows : undefined;
            resourceInputs["monitorThresholds"] = args ? args.monitorThresholds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["newGroupDelay"] = args ? args.newGroupDelay : undefined;
            resourceInputs["newHostDelay"] = args ? args.newHostDelay : undefined;
            resourceInputs["noDataTimeframe"] = args ? args.noDataTimeframe : undefined;
            resourceInputs["notifyAudit"] = args ? args.notifyAudit : undefined;
            resourceInputs["notifyNoData"] = args ? args.notifyNoData : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["renotifyInterval"] = args ? args.renotifyInterval : undefined;
            resourceInputs["renotifyOccurrences"] = args ? args.renotifyOccurrences : undefined;
            resourceInputs["renotifyStatuses"] = args ? args.renotifyStatuses : undefined;
            resourceInputs["requireFullWindow"] = args ? args.requireFullWindow : undefined;
            resourceInputs["restrictedRoles"] = args ? args.restrictedRoles : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeoutH"] = args ? args.timeoutH : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["validate"] = args ? args.validate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Monitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Monitor resources.
 */
export interface MonitorState {
    /**
     * A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log
     * monitors. Defaults to `false`.
     */
    enableLogsSample?: pulumi.Input<boolean>;
    /**
     * A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
     */
    escalationMessage?: pulumi.Input<string>;
    /**
     * (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer. For example, if the
     * value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data
     * from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have
     * data during evaluation.
     */
    evaluationDelay?: pulumi.Input<number>;
    /**
     * A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. SLO,
     * composite monitor).
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to
     * `false`.
     */
    groupbySimpleMonitor?: pulumi.Input<boolean>;
    /**
     * A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title.
     * Defaults to `true`.
     */
    includeTags?: pulumi.Input<boolean>;
    /**
     * A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * A message to include with notifications for this monitor.
     */
    message?: pulumi.Input<string>;
    /**
     * A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are
     * required for, anomaly monitors.
     */
    monitorThresholdWindows?: pulumi.Input<inputs.MonitorMonitorThresholdWindows>;
    /**
     * Alert thresholds of the monitor.
     */
    monitorThresholds?: pulumi.Input<inputs.MonitorMonitorThresholds>;
    /**
     * Name of Datadog monitor.
     */
    name?: pulumi.Input<string>;
    /**
     * The time (in seconds) to skip evaluations for new groups. `new_group_delay` overrides `new_host_delay` if it is set to a
     * nonzero value.
     */
    newGroupDelay?: pulumi.Input<number>;
    /**
     * **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before
     * starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors
     * and monitors not grouped by host. Defaults to `300`. The only case when this should be used is to override the default
     * and set `new_host_delay` to zero for monitors grouped by host.
     *
     * @deprecated Use `new_group_delay` except when setting `new_host_delay` to zero.
     */
    newHostDelay?: pulumi.Input<number>;
    /**
     * The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes. We
     * recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
     */
    noDataTimeframe?: pulumi.Input<number>;
    /**
     * A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
     */
    notifyAudit?: pulumi.Input<boolean>;
    /**
     * A boolean indicating whether this monitor will notify when data stops reporting. Defaults to `false`.
     */
    notifyNoData?: pulumi.Input<boolean>;
    /**
     * Integer from 1 (high) to 5 (low) indicating alert severity.
     */
    priority?: pulumi.Input<number>;
    /**
     * The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending
     * on the monitor type, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for
     * details. `terraform plan` will validate query contents unless `validate` is set to `false`. **Note:** APM latency data
     * is now available as Distribution Metrics. Existing monitors have been migrated automatically but all terraformed
     * monitors can still use the existing metrics. We strongly recommend updating monitor definitions to query the new
     * metrics. To learn more, or to see examples of how to update your terraform definitions to utilize the new distribution
     * metrics, see the [detailed doc](https://docs.datadoghq.com/tracing/guide/ddsketch_trace_metrics/).
     */
    query?: pulumi.Input<string>;
    /**
     * The number of minutes after the last notification before a monitor will re-notify on the current status. It will only
     * re-notify if it's not resolved.
     */
    renotifyInterval?: pulumi.Input<number>;
    /**
     * The number of re-notification messages that should be sent on the current status.
     */
    renotifyOccurrences?: pulumi.Input<number>;
    /**
     * The types of statuses for which re-notification messages should be sent.
     */
    renotifyStatuses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A boolean indicating whether this monitor needs a full window of data before it's evaluated. We highly recommend you set
     * this to `false` for sparse metrics, otherwise some evaluations will be skipped. Default: `true` for `on average`, `at
     * all times` and `in total` aggregation. `false` otherwise.
     */
    requireFullWindow?: pulumi.Input<boolean>;
    restrictedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors
     * page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of hours of the monitor not reporting data before it will automatically resolve from a triggered state.
     */
    timeoutH?: pulumi.Input<number>;
    /**
     * The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the
     * Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type
     * cannot be changed after a monitor is created.
     */
    type?: pulumi.Input<string>;
    /**
     * If set to `false`, skip the validation call done during plan.
     */
    validate?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Monitor resource.
 */
export interface MonitorArgs {
    /**
     * A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log
     * monitors. Defaults to `false`.
     */
    enableLogsSample?: pulumi.Input<boolean>;
    /**
     * A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
     */
    escalationMessage?: pulumi.Input<string>;
    /**
     * (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer. For example, if the
     * value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data
     * from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have
     * data during evaluation.
     */
    evaluationDelay?: pulumi.Input<number>;
    /**
     * A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. SLO,
     * composite monitor).
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to
     * `false`.
     */
    groupbySimpleMonitor?: pulumi.Input<boolean>;
    /**
     * A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title.
     * Defaults to `true`.
     */
    includeTags?: pulumi.Input<boolean>;
    /**
     * A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * A message to include with notifications for this monitor.
     */
    message: pulumi.Input<string>;
    /**
     * A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are
     * required for, anomaly monitors.
     */
    monitorThresholdWindows?: pulumi.Input<inputs.MonitorMonitorThresholdWindows>;
    /**
     * Alert thresholds of the monitor.
     */
    monitorThresholds?: pulumi.Input<inputs.MonitorMonitorThresholds>;
    /**
     * Name of Datadog monitor.
     */
    name: pulumi.Input<string>;
    /**
     * The time (in seconds) to skip evaluations for new groups. `new_group_delay` overrides `new_host_delay` if it is set to a
     * nonzero value.
     */
    newGroupDelay?: pulumi.Input<number>;
    /**
     * **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before
     * starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors
     * and monitors not grouped by host. Defaults to `300`. The only case when this should be used is to override the default
     * and set `new_host_delay` to zero for monitors grouped by host.
     *
     * @deprecated Use `new_group_delay` except when setting `new_host_delay` to zero.
     */
    newHostDelay?: pulumi.Input<number>;
    /**
     * The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes. We
     * recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
     */
    noDataTimeframe?: pulumi.Input<number>;
    /**
     * A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
     */
    notifyAudit?: pulumi.Input<boolean>;
    /**
     * A boolean indicating whether this monitor will notify when data stops reporting. Defaults to `false`.
     */
    notifyNoData?: pulumi.Input<boolean>;
    /**
     * Integer from 1 (high) to 5 (low) indicating alert severity.
     */
    priority?: pulumi.Input<number>;
    /**
     * The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending
     * on the monitor type, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for
     * details. `terraform plan` will validate query contents unless `validate` is set to `false`. **Note:** APM latency data
     * is now available as Distribution Metrics. Existing monitors have been migrated automatically but all terraformed
     * monitors can still use the existing metrics. We strongly recommend updating monitor definitions to query the new
     * metrics. To learn more, or to see examples of how to update your terraform definitions to utilize the new distribution
     * metrics, see the [detailed doc](https://docs.datadoghq.com/tracing/guide/ddsketch_trace_metrics/).
     */
    query: pulumi.Input<string>;
    /**
     * The number of minutes after the last notification before a monitor will re-notify on the current status. It will only
     * re-notify if it's not resolved.
     */
    renotifyInterval?: pulumi.Input<number>;
    /**
     * The number of re-notification messages that should be sent on the current status.
     */
    renotifyOccurrences?: pulumi.Input<number>;
    /**
     * The types of statuses for which re-notification messages should be sent.
     */
    renotifyStatuses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A boolean indicating whether this monitor needs a full window of data before it's evaluated. We highly recommend you set
     * this to `false` for sparse metrics, otherwise some evaluations will be skipped. Default: `true` for `on average`, `at
     * all times` and `in total` aggregation. `false` otherwise.
     */
    requireFullWindow?: pulumi.Input<boolean>;
    restrictedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors
     * page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of hours of the monitor not reporting data before it will automatically resolve from a triggered state.
     */
    timeoutH?: pulumi.Input<number>;
    /**
     * The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the
     * Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type
     * cannot be changed after a monitor is created.
     */
    type: pulumi.Input<string>;
    /**
     * If set to `false`, skip the validation call done during plan.
     */
    validate?: pulumi.Input<boolean>;
}
