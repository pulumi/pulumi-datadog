// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Datadog webhook resource. This can be used to create and manage Datadog webhooks.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * // Create a new Datadog webhook
 * const foo = new datadog.Webhook("foo", {
 *     name: "test-webhook",
 *     url: "example.com",
 *     encodeAs: "json",
 *     customHeaders: JSON.stringify({
 *         custom: "header",
 *     }),
 *     payload: JSON.stringify({
 *         custom: "payload",
 *     }),
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import datadog:index/webhook:Webhook foo example-webhook
 * ```
 */
export class Webhook extends pulumi.CustomResource {
    /**
     * Get an existing Webhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebhookState, opts?: pulumi.CustomResourceOptions): Webhook {
        return new Webhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/webhook:Webhook';

    /**
     * Returns true if the given object is an instance of Webhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Webhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Webhook.__pulumiType;
    }

    /**
     * The headers attached to the webhook.
     */
    public readonly customHeaders!: pulumi.Output<string | undefined>;
    /**
     * Encoding type. Valid values are `json`, `form`.
     */
    public readonly encodeAs!: pulumi.Output<string>;
    /**
     * The name of the webhook. It corresponds with `<WEBHOOK_NAME>`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The payload of the webhook.
     */
    public readonly payload!: pulumi.Output<string>;
    /**
     * The URL of the webhook.
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a Webhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebhookArgs | WebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebhookState | undefined;
            resourceInputs["customHeaders"] = state ? state.customHeaders : undefined;
            resourceInputs["encodeAs"] = state ? state.encodeAs : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["payload"] = state ? state.payload : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as WebhookArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["customHeaders"] = args ? args.customHeaders : undefined;
            resourceInputs["encodeAs"] = args ? args.encodeAs : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["payload"] = args ? args.payload : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Webhook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Webhook resources.
 */
export interface WebhookState {
    /**
     * The headers attached to the webhook.
     */
    customHeaders?: pulumi.Input<string>;
    /**
     * Encoding type. Valid values are `json`, `form`.
     */
    encodeAs?: pulumi.Input<string>;
    /**
     * The name of the webhook. It corresponds with `<WEBHOOK_NAME>`.
     */
    name?: pulumi.Input<string>;
    /**
     * The payload of the webhook.
     */
    payload?: pulumi.Input<string>;
    /**
     * The URL of the webhook.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Webhook resource.
 */
export interface WebhookArgs {
    /**
     * The headers attached to the webhook.
     */
    customHeaders?: pulumi.Input<string>;
    /**
     * Encoding type. Valid values are `json`, `form`.
     */
    encodeAs?: pulumi.Input<string>;
    /**
     * The name of the webhook. It corresponds with `<WEBHOOK_NAME>`.
     */
    name: pulumi.Input<string>;
    /**
     * The payload of the webhook.
     */
    payload?: pulumi.Input<string>;
    /**
     * The URL of the webhook.
     */
    url: pulumi.Input<string>;
}
