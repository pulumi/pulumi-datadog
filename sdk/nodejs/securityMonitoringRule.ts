// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog Security Monitoring Rule API resource. This can be used to create and manage Datadog security monitoring rules. To change settings for a default rule use `datadogSecurityDefaultRule` instead.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const myrule = new datadog.SecurityMonitoringRule("myrule", {
 *     cases: [{
 *         condition: "errors > 3 && warnings > 10",
 *         notifications: ["@user"],
 *         status: "high",
 *     }],
 *     enabled: true,
 *     message: "The rule has triggered.",
 *     name: "My rule",
 *     options: {
 *         evaluationWindow: 300,
 *         keepAlive: 600,
 *         maxSignalDuration: 900,
 *     },
 *     queries: [
 *         {
 *             aggregation: "count",
 *             groupByFields: ["host"],
 *             name: "errors",
 *             query: "status:error",
 *         },
 *         {
 *             aggregation: "count",
 *             groupByFields: ["host"],
 *             name: "warnings",
 *             query: "status:warning",
 *         },
 *     ],
 *     tags: ["type:dos"],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Security monitoring rules can be imported using ID, e.g.
 *
 * ```sh
 * $ pulumi import datadog:index/securityMonitoringRule:SecurityMonitoringRule my_rule m0o-hto-lkb
 * ```
 */
export class SecurityMonitoringRule extends pulumi.CustomResource {
    /**
     * Get an existing SecurityMonitoringRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityMonitoringRuleState, opts?: pulumi.CustomResourceOptions): SecurityMonitoringRule {
        return new SecurityMonitoringRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/securityMonitoringRule:SecurityMonitoringRule';

    /**
     * Returns true if the given object is an instance of SecurityMonitoringRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityMonitoringRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityMonitoringRule.__pulumiType;
    }

    /**
     * Cases for generating signals.
     */
    public readonly cases!: pulumi.Output<outputs.SecurityMonitoringRuleCase[] | undefined>;
    /**
     * Whether the rule is enabled. Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Additional queries to filter matched events before they are processed.
     */
    public readonly filters!: pulumi.Output<outputs.SecurityMonitoringRuleFilter[] | undefined>;
    /**
     * Whether the notifications include the triggering group-by values in their title. Defaults to `false`.
     */
    public readonly hasExtendedTitle!: pulumi.Output<boolean | undefined>;
    /**
     * Message for generated signals.
     */
    public readonly message!: pulumi.Output<string>;
    /**
     * Name of the case.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Options on rules.
     */
    public readonly options!: pulumi.Output<outputs.SecurityMonitoringRuleOptions | undefined>;
    /**
     * Query for selecting logs to apply the filtering action.
     */
    public readonly queries!: pulumi.Output<outputs.SecurityMonitoringRuleQuery[] | undefined>;
    /**
     * Queries for selecting logs which are part of the rule.
     */
    public readonly signalQueries!: pulumi.Output<outputs.SecurityMonitoringRuleSignalQuery[] | undefined>;
    /**
     * Tags for generated signals.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Cases for generating signals for third-party rules. Only required and accepted for third-party rules
     */
    public readonly thirdPartyCases!: pulumi.Output<outputs.SecurityMonitoringRuleThirdPartyCase[] | undefined>;
    /**
     * The rule type. Valid values are `applicationSecurity`, `logDetection`, `workloadSecurity`, `signalCorrelation`. Defaults to `"logDetection"`.
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a SecurityMonitoringRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityMonitoringRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityMonitoringRuleArgs | SecurityMonitoringRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityMonitoringRuleState | undefined;
            resourceInputs["cases"] = state ? state.cases : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["hasExtendedTitle"] = state ? state.hasExtendedTitle : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["queries"] = state ? state.queries : undefined;
            resourceInputs["signalQueries"] = state ? state.signalQueries : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["thirdPartyCases"] = state ? state.thirdPartyCases : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SecurityMonitoringRuleArgs | undefined;
            if ((!args || args.message === undefined) && !opts.urn) {
                throw new Error("Missing required property 'message'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["cases"] = args ? args.cases : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["hasExtendedTitle"] = args ? args.hasExtendedTitle : undefined;
            resourceInputs["message"] = args ? args.message : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["queries"] = args ? args.queries : undefined;
            resourceInputs["signalQueries"] = args ? args.signalQueries : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["thirdPartyCases"] = args ? args.thirdPartyCases : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityMonitoringRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityMonitoringRule resources.
 */
export interface SecurityMonitoringRuleState {
    /**
     * Cases for generating signals.
     */
    cases?: pulumi.Input<pulumi.Input<inputs.SecurityMonitoringRuleCase>[]>;
    /**
     * Whether the rule is enabled. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Additional queries to filter matched events before they are processed.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.SecurityMonitoringRuleFilter>[]>;
    /**
     * Whether the notifications include the triggering group-by values in their title. Defaults to `false`.
     */
    hasExtendedTitle?: pulumi.Input<boolean>;
    /**
     * Message for generated signals.
     */
    message?: pulumi.Input<string>;
    /**
     * Name of the case.
     */
    name?: pulumi.Input<string>;
    /**
     * Options on rules.
     */
    options?: pulumi.Input<inputs.SecurityMonitoringRuleOptions>;
    /**
     * Query for selecting logs to apply the filtering action.
     */
    queries?: pulumi.Input<pulumi.Input<inputs.SecurityMonitoringRuleQuery>[]>;
    /**
     * Queries for selecting logs which are part of the rule.
     */
    signalQueries?: pulumi.Input<pulumi.Input<inputs.SecurityMonitoringRuleSignalQuery>[]>;
    /**
     * Tags for generated signals.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cases for generating signals for third-party rules. Only required and accepted for third-party rules
     */
    thirdPartyCases?: pulumi.Input<pulumi.Input<inputs.SecurityMonitoringRuleThirdPartyCase>[]>;
    /**
     * The rule type. Valid values are `applicationSecurity`, `logDetection`, `workloadSecurity`, `signalCorrelation`. Defaults to `"logDetection"`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurityMonitoringRule resource.
 */
export interface SecurityMonitoringRuleArgs {
    /**
     * Cases for generating signals.
     */
    cases?: pulumi.Input<pulumi.Input<inputs.SecurityMonitoringRuleCase>[]>;
    /**
     * Whether the rule is enabled. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Additional queries to filter matched events before they are processed.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.SecurityMonitoringRuleFilter>[]>;
    /**
     * Whether the notifications include the triggering group-by values in their title. Defaults to `false`.
     */
    hasExtendedTitle?: pulumi.Input<boolean>;
    /**
     * Message for generated signals.
     */
    message: pulumi.Input<string>;
    /**
     * Name of the case.
     */
    name: pulumi.Input<string>;
    /**
     * Options on rules.
     */
    options?: pulumi.Input<inputs.SecurityMonitoringRuleOptions>;
    /**
     * Query for selecting logs to apply the filtering action.
     */
    queries?: pulumi.Input<pulumi.Input<inputs.SecurityMonitoringRuleQuery>[]>;
    /**
     * Queries for selecting logs which are part of the rule.
     */
    signalQueries?: pulumi.Input<pulumi.Input<inputs.SecurityMonitoringRuleSignalQuery>[]>;
    /**
     * Tags for generated signals.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cases for generating signals for third-party rules. Only required and accepted for third-party rules
     */
    thirdPartyCases?: pulumi.Input<pulumi.Input<inputs.SecurityMonitoringRuleThirdPartyCase>[]>;
    /**
     * The rule type. Valid values are `applicationSecurity`, `logDetection`, `workloadSecurity`, `signalCorrelation`. Defaults to `"logDetection"`.
     */
    type?: pulumi.Input<string>;
}
