// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog [Logs Pipeline API](https://docs.datadoghq.com/api/v1/logs-pipelines/) resource, which is used to create and manage Datadog logs custom pipelines. Each `datadog.LogsCustomPipeline` resource defines a complete pipeline. The order of the pipelines is maintained in a different resource: `datadog.LogsPipelineOrder`. When creating a new pipeline, you need to **explicitly** add this pipeline to the `datadog.LogsPipelineOrder` resource to track the pipeline. Similarly, when a pipeline needs to be destroyed, remove its references from the `datadog.LogsPipelineOrder` resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const samplePipeline = new datadog.LogsCustomPipeline("sample_pipeline", {
 *     filters: [{
 *         query: "source:foo",
 *     }],
 *     name: "sample pipeline",
 *     isEnabled: true,
 *     processors: [
 *         {
 *             arithmeticProcessor: {
 *                 expression: "(time1 - time2)*1000",
 *                 target: "my_arithmetic",
 *                 isReplaceMissing: true,
 *                 name: "sample arithmetic processor",
 *                 isEnabled: true,
 *             },
 *         },
 *         {
 *             attributeRemapper: {
 *                 sources: ["db.instance"],
 *                 sourceType: "tag",
 *                 target: "db",
 *                 targetType: "attribute",
 *                 targetFormat: "string",
 *                 preserveSource: true,
 *                 overrideOnConflict: false,
 *                 name: "sample attribute processor",
 *                 isEnabled: true,
 *             },
 *         },
 *         {
 *             categoryProcessor: {
 *                 target: "foo.severity",
 *                 categories: [
 *                     {
 *                         name: "debug",
 *                         filter: {
 *                             query: "@severity: \".\"",
 *                         },
 *                     },
 *                     {
 *                         name: "verbose",
 *                         filter: {
 *                             query: "@severity: \"-\"",
 *                         },
 *                     },
 *                 ],
 *                 name: "sample category processor",
 *                 isEnabled: true,
 *             },
 *         },
 *         {
 *             dateRemapper: {
 *                 sources: [
 *                     "_timestamp",
 *                     "published_date",
 *                 ],
 *                 name: "sample date remapper",
 *                 isEnabled: true,
 *             },
 *         },
 *         {
 *             geoIpParser: {
 *                 sources: ["network.client.ip"],
 *                 target: "network.client.geoip",
 *                 name: "sample geo ip parser",
 *                 isEnabled: true,
 *             },
 *         },
 *         {
 *             grokParser: {
 *                 samples: ["sample log 1"],
 *                 source: "message",
 *                 grok: {
 *                     supportRules: "",
 *                     matchRules: "Rule %{word:my_word2} %{number:my_float2}",
 *                 },
 *                 name: "sample grok parser",
 *                 isEnabled: true,
 *             },
 *         },
 *         {
 *             lookupProcessor: {
 *                 source: "service_id",
 *                 target: "service_name",
 *                 lookupTables: ["1,my service"],
 *                 defaultLookup: "unknown service",
 *                 name: "sample lookup processor",
 *                 isEnabled: true,
 *             },
 *         },
 *         {
 *             messageRemapper: {
 *                 sources: ["msg"],
 *                 name: "sample message remapper",
 *                 isEnabled: true,
 *             },
 *         },
 *         {
 *             pipeline: {
 *                 filters: [{
 *                     query: "source:foo",
 *                 }],
 *                 processors: [{
 *                     urlParser: {
 *                         name: "sample url parser",
 *                         sources: [
 *                             "url",
 *                             "extra",
 *                         ],
 *                         target: "http_url",
 *                         normalizeEndingSlashes: true,
 *                     },
 *                 }],
 *                 name: "nested pipeline",
 *                 isEnabled: true,
 *             },
 *         },
 *         {
 *             serviceRemapper: {
 *                 sources: ["service"],
 *                 name: "sample service remapper",
 *                 isEnabled: true,
 *             },
 *         },
 *         {
 *             statusRemapper: {
 *                 sources: [
 *                     "info",
 *                     "trace",
 *                 ],
 *                 name: "sample status remapper",
 *                 isEnabled: true,
 *             },
 *         },
 *         {
 *             stringBuilderProcessor: {
 *                 target: "user_activity",
 *                 template: "%{user.name} logged in at %{timestamp}",
 *                 name: "sample string builder processor",
 *                 isEnabled: true,
 *                 isReplaceMissing: false,
 *             },
 *         },
 *         {
 *             traceIdRemapper: {
 *                 sources: ["dd.trace_id"],
 *                 name: "sample trace id remapper",
 *                 isEnabled: true,
 *             },
 *         },
 *         {
 *             userAgentParser: {
 *                 sources: [
 *                     "user",
 *                     "agent",
 *                 ],
 *                 target: "http_agent",
 *                 isEncoded: false,
 *                 name: "sample user agent parser",
 *                 isEnabled: true,
 *             },
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * To find the pipeline ID, click the "edit" button in the UI to open the pipeline details.
 *
 * The pipeline ID is the last part of the URL.
 *
 * ```sh
 * $ pulumi import datadog:index/logsCustomPipeline:LogsCustomPipeline name> <pipelineID>
 * ```
 */
export class LogsCustomPipeline extends pulumi.CustomResource {
    /**
     * Get an existing LogsCustomPipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogsCustomPipelineState, opts?: pulumi.CustomResourceOptions): LogsCustomPipeline {
        return new LogsCustomPipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/logsCustomPipeline:LogsCustomPipeline';

    /**
     * Returns true if the given object is an instance of LogsCustomPipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogsCustomPipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogsCustomPipeline.__pulumiType;
    }

    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly filters: pulumi.Output<outputs.LogsCustomPipelineFilter[]>;
    declare public readonly isEnabled: pulumi.Output<boolean | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly processors: pulumi.Output<outputs.LogsCustomPipelineProcessor[] | undefined>;
    declare public readonly tags: pulumi.Output<string[]>;

    /**
     * Create a LogsCustomPipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogsCustomPipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogsCustomPipelineArgs | LogsCustomPipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogsCustomPipelineState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["filters"] = state?.filters;
            resourceInputs["isEnabled"] = state?.isEnabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["processors"] = state?.processors;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as LogsCustomPipelineArgs | undefined;
            if (args?.filters === undefined && !opts.urn) {
                throw new Error("Missing required property 'filters'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["filters"] = args?.filters;
            resourceInputs["isEnabled"] = args?.isEnabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["processors"] = args?.processors;
            resourceInputs["tags"] = args?.tags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogsCustomPipeline.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogsCustomPipeline resources.
 */
export interface LogsCustomPipelineState {
    description?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.LogsCustomPipelineFilter>[]>;
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    processors?: pulumi.Input<pulumi.Input<inputs.LogsCustomPipelineProcessor>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a LogsCustomPipeline resource.
 */
export interface LogsCustomPipelineArgs {
    description?: pulumi.Input<string>;
    filters: pulumi.Input<pulumi.Input<inputs.LogsCustomPipelineFilter>[]>;
    isEnabled?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    processors?: pulumi.Input<pulumi.Input<inputs.LogsCustomPipelineProcessor>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
