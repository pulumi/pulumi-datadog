// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog [Logs Archive API](https://docs.datadoghq.com/api/v2/logs-archives/) resource, which is used to create and manage Datadog logs archives.
 *
 * ## Example Usage
 *
 * Create a Datadog logs archive:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const myS3Archive = new datadog.LogsArchive("my_s3_archive", {
 *     name: "my s3 archive",
 *     query: "service:myservice",
 *     s3: {
 *         account_id: "001234567888",
 *         bucket: "my-bucket",
 *         path: "/path/foo",
 *         role_name: "my-role-name",
 *     },
 * });
 * ```
 */
export class LogsArchive extends pulumi.CustomResource {
    /**
     * Get an existing LogsArchive resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogsArchiveState, opts?: pulumi.CustomResourceOptions): LogsArchive {
        return new LogsArchive(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/logsArchive:LogsArchive';

    /**
     * Returns true if the given object is an instance of LogsArchive.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogsArchive {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogsArchive.__pulumiType;
    }

    /**
     * Definition of an azure archive.
     */
    public readonly azure!: pulumi.Output<outputs.LogsArchiveAzure | undefined>;
    /**
     * Definition of an gcs archive.
     */
    public readonly gcs!: pulumi.Output<outputs.LogsArchiveGcs | undefined>;
    /**
     * Your archive name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The archive query/filter. Logs matching this query are included in the archive.
     */
    public readonly query!: pulumi.Output<string>;
    /**
     * Definition of an s3 archive.
     */
    public readonly s3!: pulumi.Output<outputs.LogsArchiveS3 | undefined>;

    /**
     * Create a LogsArchive resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogsArchiveArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogsArchiveArgs | LogsArchiveState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as LogsArchiveState | undefined;
            inputs["azure"] = state ? state.azure : undefined;
            inputs["gcs"] = state ? state.gcs : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["query"] = state ? state.query : undefined;
            inputs["s3"] = state ? state.s3 : undefined;
        } else {
            const args = argsOrState as LogsArchiveArgs | undefined;
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            if (!args || args.query === undefined) {
                throw new Error("Missing required property 'query'");
            }
            inputs["azure"] = args ? args.azure : undefined;
            inputs["gcs"] = args ? args.gcs : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["query"] = args ? args.query : undefined;
            inputs["s3"] = args ? args.s3 : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LogsArchive.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogsArchive resources.
 */
export interface LogsArchiveState {
    /**
     * Definition of an azure archive.
     */
    readonly azure?: pulumi.Input<inputs.LogsArchiveAzure>;
    /**
     * Definition of an gcs archive.
     */
    readonly gcs?: pulumi.Input<inputs.LogsArchiveGcs>;
    /**
     * Your archive name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The archive query/filter. Logs matching this query are included in the archive.
     */
    readonly query?: pulumi.Input<string>;
    /**
     * Definition of an s3 archive.
     */
    readonly s3?: pulumi.Input<inputs.LogsArchiveS3>;
}

/**
 * The set of arguments for constructing a LogsArchive resource.
 */
export interface LogsArchiveArgs {
    /**
     * Definition of an azure archive.
     */
    readonly azure?: pulumi.Input<inputs.LogsArchiveAzure>;
    /**
     * Definition of an gcs archive.
     */
    readonly gcs?: pulumi.Input<inputs.LogsArchiveGcs>;
    /**
     * Your archive name.
     */
    readonly name: pulumi.Input<string>;
    /**
     * The archive query/filter. Logs matching this query are included in the archive.
     */
    readonly query: pulumi.Input<string>;
    /**
     * Definition of an s3 archive.
     */
    readonly s3?: pulumi.Input<inputs.LogsArchiveS3>;
}
