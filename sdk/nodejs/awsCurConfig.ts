// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog AWS CUR (Cost and Usage Report) configuration resource. This enables Datadog Cloud Cost Management to access your AWS billing data by configuring the connection to your AWS Cost and Usage Report. **Prerequisites**: An active Datadog AWS integration, existing AWS Cost and Usage Report, and proper S3 bucket permissions.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import datadog:index/awsCurConfig:AwsCurConfig aws_cur_report <cloud_account_id>
 * ```
 */
export class AwsCurConfig extends pulumi.CustomResource {
    /**
     * Get an existing AwsCurConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsCurConfigState, opts?: pulumi.CustomResourceOptions): AwsCurConfig {
        return new AwsCurConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/awsCurConfig:AwsCurConfig';

    /**
     * Returns true if the given object is an instance of AwsCurConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsCurConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsCurConfig.__pulumiType;
    }

    declare public readonly accountFilters: pulumi.Output<outputs.AwsCurConfigAccountFilters | undefined>;
    /**
     * The AWS account ID of your billing/payer account. For AWS Organizations, this is typically the management account ID.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * The S3 bucket name where your AWS Cost and Usage Report files are stored. This bucket must have appropriate IAM permissions for Datadog access and should be in the same AWS account as the CUR report.
     */
    declare public readonly bucketName: pulumi.Output<string>;
    /**
     * The AWS region where the S3 bucket containing your Cost and Usage Report is located (e.g., us-east-1, eu-west-1).
     */
    declare public readonly bucketRegion: pulumi.Output<string | undefined>;
    /**
     * The exact name of your AWS Cost and Usage Report as configured in AWS Billing preferences. This must match the report name exactly as it appears in your AWS billing settings.
     */
    declare public readonly reportName: pulumi.Output<string>;
    /**
     * The S3 key prefix where your Cost and Usage Report files are stored within the bucket (e.g., 'cur-reports/', 'billing/cur/').
     */
    declare public readonly reportPrefix: pulumi.Output<string>;

    /**
     * Create a AwsCurConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsCurConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsCurConfigArgs | AwsCurConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsCurConfigState | undefined;
            resourceInputs["accountFilters"] = state?.accountFilters;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["bucketName"] = state?.bucketName;
            resourceInputs["bucketRegion"] = state?.bucketRegion;
            resourceInputs["reportName"] = state?.reportName;
            resourceInputs["reportPrefix"] = state?.reportPrefix;
        } else {
            const args = argsOrState as AwsCurConfigArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.bucketName === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if (args?.reportName === undefined && !opts.urn) {
                throw new Error("Missing required property 'reportName'");
            }
            if (args?.reportPrefix === undefined && !opts.urn) {
                throw new Error("Missing required property 'reportPrefix'");
            }
            resourceInputs["accountFilters"] = args?.accountFilters;
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["bucketName"] = args?.bucketName;
            resourceInputs["bucketRegion"] = args?.bucketRegion;
            resourceInputs["reportName"] = args?.reportName;
            resourceInputs["reportPrefix"] = args?.reportPrefix;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsCurConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AwsCurConfig resources.
 */
export interface AwsCurConfigState {
    accountFilters?: pulumi.Input<inputs.AwsCurConfigAccountFilters>;
    /**
     * The AWS account ID of your billing/payer account. For AWS Organizations, this is typically the management account ID.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The S3 bucket name where your AWS Cost and Usage Report files are stored. This bucket must have appropriate IAM permissions for Datadog access and should be in the same AWS account as the CUR report.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * The AWS region where the S3 bucket containing your Cost and Usage Report is located (e.g., us-east-1, eu-west-1).
     */
    bucketRegion?: pulumi.Input<string>;
    /**
     * The exact name of your AWS Cost and Usage Report as configured in AWS Billing preferences. This must match the report name exactly as it appears in your AWS billing settings.
     */
    reportName?: pulumi.Input<string>;
    /**
     * The S3 key prefix where your Cost and Usage Report files are stored within the bucket (e.g., 'cur-reports/', 'billing/cur/').
     */
    reportPrefix?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsCurConfig resource.
 */
export interface AwsCurConfigArgs {
    accountFilters?: pulumi.Input<inputs.AwsCurConfigAccountFilters>;
    /**
     * The AWS account ID of your billing/payer account. For AWS Organizations, this is typically the management account ID.
     */
    accountId: pulumi.Input<string>;
    /**
     * The S3 bucket name where your AWS Cost and Usage Report files are stored. This bucket must have appropriate IAM permissions for Datadog access and should be in the same AWS account as the CUR report.
     */
    bucketName: pulumi.Input<string>;
    /**
     * The AWS region where the S3 bucket containing your Cost and Usage Report is located (e.g., us-east-1, eu-west-1).
     */
    bucketRegion?: pulumi.Input<string>;
    /**
     * The exact name of your AWS Cost and Usage Report as configured in AWS Billing preferences. This must match the report name exactly as it appears in your AWS billing settings.
     */
    reportName: pulumi.Input<string>;
    /**
     * The S3 key prefix where your Cost and Usage Report files are stored within the bucket (e.g., 'cur-reports/', 'billing/cur/').
     */
    reportPrefix: pulumi.Input<string>;
}
