// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve information about an existing dashboard list, for use in other resources. In particular, it can be used in a dashboard to register it in the list.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const test = datadog.getDashboardList({
 *     name: "My super list",
 * });
 * // Create a dashboard and register it in the list above.
 * const time = new datadog.Dashboard("time", {
 *     dashboardLists: [test.then(test => test.id)],
 *     description: "Created using the Datadog provider in Pulumi",
 *     isReadOnly: true,
 *     layoutType: "ordered",
 *     title: "TF Test Layout Dashboard",
 *     widgets: [{
 *         alertGraphDefinition: {
 *             alertId: "1234",
 *             liveSpan: "1h",
 *             title: "Widget Title",
 *             vizType: "timeseries",
 *         },
 *     }],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getDashboardList(args: GetDashboardListArgs, opts?: pulumi.InvokeOptions): Promise<GetDashboardListResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("datadog:index/getDashboardList:getDashboardList", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getDashboardList.
 */
export interface GetDashboardListArgs {
    /**
     * A dashboard list name to limit the search.
     */
    name: string;
}

/**
 * A collection of values returned by getDashboardList.
 */
export interface GetDashboardListResult {
    /**
     * The ID of this resource.
     */
    readonly id: string;
    /**
     * A dashboard list name to limit the search.
     */
    readonly name: string;
}
/**
 * Use this data source to retrieve information about an existing dashboard list, for use in other resources. In particular, it can be used in a dashboard to register it in the list.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const test = datadog.getDashboardList({
 *     name: "My super list",
 * });
 * // Create a dashboard and register it in the list above.
 * const time = new datadog.Dashboard("time", {
 *     dashboardLists: [test.then(test => test.id)],
 *     description: "Created using the Datadog provider in Pulumi",
 *     isReadOnly: true,
 *     layoutType: "ordered",
 *     title: "TF Test Layout Dashboard",
 *     widgets: [{
 *         alertGraphDefinition: {
 *             alertId: "1234",
 *             liveSpan: "1h",
 *             title: "Widget Title",
 *             vizType: "timeseries",
 *         },
 *     }],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getDashboardListOutput(args: GetDashboardListOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDashboardListResult> {
    return pulumi.output(args).apply((a: any) => getDashboardList(a, opts))
}

/**
 * A collection of arguments for invoking getDashboardList.
 */
export interface GetDashboardListOutputArgs {
    /**
     * A dashboard list name to limit the search.
     */
    name: pulumi.Input<string>;
}
