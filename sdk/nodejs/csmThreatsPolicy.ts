// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Datadog CSM Threats policy API resource.
 */
export class CsmThreatsPolicy extends pulumi.CustomResource {
    /**
     * Get an existing CsmThreatsPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CsmThreatsPolicyState, opts?: pulumi.CustomResourceOptions): CsmThreatsPolicy {
        return new CsmThreatsPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/csmThreatsPolicy:CsmThreatsPolicy';

    /**
     * Returns true if the given object is an instance of CsmThreatsPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CsmThreatsPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CsmThreatsPolicy.__pulumiType;
    }

    /**
     * A description for the policy.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Indicates whether the policy is enabled. Defaults to `false`.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Host tags that define where the policy is deployed. Inner values are ANDed, outer arrays are ORed.
     */
    public readonly hostTagsLists!: pulumi.Output<string[][] | undefined>;
    /**
     * The name of the policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Host tags that define where the policy is deployed. Deprecated, use host*tags*lists instead.
     */
    public readonly tags!: pulumi.Output<string[]>;

    /**
     * Create a CsmThreatsPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CsmThreatsPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CsmThreatsPolicyArgs | CsmThreatsPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CsmThreatsPolicyState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["hostTagsLists"] = state ? state.hostTagsLists : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as CsmThreatsPolicyArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["hostTagsLists"] = args ? args.hostTagsLists : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CsmThreatsPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CsmThreatsPolicy resources.
 */
export interface CsmThreatsPolicyState {
    /**
     * A description for the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether the policy is enabled. Defaults to `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Host tags that define where the policy is deployed. Inner values are ANDed, outer arrays are ORed.
     */
    hostTagsLists?: pulumi.Input<pulumi.Input<pulumi.Input<string>[]>[]>;
    /**
     * The name of the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Host tags that define where the policy is deployed. Deprecated, use host*tags*lists instead.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a CsmThreatsPolicy resource.
 */
export interface CsmThreatsPolicyArgs {
    /**
     * A description for the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether the policy is enabled. Defaults to `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Host tags that define where the policy is deployed. Inner values are ANDed, outer arrays are ORed.
     */
    hostTagsLists?: pulumi.Input<pulumi.Input<pulumi.Input<string>[]>[]>;
    /**
     * The name of the policy.
     */
    name: pulumi.Input<string>;
    /**
     * Host tags that define where the policy is deployed. Deprecated, use host*tags*lists instead.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
