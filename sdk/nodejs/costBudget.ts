// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog Cost Budget resource.
 */
export class CostBudget extends pulumi.CustomResource {
    /**
     * Get an existing CostBudget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CostBudgetState, opts?: pulumi.CustomResourceOptions): CostBudget {
        return new CostBudget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/costBudget:CostBudget';

    /**
     * Returns true if the given object is an instance of CostBudget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CostBudget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CostBudget.__pulumiType;
    }

    /**
     * The ID of the budget.
     */
    declare public readonly budgetId: pulumi.Output<string>;
    /**
     * The month when the budget ends (YYYYMM).
     */
    declare public readonly endMonth: pulumi.Output<number>;
    /**
     * The entries of the budget.
     */
    declare public readonly entries: pulumi.Output<outputs.CostBudgetEntry[] | undefined>;
    /**
     * The cost query used to track against the budget.
     */
    declare public readonly metricsQuery: pulumi.Output<string>;
    /**
     * The name of the budget.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The month when the budget starts (YYYYMM).
     */
    declare public readonly startMonth: pulumi.Output<number>;
    /**
     * The sum of all budget entries' amounts.
     */
    declare public /*out*/ readonly totalAmount: pulumi.Output<number>;

    /**
     * Create a CostBudget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CostBudgetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CostBudgetArgs | CostBudgetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CostBudgetState | undefined;
            resourceInputs["budgetId"] = state?.budgetId;
            resourceInputs["endMonth"] = state?.endMonth;
            resourceInputs["entries"] = state?.entries;
            resourceInputs["metricsQuery"] = state?.metricsQuery;
            resourceInputs["name"] = state?.name;
            resourceInputs["startMonth"] = state?.startMonth;
            resourceInputs["totalAmount"] = state?.totalAmount;
        } else {
            const args = argsOrState as CostBudgetArgs | undefined;
            if (args?.endMonth === undefined && !opts.urn) {
                throw new Error("Missing required property 'endMonth'");
            }
            if (args?.metricsQuery === undefined && !opts.urn) {
                throw new Error("Missing required property 'metricsQuery'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.startMonth === undefined && !opts.urn) {
                throw new Error("Missing required property 'startMonth'");
            }
            resourceInputs["budgetId"] = args?.budgetId;
            resourceInputs["endMonth"] = args?.endMonth;
            resourceInputs["entries"] = args?.entries;
            resourceInputs["metricsQuery"] = args?.metricsQuery;
            resourceInputs["name"] = args?.name;
            resourceInputs["startMonth"] = args?.startMonth;
            resourceInputs["totalAmount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CostBudget.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CostBudget resources.
 */
export interface CostBudgetState {
    /**
     * The ID of the budget.
     */
    budgetId?: pulumi.Input<string>;
    /**
     * The month when the budget ends (YYYYMM).
     */
    endMonth?: pulumi.Input<number>;
    /**
     * The entries of the budget.
     */
    entries?: pulumi.Input<pulumi.Input<inputs.CostBudgetEntry>[]>;
    /**
     * The cost query used to track against the budget.
     */
    metricsQuery?: pulumi.Input<string>;
    /**
     * The name of the budget.
     */
    name?: pulumi.Input<string>;
    /**
     * The month when the budget starts (YYYYMM).
     */
    startMonth?: pulumi.Input<number>;
    /**
     * The sum of all budget entries' amounts.
     */
    totalAmount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CostBudget resource.
 */
export interface CostBudgetArgs {
    /**
     * The ID of the budget.
     */
    budgetId?: pulumi.Input<string>;
    /**
     * The month when the budget ends (YYYYMM).
     */
    endMonth: pulumi.Input<number>;
    /**
     * The entries of the budget.
     */
    entries?: pulumi.Input<pulumi.Input<inputs.CostBudgetEntry>[]>;
    /**
     * The cost query used to track against the budget.
     */
    metricsQuery: pulumi.Input<string>;
    /**
     * The name of the budget.
     */
    name: pulumi.Input<string>;
    /**
     * The month when the budget starts (YYYYMM).
     */
    startMonth: pulumi.Input<number>;
}
