// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Datadog IntegrationFastlyService resource. This can be used to create and manage Datadog integration_fastly_service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const foo = new datadog.fastly.IntegrationAccount("foo", {
 *     apiKey: "ABCDEFG123",
 *     name: "test-name",
 * });
 * // Create new integration_fastly_service resource
 * const fooIntegrationService = new datadog.fastly.IntegrationService("foo", {
 *     accountId: foo.id,
 *     tags: [
 *         "mytag",
 *         "mytag2:myvalue",
 *     ],
 *     serviceId: "my-service-id",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import datadog:fastly/integrationService:IntegrationService new_list "account-id:service-id"
 * ```
 */
export class IntegrationService extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationServiceState, opts?: pulumi.CustomResourceOptions): IntegrationService {
        return new IntegrationService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:fastly/integrationService:IntegrationService';

    /**
     * Returns true if the given object is an instance of IntegrationService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationService.__pulumiType;
    }

    /**
     * Fastly Account id.
     */
    public readonly accountId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Fastly service.
     */
    public readonly serviceId!: pulumi.Output<string>;
    /**
     * A list of tags for the Fastly service.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a IntegrationService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationServiceArgs | IntegrationServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationServiceState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as IntegrationServiceArgs | undefined;
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IntegrationService resources.
 */
export interface IntegrationServiceState {
    /**
     * Fastly Account id.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The ID of the Fastly service.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * A list of tags for the Fastly service.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a IntegrationService resource.
 */
export interface IntegrationServiceArgs {
    /**
     * Fastly Account id.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The ID of the Fastly service.
     */
    serviceId: pulumi.Input<string>;
    /**
     * A list of tags for the Fastly service.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
