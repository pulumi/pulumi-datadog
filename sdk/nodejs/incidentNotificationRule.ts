// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog incident notification rule resource. This can be used to create and manage Datadog incident notification rules.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const example = new datadog.IncidentType("example", {
 *     name: "My Incident Type",
 *     description: "Incident type for critical production issues",
 * });
 * const exampleIncidentNotificationTemplate = new datadog.IncidentNotificationTemplate("example", {
 *     name: "My Notification Template",
 *     subject: "SEV-1 Incident: {{incident.title}}",
 *     content: `An incident has been declared.
 *
 * Title: {{incident.title}}
 * Severity: {{incident.severity}}
 * Status: {{incident.status}}
 *
 * Please join the incident channel for updates.
 * `,
 *     category: "alert",
 *     incidentType: example.id,
 * });
 * const exampleIncidentNotificationRule = new datadog.IncidentNotificationRule("example", {
 *     enabled: true,
 *     trigger: "incident_created_trigger",
 *     visibility: "organization",
 *     handles: [
 *         "@team-email@company.com",
 *         "@slack-channel-alerts",
 *         "@pagerduty-service",
 *     ],
 *     conditions: [
 *         {
 *             field: "severity",
 *             values: [
 *                 "SEV-1",
 *                 "SEV-2",
 *             ],
 *         },
 *         {
 *             field: "services",
 *             values: [
 *                 "web-service",
 *                 "api-service",
 *                 "database-service",
 *             ],
 *         },
 *     ],
 *     renotifyOns: [
 *         "status",
 *         "severity",
 *     ],
 *     incidentType: example.id,
 *     notificationTemplate: exampleIncidentNotificationTemplate.id,
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import datadog:index/incidentNotificationRule:IncidentNotificationRule example "00000000-0000-0000-0000-000000000000"
 * ```
 */
export class IncidentNotificationRule extends pulumi.CustomResource {
    /**
     * Get an existing IncidentNotificationRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IncidentNotificationRuleState, opts?: pulumi.CustomResourceOptions): IncidentNotificationRule {
        return new IncidentNotificationRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/incidentNotificationRule:IncidentNotificationRule';

    /**
     * Returns true if the given object is an instance of IncidentNotificationRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IncidentNotificationRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IncidentNotificationRule.__pulumiType;
    }

    /**
     * The conditions that trigger this notification rule. At least one condition is required.
     */
    declare public readonly conditions: pulumi.Output<outputs.IncidentNotificationRuleCondition[] | undefined>;
    /**
     * Timestamp when the notification rule was created.
     */
    declare public /*out*/ readonly created: pulumi.Output<string>;
    /**
     * Whether the notification rule is enabled. Defaults to `false`.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * The notification handles (targets) for this rule. Examples: @team-email@company.com, @slack-channel.
     */
    declare public readonly handles: pulumi.Output<string[]>;
    /**
     * The ID of the incident type this notification rule is associated with.
     */
    declare public readonly incidentType: pulumi.Output<string>;
    /**
     * Timestamp when the notification rule was last modified.
     */
    declare public /*out*/ readonly modified: pulumi.Output<string>;
    /**
     * The ID of the notification template to use for this rule.
     */
    declare public readonly notificationTemplate: pulumi.Output<string | undefined>;
    /**
     * List of incident fields that trigger re-notification when changed. Valid values are: status, severity, customer*impact, title, description, detected, root*cause, services, state.
     */
    declare public readonly renotifyOns: pulumi.Output<string[] | undefined>;
    /**
     * The trigger event for this notification rule. Valid values are: incident*created*trigger, incident*saved*trigger.
     */
    declare public readonly trigger: pulumi.Output<string>;
    /**
     * The visibility of the notification rule. Valid values are: all, organization, private. Defaults to organization.
     */
    declare public readonly visibility: pulumi.Output<string>;

    /**
     * Create a IncidentNotificationRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IncidentNotificationRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IncidentNotificationRuleArgs | IncidentNotificationRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IncidentNotificationRuleState | undefined;
            resourceInputs["conditions"] = state?.conditions;
            resourceInputs["created"] = state?.created;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["handles"] = state?.handles;
            resourceInputs["incidentType"] = state?.incidentType;
            resourceInputs["modified"] = state?.modified;
            resourceInputs["notificationTemplate"] = state?.notificationTemplate;
            resourceInputs["renotifyOns"] = state?.renotifyOns;
            resourceInputs["trigger"] = state?.trigger;
            resourceInputs["visibility"] = state?.visibility;
        } else {
            const args = argsOrState as IncidentNotificationRuleArgs | undefined;
            if (args?.handles === undefined && !opts.urn) {
                throw new Error("Missing required property 'handles'");
            }
            if (args?.incidentType === undefined && !opts.urn) {
                throw new Error("Missing required property 'incidentType'");
            }
            if (args?.trigger === undefined && !opts.urn) {
                throw new Error("Missing required property 'trigger'");
            }
            resourceInputs["conditions"] = args?.conditions;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["handles"] = args?.handles;
            resourceInputs["incidentType"] = args?.incidentType;
            resourceInputs["notificationTemplate"] = args?.notificationTemplate;
            resourceInputs["renotifyOns"] = args?.renotifyOns;
            resourceInputs["trigger"] = args?.trigger;
            resourceInputs["visibility"] = args?.visibility;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["modified"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IncidentNotificationRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IncidentNotificationRule resources.
 */
export interface IncidentNotificationRuleState {
    /**
     * The conditions that trigger this notification rule. At least one condition is required.
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.IncidentNotificationRuleCondition>[]>;
    /**
     * Timestamp when the notification rule was created.
     */
    created?: pulumi.Input<string>;
    /**
     * Whether the notification rule is enabled. Defaults to `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The notification handles (targets) for this rule. Examples: @team-email@company.com, @slack-channel.
     */
    handles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the incident type this notification rule is associated with.
     */
    incidentType?: pulumi.Input<string>;
    /**
     * Timestamp when the notification rule was last modified.
     */
    modified?: pulumi.Input<string>;
    /**
     * The ID of the notification template to use for this rule.
     */
    notificationTemplate?: pulumi.Input<string>;
    /**
     * List of incident fields that trigger re-notification when changed. Valid values are: status, severity, customer*impact, title, description, detected, root*cause, services, state.
     */
    renotifyOns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The trigger event for this notification rule. Valid values are: incident*created*trigger, incident*saved*trigger.
     */
    trigger?: pulumi.Input<string>;
    /**
     * The visibility of the notification rule. Valid values are: all, organization, private. Defaults to organization.
     */
    visibility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IncidentNotificationRule resource.
 */
export interface IncidentNotificationRuleArgs {
    /**
     * The conditions that trigger this notification rule. At least one condition is required.
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.IncidentNotificationRuleCondition>[]>;
    /**
     * Whether the notification rule is enabled. Defaults to `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The notification handles (targets) for this rule. Examples: @team-email@company.com, @slack-channel.
     */
    handles: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the incident type this notification rule is associated with.
     */
    incidentType: pulumi.Input<string>;
    /**
     * The ID of the notification template to use for this rule.
     */
    notificationTemplate?: pulumi.Input<string>;
    /**
     * List of incident fields that trigger re-notification when changed. Valid values are: status, severity, customer*impact, title, description, detected, root*cause, services, state.
     */
    renotifyOns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The trigger event for this notification rule. Valid values are: incident*created*trigger, incident*saved*trigger.
     */
    trigger: pulumi.Input<string>;
    /**
     * The visibility of the notification rule. Valid values are: all, organization, private. Defaults to organization.
     */
    visibility?: pulumi.Input<string>;
}
