// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a Datadog downtime resource. This can be used to create and manage Datadog downtimes.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * // Example: downtime for all monitors
 * // Create a new daily 1700-0900 Datadog downtime for all monitors
 * const foo = new datadog.Downtime("foo", {
 *     end: 1483365600,
 *     recurrence: {
 *         period: 1,
 *         type: "days",
 *     },
 *     scopes: ["*"],
 *     start: 1483308000,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import datadog:index/downtime:Downtime bytes_received_localhost 2081
 * ```
 */
export class Downtime extends pulumi.CustomResource {
    /**
     * Get an existing Downtime resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DowntimeState, opts?: pulumi.CustomResourceOptions): Downtime {
        return new Downtime(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/downtime:Downtime';

    /**
     * Returns true if the given object is an instance of Downtime.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Downtime {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Downtime.__pulumiType;
    }

    /**
     * When true indicates this downtime is being actively applied
     */
    public /*out*/ readonly active!: pulumi.Output<boolean>;
    /**
     * When true indicates this downtime is not being applied
     */
    public /*out*/ readonly disabled!: pulumi.Output<boolean>;
    /**
     * Optionally specify an end date when this downtime should expire
     */
    public readonly end!: pulumi.Output<number | undefined>;
    /**
     * String representing date and time to end the downtime in RFC3339 format.
     */
    public readonly endDate!: pulumi.Output<string | undefined>;
    /**
     * An optional message to provide when creating the downtime, can include notification handles
     */
    public readonly message!: pulumi.Output<string | undefined>;
    /**
     * When specified, this downtime will only apply to this monitor
     */
    public readonly monitorId!: pulumi.Output<number | undefined>;
    /**
     * A list of monitor tags (up to 25), i.e. tags that are applied directly to monitors to which the downtime applies
     */
    public readonly monitorTags!: pulumi.Output<string[] | undefined>;
    /**
     * Optional recurring schedule for this downtime
     */
    public readonly recurrence!: pulumi.Output<outputs.DowntimeRecurrence | undefined>;
    /**
     * specify the group scope to which this downtime applies. For everything use '*'
     */
    public readonly scopes!: pulumi.Output<string[]>;
    /**
     * Specify when this downtime should start
     */
    public readonly start!: pulumi.Output<number | undefined>;
    /**
     * String representing date and time to start the downtime in RFC3339 format.
     */
    public readonly startDate!: pulumi.Output<string | undefined>;
    /**
     * The timezone for the downtime, default UTC
     */
    public readonly timezone!: pulumi.Output<string | undefined>;

    /**
     * Create a Downtime resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DowntimeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DowntimeArgs | DowntimeState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DowntimeState | undefined;
            inputs["active"] = state ? state.active : undefined;
            inputs["disabled"] = state ? state.disabled : undefined;
            inputs["end"] = state ? state.end : undefined;
            inputs["endDate"] = state ? state.endDate : undefined;
            inputs["message"] = state ? state.message : undefined;
            inputs["monitorId"] = state ? state.monitorId : undefined;
            inputs["monitorTags"] = state ? state.monitorTags : undefined;
            inputs["recurrence"] = state ? state.recurrence : undefined;
            inputs["scopes"] = state ? state.scopes : undefined;
            inputs["start"] = state ? state.start : undefined;
            inputs["startDate"] = state ? state.startDate : undefined;
            inputs["timezone"] = state ? state.timezone : undefined;
        } else {
            const args = argsOrState as DowntimeArgs | undefined;
            if ((!args || args.scopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            inputs["end"] = args ? args.end : undefined;
            inputs["endDate"] = args ? args.endDate : undefined;
            inputs["message"] = args ? args.message : undefined;
            inputs["monitorId"] = args ? args.monitorId : undefined;
            inputs["monitorTags"] = args ? args.monitorTags : undefined;
            inputs["recurrence"] = args ? args.recurrence : undefined;
            inputs["scopes"] = args ? args.scopes : undefined;
            inputs["start"] = args ? args.start : undefined;
            inputs["startDate"] = args ? args.startDate : undefined;
            inputs["timezone"] = args ? args.timezone : undefined;
            inputs["active"] = undefined /*out*/;
            inputs["disabled"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Downtime.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Downtime resources.
 */
export interface DowntimeState {
    /**
     * When true indicates this downtime is being actively applied
     */
    readonly active?: pulumi.Input<boolean>;
    /**
     * When true indicates this downtime is not being applied
     */
    readonly disabled?: pulumi.Input<boolean>;
    /**
     * Optionally specify an end date when this downtime should expire
     */
    readonly end?: pulumi.Input<number>;
    /**
     * String representing date and time to end the downtime in RFC3339 format.
     */
    readonly endDate?: pulumi.Input<string>;
    /**
     * An optional message to provide when creating the downtime, can include notification handles
     */
    readonly message?: pulumi.Input<string>;
    /**
     * When specified, this downtime will only apply to this monitor
     */
    readonly monitorId?: pulumi.Input<number>;
    /**
     * A list of monitor tags (up to 25), i.e. tags that are applied directly to monitors to which the downtime applies
     */
    readonly monitorTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optional recurring schedule for this downtime
     */
    readonly recurrence?: pulumi.Input<inputs.DowntimeRecurrence>;
    /**
     * specify the group scope to which this downtime applies. For everything use '*'
     */
    readonly scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify when this downtime should start
     */
    readonly start?: pulumi.Input<number>;
    /**
     * String representing date and time to start the downtime in RFC3339 format.
     */
    readonly startDate?: pulumi.Input<string>;
    /**
     * The timezone for the downtime, default UTC
     */
    readonly timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Downtime resource.
 */
export interface DowntimeArgs {
    /**
     * Optionally specify an end date when this downtime should expire
     */
    readonly end?: pulumi.Input<number>;
    /**
     * String representing date and time to end the downtime in RFC3339 format.
     */
    readonly endDate?: pulumi.Input<string>;
    /**
     * An optional message to provide when creating the downtime, can include notification handles
     */
    readonly message?: pulumi.Input<string>;
    /**
     * When specified, this downtime will only apply to this monitor
     */
    readonly monitorId?: pulumi.Input<number>;
    /**
     * A list of monitor tags (up to 25), i.e. tags that are applied directly to monitors to which the downtime applies
     */
    readonly monitorTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optional recurring schedule for this downtime
     */
    readonly recurrence?: pulumi.Input<inputs.DowntimeRecurrence>;
    /**
     * specify the group scope to which this downtime applies. For everything use '*'
     */
    readonly scopes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify when this downtime should start
     */
    readonly start?: pulumi.Input<number>;
    /**
     * String representing date and time to start the downtime in RFC3339 format.
     */
    readonly startDate?: pulumi.Input<string>;
    /**
     * The timezone for the downtime, default UTC
     */
    readonly timezone?: pulumi.Input<string>;
}
