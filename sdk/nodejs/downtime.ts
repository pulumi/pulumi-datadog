// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource is deprecated â€” use the `datadog.DowntimeSchedule resource` instead. Provides a Datadog downtime resource. This can be used to create and manage Datadog downtimes.
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import datadog:index/downtime:Downtime bytes_received_localhost 2081
 * ```
 */
export class Downtime extends pulumi.CustomResource {
    /**
     * Get an existing Downtime resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DowntimeState, opts?: pulumi.CustomResourceOptions): Downtime {
        return new Downtime(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/downtime:Downtime';

    /**
     * Returns true if the given object is an instance of Downtime.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Downtime {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Downtime.__pulumiType;
    }

    /**
     * When true indicates this downtime is being actively applied
     */
    declare public /*out*/ readonly active: pulumi.Output<boolean>;
    /**
     * The id corresponding to the downtime object definition of the active child for the original parent recurring downtime. This field will only exist on recurring downtimes.
     */
    declare public /*out*/ readonly activeChildId: pulumi.Output<number>;
    /**
     * When true indicates this downtime is not being applied
     */
    declare public /*out*/ readonly disabled: pulumi.Output<boolean>;
    /**
     * Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
     */
    declare public readonly end: pulumi.Output<number | undefined>;
    /**
     * String representing date and time to end the downtime in RFC3339 format.
     */
    declare public readonly endDate: pulumi.Output<string | undefined>;
    /**
     * An optional message to provide when creating the downtime, can include notification handles
     */
    declare public readonly message: pulumi.Output<string | undefined>;
    /**
     * When specified, this downtime will only apply to this monitor
     */
    declare public readonly monitorId: pulumi.Output<number | undefined>;
    /**
     * A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
     */
    declare public readonly monitorTags: pulumi.Output<string[] | undefined>;
    /**
     * When true the first recovery notification during the downtime will be muted Defaults to `false`.
     */
    declare public readonly muteFirstRecoveryNotification: pulumi.Output<boolean | undefined>;
    /**
     * Optional recurring schedule for this downtime
     */
    declare public readonly recurrence: pulumi.Output<outputs.DowntimeRecurrence | undefined>;
    /**
     * specify the group scope to which this downtime applies. For everything use '*'
     */
    declare public readonly scopes: pulumi.Output<string[]>;
    /**
     * Specify when this downtime should start. Accepts a Unix timestamp in UTC.
     */
    declare public readonly start: pulumi.Output<number | undefined>;
    /**
     * String representing date and time to start the downtime in RFC3339 format.
     */
    declare public readonly startDate: pulumi.Output<string | undefined>;
    /**
     * The timezone for the downtime. Follows IANA timezone database identifiers. Defaults to `"UTC"`.
     */
    declare public readonly timezone: pulumi.Output<string | undefined>;

    /**
     * Create a Downtime resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DowntimeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DowntimeArgs | DowntimeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DowntimeState | undefined;
            resourceInputs["active"] = state?.active;
            resourceInputs["activeChildId"] = state?.activeChildId;
            resourceInputs["disabled"] = state?.disabled;
            resourceInputs["end"] = state?.end;
            resourceInputs["endDate"] = state?.endDate;
            resourceInputs["message"] = state?.message;
            resourceInputs["monitorId"] = state?.monitorId;
            resourceInputs["monitorTags"] = state?.monitorTags;
            resourceInputs["muteFirstRecoveryNotification"] = state?.muteFirstRecoveryNotification;
            resourceInputs["recurrence"] = state?.recurrence;
            resourceInputs["scopes"] = state?.scopes;
            resourceInputs["start"] = state?.start;
            resourceInputs["startDate"] = state?.startDate;
            resourceInputs["timezone"] = state?.timezone;
        } else {
            const args = argsOrState as DowntimeArgs | undefined;
            if (args?.scopes === undefined && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            resourceInputs["end"] = args?.end;
            resourceInputs["endDate"] = args?.endDate;
            resourceInputs["message"] = args?.message;
            resourceInputs["monitorId"] = args?.monitorId;
            resourceInputs["monitorTags"] = args?.monitorTags;
            resourceInputs["muteFirstRecoveryNotification"] = args?.muteFirstRecoveryNotification;
            resourceInputs["recurrence"] = args?.recurrence;
            resourceInputs["scopes"] = args?.scopes;
            resourceInputs["start"] = args?.start;
            resourceInputs["startDate"] = args?.startDate;
            resourceInputs["timezone"] = args?.timezone;
            resourceInputs["active"] = undefined /*out*/;
            resourceInputs["activeChildId"] = undefined /*out*/;
            resourceInputs["disabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Downtime.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Downtime resources.
 */
export interface DowntimeState {
    /**
     * When true indicates this downtime is being actively applied
     */
    active?: pulumi.Input<boolean>;
    /**
     * The id corresponding to the downtime object definition of the active child for the original parent recurring downtime. This field will only exist on recurring downtimes.
     */
    activeChildId?: pulumi.Input<number>;
    /**
     * When true indicates this downtime is not being applied
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
     */
    end?: pulumi.Input<number>;
    /**
     * String representing date and time to end the downtime in RFC3339 format.
     */
    endDate?: pulumi.Input<string>;
    /**
     * An optional message to provide when creating the downtime, can include notification handles
     */
    message?: pulumi.Input<string>;
    /**
     * When specified, this downtime will only apply to this monitor
     */
    monitorId?: pulumi.Input<number>;
    /**
     * A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
     */
    monitorTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When true the first recovery notification during the downtime will be muted Defaults to `false`.
     */
    muteFirstRecoveryNotification?: pulumi.Input<boolean>;
    /**
     * Optional recurring schedule for this downtime
     */
    recurrence?: pulumi.Input<inputs.DowntimeRecurrence>;
    /**
     * specify the group scope to which this downtime applies. For everything use '*'
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify when this downtime should start. Accepts a Unix timestamp in UTC.
     */
    start?: pulumi.Input<number>;
    /**
     * String representing date and time to start the downtime in RFC3339 format.
     */
    startDate?: pulumi.Input<string>;
    /**
     * The timezone for the downtime. Follows IANA timezone database identifiers. Defaults to `"UTC"`.
     */
    timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Downtime resource.
 */
export interface DowntimeArgs {
    /**
     * Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
     */
    end?: pulumi.Input<number>;
    /**
     * String representing date and time to end the downtime in RFC3339 format.
     */
    endDate?: pulumi.Input<string>;
    /**
     * An optional message to provide when creating the downtime, can include notification handles
     */
    message?: pulumi.Input<string>;
    /**
     * When specified, this downtime will only apply to this monitor
     */
    monitorId?: pulumi.Input<number>;
    /**
     * A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
     */
    monitorTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When true the first recovery notification during the downtime will be muted Defaults to `false`.
     */
    muteFirstRecoveryNotification?: pulumi.Input<boolean>;
    /**
     * Optional recurring schedule for this downtime
     */
    recurrence?: pulumi.Input<inputs.DowntimeRecurrence>;
    /**
     * specify the group scope to which this downtime applies. For everything use '*'
     */
    scopes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify when this downtime should start. Accepts a Unix timestamp in UTC.
     */
    start?: pulumi.Input<number>;
    /**
     * String representing date and time to start the downtime in RFC3339 format.
     */
    startDate?: pulumi.Input<string>;
    /**
     * The timezone for the downtime. Follows IANA timezone database identifiers. Defaults to `"UTC"`.
     */
    timezone?: pulumi.Input<string>;
}
