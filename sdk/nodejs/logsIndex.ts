// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const sampleIndex = new datadog.LogsIndex("sampleIndex", {
 *     dailyLimit: 200000,
 *     exclusionFilters: [
 *         {
 *             filters: [{
 *                 query: "app:coredns",
 *                 sampleRate: 0.97,
 *             }],
 *             isEnabled: true,
 *             name: "Filter coredns logs",
 *         },
 *         {
 *             filters: [{
 *                 query: "service:kube_apiserver",
 *                 sampleRate: 1,
 *             }],
 *             isEnabled: true,
 *             name: "Kubernetes apiserver",
 *         },
 *     ],
 *     filters: [{
 *         query: "*",
 *     }],
 *     name: "your index",
 *     retentionDays: 7,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import datadog:index/logsIndex:LogsIndex name> <indexName>
 * ```
 */
export class LogsIndex extends pulumi.CustomResource {
    /**
     * Get an existing LogsIndex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogsIndexState, opts?: pulumi.CustomResourceOptions): LogsIndex {
        return new LogsIndex(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/logsIndex:LogsIndex';

    /**
     * Returns true if the given object is an instance of LogsIndex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogsIndex {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogsIndex.__pulumiType;
    }

    /**
     * The number of log events you can send in this index per day before you are rate-limited.
     */
    public readonly dailyLimit!: pulumi.Output<number | undefined>;
    /**
     * If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index's current dailyLimit is maintained.
     */
    public readonly disableDailyLimit!: pulumi.Output<boolean>;
    /**
     * List of exclusion filters.
     */
    public readonly exclusionFilters!: pulumi.Output<outputs.LogsIndexExclusionFilter[] | undefined>;
    /**
     * Logs filter
     */
    public readonly filters!: pulumi.Output<outputs.LogsIndexFilter[]>;
    /**
     * The name of the exclusion filter.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of days before logs are deleted from this index.
     */
    public readonly retentionDays!: pulumi.Output<number>;

    /**
     * Create a LogsIndex resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogsIndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogsIndexArgs | LogsIndexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogsIndexState | undefined;
            resourceInputs["dailyLimit"] = state ? state.dailyLimit : undefined;
            resourceInputs["disableDailyLimit"] = state ? state.disableDailyLimit : undefined;
            resourceInputs["exclusionFilters"] = state ? state.exclusionFilters : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["retentionDays"] = state ? state.retentionDays : undefined;
        } else {
            const args = argsOrState as LogsIndexArgs | undefined;
            if ((!args || args.filters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filters'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["dailyLimit"] = args ? args.dailyLimit : undefined;
            resourceInputs["disableDailyLimit"] = args ? args.disableDailyLimit : undefined;
            resourceInputs["exclusionFilters"] = args ? args.exclusionFilters : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["retentionDays"] = args ? args.retentionDays : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogsIndex.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogsIndex resources.
 */
export interface LogsIndexState {
    /**
     * The number of log events you can send in this index per day before you are rate-limited.
     */
    dailyLimit?: pulumi.Input<number>;
    /**
     * If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index's current dailyLimit is maintained.
     */
    disableDailyLimit?: pulumi.Input<boolean>;
    /**
     * List of exclusion filters.
     */
    exclusionFilters?: pulumi.Input<pulumi.Input<inputs.LogsIndexExclusionFilter>[]>;
    /**
     * Logs filter
     */
    filters?: pulumi.Input<pulumi.Input<inputs.LogsIndexFilter>[]>;
    /**
     * The name of the exclusion filter.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of days before logs are deleted from this index.
     */
    retentionDays?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LogsIndex resource.
 */
export interface LogsIndexArgs {
    /**
     * The number of log events you can send in this index per day before you are rate-limited.
     */
    dailyLimit?: pulumi.Input<number>;
    /**
     * If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index's current dailyLimit is maintained.
     */
    disableDailyLimit?: pulumi.Input<boolean>;
    /**
     * List of exclusion filters.
     */
    exclusionFilters?: pulumi.Input<pulumi.Input<inputs.LogsIndexExclusionFilter>[]>;
    /**
     * Logs filter
     */
    filters: pulumi.Input<pulumi.Input<inputs.LogsIndexFilter>[]>;
    /**
     * The name of the exclusion filter.
     */
    name: pulumi.Input<string>;
    /**
     * The number of days before logs are deleted from this index.
     */
    retentionDays?: pulumi.Input<number>;
}
