// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve information about existing security monitoring rules for use in other resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const test = pulumi.output(datadog.getSecurityMonitoringRules({
 *     defaultOnlyFilter: true,
 *     nameFilter: "attack",
 *     tagsFilters: ["foo:bar"],
 * }, { async: true }));
 * ```
 */
export function getSecurityMonitoringRules(args?: GetSecurityMonitoringRulesArgs, opts?: pulumi.InvokeOptions): Promise<GetSecurityMonitoringRulesResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("datadog:index/getSecurityMonitoringRules:getSecurityMonitoringRules", {
        "defaultOnlyFilter": args.defaultOnlyFilter,
        "nameFilter": args.nameFilter,
        "tagsFilters": args.tagsFilters,
        "userOnlyFilter": args.userOnlyFilter,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityMonitoringRules.
 */
export interface GetSecurityMonitoringRulesArgs {
    readonly defaultOnlyFilter?: boolean;
    /**
     * A rule name to limit the search
     */
    readonly nameFilter?: string;
    /**
     * A list of tags to limit the search
     */
    readonly tagsFilters?: string[];
    readonly userOnlyFilter?: boolean;
}

/**
 * A collection of values returned by getSecurityMonitoringRules.
 */
export interface GetSecurityMonitoringRulesResult {
    readonly defaultOnlyFilter?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly nameFilter?: string;
    readonly ruleIds: string[];
    readonly rules: outputs.GetSecurityMonitoringRulesRule[];
    readonly tagsFilters?: string[];
    readonly userOnlyFilter?: boolean;
}
