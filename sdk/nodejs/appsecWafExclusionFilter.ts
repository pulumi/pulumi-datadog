// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog AppsecWafExclusionFilter resource. This can be used to create and manage Datadog appsec_waf_exclusion_filter.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * // Create a WAF exclusion filter on a path
 * const excludeOnPath = new datadog.index.AppsecExclusionFilter("exclude_on_path", {
 *     description: "Exclude false positives on a path",
 *     enabled: true,
 *     pathGlob: "/accounts/*",
 *     rulesTarget: [{
 *         tags: [{
 *             category: "attack_attempt",
 *             type: "lfi",
 *         }],
 *     }],
 *     scope: [{
 *         env: "www",
 *         service: "prod",
 *     }],
 * });
 * // Create a WAF exclusion filter for trusted IPs
 * const trustedIps = new datadog.index.AppsecExclusionFilter("trusted_ips", {
 *     description: "Do not block office IP network",
 *     enabled: true,
 *     ipList: ["198.10.14.53/24"],
 *     onMatch: "monitor",
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import datadog:index/appsecWafExclusionFilter:AppsecWafExclusionFilter passlist_entry "45b7032f-0ac4-4b2f-9118-363523c625f6"
 * ```
 */
export class AppsecWafExclusionFilter extends pulumi.CustomResource {
    /**
     * Get an existing AppsecWafExclusionFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppsecWafExclusionFilterState, opts?: pulumi.CustomResourceOptions): AppsecWafExclusionFilter {
        return new AppsecWafExclusionFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/appsecWafExclusionFilter:AppsecWafExclusionFilter';

    /**
     * Returns true if the given object is an instance of AppsecWafExclusionFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppsecWafExclusionFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppsecWafExclusionFilter.__pulumiType;
    }

    /**
     * A description for the exclusion filter.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Indicates whether the exclusion filter is enabled.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * The event query matched by the legacy exclusion filter. Cannot be created nor updated.
     */
    declare public readonly eventQuery: pulumi.Output<string | undefined>;
    /**
     * The client IP addresses matched by the exclusion filter (CIDR notation is supported).
     */
    declare public readonly ipLists: pulumi.Output<string[] | undefined>;
    /**
     * The action taken when the exclusion filter matches. When set to `monitor`, security traces are emitted but the requests are not blocked. By default, security traces are not emitted and the requests are not blocked.
     */
    declare public readonly onMatch: pulumi.Output<string | undefined>;
    /**
     * A list of parameters matched by the exclusion filter in the HTTP query string and HTTP request body. Nested parameters can be matched by joining fields with a dot character.
     */
    declare public readonly parameters: pulumi.Output<string[] | undefined>;
    /**
     * The HTTP path glob expression matched by the exclusion filter.
     */
    declare public readonly pathGlob: pulumi.Output<string | undefined>;
    declare public readonly rulesTargets: pulumi.Output<outputs.AppsecWafExclusionFilterRulesTarget[] | undefined>;
    declare public readonly scopes: pulumi.Output<outputs.AppsecWafExclusionFilterScope[] | undefined>;

    /**
     * Create a AppsecWafExclusionFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppsecWafExclusionFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppsecWafExclusionFilterArgs | AppsecWafExclusionFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppsecWafExclusionFilterState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["eventQuery"] = state?.eventQuery;
            resourceInputs["ipLists"] = state?.ipLists;
            resourceInputs["onMatch"] = state?.onMatch;
            resourceInputs["parameters"] = state?.parameters;
            resourceInputs["pathGlob"] = state?.pathGlob;
            resourceInputs["rulesTargets"] = state?.rulesTargets;
            resourceInputs["scopes"] = state?.scopes;
        } else {
            const args = argsOrState as AppsecWafExclusionFilterArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["eventQuery"] = args?.eventQuery;
            resourceInputs["ipLists"] = args?.ipLists;
            resourceInputs["onMatch"] = args?.onMatch;
            resourceInputs["parameters"] = args?.parameters;
            resourceInputs["pathGlob"] = args?.pathGlob;
            resourceInputs["rulesTargets"] = args?.rulesTargets;
            resourceInputs["scopes"] = args?.scopes;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppsecWafExclusionFilter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppsecWafExclusionFilter resources.
 */
export interface AppsecWafExclusionFilterState {
    /**
     * A description for the exclusion filter.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether the exclusion filter is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The event query matched by the legacy exclusion filter. Cannot be created nor updated.
     */
    eventQuery?: pulumi.Input<string>;
    /**
     * The client IP addresses matched by the exclusion filter (CIDR notation is supported).
     */
    ipLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The action taken when the exclusion filter matches. When set to `monitor`, security traces are emitted but the requests are not blocked. By default, security traces are not emitted and the requests are not blocked.
     */
    onMatch?: pulumi.Input<string>;
    /**
     * A list of parameters matched by the exclusion filter in the HTTP query string and HTTP request body. Nested parameters can be matched by joining fields with a dot character.
     */
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The HTTP path glob expression matched by the exclusion filter.
     */
    pathGlob?: pulumi.Input<string>;
    rulesTargets?: pulumi.Input<pulumi.Input<inputs.AppsecWafExclusionFilterRulesTarget>[]>;
    scopes?: pulumi.Input<pulumi.Input<inputs.AppsecWafExclusionFilterScope>[]>;
}

/**
 * The set of arguments for constructing a AppsecWafExclusionFilter resource.
 */
export interface AppsecWafExclusionFilterArgs {
    /**
     * A description for the exclusion filter.
     */
    description: pulumi.Input<string>;
    /**
     * Indicates whether the exclusion filter is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The event query matched by the legacy exclusion filter. Cannot be created nor updated.
     */
    eventQuery?: pulumi.Input<string>;
    /**
     * The client IP addresses matched by the exclusion filter (CIDR notation is supported).
     */
    ipLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The action taken when the exclusion filter matches. When set to `monitor`, security traces are emitted but the requests are not blocked. By default, security traces are not emitted and the requests are not blocked.
     */
    onMatch?: pulumi.Input<string>;
    /**
     * A list of parameters matched by the exclusion filter in the HTTP query string and HTTP request body. Nested parameters can be matched by joining fields with a dot character.
     */
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The HTTP path glob expression matched by the exclusion filter.
     */
    pathGlob?: pulumi.Input<string>;
    rulesTargets?: pulumi.Input<pulumi.Input<inputs.AppsecWafExclusionFilterRulesTarget>[]>;
    scopes?: pulumi.Input<pulumi.Input<inputs.AppsecWafExclusionFilterScope>[]>;
}
