// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Datadog Cloud Configuration Rule resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const myrule = new datadog.CloudConfigurationRule("myrule", {
 *     enabled: true,
 *     groupBies: ["@resource"],
 *     message: "Rule has triggered",
 *     name: "My cloud configuration rule",
 *     notifications: ["@channel"],
 *     policy: `        package datadog
 *
 *         import data.datadog.output as dd_output
 *
 *         import future.keywords.contains
 *         import future.keywords.if
 *         import future.keywords.in
 *
 *         eval(resource) = "skip" if {
 *             # Logic that evaluates to true if the resource should be skipped
 *             true
 *         } else = "pass" {
 *             # Logic that evaluates to true if the resource is compliant
 *             true
 *         } else = "fail" {
 *             # Logic that evaluates to true if the resource is not compliant
 *             true
 *         }
 *
 *         # This part remains unchanged for all rules
 *         results contains result if {
 *             some resource in input.resources[input.main_resource_type]
 *             result := dd_output.format(resource, eval(resource))
 *         }
 *
 * `,
 *     relatedResourceTypes: [],
 *     resourceType: "aws_s3_bucket",
 *     severity: "high",
 *     tags: ["some:tag"],
 * });
 * ```
 *
 * ## Import
 *
 * Security monitoring rules can be imported using ID, e.g.
 *
 * ```sh
 *  $ pulumi import datadog:index/cloudConfigurationRule:CloudConfigurationRule my_rule m0o-hto-lkb
 * ```
 */
export class CloudConfigurationRule extends pulumi.CustomResource {
    /**
     * Get an existing CloudConfigurationRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudConfigurationRuleState, opts?: pulumi.CustomResourceOptions): CloudConfigurationRule {
        return new CloudConfigurationRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/cloudConfigurationRule:CloudConfigurationRule';

    /**
     * Returns true if the given object is an instance of CloudConfigurationRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudConfigurationRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudConfigurationRule.__pulumiType;
    }

    /**
     * Whether the cloud configuration rule is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
     */
    public readonly groupBies!: pulumi.Output<string[] | undefined>;
    /**
     * The message associated to the rule that will be shown in findings and signals.
     */
    public readonly message!: pulumi.Output<string>;
    /**
     * The name of the cloud configuration rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notification targets for signals. Defaults to empty list.
     */
    public readonly notifications!: pulumi.Output<string[] | undefined>;
    /**
     * Policy written in Rego format.
     */
    public readonly policy!: pulumi.Output<string>;
    /**
     * Related resource types to be checked by the rule. Defaults to empty list.
     */
    public readonly relatedResourceTypes!: pulumi.Output<string[] | undefined>;
    /**
     * Main resource type to be checked by the rule.
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
     */
    public readonly severity!: pulumi.Output<string>;
    /**
     * Tags of the rule, propagated to findings and signals. Defaults to empty list.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a CloudConfigurationRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudConfigurationRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudConfigurationRuleArgs | CloudConfigurationRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudConfigurationRuleState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["groupBies"] = state ? state.groupBies : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["relatedResourceTypes"] = state ? state.relatedResourceTypes : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as CloudConfigurationRuleArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.message === undefined) && !opts.urn) {
                throw new Error("Missing required property 'message'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            if ((!args || args.severity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severity'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["groupBies"] = args ? args.groupBies : undefined;
            resourceInputs["message"] = args ? args.message : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["relatedResourceTypes"] = args ? args.relatedResourceTypes : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudConfigurationRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudConfigurationRule resources.
 */
export interface CloudConfigurationRuleState {
    /**
     * Whether the cloud configuration rule is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
     */
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The message associated to the rule that will be shown in findings and signals.
     */
    message?: pulumi.Input<string>;
    /**
     * The name of the cloud configuration rule.
     */
    name?: pulumi.Input<string>;
    /**
     * Notification targets for signals. Defaults to empty list.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy written in Rego format.
     */
    policy?: pulumi.Input<string>;
    /**
     * Related resource types to be checked by the rule. Defaults to empty list.
     */
    relatedResourceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Main resource type to be checked by the rule.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
     */
    severity?: pulumi.Input<string>;
    /**
     * Tags of the rule, propagated to findings and signals. Defaults to empty list.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a CloudConfigurationRule resource.
 */
export interface CloudConfigurationRuleArgs {
    /**
     * Whether the cloud configuration rule is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
     */
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The message associated to the rule that will be shown in findings and signals.
     */
    message: pulumi.Input<string>;
    /**
     * The name of the cloud configuration rule.
     */
    name: pulumi.Input<string>;
    /**
     * Notification targets for signals. Defaults to empty list.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy written in Rego format.
     */
    policy: pulumi.Input<string>;
    /**
     * Related resource types to be checked by the rule. Defaults to empty list.
     */
    relatedResourceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Main resource type to be checked by the rule.
     */
    resourceType: pulumi.Input<string>;
    /**
     * Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
     */
    severity: pulumi.Input<string>;
    /**
     * Tags of the rule, propagated to findings and signals. Defaults to empty list.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
