// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const workflow = new datadog.WorkflowAutomation("workflow", {
 *     name: "Send Email when Monitor Alerts",
 *     description: "This workflow alerts me by email when my monitor goes off. ",
 *     tags: [
 *         "service:foo",
 *         "source:alert",
 *         "team:bar",
 *     ],
 *     published: true,
 *     specJson: JSON.stringify({
 *         triggers: [{
 *             startStepNames: ["Send_Email"],
 *             monitorTrigger: {},
 *         }],
 *         steps: [{
 *             name: "Send_Email",
 *             actionId: "com.datadoghq.email.send",
 *             parameters: [
 *                 {
 *                     name: "to",
 *                     value: "REPLACE_ME",
 *                 },
 *                 {
 *                     name: "subject",
 *                     value: "Monitor \"{{ Source.monitor.name }}\" alerted",
 *                 },
 *                 {
 *                     name: "message",
 *                     value: `This message is from {{ WorkflowName }}. 
 *
 * You can find a link to the monitor here: {{ Source.url }}.`,
 *                 },
 *             ],
 *             display: {
 *                 bounds: {
 *                     x: 0,
 *                     y: 216,
 *                 },
 *             },
 *         }],
 *         handle: "my-handle",
 *     }),
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import datadog:index/workflowAutomation:WorkflowAutomation my_workflow 11111111-2222-3333-4444-555555555555
 * ```
 */
export class WorkflowAutomation extends pulumi.CustomResource {
    /**
     * Get an existing WorkflowAutomation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkflowAutomationState, opts?: pulumi.CustomResourceOptions): WorkflowAutomation {
        return new WorkflowAutomation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/workflowAutomation:WorkflowAutomation';

    /**
     * Returns true if the given object is an instance of WorkflowAutomation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkflowAutomation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkflowAutomation.__pulumiType;
    }

    /**
     * Description of the workflow.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Name of the workflow. String length must be at least 1.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set the workflow to published or unpublished. Workflows in an unpublished state are only executable through manual runs. Automatic triggers such as Schedule do not execute the workflow until it is published.
     */
    public readonly published!: pulumi.Output<boolean>;
    /**
     * The spec defines what the workflow does.
     */
    public readonly specJson!: pulumi.Output<string>;
    /**
     * Tags of the workflow.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * If a webhook trigger is defined on this workflow, a webhookSecret is required and should be provided here. String length must be at least 16.
     */
    public readonly webhookSecret!: pulumi.Output<string | undefined>;

    /**
     * Create a WorkflowAutomation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkflowAutomationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkflowAutomationArgs | WorkflowAutomationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkflowAutomationState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["published"] = state ? state.published : undefined;
            resourceInputs["specJson"] = state ? state.specJson : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["webhookSecret"] = state ? state.webhookSecret : undefined;
        } else {
            const args = argsOrState as WorkflowAutomationArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.published === undefined) && !opts.urn) {
                throw new Error("Missing required property 'published'");
            }
            if ((!args || args.specJson === undefined) && !opts.urn) {
                throw new Error("Missing required property 'specJson'");
            }
            if ((!args || args.tags === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tags'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["published"] = args ? args.published : undefined;
            resourceInputs["specJson"] = args ? args.specJson : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["webhookSecret"] = args?.webhookSecret ? pulumi.secret(args.webhookSecret) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["webhookSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WorkflowAutomation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WorkflowAutomation resources.
 */
export interface WorkflowAutomationState {
    /**
     * Description of the workflow.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the workflow. String length must be at least 1.
     */
    name?: pulumi.Input<string>;
    /**
     * Set the workflow to published or unpublished. Workflows in an unpublished state are only executable through manual runs. Automatic triggers such as Schedule do not execute the workflow until it is published.
     */
    published?: pulumi.Input<boolean>;
    /**
     * The spec defines what the workflow does.
     */
    specJson?: pulumi.Input<string>;
    /**
     * Tags of the workflow.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If a webhook trigger is defined on this workflow, a webhookSecret is required and should be provided here. String length must be at least 16.
     */
    webhookSecret?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkflowAutomation resource.
 */
export interface WorkflowAutomationArgs {
    /**
     * Description of the workflow.
     */
    description: pulumi.Input<string>;
    /**
     * Name of the workflow. String length must be at least 1.
     */
    name: pulumi.Input<string>;
    /**
     * Set the workflow to published or unpublished. Workflows in an unpublished state are only executable through manual runs. Automatic triggers such as Schedule do not execute the workflow until it is published.
     */
    published: pulumi.Input<boolean>;
    /**
     * The spec defines what the workflow does.
     */
    specJson: pulumi.Input<string>;
    /**
     * Tags of the workflow.
     */
    tags: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If a webhook trigger is defined on this workflow, a webhookSecret is required and should be provided here. String length must be at least 16.
     */
    webhookSecret?: pulumi.Input<string>;
}
