// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog Compliance Custom Framework resource, which is used to create and manage compliance custom frameworks.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const framework = new datadog.ComplianceCustomFramework("framework", {
 *     name: "my-custom-framework-terraform-2",
 *     version: "2.0.0",
 *     handle: "my-custom-framework-terraform-2",
 *     requirements: [
 *         {
 *             name: "requirement2",
 *             controls: [
 *                 {
 *                     name: "control2",
 *                     rulesIds: [
 *                         "def-000-h9o",
 *                         "def-000-b6i",
 *                         "def-000-yed",
 *                         "def-000-h5a",
 *                         "def-000-aw5",
 *                     ],
 *                 },
 *                 {
 *                     name: "control1",
 *                     rulesIds: [
 *                         "def-000-j9v",
 *                         "def-000-465",
 *                         "def-000-vq1",
 *                         "def-000-4hf",
 *                         "def-000-s2d",
 *                         "def-000-vnl",
 *                     ],
 *                 },
 *             ],
 *         },
 *         {
 *             name: "requirement1",
 *             controls: [
 *                 {
 *                     name: "control2",
 *                     rulesIds: [
 *                         "def-000-wuf",
 *                         "def-000-7og",
 *                     ],
 *                 },
 *                 {
 *                     name: "control5",
 *                     rulesIds: [
 *                         "def-000-mdt",
 *                         "def-000-zrx",
 *                         "def-000-z6k",
 *                     ],
 *                 },
 *             ],
 *         },
 *     ],
 * });
 * ```
 */
export class ComplianceCustomFramework extends pulumi.CustomResource {
    /**
     * Get an existing ComplianceCustomFramework resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComplianceCustomFrameworkState, opts?: pulumi.CustomResourceOptions): ComplianceCustomFramework {
        return new ComplianceCustomFramework(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/complianceCustomFramework:ComplianceCustomFramework';

    /**
     * Returns true if the given object is an instance of ComplianceCustomFramework.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComplianceCustomFramework {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComplianceCustomFramework.__pulumiType;
    }

    /**
     * The framework handle. String length must be at least 1. This field is immutable.
     */
    declare public readonly handle: pulumi.Output<string>;
    /**
     * The URL of the icon representing the framework
     */
    declare public readonly iconUrl: pulumi.Output<string | undefined>;
    /**
     * The framework name. String length must be at least 1.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The requirements of the framework. Length must be at least 1.
     */
    declare public readonly requirements: pulumi.Output<outputs.ComplianceCustomFrameworkRequirement[] | undefined>;
    /**
     * The framework version. String length must be at least 1. This field is immutable.
     */
    declare public readonly version: pulumi.Output<string>;

    /**
     * Create a ComplianceCustomFramework resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComplianceCustomFrameworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComplianceCustomFrameworkArgs | ComplianceCustomFrameworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComplianceCustomFrameworkState | undefined;
            resourceInputs["handle"] = state?.handle;
            resourceInputs["iconUrl"] = state?.iconUrl;
            resourceInputs["name"] = state?.name;
            resourceInputs["requirements"] = state?.requirements;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as ComplianceCustomFrameworkArgs | undefined;
            if (args?.handle === undefined && !opts.urn) {
                throw new Error("Missing required property 'handle'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.version === undefined && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["handle"] = args?.handle;
            resourceInputs["iconUrl"] = args?.iconUrl;
            resourceInputs["name"] = args?.name;
            resourceInputs["requirements"] = args?.requirements;
            resourceInputs["version"] = args?.version;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComplianceCustomFramework.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ComplianceCustomFramework resources.
 */
export interface ComplianceCustomFrameworkState {
    /**
     * The framework handle. String length must be at least 1. This field is immutable.
     */
    handle?: pulumi.Input<string>;
    /**
     * The URL of the icon representing the framework
     */
    iconUrl?: pulumi.Input<string>;
    /**
     * The framework name. String length must be at least 1.
     */
    name?: pulumi.Input<string>;
    /**
     * The requirements of the framework. Length must be at least 1.
     */
    requirements?: pulumi.Input<pulumi.Input<inputs.ComplianceCustomFrameworkRequirement>[]>;
    /**
     * The framework version. String length must be at least 1. This field is immutable.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComplianceCustomFramework resource.
 */
export interface ComplianceCustomFrameworkArgs {
    /**
     * The framework handle. String length must be at least 1. This field is immutable.
     */
    handle: pulumi.Input<string>;
    /**
     * The URL of the icon representing the framework
     */
    iconUrl?: pulumi.Input<string>;
    /**
     * The framework name. String length must be at least 1.
     */
    name: pulumi.Input<string>;
    /**
     * The requirements of the framework. Length must be at least 1.
     */
    requirements?: pulumi.Input<pulumi.Input<inputs.ComplianceCustomFrameworkRequirement>[]>;
    /**
     * The framework version. String length must be at least 1. This field is immutable.
     */
    version: pulumi.Input<string>;
}
