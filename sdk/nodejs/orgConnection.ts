// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Datadog Org Connection resource. Org Connections make data from a source org available in the destination org for selected connection data types (for example, logs or metrics). Org Connections can only be created from a source org to a specified destination org
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * // Create new org connection resource
 * const foo = new datadog.OrgConnection("foo", {
 *     connectionTypes: [
 *         "metrics",
 *         "logs",
 *     ],
 *     sinkOrgId: "00000000-0000-0000-0000-000000000000",
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import datadog:index/orgConnection:OrgConnection foo "<org_connection_id>"
 * ```
 */
export class OrgConnection extends pulumi.CustomResource {
    /**
     * Get an existing OrgConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgConnectionState, opts?: pulumi.CustomResourceOptions): OrgConnection {
        return new OrgConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/orgConnection:OrgConnection';

    /**
     * Returns true if the given object is an instance of OrgConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgConnection.__pulumiType;
    }

    /**
     * Set of connection types to enable for this connection (., metrics, logs).
     */
    declare public readonly connectionTypes: pulumi.Output<string[]>;
    /**
     * Timestamp when the connection was created (RFC 3339).
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Creator user ID (UUID).
     */
    declare public /*out*/ readonly createdBy: pulumi.Output<string>;
    /**
     * UUID of the sink (destination) organization. Must be a valid UUID.
     */
    declare public readonly sinkOrgId: pulumi.Output<string>;
    /**
     * Name of the sink (destination) organization.
     */
    declare public /*out*/ readonly sinkOrgName: pulumi.Output<string>;
    /**
     * UUID of the source (current) organization.
     */
    declare public /*out*/ readonly sourceOrgId: pulumi.Output<string>;
    /**
     * Name of the source organization.
     */
    declare public /*out*/ readonly sourceOrgName: pulumi.Output<string>;

    /**
     * Create a OrgConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrgConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgConnectionArgs | OrgConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgConnectionState | undefined;
            resourceInputs["connectionTypes"] = state?.connectionTypes;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["sinkOrgId"] = state?.sinkOrgId;
            resourceInputs["sinkOrgName"] = state?.sinkOrgName;
            resourceInputs["sourceOrgId"] = state?.sourceOrgId;
            resourceInputs["sourceOrgName"] = state?.sourceOrgName;
        } else {
            const args = argsOrState as OrgConnectionArgs | undefined;
            if (args?.connectionTypes === undefined && !opts.urn) {
                throw new Error("Missing required property 'connectionTypes'");
            }
            if (args?.sinkOrgId === undefined && !opts.urn) {
                throw new Error("Missing required property 'sinkOrgId'");
            }
            resourceInputs["connectionTypes"] = args?.connectionTypes;
            resourceInputs["sinkOrgId"] = args?.sinkOrgId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["sinkOrgName"] = undefined /*out*/;
            resourceInputs["sourceOrgId"] = undefined /*out*/;
            resourceInputs["sourceOrgName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrgConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrgConnection resources.
 */
export interface OrgConnectionState {
    /**
     * Set of connection types to enable for this connection (., metrics, logs).
     */
    connectionTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Timestamp when the connection was created (RFC 3339).
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Creator user ID (UUID).
     */
    createdBy?: pulumi.Input<string>;
    /**
     * UUID of the sink (destination) organization. Must be a valid UUID.
     */
    sinkOrgId?: pulumi.Input<string>;
    /**
     * Name of the sink (destination) organization.
     */
    sinkOrgName?: pulumi.Input<string>;
    /**
     * UUID of the source (current) organization.
     */
    sourceOrgId?: pulumi.Input<string>;
    /**
     * Name of the source organization.
     */
    sourceOrgName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrgConnection resource.
 */
export interface OrgConnectionArgs {
    /**
     * Set of connection types to enable for this connection (., metrics, logs).
     */
    connectionTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * UUID of the sink (destination) organization. Must be a valid UUID.
     */
    sinkOrgId: pulumi.Input<string>;
}
