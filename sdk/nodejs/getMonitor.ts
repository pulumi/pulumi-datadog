// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve information about an existing monitor for use in other resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const test = pulumi.output(datadog.getMonitor({
 *     monitorTagsFilters: ["foo:bar"],
 *     nameFilter: "My awesome monitor",
 * }, { async: true }));
 * ```
 *
 * <!-- schema generated by tfplugindocs -->
 * ## Schema
 *
 * ### Optional
 *
 * - **monitor_tags_filter** (List of String) A list of monitor tags to limit the search. This filters on the tags set on the monitor itself.
 * - **name_filter** (String) A monitor name to limit the search.
 * - **tags_filter** (List of String) A list of tags to limit the search. This filters on the monitor scope.
 *
 * ### Read-Only
 *
 * - **enable_logs_sample** (Boolean) Whether or not a list of log values which triggered the alert is included. This is only used by log monitors.
 * - **escalation_message** (String) Message included with a re-notification for this monitor.
 * - **evaluation_delay** (Number) Time (in seconds) for which evaluation is delayed. This is only used by metric monitors.
 * - **groupby_simple_monitor** (Boolean) Whether or not to trigger one alert if any source breaches a threshold.
 * - **id** (String) The ID of this resource.
 * - **include_tags** (Boolean) Whether or not notifications from the monitor automatically inserts its triggering tags into the title.
 * - **locked** (Boolean) Whether or not changes to the monitor are restricted to the creator or admins.
 * - **message** (String) Message included with notifications for this monitor
 * - **monitor_threshold_windows** (List of Object) Mapping containing `recoveryWindow` and `triggerWindow` values, e.g. `last15m`. This is only used by anomaly monitors. (see below for nested schema)
 * - **monitor_thresholds** (List of Object) Alert thresholds of the monitor. (see below for nested schema)
 * - **name** (String) Name of the monitor
 * - **new_host_delay** (Number) Time (in seconds) allowing a host to boot and applications to fully start before starting the evaluation of monitor results.
 * - **no_data_timeframe** (Number) The number of minutes before the monitor notifies when data stops reporting.
 * - **notify_audit** (Boolean) Whether or not tagged users are notified on changes to the monitor.
 * - **notify_no_data** (Boolean) Whether or not this monitor notifies when data stops reporting.
 * - **query** (String) Query of the monitor.
 * - **renotify_interval** (Number) The number of minutes after the last notification before the monitor re-notifies on the current status.
 * - **require_full_window** (Boolean) Whether or not the monitor needs a full window of data before it is evaluated.
 * - **tags** (Set of String) List of tags associated with the monitor.
 * - **threshold_windows** (Map of String, Deprecated) Mapping containing `recoveryWindow` and `triggerWindow` values, e.g. `last15m`. This is only used by anomaly monitors. **Deprecated.** Define `monitorThresholdWindows` list with one element instead.
 * - **thresholds** (Map of String, Deprecated) Alert thresholds of the monitor. **Deprecated.** Define `monitorThresholds` list with one element instead.
 * - **timeout_h** (Number) Number of hours of the monitor not reporting data before it automatically resolves from a triggered state.
 * - **type** (String) Type of the monitor.
 *
 * <a id="nestedatt--monitor_threshold_windows"></a>
 */
export function getMonitor(args?: GetMonitorArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitorResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("datadog:index/getMonitor:getMonitor", {
        "monitorTagsFilters": args.monitorTagsFilters,
        "nameFilter": args.nameFilter,
        "tagsFilters": args.tagsFilters,
    }, opts);
}

/**
 * A collection of arguments for invoking getMonitor.
 */
export interface GetMonitorArgs {
    readonly monitorTagsFilters?: string[];
    readonly nameFilter?: string;
    readonly tagsFilters?: string[];
}

/**
 * A collection of values returned by getMonitor.
 */
export interface GetMonitorResult {
    readonly enableLogsSample: boolean;
    readonly escalationMessage: string;
    readonly evaluationDelay: number;
    readonly groupbySimpleMonitor: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly includeTags: boolean;
    readonly locked: boolean;
    readonly message: string;
    readonly monitorTagsFilters?: string[];
    readonly monitorThresholdWindows: outputs.GetMonitorMonitorThresholdWindows;
    readonly monitorThresholds: outputs.GetMonitorMonitorThresholds;
    readonly name: string;
    readonly nameFilter?: string;
    readonly newHostDelay: number;
    readonly noDataTimeframe: number;
    readonly notifyAudit: boolean;
    readonly notifyNoData: boolean;
    readonly query: string;
    readonly renotifyInterval: number;
    readonly requireFullWindow: boolean;
    readonly tags: string[];
    readonly tagsFilters?: string[];
    /**
     * @deprecated Define `monitor_threshold_windows` list with one element instead.
     */
    readonly thresholdWindows: outputs.GetMonitorThresholdWindows;
    /**
     * @deprecated Define `monitor_thresholds` list with one element instead.
     */
    readonly thresholds: outputs.GetMonitorThresholds;
    readonly timeoutH: number;
    readonly type: string;
}
