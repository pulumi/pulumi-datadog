// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog DowntimeSchedule resource. This can be used to create and manage Datadog downtimes.
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import datadog:index/downtimeSchedule:DowntimeSchedule new_list "00e000000-0000-1234-0000-000000000000"
 * ```
 */
export class DowntimeSchedule extends pulumi.CustomResource {
    /**
     * Get an existing DowntimeSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DowntimeScheduleState, opts?: pulumi.CustomResourceOptions): DowntimeSchedule {
        return new DowntimeSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/downtimeSchedule:DowntimeSchedule';

    /**
     * Returns true if the given object is an instance of DowntimeSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DowntimeSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DowntimeSchedule.__pulumiType;
    }

    /**
     * The timezone in which to display the downtime's start and end times in Datadog applications. This is not used as an offset for scheduling.
     */
    public readonly displayTimezone!: pulumi.Output<string>;
    /**
     * A message to include with notifications for this downtime. Email notifications can be sent to specific users by using the same `@username` notation as events.
     */
    public readonly message!: pulumi.Output<string | undefined>;
    public readonly monitorIdentifier!: pulumi.Output<outputs.DowntimeScheduleMonitorIdentifier | undefined>;
    /**
     * If the first recovery notification during a downtime should be muted.
     */
    public readonly muteFirstRecoveryNotification!: pulumi.Output<boolean>;
    /**
     * States that will trigger a monitor notification when the `notifyEndTypes` action occurs.
     */
    public readonly notifyEndStates!: pulumi.Output<string[]>;
    /**
     * Actions that will trigger a monitor notification if the downtime is in the `notifyEndTypes` state.
     */
    public readonly notifyEndTypes!: pulumi.Output<string[]>;
    public readonly oneTimeSchedule!: pulumi.Output<outputs.DowntimeScheduleOneTimeSchedule | undefined>;
    public readonly recurringSchedule!: pulumi.Output<outputs.DowntimeScheduleRecurringSchedule | undefined>;
    /**
     * The scope to which the downtime applies. Must follow the [common search syntax](https://docs.datadoghq.com/logs/explorer/search_syntax/).
     */
    public readonly scope!: pulumi.Output<string>;

    /**
     * Create a DowntimeSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DowntimeScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DowntimeScheduleArgs | DowntimeScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DowntimeScheduleState | undefined;
            resourceInputs["displayTimezone"] = state ? state.displayTimezone : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["monitorIdentifier"] = state ? state.monitorIdentifier : undefined;
            resourceInputs["muteFirstRecoveryNotification"] = state ? state.muteFirstRecoveryNotification : undefined;
            resourceInputs["notifyEndStates"] = state ? state.notifyEndStates : undefined;
            resourceInputs["notifyEndTypes"] = state ? state.notifyEndTypes : undefined;
            resourceInputs["oneTimeSchedule"] = state ? state.oneTimeSchedule : undefined;
            resourceInputs["recurringSchedule"] = state ? state.recurringSchedule : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
        } else {
            const args = argsOrState as DowntimeScheduleArgs | undefined;
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["displayTimezone"] = args ? args.displayTimezone : undefined;
            resourceInputs["message"] = args ? args.message : undefined;
            resourceInputs["monitorIdentifier"] = args ? args.monitorIdentifier : undefined;
            resourceInputs["muteFirstRecoveryNotification"] = args ? args.muteFirstRecoveryNotification : undefined;
            resourceInputs["notifyEndStates"] = args ? args.notifyEndStates : undefined;
            resourceInputs["notifyEndTypes"] = args ? args.notifyEndTypes : undefined;
            resourceInputs["oneTimeSchedule"] = args ? args.oneTimeSchedule : undefined;
            resourceInputs["recurringSchedule"] = args ? args.recurringSchedule : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DowntimeSchedule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DowntimeSchedule resources.
 */
export interface DowntimeScheduleState {
    /**
     * The timezone in which to display the downtime's start and end times in Datadog applications. This is not used as an offset for scheduling.
     */
    displayTimezone?: pulumi.Input<string>;
    /**
     * A message to include with notifications for this downtime. Email notifications can be sent to specific users by using the same `@username` notation as events.
     */
    message?: pulumi.Input<string>;
    monitorIdentifier?: pulumi.Input<inputs.DowntimeScheduleMonitorIdentifier>;
    /**
     * If the first recovery notification during a downtime should be muted.
     */
    muteFirstRecoveryNotification?: pulumi.Input<boolean>;
    /**
     * States that will trigger a monitor notification when the `notifyEndTypes` action occurs.
     */
    notifyEndStates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Actions that will trigger a monitor notification if the downtime is in the `notifyEndTypes` state.
     */
    notifyEndTypes?: pulumi.Input<pulumi.Input<string>[]>;
    oneTimeSchedule?: pulumi.Input<inputs.DowntimeScheduleOneTimeSchedule>;
    recurringSchedule?: pulumi.Input<inputs.DowntimeScheduleRecurringSchedule>;
    /**
     * The scope to which the downtime applies. Must follow the [common search syntax](https://docs.datadoghq.com/logs/explorer/search_syntax/).
     */
    scope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DowntimeSchedule resource.
 */
export interface DowntimeScheduleArgs {
    /**
     * The timezone in which to display the downtime's start and end times in Datadog applications. This is not used as an offset for scheduling.
     */
    displayTimezone?: pulumi.Input<string>;
    /**
     * A message to include with notifications for this downtime. Email notifications can be sent to specific users by using the same `@username` notation as events.
     */
    message?: pulumi.Input<string>;
    monitorIdentifier?: pulumi.Input<inputs.DowntimeScheduleMonitorIdentifier>;
    /**
     * If the first recovery notification during a downtime should be muted.
     */
    muteFirstRecoveryNotification?: pulumi.Input<boolean>;
    /**
     * States that will trigger a monitor notification when the `notifyEndTypes` action occurs.
     */
    notifyEndStates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Actions that will trigger a monitor notification if the downtime is in the `notifyEndTypes` state.
     */
    notifyEndTypes?: pulumi.Input<pulumi.Input<string>[]>;
    oneTimeSchedule?: pulumi.Input<inputs.DowntimeScheduleOneTimeSchedule>;
    recurringSchedule?: pulumi.Input<inputs.DowntimeScheduleRecurringSchedule>;
    /**
     * The scope to which the downtime applies. Must follow the [common search syntax](https://docs.datadoghq.com/logs/explorer/search_syntax/).
     */
    scope: pulumi.Input<string>;
}
