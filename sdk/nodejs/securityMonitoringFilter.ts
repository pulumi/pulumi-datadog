// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog Security Monitoring Rule API resource for security filters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const myFilter = new datadog.SecurityMonitoringFilter("my_filter", {
 *     name: "My filter",
 *     query: "The filter is filtering.",
 *     isEnabled: true,
 *     exclusionFilters: [
 *         {
 *             name: "first",
 *             query: "exclude some logs",
 *         },
 *         {
 *             name: "second",
 *             query: "exclude some other logs",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Security monitoring filters can be imported using ID, e.g.
 *
 * ```sh
 * $ pulumi import datadog:index/securityMonitoringFilter:SecurityMonitoringFilter my_filter m0o-hto-lkb
 * ```
 */
export class SecurityMonitoringFilter extends pulumi.CustomResource {
    /**
     * Get an existing SecurityMonitoringFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityMonitoringFilterState, opts?: pulumi.CustomResourceOptions): SecurityMonitoringFilter {
        return new SecurityMonitoringFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/securityMonitoringFilter:SecurityMonitoringFilter';

    /**
     * Returns true if the given object is an instance of SecurityMonitoringFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityMonitoringFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityMonitoringFilter.__pulumiType;
    }

    /**
     * Exclusion filters to exclude some logs from the security filter.
     */
    declare public readonly exclusionFilters: pulumi.Output<outputs.SecurityMonitoringFilterExclusionFilter[] | undefined>;
    /**
     * The filtered data type. Valid values are `logs`. Defaults to `"logs"`.
     */
    declare public readonly filteredDataType: pulumi.Output<string | undefined>;
    /**
     * Whether the security filter is enabled.
     */
    declare public readonly isEnabled: pulumi.Output<boolean>;
    /**
     * The name of the security filter.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The query of the security filter.
     */
    declare public readonly query: pulumi.Output<string>;
    /**
     * The version of the security filter.
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a SecurityMonitoringFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityMonitoringFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityMonitoringFilterArgs | SecurityMonitoringFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityMonitoringFilterState | undefined;
            resourceInputs["exclusionFilters"] = state?.exclusionFilters;
            resourceInputs["filteredDataType"] = state?.filteredDataType;
            resourceInputs["isEnabled"] = state?.isEnabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["query"] = state?.query;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as SecurityMonitoringFilterArgs | undefined;
            if (args?.isEnabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'isEnabled'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.query === undefined && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            resourceInputs["exclusionFilters"] = args?.exclusionFilters;
            resourceInputs["filteredDataType"] = args?.filteredDataType;
            resourceInputs["isEnabled"] = args?.isEnabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["query"] = args?.query;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityMonitoringFilter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityMonitoringFilter resources.
 */
export interface SecurityMonitoringFilterState {
    /**
     * Exclusion filters to exclude some logs from the security filter.
     */
    exclusionFilters?: pulumi.Input<pulumi.Input<inputs.SecurityMonitoringFilterExclusionFilter>[]>;
    /**
     * The filtered data type. Valid values are `logs`. Defaults to `"logs"`.
     */
    filteredDataType?: pulumi.Input<string>;
    /**
     * Whether the security filter is enabled.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the security filter.
     */
    name?: pulumi.Input<string>;
    /**
     * The query of the security filter.
     */
    query?: pulumi.Input<string>;
    /**
     * The version of the security filter.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SecurityMonitoringFilter resource.
 */
export interface SecurityMonitoringFilterArgs {
    /**
     * Exclusion filters to exclude some logs from the security filter.
     */
    exclusionFilters?: pulumi.Input<pulumi.Input<inputs.SecurityMonitoringFilterExclusionFilter>[]>;
    /**
     * The filtered data type. Valid values are `logs`. Defaults to `"logs"`.
     */
    filteredDataType?: pulumi.Input<string>;
    /**
     * Whether the security filter is enabled.
     */
    isEnabled: pulumi.Input<boolean>;
    /**
     * The name of the security filter.
     */
    name: pulumi.Input<string>;
    /**
     * The query of the security filter.
     */
    query: pulumi.Input<string>;
}
