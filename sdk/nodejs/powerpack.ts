// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog powerpack resource. This can be used to create and manage Datadog powerpacks.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * // Manage Datadog Powerpacks
 * const foo = new datadog.Powerpack("foo", {
 *     description: "Created using the Datadog provider in terraform",
 *     liveSpan: "4h",
 *     layout: {
 *         height: 10,
 *         width: 3,
 *         x: 1,
 *         y: 0,
 *     },
 *     templateVariables: [{
 *         defaults: ["defaults"],
 *         name: "datacenter",
 *     }],
 *     widgets: [{
 *         eventStreamDefinition: {
 *             query: "*",
 *             eventSize: "l",
 *             title: "Widget Title",
 *             titleSize: "16",
 *             titleAlign: "right",
 *         },
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import datadog:index/powerpack:Powerpack foo 11111111-2222-3333-4444-555555555555
 * ```
 */
export class Powerpack extends pulumi.CustomResource {
    /**
     * Get an existing Powerpack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PowerpackState, opts?: pulumi.CustomResourceOptions): Powerpack {
        return new Powerpack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/powerpack:Powerpack';

    /**
     * Returns true if the given object is an instance of Powerpack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Powerpack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Powerpack.__pulumiType;
    }

    /**
     * The description of the powerpack.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The layout of the powerpack on a free-form dashboard.
     */
    public readonly layout!: pulumi.Output<outputs.PowerpackLayout>;
    /**
     * The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `weekToDate`, `monthToDate`, `1y`, `alert`.
     */
    public readonly liveSpan!: pulumi.Output<string | undefined>;
    /**
     * The name for the powerpack.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * Whether or not title should be displayed in the powerpack.
     */
    public readonly showTitle!: pulumi.Output<boolean | undefined>;
    /**
     * List of tags to identify this powerpack.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The list of template variables for this powerpack.
     */
    public readonly templateVariables!: pulumi.Output<outputs.PowerpackTemplateVariable[] | undefined>;
    /**
     * The list of widgets to display in the powerpack.
     */
    public readonly widgets!: pulumi.Output<outputs.PowerpackWidget[] | undefined>;

    /**
     * Create a Powerpack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PowerpackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PowerpackArgs | PowerpackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PowerpackState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["layout"] = state ? state.layout : undefined;
            resourceInputs["liveSpan"] = state ? state.liveSpan : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["showTitle"] = state ? state.showTitle : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["templateVariables"] = state ? state.templateVariables : undefined;
            resourceInputs["widgets"] = state ? state.widgets : undefined;
        } else {
            const args = argsOrState as PowerpackArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["layout"] = args ? args.layout : undefined;
            resourceInputs["liveSpan"] = args ? args.liveSpan : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["showTitle"] = args ? args.showTitle : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateVariables"] = args ? args.templateVariables : undefined;
            resourceInputs["widgets"] = args ? args.widgets : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Powerpack.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Powerpack resources.
 */
export interface PowerpackState {
    /**
     * The description of the powerpack.
     */
    description?: pulumi.Input<string>;
    /**
     * The layout of the powerpack on a free-form dashboard.
     */
    layout?: pulumi.Input<inputs.PowerpackLayout>;
    /**
     * The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `weekToDate`, `monthToDate`, `1y`, `alert`.
     */
    liveSpan?: pulumi.Input<string>;
    /**
     * The name for the powerpack.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether or not title should be displayed in the powerpack.
     */
    showTitle?: pulumi.Input<boolean>;
    /**
     * List of tags to identify this powerpack.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of template variables for this powerpack.
     */
    templateVariables?: pulumi.Input<pulumi.Input<inputs.PowerpackTemplateVariable>[]>;
    /**
     * The list of widgets to display in the powerpack.
     */
    widgets?: pulumi.Input<pulumi.Input<inputs.PowerpackWidget>[]>;
}

/**
 * The set of arguments for constructing a Powerpack resource.
 */
export interface PowerpackArgs {
    /**
     * The description of the powerpack.
     */
    description?: pulumi.Input<string>;
    /**
     * The layout of the powerpack on a free-form dashboard.
     */
    layout?: pulumi.Input<inputs.PowerpackLayout>;
    /**
     * The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `weekToDate`, `monthToDate`, `1y`, `alert`.
     */
    liveSpan?: pulumi.Input<string>;
    /**
     * The name for the powerpack.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether or not title should be displayed in the powerpack.
     */
    showTitle?: pulumi.Input<boolean>;
    /**
     * List of tags to identify this powerpack.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of template variables for this powerpack.
     */
    templateVariables?: pulumi.Input<pulumi.Input<inputs.PowerpackTemplateVariable>[]>;
    /**
     * The list of widgets to display in the powerpack.
     */
    widgets?: pulumi.Input<pulumi.Input<inputs.PowerpackWidget>[]>;
}
