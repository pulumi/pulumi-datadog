// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog synthetics test resource. This can be used to create and manage Datadog synthetics test.
 *
 * #### *Warning*
 * Starting from version 3.1.0+, the direct usage of global variables in the configuration is deprecated, in favor of
 * local variables of type `global`. As an example, if you were previously using `{{ GLOBAL_VAR }}` directly in your
 * configuration, add a `configVariable` of type `global` with the `id` matching the `id` of the global variable `GLOBAL_VAR`, which can be found in the Synthetics UI or from the output of the `datadog.SyntheticsGlobalVariable` resource. The name can be chosen freely.
 *
 * In practice, it means going from (simplified configuration):
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * to
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * which you can now use in your request definition:
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * // Example Usage (Synthetics API test)
 * // Create a new Datadog Synthetics API/HTTP test on https://www.example.org
 * const testUptime = new datadog.SyntheticsTest("testUptime", {
 *     assertions: [{
 *         operator: "is",
 *         target: "200",
 *         type: "statusCode",
 *     }],
 *     locations: ["aws:eu-central-1"],
 *     message: "Notify @pagerduty",
 *     name: "An Uptime test on example.org",
 *     optionsList: {
 *         monitorOptions: {
 *             renotifyInterval: 120,
 *         },
 *         retry: {
 *             count: 2,
 *             interval: 300,
 *         },
 *         tickEvery: 900,
 *     },
 *     requestDefinition: {
 *         method: "GET",
 *         url: "https://www.example.org",
 *     },
 *     requestHeaders: {
 *         "Content-Type": "application/json",
 *     },
 *     status: "live",
 *     subtype: "http",
 *     tags: [
 *         "foo:bar",
 *         "foo",
 *         "env:test",
 *     ],
 *     type: "api",
 * });
 * // Example Usage (Authenticated API test)
 * // Create a new Datadog Synthetics API/HTTP test on https://www.example.org
 * const testApi = new datadog.SyntheticsTest("testApi", {
 *     assertions: [{
 *         operator: "is",
 *         target: "200",
 *         type: "statusCode",
 *     }],
 *     locations: ["aws:eu-central-1"],
 *     message: "Notify @pagerduty",
 *     name: "An API test on example.org",
 *     optionsList: {
 *         monitorOptions: {
 *             renotifyInterval: 120,
 *         },
 *         retry: {
 *             count: 2,
 *             interval: 300,
 *         },
 *         tickEvery: 900,
 *     },
 *     requestDefinition: {
 *         method: "GET",
 *         url: "https://www.example.org",
 *     },
 *     requestHeaders: {
 *         Authentication: "Token: 1234566789",
 *         "Content-Type": "application/json",
 *     },
 *     status: "live",
 *     subtype: "http",
 *     tags: [
 *         "foo:bar",
 *         "foo",
 *         "env:test",
 *     ],
 *     type: "api",
 * });
 * // Example Usage (Synthetics SSL test)
 * // Create a new Datadog Synthetics API/SSL test on example.org
 * const testSsl = new datadog.SyntheticsTest("testSsl", {
 *     assertions: [{
 *         operator: "isInMoreThan",
 *         target: "30",
 *         type: "certificate",
 *     }],
 *     locations: ["aws:eu-central-1"],
 *     message: "Notify @pagerduty",
 *     name: "An API test on example.org",
 *     optionsList: {
 *         acceptSelfSigned: true,
 *         tickEvery: 900,
 *     },
 *     requestDefinition: {
 *         host: "example.org",
 *         port: 443,
 *     },
 *     status: "live",
 *     subtype: "ssl",
 *     tags: [
 *         "foo:bar",
 *         "foo",
 *         "env:test",
 *     ],
 *     type: "api",
 * });
 * // Example Usage (Synthetics TCP test)
 * // Create a new Datadog Synthetics API/TCP test on example.org
 * const testTcp = new datadog.SyntheticsTest("testTcp", {
 *     assertions: [{
 *         operator: "lessThan",
 *         target: "2000",
 *         type: "responseTime",
 *     }],
 *     configVariables: [{
 *         id: "76636cd1-82e2-4aeb-9cfe-51366a8198a2",
 *         name: "MY_GLOBAL_VAR",
 *         type: "global",
 *     }],
 *     locations: ["aws:eu-central-1"],
 *     message: "Notify @pagerduty",
 *     name: "An API test on example.org",
 *     optionsList: {
 *         tickEvery: 900,
 *     },
 *     requestDefinition: {
 *         host: "example.org",
 *         port: 443,
 *     },
 *     status: "live",
 *     subtype: "tcp",
 *     tags: [
 *         "foo:bar",
 *         "foo",
 *         "env:test",
 *     ],
 *     type: "api",
 * });
 * // Example Usage (Synthetics DNS test)
 * // Create a new Datadog Synthetics API/DNS test on example.org
 * const testDns = new datadog.SyntheticsTest("testDns", {
 *     assertions: [{
 *         operator: "is",
 *         property: "A",
 *         target: "0.0.0.0",
 *         type: "recordSome",
 *     }],
 *     locations: ["aws:eu-central-1"],
 *     message: "Notify @pagerduty",
 *     name: "An API test on example.org",
 *     optionsList: {
 *         tickEvery: 900,
 *     },
 *     requestDefinition: {
 *         host: "example.org",
 *     },
 *     status: "live",
 *     subtype: "dns",
 *     tags: [
 *         "foo:bar",
 *         "foo",
 *         "env:test",
 *     ],
 *     type: "api",
 * });
 * // Example Usage (Synthetics Multistep API test)
 * // Create a new Datadog Synthetics Multistep API test
 * const testMultiStep = new datadog.SyntheticsTest("testMultiStep", {
 *     apiSteps: [
 *         {
 *             assertions: [{
 *                 operator: "is",
 *                 target: "200",
 *                 type: "statusCode",
 *             }],
 *             name: "An API test on example.org",
 *             requestDefinition: {
 *                 method: "GET",
 *                 url: "https://example.org",
 *             },
 *             requestHeaders: {
 *                 Authentication: "Token: 1234566789",
 *                 "Content-Type": "application/json",
 *             },
 *             subtype: "http",
 *         },
 *         {
 *             assertions: [{
 *                 operator: "is",
 *                 target: "200",
 *                 type: "statusCode",
 *             }],
 *             name: "An API test on example.org",
 *             requestDefinition: {
 *                 method: "GET",
 *                 url: "http://example.org",
 *             },
 *             subtype: "http",
 *         },
 *     ],
 *     locations: ["aws:eu-central-1"],
 *     name: "Multistep API test",
 *     optionsList: {
 *         acceptSelfSigned: true,
 *         tickEvery: 900,
 *     },
 *     status: "live",
 *     subtype: "multi",
 *     tags: [
 *         "foo:bar",
 *         "foo",
 *         "env:test",
 *     ],
 *     type: "api",
 * });
 * // Example Usage (Synthetics Browser test)
 * // Create a new Datadog Synthetics Browser test starting on https://www.example.org
 * const testBrowser = new datadog.SyntheticsTest("testBrowser", {
 *     browserSteps: [{
 *         name: "Check current url",
 *         params: {
 *             check: "contains",
 *             value: "datadoghq",
 *         },
 *         type: "assertCurrentUrl",
 *     }],
 *     browserVariables: [
 *         {
 *             example: "597",
 *             name: "MY_PATTERN_VAR",
 *             pattern: "{{numeric(3)}}",
 *             type: "text",
 *         },
 *         {
 *             example: "jd8-afe-ydv.4546132139@synthetics.dtdg.co",
 *             name: "MY_EMAIL_VAR",
 *             pattern: "jd8-afe-ydv.{{ numeric(10) }}@synthetics.dtdg.co",
 *             type: "email",
 *         },
 *         {
 *             id: "76636cd1-82e2-4aeb-9cfe-51366a8198a2",
 *             name: "MY_GLOBAL_VAR",
 *             type: "global",
 *         },
 *     ],
 *     deviceIds: ["laptop_large"],
 *     locations: ["aws:eu-central-1"],
 *     message: "Notify @qa",
 *     name: "A Browser test on example.org",
 *     optionsList: {
 *         tickEvery: 3600,
 *     },
 *     requestDefinition: {
 *         method: "GET",
 *         url: "https://app.datadoghq.com",
 *     },
 *     status: "paused",
 *     tags: [],
 *     type: "browser",
 * });
 * ```
 *
 * ## Import
 *
 * Synthetics tests can be imported using their public string ID, e.g.
 *
 * ```sh
 *  $ pulumi import datadog:index/syntheticsTest:SyntheticsTest fizz abc-123-xyz
 * ```
 */
export class SyntheticsTest extends pulumi.CustomResource {
    /**
     * Get an existing SyntheticsTest resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SyntheticsTestState, opts?: pulumi.CustomResourceOptions): SyntheticsTest {
        return new SyntheticsTest(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/syntheticsTest:SyntheticsTest';

    /**
     * Returns true if the given object is an instance of SyntheticsTest.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SyntheticsTest {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SyntheticsTest.__pulumiType;
    }

    /**
     * Steps for multistep api tests
     */
    public readonly apiSteps!: pulumi.Output<outputs.SyntheticsTestApiStep[] | undefined>;
    /**
     * Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
     */
    public readonly assertions!: pulumi.Output<outputs.SyntheticsTestAssertion[] | undefined>;
    /**
     * Steps for browser tests.
     */
    public readonly browserSteps!: pulumi.Output<outputs.SyntheticsTestBrowserStep[] | undefined>;
    /**
     * Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
     */
    public readonly browserVariables!: pulumi.Output<outputs.SyntheticsTestBrowserVariable[] | undefined>;
    /**
     * Variables used for the test configuration. Multiple `configVariable` blocks are allowed with the structure below.
     */
    public readonly configVariables!: pulumi.Output<outputs.SyntheticsTestConfigVariable[] | undefined>;
    /**
     * Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptopLarge`, `tablet`, `mobileSmall`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
     */
    public readonly deviceIds!: pulumi.Output<string[] | undefined>;
    /**
     * Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
     */
    public readonly locations!: pulumi.Output<string[]>;
    /**
     * A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events.
     */
    public readonly message!: pulumi.Output<string | undefined>;
    /**
     * ID of the monitor associated with the Datadog synthetics test.
     */
    public /*out*/ readonly monitorId!: pulumi.Output<number>;
    /**
     * Name of Datadog synthetics test.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly optionsList!: pulumi.Output<outputs.SyntheticsTestOptionsList | undefined>;
    /**
     * The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
     */
    public readonly requestBasicauth!: pulumi.Output<outputs.SyntheticsTestRequestBasicauth | undefined>;
    /**
     * Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
     */
    public readonly requestClientCertificate!: pulumi.Output<outputs.SyntheticsTestRequestClientCertificate | undefined>;
    /**
     * Required if `type = "api"`. The synthetics test request.
     */
    public readonly requestDefinition!: pulumi.Output<outputs.SyntheticsTestRequestDefinition | undefined>;
    /**
     * Header name and value map.
     */
    public readonly requestHeaders!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The proxy to perform the test.
     */
    public readonly requestProxy!: pulumi.Output<outputs.SyntheticsTestRequestProxy | undefined>;
    /**
     * Query arguments name and value map.
     */
    public readonly requestQuery!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
     */
    public readonly setCookie!: pulumi.Output<string | undefined>;
    /**
     * Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
     */
    public readonly subtype!: pulumi.Output<string | undefined>;
    /**
     * A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Synthetics test type. Valid values are `api`, `browser`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a SyntheticsTest resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SyntheticsTestArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SyntheticsTestArgs | SyntheticsTestState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SyntheticsTestState | undefined;
            resourceInputs["apiSteps"] = state ? state.apiSteps : undefined;
            resourceInputs["assertions"] = state ? state.assertions : undefined;
            resourceInputs["browserSteps"] = state ? state.browserSteps : undefined;
            resourceInputs["browserVariables"] = state ? state.browserVariables : undefined;
            resourceInputs["configVariables"] = state ? state.configVariables : undefined;
            resourceInputs["deviceIds"] = state ? state.deviceIds : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["monitorId"] = state ? state.monitorId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["optionsList"] = state ? state.optionsList : undefined;
            resourceInputs["requestBasicauth"] = state ? state.requestBasicauth : undefined;
            resourceInputs["requestClientCertificate"] = state ? state.requestClientCertificate : undefined;
            resourceInputs["requestDefinition"] = state ? state.requestDefinition : undefined;
            resourceInputs["requestHeaders"] = state ? state.requestHeaders : undefined;
            resourceInputs["requestProxy"] = state ? state.requestProxy : undefined;
            resourceInputs["requestQuery"] = state ? state.requestQuery : undefined;
            resourceInputs["setCookie"] = state ? state.setCookie : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subtype"] = state ? state.subtype : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SyntheticsTestArgs | undefined;
            if ((!args || args.locations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locations'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["apiSteps"] = args ? args.apiSteps : undefined;
            resourceInputs["assertions"] = args ? args.assertions : undefined;
            resourceInputs["browserSteps"] = args ? args.browserSteps : undefined;
            resourceInputs["browserVariables"] = args ? args.browserVariables : undefined;
            resourceInputs["configVariables"] = args ? args.configVariables : undefined;
            resourceInputs["deviceIds"] = args ? args.deviceIds : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["message"] = args ? args.message : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["optionsList"] = args ? args.optionsList : undefined;
            resourceInputs["requestBasicauth"] = args ? args.requestBasicauth : undefined;
            resourceInputs["requestClientCertificate"] = args ? args.requestClientCertificate : undefined;
            resourceInputs["requestDefinition"] = args ? args.requestDefinition : undefined;
            resourceInputs["requestHeaders"] = args ? args.requestHeaders : undefined;
            resourceInputs["requestProxy"] = args ? args.requestProxy : undefined;
            resourceInputs["requestQuery"] = args ? args.requestQuery : undefined;
            resourceInputs["setCookie"] = args ? args.setCookie : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["subtype"] = args ? args.subtype : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["monitorId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SyntheticsTest.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SyntheticsTest resources.
 */
export interface SyntheticsTestState {
    /**
     * Steps for multistep api tests
     */
    apiSteps?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestApiStep>[]>;
    /**
     * Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
     */
    assertions?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestAssertion>[]>;
    /**
     * Steps for browser tests.
     */
    browserSteps?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestBrowserStep>[]>;
    /**
     * Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
     */
    browserVariables?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestBrowserVariable>[]>;
    /**
     * Variables used for the test configuration. Multiple `configVariable` blocks are allowed with the structure below.
     */
    configVariables?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestConfigVariable>[]>;
    /**
     * Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptopLarge`, `tablet`, `mobileSmall`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
     */
    deviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
     */
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events.
     */
    message?: pulumi.Input<string>;
    /**
     * ID of the monitor associated with the Datadog synthetics test.
     */
    monitorId?: pulumi.Input<number>;
    /**
     * Name of Datadog synthetics test.
     */
    name?: pulumi.Input<string>;
    optionsList?: pulumi.Input<inputs.SyntheticsTestOptionsList>;
    /**
     * The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
     */
    requestBasicauth?: pulumi.Input<inputs.SyntheticsTestRequestBasicauth>;
    /**
     * Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
     */
    requestClientCertificate?: pulumi.Input<inputs.SyntheticsTestRequestClientCertificate>;
    /**
     * Required if `type = "api"`. The synthetics test request.
     */
    requestDefinition?: pulumi.Input<inputs.SyntheticsTestRequestDefinition>;
    /**
     * Header name and value map.
     */
    requestHeaders?: pulumi.Input<{[key: string]: any}>;
    /**
     * The proxy to perform the test.
     */
    requestProxy?: pulumi.Input<inputs.SyntheticsTestRequestProxy>;
    /**
     * Query arguments name and value map.
     */
    requestQuery?: pulumi.Input<{[key: string]: any}>;
    /**
     * Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
     */
    setCookie?: pulumi.Input<string>;
    /**
     * Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
     */
    status?: pulumi.Input<string>;
    /**
     * The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
     */
    subtype?: pulumi.Input<string>;
    /**
     * A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Synthetics test type. Valid values are `api`, `browser`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SyntheticsTest resource.
 */
export interface SyntheticsTestArgs {
    /**
     * Steps for multistep api tests
     */
    apiSteps?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestApiStep>[]>;
    /**
     * Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
     */
    assertions?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestAssertion>[]>;
    /**
     * Steps for browser tests.
     */
    browserSteps?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestBrowserStep>[]>;
    /**
     * Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
     */
    browserVariables?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestBrowserVariable>[]>;
    /**
     * Variables used for the test configuration. Multiple `configVariable` blocks are allowed with the structure below.
     */
    configVariables?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestConfigVariable>[]>;
    /**
     * Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptopLarge`, `tablet`, `mobileSmall`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
     */
    deviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
     */
    locations: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events.
     */
    message?: pulumi.Input<string>;
    /**
     * Name of Datadog synthetics test.
     */
    name: pulumi.Input<string>;
    optionsList?: pulumi.Input<inputs.SyntheticsTestOptionsList>;
    /**
     * The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
     */
    requestBasicauth?: pulumi.Input<inputs.SyntheticsTestRequestBasicauth>;
    /**
     * Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
     */
    requestClientCertificate?: pulumi.Input<inputs.SyntheticsTestRequestClientCertificate>;
    /**
     * Required if `type = "api"`. The synthetics test request.
     */
    requestDefinition?: pulumi.Input<inputs.SyntheticsTestRequestDefinition>;
    /**
     * Header name and value map.
     */
    requestHeaders?: pulumi.Input<{[key: string]: any}>;
    /**
     * The proxy to perform the test.
     */
    requestProxy?: pulumi.Input<inputs.SyntheticsTestRequestProxy>;
    /**
     * Query arguments name and value map.
     */
    requestQuery?: pulumi.Input<{[key: string]: any}>;
    /**
     * Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
     */
    setCookie?: pulumi.Input<string>;
    /**
     * Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
     */
    status: pulumi.Input<string>;
    /**
     * The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
     */
    subtype?: pulumi.Input<string>;
    /**
     * A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Synthetics test type. Valid values are `api`, `browser`.
     */
    type: pulumi.Input<string>;
}
