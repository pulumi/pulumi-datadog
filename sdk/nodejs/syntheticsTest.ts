// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a Datadog synthetics test resource. This can be used to create and manage Datadog synthetics test.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * // Example Usage (Synthetics API test)
 * // Create a new Datadog Synthetics API/HTTP test on https://www.example.org
 * const testApi = new datadog.SyntheticsTest("testApi", {
 *     type: "api",
 *     subtype: "http",
 *     requestDefinition: {
 *         method: "GET",
 *         url: "https://www.example.org",
 *     },
 *     requestHeaders: {
 *         "Content-Type": "application/json",
 *         Authentication: "Token: 1234566789",
 *     },
 *     assertions: [{
 *         type: "statusCode",
 *         operator: "is",
 *         target: "200",
 *     }],
 *     locations: ["aws:eu-central-1"],
 *     optionsList: {
 *         tickEvery: 900,
 *         retry: {
 *             count: 2,
 *             interval: 300,
 *         },
 *         monitorOptions: {
 *             renotifyInterval: 100,
 *         },
 *     },
 *     name: "An API test on example.org",
 *     message: "Notify @pagerduty",
 *     tags: [
 *         "foo:bar",
 *         "foo",
 *         "env:test",
 *     ],
 *     status: "live",
 * });
 * // Example Usage (Synthetics SSL test)
 * // Create a new Datadog Synthetics API/SSL test on example.org
 * const testSsl = new datadog.SyntheticsTest("testSsl", {
 *     type: "api",
 *     subtype: "ssl",
 *     requestDefinition: {
 *         host: "example.org",
 *         port: 443,
 *     },
 *     assertions: [{
 *         type: "certificate",
 *         operator: "isInMoreThan",
 *         target: 30,
 *     }],
 *     locations: ["aws:eu-central-1"],
 *     optionsList: {
 *         tickEvery: 900,
 *         acceptSelfSigned: true,
 *     },
 *     name: "An API test on example.org",
 *     message: "Notify @pagerduty",
 *     tags: [
 *         "foo:bar",
 *         "foo",
 *         "env:test",
 *     ],
 *     status: "live",
 * });
 * // Example Usage (Synthetics TCP test)
 * // Create a new Datadog Synthetics API/TCP test on example.org
 * const testTcp = new datadog.SyntheticsTest("testTcp", {
 *     type: "api",
 *     subtype: "tcp",
 *     requestDefinition: {
 *         host: "example.org",
 *         port: 443,
 *     },
 *     assertions: [{
 *         type: "responseTime",
 *         operator: "lessThan",
 *         target: 2000,
 *     }],
 *     locations: ["aws:eu-central-1"],
 *     optionsList: {
 *         tickEvery: 900,
 *     },
 *     name: "An API test on example.org",
 *     message: "Notify @pagerduty",
 *     tags: [
 *         "foo:bar",
 *         "foo",
 *         "env:test",
 *     ],
 *     status: "live",
 * });
 * // Example Usage (Synthetics DNS test)
 * // Create a new Datadog Synthetics API/DNS test on example.org
 * const testDns = new datadog.SyntheticsTest("testDns", {
 *     type: "api",
 *     subtype: "dns",
 *     requestDefinition: {
 *         host: "example.org",
 *     },
 *     assertions: [{
 *         type: "recordSome",
 *         operator: "is",
 *         property: "A",
 *         target: "0.0.0.0",
 *     }],
 *     locations: ["aws:eu-central-1"],
 *     optionsList: {
 *         tickEvery: 900,
 *     },
 *     name: "An API test on example.org",
 *     message: "Notify @pagerduty",
 *     tags: [
 *         "foo:bar",
 *         "foo",
 *         "env:test",
 *     ],
 *     status: "live",
 * });
 * // Example Usage (Synthetics Browser test)
 * // Support for Synthetics Browser test steps is limited (see below)
 * // Create a new Datadog Synthetics Browser test starting on https://www.example.org
 * const testBrowser = new datadog.SyntheticsTest("testBrowser", {
 *     type: "browser",
 *     requestDefinition: {
 *         method: "GET",
 *         url: "https://app.datadoghq.com",
 *     },
 *     deviceIds: ["laptop_large"],
 *     locations: ["aws:eu-central-1"],
 *     optionsList: {
 *         tickEvery: 3600,
 *     },
 *     name: "A Browser test on example.org",
 *     message: "Notify @qa",
 *     tags: [],
 *     status: "paused",
 *     steps: [{
 *         name: "Check current url",
 *         type: "assertCurrentUrl",
 *         params: JSON.stringify({
 *             check: "contains",
 *             value: "datadoghq",
 *         }),
 *     }],
 *     variables: [
 *         {
 *             type: "text",
 *             name: "MY_PATTERN_VAR",
 *             pattern: "{{numeric(3)}}",
 *             example: "597",
 *         },
 *         {
 *             type: "email",
 *             name: "MY_EMAIL_VAR",
 *             pattern: "jd8-afe-ydv.{{ numeric(10) }}@synthetics.dtdg.co",
 *             example: "jd8-afe-ydv.4546132139@synthetics.dtdg.co",
 *         },
 *         {
 *             type: "global",
 *             name: "MY_GLOBAL_VAR",
 *             id: "76636cd1-82e2-4aeb-9cfe-51366a8198a2",
 *         },
 *     ],
 * });
 * ```
 *
 * <!-- schema generated by tfplugindocs -->
 * ## Schema
 *
 * ### Required
 *
 * - **locations** (Set of String) Array of locations used to run the test. Refer to [Datadog documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g. `aws:eu-central-1`).
 * - **name** (String) Name of Datadog synthetics test.
 * - **status** (String) Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
 * - **type** (String) Synthetics test type (`api` or `browser`).
 *
 * ### Optional
 *
 * - **api_step** (Block List) Steps for multistep api tests (see below for nested schema)
 * - **assertion** (Block List) Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below. (see below for nested schema)
 * - **assertions** (List of Map of String, Deprecated) List of assertions. **Deprecated.** Define `assertion` blocks instead.
 * - **browser_step** (Block List) Steps for browser tests. (see below for nested schema)
 * - **browser_variable** (Block List) Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below. (see below for nested schema)
 * - **config_variable** (Block List) Variables used for the test configuration. Multiple `configVariable` blocks are allowed with the structure below. (see below for nested schema)
 * - **device_ids** (List of String) Array with the different device IDs used to run the test. Allowed enum values: `laptopLarge`, `tablet`, `mobileSmall` (only available for `browser` tests).
 * - **message** (String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events.
 * - **options** (Map of String, Deprecated) **Deprecated.** Define `optionsList` blocks instead.
 * - **options_list** (Block List, Max: 1) (see below for nested schema)
 * - **request** (Map of String, Deprecated) The synthetics test request. Required if `type = "api"`. **Deprecated.** Define `requestDefinition` list with one element instead.
 * - **request_basicauth** (Block List, Max: 1) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below. (see below for nested schema)
 * - **request_client_certificate** (Block List, Max: 1) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below. (see below for nested schema)
 * - **request_definition** (Block List, Max: 1) The synthetics test request. Required if `type = "api"`. (see below for nested schema)
 * - **request_headers** (Map of String) Header name and value map.
 * - **request_query** (Map of String) Query arguments name and value map.
 * - **step** (Block List, Deprecated) Steps for browser tests. **Deprecated.** Define `browserStep` blocks instead. (see below for nested schema)
 * - **subtype** (String) When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
 * - **tags** (List of String) A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
 * - **variable** (Block List, Deprecated) Variables used for a browser test steps. Multiple `browserVariable` blocks are allowed with the structure below. **Deprecated.** Define `browserVariable` blocks instead. (see below for nested schema)
 *
 * ### Read-Only
 *
 * - **id** (String) The ID of this resource.
 * - **monitor_id** (Number) ID of the monitor associated with the Datadog synthetics test.
 *
 * <a id="nestedblock--api_step"></a>
 *
 * ## Import
 *
 * Import is supported using the following syntax# Synthetics tests can be imported using their public string ID, e.g.
 *
 * ```sh
 *  $ pulumi import datadog:index/syntheticsTest:SyntheticsTest fizz abc-123-xyz
 * ```
 */
export class SyntheticsTest extends pulumi.CustomResource {
    /**
     * Get an existing SyntheticsTest resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SyntheticsTestState, opts?: pulumi.CustomResourceOptions): SyntheticsTest {
        return new SyntheticsTest(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/syntheticsTest:SyntheticsTest';

    /**
     * Returns true if the given object is an instance of SyntheticsTest.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SyntheticsTest {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SyntheticsTest.__pulumiType;
    }

    /**
     * Steps for multistep api tests
     */
    public readonly apiSteps!: pulumi.Output<outputs.SyntheticsTestApiStep[] | undefined>;
    /**
     * List of assertions.
     *
     * @deprecated Define `assertion` blocks instead.
     */
    public readonly assertions!: pulumi.Output<{[key: string]: any}[] | undefined>;
    /**
     * Steps for browser tests.
     */
    public readonly browserSteps!: pulumi.Output<outputs.SyntheticsTestBrowserStep[] | undefined>;
    /**
     * Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
     */
    public readonly browserVariables!: pulumi.Output<outputs.SyntheticsTestBrowserVariable[] | undefined>;
    /**
     * Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
     */
    public readonly configVariables!: pulumi.Output<outputs.SyntheticsTestConfigVariable[] | undefined>;
    /**
     * Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
     * (only available for `browser` tests).
     */
    public readonly deviceIds!: pulumi.Output<string[] | undefined>;
    /**
     * Array of locations used to run the test. Refer to [Datadog
     * documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
     * `aws:eu-central-1`).
     */
    public readonly locations!: pulumi.Output<string[]>;
    /**
     * A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
     * using the same `@username` notation as events.
     */
    public readonly message!: pulumi.Output<string | undefined>;
    /**
     * ID of the monitor associated with the Datadog synthetics test.
     */
    public /*out*/ readonly monitorId!: pulumi.Output<number>;
    /**
     * Name of Datadog synthetics test.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * @deprecated Define `options_list` blocks instead.
     */
    public readonly options!: pulumi.Output<outputs.SyntheticsTestOptions | undefined>;
    public readonly optionsList!: pulumi.Output<outputs.SyntheticsTestOptionsList | undefined>;
    /**
     * The synthetics test request. Required if `type = "api"`.
     *
     * @deprecated Define `request_definition` list with one element instead.
     */
    public readonly request!: pulumi.Output<outputs.SyntheticsTestRequest | undefined>;
    /**
     * The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
     */
    public readonly requestBasicauth!: pulumi.Output<outputs.SyntheticsTestRequestBasicauth | undefined>;
    /**
     * Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
     * below.
     */
    public readonly requestClientCertificate!: pulumi.Output<outputs.SyntheticsTestRequestClientCertificate | undefined>;
    /**
     * The synthetics test request. Required if `type = "api"`.
     */
    public readonly requestDefinition!: pulumi.Output<outputs.SyntheticsTestRequestDefinition | undefined>;
    /**
     * Header name and value map.
     */
    public readonly requestHeaders!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Query arguments name and value map.
     */
    public readonly requestQuery!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Steps for browser tests.
     *
     * @deprecated Define `browser_step` blocks instead.
     */
    public readonly steps!: pulumi.Output<outputs.SyntheticsTestStep[] | undefined>;
    /**
     * When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
     */
    public readonly subtype!: pulumi.Output<string | undefined>;
    /**
     * A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
     * synthetics page of the UI. Default is an empty list (`[]`).
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Synthetics test type (`api` or `browser`).
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
     *
     * @deprecated Define `browser_variable` blocks instead.
     */
    public readonly variables!: pulumi.Output<outputs.SyntheticsTestVariable[] | undefined>;

    /**
     * Create a SyntheticsTest resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SyntheticsTestArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SyntheticsTestArgs | SyntheticsTestState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SyntheticsTestState | undefined;
            inputs["apiSteps"] = state ? state.apiSteps : undefined;
            inputs["assertions"] = state ? state.assertions : undefined;
            inputs["browserSteps"] = state ? state.browserSteps : undefined;
            inputs["browserVariables"] = state ? state.browserVariables : undefined;
            inputs["configVariables"] = state ? state.configVariables : undefined;
            inputs["deviceIds"] = state ? state.deviceIds : undefined;
            inputs["locations"] = state ? state.locations : undefined;
            inputs["message"] = state ? state.message : undefined;
            inputs["monitorId"] = state ? state.monitorId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["options"] = state ? state.options : undefined;
            inputs["optionsList"] = state ? state.optionsList : undefined;
            inputs["request"] = state ? state.request : undefined;
            inputs["requestBasicauth"] = state ? state.requestBasicauth : undefined;
            inputs["requestClientCertificate"] = state ? state.requestClientCertificate : undefined;
            inputs["requestDefinition"] = state ? state.requestDefinition : undefined;
            inputs["requestHeaders"] = state ? state.requestHeaders : undefined;
            inputs["requestQuery"] = state ? state.requestQuery : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["steps"] = state ? state.steps : undefined;
            inputs["subtype"] = state ? state.subtype : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["variables"] = state ? state.variables : undefined;
        } else {
            const args = argsOrState as SyntheticsTestArgs | undefined;
            if ((!args || args.locations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locations'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["apiSteps"] = args ? args.apiSteps : undefined;
            inputs["assertions"] = args ? args.assertions : undefined;
            inputs["browserSteps"] = args ? args.browserSteps : undefined;
            inputs["browserVariables"] = args ? args.browserVariables : undefined;
            inputs["configVariables"] = args ? args.configVariables : undefined;
            inputs["deviceIds"] = args ? args.deviceIds : undefined;
            inputs["locations"] = args ? args.locations : undefined;
            inputs["message"] = args ? args.message : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["options"] = args ? args.options : undefined;
            inputs["optionsList"] = args ? args.optionsList : undefined;
            inputs["request"] = args ? args.request : undefined;
            inputs["requestBasicauth"] = args ? args.requestBasicauth : undefined;
            inputs["requestClientCertificate"] = args ? args.requestClientCertificate : undefined;
            inputs["requestDefinition"] = args ? args.requestDefinition : undefined;
            inputs["requestHeaders"] = args ? args.requestHeaders : undefined;
            inputs["requestQuery"] = args ? args.requestQuery : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["steps"] = args ? args.steps : undefined;
            inputs["subtype"] = args ? args.subtype : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["variables"] = args ? args.variables : undefined;
            inputs["monitorId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SyntheticsTest.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SyntheticsTest resources.
 */
export interface SyntheticsTestState {
    /**
     * Steps for multistep api tests
     */
    readonly apiSteps?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestApiStep>[]>;
    /**
     * List of assertions.
     *
     * @deprecated Define `assertion` blocks instead.
     */
    readonly assertions?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
    /**
     * Steps for browser tests.
     */
    readonly browserSteps?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestBrowserStep>[]>;
    /**
     * Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
     */
    readonly browserVariables?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestBrowserVariable>[]>;
    /**
     * Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
     */
    readonly configVariables?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestConfigVariable>[]>;
    /**
     * Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
     * (only available for `browser` tests).
     */
    readonly deviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Array of locations used to run the test. Refer to [Datadog
     * documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
     * `aws:eu-central-1`).
     */
    readonly locations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
     * using the same `@username` notation as events.
     */
    readonly message?: pulumi.Input<string>;
    /**
     * ID of the monitor associated with the Datadog synthetics test.
     */
    readonly monitorId?: pulumi.Input<number>;
    /**
     * Name of Datadog synthetics test.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * @deprecated Define `options_list` blocks instead.
     */
    readonly options?: pulumi.Input<inputs.SyntheticsTestOptions>;
    readonly optionsList?: pulumi.Input<inputs.SyntheticsTestOptionsList>;
    /**
     * The synthetics test request. Required if `type = "api"`.
     *
     * @deprecated Define `request_definition` list with one element instead.
     */
    readonly request?: pulumi.Input<inputs.SyntheticsTestRequest>;
    /**
     * The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
     */
    readonly requestBasicauth?: pulumi.Input<inputs.SyntheticsTestRequestBasicauth>;
    /**
     * Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
     * below.
     */
    readonly requestClientCertificate?: pulumi.Input<inputs.SyntheticsTestRequestClientCertificate>;
    /**
     * The synthetics test request. Required if `type = "api"`.
     */
    readonly requestDefinition?: pulumi.Input<inputs.SyntheticsTestRequestDefinition>;
    /**
     * Header name and value map.
     */
    readonly requestHeaders?: pulumi.Input<{[key: string]: any}>;
    /**
     * Query arguments name and value map.
     */
    readonly requestQuery?: pulumi.Input<{[key: string]: any}>;
    /**
     * Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
     */
    readonly status?: pulumi.Input<string>;
    /**
     * Steps for browser tests.
     *
     * @deprecated Define `browser_step` blocks instead.
     */
    readonly steps?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestStep>[]>;
    /**
     * When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
     */
    readonly subtype?: pulumi.Input<string>;
    /**
     * A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
     * synthetics page of the UI. Default is an empty list (`[]`).
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Synthetics test type (`api` or `browser`).
     */
    readonly type?: pulumi.Input<string>;
    /**
     * Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
     *
     * @deprecated Define `browser_variable` blocks instead.
     */
    readonly variables?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestVariable>[]>;
}

/**
 * The set of arguments for constructing a SyntheticsTest resource.
 */
export interface SyntheticsTestArgs {
    /**
     * Steps for multistep api tests
     */
    readonly apiSteps?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestApiStep>[]>;
    /**
     * List of assertions.
     *
     * @deprecated Define `assertion` blocks instead.
     */
    readonly assertions?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
    /**
     * Steps for browser tests.
     */
    readonly browserSteps?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestBrowserStep>[]>;
    /**
     * Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
     */
    readonly browserVariables?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestBrowserVariable>[]>;
    /**
     * Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
     */
    readonly configVariables?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestConfigVariable>[]>;
    /**
     * Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
     * (only available for `browser` tests).
     */
    readonly deviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Array of locations used to run the test. Refer to [Datadog
     * documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
     * `aws:eu-central-1`).
     */
    readonly locations: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
     * using the same `@username` notation as events.
     */
    readonly message?: pulumi.Input<string>;
    /**
     * Name of Datadog synthetics test.
     */
    readonly name: pulumi.Input<string>;
    /**
     * @deprecated Define `options_list` blocks instead.
     */
    readonly options?: pulumi.Input<inputs.SyntheticsTestOptions>;
    readonly optionsList?: pulumi.Input<inputs.SyntheticsTestOptionsList>;
    /**
     * The synthetics test request. Required if `type = "api"`.
     *
     * @deprecated Define `request_definition` list with one element instead.
     */
    readonly request?: pulumi.Input<inputs.SyntheticsTestRequest>;
    /**
     * The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
     */
    readonly requestBasicauth?: pulumi.Input<inputs.SyntheticsTestRequestBasicauth>;
    /**
     * Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
     * below.
     */
    readonly requestClientCertificate?: pulumi.Input<inputs.SyntheticsTestRequestClientCertificate>;
    /**
     * The synthetics test request. Required if `type = "api"`.
     */
    readonly requestDefinition?: pulumi.Input<inputs.SyntheticsTestRequestDefinition>;
    /**
     * Header name and value map.
     */
    readonly requestHeaders?: pulumi.Input<{[key: string]: any}>;
    /**
     * Query arguments name and value map.
     */
    readonly requestQuery?: pulumi.Input<{[key: string]: any}>;
    /**
     * Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
     */
    readonly status: pulumi.Input<string>;
    /**
     * Steps for browser tests.
     *
     * @deprecated Define `browser_step` blocks instead.
     */
    readonly steps?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestStep>[]>;
    /**
     * When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
     */
    readonly subtype?: pulumi.Input<string>;
    /**
     * A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
     * synthetics page of the UI. Default is an empty list (`[]`).
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Synthetics test type (`api` or `browser`).
     */
    readonly type: pulumi.Input<string>;
    /**
     * Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
     *
     * @deprecated Define `browser_variable` blocks instead.
     */
    readonly variables?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestVariable>[]>;
}
