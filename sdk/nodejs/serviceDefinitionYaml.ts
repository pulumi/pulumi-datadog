// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Datadog service definition resource. This can be used to create and manage Datadog service definitions in the service catalog using the YAML/JSON definition.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const serviceDefinition = new datadog.ServiceDefinitionYaml("serviceDefinition", {serviceDefinition: `schema-version: v2
 * dd-service: shopping-cart
 * team: E Commerce
 * contacts:
 *   - name: Support Email
 *     type: email
 *     contact: team@shopping.com
 *   - name: Support Slack
 *     type: slack
 *     contact: https://www.slack.com/archives/shopping-cart
 * repos:
 *   - name: shopping-cart source code
 *     provider: github
 *     url: http://github/shopping-cart
 * docs:
 *   - name: shopping-cart architecture
 *     provider: gdoc
 *     url: https://google.drive/shopping-cart-architecture
 *   - name: shopping-cart service Wiki
 *     provider: wiki
 *     url: https://wiki/shopping-cart
 * links:
 *   - name: shopping-cart runbook
 *     type: runbook
 *     url: https://runbook/shopping-cart
 * tags:
 *   - business-unit:retail
 *   - cost-center:engineering
 * integrations:
 *   pagerduty: https://www.pagerduty.com/service-directory/Pshopping-cart
 * extensions:
 *   datadoghq.com/shopping-cart:
 *     customField: customValue
 *
 * `});
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import datadog:index/serviceDefinitionYaml:ServiceDefinitionYaml service_definition "<dd-service>"
 * ```
 */
export class ServiceDefinitionYaml extends pulumi.CustomResource {
    /**
     * Get an existing ServiceDefinitionYaml resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceDefinitionYamlState, opts?: pulumi.CustomResourceOptions): ServiceDefinitionYaml {
        return new ServiceDefinitionYaml(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/serviceDefinitionYaml:ServiceDefinitionYaml';

    /**
     * Returns true if the given object is an instance of ServiceDefinitionYaml.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceDefinitionYaml {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceDefinitionYaml.__pulumiType;
    }

    /**
     * The YAML/JSON formatted definition of the service
     */
    public readonly serviceDefinition!: pulumi.Output<string>;

    /**
     * Create a ServiceDefinitionYaml resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceDefinitionYamlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceDefinitionYamlArgs | ServiceDefinitionYamlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceDefinitionYamlState | undefined;
            resourceInputs["serviceDefinition"] = state ? state.serviceDefinition : undefined;
        } else {
            const args = argsOrState as ServiceDefinitionYamlArgs | undefined;
            if ((!args || args.serviceDefinition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceDefinition'");
            }
            resourceInputs["serviceDefinition"] = args ? args.serviceDefinition : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceDefinitionYaml.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceDefinitionYaml resources.
 */
export interface ServiceDefinitionYamlState {
    /**
     * The YAML/JSON formatted definition of the service
     */
    serviceDefinition?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceDefinitionYaml resource.
 */
export interface ServiceDefinitionYamlArgs {
    /**
     * The YAML/JSON formatted definition of the service
     */
    serviceDefinition: pulumi.Input<string>;
}
