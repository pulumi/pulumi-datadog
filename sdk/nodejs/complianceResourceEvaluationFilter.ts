// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Datadog ComplianceResourceEvaluationFilter resource. This can be used to create and manage a compliance resource evaluation filter.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * // Manage Datadog compliance resource evaluation filters
 * const basicFilter = new datadog.ComplianceResourceEvaluationFilter("basic_filter", {
 *     tags: ["tag1:val1"],
 *     cloudProvider: "aws",
 *     resourceId: "000000000000",
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import datadog:index/complianceResourceEvaluationFilter:ComplianceResourceEvaluationFilter test_filter aws:00000000000000
 * ```
 */
export class ComplianceResourceEvaluationFilter extends pulumi.CustomResource {
    /**
     * Get an existing ComplianceResourceEvaluationFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComplianceResourceEvaluationFilterState, opts?: pulumi.CustomResourceOptions): ComplianceResourceEvaluationFilter {
        return new ComplianceResourceEvaluationFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/complianceResourceEvaluationFilter:ComplianceResourceEvaluationFilter';

    /**
     * Returns true if the given object is an instance of ComplianceResourceEvaluationFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComplianceResourceEvaluationFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComplianceResourceEvaluationFilter.__pulumiType;
    }

    /**
     * The cloud provider of the filter's targeted resource. Only `aws`, `gcp`, or `azure` are considered valid cloud
     * providers.
     */
    public readonly cloudProvider!: pulumi.Output<string>;
    /**
     * The ID of the of the filter's targeted resource. Different cloud providers target different resource IDs: - `aws`:
     * account ID - `gcp`: project ID - `azure`: subscription ID
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * List of tags to filter misconfiguration detections. Each entry should follow the format: "key":"value".
     */
    public readonly tags!: pulumi.Output<string[]>;

    /**
     * Create a ComplianceResourceEvaluationFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComplianceResourceEvaluationFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComplianceResourceEvaluationFilterArgs | ComplianceResourceEvaluationFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComplianceResourceEvaluationFilterState | undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ComplianceResourceEvaluationFilterArgs | undefined;
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.tags === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tags'");
            }
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComplianceResourceEvaluationFilter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ComplianceResourceEvaluationFilter resources.
 */
export interface ComplianceResourceEvaluationFilterState {
    /**
     * The cloud provider of the filter's targeted resource. Only `aws`, `gcp`, or `azure` are considered valid cloud
     * providers.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * The ID of the of the filter's targeted resource. Different cloud providers target different resource IDs: - `aws`:
     * account ID - `gcp`: project ID - `azure`: subscription ID
     */
    resourceId?: pulumi.Input<string>;
    /**
     * List of tags to filter misconfiguration detections. Each entry should follow the format: "key":"value".
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ComplianceResourceEvaluationFilter resource.
 */
export interface ComplianceResourceEvaluationFilterArgs {
    /**
     * The cloud provider of the filter's targeted resource. Only `aws`, `gcp`, or `azure` are considered valid cloud
     * providers.
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * The ID of the of the filter's targeted resource. Different cloud providers target different resource IDs: - `aws`:
     * account ID - `gcp`: project ID - `azure`: subscription ID
     */
    resourceId: pulumi.Input<string>;
    /**
     * List of tags to filter misconfiguration detections. Each entry should follow the format: "key":"value".
     */
    tags: pulumi.Input<pulumi.Input<string>[]>;
}
