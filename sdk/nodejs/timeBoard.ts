// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog timeboard resource. This can be used to create and manage Datadog timeboards.
 *
 * > **Note:**This resource is outdated. Use the new `datadog.Dashboard` resource instead.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * // Create a new Datadog timeboard
 * const redis = new datadog.TimeBoard("redis", {
 *     title: "Redis Timeboard (created via TF)",
 *     description: "created using the Datadog provider in TF",
 *     readOnly: true,
 *     graphs: [
 *         {
 *             title: "Redis latency (ms)",
 *             viz: "timeseries",
 *             requests: [
 *                 {
 *                     q: `avg:redis.info.latency_ms{$host}`,
 *                     type: "bars",
 *                     metadataJson: JSON.stringify({
 *                         `avg:redis.info.latency_ms{$host}`: {
 *                             alias: "Redis latency",
 *                         },
 *                     }),
 *                 },
 *                 {
 *                     logQuery: {
 *                         index: "mcnulty",
 *                         compute: {
 *                             aggregation: "avg",
 *                             facet: "@duration",
 *                             interval: 5000,
 *                         },
 *                         search: {
 *                             query: "status:info",
 *                         },
 *                         groupBies: [{
 *                             facet: "host",
 *                             limit: 10,
 *                             sort: {
 *                                 aggregation: "avg",
 *                                 order: "desc",
 *                                 facet: "@duration",
 *                             },
 *                         }],
 *                     },
 *                     type: "area",
 *                 },
 *                 {
 *                     apmQuery: {
 *                         index: "apm-search",
 *                         compute: {
 *                             aggregation: "avg",
 *                             facet: "@duration",
 *                             interval: 5000,
 *                         },
 *                         search: {
 *                             query: "type:web",
 *                         },
 *                         groupBies: [{
 *                             facet: "resource_name",
 *                             limit: 50,
 *                             sort: {
 *                                 aggregation: "avg",
 *                                 order: "desc",
 *                                 facet: "@string_query.interval",
 *                             },
 *                         }],
 *                     },
 *                     type: "bars",
 *                 },
 *                 {
 *                     processQuery: {
 *                         metric: "process.stat.cpu.total_pct",
 *                         searchBy: "error",
 *                         filterBies: ["active"],
 *                         limit: 50,
 *                     },
 *                     type: "area",
 *                 },
 *             ],
 *         },
 *         {
 *             title: "Redis memory usage",
 *             viz: "timeseries",
 *             requests: [
 *                 {
 *                     q: `avg:redis.mem.used{$host} - avg:redis.mem.lua{$host}, avg:redis.mem.lua{$host}`,
 *                     stacked: true,
 *                 },
 *                 {
 *                     q: `avg:redis.mem.rss{$host}`,
 *                     style: {
 *                         palette: "warm",
 *                     },
 *                 },
 *             ],
 *         },
 *         {
 *             title: "Top System CPU by Docker container",
 *             viz: "toplist",
 *             requests: [{
 *                 q: "top(avg:docker.cpu.system{*} by {container_name}, 10, 'mean', 'desc')",
 *             }],
 *         },
 *     ],
 *     templateVariables: [{
 *         name: "host",
 *         prefix: "host",
 *     }],
 * });
 * ```
 */
export class TimeBoard extends pulumi.CustomResource {
    /**
     * Get an existing TimeBoard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TimeBoardState, opts?: pulumi.CustomResourceOptions): TimeBoard {
        return new TimeBoard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/timeBoard:TimeBoard';

    /**
     * Returns true if the given object is an instance of TimeBoard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TimeBoard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TimeBoard.__pulumiType;
    }

    /**
     * A description of the dashboard's content.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * A list of graph definitions.
     */
    public readonly graphs!: pulumi.Output<outputs.TimeBoardGraph[]>;
    public readonly readOnly!: pulumi.Output<boolean | undefined>;
    /**
     * A list of template variables for using Dashboard templating.
     */
    public readonly templateVariables!: pulumi.Output<outputs.TimeBoardTemplateVariable[] | undefined>;
    /**
     * The name of the dashboard.
     */
    public readonly title!: pulumi.Output<string>;

    /**
     * Create a TimeBoard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TimeBoardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TimeBoardArgs | TimeBoardState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as TimeBoardState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["graphs"] = state ? state.graphs : undefined;
            inputs["readOnly"] = state ? state.readOnly : undefined;
            inputs["templateVariables"] = state ? state.templateVariables : undefined;
            inputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as TimeBoardArgs | undefined;
            if (!args || args.description === undefined) {
                throw new Error("Missing required property 'description'");
            }
            if (!args || args.graphs === undefined) {
                throw new Error("Missing required property 'graphs'");
            }
            if (!args || args.title === undefined) {
                throw new Error("Missing required property 'title'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["graphs"] = args ? args.graphs : undefined;
            inputs["readOnly"] = args ? args.readOnly : undefined;
            inputs["templateVariables"] = args ? args.templateVariables : undefined;
            inputs["title"] = args ? args.title : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(TimeBoard.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TimeBoard resources.
 */
export interface TimeBoardState {
    /**
     * A description of the dashboard's content.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * A list of graph definitions.
     */
    readonly graphs?: pulumi.Input<pulumi.Input<inputs.TimeBoardGraph>[]>;
    readonly readOnly?: pulumi.Input<boolean>;
    /**
     * A list of template variables for using Dashboard templating.
     */
    readonly templateVariables?: pulumi.Input<pulumi.Input<inputs.TimeBoardTemplateVariable>[]>;
    /**
     * The name of the dashboard.
     */
    readonly title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TimeBoard resource.
 */
export interface TimeBoardArgs {
    /**
     * A description of the dashboard's content.
     */
    readonly description: pulumi.Input<string>;
    /**
     * A list of graph definitions.
     */
    readonly graphs: pulumi.Input<pulumi.Input<inputs.TimeBoardGraph>[]>;
    readonly readOnly?: pulumi.Input<boolean>;
    /**
     * A list of template variables for using Dashboard templating.
     */
    readonly templateVariables?: pulumi.Input<pulumi.Input<inputs.TimeBoardTemplateVariable>[]>;
    /**
     * The name of the dashboard.
     */
    readonly title: pulumi.Input<string>;
}
