// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Resource for interacting with the logsMetric API
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const testingLogsMetric = new datadog.LogsMetric("testing_logs_metric", {
 *     compute: {
 *         aggregationType: "distribution",
 *         path: "@duration",
 *     },
 *     filter: {
 *         query: "service:test",
 *     },
 *     groupBies: [
 *         {
 *             path: "@status",
 *             tagName: "status",
 *         },
 *         {
 *             path: "@version",
 *             tagName: "version",
 *         },
 *     ],
 *     name: "testing.logs.metric",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import datadog:index/logsMetric:LogsMetric testing_logs_metric testing.logs.metric
 * ```
 */
export class LogsMetric extends pulumi.CustomResource {
    /**
     * Get an existing LogsMetric resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogsMetricState, opts?: pulumi.CustomResourceOptions): LogsMetric {
        return new LogsMetric(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/logsMetric:LogsMetric';

    /**
     * Returns true if the given object is an instance of LogsMetric.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogsMetric {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogsMetric.__pulumiType;
    }

    /**
     * The compute rule to compute the log-based metric. This field can't be updated after creation.
     */
    public readonly compute!: pulumi.Output<outputs.LogsMetricCompute>;
    /**
     * The log-based metric filter. Logs matching this filter will be aggregated in this metric.
     */
    public readonly filter!: pulumi.Output<outputs.LogsMetricFilter>;
    /**
     * The rules for the group by.
     */
    public readonly groupBies!: pulumi.Output<outputs.LogsMetricGroupBy[] | undefined>;
    /**
     * The name of the log-based metric. This field can't be updated after creation.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a LogsMetric resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogsMetricArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogsMetricArgs | LogsMetricState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogsMetricState | undefined;
            inputs["compute"] = state ? state.compute : undefined;
            inputs["filter"] = state ? state.filter : undefined;
            inputs["groupBies"] = state ? state.groupBies : undefined;
            inputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as LogsMetricArgs | undefined;
            if ((!args || args.compute === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compute'");
            }
            if ((!args || args.filter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            inputs["compute"] = args ? args.compute : undefined;
            inputs["filter"] = args ? args.filter : undefined;
            inputs["groupBies"] = args ? args.groupBies : undefined;
            inputs["name"] = args ? args.name : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(LogsMetric.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogsMetric resources.
 */
export interface LogsMetricState {
    /**
     * The compute rule to compute the log-based metric. This field can't be updated after creation.
     */
    readonly compute?: pulumi.Input<inputs.LogsMetricCompute>;
    /**
     * The log-based metric filter. Logs matching this filter will be aggregated in this metric.
     */
    readonly filter?: pulumi.Input<inputs.LogsMetricFilter>;
    /**
     * The rules for the group by.
     */
    readonly groupBies?: pulumi.Input<pulumi.Input<inputs.LogsMetricGroupBy>[]>;
    /**
     * The name of the log-based metric. This field can't be updated after creation.
     */
    readonly name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogsMetric resource.
 */
export interface LogsMetricArgs {
    /**
     * The compute rule to compute the log-based metric. This field can't be updated after creation.
     */
    readonly compute: pulumi.Input<inputs.LogsMetricCompute>;
    /**
     * The log-based metric filter. Logs matching this filter will be aggregated in this metric.
     */
    readonly filter: pulumi.Input<inputs.LogsMetricFilter>;
    /**
     * The rules for the group by.
     */
    readonly groupBies?: pulumi.Input<pulumi.Input<inputs.LogsMetricGroupBy>[]>;
    /**
     * The name of the log-based metric. This field can't be updated after creation.
     */
    readonly name: pulumi.Input<string>;
}
