// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Datadog IntegrationConfluentResource resource. This can be used to create and manage Datadog integration_confluent_resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const fooIntegrationAccount = new datadog.confluent.IntegrationAccount("fooIntegrationAccount", {
 *     apiKey: "TESTAPIKEY123",
 *     apiSecret: "test-api-secret-123",
 *     tags: [
 *         "mytag",
 *         "mytag2:myvalue",
 *     ],
 * });
 * // Create new integration_confluent_resource resource
 * const fooIntegrationResource = new datadog.confluent.IntegrationResource("fooIntegrationResource", {
 *     accountId: fooIntegrationAccount.id,
 *     resourceId: "123456",
 *     resourceType: "kafka",
 *     tags: [
 *         "mytag",
 *         "mytag2:myvalue",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import datadog:confluent/integrationResource:IntegrationResource new_list "confluent_account_id:confluent_resource_id"
 * ```
 */
export class IntegrationResource extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationResourceState, opts?: pulumi.CustomResourceOptions): IntegrationResource {
        return new IntegrationResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:confluent/integrationResource:IntegrationResource';

    /**
     * Returns true if the given object is an instance of IntegrationResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationResource.__pulumiType;
    }

    /**
     * Confluent Account ID.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Enable the `custom.consumer_lag_offset` metric, which contains extra metric tags. Defaults to `false`.
     */
    public readonly enableCustomMetrics!: pulumi.Output<boolean>;
    /**
     * The ID associated with a Confluent resource.
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * The resource type of the Resource. Can be `kafka`, `connector`, `ksql`, or `schemaRegistry`.
     */
    public readonly resourceType!: pulumi.Output<string | undefined>;
    /**
     * A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a IntegrationResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationResourceArgs | IntegrationResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationResourceState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["enableCustomMetrics"] = state ? state.enableCustomMetrics : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as IntegrationResourceArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["enableCustomMetrics"] = args ? args.enableCustomMetrics : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationResource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IntegrationResource resources.
 */
export interface IntegrationResourceState {
    /**
     * Confluent Account ID.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Enable the `custom.consumer_lag_offset` metric, which contains extra metric tags. Defaults to `false`.
     */
    enableCustomMetrics?: pulumi.Input<boolean>;
    /**
     * The ID associated with a Confluent resource.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The resource type of the Resource. Can be `kafka`, `connector`, `ksql`, or `schemaRegistry`.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a IntegrationResource resource.
 */
export interface IntegrationResourceArgs {
    /**
     * Confluent Account ID.
     */
    accountId: pulumi.Input<string>;
    /**
     * Enable the `custom.consumer_lag_offset` metric, which contains extra metric tags. Defaults to `false`.
     */
    enableCustomMetrics?: pulumi.Input<boolean>;
    /**
     * The ID associated with a Confluent resource.
     */
    resourceId: pulumi.Input<string>;
    /**
     * The resource type of the Resource. Can be `kafka`, `connector`, `ksql`, or `schemaRegistry`.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
