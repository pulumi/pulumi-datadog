// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve active tags and aggregations associated with a metric to use in other resources.
 */
export function getMetricActiveTagsAndAggregations(args: GetMetricActiveTagsAndAggregationsArgs, opts?: pulumi.InvokeOptions): Promise<GetMetricActiveTagsAndAggregationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("datadog:index/getMetricActiveTagsAndAggregations:getMetricActiveTagsAndAggregations", {
        "metric": args.metric,
        "window": args.window,
    }, opts);
}

/**
 * A collection of arguments for invoking getMetricActiveTagsAndAggregations.
 */
export interface GetMetricActiveTagsAndAggregationsArgs {
    /**
     * The metric for which to fetch tags.
     */
    metric: string;
    /**
     * The number of seconds to look back from now.
     */
    window?: number;
}

/**
 * A collection of values returned by getMetricActiveTagsAndAggregations.
 */
export interface GetMetricActiveTagsAndAggregationsResult {
    /**
     * The active aggregations associated with the metric.
     */
    readonly activeAggregations: outputs.GetMetricActiveTagsAndAggregationsActiveAggregation[];
    /**
     * The active tags associated with the metric.
     */
    readonly activeTags: string[];
    /**
     * The ID of this resource.
     */
    readonly id: string;
    /**
     * The metric for which to fetch tags.
     */
    readonly metric: string;
    /**
     * The number of seconds to look back from now.
     */
    readonly window?: number;
}
/**
 * Use this data source to retrieve active tags and aggregations associated with a metric to use in other resources.
 */
export function getMetricActiveTagsAndAggregationsOutput(args: GetMetricActiveTagsAndAggregationsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMetricActiveTagsAndAggregationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("datadog:index/getMetricActiveTagsAndAggregations:getMetricActiveTagsAndAggregations", {
        "metric": args.metric,
        "window": args.window,
    }, opts);
}

/**
 * A collection of arguments for invoking getMetricActiveTagsAndAggregations.
 */
export interface GetMetricActiveTagsAndAggregationsOutputArgs {
    /**
     * The metric for which to fetch tags.
     */
    metric: pulumi.Input<string>;
    /**
     * The number of seconds to look back from now.
     */
    window?: pulumi.Input<number>;
}
