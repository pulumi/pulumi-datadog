// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Datadog webhooks custom variable resource. This can be used to create and manage Datadog webhooks custom variables.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * // Create a new Datadog webhook custom variable.
 * const foo = new datadog.WebhookCustomVariable("foo", {
 *     name: "EXAMPLE_VARIABLE",
 *     value: "EXAMPLE-VALUE",
 *     isSecret: true,
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import datadog:index/webhookCustomVariable:WebhookCustomVariable foo EXAMPLE_VARIABLE
 * ```
 */
export class WebhookCustomVariable extends pulumi.CustomResource {
    /**
     * Get an existing WebhookCustomVariable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebhookCustomVariableState, opts?: pulumi.CustomResourceOptions): WebhookCustomVariable {
        return new WebhookCustomVariable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/webhookCustomVariable:WebhookCustomVariable';

    /**
     * Returns true if the given object is an instance of WebhookCustomVariable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebhookCustomVariable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebhookCustomVariable.__pulumiType;
    }

    /**
     * Whether the custom variable is secret or not.
     */
    declare public readonly isSecret: pulumi.Output<boolean>;
    /**
     * The name of the variable. It corresponds with `<CUSTOM_VARIABLE_NAME>`.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The value of the custom variable.
     */
    declare public readonly value: pulumi.Output<string>;

    /**
     * Create a WebhookCustomVariable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebhookCustomVariableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebhookCustomVariableArgs | WebhookCustomVariableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebhookCustomVariableState | undefined;
            resourceInputs["isSecret"] = state?.isSecret;
            resourceInputs["name"] = state?.name;
            resourceInputs["value"] = state?.value;
        } else {
            const args = argsOrState as WebhookCustomVariableArgs | undefined;
            if (args?.isSecret === undefined && !opts.urn) {
                throw new Error("Missing required property 'isSecret'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.value === undefined && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["isSecret"] = args?.isSecret;
            resourceInputs["name"] = args?.name;
            resourceInputs["value"] = args?.value ? pulumi.secret(args.value) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["value"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WebhookCustomVariable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WebhookCustomVariable resources.
 */
export interface WebhookCustomVariableState {
    /**
     * Whether the custom variable is secret or not.
     */
    isSecret?: pulumi.Input<boolean>;
    /**
     * The name of the variable. It corresponds with `<CUSTOM_VARIABLE_NAME>`.
     */
    name?: pulumi.Input<string>;
    /**
     * The value of the custom variable.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WebhookCustomVariable resource.
 */
export interface WebhookCustomVariableArgs {
    /**
     * Whether the custom variable is secret or not.
     */
    isSecret: pulumi.Input<boolean>;
    /**
     * The name of the variable. It corresponds with `<CUSTOM_VARIABLE_NAME>`.
     */
    name: pulumi.Input<string>;
    /**
     * The value of the custom variable.
     */
    value: pulumi.Input<string>;
}
