// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog Organization resource. This can be used to manage your Datadog organization's settings.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * // Manage Datadog Organization
 * const organization = new datadog.OrganizationSettings("organization", {name: "foo-organization"});
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import datadog:index/organizationSettings:OrganizationSettings organization 11111111-2222-3333-4444-555555555555
 * ```
 */
export class OrganizationSettings extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationSettingsState, opts?: pulumi.CustomResourceOptions): OrganizationSettings {
        return new OrganizationSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/organizationSettings:OrganizationSettings';

    /**
     * Returns true if the given object is an instance of OrganizationSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationSettings.__pulumiType;
    }

    /**
     * Description of the organization.
     */
    declare public /*out*/ readonly description: pulumi.Output<string>;
    /**
     * Name for Organization.
     */
    declare public readonly name: pulumi.Output<string | undefined>;
    /**
     * The `publicId` of the organization you are operating within.
     */
    declare public /*out*/ readonly publicId: pulumi.Output<string>;
    /**
     * List of emails used for security event notifications from the organization.
     */
    declare public readonly securityContacts: pulumi.Output<string[]>;
    /**
     * Organization settings
     */
    declare public readonly settings: pulumi.Output<outputs.OrganizationSettingsSettings>;

    /**
     * Create a OrganizationSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OrganizationSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationSettingsArgs | OrganizationSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationSettingsState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["publicId"] = state?.publicId;
            resourceInputs["securityContacts"] = state?.securityContacts;
            resourceInputs["settings"] = state?.settings;
        } else {
            const args = argsOrState as OrganizationSettingsArgs | undefined;
            resourceInputs["name"] = args?.name;
            resourceInputs["securityContacts"] = args?.securityContacts;
            resourceInputs["settings"] = args?.settings;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["publicId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrganizationSettings resources.
 */
export interface OrganizationSettingsState {
    /**
     * Description of the organization.
     */
    description?: pulumi.Input<string>;
    /**
     * Name for Organization.
     */
    name?: pulumi.Input<string>;
    /**
     * The `publicId` of the organization you are operating within.
     */
    publicId?: pulumi.Input<string>;
    /**
     * List of emails used for security event notifications from the organization.
     */
    securityContacts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Organization settings
     */
    settings?: pulumi.Input<inputs.OrganizationSettingsSettings>;
}

/**
 * The set of arguments for constructing a OrganizationSettings resource.
 */
export interface OrganizationSettingsArgs {
    /**
     * Name for Organization.
     */
    name?: pulumi.Input<string>;
    /**
     * List of emails used for security event notifications from the organization.
     */
    securityContacts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Organization settings
     */
    settings?: pulumi.Input<inputs.OrganizationSettingsSettings>;
}
