// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a Datadog dashboardList resource. This can be used to create and manage Datadog Dashboard Lists and the individual dashboards within them.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const time = new datadog.Dashboard("time", {
 *     title: "TF Test Layout Dashboard",
 *     description: "Created using the Datadog provider",
 *     layoutType: "ordered",
 *     isReadOnly: true,
 *     widgets: [{
 *         alertGraphDefinition: {
 *             alertId: "1234",
 *             vizType: "timeseries",
 *             title: "Widget Title",
 *             liveSpan: "1h",
 *         },
 *     }],
 * });
 * const screen = new datadog.Dashboard("screen", {
 *     title: "TF Test Free Layout Dashboard",
 *     description: "Created using the Datadog provider",
 *     layoutType: "free",
 *     isReadOnly: false,
 *     widgets: [{
 *         eventStreamDefinition: {
 *             query: "*",
 *             eventSize: "l",
 *             title: "Widget Title",
 *             titleSize: 16,
 *             titleAlign: "left",
 *             liveSpan: "1h",
 *         },
 *         widgetLayout: {
 *             height: 43,
 *             width: 32,
 *             x: 5,
 *             y: 5,
 *         },
 *     }],
 * });
 * // Create a new Dashboard List with two Dashboards
 * const newList = new datadog.DashboardList("newList", {
 *     name: "Automated Created List",
 *     dashItems: [
 *         {
 *             type: "custom_timeboard",
 *             dashId: time.id,
 *         },
 *         {
 *             type: "custom_screenboard",
 *             dashId: screen.id,
 *         },
 *     ],
 * }, {
 *     dependsOn: [
 *         screen,
 *         time,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import datadog:index/dashboardList:DashboardList new_list 123456
 * ```
 */
export class DashboardList extends pulumi.CustomResource {
    /**
     * Get an existing DashboardList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardListState, opts?: pulumi.CustomResourceOptions): DashboardList {
        return new DashboardList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/dashboardList:DashboardList';

    /**
     * Returns true if the given object is an instance of DashboardList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DashboardList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DashboardList.__pulumiType;
    }

    /**
     * A set of dashboard items that belong to this list
     */
    public readonly dashItems!: pulumi.Output<outputs.DashboardListDashItem[] | undefined>;
    /**
     * The name of the Dashboard List
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a DashboardList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardListArgs | DashboardListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardListState | undefined;
            resourceInputs["dashItems"] = state ? state.dashItems : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as DashboardListArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["dashItems"] = args ? args.dashItems : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(DashboardList.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DashboardList resources.
 */
export interface DashboardListState {
    /**
     * A set of dashboard items that belong to this list
     */
    dashItems?: pulumi.Input<pulumi.Input<inputs.DashboardListDashItem>[]>;
    /**
     * The name of the Dashboard List
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DashboardList resource.
 */
export interface DashboardListArgs {
    /**
     * A set of dashboard items that belong to this list
     */
    dashItems?: pulumi.Input<pulumi.Input<inputs.DashboardListDashItem>[]>;
    /**
     * The name of the Dashboard List
     */
    name: pulumi.Input<string>;
}
