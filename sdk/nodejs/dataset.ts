// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog Dataset resource. This can be used to create and manage Datadog datasets.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * // Create new dataset resource
 * const foo = new datadog.Dataset("foo", {
 *     name: "HR Dataset",
 *     principals: ["role:00000000-0000-1111-0000-000000000000"],
 *     productFilters: [{
 *         product: "rum",
 *         filters: ["@application.id:123"],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import datadog:index/dataset:Dataset foo "<dataset_id>"
 * ```
 */
export class Dataset extends pulumi.CustomResource {
    /**
     * Get an existing Dataset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatasetState, opts?: pulumi.CustomResourceOptions): Dataset {
        return new Dataset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/dataset:Dataset';

    /**
     * Returns true if the given object is an instance of Dataset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dataset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dataset.__pulumiType;
    }

    /**
     * Indicates when the dataset was created (in ISO 8601).
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Indicates who created the dataset.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * The name of the dataset.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `team`.
     */
    public readonly principals!: pulumi.Output<string[]>;
    public readonly productFilters!: pulumi.Output<outputs.DatasetProductFilter[] | undefined>;

    /**
     * Create a Dataset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatasetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatasetArgs | DatasetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatasetState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["principals"] = state ? state.principals : undefined;
            resourceInputs["productFilters"] = state ? state.productFilters : undefined;
        } else {
            const args = argsOrState as DatasetArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.principals === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principals'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["principals"] = args ? args.principals : undefined;
            resourceInputs["productFilters"] = args ? args.productFilters : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dataset.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dataset resources.
 */
export interface DatasetState {
    /**
     * Indicates when the dataset was created (in ISO 8601).
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Indicates who created the dataset.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The name of the dataset.
     */
    name?: pulumi.Input<string>;
    /**
     * An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `team`.
     */
    principals?: pulumi.Input<pulumi.Input<string>[]>;
    productFilters?: pulumi.Input<pulumi.Input<inputs.DatasetProductFilter>[]>;
}

/**
 * The set of arguments for constructing a Dataset resource.
 */
export interface DatasetArgs {
    /**
     * The name of the dataset.
     */
    name: pulumi.Input<string>;
    /**
     * An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `team`.
     */
    principals: pulumi.Input<pulumi.Input<string>[]>;
    productFilters?: pulumi.Input<pulumi.Input<inputs.DatasetProductFilter>[]>;
}
