// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog MonitorNotificationRule resource.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import datadog:index/monitorNotificationRule:MonitorNotificationRule new_list "00e000000-0000-1234-0000-000000000000"
 * ```
 */
export class MonitorNotificationRule extends pulumi.CustomResource {
    /**
     * Get an existing MonitorNotificationRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorNotificationRuleState, opts?: pulumi.CustomResourceOptions): MonitorNotificationRule {
        return new MonitorNotificationRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/monitorNotificationRule:MonitorNotificationRule';

    /**
     * Returns true if the given object is an instance of MonitorNotificationRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitorNotificationRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorNotificationRule.__pulumiType;
    }

    declare public readonly filter: pulumi.Output<outputs.MonitorNotificationRuleFilter | undefined>;
    /**
     * The name of the monitor notification rule.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * List of recipients to notify.
     */
    declare public readonly recipients: pulumi.Output<string[]>;

    /**
     * Create a MonitorNotificationRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorNotificationRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorNotificationRuleArgs | MonitorNotificationRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorNotificationRuleState | undefined;
            resourceInputs["filter"] = state?.filter;
            resourceInputs["name"] = state?.name;
            resourceInputs["recipients"] = state?.recipients;
        } else {
            const args = argsOrState as MonitorNotificationRuleArgs | undefined;
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.recipients === undefined && !opts.urn) {
                throw new Error("Missing required property 'recipients'");
            }
            resourceInputs["filter"] = args?.filter;
            resourceInputs["name"] = args?.name;
            resourceInputs["recipients"] = args?.recipients;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitorNotificationRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MonitorNotificationRule resources.
 */
export interface MonitorNotificationRuleState {
    filter?: pulumi.Input<inputs.MonitorNotificationRuleFilter>;
    /**
     * The name of the monitor notification rule.
     */
    name?: pulumi.Input<string>;
    /**
     * List of recipients to notify.
     */
    recipients?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a MonitorNotificationRule resource.
 */
export interface MonitorNotificationRuleArgs {
    filter?: pulumi.Input<inputs.MonitorNotificationRuleFilter>;
    /**
     * The name of the monitor notification rule.
     */
    name: pulumi.Input<string>;
    /**
     * List of recipients to notify.
     */
    recipients: pulumi.Input<pulumi.Input<string>[]>;
}
