// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Datadog RumRetentionFilter resource. This can be used to create and manage Datadog rum_retention_filter.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * // Create new rum_retention_filter resource
 * const testingRumRetentionFilter = new datadog.RumRetentionFilter("testing_rum_retention_filter", {
 *     applicationId: "<APPLICATION_ID>",
 *     name: "testing.rum.retention_filter",
 *     eventType: "session",
 *     sampleRate: 41,
 *     query: "@session.has_replay:true",
 *     enabled: false,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import datadog:index/rumRetentionFilter:RumRetentionFilter testing_rum_retention_filter "<application_id>:<retention_filter_id>"
 * ```
 */
export class RumRetentionFilter extends pulumi.CustomResource {
    /**
     * Get an existing RumRetentionFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RumRetentionFilterState, opts?: pulumi.CustomResourceOptions): RumRetentionFilter {
        return new RumRetentionFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/rumRetentionFilter:RumRetentionFilter';

    /**
     * Returns true if the given object is an instance of RumRetentionFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RumRetentionFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RumRetentionFilter.__pulumiType;
    }

    /**
     * RUM application ID.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * Whether the retention filter is to be enabled. Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The type of RUM events to filter on.
     */
    public readonly eventType!: pulumi.Output<string>;
    /**
     * The name of a RUM retention filter.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Query string for a RUM retention filter. Defaults to `""`.
     */
    public readonly query!: pulumi.Output<string>;
    /**
     * The sample rate for a RUM retention filter, between 0 and 100.
     */
    public readonly sampleRate!: pulumi.Output<number>;

    /**
     * Create a RumRetentionFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RumRetentionFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RumRetentionFilterArgs | RumRetentionFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RumRetentionFilterState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["eventType"] = state ? state.eventType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["sampleRate"] = state ? state.sampleRate : undefined;
        } else {
            const args = argsOrState as RumRetentionFilterArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.eventType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventType'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.sampleRate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sampleRate'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["eventType"] = args ? args.eventType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["sampleRate"] = args ? args.sampleRate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RumRetentionFilter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RumRetentionFilter resources.
 */
export interface RumRetentionFilterState {
    /**
     * RUM application ID.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * Whether the retention filter is to be enabled. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The type of RUM events to filter on.
     */
    eventType?: pulumi.Input<string>;
    /**
     * The name of a RUM retention filter.
     */
    name?: pulumi.Input<string>;
    /**
     * The Query string for a RUM retention filter. Defaults to `""`.
     */
    query?: pulumi.Input<string>;
    /**
     * The sample rate for a RUM retention filter, between 0 and 100.
     */
    sampleRate?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a RumRetentionFilter resource.
 */
export interface RumRetentionFilterArgs {
    /**
     * RUM application ID.
     */
    applicationId: pulumi.Input<string>;
    /**
     * Whether the retention filter is to be enabled. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The type of RUM events to filter on.
     */
    eventType: pulumi.Input<string>;
    /**
     * The name of a RUM retention filter.
     */
    name: pulumi.Input<string>;
    /**
     * The Query string for a RUM retention filter. Defaults to `""`.
     */
    query?: pulumi.Input<string>;
    /**
     * The sample rate for a RUM retention filter, between 0 and 100.
     */
    sampleRate: pulumi.Input<number>;
}
