// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog monitor config policy resource. This can be used to create and manage Datadog monitor config policies.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const test = new datadog.MonitorConfigPolicy("test", {
 *     policyType: "tag",
 *     tagPolicy: {
 *         tagKey: "env",
 *         tagKeyRequired: false,
 *         validTagValues: [
 *             "staging",
 *             "prod",
 *         ],
 *     },
 * });
 * ```
 */
export class MonitorConfigPolicy extends pulumi.CustomResource {
    /**
     * Get an existing MonitorConfigPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorConfigPolicyState, opts?: pulumi.CustomResourceOptions): MonitorConfigPolicy {
        return new MonitorConfigPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/monitorConfigPolicy:MonitorConfigPolicy';

    /**
     * Returns true if the given object is an instance of MonitorConfigPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitorConfigPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorConfigPolicy.__pulumiType;
    }

    /**
     * The monitor config policy type Valid values are `tag`.
     */
    public readonly policyType!: pulumi.Output<string>;
    /**
     * Config for a tag policy. Only set if `policyType` is `tag`.
     */
    public readonly tagPolicy!: pulumi.Output<outputs.MonitorConfigPolicyTagPolicy | undefined>;

    /**
     * Create a MonitorConfigPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorConfigPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorConfigPolicyArgs | MonitorConfigPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorConfigPolicyState | undefined;
            resourceInputs["policyType"] = state ? state.policyType : undefined;
            resourceInputs["tagPolicy"] = state ? state.tagPolicy : undefined;
        } else {
            const args = argsOrState as MonitorConfigPolicyArgs | undefined;
            if ((!args || args.policyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyType'");
            }
            resourceInputs["policyType"] = args ? args.policyType : undefined;
            resourceInputs["tagPolicy"] = args ? args.tagPolicy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitorConfigPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MonitorConfigPolicy resources.
 */
export interface MonitorConfigPolicyState {
    /**
     * The monitor config policy type Valid values are `tag`.
     */
    policyType?: pulumi.Input<string>;
    /**
     * Config for a tag policy. Only set if `policyType` is `tag`.
     */
    tagPolicy?: pulumi.Input<inputs.MonitorConfigPolicyTagPolicy>;
}

/**
 * The set of arguments for constructing a MonitorConfigPolicy resource.
 */
export interface MonitorConfigPolicyArgs {
    /**
     * The monitor config policy type Valid values are `tag`.
     */
    policyType: pulumi.Input<string>;
    /**
     * Config for a tag policy. Only set if `policyType` is `tag`.
     */
    tagPolicy?: pulumi.Input<inputs.MonitorConfigPolicyTagPolicy>;
}
