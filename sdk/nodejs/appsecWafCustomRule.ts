// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog AppsecWafCustomRule resource. This can be used to create and manage Datadog appsec_waf_custom_rule.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import datadog:index/appsecWafCustomRule:AppsecWafCustomRule new_list ""
 * ```
 */
export class AppsecWafCustomRule extends pulumi.CustomResource {
    /**
     * Get an existing AppsecWafCustomRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppsecWafCustomRuleState, opts?: pulumi.CustomResourceOptions): AppsecWafCustomRule {
        return new AppsecWafCustomRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/appsecWafCustomRule:AppsecWafCustomRule';

    /**
     * Returns true if the given object is an instance of AppsecWafCustomRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppsecWafCustomRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppsecWafCustomRule.__pulumiType;
    }

    public readonly action!: pulumi.Output<outputs.AppsecWafCustomRuleAction | undefined>;
    /**
     * Indicates whether the WAF custom rule will block the request.
     */
    public readonly blocking!: pulumi.Output<boolean>;
    public readonly conditions!: pulumi.Output<outputs.AppsecWafCustomRuleCondition[] | undefined>;
    /**
     * Indicates whether the WAF custom rule is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The Name of the WAF custom rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The path glob for the WAF custom rule.
     */
    public readonly pathGlob!: pulumi.Output<string | undefined>;
    public readonly scopes!: pulumi.Output<outputs.AppsecWafCustomRuleScope[] | undefined>;
    /**
     * Tags associated with the WAF custom rule. `category` and `type` tags are required. Supported categories include `businessLogic`, `attackAttempt` and `securityResponse`.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a AppsecWafCustomRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppsecWafCustomRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppsecWafCustomRuleArgs | AppsecWafCustomRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppsecWafCustomRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["blocking"] = state ? state.blocking : undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pathGlob"] = state ? state.pathGlob : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as AppsecWafCustomRuleArgs | undefined;
            if ((!args || args.blocking === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blocking'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.tags === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tags'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["blocking"] = args ? args.blocking : undefined;
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pathGlob"] = args ? args.pathGlob : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppsecWafCustomRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppsecWafCustomRule resources.
 */
export interface AppsecWafCustomRuleState {
    action?: pulumi.Input<inputs.AppsecWafCustomRuleAction>;
    /**
     * Indicates whether the WAF custom rule will block the request.
     */
    blocking?: pulumi.Input<boolean>;
    conditions?: pulumi.Input<pulumi.Input<inputs.AppsecWafCustomRuleCondition>[]>;
    /**
     * Indicates whether the WAF custom rule is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The Name of the WAF custom rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The path glob for the WAF custom rule.
     */
    pathGlob?: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<inputs.AppsecWafCustomRuleScope>[]>;
    /**
     * Tags associated with the WAF custom rule. `category` and `type` tags are required. Supported categories include `businessLogic`, `attackAttempt` and `securityResponse`.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a AppsecWafCustomRule resource.
 */
export interface AppsecWafCustomRuleArgs {
    action?: pulumi.Input<inputs.AppsecWafCustomRuleAction>;
    /**
     * Indicates whether the WAF custom rule will block the request.
     */
    blocking: pulumi.Input<boolean>;
    conditions?: pulumi.Input<pulumi.Input<inputs.AppsecWafCustomRuleCondition>[]>;
    /**
     * Indicates whether the WAF custom rule is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The Name of the WAF custom rule.
     */
    name: pulumi.Input<string>;
    /**
     * The path glob for the WAF custom rule.
     */
    pathGlob?: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<inputs.AppsecWafCustomRuleScope>[]>;
    /**
     * Tags associated with the WAF custom rule. `category` and `type` tags are required. Supported categories include `businessLogic`, `attackAttempt` and `securityResponse`.
     */
    tags: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
