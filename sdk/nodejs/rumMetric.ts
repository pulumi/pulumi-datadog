// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog RumMetric resource. This can be used to create and manage Datadog rum_metric.
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import datadog:index/rumMetric:RumMetric testing_rum_metric "testing.rum.metric"
 * ```
 */
export class RumMetric extends pulumi.CustomResource {
    /**
     * Get an existing RumMetric resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RumMetricState, opts?: pulumi.CustomResourceOptions): RumMetric {
        return new RumMetric(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/rumMetric:RumMetric';

    /**
     * Returns true if the given object is an instance of RumMetric.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RumMetric {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RumMetric.__pulumiType;
    }

    declare public readonly compute: pulumi.Output<outputs.RumMetricCompute | undefined>;
    /**
     * The type of RUM events to filter on.
     */
    declare public readonly eventType: pulumi.Output<string>;
    declare public readonly filter: pulumi.Output<outputs.RumMetricFilter | undefined>;
    declare public readonly groupBies: pulumi.Output<outputs.RumMetricGroupBy[] | undefined>;
    /**
     * The name of the RUM-based metric. This field can't be updated after creation.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly uniqueness: pulumi.Output<outputs.RumMetricUniqueness | undefined>;

    /**
     * Create a RumMetric resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RumMetricArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RumMetricArgs | RumMetricState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RumMetricState | undefined;
            resourceInputs["compute"] = state?.compute;
            resourceInputs["eventType"] = state?.eventType;
            resourceInputs["filter"] = state?.filter;
            resourceInputs["groupBies"] = state?.groupBies;
            resourceInputs["name"] = state?.name;
            resourceInputs["uniqueness"] = state?.uniqueness;
        } else {
            const args = argsOrState as RumMetricArgs | undefined;
            if (args?.eventType === undefined && !opts.urn) {
                throw new Error("Missing required property 'eventType'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["compute"] = args?.compute;
            resourceInputs["eventType"] = args?.eventType;
            resourceInputs["filter"] = args?.filter;
            resourceInputs["groupBies"] = args?.groupBies;
            resourceInputs["name"] = args?.name;
            resourceInputs["uniqueness"] = args?.uniqueness;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RumMetric.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RumMetric resources.
 */
export interface RumMetricState {
    compute?: pulumi.Input<inputs.RumMetricCompute>;
    /**
     * The type of RUM events to filter on.
     */
    eventType?: pulumi.Input<string>;
    filter?: pulumi.Input<inputs.RumMetricFilter>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.RumMetricGroupBy>[]>;
    /**
     * The name of the RUM-based metric. This field can't be updated after creation.
     */
    name?: pulumi.Input<string>;
    uniqueness?: pulumi.Input<inputs.RumMetricUniqueness>;
}

/**
 * The set of arguments for constructing a RumMetric resource.
 */
export interface RumMetricArgs {
    compute?: pulumi.Input<inputs.RumMetricCompute>;
    /**
     * The type of RUM events to filter on.
     */
    eventType: pulumi.Input<string>;
    filter?: pulumi.Input<inputs.RumMetricFilter>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.RumMetricGroupBy>[]>;
    /**
     * The name of the RUM-based metric. This field can't be updated after creation.
     */
    name: pulumi.Input<string>;
    uniqueness?: pulumi.Input<inputs.RumMetricUniqueness>;
}
