// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DashboardListDashItem {
    /**
     * The ID of this dashboard.
     */
    dashId: string;
    /**
     * The type of this dashboard. Available options are: `customTimeboard`, `customScreenboard`, `integrationScreenboard`, `integrationTimeboard`, and `hostTimeboard`
     */
    type: string;
}

export interface DashboardTemplateVariable {
    default?: string;
    name: string;
    prefix?: string;
}

export interface DashboardTemplateVariablePreset {
    name: string;
    templateVariables: outputs.DashboardTemplateVariablePresetTemplateVariable[];
}

export interface DashboardTemplateVariablePresetTemplateVariable {
    name: string;
    value: string;
}

export interface DashboardWidget {
    alertGraphDefinition?: outputs.DashboardWidgetAlertGraphDefinition;
    alertValueDefinition?: outputs.DashboardWidgetAlertValueDefinition;
    changeDefinition?: outputs.DashboardWidgetChangeDefinition;
    checkStatusDefinition?: outputs.DashboardWidgetCheckStatusDefinition;
    distributionDefinition?: outputs.DashboardWidgetDistributionDefinition;
    eventStreamDefinition?: outputs.DashboardWidgetEventStreamDefinition;
    eventTimelineDefinition?: outputs.DashboardWidgetEventTimelineDefinition;
    freeTextDefinition?: outputs.DashboardWidgetFreeTextDefinition;
    groupDefinition?: outputs.DashboardWidgetGroupDefinition;
    heatmapDefinition?: outputs.DashboardWidgetHeatmapDefinition;
    hostmapDefinition?: outputs.DashboardWidgetHostmapDefinition;
    iframeDefinition?: outputs.DashboardWidgetIframeDefinition;
    imageDefinition?: outputs.DashboardWidgetImageDefinition;
    layout?: outputs.DashboardWidgetLayout;
    logStreamDefinition?: outputs.DashboardWidgetLogStreamDefinition;
    manageStatusDefinition?: outputs.DashboardWidgetManageStatusDefinition;
    noteDefinition?: outputs.DashboardWidgetNoteDefinition;
    queryTableDefinition?: outputs.DashboardWidgetQueryTableDefinition;
    queryValueDefinition?: outputs.DashboardWidgetQueryValueDefinition;
    scatterplotDefinition?: outputs.DashboardWidgetScatterplotDefinition;
    serviceLevelObjectiveDefinition?: outputs.DashboardWidgetServiceLevelObjectiveDefinition;
    servicemapDefinition?: outputs.DashboardWidgetServicemapDefinition;
    timeseriesDefinition?: outputs.DashboardWidgetTimeseriesDefinition;
    toplistDefinition?: outputs.DashboardWidgetToplistDefinition;
    traceServiceDefinition?: outputs.DashboardWidgetTraceServiceDefinition;
}

export interface DashboardWidgetAlertGraphDefinition {
    alertId: string;
    time?: outputs.DashboardWidgetAlertGraphDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    vizType: string;
}

export interface DashboardWidgetAlertGraphDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetAlertValueDefinition {
    alertId: string;
    precision?: number;
    textAlign?: string;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    unit?: string;
}

export interface DashboardWidgetChangeDefinition {
    requests?: outputs.DashboardWidgetChangeDefinitionRequest[];
    time?: outputs.DashboardWidgetChangeDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetChangeDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetChangeDefinitionRequestApmQuery;
    changeType?: string;
    compareTo?: string;
    increaseGood?: boolean;
    logQuery?: outputs.DashboardWidgetChangeDefinitionRequestLogQuery;
    orderBy?: string;
    orderDir?: string;
    processQuery?: outputs.DashboardWidgetChangeDefinitionRequestProcessQuery;
    q?: string;
    showPresent?: boolean;
}

export interface DashboardWidgetChangeDefinitionRequestApmQuery {
    compute: outputs.DashboardWidgetChangeDefinitionRequestApmQueryCompute;
    groupBies?: outputs.DashboardWidgetChangeDefinitionRequestApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetChangeDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetChangeDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetChangeDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetChangeDefinitionRequestLogQuery {
    compute: outputs.DashboardWidgetChangeDefinitionRequestLogQueryCompute;
    groupBies?: outputs.DashboardWidgetChangeDefinitionRequestLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetChangeDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetChangeDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetChangeDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetChangeDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetChangeDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetCheckStatusDefinition {
    check: string;
    group?: string;
    groupBies?: string[];
    grouping: string;
    tags?: string[];
    time?: outputs.DashboardWidgetCheckStatusDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetCheckStatusDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetDistributionDefinition {
    legendSize?: string;
    requests?: outputs.DashboardWidgetDistributionDefinitionRequest[];
    showLegend?: boolean;
    time?: outputs.DashboardWidgetDistributionDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetDistributionDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetDistributionDefinitionRequestApmQuery;
    logQuery?: outputs.DashboardWidgetDistributionDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetDistributionDefinitionRequestProcessQuery;
    q?: string;
    style?: outputs.DashboardWidgetDistributionDefinitionRequestStyle;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQuery {
    compute: outputs.DashboardWidgetDistributionDefinitionRequestApmQueryCompute;
    groupBies?: outputs.DashboardWidgetDistributionDefinitionRequestApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetDistributionDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQuery {
    compute: outputs.DashboardWidgetDistributionDefinitionRequestLogQueryCompute;
    groupBies?: outputs.DashboardWidgetDistributionDefinitionRequestLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetDistributionDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetDistributionDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetDistributionDefinitionRequestStyle {
    palette?: string;
}

export interface DashboardWidgetDistributionDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetEventStreamDefinition {
    eventSize?: string;
    query: string;
    tagsExecution?: string;
    time?: outputs.DashboardWidgetEventStreamDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetEventStreamDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetEventTimelineDefinition {
    query: string;
    tagsExecution?: string;
    time?: outputs.DashboardWidgetEventTimelineDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetEventTimelineDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetFreeTextDefinition {
    color?: string;
    fontSize?: string;
    text: string;
    textAlign?: string;
}

export interface DashboardWidgetGroupDefinition {
    layoutType: string;
    title?: string;
    widgets: outputs.DashboardWidgetGroupDefinitionWidget[];
}

export interface DashboardWidgetGroupDefinitionWidget {
    alertGraphDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetAlertGraphDefinition;
    alertValueDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetAlertValueDefinition;
    changeDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinition;
    checkStatusDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetCheckStatusDefinition;
    distributionDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinition;
    eventStreamDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetEventStreamDefinition;
    eventTimelineDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetEventTimelineDefinition;
    freeTextDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetFreeTextDefinition;
    heatmapDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinition;
    hostmapDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinition;
    iframeDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetIframeDefinition;
    imageDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetImageDefinition;
    layout?: outputs.DashboardWidgetGroupDefinitionWidgetLayout;
    logStreamDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetLogStreamDefinition;
    manageStatusDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetManageStatusDefinition;
    noteDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetNoteDefinition;
    queryTableDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinition;
    queryValueDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinition;
    scatterplotDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinition;
    serviceLevelObjectiveDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition;
    servicemapDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetServicemapDefinition;
    timeseriesDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinition;
    toplistDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinition;
    traceServiceDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetTraceServiceDefinition;
}

export interface DashboardWidgetGroupDefinitionWidgetAlertGraphDefinition {
    alertId: string;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    vizType: string;
}

export interface DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetAlertValueDefinition {
    alertId: string;
    precision?: number;
    textAlign?: string;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    unit?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinition {
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequest[];
    time?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery;
    changeType?: string;
    compareTo?: string;
    increaseGood?: boolean;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery;
    orderBy?: string;
    orderDir?: string;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery;
    q?: string;
    showPresent?: boolean;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetCheckStatusDefinition {
    check: string;
    group?: string;
    groupBies?: string[];
    grouping: string;
    tags?: string[];
    time?: outputs.DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinition {
    legendSize?: string;
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequest[];
    showLegend?: boolean;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery;
    q?: string;
    style?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle {
    palette?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetEventStreamDefinition {
    eventSize?: string;
    query: string;
    tagsExecution?: string;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetEventTimelineDefinition {
    query: string;
    tagsExecution?: string;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetFreeTextDefinition {
    color?: string;
    fontSize?: string;
    text: string;
    textAlign?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinition {
    events?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEvent[];
    legendSize?: string;
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequest[];
    showLegend?: boolean;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    yaxis?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEvent {
    q: string;
    tagsExecution?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery;
    q?: string;
    style?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle {
    palette?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinition {
    groups?: string[];
    noGroupHosts?: boolean;
    noMetricHosts?: boolean;
    nodeType?: string;
    request?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequest;
    scopes?: string[];
    style?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyle;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequest {
    fills?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFill[];
    sizes?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSize[];
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFill {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery;
    q?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSize {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery;
    q?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyle {
    fillMax?: string;
    fillMin?: string;
    palette?: string;
    paletteFlip?: boolean;
}

export interface DashboardWidgetGroupDefinitionWidgetIframeDefinition {
    url: string;
}

export interface DashboardWidgetGroupDefinitionWidgetImageDefinition {
    margin?: string;
    sizing?: string;
    url: string;
}

export interface DashboardWidgetGroupDefinitionWidgetLayout {
    height: number;
    width: number;
    x: number;
    y: number;
}

export interface DashboardWidgetGroupDefinitionWidgetLogStreamDefinition {
    columns?: string[];
    indexes?: string[];
    /**
     * @deprecated This parameter has been deprecated. Use 'indexes' instead
     */
    logset?: string;
    messageDisplay?: string;
    query?: string;
    showDateColumn?: boolean;
    showMessageColumn?: boolean;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSort;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSort {
    column: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetManageStatusDefinition {
    colorPreference?: string;
    /**
     * @deprecated This parameter has been deprecated
     */
    count?: number;
    displayFormat?: string;
    hideZeroCounts?: boolean;
    query: string;
    showLastTriggered?: boolean;
    sort?: string;
    /**
     * @deprecated This parameter has been deprecated
     */
    start?: number;
    summaryType?: string;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetNoteDefinition {
    backgroundColor?: string;
    content: string;
    fontSize?: string;
    showTick?: boolean;
    textAlign?: string;
    tickEdge?: string;
    tickPos?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinition {
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequest[];
    time?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequest {
    aggregator?: string;
    alias?: string;
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery;
    conditionalFormats?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormat[];
    limit?: number;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery;
    order?: string;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery;
    q?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinition {
    autoscale?: boolean;
    customUnit?: string;
    precision?: number;
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequest[];
    textAlign?: string;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequest {
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery;
    conditionalFormats?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormat[];
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery;
    q?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinition {
    colorByGroups?: string[];
    request?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequest;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    xaxis?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis;
    yaxis?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequest {
    xes?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestX[];
    ys?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestY[];
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestX {
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery;
    q?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestY {
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery;
    q?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition {
    showErrorBudget?: boolean;
    sloId: string;
    timeWindows: string[];
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    viewMode: string;
    viewType: string;
}

export interface DashboardWidgetGroupDefinitionWidgetServicemapDefinition {
    filters: string[];
    service: string;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinition {
    events?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEvent[];
    legendSize?: string;
    markers?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarker[];
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequest[];
    showLegend?: boolean;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    yaxis?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEvent {
    q: string;
    tagsExecution?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarker {
    displayType?: string;
    label?: string;
    value: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery;
    displayType?: string;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery;
    metadatas?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadata[];
    networkQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery;
    q?: string;
    rumQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery;
    style?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadata {
    aliasName?: string;
    expression: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle {
    lineType?: string;
    lineWidth?: string;
    palette?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinition {
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequest[];
    time?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery;
    conditionalFormats?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormat[];
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery;
    q?: string;
    style?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery {
    compute: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryCompute;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle {
    palette?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTraceServiceDefinition {
    displayFormat?: string;
    env: string;
    service: string;
    showBreakdown?: boolean;
    showDistribution?: boolean;
    showErrors?: boolean;
    showHits?: boolean;
    showLatency?: boolean;
    showResourceList?: boolean;
    sizeFormat?: string;
    spanName: string;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetHeatmapDefinition {
    events?: outputs.DashboardWidgetHeatmapDefinitionEvent[];
    legendSize?: string;
    requests?: outputs.DashboardWidgetHeatmapDefinitionRequest[];
    showLegend?: boolean;
    time?: outputs.DashboardWidgetHeatmapDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    yaxis?: outputs.DashboardWidgetHeatmapDefinitionYaxis;
}

export interface DashboardWidgetHeatmapDefinitionEvent {
    q: string;
    tagsExecution?: string;
}

export interface DashboardWidgetHeatmapDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestApmQuery;
    logQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestProcessQuery;
    q?: string;
    style?: outputs.DashboardWidgetHeatmapDefinitionRequestStyle;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQuery {
    compute: outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryCompute;
    groupBies?: outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetHeatmapDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQuery {
    compute: outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryCompute;
    groupBies?: outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetHeatmapDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestStyle {
    palette?: string;
}

export interface DashboardWidgetHeatmapDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetHeatmapDefinitionYaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetHostmapDefinition {
    groups?: string[];
    noGroupHosts?: boolean;
    noMetricHosts?: boolean;
    nodeType?: string;
    request?: outputs.DashboardWidgetHostmapDefinitionRequest;
    scopes?: string[];
    style?: outputs.DashboardWidgetHostmapDefinitionStyle;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetHostmapDefinitionRequest {
    fills?: outputs.DashboardWidgetHostmapDefinitionRequestFill[];
    sizes?: outputs.DashboardWidgetHostmapDefinitionRequestSize[];
}

export interface DashboardWidgetHostmapDefinitionRequestFill {
    apmQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillApmQuery;
    logQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillLogQuery;
    processQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillProcessQuery;
    q?: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQuery {
    compute: outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryCompute;
    groupBies?: outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetHostmapDefinitionRequestFillApmQuerySearch;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySort;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQuerySearch {
    query: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQuery {
    compute: outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryCompute;
    groupBies?: outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetHostmapDefinitionRequestFillLogQuerySearch;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySort;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQuerySearch {
    query: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSize {
    apmQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQuery;
    logQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQuery;
    processQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeProcessQuery;
    q?: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQuery {
    compute: outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryCompute;
    groupBies?: outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQuerySearch;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySort;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQuerySearch {
    query: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQuery {
    compute: outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryCompute;
    groupBies?: outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQuerySearch;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySort;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQuerySearch {
    query: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetHostmapDefinitionStyle {
    fillMax?: string;
    fillMin?: string;
    palette?: string;
    paletteFlip?: boolean;
}

export interface DashboardWidgetIframeDefinition {
    url: string;
}

export interface DashboardWidgetImageDefinition {
    margin?: string;
    sizing?: string;
    url: string;
}

export interface DashboardWidgetLayout {
    height: number;
    width: number;
    x: number;
    y: number;
}

export interface DashboardWidgetLogStreamDefinition {
    columns?: string[];
    indexes?: string[];
    /**
     * @deprecated This parameter has been deprecated. Use 'indexes' instead
     */
    logset?: string;
    messageDisplay?: string;
    query?: string;
    showDateColumn?: boolean;
    showMessageColumn?: boolean;
    sort?: outputs.DashboardWidgetLogStreamDefinitionSort;
    time?: outputs.DashboardWidgetLogStreamDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetLogStreamDefinitionSort {
    column: string;
    order: string;
}

export interface DashboardWidgetLogStreamDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetManageStatusDefinition {
    colorPreference?: string;
    /**
     * @deprecated This parameter has been deprecated
     */
    count?: number;
    displayFormat?: string;
    hideZeroCounts?: boolean;
    query: string;
    showLastTriggered?: boolean;
    sort?: string;
    /**
     * @deprecated This parameter has been deprecated
     */
    start?: number;
    summaryType?: string;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetNoteDefinition {
    backgroundColor?: string;
    content: string;
    fontSize?: string;
    showTick?: boolean;
    textAlign?: string;
    tickEdge?: string;
    tickPos?: string;
}

export interface DashboardWidgetQueryTableDefinition {
    requests?: outputs.DashboardWidgetQueryTableDefinitionRequest[];
    time?: outputs.DashboardWidgetQueryTableDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetQueryTableDefinitionRequest {
    aggregator?: string;
    alias?: string;
    apmQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestApmQuery;
    conditionalFormats?: outputs.DashboardWidgetQueryTableDefinitionRequestConditionalFormat[];
    limit?: number;
    logQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestLogQuery;
    order?: string;
    processQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestProcessQuery;
    q?: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQuery {
    compute: outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryCompute;
    groupBies?: outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetQueryTableDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQuery {
    compute: outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryCompute;
    groupBies?: outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetQueryTableDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetQueryTableDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetQueryValueDefinition {
    autoscale?: boolean;
    customUnit?: string;
    precision?: number;
    requests?: outputs.DashboardWidgetQueryValueDefinitionRequest[];
    textAlign?: string;
    time?: outputs.DashboardWidgetQueryValueDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetQueryValueDefinitionRequest {
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestApmQuery;
    conditionalFormats?: outputs.DashboardWidgetQueryValueDefinitionRequestConditionalFormat[];
    logQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestProcessQuery;
    q?: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQuery {
    compute: outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryCompute;
    groupBies?: outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetQueryValueDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQuery {
    compute: outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryCompute;
    groupBies?: outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetQueryValueDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetQueryValueDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetScatterplotDefinition {
    colorByGroups?: string[];
    request?: outputs.DashboardWidgetScatterplotDefinitionRequest;
    time?: outputs.DashboardWidgetScatterplotDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    xaxis?: outputs.DashboardWidgetScatterplotDefinitionXaxis;
    yaxis?: outputs.DashboardWidgetScatterplotDefinitionYaxis;
}

export interface DashboardWidgetScatterplotDefinitionRequest {
    xes?: outputs.DashboardWidgetScatterplotDefinitionRequestX[];
    ys?: outputs.DashboardWidgetScatterplotDefinitionRequestY[];
}

export interface DashboardWidgetScatterplotDefinitionRequestX {
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXApmQuery;
    logQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXLogQuery;
    processQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXProcessQuery;
    q?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQuery {
    compute: outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryCompute;
    groupBies?: outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetScatterplotDefinitionRequestXApmQuerySearch;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySort;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQuerySearch {
    query: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQuery {
    compute: outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryCompute;
    groupBies?: outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetScatterplotDefinitionRequestXLogQuerySearch;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySort;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQuerySearch {
    query: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestY {
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYApmQuery;
    logQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYLogQuery;
    processQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYProcessQuery;
    q?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQuery {
    compute: outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryCompute;
    groupBies?: outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetScatterplotDefinitionRequestYApmQuerySearch;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySort;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQuerySearch {
    query: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQuery {
    compute: outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryCompute;
    groupBies?: outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetScatterplotDefinitionRequestYLogQuerySearch;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySort;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQuerySearch {
    query: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetScatterplotDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetScatterplotDefinitionXaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetScatterplotDefinitionYaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetServiceLevelObjectiveDefinition {
    showErrorBudget?: boolean;
    sloId: string;
    timeWindows: string[];
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    viewMode: string;
    viewType: string;
}

export interface DashboardWidgetServicemapDefinition {
    filters: string[];
    service: string;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetTimeseriesDefinition {
    events?: outputs.DashboardWidgetTimeseriesDefinitionEvent[];
    legendSize?: string;
    markers?: outputs.DashboardWidgetTimeseriesDefinitionMarker[];
    requests?: outputs.DashboardWidgetTimeseriesDefinitionRequest[];
    showLegend?: boolean;
    time?: outputs.DashboardWidgetTimeseriesDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    yaxis?: outputs.DashboardWidgetTimeseriesDefinitionYaxis;
}

export interface DashboardWidgetTimeseriesDefinitionEvent {
    q: string;
    tagsExecution?: string;
}

export interface DashboardWidgetTimeseriesDefinitionMarker {
    displayType?: string;
    label?: string;
    value: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestApmQuery;
    displayType?: string;
    logQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestLogQuery;
    metadatas?: outputs.DashboardWidgetTimeseriesDefinitionRequestMetadata[];
    networkQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQuery;
    processQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestProcessQuery;
    q?: string;
    rumQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestRumQuery;
    style?: outputs.DashboardWidgetTimeseriesDefinitionRequestStyle;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQuery {
    compute: outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryCompute;
    groupBies?: outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetTimeseriesDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQuery {
    compute: outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryCompute;
    groupBies?: outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetTimeseriesDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestMetadata {
    aliasName?: string;
    expression: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQuery {
    compute: outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryCompute;
    groupBies?: outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQuerySearch;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySort;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQuerySearch {
    query: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQuery {
    compute: outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryCompute;
    groupBies?: outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetTimeseriesDefinitionRequestRumQuerySearch;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySort;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQuerySearch {
    query: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestStyle {
    lineType?: string;
    lineWidth?: string;
    palette?: string;
}

export interface DashboardWidgetTimeseriesDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetTimeseriesDefinitionYaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetToplistDefinition {
    requests?: outputs.DashboardWidgetToplistDefinitionRequest[];
    time?: outputs.DashboardWidgetToplistDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetToplistDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetToplistDefinitionRequestApmQuery;
    conditionalFormats?: outputs.DashboardWidgetToplistDefinitionRequestConditionalFormat[];
    logQuery?: outputs.DashboardWidgetToplistDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetToplistDefinitionRequestProcessQuery;
    q?: string;
    style?: outputs.DashboardWidgetToplistDefinitionRequestStyle;
}

export interface DashboardWidgetToplistDefinitionRequestApmQuery {
    compute: outputs.DashboardWidgetToplistDefinitionRequestApmQueryCompute;
    groupBies?: outputs.DashboardWidgetToplistDefinitionRequestApmQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetToplistDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetToplistDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetToplistDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetToplistDefinitionRequestConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetToplistDefinitionRequestLogQuery {
    compute: outputs.DashboardWidgetToplistDefinitionRequestLogQueryCompute;
    groupBies?: outputs.DashboardWidgetToplistDefinitionRequestLogQueryGroupBy[];
    index: string;
    search?: outputs.DashboardWidgetToplistDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sort?: outputs.DashboardWidgetToplistDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetToplistDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetToplistDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetToplistDefinitionRequestStyle {
    palette?: string;
}

export interface DashboardWidgetToplistDefinitionTime {
    liveSpan?: string;
}

export interface DashboardWidgetTraceServiceDefinition {
    displayFormat?: string;
    env: string;
    service: string;
    showBreakdown?: boolean;
    showDistribution?: boolean;
    showErrors?: boolean;
    showHits?: boolean;
    showLatency?: boolean;
    showResourceList?: boolean;
    sizeFormat?: string;
    spanName: string;
    time?: outputs.DashboardWidgetTraceServiceDefinitionTime;
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetTraceServiceDefinitionTime {
    liveSpan?: string;
}

export interface DowntimeRecurrence {
    /**
     * How often to repeat as an integer. For example to repeat every 3 days, select a type of days and a period of 3.
     */
    period: number;
    /**
     * days, weeks, months, or years
     */
    type: string;
    /**
     * The date at which the recurrence should end as a POSIX timestamp. `untilOccurrences` and `untilDate` are mutually exclusive.
     */
    untilDate?: number;
    /**
     * How many times the downtime will be rescheduled. `untilOccurrences` and `untilDate` are mutually exclusive.
     */
    untilOccurrences?: number;
    /**
     * A list of week days to repeat on. Choose from: Mon, Tue, Wed, Thu, Fri, Sat or Sun. Only applicable when type is weeks. First letter must be capitalized.
     */
    weekDays?: string[];
}

export interface LogsArchiveAzure {
    /**
     * Your client id.
     */
    clientId: string;
    /**
     * The container where the archive will be stored.
     */
    container: string;
    /**
     * The path where the archive will be stored.
     */
    path?: string;
    /**
     * The associated storage account.
     */
    storageAccount: string;
    /**
     * Your tenant id.
     */
    tenantId: string;
}

export interface LogsArchiveGcs {
    /**
     * Name of your gcs bucket.
     */
    bucket: string;
    /**
     * Your client email.
     */
    clientEmail: string;
    /**
     * The path where the archive will be stored.
     */
    path: string;
    /**
     * Your project id.
     */
    projectId: string;
}

export interface LogsArchiveS3 {
    /**
     * Your AWS account id.
     */
    accountId: string;
    /**
     * Name of your gcs bucket.
     */
    bucket: string;
    /**
     * Your client email.
     */
    clientEmail: string;
    /**
     * The path where the archive will be stored.
     */
    path: string;
    /**
     * Your project id.
     */
    projectId: string;
    /**
     * Your AWS role name.
     */
    roleName: string;
}

export interface LogsCustomPipelineFilter {
    query: string;
}

export interface LogsCustomPipelineProcessor {
    arithmeticProcessor?: outputs.LogsCustomPipelineProcessorArithmeticProcessor;
    attributeRemapper?: outputs.LogsCustomPipelineProcessorAttributeRemapper;
    categoryProcessor?: outputs.LogsCustomPipelineProcessorCategoryProcessor;
    dateRemapper?: outputs.LogsCustomPipelineProcessorDateRemapper;
    geoIpParser?: outputs.LogsCustomPipelineProcessorGeoIpParser;
    grokParser?: outputs.LogsCustomPipelineProcessorGrokParser;
    lookupProcessor?: outputs.LogsCustomPipelineProcessorLookupProcessor;
    messageRemapper?: outputs.LogsCustomPipelineProcessorMessageRemapper;
    pipeline?: outputs.LogsCustomPipelineProcessorPipeline;
    serviceRemapper?: outputs.LogsCustomPipelineProcessorServiceRemapper;
    statusRemapper?: outputs.LogsCustomPipelineProcessorStatusRemapper;
    stringBuilderProcessor?: outputs.LogsCustomPipelineProcessorStringBuilderProcessor;
    traceIdRemapper?: outputs.LogsCustomPipelineProcessorTraceIdRemapper;
    urlParser?: outputs.LogsCustomPipelineProcessorUrlParser;
    userAgentParser?: outputs.LogsCustomPipelineProcessorUserAgentParser;
}

export interface LogsCustomPipelineProcessorArithmeticProcessor {
    /**
     * Arithmetic operation between one or more log attributes.
     */
    expression: string;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * If it replaces all missing attributes of `template` by an empty string.
     * * trace_id_remapper
     */
    isReplaceMissing?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorAttributeRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Override the target element if already set.
     */
    overrideOnConflict?: boolean;
    /**
     * Remove or preserve the remapped source element.
     */
    preserveSource?: boolean;
    /**
     * Defines where the sources are from (log `attribute` or `tag`).
     */
    sourceType: string;
    /**
     * List of source attributes.
     */
    sources: string[];
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
    /**
     * Defines if the target is a log `attribute` or `tag`.
     */
    targetType: string;
}

export interface LogsCustomPipelineProcessorCategoryProcessor {
    /**
     * List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
     */
    categories: outputs.LogsCustomPipelineProcessorCategoryProcessorCategory[];
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorCategoryProcessorCategory {
    /**
     * Defines the nested pipeline filter. Only logs that match the filter criteria are processed by this pipeline.
     */
    filters: outputs.LogsCustomPipelineProcessorCategoryProcessorCategoryFilter[];
    /**
     * Name of the processor
     */
    name: string;
}

export interface LogsCustomPipelineProcessorCategoryProcessorCategoryFilter {
    query: string;
}

export interface LogsCustomPipelineProcessorDateRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorGeoIpParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorGrokParser {
    grok: outputs.LogsCustomPipelineProcessorGrokParserGrok;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
     */
    samples?: string[];
    /**
     * Name of the source attribute used to do the lookup.
     */
    source: string;
}

export interface LogsCustomPipelineProcessorGrokParserGrok {
    /**
     * Match rules for your grok parser.
     */
    matchRules: string;
    /**
     * Support rules for your grok parser.
     */
    supportRules: string;
}

export interface LogsCustomPipelineProcessorLookupProcessor {
    /**
     * Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
     */
    defaultLookup?: string;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * List of entries of the lookup table using `"key,value"` format.
     */
    lookupTables: string[];
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Name of the source attribute used to do the lookup.
     */
    source: string;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorMessageRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipeline {
    /**
     * Defines the nested pipeline filter. Only logs that match the filter criteria are processed by this pipeline.
     */
    filters: outputs.LogsCustomPipelineProcessorPipelineFilter[];
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name: string;
    /**
     * Processors. Nested pipeline can't take any other nested pipeline as its processor.
     */
    processors?: outputs.LogsCustomPipelineProcessorPipelineProcessor[];
}

export interface LogsCustomPipelineProcessorPipelineFilter {
    query: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessor {
    arithmeticProcessor?: outputs.LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessor;
    attributeRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorAttributeRemapper;
    categoryProcessor?: outputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessor;
    dateRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorDateRemapper;
    geoIpParser?: outputs.LogsCustomPipelineProcessorPipelineProcessorGeoIpParser;
    grokParser?: outputs.LogsCustomPipelineProcessorPipelineProcessorGrokParser;
    lookupProcessor?: outputs.LogsCustomPipelineProcessorPipelineProcessorLookupProcessor;
    messageRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorMessageRemapper;
    serviceRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorServiceRemapper;
    statusRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorStatusRemapper;
    stringBuilderProcessor?: outputs.LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessor;
    traceIdRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapper;
    urlParser?: outputs.LogsCustomPipelineProcessorPipelineProcessorUrlParser;
    userAgentParser?: outputs.LogsCustomPipelineProcessorPipelineProcessorUserAgentParser;
}

export interface LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessor {
    /**
     * Arithmetic operation between one or more log attributes.
     */
    expression: string;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * If it replaces all missing attributes of `template` by an empty string.
     * * trace_id_remapper
     */
    isReplaceMissing?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorAttributeRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Override the target element if already set.
     */
    overrideOnConflict?: boolean;
    /**
     * Remove or preserve the remapped source element.
     */
    preserveSource?: boolean;
    /**
     * Defines where the sources are from (log `attribute` or `tag`).
     */
    sourceType: string;
    /**
     * List of source attributes.
     */
    sources: string[];
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
    /**
     * Defines if the target is a log `attribute` or `tag`.
     */
    targetType: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorCategoryProcessor {
    /**
     * List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
     */
    categories: outputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategory[];
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategory {
    /**
     * Defines the nested pipeline filter. Only logs that match the filter criteria are processed by this pipeline.
     */
    filters: outputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilter[];
    /**
     * Name of the processor
     */
    name: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilter {
    query: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorDateRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipelineProcessorGeoIpParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorGrokParser {
    grok: outputs.LogsCustomPipelineProcessorPipelineProcessorGrokParserGrok;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
     */
    samples?: string[];
    /**
     * Name of the source attribute used to do the lookup.
     */
    source: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorGrokParserGrok {
    /**
     * Match rules for your grok parser.
     */
    matchRules: string;
    /**
     * Support rules for your grok parser.
     */
    supportRules: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorLookupProcessor {
    /**
     * Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
     */
    defaultLookup?: string;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * List of entries of the lookup table using `"key,value"` format.
     */
    lookupTables: string[];
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Name of the source attribute used to do the lookup.
     */
    source: string;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorMessageRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipelineProcessorServiceRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipelineProcessorStatusRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessor {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * If it replaces all missing attributes of `template` by an empty string.
     * * trace_id_remapper
     */
    isReplaceMissing?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
    /**
     * The formula with one or more attributes and raw text.
     */
    template: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipelineProcessorUrlParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Normalize the ending slashes or not.
     */
    normalizeEndingSlashes?: boolean;
    /**
     * List of source attributes.
     */
    sources: string[];
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorUserAgentParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * If the source attribute is URL encoded or not.
     */
    isEncoded?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorServiceRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorStatusRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorStringBuilderProcessor {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * If it replaces all missing attributes of `template` by an empty string.
     * * trace_id_remapper
     */
    isReplaceMissing?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
    /**
     * The formula with one or more attributes and raw text.
     */
    template: string;
}

export interface LogsCustomPipelineProcessorTraceIdRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorUrlParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Normalize the ending slashes or not.
     */
    normalizeEndingSlashes?: boolean;
    /**
     * List of source attributes.
     */
    sources: string[];
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorUserAgentParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * If the source attribute is URL encoded or not.
     */
    isEncoded?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsIndexExclusionFilter {
    filters?: outputs.LogsIndexExclusionFilterFilter[];
    /**
     * A boolean stating if the exclusion is active or not.
     */
    isEnabled?: boolean;
    /**
     * The name of the exclusion filter.
     */
    name?: string;
}

export interface LogsIndexExclusionFilterFilter {
    /**
     * Only logs matching the filter criteria and the query of the parent index will be considered for this exclusion filter.
     */
    query?: string;
    /**
     * The fraction of logs excluded by the exclusion filter, when active.
     */
    sampleRate?: number;
}

export interface LogsIndexFilter {
    /**
     * Only logs matching the filter criteria and the query of the parent index will be considered for this exclusion filter.
     */
    query: string;
}

export interface MonitorThresholdWindows {
    /**
     * describes how long an anomalous metric must be normal before the alert recovers.
     */
    recoveryWindow?: string;
    /**
     * describes how long a metric must be anomalous before an alert triggers.
     */
    triggerWindow?: string;
}

export interface MonitorThresholds {
    critical?: number;
    criticalRecovery?: number;
    ok?: number;
    unknown?: number;
    warning?: number;
    warningRecovery?: number;
}

export interface ScreenBoardTemplateVariable {
    default?: string;
    name: string;
    prefix?: string;
}

export interface ScreenBoardWidget {
    alertId?: number;
    autoRefresh?: boolean;
    bgcolor?: string;
    check?: string;
    color?: string;
    colorPreference?: string;
    columns?: string;
    displayFormat?: string;
    env?: string;
    eventSize?: string;
    fontSize?: string;
    group?: string;
    groupBies?: string[];
    grouping?: string;
    height?: number;
    hideZeroCounts?: boolean;
    html?: string;
    layoutVersion?: string;
    legend?: boolean;
    legendSize?: string;
    logset?: string;
    manageStatusShowTitle?: boolean;
    manageStatusTitleAlign?: string;
    manageStatusTitleSize?: string;
    manageStatusTitleText?: string;
    margin?: string;
    monitor?: {[key: string]: string};
    mustShowBreakdown?: boolean;
    mustShowDistribution?: boolean;
    mustShowErrors?: boolean;
    mustShowHits?: boolean;
    mustShowLatency?: boolean;
    mustShowResourceList?: boolean;
    params?: {[key: string]: string};
    precision?: string;
    query?: string;
    rules?: outputs.ScreenBoardWidgetRule[];
    serviceName?: string;
    serviceService?: string;
    showLastTriggered?: boolean;
    sizeVersion?: string;
    sizing?: string;
    summaryType?: string;
    tags?: string[];
    text?: string;
    textAlign?: string;
    textSize?: string;
    tick?: boolean;
    tickEdge?: string;
    tickPos?: string;
    tileDeves?: outputs.ScreenBoardWidgetTileDef[];
    time?: {[key: string]: string};
    timeframes?: string[];
    title?: string;
    titleAlign?: string;
    titleSize?: number;
    type: string;
    unit?: string;
    url?: string;
    vizType?: string;
    width?: number;
    x: number;
    y: number;
}

export interface ScreenBoardWidgetRule {
    color?: string;
    threshold?: number;
    timeframe?: string;
}

export interface ScreenBoardWidgetTileDef {
    autoscale?: boolean;
    customUnit?: string;
    events?: outputs.ScreenBoardWidgetTileDefEvent[];
    groups?: string[];
    markers?: outputs.ScreenBoardWidgetTileDefMarker[];
    noGroupHosts?: boolean;
    noMetricHosts?: boolean;
    nodeType?: string;
    precision?: string;
    requests: outputs.ScreenBoardWidgetTileDefRequest[];
    scopes?: string[];
    style?: {[key: string]: any};
    textAlign?: string;
    viz: string;
}

export interface ScreenBoardWidgetTileDefEvent {
    q: string;
}

export interface ScreenBoardWidgetTileDefMarker {
    label?: string;
    type: string;
    value: string;
}

export interface ScreenBoardWidgetTileDefRequest {
    aggregator?: string;
    apmQuery?: outputs.ScreenBoardWidgetTileDefRequestApmQuery;
    changeType?: string;
    compareTo?: string;
    conditionalFormats?: outputs.ScreenBoardWidgetTileDefRequestConditionalFormat[];
    extraCol?: string;
    increaseGood?: boolean;
    limit?: number;
    logQuery?: outputs.ScreenBoardWidgetTileDefRequestLogQuery;
    /**
     * A JSON blob representing mapping of query expressions to alias names. Note that the query expressions in `metadataJson` will be ignored if they're not present in the query. For example:
     */
    metadataJson?: string;
    metric?: string;
    orderBy?: string;
    orderDir?: string;
    processQuery?: outputs.ScreenBoardWidgetTileDefRequestProcessQuery;
    q?: string;
    queryType?: string;
    style?: {[key: string]: any};
    tagFilters?: string[];
    textFilter?: string;
    type?: string;
}

export interface ScreenBoardWidgetTileDefRequestApmQuery {
    compute: outputs.ScreenBoardWidgetTileDefRequestApmQueryCompute;
    groupBies?: outputs.ScreenBoardWidgetTileDefRequestApmQueryGroupBy[];
    index: string;
    search?: outputs.ScreenBoardWidgetTileDefRequestApmQuerySearch;
}

export interface ScreenBoardWidgetTileDefRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: string;
}

export interface ScreenBoardWidgetTileDefRequestApmQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.ScreenBoardWidgetTileDefRequestApmQueryGroupBySort;
}

export interface ScreenBoardWidgetTileDefRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface ScreenBoardWidgetTileDefRequestApmQuerySearch {
    query: string;
}

export interface ScreenBoardWidgetTileDefRequestConditionalFormat {
    color?: string;
    comparator: string;
    customBgColor?: string;
    invert?: boolean;
    palette?: string;
    value?: string;
}

export interface ScreenBoardWidgetTileDefRequestLogQuery {
    compute: outputs.ScreenBoardWidgetTileDefRequestLogQueryCompute;
    groupBies?: outputs.ScreenBoardWidgetTileDefRequestLogQueryGroupBy[];
    index: string;
    search?: outputs.ScreenBoardWidgetTileDefRequestLogQuerySearch;
}

export interface ScreenBoardWidgetTileDefRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: string;
}

export interface ScreenBoardWidgetTileDefRequestLogQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.ScreenBoardWidgetTileDefRequestLogQueryGroupBySort;
}

export interface ScreenBoardWidgetTileDefRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface ScreenBoardWidgetTileDefRequestLogQuerySearch {
    query: string;
}

export interface ScreenBoardWidgetTileDefRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface ServiceLevelObjectiveQuery {
    /**
     * the sum of the `total` events
     * * Example Usage:
     */
    denominator: string;
    /**
     * the sum of all the `good` events
     */
    numerator: string;
}

export interface ServiceLevelObjectiveThreshold {
    /**
     * the objective's target `[0,100]`
     */
    target: number;
    /**
     * the string version to specify additional digits in the case of `99` but want 3 digits like `99.000` to display.
     */
    targetDisplay?: string;
    /**
     * the time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation](https://docs.datadoghq.com/api/v1/service-level-objectives/#create-a-slo-object) page. Available options to choose from are:
     * * `7d`
     * * `30d`
     * * `90d`
     */
    timeframe: string;
    /**
     * the objective's warning value `[0,100]`. This must be `> target` value.
     */
    warning?: number;
    /**
     * the string version to specify additional digits in the case of `99` but want 3 digits like `99.000` to display.
     */
    warningDisplay?: string;
}

export interface SyntheticsTestOptions {
    acceptSelfSigned?: boolean;
    allowInsecure?: boolean;
    followRedirects?: boolean;
    minFailureDuration?: number;
    minLocationFailed?: number;
    tickEvery: number;
}

export interface SyntheticsTestRequest {
    body?: string;
    host?: string;
    method?: string;
    port?: number;
    timeout?: number;
    url?: string;
}

export interface TimeBoardGraph {
    autoscale?: boolean;
    customUnit?: string;
    events?: string[];
    groups?: string[];
    includeNoMetricHosts?: boolean;
    includeUngroupedHosts?: boolean;
    markers?: outputs.TimeBoardGraphMarker[];
    nodeType?: string;
    precision?: string;
    requests: outputs.TimeBoardGraphRequest[];
    scopes?: string[];
    style?: {[key: string]: any};
    textAlign?: string;
    title: string;
    viz: string;
    yaxis?: {[key: string]: any};
}

export interface TimeBoardGraphMarker {
    label?: string;
    type: string;
    value: string;
}

export interface TimeBoardGraphRequest {
    aggregator?: string;
    apmQuery?: outputs.TimeBoardGraphRequestApmQuery;
    changeType?: string;
    compareTo?: string;
    conditionalFormats?: outputs.TimeBoardGraphRequestConditionalFormat[];
    extraCol?: string;
    increaseGood?: boolean;
    logQuery?: outputs.TimeBoardGraphRequestLogQuery;
    metadataJson?: string;
    orderBy?: string;
    orderDirection?: string;
    processQuery?: outputs.TimeBoardGraphRequestProcessQuery;
    q?: string;
    stacked?: boolean;
    style?: {[key: string]: any};
    type?: string;
}

export interface TimeBoardGraphRequestApmQuery {
    compute: outputs.TimeBoardGraphRequestApmQueryCompute;
    groupBies?: outputs.TimeBoardGraphRequestApmQueryGroupBy[];
    index: string;
    search?: outputs.TimeBoardGraphRequestApmQuerySearch;
}

export interface TimeBoardGraphRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface TimeBoardGraphRequestApmQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.TimeBoardGraphRequestApmQueryGroupBySort;
}

export interface TimeBoardGraphRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface TimeBoardGraphRequestApmQuerySearch {
    query: string;
}

export interface TimeBoardGraphRequestConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    palette?: string;
    value?: string;
}

export interface TimeBoardGraphRequestLogQuery {
    compute: outputs.TimeBoardGraphRequestLogQueryCompute;
    groupBies?: outputs.TimeBoardGraphRequestLogQueryGroupBy[];
    index: string;
    search?: outputs.TimeBoardGraphRequestLogQuerySearch;
}

export interface TimeBoardGraphRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface TimeBoardGraphRequestLogQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.TimeBoardGraphRequestLogQueryGroupBySort;
}

export interface TimeBoardGraphRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface TimeBoardGraphRequestLogQuerySearch {
    query: string;
}

export interface TimeBoardGraphRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface TimeBoardTemplateVariable {
    default?: string;
    name: string;
    prefix?: string;
}
export namespace pagerduty {
    export interface IntegrationService {
        /**
         * Your Service name associated service key in Pagerduty.
         */
        serviceKey: string;
        /**
         * Your Service name in PagerDuty.
         */
        serviceName: string;
    }
}

