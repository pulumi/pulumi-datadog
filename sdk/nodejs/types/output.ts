// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ChildOrganizationApiKey {
    key: string;
    /**
     * Name for Child Organization after creation.
     */
    name: string;
}

export interface ChildOrganizationApplicationKey {
    hash: string;
    /**
     * Name for Child Organization after creation.
     */
    name: string;
    owner: string;
}

export interface ChildOrganizationSetting {
    privateWidgetShare: boolean;
    samlAutocreateAccessRole: string;
    samlAutocreateUsersDomains: outputs.ChildOrganizationSettingSamlAutocreateUsersDomain[];
    samlCanBeEnabled: boolean;
    samlIdpEndpoint: string;
    samlIdpInitiatedLogins: outputs.ChildOrganizationSettingSamlIdpInitiatedLogin[];
    samlIdpMetadataUploaded: boolean;
    samlLoginUrl: string;
    samlStrictModes: outputs.ChildOrganizationSettingSamlStrictMode[];
    samls: outputs.ChildOrganizationSettingSaml[];
}

export interface ChildOrganizationSettingSaml {
    enabled: boolean;
}

export interface ChildOrganizationSettingSamlAutocreateUsersDomain {
    domains: string[];
    enabled: boolean;
}

export interface ChildOrganizationSettingSamlIdpInitiatedLogin {
    enabled: boolean;
}

export interface ChildOrganizationSettingSamlStrictMode {
    enabled: boolean;
}

export interface ChildOrganizationUser {
    accessRole: string;
    email: string;
    /**
     * Name for Child Organization after creation.
     */
    name: string;
}

export interface DashboardListDashItem {
    /**
     * The ID of the dashboard to add
     */
    dashId: string;
    /**
     * The type of this dashboard. Valid values are `customTimeboard`, `customScreenboard`, `integrationScreenboard`, `integrationTimeboard`, `hostTimeboard`.
     */
    type: string;
}

export interface DashboardTemplateVariable {
    /**
     * The list of values that the template variable drop-down is be limited to
     */
    availableValues?: string[];
    /**
     * The default value for the template variable on dashboard load. Cannot be used in conjunction with `defaults`. **Deprecated.** Use `defaults` instead.
     *
     * @deprecated Use `defaults` instead.
     */
    default?: string;
    /**
     * One or many default values for template variables on load. If more than one default is specified, they will be unioned together with `OR`. Cannot be used in conjunction with `default`.
     */
    defaults?: string[];
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The tag prefix associated with the variable. Only tags with this prefix appear in the variable dropdown.
     */
    prefix?: string;
}

export interface DashboardTemplateVariablePreset {
    /**
     * The name of the preset.
     */
    name?: string;
    /**
     * The template variable names and assumed values under the given preset
     */
    templateVariables?: outputs.DashboardTemplateVariablePresetTemplateVariable[];
}

export interface DashboardTemplateVariablePresetTemplateVariable {
    /**
     * The name of the variable.
     */
    name?: string;
    /**
     * @deprecated Use `values` instead.
     */
    value?: string;
    values?: string[];
}

export interface DashboardWidget {
    /**
     * The definition for a Alert Graph widget.
     */
    alertGraphDefinition?: outputs.DashboardWidgetAlertGraphDefinition;
    /**
     * The definition for a Alert Value widget.
     */
    alertValueDefinition?: outputs.DashboardWidgetAlertValueDefinition;
    /**
     * The definition for a Change widget.
     */
    changeDefinition?: outputs.DashboardWidgetChangeDefinition;
    /**
     * The definition for a Check Status widget.
     */
    checkStatusDefinition?: outputs.DashboardWidgetCheckStatusDefinition;
    /**
     * The definition for a Distribution widget.
     */
    distributionDefinition?: outputs.DashboardWidgetDistributionDefinition;
    /**
     * The definition for a Event Stream widget.
     */
    eventStreamDefinition?: outputs.DashboardWidgetEventStreamDefinition;
    /**
     * The definition for a Event Timeline widget.
     */
    eventTimelineDefinition?: outputs.DashboardWidgetEventTimelineDefinition;
    /**
     * The definition for a Free Text widget.
     */
    freeTextDefinition?: outputs.DashboardWidgetFreeTextDefinition;
    /**
     * The definition for a Geomap widget.
     */
    geomapDefinition?: outputs.DashboardWidgetGeomapDefinition;
    /**
     * The definition for a Group widget.
     */
    groupDefinition?: outputs.DashboardWidgetGroupDefinition;
    /**
     * The definition for a Heatmap widget.
     */
    heatmapDefinition?: outputs.DashboardWidgetHeatmapDefinition;
    /**
     * The definition for a Hostmap widget.
     */
    hostmapDefinition?: outputs.DashboardWidgetHostmapDefinition;
    /**
     * The ID of the widget.
     */
    id: number;
    /**
     * The definition for an Iframe widget.
     */
    iframeDefinition?: outputs.DashboardWidgetIframeDefinition;
    /**
     * The definition for an Image widget
     */
    imageDefinition?: outputs.DashboardWidgetImageDefinition;
    /**
     * The definition for a List Stream widget.
     */
    listStreamDefinition?: outputs.DashboardWidgetListStreamDefinition;
    /**
     * The definition for an Log Stream widget.
     */
    logStreamDefinition?: outputs.DashboardWidgetLogStreamDefinition;
    /**
     * The definition for an Manage Status widget.
     */
    manageStatusDefinition?: outputs.DashboardWidgetManageStatusDefinition;
    /**
     * The definition for a Note widget.
     */
    noteDefinition?: outputs.DashboardWidgetNoteDefinition;
    /**
     * The definition for a Query Table widget.
     */
    queryTableDefinition?: outputs.DashboardWidgetQueryTableDefinition;
    /**
     * The definition for a Query Value widget.
     */
    queryValueDefinition?: outputs.DashboardWidgetQueryValueDefinition;
    /**
     * The definition for a Run Workflow widget. **NOTE:** Currently in private beta. To request access, contact Support at support@datadoghq.com.
     */
    runWorkflowDefinition?: outputs.DashboardWidgetRunWorkflowDefinition;
    /**
     * The definition for a Scatterplot widget.
     */
    scatterplotDefinition?: outputs.DashboardWidgetScatterplotDefinition;
    /**
     * The definition for a Service Level Objective widget.
     */
    serviceLevelObjectiveDefinition?: outputs.DashboardWidgetServiceLevelObjectiveDefinition;
    /**
     * The definition for a Service Map widget.
     */
    servicemapDefinition?: outputs.DashboardWidgetServicemapDefinition;
    /**
     * The definition for an SLO (Service Level Objective) List widget.
     */
    sloListDefinition?: outputs.DashboardWidgetSloListDefinition;
    /**
     * The definition for a Sunburst widget.
     */
    sunburstDefinition?: outputs.DashboardWidgetSunburstDefinition;
    /**
     * The definition for a Timeseries widget.
     */
    timeseriesDefinition?: outputs.DashboardWidgetTimeseriesDefinition;
    /**
     * The definition for a Toplist widget.
     */
    toplistDefinition?: outputs.DashboardWidgetToplistDefinition;
    /**
     * The definition for a Topology Map widget.
     */
    topologyMapDefinition?: outputs.DashboardWidgetTopologyMapDefinition;
    /**
     * The definition for a Trace Service widget.
     */
    traceServiceDefinition?: outputs.DashboardWidgetTraceServiceDefinition;
    /**
     * The definition for a Treemap widget.
     */
    treemapDefinition?: outputs.DashboardWidgetTreemapDefinition;
    /**
     * The layout of the widget on a 'free' dashboard.
     */
    widgetLayout?: outputs.DashboardWidgetWidgetLayout;
}

export interface DashboardWidgetAlertGraphDefinition {
    alertId: string;
    liveSpan?: string;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    vizType: string;
}

export interface DashboardWidgetAlertValueDefinition {
    alertId: string;
    precision?: number;
    textAlign?: string;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    unit?: string;
}

export interface DashboardWidgetChangeDefinition {
    customLinks?: outputs.DashboardWidgetChangeDefinitionCustomLink[];
    liveSpan?: string;
    requests?: outputs.DashboardWidgetChangeDefinitionRequest[];
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetChangeDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetChangeDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetChangeDefinitionRequestApmQuery;
    changeType?: string;
    compareTo?: string;
    formulas?: outputs.DashboardWidgetChangeDefinitionRequestFormula[];
    increaseGood?: boolean;
    logQuery?: outputs.DashboardWidgetChangeDefinitionRequestLogQuery;
    orderBy?: string;
    orderDir?: string;
    processQuery?: outputs.DashboardWidgetChangeDefinitionRequestProcessQuery;
    q?: string;
    queries?: outputs.DashboardWidgetChangeDefinitionRequestQuery[];
    rumQuery?: outputs.DashboardWidgetChangeDefinitionRequestRumQuery;
    securityQuery?: outputs.DashboardWidgetChangeDefinitionRequestSecurityQuery;
    showPresent?: boolean;
}

export interface DashboardWidgetChangeDefinitionRequestApmQuery {
    computeQuery?: outputs.DashboardWidgetChangeDefinitionRequestApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetChangeDefinitionRequestApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetChangeDefinitionRequestApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortQuery;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetChangeDefinitionRequestFormula {
    alias?: string;
    cellDisplayMode?: string;
    conditionalFormats?: outputs.DashboardWidgetChangeDefinitionRequestFormulaConditionalFormat[];
    formulaExpression: string;
    limit?: outputs.DashboardWidgetChangeDefinitionRequestFormulaLimit;
    style?: outputs.DashboardWidgetChangeDefinitionRequestFormulaStyle;
}

export interface DashboardWidgetChangeDefinitionRequestFormulaConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetChangeDefinitionRequestFormulaLimit {
    count?: number;
    order?: string;
}

export interface DashboardWidgetChangeDefinitionRequestFormulaStyle {
    palette?: string;
    paletteIndex?: number;
}

export interface DashboardWidgetChangeDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetChangeDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetChangeDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetChangeDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetChangeDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetChangeDefinitionRequestQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetChangeDefinitionRequestQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetChangeDefinitionRequestQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetChangeDefinitionRequestQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetChangeDefinitionRequestQueryProcessQuery;
}

export interface DashboardWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetChangeDefinitionRequestQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetChangeDefinitionRequestQueryEventQuery {
    computes: outputs.DashboardWidgetChangeDefinitionRequestQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetChangeDefinitionRequestQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetChangeDefinitionRequestQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBySort;
}

export interface DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetChangeDefinitionRequestQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetChangeDefinitionRequestQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetChangeDefinitionRequestQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetChangeDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetChangeDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetChangeDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetChangeDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetChangeDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetChangeDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetChangeDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetChangeDefinitionRequestSecurityQuery {
    computeQuery?: outputs.DashboardWidgetChangeDefinitionRequestSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetChangeDefinitionRequestSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetChangeDefinitionRequestSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetChangeDefinitionRequestSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetCheckStatusDefinition {
    check: string;
    group?: string;
    groupBies?: string[];
    grouping: string;
    liveSpan?: string;
    /**
     * A list of tags assigned to the Dashboard. Only team names of the form `team:<name>` are supported.
     */
    tags?: string[];
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetDistributionDefinition {
    legendSize?: string;
    liveSpan?: string;
    requests?: outputs.DashboardWidgetDistributionDefinitionRequest[];
    showLegend?: boolean;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetDistributionDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetDistributionDefinitionRequestApmQuery;
    apmStatsQuery?: outputs.DashboardWidgetDistributionDefinitionRequestApmStatsQuery;
    logQuery?: outputs.DashboardWidgetDistributionDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetDistributionDefinitionRequestProcessQuery;
    q?: string;
    rumQuery?: outputs.DashboardWidgetDistributionDefinitionRequestRumQuery;
    securityQuery?: outputs.DashboardWidgetDistributionDefinitionRequestSecurityQuery;
    style?: outputs.DashboardWidgetDistributionDefinitionRequestStyle;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQuery {
    computeQuery?: outputs.DashboardWidgetDistributionDefinitionRequestApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetDistributionDefinitionRequestApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetDistributionDefinitionRequestApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetDistributionDefinitionRequestApmStatsQuery {
    columns?: outputs.DashboardWidgetDistributionDefinitionRequestApmStatsQueryColumn[];
    env: string;
    name: string;
    primaryTag: string;
    resource?: string;
    rowType: string;
    service: string;
}

export interface DashboardWidgetDistributionDefinitionRequestApmStatsQueryColumn {
    alias?: string;
    cellDisplayMode?: string;
    name: string;
    order?: string;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetDistributionDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetDistributionDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetDistributionDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetDistributionDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetDistributionDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetDistributionDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetDistributionDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetDistributionDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetDistributionDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetDistributionDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetDistributionDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetDistributionDefinitionRequestSecurityQuery {
    computeQuery?: outputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetDistributionDefinitionRequestStyle {
    palette?: string;
}

export interface DashboardWidgetEventStreamDefinition {
    eventSize?: string;
    liveSpan?: string;
    query: string;
    tagsExecution?: string;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetEventTimelineDefinition {
    liveSpan?: string;
    query: string;
    tagsExecution?: string;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetFreeTextDefinition {
    color?: string;
    fontSize?: string;
    text: string;
    textAlign?: string;
}

export interface DashboardWidgetGeomapDefinition {
    customLinks?: outputs.DashboardWidgetGeomapDefinitionCustomLink[];
    liveSpan?: string;
    requests?: outputs.DashboardWidgetGeomapDefinitionRequest[];
    style?: outputs.DashboardWidgetGeomapDefinitionStyle;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    view: outputs.DashboardWidgetGeomapDefinitionView;
}

export interface DashboardWidgetGeomapDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetGeomapDefinitionRequest {
    formulas?: outputs.DashboardWidgetGeomapDefinitionRequestFormula[];
    logQuery?: outputs.DashboardWidgetGeomapDefinitionRequestLogQuery;
    q?: string;
    queries?: outputs.DashboardWidgetGeomapDefinitionRequestQuery[];
    rumQuery?: outputs.DashboardWidgetGeomapDefinitionRequestRumQuery;
}

export interface DashboardWidgetGeomapDefinitionRequestFormula {
    alias?: string;
    cellDisplayMode?: string;
    conditionalFormats?: outputs.DashboardWidgetGeomapDefinitionRequestFormulaConditionalFormat[];
    formulaExpression: string;
    limit?: outputs.DashboardWidgetGeomapDefinitionRequestFormulaLimit;
    style?: outputs.DashboardWidgetGeomapDefinitionRequestFormulaStyle;
}

export interface DashboardWidgetGeomapDefinitionRequestFormulaConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetGeomapDefinitionRequestFormulaLimit {
    count?: number;
    order?: string;
}

export interface DashboardWidgetGeomapDefinitionRequestFormulaStyle {
    palette?: string;
    paletteIndex?: number;
}

export interface DashboardWidgetGeomapDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetGeomapDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGeomapDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGeomapDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGeomapDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGeomapDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGeomapDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGeomapDefinitionRequestQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetGeomapDefinitionRequestQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetGeomapDefinitionRequestQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetGeomapDefinitionRequestQueryProcessQuery;
}

export interface DashboardWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGeomapDefinitionRequestQueryEventQuery {
    computes: outputs.DashboardWidgetGeomapDefinitionRequestQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetGeomapDefinitionRequestQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetGeomapDefinitionRequestQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort;
}

export interface DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetGeomapDefinitionRequestQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetGeomapDefinitionRequestQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetGeomapDefinitionRequestQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetGeomapDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetGeomapDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGeomapDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGeomapDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGeomapDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGeomapDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGeomapDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGeomapDefinitionStyle {
    palette: string;
    paletteFlip: boolean;
}

export interface DashboardWidgetGeomapDefinitionView {
    focus: string;
}

export interface DashboardWidgetGroupDefinition {
    backgroundColor?: string;
    bannerImg?: string;
    /**
     * The layout type of the dashboard. Valid values are `ordered`, `free`.
     */
    layoutType: string;
    showTitle?: boolean;
    /**
     * The title of the dashboard.
     */
    title?: string;
    /**
     * The list of widgets to display on the dashboard.
     */
    widgets?: outputs.DashboardWidgetGroupDefinitionWidget[];
}

export interface DashboardWidgetGroupDefinitionWidget {
    /**
     * The definition for a Alert Graph widget.
     */
    alertGraphDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetAlertGraphDefinition;
    /**
     * The definition for a Alert Value widget.
     */
    alertValueDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetAlertValueDefinition;
    /**
     * The definition for a Change widget.
     */
    changeDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinition;
    /**
     * The definition for a Check Status widget.
     */
    checkStatusDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetCheckStatusDefinition;
    /**
     * The definition for a Distribution widget.
     */
    distributionDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinition;
    /**
     * The definition for a Event Stream widget.
     */
    eventStreamDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetEventStreamDefinition;
    /**
     * The definition for a Event Timeline widget.
     */
    eventTimelineDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetEventTimelineDefinition;
    /**
     * The definition for a Free Text widget.
     */
    freeTextDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetFreeTextDefinition;
    /**
     * The definition for a Geomap widget.
     */
    geomapDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinition;
    /**
     * The definition for a Heatmap widget.
     */
    heatmapDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinition;
    /**
     * The definition for a Hostmap widget.
     */
    hostmapDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinition;
    /**
     * The ID of the widget.
     */
    id: number;
    /**
     * The definition for an Iframe widget.
     */
    iframeDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetIframeDefinition;
    /**
     * The definition for an Image widget
     */
    imageDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetImageDefinition;
    /**
     * The definition for a List Stream widget.
     */
    listStreamDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetListStreamDefinition;
    /**
     * The definition for an Log Stream widget.
     */
    logStreamDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetLogStreamDefinition;
    /**
     * The definition for an Manage Status widget.
     */
    manageStatusDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetManageStatusDefinition;
    /**
     * The definition for a Note widget.
     */
    noteDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetNoteDefinition;
    /**
     * The definition for a Query Table widget.
     */
    queryTableDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinition;
    /**
     * The definition for a Query Value widget.
     */
    queryValueDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinition;
    /**
     * The definition for a Run Workflow widget. **NOTE:** Currently in private beta. To request access, contact Support at support@datadoghq.com.
     */
    runWorkflowDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinition;
    /**
     * The definition for a Scatterplot widget.
     */
    scatterplotDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinition;
    /**
     * The definition for a Service Level Objective widget.
     */
    serviceLevelObjectiveDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition;
    /**
     * The definition for a Service Map widget.
     */
    servicemapDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetServicemapDefinition;
    /**
     * The definition for an SLO (Service Level Objective) List widget.
     */
    sloListDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetSloListDefinition;
    /**
     * The definition for a Sunburst widget.
     */
    sunburstDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinition;
    /**
     * The definition for a Timeseries widget.
     */
    timeseriesDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinition;
    /**
     * The definition for a Toplist widget.
     */
    toplistDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinition;
    /**
     * The definition for a Topology Map widget.
     */
    topologyMapDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetTopologyMapDefinition;
    /**
     * The definition for a Trace Service widget.
     */
    traceServiceDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetTraceServiceDefinition;
    /**
     * The definition for a Treemap widget.
     */
    treemapDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetTreemapDefinition;
    /**
     * The layout of the widget on a 'free' dashboard.
     */
    widgetLayout?: outputs.DashboardWidgetGroupDefinitionWidgetWidgetLayout;
}

export interface DashboardWidgetGroupDefinitionWidgetAlertGraphDefinition {
    alertId: string;
    liveSpan?: string;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    vizType: string;
}

export interface DashboardWidgetGroupDefinitionWidgetAlertValueDefinition {
    alertId: string;
    precision?: number;
    textAlign?: string;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    unit?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinition {
    customLinks?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLink[];
    liveSpan?: string;
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequest[];
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery;
    changeType?: string;
    compareTo?: string;
    formulas?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormula[];
    increaseGood?: boolean;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery;
    orderBy?: string;
    orderDir?: string;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery;
    q?: string;
    queries?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQuery[];
    rumQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery;
    securityQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery;
    showPresent?: boolean;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormula {
    alias?: string;
    cellDisplayMode?: string;
    conditionalFormats?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaConditionalFormat[];
    formulaExpression: string;
    limit?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit;
    style?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit {
    count?: number;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaStyle {
    palette?: string;
    paletteIndex?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery {
    computes: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetCheckStatusDefinition {
    check: string;
    group?: string;
    groupBies?: string[];
    grouping: string;
    liveSpan?: string;
    /**
     * A list of tags assigned to the Dashboard. Only team names of the form `team:<name>` are supported.
     */
    tags?: string[];
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinition {
    legendSize?: string;
    liveSpan?: string;
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequest[];
    showLegend?: boolean;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery;
    apmStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmStatsQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery;
    q?: string;
    rumQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery;
    securityQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery;
    style?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmStatsQuery {
    columns?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmStatsQueryColumn[];
    env: string;
    name: string;
    primaryTag: string;
    resource?: string;
    rowType: string;
    service: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmStatsQueryColumn {
    alias?: string;
    cellDisplayMode?: string;
    name: string;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle {
    palette?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetEventStreamDefinition {
    eventSize?: string;
    liveSpan?: string;
    query: string;
    tagsExecution?: string;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetEventTimelineDefinition {
    liveSpan?: string;
    query: string;
    tagsExecution?: string;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetFreeTextDefinition {
    color?: string;
    fontSize?: string;
    text: string;
    textAlign?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinition {
    customLinks?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionCustomLink[];
    liveSpan?: string;
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequest[];
    style?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyle;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    view: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionView;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequest {
    formulas?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormula[];
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery;
    q?: string;
    queries?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQuery[];
    rumQuery?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormula {
    alias?: string;
    cellDisplayMode?: string;
    conditionalFormats?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaConditionalFormat[];
    formulaExpression: string;
    limit?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit;
    style?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit {
    count?: number;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaStyle {
    palette?: string;
    paletteIndex?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery {
    computes: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyle {
    palette: string;
    paletteFlip: boolean;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionView {
    focus: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinition {
    customLinks?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLink[];
    events?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEvent[];
    legendSize?: string;
    liveSpan?: string;
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequest[];
    showLegend?: boolean;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    yaxis?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEvent {
    q: string;
    tagsExecution?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery;
    q?: string;
    rumQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery;
    securityQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery;
    style?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle {
    palette?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinition {
    customLinks?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLink[];
    groups?: string[];
    noGroupHosts?: boolean;
    noMetricHosts?: boolean;
    nodeType?: string;
    request?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequest;
    scopes?: string[];
    style?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyle;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequest {
    fills?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFill[];
    sizes?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSize[];
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFill {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery;
    q?: string;
    rumQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery;
    securityQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSize {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery;
    q?: string;
    rumQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery;
    securityQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyle {
    fillMax?: string;
    fillMin?: string;
    palette?: string;
    paletteFlip?: boolean;
}

export interface DashboardWidgetGroupDefinitionWidgetIframeDefinition {
    /**
     * The URL of the dashboard.
     */
    url: string;
}

export interface DashboardWidgetGroupDefinitionWidgetImageDefinition {
    hasBackground?: boolean;
    hasBorder?: boolean;
    horizontalAlign?: string;
    margin?: string;
    sizing?: string;
    /**
     * The URL of the dashboard.
     */
    url: string;
    urlDarkTheme?: string;
    verticalAlign?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetListStreamDefinition {
    requests: outputs.DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequest[];
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequest {
    columns: outputs.DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestColumn[];
    query: outputs.DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestQuery;
    responseFormat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestColumn {
    field: string;
    width: string;
}

export interface DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestQuery {
    dataSource: string;
    eventSize?: string;
    indexes?: string[];
    queryString?: string;
    storage?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetLogStreamDefinition {
    columns?: string[];
    indexes?: string[];
    liveSpan?: string;
    messageDisplay?: string;
    query?: string;
    showDateColumn?: boolean;
    showMessageColumn?: boolean;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSort;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSort {
    column: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetManageStatusDefinition {
    colorPreference?: string;
    displayFormat?: string;
    hideZeroCounts?: boolean;
    query: string;
    showLastTriggered?: boolean;
    showPriority?: boolean;
    sort?: string;
    summaryType?: string;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetNoteDefinition {
    backgroundColor?: string;
    content: string;
    fontSize?: string;
    hasPadding?: boolean;
    showTick?: boolean;
    textAlign?: string;
    tickEdge?: string;
    tickPos?: string;
    verticalAlign?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinition {
    customLinks?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLink[];
    hasSearchBar?: string;
    liveSpan?: string;
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequest[];
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequest {
    aggregator?: string;
    alias?: string;
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery;
    apmStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery;
    cellDisplayModes?: string[];
    conditionalFormats?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormat[];
    formulas?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormula[];
    limit?: number;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery;
    order?: string;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery;
    q?: string;
    queries?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQuery[];
    rumQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery;
    securityQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery {
    columns?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumn[];
    env: string;
    name: string;
    primaryTag: string;
    resource?: string;
    rowType: string;
    service: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumn {
    alias?: string;
    cellDisplayMode?: string;
    name: string;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormula {
    alias?: string;
    cellDisplayMode?: string;
    conditionalFormats?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaConditionalFormat[];
    formulaExpression: string;
    limit?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit;
    style?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit {
    count?: number;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaStyle {
    palette?: string;
    paletteIndex?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery {
    computes: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinition {
    autoscale?: boolean;
    customLinks?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLink[];
    customUnit?: string;
    liveSpan?: string;
    precision?: number;
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequest[];
    textAlign?: string;
    timeseriesBackground?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackground;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequest {
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery;
    auditQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery;
    conditionalFormats?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormat[];
    formulas?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormula[];
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery;
    q?: string;
    queries?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQuery[];
    rumQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery;
    securityQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormula {
    alias?: string;
    cellDisplayMode?: string;
    conditionalFormats?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaConditionalFormat[];
    formulaExpression: string;
    limit?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit;
    style?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit {
    count?: number;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaStyle {
    palette?: string;
    paletteIndex?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery {
    computes: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackground {
    type: string;
    yaxis?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundYaxis;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundYaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinition {
    customLinks?: outputs.DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionCustomLink[];
    inputs?: outputs.DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionInput[];
    liveSpan?: string;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    workflowId: string;
}

export interface DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionInput {
    name: string;
    value: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinition {
    colorByGroups?: string[];
    customLinks?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLink[];
    liveSpan?: string;
    request?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequest;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    xaxis?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis;
    yaxis?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequest {
    scatterplotTables?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTable[];
    xes?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestX[];
    ys?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestY[];
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTable {
    formulas?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableFormula[];
    queries?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQuery[];
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableFormula {
    alias?: string;
    dimension: string;
    formulaExpression: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery {
    computes: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestX {
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery;
    q?: string;
    rumQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery;
    securityQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestY {
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery;
    q?: string;
    rumQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery;
    securityQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition {
    globalTimeTarget?: string;
    showErrorBudget?: boolean;
    sloId: string;
    timeWindows: string[];
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    viewMode: string;
    viewType: string;
}

export interface DashboardWidgetGroupDefinitionWidgetServicemapDefinition {
    customLinks?: outputs.DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLink[];
    filters: string[];
    service: string;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSloListDefinition {
    request: outputs.DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequest;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequest {
    query: outputs.DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestQuery;
    requestType: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestQuery {
    limit?: number;
    queryString: string;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestQuerySort;
}

export interface DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestQuerySort {
    column: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinition {
    customLinks?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionCustomLink[];
    hideTotal?: boolean;
    legendInline?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline;
    legendTable?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable;
    liveSpan?: string;
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequest[];
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline {
    hidePercent?: boolean;
    hideValue?: boolean;
    type: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable {
    type: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery;
    auditQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery;
    formulas?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormula[];
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery;
    networkQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery;
    q?: string;
    queries?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQuery[];
    rumQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery;
    securityQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormula {
    alias?: string;
    cellDisplayMode?: string;
    conditionalFormats?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaConditionalFormat[];
    formulaExpression: string;
    limit?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit;
    style?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit {
    count?: number;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaStyle {
    palette?: string;
    paletteIndex?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery {
    computes: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinition {
    customLinks?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLink[];
    events?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEvent[];
    legendColumns?: string[];
    legendLayout?: string;
    legendSize?: string;
    liveSpan?: string;
    markers?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarker[];
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequest[];
    rightYaxis?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis;
    showLegend?: boolean;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    yaxis?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEvent {
    q: string;
    tagsExecution?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarker {
    displayType?: string;
    label?: string;
    value: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery;
    auditQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery;
    displayType?: string;
    formulas?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormula[];
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery;
    metadatas?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadata[];
    networkQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery;
    onRightYaxis?: boolean;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery;
    q?: string;
    queries?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQuery[];
    rumQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery;
    securityQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery;
    style?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormula {
    alias?: string;
    cellDisplayMode?: string;
    conditionalFormats?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaConditionalFormat[];
    formulaExpression: string;
    limit?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit;
    style?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit {
    count?: number;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaStyle {
    palette?: string;
    paletteIndex?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadata {
    aliasName?: string;
    expression: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery {
    computes: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle {
    lineType?: string;
    lineWidth?: string;
    palette?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinition {
    customLinks?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLink[];
    liveSpan?: string;
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequest[];
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery;
    auditQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery;
    conditionalFormats?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormat[];
    formulas?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormula[];
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery;
    q?: string;
    queries?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQuery[];
    rumQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery;
    securityQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery;
    style?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormula {
    alias?: string;
    cellDisplayMode?: string;
    conditionalFormats?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaConditionalFormat[];
    formulaExpression: string;
    limit?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit;
    style?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit {
    count?: number;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaStyle {
    palette?: string;
    paletteIndex?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery {
    computes: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery {
    computeQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle {
    palette?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTopologyMapDefinition {
    customLinks?: outputs.DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionCustomLink[];
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionRequest[];
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionRequest {
    queries: outputs.DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionRequestQuery[];
    requestType: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionRequestQuery {
    dataSource: string;
    filters: string[];
    service: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTraceServiceDefinition {
    displayFormat?: string;
    env: string;
    liveSpan?: string;
    service: string;
    showBreakdown?: boolean;
    showDistribution?: boolean;
    showErrors?: boolean;
    showHits?: boolean;
    showLatency?: boolean;
    showResourceList?: boolean;
    sizeFormat?: string;
    spanName: string;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTreemapDefinition {
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequest[];
    /**
     * The title of the dashboard.
     */
    title?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequest {
    formulas?: outputs.DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormula[];
    queries?: outputs.DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQuery[];
}

export interface DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormula {
    alias?: string;
    cellDisplayMode?: string;
    conditionalFormats?: outputs.DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaConditionalFormat[];
    formulaExpression: string;
    limit?: outputs.DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaLimit;
    style?: outputs.DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaLimit {
    count?: number;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaStyle {
    palette?: string;
    paletteIndex?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryProcessQuery;
}

export interface DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQuery {
    computes: outputs.DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetWidgetLayout {
    height: number;
    isColumnBreak?: boolean;
    width: number;
    x: number;
    y: number;
}

export interface DashboardWidgetHeatmapDefinition {
    customLinks?: outputs.DashboardWidgetHeatmapDefinitionCustomLink[];
    events?: outputs.DashboardWidgetHeatmapDefinitionEvent[];
    legendSize?: string;
    liveSpan?: string;
    requests?: outputs.DashboardWidgetHeatmapDefinitionRequest[];
    showLegend?: boolean;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    yaxis?: outputs.DashboardWidgetHeatmapDefinitionYaxis;
}

export interface DashboardWidgetHeatmapDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetHeatmapDefinitionEvent {
    q: string;
    tagsExecution?: string;
}

export interface DashboardWidgetHeatmapDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestApmQuery;
    logQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestProcessQuery;
    q?: string;
    rumQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestRumQuery;
    securityQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestSecurityQuery;
    style?: outputs.DashboardWidgetHeatmapDefinitionRequestStyle;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQuery {
    computeQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHeatmapDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetHeatmapDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHeatmapDefinitionRequestSecurityQuery {
    computeQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHeatmapDefinitionRequestStyle {
    palette?: string;
}

export interface DashboardWidgetHeatmapDefinitionYaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetHostmapDefinition {
    customLinks?: outputs.DashboardWidgetHostmapDefinitionCustomLink[];
    groups?: string[];
    noGroupHosts?: boolean;
    noMetricHosts?: boolean;
    nodeType?: string;
    request?: outputs.DashboardWidgetHostmapDefinitionRequest;
    scopes?: string[];
    style?: outputs.DashboardWidgetHostmapDefinitionStyle;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetHostmapDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetHostmapDefinitionRequest {
    fills?: outputs.DashboardWidgetHostmapDefinitionRequestFill[];
    sizes?: outputs.DashboardWidgetHostmapDefinitionRequestSize[];
}

export interface DashboardWidgetHostmapDefinitionRequestFill {
    apmQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillApmQuery;
    logQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillLogQuery;
    processQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillProcessQuery;
    q?: string;
    rumQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillRumQuery;
    securityQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQuery;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQuery {
    computeQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQuery {
    computeQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestFillProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillRumQuery {
    computeQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery;
}

export interface DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestFillSecurityQuery {
    computeQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestSize {
    apmQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQuery;
    logQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQuery;
    processQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeProcessQuery;
    q?: string;
    rumQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeRumQuery;
    securityQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQuery;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQuery {
    computeQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQuery {
    computeQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeRumQuery {
    computeQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeSecurityQuery {
    computeQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionStyle {
    fillMax?: string;
    fillMin?: string;
    palette?: string;
    paletteFlip?: boolean;
}

export interface DashboardWidgetIframeDefinition {
    /**
     * The URL of the dashboard.
     */
    url: string;
}

export interface DashboardWidgetImageDefinition {
    hasBackground?: boolean;
    hasBorder?: boolean;
    horizontalAlign?: string;
    margin?: string;
    sizing?: string;
    /**
     * The URL of the dashboard.
     */
    url: string;
    urlDarkTheme?: string;
    verticalAlign?: string;
}

export interface DashboardWidgetListStreamDefinition {
    requests: outputs.DashboardWidgetListStreamDefinitionRequest[];
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetListStreamDefinitionRequest {
    columns: outputs.DashboardWidgetListStreamDefinitionRequestColumn[];
    query: outputs.DashboardWidgetListStreamDefinitionRequestQuery;
    responseFormat: string;
}

export interface DashboardWidgetListStreamDefinitionRequestColumn {
    field: string;
    width: string;
}

export interface DashboardWidgetListStreamDefinitionRequestQuery {
    dataSource: string;
    eventSize?: string;
    indexes?: string[];
    queryString?: string;
    storage?: string;
}

export interface DashboardWidgetLogStreamDefinition {
    columns?: string[];
    indexes?: string[];
    liveSpan?: string;
    messageDisplay?: string;
    query?: string;
    showDateColumn?: boolean;
    showMessageColumn?: boolean;
    sort?: outputs.DashboardWidgetLogStreamDefinitionSort;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetLogStreamDefinitionSort {
    column: string;
    order: string;
}

export interface DashboardWidgetManageStatusDefinition {
    colorPreference?: string;
    displayFormat?: string;
    hideZeroCounts?: boolean;
    query: string;
    showLastTriggered?: boolean;
    showPriority?: boolean;
    sort?: string;
    summaryType?: string;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetNoteDefinition {
    backgroundColor?: string;
    content: string;
    fontSize?: string;
    hasPadding?: boolean;
    showTick?: boolean;
    textAlign?: string;
    tickEdge?: string;
    tickPos?: string;
    verticalAlign?: string;
}

export interface DashboardWidgetQueryTableDefinition {
    customLinks?: outputs.DashboardWidgetQueryTableDefinitionCustomLink[];
    hasSearchBar?: string;
    liveSpan?: string;
    requests?: outputs.DashboardWidgetQueryTableDefinitionRequest[];
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetQueryTableDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetQueryTableDefinitionRequest {
    aggregator?: string;
    alias?: string;
    apmQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestApmQuery;
    apmStatsQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestApmStatsQuery;
    cellDisplayModes?: string[];
    conditionalFormats?: outputs.DashboardWidgetQueryTableDefinitionRequestConditionalFormat[];
    formulas?: outputs.DashboardWidgetQueryTableDefinitionRequestFormula[];
    limit?: number;
    logQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestLogQuery;
    order?: string;
    processQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestProcessQuery;
    q?: string;
    queries?: outputs.DashboardWidgetQueryTableDefinitionRequestQuery[];
    rumQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestRumQuery;
    securityQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestSecurityQuery;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQuery {
    computeQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmStatsQuery {
    columns?: outputs.DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumn[];
    env: string;
    name: string;
    primaryTag: string;
    resource?: string;
    rowType: string;
    service: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumn {
    alias?: string;
    cellDisplayMode?: string;
    name: string;
    order?: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetQueryTableDefinitionRequestFormula {
    alias?: string;
    cellDisplayMode?: string;
    conditionalFormats?: outputs.DashboardWidgetQueryTableDefinitionRequestFormulaConditionalFormat[];
    formulaExpression: string;
    limit?: outputs.DashboardWidgetQueryTableDefinitionRequestFormulaLimit;
    style?: outputs.DashboardWidgetQueryTableDefinitionRequestFormulaStyle;
}

export interface DashboardWidgetQueryTableDefinitionRequestFormulaConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetQueryTableDefinitionRequestFormulaLimit {
    count?: number;
    order?: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestFormulaStyle {
    palette?: string;
    paletteIndex?: number;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryTableDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestQueryProcessQuery;
}

export interface DashboardWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestQueryEventQuery {
    computes: outputs.DashboardWidgetQueryTableDefinitionRequestQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetQueryTableDefinitionRequestQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort;
}

export interface DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetQueryTableDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryTableDefinitionRequestSecurityQuery {
    computeQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryValueDefinition {
    autoscale?: boolean;
    customLinks?: outputs.DashboardWidgetQueryValueDefinitionCustomLink[];
    customUnit?: string;
    liveSpan?: string;
    precision?: number;
    requests?: outputs.DashboardWidgetQueryValueDefinitionRequest[];
    textAlign?: string;
    timeseriesBackground?: outputs.DashboardWidgetQueryValueDefinitionTimeseriesBackground;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetQueryValueDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetQueryValueDefinitionRequest {
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestApmQuery;
    auditQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestAuditQuery;
    conditionalFormats?: outputs.DashboardWidgetQueryValueDefinitionRequestConditionalFormat[];
    formulas?: outputs.DashboardWidgetQueryValueDefinitionRequestFormula[];
    logQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestProcessQuery;
    q?: string;
    queries?: outputs.DashboardWidgetQueryValueDefinitionRequestQuery[];
    rumQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestRumQuery;
    securityQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestSecurityQuery;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQuery {
    computeQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestAuditQuery {
    computeQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestAuditQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetQueryValueDefinitionRequestAuditQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestAuditQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery;
}

export interface DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestAuditQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestFormula {
    alias?: string;
    cellDisplayMode?: string;
    conditionalFormats?: outputs.DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormat[];
    formulaExpression: string;
    limit?: outputs.DashboardWidgetQueryValueDefinitionRequestFormulaLimit;
    style?: outputs.DashboardWidgetQueryValueDefinitionRequestFormulaStyle;
}

export interface DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestFormulaLimit {
    count?: number;
    order?: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestFormulaStyle {
    palette?: string;
    paletteIndex?: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestQueryProcessQuery;
}

export interface DashboardWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestQueryEventQuery {
    computes: outputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort;
}

export interface DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetQueryValueDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestSecurityQuery {
    computeQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryValueDefinitionTimeseriesBackground {
    type: string;
    yaxis?: outputs.DashboardWidgetQueryValueDefinitionTimeseriesBackgroundYaxis;
}

export interface DashboardWidgetQueryValueDefinitionTimeseriesBackgroundYaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetRunWorkflowDefinition {
    customLinks?: outputs.DashboardWidgetRunWorkflowDefinitionCustomLink[];
    inputs?: outputs.DashboardWidgetRunWorkflowDefinitionInput[];
    liveSpan?: string;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    workflowId: string;
}

export interface DashboardWidgetRunWorkflowDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetRunWorkflowDefinitionInput {
    name: string;
    value: string;
}

export interface DashboardWidgetScatterplotDefinition {
    colorByGroups?: string[];
    customLinks?: outputs.DashboardWidgetScatterplotDefinitionCustomLink[];
    liveSpan?: string;
    request?: outputs.DashboardWidgetScatterplotDefinitionRequest;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    xaxis?: outputs.DashboardWidgetScatterplotDefinitionXaxis;
    yaxis?: outputs.DashboardWidgetScatterplotDefinitionYaxis;
}

export interface DashboardWidgetScatterplotDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequest {
    scatterplotTables?: outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTable[];
    xes?: outputs.DashboardWidgetScatterplotDefinitionRequestX[];
    ys?: outputs.DashboardWidgetScatterplotDefinitionRequestY[];
}

export interface DashboardWidgetScatterplotDefinitionRequestScatterplotTable {
    formulas?: outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableFormula[];
    queries?: outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuery[];
}

export interface DashboardWidgetScatterplotDefinitionRequestScatterplotTableFormula {
    alias?: string;
    dimension: string;
    formulaExpression: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery;
}

export interface DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery {
    computes: outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort;
}

export interface DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestX {
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXApmQuery;
    logQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXLogQuery;
    processQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXProcessQuery;
    q?: string;
    rumQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXRumQuery;
    securityQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQuery;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQuery {
    computeQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQuery {
    computeQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestXProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXRumQuery {
    computeQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery;
}

export interface DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestXSecurityQuery {
    computeQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestY {
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYApmQuery;
    logQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYLogQuery;
    processQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYProcessQuery;
    q?: string;
    rumQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYRumQuery;
    securityQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQuery;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQuery {
    computeQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQuery {
    computeQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestYProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYRumQuery {
    computeQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery;
}

export interface DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestYSecurityQuery {
    computeQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionXaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetScatterplotDefinitionYaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetServiceLevelObjectiveDefinition {
    globalTimeTarget?: string;
    showErrorBudget?: boolean;
    sloId: string;
    timeWindows: string[];
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    viewMode: string;
    viewType: string;
}

export interface DashboardWidgetServicemapDefinition {
    customLinks?: outputs.DashboardWidgetServicemapDefinitionCustomLink[];
    filters: string[];
    service: string;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetServicemapDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetSloListDefinition {
    request: outputs.DashboardWidgetSloListDefinitionRequest;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetSloListDefinitionRequest {
    query: outputs.DashboardWidgetSloListDefinitionRequestQuery;
    requestType: string;
}

export interface DashboardWidgetSloListDefinitionRequestQuery {
    limit?: number;
    queryString: string;
    sort?: outputs.DashboardWidgetSloListDefinitionRequestQuerySort;
}

export interface DashboardWidgetSloListDefinitionRequestQuerySort {
    column: string;
    order: string;
}

export interface DashboardWidgetSunburstDefinition {
    customLinks?: outputs.DashboardWidgetSunburstDefinitionCustomLink[];
    hideTotal?: boolean;
    legendInline?: outputs.DashboardWidgetSunburstDefinitionLegendInline;
    legendTable?: outputs.DashboardWidgetSunburstDefinitionLegendTable;
    liveSpan?: string;
    requests?: outputs.DashboardWidgetSunburstDefinitionRequest[];
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetSunburstDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetSunburstDefinitionLegendInline {
    hidePercent?: boolean;
    hideValue?: boolean;
    type: string;
}

export interface DashboardWidgetSunburstDefinitionLegendTable {
    type: string;
}

export interface DashboardWidgetSunburstDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetSunburstDefinitionRequestApmQuery;
    auditQuery?: outputs.DashboardWidgetSunburstDefinitionRequestAuditQuery;
    formulas?: outputs.DashboardWidgetSunburstDefinitionRequestFormula[];
    logQuery?: outputs.DashboardWidgetSunburstDefinitionRequestLogQuery;
    networkQuery?: outputs.DashboardWidgetSunburstDefinitionRequestNetworkQuery;
    processQuery?: outputs.DashboardWidgetSunburstDefinitionRequestProcessQuery;
    q?: string;
    queries?: outputs.DashboardWidgetSunburstDefinitionRequestQuery[];
    rumQuery?: outputs.DashboardWidgetSunburstDefinitionRequestRumQuery;
    securityQuery?: outputs.DashboardWidgetSunburstDefinitionRequestSecurityQuery;
}

export interface DashboardWidgetSunburstDefinitionRequestApmQuery {
    computeQuery?: outputs.DashboardWidgetSunburstDefinitionRequestApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetSunburstDefinitionRequestApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetSunburstDefinitionRequestApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetSunburstDefinitionRequestApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetSunburstDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery;
}

export interface DashboardWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetSunburstDefinitionRequestApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetSunburstDefinitionRequestAuditQuery {
    computeQuery?: outputs.DashboardWidgetSunburstDefinitionRequestAuditQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetSunburstDefinitionRequestAuditQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetSunburstDefinitionRequestAuditQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery;
}

export interface DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetSunburstDefinitionRequestAuditQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetSunburstDefinitionRequestFormula {
    alias?: string;
    cellDisplayMode?: string;
    conditionalFormats?: outputs.DashboardWidgetSunburstDefinitionRequestFormulaConditionalFormat[];
    formulaExpression: string;
    limit?: outputs.DashboardWidgetSunburstDefinitionRequestFormulaLimit;
    style?: outputs.DashboardWidgetSunburstDefinitionRequestFormulaStyle;
}

export interface DashboardWidgetSunburstDefinitionRequestFormulaConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetSunburstDefinitionRequestFormulaLimit {
    count?: number;
    order?: string;
}

export interface DashboardWidgetSunburstDefinitionRequestFormulaStyle {
    palette?: string;
    paletteIndex?: number;
}

export interface DashboardWidgetSunburstDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetSunburstDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetSunburstDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetSunburstDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetSunburstDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetSunburstDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetSunburstDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetSunburstDefinitionRequestNetworkQuery {
    computeQuery?: outputs.DashboardWidgetSunburstDefinitionRequestNetworkQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetSunburstDefinitionRequestNetworkQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetSunburstDefinitionRequestNetworkQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery;
}

export interface DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetSunburstDefinitionRequestNetworkQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetSunburstDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetSunburstDefinitionRequestQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetSunburstDefinitionRequestQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetSunburstDefinitionRequestQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetSunburstDefinitionRequestQueryProcessQuery;
}

export interface DashboardWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetSunburstDefinitionRequestQueryEventQuery {
    computes: outputs.DashboardWidgetSunburstDefinitionRequestQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetSunburstDefinitionRequestQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetSunburstDefinitionRequestQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort;
}

export interface DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetSunburstDefinitionRequestQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetSunburstDefinitionRequestQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetSunburstDefinitionRequestQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetSunburstDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetSunburstDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetSunburstDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetSunburstDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetSunburstDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetSunburstDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetSunburstDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetSunburstDefinitionRequestSecurityQuery {
    computeQuery?: outputs.DashboardWidgetSunburstDefinitionRequestSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetSunburstDefinitionRequestSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetSunburstDefinitionRequestSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetSunburstDefinitionRequestSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinition {
    customLinks?: outputs.DashboardWidgetTimeseriesDefinitionCustomLink[];
    events?: outputs.DashboardWidgetTimeseriesDefinitionEvent[];
    legendColumns?: string[];
    legendLayout?: string;
    legendSize?: string;
    liveSpan?: string;
    markers?: outputs.DashboardWidgetTimeseriesDefinitionMarker[];
    requests?: outputs.DashboardWidgetTimeseriesDefinitionRequest[];
    rightYaxis?: outputs.DashboardWidgetTimeseriesDefinitionRightYaxis;
    showLegend?: boolean;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    yaxis?: outputs.DashboardWidgetTimeseriesDefinitionYaxis;
}

export interface DashboardWidgetTimeseriesDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetTimeseriesDefinitionEvent {
    q: string;
    tagsExecution?: string;
}

export interface DashboardWidgetTimeseriesDefinitionMarker {
    displayType?: string;
    label?: string;
    value: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestApmQuery;
    auditQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestAuditQuery;
    displayType?: string;
    formulas?: outputs.DashboardWidgetTimeseriesDefinitionRequestFormula[];
    logQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestLogQuery;
    metadatas?: outputs.DashboardWidgetTimeseriesDefinitionRequestMetadata[];
    networkQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQuery;
    onRightYaxis?: boolean;
    processQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestProcessQuery;
    q?: string;
    queries?: outputs.DashboardWidgetTimeseriesDefinitionRequestQuery[];
    rumQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestRumQuery;
    securityQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQuery;
    style?: outputs.DashboardWidgetTimeseriesDefinitionRequestStyle;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQuery {
    computeQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestAuditQuery {
    computeQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetTimeseriesDefinitionRequestAuditQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery;
}

export interface DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestAuditQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestFormula {
    alias?: string;
    cellDisplayMode?: string;
    conditionalFormats?: outputs.DashboardWidgetTimeseriesDefinitionRequestFormulaConditionalFormat[];
    formulaExpression: string;
    limit?: outputs.DashboardWidgetTimeseriesDefinitionRequestFormulaLimit;
    style?: outputs.DashboardWidgetTimeseriesDefinitionRequestFormulaStyle;
}

export interface DashboardWidgetTimeseriesDefinitionRequestFormulaConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestFormulaLimit {
    count?: number;
    order?: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestFormulaStyle {
    palette?: string;
    paletteIndex?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestMetadata {
    aliasName?: string;
    expression: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQuery {
    computeQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestQueryProcessQuery;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQueryEventQuery {
    computes: outputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestSecurityQuery {
    computeQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestStyle {
    lineType?: string;
    lineWidth?: string;
    palette?: string;
}

export interface DashboardWidgetTimeseriesDefinitionRightYaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetTimeseriesDefinitionYaxis {
    includeZero?: boolean;
    label?: string;
    max?: string;
    min?: string;
    scale?: string;
}

export interface DashboardWidgetToplistDefinition {
    customLinks?: outputs.DashboardWidgetToplistDefinitionCustomLink[];
    liveSpan?: string;
    requests?: outputs.DashboardWidgetToplistDefinitionRequest[];
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetToplistDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetToplistDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetToplistDefinitionRequestApmQuery;
    auditQuery?: outputs.DashboardWidgetToplistDefinitionRequestAuditQuery;
    conditionalFormats?: outputs.DashboardWidgetToplistDefinitionRequestConditionalFormat[];
    formulas?: outputs.DashboardWidgetToplistDefinitionRequestFormula[];
    logQuery?: outputs.DashboardWidgetToplistDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetToplistDefinitionRequestProcessQuery;
    q?: string;
    queries?: outputs.DashboardWidgetToplistDefinitionRequestQuery[];
    rumQuery?: outputs.DashboardWidgetToplistDefinitionRequestRumQuery;
    securityQuery?: outputs.DashboardWidgetToplistDefinitionRequestSecurityQuery;
    style?: outputs.DashboardWidgetToplistDefinitionRequestStyle;
}

export interface DashboardWidgetToplistDefinitionRequestApmQuery {
    computeQuery?: outputs.DashboardWidgetToplistDefinitionRequestApmQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetToplistDefinitionRequestApmQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetToplistDefinitionRequestApmQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortQuery;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetToplistDefinitionRequestAuditQuery {
    computeQuery?: outputs.DashboardWidgetToplistDefinitionRequestAuditQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetToplistDefinitionRequestAuditQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetToplistDefinitionRequestAuditQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetToplistDefinitionRequestAuditQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetToplistDefinitionRequestAuditQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery;
}

export interface DashboardWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetToplistDefinitionRequestAuditQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetToplistDefinitionRequestConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetToplistDefinitionRequestFormula {
    alias?: string;
    cellDisplayMode?: string;
    conditionalFormats?: outputs.DashboardWidgetToplistDefinitionRequestFormulaConditionalFormat[];
    formulaExpression: string;
    limit?: outputs.DashboardWidgetToplistDefinitionRequestFormulaLimit;
    style?: outputs.DashboardWidgetToplistDefinitionRequestFormulaStyle;
}

export interface DashboardWidgetToplistDefinitionRequestFormulaConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetToplistDefinitionRequestFormulaLimit {
    count?: number;
    order?: string;
}

export interface DashboardWidgetToplistDefinitionRequestFormulaStyle {
    palette?: string;
    paletteIndex?: number;
}

export interface DashboardWidgetToplistDefinitionRequestLogQuery {
    computeQuery?: outputs.DashboardWidgetToplistDefinitionRequestLogQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetToplistDefinitionRequestLogQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetToplistDefinitionRequestLogQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortQuery;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetToplistDefinitionRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetToplistDefinitionRequestQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetToplistDefinitionRequestQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetToplistDefinitionRequestQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetToplistDefinitionRequestQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetToplistDefinitionRequestQueryProcessQuery;
}

export interface DashboardWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetToplistDefinitionRequestQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetToplistDefinitionRequestQueryEventQuery {
    computes: outputs.DashboardWidgetToplistDefinitionRequestQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetToplistDefinitionRequestQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetToplistDefinitionRequestQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBySort;
}

export interface DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetToplistDefinitionRequestQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetToplistDefinitionRequestQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetToplistDefinitionRequestQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetToplistDefinitionRequestRumQuery {
    computeQuery?: outputs.DashboardWidgetToplistDefinitionRequestRumQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetToplistDefinitionRequestRumQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetToplistDefinitionRequestRumQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetToplistDefinitionRequestRumQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetToplistDefinitionRequestRumQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortQuery;
}

export interface DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetToplistDefinitionRequestRumQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetToplistDefinitionRequestSecurityQuery {
    computeQuery?: outputs.DashboardWidgetToplistDefinitionRequestSecurityQueryComputeQuery;
    groupBies?: outputs.DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBy[];
    index: string;
    multiComputes?: outputs.DashboardWidgetToplistDefinitionRequestSecurityQueryMultiCompute[];
    searchQuery?: string;
}

export interface DashboardWidgetToplistDefinitionRequestSecurityQueryComputeQuery {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBy {
    facet?: string;
    limit?: number;
    sortQuery?: outputs.DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery;
}

export interface DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface DashboardWidgetToplistDefinitionRequestSecurityQueryMultiCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetToplistDefinitionRequestStyle {
    palette?: string;
}

export interface DashboardWidgetTopologyMapDefinition {
    customLinks?: outputs.DashboardWidgetTopologyMapDefinitionCustomLink[];
    requests?: outputs.DashboardWidgetTopologyMapDefinitionRequest[];
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetTopologyMapDefinitionCustomLink {
    isHidden?: boolean;
    label?: string;
    link?: string;
    overrideLabel?: string;
}

export interface DashboardWidgetTopologyMapDefinitionRequest {
    queries: outputs.DashboardWidgetTopologyMapDefinitionRequestQuery[];
    requestType: string;
}

export interface DashboardWidgetTopologyMapDefinitionRequestQuery {
    dataSource: string;
    filters: string[];
    service: string;
}

export interface DashboardWidgetTraceServiceDefinition {
    displayFormat?: string;
    env: string;
    liveSpan?: string;
    service: string;
    showBreakdown?: boolean;
    showDistribution?: boolean;
    showErrors?: boolean;
    showHits?: boolean;
    showLatency?: boolean;
    showResourceList?: boolean;
    sizeFormat?: string;
    spanName: string;
    /**
     * The title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetTreemapDefinition {
    requests?: outputs.DashboardWidgetTreemapDefinitionRequest[];
    /**
     * The title of the dashboard.
     */
    title?: string;
}

export interface DashboardWidgetTreemapDefinitionRequest {
    formulas?: outputs.DashboardWidgetTreemapDefinitionRequestFormula[];
    queries?: outputs.DashboardWidgetTreemapDefinitionRequestQuery[];
}

export interface DashboardWidgetTreemapDefinitionRequestFormula {
    alias?: string;
    cellDisplayMode?: string;
    conditionalFormats?: outputs.DashboardWidgetTreemapDefinitionRequestFormulaConditionalFormat[];
    formulaExpression: string;
    limit?: outputs.DashboardWidgetTreemapDefinitionRequestFormulaLimit;
    style?: outputs.DashboardWidgetTreemapDefinitionRequestFormulaStyle;
}

export interface DashboardWidgetTreemapDefinitionRequestFormulaConditionalFormat {
    comparator: string;
    customBgColor?: string;
    customFgColor?: string;
    hideValue?: boolean;
    imageUrl?: string;
    metric?: string;
    palette: string;
    timeframe?: string;
    value: number;
}

export interface DashboardWidgetTreemapDefinitionRequestFormulaLimit {
    count?: number;
    order?: string;
}

export interface DashboardWidgetTreemapDefinitionRequestFormulaStyle {
    palette?: string;
    paletteIndex?: number;
}

export interface DashboardWidgetTreemapDefinitionRequestQuery {
    apmDependencyStatsQuery?: outputs.DashboardWidgetTreemapDefinitionRequestQueryApmDependencyStatsQuery;
    apmResourceStatsQuery?: outputs.DashboardWidgetTreemapDefinitionRequestQueryApmResourceStatsQuery;
    eventQuery?: outputs.DashboardWidgetTreemapDefinitionRequestQueryEventQuery;
    metricQuery?: outputs.DashboardWidgetTreemapDefinitionRequestQueryMetricQuery;
    processQuery?: outputs.DashboardWidgetTreemapDefinitionRequestQueryProcessQuery;
}

export interface DashboardWidgetTreemapDefinitionRequestQueryApmDependencyStatsQuery {
    dataSource: string;
    env: string;
    isUpstream?: boolean;
    name: string;
    operationName: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetTreemapDefinitionRequestQueryApmResourceStatsQuery {
    dataSource: string;
    env: string;
    groupBies?: string[];
    name: string;
    operationName?: string;
    primaryTagName?: string;
    primaryTagValue?: string;
    resourceName?: string;
    service: string;
    stat: string;
}

export interface DashboardWidgetTreemapDefinitionRequestQueryEventQuery {
    computes: outputs.DashboardWidgetTreemapDefinitionRequestQueryEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.DashboardWidgetTreemapDefinitionRequestQueryEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search?: outputs.DashboardWidgetTreemapDefinitionRequestQueryEventQuerySearch;
    storage?: string;
}

export interface DashboardWidgetTreemapDefinitionRequestQueryEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface DashboardWidgetTreemapDefinitionRequestQueryEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.DashboardWidgetTreemapDefinitionRequestQueryEventQueryGroupBySort;
}

export interface DashboardWidgetTreemapDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface DashboardWidgetTreemapDefinitionRequestQueryEventQuerySearch {
    query: string;
}

export interface DashboardWidgetTreemapDefinitionRequestQueryMetricQuery {
    aggregator?: string;
    dataSource?: string;
    name: string;
    query: string;
}

export interface DashboardWidgetTreemapDefinitionRequestQueryProcessQuery {
    aggregator?: string;
    dataSource: string;
    isNormalizedCpu?: boolean;
    limit?: number;
    metric: string;
    name: string;
    sort?: string;
    tagFilters?: string[];
    textFilter?: string;
}

export interface DashboardWidgetWidgetLayout {
    height: number;
    isColumnBreak?: boolean;
    width: number;
    x: number;
    y: number;
}

export interface DowntimeRecurrence {
    /**
     * How often to repeat as an integer. For example to repeat every 3 days, select a `type` of `days` and a `period` of `3`.
     */
    period?: number;
    /**
     * The RRULE standard for defining recurring events. For example, to have a recurring event on the first day of each month, use `FREQ=MONTHLY;INTERVAL=1`. Most common rrule options from the iCalendar Spec are supported. Attributes specifying the duration in RRULE are not supported (for example, `DTSTART`, `DTEND`, `DURATION`). Only applicable when `type` is `rrule`.
     */
    rrule?: string;
    /**
     * One of `days`, `weeks`, `months`, `years`, or `rrule`.
     */
    type: string;
    /**
     * The date at which the recurrence should end as a POSIX timestamp. `untilOccurrences` and `untilDate` are mutually exclusive.
     */
    untilDate?: number;
    /**
     * How many times the downtime will be rescheduled. `untilOccurrences` and `untilDate` are mutually exclusive.
     */
    untilOccurrences?: number;
    /**
     * A list of week days to repeat on. Choose from: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat` or `Sun`. Only applicable when `type` is `weeks`. First letter must be capitalized.
     */
    weekDays?: string[];
}

export interface GetCloudWorkloadSecurityAgentRulesAgentRule {
    description: string;
    enabled: boolean;
    expression: string;
    /**
     * The ID of this resource.
     */
    id: string;
    name: string;
}

export interface GetLogsIndexesLogsIndex {
    dailyLimit: number;
    exclusionFilters: outputs.GetLogsIndexesLogsIndexExclusionFilter[];
    filters: outputs.GetLogsIndexesLogsIndexFilter[];
    name: string;
    retentionDays: number;
}

export interface GetLogsIndexesLogsIndexExclusionFilter {
    filters?: outputs.GetLogsIndexesLogsIndexExclusionFilterFilter[];
    isEnabled: boolean;
    name: string;
}

export interface GetLogsIndexesLogsIndexExclusionFilterFilter {
    query: string;
    sampleRate: number;
}

export interface GetLogsIndexesLogsIndexFilter {
    query: string;
}

export interface GetLogsPipelinesLogsPipeline {
    filters: outputs.GetLogsPipelinesLogsPipelineFilter[];
    /**
     * The ID of this resource.
     */
    id: string;
    isEnabled: boolean;
    /**
     * Filter parameter for retrieved pipelines
     */
    isReadOnly: boolean;
    name: string;
    type: string;
}

export interface GetLogsPipelinesLogsPipelineFilter {
    query: string;
}

export interface GetMonitorConfigPoliciesMonitorConfigPolicy {
    /**
     * The ID of this resource.
     */
    id: string;
    policyType: string;
    tagPolicy: outputs.GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicy;
}

export interface GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicy {
    tagKey: string;
    tagKeyRequired: boolean;
    validTagValues: string[];
}

export interface GetMonitorMonitorThreshold {
    critical: string;
    criticalRecovery: string;
    ok: string;
    unknown: string;
    warning: string;
    warningRecovery: string;
}

export interface GetMonitorMonitorThresholdWindow {
    recoveryWindow: string;
    triggerWindow: string;
}

export interface GetMonitorSchedulingOption {
    evaluationWindows: outputs.GetMonitorSchedulingOptionEvaluationWindow[];
}

export interface GetMonitorSchedulingOptionEvaluationWindow {
    dayStarts: string;
    hourStarts: number;
    monthStarts: number;
}

export interface GetMonitorsMonitor {
    /**
     * The ID of this resource.
     */
    id: number;
    name: string;
    type: string;
}

export interface GetRolesRole {
    /**
     * The ID of this resource.
     */
    id: string;
    name: string;
    userCount: number;
}

export interface GetSecurityMonitoringFiltersFilter {
    exclusionFilters?: outputs.GetSecurityMonitoringFiltersFilterExclusionFilter[];
    filteredDataType?: string;
    isEnabled: boolean;
    name: string;
    query: string;
    version: number;
}

export interface GetSecurityMonitoringFiltersFilterExclusionFilter {
    name: string;
    query: string;
}

export interface GetSecurityMonitoringRulesRule {
    cases: outputs.GetSecurityMonitoringRulesRuleCase[];
    enabled?: boolean;
    filters?: outputs.GetSecurityMonitoringRulesRuleFilter[];
    hasExtendedTitle?: boolean;
    message: string;
    name: string;
    options?: outputs.GetSecurityMonitoringRulesRuleOptions;
    queries?: outputs.GetSecurityMonitoringRulesRuleQuery[];
    signalQueries?: outputs.GetSecurityMonitoringRulesRuleSignalQuery[];
    tags?: string[];
    type?: string;
}

export interface GetSecurityMonitoringRulesRuleCase {
    condition?: string;
    name?: string;
    notifications?: string[];
    status: string;
}

export interface GetSecurityMonitoringRulesRuleFilter {
    action: string;
    query: string;
}

export interface GetSecurityMonitoringRulesRuleOptions {
    decreaseCriticalityBasedOnEnv?: boolean;
    detectionMethod?: string;
    evaluationWindow?: number;
    impossibleTravelOptions?: outputs.GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions;
    keepAlive: number;
    maxSignalDuration: number;
    newValueOptions?: outputs.GetSecurityMonitoringRulesRuleOptionsNewValueOptions;
}

export interface GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions {
    baselineUserLocations?: boolean;
}

export interface GetSecurityMonitoringRulesRuleOptionsNewValueOptions {
    forgetAfter: number;
    learningDuration?: number;
    learningMethod?: string;
    learningThreshold?: number;
}

export interface GetSecurityMonitoringRulesRuleQuery {
    /**
     * @deprecated `agent_rule` has been deprecated in favor of new Agent Rule resource.
     */
    agentRules?: outputs.GetSecurityMonitoringRulesRuleQueryAgentRule[];
    aggregation?: string;
    distinctFields?: string[];
    groupByFields?: string[];
    /**
     * @deprecated Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
     */
    metric?: string;
    metrics: string[];
    name?: string;
    query: string;
}

export interface GetSecurityMonitoringRulesRuleQueryAgentRule {
    agentRuleId: string;
    expression: string;
}

export interface GetSecurityMonitoringRulesRuleSignalQuery {
    aggregation?: string;
    correlatedByFields?: string[];
    correlatedQueryIndex?: string;
    defaultRuleId?: string;
    name?: string;
    ruleId: string;
}

export interface GetServiceLevelObjectiveQuery {
    denominator: string;
    numerator: string;
}

export interface GetServiceLevelObjectivesSlo {
    /**
     * The ID of this resource.
     */
    id: string;
    name: string;
    type: string;
}

export interface IpAllowlistEntry {
    cidrBlock: string;
    /**
     * Note accompanying IP address.
     */
    note?: string;
}

export interface LogsArchiveAzureArchive {
    /**
     * Your client id.
     */
    clientId: string;
    /**
     * The container where the archive is stored.
     */
    container: string;
    /**
     * The path where the archive is stored.
     */
    path?: string;
    /**
     * The associated storage account.
     */
    storageAccount: string;
    /**
     * Your tenant id.
     */
    tenantId: string;
}

export interface LogsArchiveGcsArchive {
    /**
     * Name of your GCS bucket.
     */
    bucket: string;
    /**
     * Your client email.
     */
    clientEmail: string;
    /**
     * Path where the archive is stored.
     */
    path?: string;
    /**
     * Your project id.
     */
    projectId: string;
}

export interface LogsArchiveS3Archive {
    /**
     * Your AWS account id.
     */
    accountId: string;
    /**
     * Name of your s3 bucket.
     */
    bucket: string;
    /**
     * Path where the archive is stored.
     */
    path?: string;
    /**
     * Your AWS role name
     */
    roleName: string;
}

export interface LogsCustomPipelineFilter {
    /**
     * Filter criteria of the category.
     */
    query: string;
}

export interface LogsCustomPipelineProcessor {
    /**
     * Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
     */
    arithmeticProcessor?: outputs.LogsCustomPipelineProcessorArithmeticProcessor;
    /**
     * Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
     */
    attributeRemapper?: outputs.LogsCustomPipelineProcessorAttributeRemapper;
    /**
     * Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
     */
    categoryProcessor?: outputs.LogsCustomPipelineProcessorCategoryProcessor;
    /**
     * Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
     */
    dateRemapper?: outputs.LogsCustomPipelineProcessorDateRemapper;
    /**
     * Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
     */
    geoIpParser?: outputs.LogsCustomPipelineProcessorGeoIpParser;
    /**
     * Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
     */
    grokParser?: outputs.LogsCustomPipelineProcessorGrokParser;
    /**
     * Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
     */
    lookupProcessor?: outputs.LogsCustomPipelineProcessorLookupProcessor;
    /**
     * Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
     */
    messageRemapper?: outputs.LogsCustomPipelineProcessorMessageRemapper;
    pipeline?: outputs.LogsCustomPipelineProcessorPipeline;
    /**
     * Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
     */
    referenceTableLookupProcessor?: outputs.LogsCustomPipelineProcessorReferenceTableLookupProcessor;
    /**
     * Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
     */
    serviceRemapper?: outputs.LogsCustomPipelineProcessorServiceRemapper;
    /**
     * Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
     */
    statusRemapper?: outputs.LogsCustomPipelineProcessorStatusRemapper;
    /**
     * String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
     */
    stringBuilderProcessor?: outputs.LogsCustomPipelineProcessorStringBuilderProcessor;
    /**
     * Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
     */
    traceIdRemapper?: outputs.LogsCustomPipelineProcessorTraceIdRemapper;
    /**
     * URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
     */
    urlParser?: outputs.LogsCustomPipelineProcessorUrlParser;
    /**
     * User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
     */
    userAgentParser?: outputs.LogsCustomPipelineProcessorUserAgentParser;
}

export interface LogsCustomPipelineProcessorArithmeticProcessor {
    expression: string;
    isEnabled?: boolean;
    isReplaceMissing?: boolean;
    name?: string;
    target: string;
}

export interface LogsCustomPipelineProcessorAttributeRemapper {
    isEnabled?: boolean;
    name?: string;
    overrideOnConflict?: boolean;
    preserveSource?: boolean;
    sourceType: string;
    sources: string[];
    target: string;
    targetFormat?: string;
    targetType: string;
}

export interface LogsCustomPipelineProcessorCategoryProcessor {
    categories: outputs.LogsCustomPipelineProcessorCategoryProcessorCategory[];
    isEnabled?: boolean;
    name?: string;
    target: string;
}

export interface LogsCustomPipelineProcessorCategoryProcessorCategory {
    filter: outputs.LogsCustomPipelineProcessorCategoryProcessorCategoryFilter;
    name: string;
}

export interface LogsCustomPipelineProcessorCategoryProcessorCategoryFilter {
    /**
     * Filter criteria of the category.
     */
    query: string;
}

export interface LogsCustomPipelineProcessorDateRemapper {
    isEnabled?: boolean;
    name?: string;
    sources: string[];
}

export interface LogsCustomPipelineProcessorGeoIpParser {
    isEnabled?: boolean;
    name?: string;
    sources: string[];
    target: string;
}

export interface LogsCustomPipelineProcessorGrokParser {
    grok: outputs.LogsCustomPipelineProcessorGrokParserGrok;
    isEnabled?: boolean;
    name?: string;
    samples?: string[];
    source: string;
}

export interface LogsCustomPipelineProcessorGrokParserGrok {
    matchRules: string;
    supportRules: string;
}

export interface LogsCustomPipelineProcessorLookupProcessor {
    defaultLookup?: string;
    isEnabled?: boolean;
    lookupTables: string[];
    name?: string;
    source: string;
    target: string;
}

export interface LogsCustomPipelineProcessorMessageRemapper {
    isEnabled?: boolean;
    name?: string;
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipeline {
    filters: outputs.LogsCustomPipelineProcessorPipelineFilter[];
    isEnabled?: boolean;
    name: string;
    processors?: outputs.LogsCustomPipelineProcessorPipelineProcessor[];
}

export interface LogsCustomPipelineProcessorPipelineFilter {
    /**
     * Filter criteria of the category.
     */
    query: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessor {
    /**
     * Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
     */
    arithmeticProcessor?: outputs.LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessor;
    /**
     * Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
     */
    attributeRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorAttributeRemapper;
    /**
     * Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
     */
    categoryProcessor?: outputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessor;
    /**
     * Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
     */
    dateRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorDateRemapper;
    /**
     * Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
     */
    geoIpParser?: outputs.LogsCustomPipelineProcessorPipelineProcessorGeoIpParser;
    /**
     * Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
     */
    grokParser?: outputs.LogsCustomPipelineProcessorPipelineProcessorGrokParser;
    /**
     * Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
     */
    lookupProcessor?: outputs.LogsCustomPipelineProcessorPipelineProcessorLookupProcessor;
    /**
     * Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
     */
    messageRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorMessageRemapper;
    /**
     * Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
     */
    referenceTableLookupProcessor?: outputs.LogsCustomPipelineProcessorPipelineProcessorReferenceTableLookupProcessor;
    /**
     * Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
     */
    serviceRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorServiceRemapper;
    /**
     * Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
     */
    statusRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorStatusRemapper;
    /**
     * String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
     */
    stringBuilderProcessor?: outputs.LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessor;
    /**
     * Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
     */
    traceIdRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapper;
    /**
     * URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
     */
    urlParser?: outputs.LogsCustomPipelineProcessorPipelineProcessorUrlParser;
    /**
     * User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
     */
    userAgentParser?: outputs.LogsCustomPipelineProcessorPipelineProcessorUserAgentParser;
}

export interface LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessor {
    expression: string;
    isEnabled?: boolean;
    isReplaceMissing?: boolean;
    name?: string;
    target: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorAttributeRemapper {
    isEnabled?: boolean;
    name?: string;
    overrideOnConflict?: boolean;
    preserveSource?: boolean;
    sourceType: string;
    sources: string[];
    target: string;
    targetFormat?: string;
    targetType: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorCategoryProcessor {
    categories: outputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategory[];
    isEnabled?: boolean;
    name?: string;
    target: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategory {
    filter: outputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilter;
    name: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilter {
    /**
     * Filter criteria of the category.
     */
    query: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorDateRemapper {
    isEnabled?: boolean;
    name?: string;
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipelineProcessorGeoIpParser {
    isEnabled?: boolean;
    name?: string;
    sources: string[];
    target: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorGrokParser {
    grok: outputs.LogsCustomPipelineProcessorPipelineProcessorGrokParserGrok;
    isEnabled?: boolean;
    name?: string;
    samples?: string[];
    source: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorGrokParserGrok {
    matchRules: string;
    supportRules: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorLookupProcessor {
    defaultLookup?: string;
    isEnabled?: boolean;
    lookupTables: string[];
    name?: string;
    source: string;
    target: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorMessageRemapper {
    isEnabled?: boolean;
    name?: string;
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipelineProcessorReferenceTableLookupProcessor {
    isEnabled?: boolean;
    lookupEnrichmentTable: string;
    name?: string;
    source: string;
    target: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorServiceRemapper {
    isEnabled?: boolean;
    name?: string;
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipelineProcessorStatusRemapper {
    isEnabled?: boolean;
    name?: string;
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessor {
    isEnabled?: boolean;
    isReplaceMissing?: boolean;
    name?: string;
    target: string;
    template: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapper {
    isEnabled?: boolean;
    name?: string;
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipelineProcessorUrlParser {
    isEnabled?: boolean;
    name?: string;
    normalizeEndingSlashes?: boolean;
    sources: string[];
    target: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorUserAgentParser {
    isEnabled?: boolean;
    isEncoded?: boolean;
    name?: string;
    sources: string[];
    target: string;
}

export interface LogsCustomPipelineProcessorReferenceTableLookupProcessor {
    isEnabled?: boolean;
    lookupEnrichmentTable: string;
    name?: string;
    source: string;
    target: string;
}

export interface LogsCustomPipelineProcessorServiceRemapper {
    isEnabled?: boolean;
    name?: string;
    sources: string[];
}

export interface LogsCustomPipelineProcessorStatusRemapper {
    isEnabled?: boolean;
    name?: string;
    sources: string[];
}

export interface LogsCustomPipelineProcessorStringBuilderProcessor {
    isEnabled?: boolean;
    isReplaceMissing?: boolean;
    name?: string;
    target: string;
    template: string;
}

export interface LogsCustomPipelineProcessorTraceIdRemapper {
    isEnabled?: boolean;
    name?: string;
    sources: string[];
}

export interface LogsCustomPipelineProcessorUrlParser {
    isEnabled?: boolean;
    name?: string;
    normalizeEndingSlashes?: boolean;
    sources: string[];
    target: string;
}

export interface LogsCustomPipelineProcessorUserAgentParser {
    isEnabled?: boolean;
    isEncoded?: boolean;
    name?: string;
    sources: string[];
    target: string;
}

export interface LogsIndexExclusionFilter {
    /**
     * Logs filter
     */
    filters?: outputs.LogsIndexExclusionFilterFilter[];
    /**
     * A boolean stating if the exclusion is active or not.
     */
    isEnabled?: boolean;
    /**
     * The name of the exclusion filter.
     */
    name?: string;
}

export interface LogsIndexExclusionFilterFilter {
    /**
     * Logs filter criteria. Only logs matching this filter criteria are considered for this index.
     */
    query?: string;
    sampleRate?: number;
}

export interface LogsIndexFilter {
    /**
     * Logs filter criteria. Only logs matching this filter criteria are considered for this index.
     */
    query: string;
}

export interface LogsMetricCompute {
    /**
     * The type of aggregation to use. This field can't be updated after creation. Valid values are `count`, `distribution`.
     */
    aggregationType: string;
    /**
     * Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have an `aggregationType` of distribution.
     */
    includePercentiles?: boolean;
    /**
     * The path to the value the log-based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
     */
    path?: string;
}

export interface LogsMetricFilter {
    /**
     * The search query - following the log search syntax.
     */
    query: string;
}

export interface LogsMetricGroupBy {
    /**
     * The path to the value the log-based metric will be aggregated over.
     */
    path: string;
    /**
     * Name of the tag that gets created.
     */
    tagName: string;
}

export interface MetricTagConfigurationAggregation {
    /**
     * A space aggregation for use in query. Valid values are `avg`, `max`, `min`, `sum`.
     */
    space: string;
    /**
     * A time aggregation for use in query. Valid values are `avg`, `count`, `max`, `min`, `sum`.
     */
    time: string;
}

export interface MonitorConfigPolicyTagPolicy {
    /**
     * The key of the tag
     */
    tagKey: string;
    /**
     * If a tag key is required for monitor creation
     */
    tagKeyRequired: boolean;
    /**
     * Valid values for the tag
     */
    validTagValues: string[];
}

export interface MonitorMonitorThresholdWindows {
    /**
     * Describes how long an anomalous metric must be normal before the alert recovers.
     */
    recoveryWindow?: string;
    /**
     * Describes how long a metric must be anomalous before an alert triggers.
     */
    triggerWindow?: string;
}

export interface MonitorMonitorThresholds {
    /**
     * The monitor `CRITICAL` threshold. Must be a number.
     */
    critical?: string;
    /**
     * The monitor `CRITICAL` recovery threshold. Must be a number.
     */
    criticalRecovery?: string;
    /**
     * The monitor `OK` threshold. Only supported in monitor type `service check`. Must be a number.
     */
    ok?: string;
    /**
     * The monitor `UNKNOWN` threshold. Only supported in monitor type `service check`. Must be a number.
     */
    unknown?: string;
    /**
     * The monitor `WARNING` threshold. Must be a number.
     */
    warning?: string;
    /**
     * The monitor `WARNING` recovery threshold. Must be a number.
     */
    warningRecovery?: string;
}

export interface MonitorSchedulingOption {
    /**
     * Configuration options for the evaluation window. If `hourStarts` is set, no other fields may be set. Otherwise, `dayStarts` and `monthStarts` must be set together.
     */
    evaluationWindows: outputs.MonitorSchedulingOptionEvaluationWindow[];
}

export interface MonitorSchedulingOptionEvaluationWindow {
    dayStarts?: string;
    hourStarts?: number;
    monthStarts?: number;
}

export interface MonitorVariables {
    /**
     * A timeseries formula and functions events query.
     */
    eventQueries?: outputs.MonitorVariablesEventQuery[];
}

export interface MonitorVariablesEventQuery {
    computes: outputs.MonitorVariablesEventQueryCompute[];
    dataSource: string;
    groupBies?: outputs.MonitorVariablesEventQueryGroupBy[];
    indexes?: string[];
    name: string;
    search: outputs.MonitorVariablesEventQuerySearch;
}

export interface MonitorVariablesEventQueryCompute {
    aggregation: string;
    interval?: number;
    metric?: string;
}

export interface MonitorVariablesEventQueryGroupBy {
    facet: string;
    limit?: number;
    sort?: outputs.MonitorVariablesEventQueryGroupBySort;
}

export interface MonitorVariablesEventQueryGroupBySort {
    aggregation: string;
    metric?: string;
    order?: string;
}

export interface MonitorVariablesEventQuerySearch {
    query: string;
}

export interface OrganizationSettingsSettings {
    /**
     * Whether or not the organization users can share widgets outside of Datadog.
     */
    privateWidgetShare?: boolean;
    /**
     * SAML properties
     */
    saml: outputs.OrganizationSettingsSettingsSaml;
    /**
     * The access role of the user. Options are `st` (standard user), `adm` (admin user), or `ro` (read-only user). Allowed enum values: `st`, `adm` , `ro`, `ERROR`
     */
    samlAutocreateAccessRole?: string;
    /**
     * List of domains where the SAML automated user creation is enabled.
     */
    samlAutocreateUsersDomains: outputs.OrganizationSettingsSettingsSamlAutocreateUsersDomains;
    /**
     * Whether or not SAML can be enabled for this organization.
     */
    samlCanBeEnabled: boolean;
    /**
     * Identity provider endpoint for SAML authentication.
     */
    samlIdpEndpoint: string;
    /**
     * Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
     */
    samlIdpInitiatedLogin: outputs.OrganizationSettingsSettingsSamlIdpInitiatedLogin;
    /**
     * Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
     */
    samlIdpMetadataUploaded: boolean;
    /**
     * URL for SAML logging.
     */
    samlLoginUrl: string;
    /**
     * Whether or not the SAML strict mode is enabled. If true, all users must log in with SAML.
     */
    samlStrictMode: outputs.OrganizationSettingsSettingsSamlStrictMode;
}

export interface OrganizationSettingsSettingsSaml {
    enabled?: boolean;
}

export interface OrganizationSettingsSettingsSamlAutocreateUsersDomains {
    domains?: string[];
    enabled?: boolean;
}

export interface OrganizationSettingsSettingsSamlIdpInitiatedLogin {
    enabled?: boolean;
}

export interface OrganizationSettingsSettingsSamlStrictMode {
    enabled?: boolean;
}

export interface RolePermission {
    /**
     * ID of the permission to assign.
     */
    id: string;
    /**
     * Name of the permission.
     */
    name: string;
}

export interface SecurityMonitoringDefaultRuleCase {
    /**
     * Notification targets for each rule case.
     */
    notifications: string[];
    /**
     * Status of the rule case to match. Valid values are `info`, `low`, `medium`, `high`, `critical`.
     */
    status: string;
}

export interface SecurityMonitoringDefaultRuleFilter {
    /**
     * The type of filtering action. Allowed enum values: require, suppress Valid values are `require`, `suppress`.
     */
    action: string;
    /**
     * Query for selecting logs to apply the filtering action.
     */
    query: string;
}

export interface SecurityMonitoringDefaultRuleOptions {
    /**
     * If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `logDetection`.
     */
    decreaseCriticalityBasedOnEnv?: boolean;
}

export interface SecurityMonitoringFilterExclusionFilter {
    /**
     * Exclusion filter name.
     */
    name: string;
    /**
     * Exclusion filter query. Logs that match this query are excluded from the security filter.
     */
    query: string;
}

export interface SecurityMonitoringRuleCase {
    /**
     * A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated based on the event counts in the previously defined queries.
     */
    condition?: string;
    /**
     * Name of the case.
     */
    name?: string;
    /**
     * Notification targets for each rule case.
     */
    notifications?: string[];
    /**
     * Severity of the Security Signal. Valid values are `info`, `low`, `medium`, `high`, `critical`.
     */
    status: string;
}

export interface SecurityMonitoringRuleFilter {
    /**
     * The type of filtering action. Valid values are `require`, `suppress`.
     */
    action: string;
    /**
     * Query for selecting logs to apply the filtering action.
     */
    query: string;
}

export interface SecurityMonitoringRuleOptions {
    /**
     * If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `logDetection`.
     */
    decreaseCriticalityBasedOnEnv?: boolean;
    /**
     * The detection method. Valid values are `threshold`, `newValue`, `anomalyDetection`, `impossibleTravel`, `hardcoded`, `thirdParty`.
     */
    detectionMethod?: string;
    /**
     * A time window is specified to match when at least one of the cases matches true. This is a sliding window and evaluates in real time. Valid values are `0`, `60`, `300`, `600`, `900`, `1800`, `3600`, `7200`.
     */
    evaluationWindow?: number;
    /**
     * Options for rules using the impossible travel detection method.
     */
    impossibleTravelOptions?: outputs.SecurityMonitoringRuleOptionsImpossibleTravelOptions;
    /**
     * Once a signal is generated, the signal will remain “open” if a case is matched at least once within this keep alive window (in seconds). Valid values are `0`, `60`, `300`, `600`, `900`, `1800`, `3600`, `7200`, `10800`, `21600`.
     */
    keepAlive: number;
    /**
     * A signal will “close” regardless of the query being matched once the time exceeds the maximum duration (in seconds). This time is calculated from the first seen timestamp. Valid values are `0`, `60`, `300`, `600`, `900`, `1800`, `3600`, `7200`, `10800`, `21600`, `43200`, `86400`.
     */
    maxSignalDuration: number;
    /**
     * New value rules specific options.
     */
    newValueOptions?: outputs.SecurityMonitoringRuleOptionsNewValueOptions;
}

export interface SecurityMonitoringRuleOptionsImpossibleTravelOptions {
    baselineUserLocations?: boolean;
}

export interface SecurityMonitoringRuleOptionsNewValueOptions {
    forgetAfter: number;
    learningDuration?: number;
    learningMethod?: string;
    learningThreshold?: number;
}

export interface SecurityMonitoringRuleQuery {
    /**
     * **Deprecated**. It won't be applied anymore. **Deprecated.** `agentRule` has been deprecated in favor of new Agent Rule resource.
     *
     * @deprecated `agent_rule` has been deprecated in favor of new Agent Rule resource.
     */
    agentRules?: outputs.SecurityMonitoringRuleQueryAgentRule[];
    /**
     * The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are `count`, `cardinality`, `sum`, `max`, `newValue`, `geoData`, `eventCount`, `none`.
     */
    aggregation?: string;
    /**
     * Field for which the cardinality is measured. Sent as an array.
     */
    distinctFields?: string[];
    /**
     * Fields to group by.
     */
    groupByFields?: string[];
    /**
     * The target field to aggregate over when using the `sum`, `max`, or `geoData` aggregations. **Deprecated.** Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
     *
     * @deprecated Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
     */
    metric?: string;
    /**
     * Group of target fields to aggregate over when using the `sum`, `max`, `geoData`, or `newValue` aggregations. The `sum`, `max`, and `geoData` aggregations only accept one value in this list, whereas the `newValue` aggregation accepts up to five values.
     */
    metrics: string[];
    /**
     * Name of the query. Not compatible with `newValue` aggregations.
     */
    name?: string;
    /**
     * Query to run on logs.
     */
    query: string;
}

export interface SecurityMonitoringRuleQueryAgentRule {
    agentRuleId: string;
    expression: string;
}

export interface SecurityMonitoringRuleSignalQuery {
    /**
     * The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are `count`, `cardinality`, `sum`, `max`, `newValue`, `geoData`, `eventCount`, `none`.
     */
    aggregation?: string;
    /**
     * Fields to correlate by.
     */
    correlatedByFields?: string[];
    /**
     * Index of the rule query used to retrieve the correlated field. An empty string applies correlation on the non-projected per query attributes of the rule.
     */
    correlatedQueryIndex?: string;
    /**
     * Default Rule ID of the signal to correlate. This value is READ-ONLY.
     */
    defaultRuleId?: string;
    /**
     * Name of the query. Not compatible with `newValue` aggregations.
     */
    name?: string;
    /**
     * Rule ID of the signal to correlate.
     */
    ruleId: string;
}

export interface SensitiveDataScannerGroupFilter {
    /**
     * Query to filter the events.
     */
    query: string;
}

export interface SensitiveDataScannerRuleTextReplacement {
    /**
     * Required if type == 'partial*replacement*from*beginning' or 'partial*replacement*from*end'. It must be > 0.
     */
    numberOfChars?: number;
    /**
     * Required if type == 'replacement_string'.
     */
    replacementString?: string;
    /**
     * Type of the replacement text. None means no replacement. hash means the data will be stubbed. replacement*string means that one can chose a text to replace the data. partial*replacement*from*beginning allows a user to partially replace the data from the beginning, and partial*replacement*from_end on the other hand, allows to replace data from the end. Valid values are `none`, `hash`, `replacementString`, `partialReplacementFromBeginning`, `partialReplacementFromEnd`.
     */
    type: string;
}

export interface ServiceLevelObjectiveQuery {
    /**
     * The sum of the `total` events.
     */
    denominator: string;
    /**
     * The sum of all the `good` events.
     */
    numerator: string;
}

export interface ServiceLevelObjectiveThreshold {
    /**
     * The objective's target in `(0,100)`.
     */
    target: number;
    /**
     * A string representation of the target that indicates its precision. It uses trailing zeros to show significant decimal places (e.g. `98.00`).
     */
    targetDisplay: string;
    /**
     * The time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Valid values are `7d`, `30d`, `90d`, `custom`.
     */
    timeframe: string;
    /**
     * The objective's warning value in `(0,100)`. This must be greater than the target value.
     */
    warning?: number;
    /**
     * A string representation of the warning target (see the description of the targetDisplay field for details).
     */
    warningDisplay: string;
}

export interface SyntheticsGlobalVariableOptions {
    /**
     * Parameters needed for MFA/TOTP.
     */
    totpParameters?: outputs.SyntheticsGlobalVariableOptionsTotpParameters;
}

export interface SyntheticsGlobalVariableOptionsTotpParameters {
    digits: number;
    refreshInterval: number;
}

export interface SyntheticsGlobalVariableParseTestOptions {
    /**
     * Required when type = `httpHeader`. Defines the header to use to extract the value
     */
    field?: string;
    /**
     * When type is `localVariable`, name of the local variable to use to extract the value.
     */
    localVariableName?: string;
    parser?: outputs.SyntheticsGlobalVariableParseTestOptionsParser;
    /**
     * Defines the source to use to extract the value. Valid values are `httpBody`, `httpHeader`, `localVariable`.
     */
    type: string;
}

export interface SyntheticsGlobalVariableParseTestOptionsParser {
    type: string;
    /**
     * The value of the global variable.
     */
    value?: string;
}

export interface SyntheticsPrivateLocationMetadata {
    /**
     * A list of role identifiers pulled from the Roles API to restrict read and write access.
     */
    restrictedRoles?: string[];
}

export interface SyntheticsTestApiStep {
    /**
     * Determines whether or not to continue with test if this step fails.
     */
    allowFailure?: boolean;
    /**
     * Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
     */
    assertions?: outputs.SyntheticsTestApiStepAssertion[];
    /**
     * Values to parse and save as variables from the response.
     */
    extractedValues?: outputs.SyntheticsTestApiStepExtractedValue[];
    /**
     * Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allowFailure` is `true`.
     */
    isCritical?: boolean;
    /**
     * The name of the step.
     */
    name: string;
    /**
     * The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
     */
    requestBasicauth?: outputs.SyntheticsTestApiStepRequestBasicauth;
    /**
     * Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
     */
    requestClientCertificate?: outputs.SyntheticsTestApiStepRequestClientCertificate;
    /**
     * The request for the api step.
     */
    requestDefinition?: outputs.SyntheticsTestApiStepRequestDefinition;
    /**
     * Header name and value map.
     */
    requestHeaders?: {[key: string]: any};
    /**
     * The proxy to perform the test.
     */
    requestProxy?: outputs.SyntheticsTestApiStepRequestProxy;
    /**
     * Query arguments name and value map.
     */
    requestQuery?: {[key: string]: any};
    retry?: outputs.SyntheticsTestApiStepRetry;
    /**
     * The subtype of the Synthetic multistep API test step. Valid values are `http`.
     */
    subtype?: string;
}

export interface SyntheticsTestApiStepAssertion {
    /**
     * Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
     */
    operator: string;
    /**
     * If assertion type is `header`, this is the header name.
     */
    property?: string;
    /**
     * Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
     */
    target?: string;
    /**
     * Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
     */
    targetjsonpath?: outputs.SyntheticsTestApiStepAssertionTargetjsonpath;
    /**
     * Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.
     */
    targetxpath?: outputs.SyntheticsTestApiStepAssertionTargetxpath;
    /**
     * Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `connection`.
     */
    type: string;
}

export interface SyntheticsTestApiStepAssertionTargetjsonpath {
    jsonpath: string;
    operator: string;
    targetvalue?: string;
}

export interface SyntheticsTestApiStepAssertionTargetxpath {
    operator: string;
    targetvalue?: string;
    xpath: string;
}

export interface SyntheticsTestApiStepExtractedValue {
    field?: string;
    /**
     * Name of Datadog synthetics test.
     */
    name: string;
    parser: outputs.SyntheticsTestApiStepExtractedValueParser;
    /**
     * Synthetics test type. Valid values are `api`, `browser`.
     */
    type: string;
}

export interface SyntheticsTestApiStepExtractedValueParser {
    /**
     * Synthetics test type. Valid values are `api`, `browser`.
     */
    type: string;
    value?: string;
}

export interface SyntheticsTestApiStepRequestBasicauth {
    /**
     * Access key for `SIGV4` authentication.
     */
    accessKey?: string;
    /**
     * Access token url for `oauth-client` or `oauth-rop` authentication.
     */
    accessTokenUrl?: string;
    /**
     * Audience for `oauth-client` or `oauth-rop` authentication.
     */
    audience?: string;
    /**
     * Client ID for `oauth-client` or `oauth-rop` authentication.
     */
    clientId?: string;
    /**
     * Client secret for `oauth-client` or `oauth-rop` authentication.
     */
    clientSecret?: string;
    /**
     * Domain for `ntlm` authentication.
     */
    domain?: string;
    /**
     * Password for authentication.
     */
    password?: string;
    /**
     * Region for `SIGV4` authentication.
     */
    region?: string;
    /**
     * Resource for `oauth-client` or `oauth-rop` authentication.
     */
    resource?: string;
    /**
     * Scope for `oauth-client` or `oauth-rop` authentication.
     */
    scope?: string;
    /**
     * Secret key for `SIGV4` authentication.
     */
    secretKey?: string;
    /**
     * Service name for `SIGV4` authentication.
     */
    serviceName?: string;
    /**
     * Session token for `SIGV4` authentication.
     */
    sessionToken?: string;
    /**
     * Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.
     */
    tokenApiAuthentication?: string;
    /**
     * Type of basic authentication to use when performing the test.
     */
    type?: string;
    /**
     * Username for authentication.
     */
    username?: string;
    /**
     * Workstation for `ntlm` authentication.
     */
    workstation?: string;
}

export interface SyntheticsTestApiStepRequestClientCertificate {
    cert: outputs.SyntheticsTestApiStepRequestClientCertificateCert;
    key: outputs.SyntheticsTestApiStepRequestClientCertificateKey;
}

export interface SyntheticsTestApiStepRequestClientCertificateCert {
    content: string;
    filename?: string;
}

export interface SyntheticsTestApiStepRequestClientCertificateKey {
    content: string;
    filename?: string;
}

export interface SyntheticsTestApiStepRequestDefinition {
    allowInsecure?: boolean;
    /**
     * The request body.
     */
    body?: string;
    /**
     * Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.
     */
    bodyType?: string;
    /**
     * The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
     */
    callType?: string;
    /**
     * By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificateDomains`.
     */
    certificateDomains?: string[];
    /**
     * DNS server to use for DNS tests (`subtype = "dns"`).
     */
    dnsServer?: string;
    /**
     * DNS server port to use for DNS tests.
     */
    dnsServerPort?: number;
    followRedirects?: boolean;
    /**
     * Host name to perform the test with.
     */
    host?: string;
    /**
     * For UDP and websocket tests, message to send with the request.
     */
    message?: string;
    /**
     * Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
     */
    method?: string;
    /**
     * Determines whether or not to save the response body.
     */
    noSavingResponseBody?: boolean;
    /**
     * Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
     */
    numberOfPackets?: number;
    /**
     * Port to use when performing the test.
     */
    port?: number;
    /**
     * For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
     */
    servername?: string;
    /**
     * The gRPC service on which you want to perform the gRPC call.
     */
    service?: string;
    /**
     * This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
     */
    shouldTrackHops?: boolean;
    /**
     * Timeout in seconds for the test. Defaults to `60`.
     */
    timeout?: number;
    /**
     * The URL to send the request to.
     */
    url?: string;
}

export interface SyntheticsTestApiStepRequestProxy {
    /**
     * Header name and value map.
     */
    headers?: {[key: string]: any};
    /**
     * URL of the proxy to perform the test.
     */
    url: string;
}

export interface SyntheticsTestApiStepRetry {
    count?: number;
    interval?: number;
}

export interface SyntheticsTestAssertion {
    /**
     * Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
     */
    operator: string;
    /**
     * If assertion type is `header`, this is the header name.
     */
    property?: string;
    /**
     * Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
     */
    target?: string;
    /**
     * Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
     */
    targetjsonpath?: outputs.SyntheticsTestAssertionTargetjsonpath;
    /**
     * Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.
     */
    targetxpath?: outputs.SyntheticsTestAssertionTargetxpath;
    /**
     * Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `connection`.
     */
    type: string;
}

export interface SyntheticsTestAssertionTargetjsonpath {
    jsonpath: string;
    operator: string;
    targetvalue?: string;
}

export interface SyntheticsTestAssertionTargetxpath {
    operator: string;
    targetvalue?: string;
    xpath: string;
}

export interface SyntheticsTestBrowserStep {
    /**
     * Determines if the step should be allowed to fail.
     */
    allowFailure?: boolean;
    /**
     * Force update of the "element" parameter for the step
     */
    forceElementUpdate?: boolean;
    /**
     * Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allowFailure` is `true`.
     */
    isCritical?: boolean;
    /**
     * Name of the step.
     */
    name: string;
    /**
     * Prevents saving screenshots of the step.
     */
    noScreenshot?: boolean;
    /**
     * Parameters for the step.
     */
    params: outputs.SyntheticsTestBrowserStepParams;
    /**
     * Used to override the default timeout of a step.
     */
    timeout?: number;
    /**
     * Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.
     */
    type: string;
}

export interface SyntheticsTestBrowserStepParams {
    attribute?: string;
    check?: string;
    clickType?: string;
    code?: string;
    delay?: number;
    element?: string;
    elementUserLocator?: outputs.SyntheticsTestBrowserStepParamsElementUserLocator;
    email?: string;
    file?: string;
    files?: string;
    modifiers?: string[];
    playingTabId?: string;
    request?: string;
    subtestPublicId?: string;
    value?: string;
    variable?: outputs.SyntheticsTestBrowserStepParamsVariable;
    withClick?: boolean;
    x?: number;
    y?: number;
}

export interface SyntheticsTestBrowserStepParamsElementUserLocator {
    failTestOnCannotLocate?: boolean;
    value: outputs.SyntheticsTestBrowserStepParamsElementUserLocatorValue;
}

export interface SyntheticsTestBrowserStepParamsElementUserLocatorValue {
    /**
     * Synthetics test type. Valid values are `api`, `browser`.
     */
    type?: string;
    value: string;
}

export interface SyntheticsTestBrowserStepParamsVariable {
    example?: string;
    /**
     * Name of Datadog synthetics test.
     */
    name?: string;
}

export interface SyntheticsTestBrowserVariable {
    /**
     * Example for the variable.
     */
    example?: string;
    /**
     * ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
     */
    id?: string;
    /**
     * Name of the variable.
     */
    name: string;
    /**
     * Pattern of the variable.
     */
    pattern?: string;
    /**
     * Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
     */
    type: string;
}

export interface SyntheticsTestConfigVariable {
    example?: string;
    /**
     * When type = `global`, ID of the global variable to use.
     */
    id?: string;
    /**
     * Name of the variable.
     */
    name: string;
    pattern?: string;
    /**
     * Whether the value of this variable will be obfuscated in test results.
     */
    secure?: boolean;
    /**
     * Type of test configuration variable. Valid values are `global`, `text`.
     */
    type: string;
}

export interface SyntheticsTestOptionsList {
    /**
     * For SSL test, whether or not the test should allow self signed certificates.
     */
    acceptSelfSigned?: boolean;
    /**
     * Allows loading insecure content for an HTTP test.
     */
    allowInsecure?: boolean;
    /**
     * For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
     */
    checkCertificateRevocation?: boolean;
    /**
     * CI/CD options for a Synthetic test.
     */
    ci?: outputs.SyntheticsTestOptionsListCi;
    /**
     * Disable Cross-Origin Resource Sharing for browser tests.
     */
    disableCors?: boolean;
    /**
     * Disable Content Security Policy for browser tests.
     */
    disableCsp?: boolean;
    /**
     * Determines whether or not the API HTTP test should follow redirects.
     */
    followRedirects?: boolean;
    /**
     * HTTP version to use for a Synthetics API test. Valid values are `http1`, `http2`, `any`.
     */
    httpVersion?: string;
    /**
     * Ignore server certificate error.
     */
    ignoreServerCertificateError?: boolean;
    /**
     * Timeout before declaring the initial step as failed (in seconds) for browser tests.
     */
    initialNavigationTimeout?: number;
    /**
     * Minimum amount of time in failure required to trigger an alert (in seconds). Default is `0`.
     */
    minFailureDuration?: number;
    /**
     * Minimum number of locations in failure required to trigger an alert. Default is `1`.
     */
    minLocationFailed?: number;
    /**
     * The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
     */
    monitorName?: string;
    monitorOptions?: outputs.SyntheticsTestOptionsListMonitorOptions;
    monitorPriority?: number;
    /**
     * Prevents saving screenshots of the steps.
     */
    noScreenshot?: boolean;
    /**
     * A list of role identifiers pulled from the Roles API to restrict read and write access.
     */
    restrictedRoles?: string[];
    retry?: outputs.SyntheticsTestOptionsListRetry;
    /**
     * The RUM data collection settings for the Synthetic browser test.
     */
    rumSettings?: outputs.SyntheticsTestOptionsListRumSettings;
    /**
     * Object containing timeframes and timezone used for advanced scheduling.
     */
    scheduling?: outputs.SyntheticsTestOptionsListScheduling;
    /**
     * How often the test should run (in seconds).
     */
    tickEvery: number;
}

export interface SyntheticsTestOptionsListCi {
    executionRule?: string;
}

export interface SyntheticsTestOptionsListMonitorOptions {
    renotifyInterval?: number;
}

export interface SyntheticsTestOptionsListRetry {
    count?: number;
    interval?: number;
}

export interface SyntheticsTestOptionsListRumSettings {
    applicationId?: string;
    clientTokenId?: number;
    isEnabled: boolean;
}

export interface SyntheticsTestOptionsListScheduling {
    timeframes: outputs.SyntheticsTestOptionsListSchedulingTimeframe[];
    timezone: string;
}

export interface SyntheticsTestOptionsListSchedulingTimeframe {
    day: number;
    from: string;
    to: string;
}

export interface SyntheticsTestRequestBasicauth {
    /**
     * Access key for `SIGV4` authentication.
     */
    accessKey?: string;
    /**
     * Access token url for `oauth-client` or `oauth-rop` authentication.
     */
    accessTokenUrl?: string;
    /**
     * Audience for `oauth-client` or `oauth-rop` authentication.
     */
    audience?: string;
    /**
     * Client ID for `oauth-client` or `oauth-rop` authentication.
     */
    clientId?: string;
    /**
     * Client secret for `oauth-client` or `oauth-rop` authentication.
     */
    clientSecret?: string;
    /**
     * Domain for `ntlm` authentication.
     */
    domain?: string;
    /**
     * Password for authentication.
     */
    password?: string;
    /**
     * Region for `SIGV4` authentication.
     */
    region?: string;
    /**
     * Resource for `oauth-client` or `oauth-rop` authentication.
     */
    resource?: string;
    /**
     * Scope for `oauth-client` or `oauth-rop` authentication.
     */
    scope?: string;
    /**
     * Secret key for `SIGV4` authentication.
     */
    secretKey?: string;
    /**
     * Service name for `SIGV4` authentication.
     */
    serviceName?: string;
    /**
     * Session token for `SIGV4` authentication.
     */
    sessionToken?: string;
    /**
     * Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.
     */
    tokenApiAuthentication?: string;
    /**
     * Type of basic authentication to use when performing the test.
     */
    type?: string;
    /**
     * Username for authentication.
     */
    username?: string;
    /**
     * Workstation for `ntlm` authentication.
     */
    workstation?: string;
}

export interface SyntheticsTestRequestClientCertificate {
    cert: outputs.SyntheticsTestRequestClientCertificateCert;
    key: outputs.SyntheticsTestRequestClientCertificateKey;
}

export interface SyntheticsTestRequestClientCertificateCert {
    content: string;
    filename?: string;
}

export interface SyntheticsTestRequestClientCertificateKey {
    content: string;
    filename?: string;
}

export interface SyntheticsTestRequestDefinition {
    /**
     * The request body.
     */
    body?: string;
    /**
     * Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.
     */
    bodyType?: string;
    /**
     * The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
     */
    callType?: string;
    /**
     * By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificateDomains`.
     */
    certificateDomains?: string[];
    /**
     * DNS server to use for DNS tests (`subtype = "dns"`).
     */
    dnsServer?: string;
    /**
     * DNS server port to use for DNS tests.
     */
    dnsServerPort?: number;
    /**
     * Host name to perform the test with.
     */
    host?: string;
    /**
     * For UDP and websocket tests, message to send with the request.
     */
    message?: string;
    /**
     * Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
     */
    method?: string;
    /**
     * Determines whether or not to save the response body.
     */
    noSavingResponseBody?: boolean;
    /**
     * Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
     */
    numberOfPackets?: number;
    /**
     * Port to use when performing the test.
     */
    port?: number;
    /**
     * For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
     */
    servername?: string;
    /**
     * The gRPC service on which you want to perform the gRPC call.
     */
    service?: string;
    /**
     * This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
     */
    shouldTrackHops?: boolean;
    /**
     * Timeout in seconds for the test. Defaults to `60`.
     */
    timeout?: number;
    /**
     * The URL to send the request to.
     */
    url?: string;
}

export interface SyntheticsTestRequestProxy {
    /**
     * Header name and value map.
     */
    headers?: {[key: string]: any};
    /**
     * URL of the proxy to perform the test.
     */
    url: string;
}

export namespace aws {
    export interface GetIntegrationLogsServicesAwsLogsService {
        /**
         * The ID of this resource.
         */
        id: string;
        label: string;
    }

}

export namespace slack {
    export interface ChannelDisplay {
        /**
         * Show the main body of the alert event.
         */
        message?: boolean;
        /**
         * Show the list of @-handles in the alert event.
         */
        notified?: boolean;
        /**
         * Show the alert event's snapshot image.
         */
        snapshot?: boolean;
        /**
         * Show the scopes on which the monitor alerted.
         */
        tags?: boolean;
    }

}
