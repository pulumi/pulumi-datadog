// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface DashboardListDashItem {
    /**
     * The ID of the dashboard to add
     */
    dashId: pulumi.Input<string>;
    /**
     * The type of this dashboard. Available options are: custom_timeboard, custom_screenboard, integration_screenboard, integration_timeboard, and host_timeboard
     */
    type: pulumi.Input<string>;
}

export interface DashboardTemplateVariable {
    /**
     * The default value for the template variable on dashboard load.
     */
    default?: pulumi.Input<string>;
    /**
     * The name of the variable.
     */
    name: pulumi.Input<string>;
    /**
     * The tag prefix associated with the variable. Only tags with this prefix will appear in the variable dropdown.
     */
    prefix?: pulumi.Input<string>;
}

export interface DashboardTemplateVariablePreset {
    /**
     * The name of the preset.
     */
    name?: pulumi.Input<string>;
    /**
     * The template variable names and assumed values under the given preset
     */
    templateVariables?: pulumi.Input<pulumi.Input<inputs.DashboardTemplateVariablePresetTemplateVariable>[]>;
}

export interface DashboardTemplateVariablePresetTemplateVariable {
    /**
     * The name of the variable.
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface DashboardWidget {
    alertGraphDefinition?: pulumi.Input<inputs.DashboardWidgetAlertGraphDefinition>;
    alertValueDefinition?: pulumi.Input<inputs.DashboardWidgetAlertValueDefinition>;
    /**
     * The definition for a Change  widget.
     */
    changeDefinition?: pulumi.Input<inputs.DashboardWidgetChangeDefinition>;
    checkStatusDefinition?: pulumi.Input<inputs.DashboardWidgetCheckStatusDefinition>;
    /**
     * The definition for a Distribution widget.
     */
    distributionDefinition?: pulumi.Input<inputs.DashboardWidgetDistributionDefinition>;
    eventStreamDefinition?: pulumi.Input<inputs.DashboardWidgetEventStreamDefinition>;
    eventTimelineDefinition?: pulumi.Input<inputs.DashboardWidgetEventTimelineDefinition>;
    freeTextDefinition?: pulumi.Input<inputs.DashboardWidgetFreeTextDefinition>;
    /**
     * The definition for a Geomap widget.
     */
    geomapDefinition?: pulumi.Input<inputs.DashboardWidgetGeomapDefinition>;
    /**
     * The definition for a Group widget.
     */
    groupDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinition>;
    /**
     * The definition for a Heatmap widget.
     */
    heatmapDefinition?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinition>;
    /**
     * The definition for a Hostmap widget.
     */
    hostmapDefinition?: pulumi.Input<inputs.DashboardWidgetHostmapDefinition>;
    /**
     * The ID of the widget.
     */
    id?: pulumi.Input<number>;
    /**
     * The definition for an Iframe widget.
     */
    iframeDefinition?: pulumi.Input<inputs.DashboardWidgetIframeDefinition>;
    /**
     * The definition for an Image widget
     */
    imageDefinition?: pulumi.Input<inputs.DashboardWidgetImageDefinition>;
    /**
     * The layout of the widget on a 'free' dashboard.  Define widgetLayout list with one element instead.
     *
     * @deprecated Define `widget_layout` list with one element instead.
     */
    layout?: pulumi.Input<inputs.DashboardWidgetLayout>;
    logStreamDefinition?: pulumi.Input<inputs.DashboardWidgetLogStreamDefinition>;
    manageStatusDefinition?: pulumi.Input<inputs.DashboardWidgetManageStatusDefinition>;
    /**
     * The definition for a Note widget.
     */
    noteDefinition?: pulumi.Input<inputs.DashboardWidgetNoteDefinition>;
    queryTableDefinition?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinition>;
    queryValueDefinition?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinition>;
    /**
     * The definition for a Scatterplot widget.
     */
    scatterplotDefinition?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinition>;
    serviceLevelObjectiveDefinition?: pulumi.Input<inputs.DashboardWidgetServiceLevelObjectiveDefinition>;
    /**
     * The definition for a Service Map widget.
     */
    servicemapDefinition?: pulumi.Input<inputs.DashboardWidgetServicemapDefinition>;
    /**
     * The definition for a Timeseries widget.
     */
    timeseriesDefinition?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinition>;
    /**
     * The definition for a Toplist widget.
     */
    toplistDefinition?: pulumi.Input<inputs.DashboardWidgetToplistDefinition>;
    traceServiceDefinition?: pulumi.Input<inputs.DashboardWidgetTraceServiceDefinition>;
    /**
     * The layout of the widget on a 'free' dashboard.
     */
    widgetLayout?: pulumi.Input<inputs.DashboardWidgetWidgetLayout>;
}

export interface DashboardWidgetAlertGraphDefinition {
    alertId: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetAlertGraphDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    vizType: pulumi.Input<string>;
}

export interface DashboardWidgetAlertGraphDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetAlertValueDefinition {
    alertId: pulumi.Input<string>;
    precision?: pulumi.Input<number>;
    textAlign?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinition {
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetChangeDefinitionCustomLink>[]>;
    liveSpan?: pulumi.Input<string>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequest>[]>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestApmQuery>;
    changeType?: pulumi.Input<string>;
    compareTo?: pulumi.Input<string>;
    increaseGood?: pulumi.Input<boolean>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestLogQuery>;
    orderBy?: pulumi.Input<string>;
    orderDir?: pulumi.Input<string>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestSecurityQuery>;
    showPresent?: pulumi.Input<boolean>;
}

export interface DashboardWidgetChangeDefinitionRequestApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetChangeDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetChangeDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetChangeDefinitionRequestRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetChangeDefinitionRequestRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetChangeDefinitionRequestRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetChangeDefinitionRequestRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetChangeDefinitionRequestSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetChangeDefinitionRequestSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetCheckStatusDefinition {
    check: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    grouping: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetCheckStatusDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetCheckStatusDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinition {
    legendSize?: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequest>[]>;
    showLegend?: pulumi.Input<boolean>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestSecurityQuery>;
    style?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestStyle>;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetDistributionDefinitionRequestRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetDistributionDefinitionRequestRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetDistributionDefinitionRequestRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetDistributionDefinitionRequestSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestStyle {
    palette?: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetEventStreamDefinition {
    eventSize?: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    query: pulumi.Input<string>;
    tagsExecution?: pulumi.Input<string>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetEventStreamDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetEventStreamDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetEventTimelineDefinition {
    liveSpan?: pulumi.Input<string>;
    query: pulumi.Input<string>;
    tagsExecution?: pulumi.Input<string>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetEventTimelineDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetEventTimelineDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetFreeTextDefinition {
    color?: pulumi.Input<string>;
    fontSize?: pulumi.Input<string>;
    text: pulumi.Input<string>;
    textAlign?: pulumi.Input<string>;
}

export interface DashboardWidgetGeomapDefinition {
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGeomapDefinitionCustomLink>[]>;
    liveSpan?: pulumi.Input<string>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequest>[]>;
    style?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionStyle>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    view: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionView>;
}

export interface DashboardWidgetGeomapDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetGeomapDefinitionRequest {
    formulas?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestFormula>[]>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestLogQuery>;
    q?: pulumi.Input<string>;
    queries?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestQuery>[]>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestRumQuery>;
}

export interface DashboardWidgetGeomapDefinitionRequestFormula {
    alias?: pulumi.Input<string>;
    formulaExpression: pulumi.Input<string>;
    limit?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestFormulaLimit>;
}

export interface DashboardWidgetGeomapDefinitionRequestFormulaLimit {
    count?: pulumi.Input<number>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetGeomapDefinitionRequestLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGeomapDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGeomapDefinitionRequestLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGeomapDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetGeomapDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGeomapDefinitionRequestLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGeomapDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGeomapDefinitionRequestQuery {
    eventQuery?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestQueryEventQuery>;
    metricQuery?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestQueryMetricQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestQueryProcessQuery>;
}

export interface DashboardWidgetGeomapDefinitionRequestQueryEventQuery {
    computes: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestQueryEventQueryCompute>[]>;
    dataSource: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBy>[]>;
    indexes?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestQueryEventQuerySearch>;
}

export interface DashboardWidgetGeomapDefinitionRequestQueryEventQueryCompute {
    aggregation: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    metric?: pulumi.Input<string>;
}

export interface DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBy {
    facet: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort>;
}

export interface DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    metric?: pulumi.Input<string>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetGeomapDefinitionRequestQueryEventQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGeomapDefinitionRequestQueryMetricQuery {
    aggregator?: pulumi.Input<string>;
    dataSource?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGeomapDefinitionRequestQueryProcessQuery {
    aggregator?: pulumi.Input<string>;
    dataSource: pulumi.Input<string>;
    isNormalizedCpu?: pulumi.Input<boolean>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    name: pulumi.Input<string>;
    sort?: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<string>[]>;
    textFilter?: pulumi.Input<string>;
}

export interface DashboardWidgetGeomapDefinitionRequestRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGeomapDefinitionRequestRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGeomapDefinitionRequestRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGeomapDefinitionRequestRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetGeomapDefinitionRequestRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGeomapDefinitionRequestRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGeomapDefinitionRequestRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGeomapDefinitionStyle {
    palette: pulumi.Input<string>;
    paletteFlip: pulumi.Input<boolean>;
}

export interface DashboardWidgetGeomapDefinitionView {
    focus: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinition {
    layoutType: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    widgets: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidget>[]>;
}

export interface DashboardWidgetGroupDefinitionWidget {
    alertGraphDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetAlertGraphDefinition>;
    alertValueDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetAlertValueDefinition>;
    /**
     * The definition for a Change  widget.
     */
    changeDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinition>;
    checkStatusDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetCheckStatusDefinition>;
    /**
     * The definition for a Distribution widget.
     */
    distributionDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinition>;
    eventStreamDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetEventStreamDefinition>;
    eventTimelineDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetEventTimelineDefinition>;
    freeTextDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetFreeTextDefinition>;
    /**
     * The definition for a Geomap widget.
     */
    geomapDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinition>;
    /**
     * The definition for a Heatmap widget.
     */
    heatmapDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinition>;
    /**
     * The definition for a Hostmap widget.
     */
    hostmapDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinition>;
    /**
     * The ID of the widget.
     */
    id?: pulumi.Input<number>;
    /**
     * The definition for an Iframe widget.
     */
    iframeDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetIframeDefinition>;
    /**
     * The definition for an Image widget
     */
    imageDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetImageDefinition>;
    /**
     * The layout of the widget on a 'free' dashboard.  Define widgetLayout list with one element instead.
     *
     * @deprecated Define `widget_layout` list with one element instead.
     */
    layout?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetLayout>;
    logStreamDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetLogStreamDefinition>;
    manageStatusDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetManageStatusDefinition>;
    /**
     * The definition for a Note widget.
     */
    noteDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetNoteDefinition>;
    queryTableDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinition>;
    queryValueDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinition>;
    /**
     * The definition for a Scatterplot widget.
     */
    scatterplotDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinition>;
    serviceLevelObjectiveDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition>;
    /**
     * The definition for a Service Map widget.
     */
    servicemapDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetServicemapDefinition>;
    /**
     * The definition for a Timeseries widget.
     */
    timeseriesDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinition>;
    /**
     * The definition for a Toplist widget.
     */
    toplistDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinition>;
    traceServiceDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTraceServiceDefinition>;
    /**
     * The layout of the widget on a 'free' dashboard.
     */
    widgetLayout?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetWidgetLayout>;
}

export interface DashboardWidgetGroupDefinitionWidgetAlertGraphDefinition {
    alertId: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    vizType: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetAlertValueDefinition {
    alertId: pulumi.Input<string>;
    precision?: pulumi.Input<number>;
    textAlign?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinition {
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLink>[]>;
    liveSpan?: pulumi.Input<string>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequest>[]>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery>;
    changeType?: pulumi.Input<string>;
    compareTo?: pulumi.Input<string>;
    increaseGood?: pulumi.Input<boolean>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery>;
    orderBy?: pulumi.Input<string>;
    orderDir?: pulumi.Input<string>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery>;
    showPresent?: pulumi.Input<boolean>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetCheckStatusDefinition {
    check: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    grouping: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinition {
    legendSize?: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequest>[]>;
    showLegend?: pulumi.Input<boolean>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery>;
    style?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle {
    palette?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetEventStreamDefinition {
    eventSize?: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    query: pulumi.Input<string>;
    tagsExecution?: pulumi.Input<string>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetEventTimelineDefinition {
    liveSpan?: pulumi.Input<string>;
    query: pulumi.Input<string>;
    tagsExecution?: pulumi.Input<string>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetFreeTextDefinition {
    color?: pulumi.Input<string>;
    fontSize?: pulumi.Input<string>;
    text: pulumi.Input<string>;
    textAlign?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinition {
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionCustomLink>[]>;
    liveSpan?: pulumi.Input<string>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequest>[]>;
    style?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyle>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    view: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionView>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequest {
    formulas?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormula>[]>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery>;
    q?: pulumi.Input<string>;
    queries?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQuery>[]>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormula {
    alias?: pulumi.Input<string>;
    formulaExpression: pulumi.Input<string>;
    limit?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit {
    count?: pulumi.Input<number>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQuery {
    eventQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery>;
    metricQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery {
    computes: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryCompute>[]>;
    dataSource: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBy>[]>;
    indexes?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryCompute {
    aggregation: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    metric?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBy {
    facet: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    metric?: pulumi.Input<string>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery {
    aggregator?: pulumi.Input<string>;
    dataSource?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery {
    aggregator?: pulumi.Input<string>;
    dataSource: pulumi.Input<string>;
    isNormalizedCpu?: pulumi.Input<boolean>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    name: pulumi.Input<string>;
    sort?: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<string>[]>;
    textFilter?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyle {
    palette: pulumi.Input<string>;
    paletteFlip: pulumi.Input<boolean>;
}

export interface DashboardWidgetGroupDefinitionWidgetGeomapDefinitionView {
    focus: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinition {
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLink>[]>;
    events?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEvent>[]>;
    legendSize?: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequest>[]>;
    showLegend?: pulumi.Input<boolean>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    yaxis?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEvent {
    q: pulumi.Input<string>;
    tagsExecution?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery>;
    style?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle {
    palette?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinition {
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLink>[]>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    noGroupHosts?: pulumi.Input<boolean>;
    noMetricHosts?: pulumi.Input<boolean>;
    nodeType?: pulumi.Input<string>;
    request?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequest>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    style?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyle>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequest {
    fills?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFill>[]>;
    sizes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSize>[]>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFill {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery>;
    q?: pulumi.Input<string>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSize {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery>;
    q?: pulumi.Input<string>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyle {
    fillMax?: pulumi.Input<string>;
    fillMin?: pulumi.Input<string>;
    palette?: pulumi.Input<string>;
    paletteFlip?: pulumi.Input<boolean>;
}

export interface DashboardWidgetGroupDefinitionWidgetIframeDefinition {
    url: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetImageDefinition {
    margin?: pulumi.Input<string>;
    sizing?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetLayout {
    height: pulumi.Input<number>;
    width: pulumi.Input<number>;
    x: pulumi.Input<number>;
    y: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetLogStreamDefinition {
    columns?: pulumi.Input<pulumi.Input<string>[]>;
    indexes?: pulumi.Input<pulumi.Input<string>[]>;
    liveSpan?: pulumi.Input<string>;
    /**
     * @deprecated This parameter has been deprecated. Use `indexes` instead.
     */
    logset?: pulumi.Input<string>;
    messageDisplay?: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    showDateColumn?: pulumi.Input<boolean>;
    showMessageColumn?: pulumi.Input<boolean>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSort>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSort {
    column: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetManageStatusDefinition {
    colorPreference?: pulumi.Input<string>;
    /**
     * @deprecated This parameter has been deprecated.
     */
    count?: pulumi.Input<number>;
    displayFormat?: pulumi.Input<string>;
    hideZeroCounts?: pulumi.Input<boolean>;
    query: pulumi.Input<string>;
    showLastTriggered?: pulumi.Input<boolean>;
    sort?: pulumi.Input<string>;
    /**
     * @deprecated This parameter has been deprecated.
     */
    start?: pulumi.Input<number>;
    summaryType?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetNoteDefinition {
    backgroundColor?: pulumi.Input<string>;
    content: pulumi.Input<string>;
    fontSize?: pulumi.Input<string>;
    showTick?: pulumi.Input<boolean>;
    textAlign?: pulumi.Input<string>;
    tickEdge?: pulumi.Input<string>;
    tickPos?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinition {
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLink>[]>;
    hasSearchBar?: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequest>[]>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequest {
    aggregator?: pulumi.Input<string>;
    alias?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery>;
    apmStatsQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery>;
    cellDisplayModes?: pulumi.Input<pulumi.Input<string>[]>;
    conditionalFormats?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormat>[]>;
    limit?: pulumi.Input<number>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery>;
    order?: pulumi.Input<string>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery {
    columns?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumn>[]>;
    env: pulumi.Input<string>;
    name: pulumi.Input<string>;
    primaryTag: pulumi.Input<string>;
    resource?: pulumi.Input<string>;
    rowType: pulumi.Input<string>;
    service: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumn {
    alias?: pulumi.Input<string>;
    cellDisplayMode?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormat {
    comparator: pulumi.Input<string>;
    customBgColor?: pulumi.Input<string>;
    customFgColor?: pulumi.Input<string>;
    hideValue?: pulumi.Input<boolean>;
    imageUrl?: pulumi.Input<string>;
    metric?: pulumi.Input<string>;
    palette: pulumi.Input<string>;
    timeframe?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinition {
    autoscale?: pulumi.Input<boolean>;
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLink>[]>;
    customUnit?: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    precision?: pulumi.Input<number>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequest>[]>;
    textAlign?: pulumi.Input<string>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequest {
    aggregator?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery>;
    conditionalFormats?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormat>[]>;
    formulas?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormula>[]>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    queries?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQuery>[]>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormat {
    comparator: pulumi.Input<string>;
    customBgColor?: pulumi.Input<string>;
    customFgColor?: pulumi.Input<string>;
    hideValue?: pulumi.Input<boolean>;
    imageUrl?: pulumi.Input<string>;
    metric?: pulumi.Input<string>;
    palette: pulumi.Input<string>;
    timeframe?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormula {
    alias?: pulumi.Input<string>;
    formulaExpression: pulumi.Input<string>;
    limit?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit {
    count?: pulumi.Input<number>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQuery {
    eventQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery>;
    metricQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery {
    computes: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryCompute>[]>;
    dataSource: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBy>[]>;
    indexes?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryCompute {
    aggregation: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    metric?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBy {
    facet: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    metric?: pulumi.Input<string>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery {
    aggregator?: pulumi.Input<string>;
    dataSource?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery {
    aggregator?: pulumi.Input<string>;
    dataSource: pulumi.Input<string>;
    isNormalizedCpu?: pulumi.Input<boolean>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    name: pulumi.Input<string>;
    sort?: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<string>[]>;
    textFilter?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinition {
    colorByGroups?: pulumi.Input<pulumi.Input<string>[]>;
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLink>[]>;
    liveSpan?: pulumi.Input<string>;
    request?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequest>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    xaxis?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis>;
    yaxis?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequest {
    xes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestX>[]>;
    ys?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestY>[]>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestX {
    aggregator?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery>;
    q?: pulumi.Input<string>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestY {
    aggregator?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery>;
    q?: pulumi.Input<string>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition {
    globalTimeTarget?: pulumi.Input<string>;
    showErrorBudget?: pulumi.Input<boolean>;
    sloId: pulumi.Input<string>;
    timeWindows: pulumi.Input<pulumi.Input<string>[]>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    viewMode: pulumi.Input<string>;
    viewType: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetServicemapDefinition {
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLink>[]>;
    filters: pulumi.Input<pulumi.Input<string>[]>;
    service: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinition {
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLink>[]>;
    events?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEvent>[]>;
    legendColumns?: pulumi.Input<pulumi.Input<string>[]>;
    legendLayout?: pulumi.Input<string>;
    legendSize?: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarker>[]>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequest>[]>;
    rightYaxis?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis>;
    showLegend?: pulumi.Input<boolean>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    yaxis?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEvent {
    q: pulumi.Input<string>;
    tagsExecution?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarker {
    displayType?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery>;
    displayType?: pulumi.Input<string>;
    formulas?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormula>[]>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery>;
    metadatas?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadata>[]>;
    networkQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery>;
    onRightYaxis?: pulumi.Input<boolean>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    queries?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQuery>[]>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery>;
    style?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormula {
    alias?: pulumi.Input<string>;
    formulaExpression: pulumi.Input<string>;
    limit?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit {
    count?: pulumi.Input<number>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadata {
    aliasName?: pulumi.Input<string>;
    expression: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQuery {
    eventQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery>;
    metricQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery {
    computes: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryCompute>[]>;
    dataSource: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBy>[]>;
    indexes?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryCompute {
    aggregation: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    metric?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBy {
    facet: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    metric?: pulumi.Input<string>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery {
    aggregator?: pulumi.Input<string>;
    dataSource?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery {
    aggregator?: pulumi.Input<string>;
    dataSource: pulumi.Input<string>;
    isNormalizedCpu?: pulumi.Input<boolean>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    name: pulumi.Input<string>;
    sort?: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<string>[]>;
    textFilter?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle {
    lineType?: pulumi.Input<string>;
    lineWidth?: pulumi.Input<string>;
    palette?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinition {
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLink>[]>;
    liveSpan?: pulumi.Input<string>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequest>[]>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery>;
    conditionalFormats?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormat>[]>;
    formulas?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormula>[]>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    queries?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQuery>[]>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery>;
    style?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormat {
    comparator: pulumi.Input<string>;
    customBgColor?: pulumi.Input<string>;
    customFgColor?: pulumi.Input<string>;
    hideValue?: pulumi.Input<boolean>;
    imageUrl?: pulumi.Input<string>;
    metric?: pulumi.Input<string>;
    palette: pulumi.Input<string>;
    timeframe?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormula {
    alias?: pulumi.Input<string>;
    formulaExpression: pulumi.Input<string>;
    limit?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit {
    count?: pulumi.Input<number>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQuery {
    eventQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery>;
    metricQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery {
    computes: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryCompute>[]>;
    dataSource: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBy>[]>;
    indexes?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryCompute {
    aggregation: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    metric?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBy {
    facet: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    metric?: pulumi.Input<string>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery {
    aggregator?: pulumi.Input<string>;
    dataSource?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery {
    aggregator?: pulumi.Input<string>;
    dataSource: pulumi.Input<string>;
    isNormalizedCpu?: pulumi.Input<boolean>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    name: pulumi.Input<string>;
    sort?: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<string>[]>;
    textFilter?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle {
    palette?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTraceServiceDefinition {
    displayFormat?: pulumi.Input<string>;
    env: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    service: pulumi.Input<string>;
    showBreakdown?: pulumi.Input<boolean>;
    showDistribution?: pulumi.Input<boolean>;
    showErrors?: pulumi.Input<boolean>;
    showHits?: pulumi.Input<boolean>;
    showLatency?: pulumi.Input<boolean>;
    showResourceList?: pulumi.Input<boolean>;
    sizeFormat?: pulumi.Input<string>;
    spanName: pulumi.Input<string>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetWidgetLayout {
    height: pulumi.Input<number>;
    width: pulumi.Input<number>;
    x: pulumi.Input<number>;
    y: pulumi.Input<number>;
}

export interface DashboardWidgetHeatmapDefinition {
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionCustomLink>[]>;
    events?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionEvent>[]>;
    legendSize?: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequest>[]>;
    showLegend?: pulumi.Input<boolean>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    yaxis?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionYaxis>;
}

export interface DashboardWidgetHeatmapDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionEvent {
    q: pulumi.Input<string>;
    tagsExecution?: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestSecurityQuery>;
    style?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestStyle>;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHeatmapDefinitionRequestRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHeatmapDefinitionRequestRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHeatmapDefinitionRequestSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestStyle {
    palette?: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionYaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinition {
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionCustomLink>[]>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    noGroupHosts?: pulumi.Input<boolean>;
    noMetricHosts?: pulumi.Input<boolean>;
    nodeType?: pulumi.Input<string>;
    request?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequest>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    style?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionStyle>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequest {
    fills?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFill>[]>;
    sizes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSize>[]>;
}

export interface DashboardWidgetHostmapDefinitionRequestFill {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillProcessQuery>;
    q?: pulumi.Input<string>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQuery>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSize {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeProcessQuery>;
    q?: pulumi.Input<string>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQuery>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionStyle {
    fillMax?: pulumi.Input<string>;
    fillMin?: pulumi.Input<string>;
    palette?: pulumi.Input<string>;
    paletteFlip?: pulumi.Input<boolean>;
}

export interface DashboardWidgetIframeDefinition {
    url: pulumi.Input<string>;
}

export interface DashboardWidgetImageDefinition {
    margin?: pulumi.Input<string>;
    sizing?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface DashboardWidgetLayout {
    height: pulumi.Input<number>;
    width: pulumi.Input<number>;
    x: pulumi.Input<number>;
    y: pulumi.Input<number>;
}

export interface DashboardWidgetLogStreamDefinition {
    columns?: pulumi.Input<pulumi.Input<string>[]>;
    indexes?: pulumi.Input<pulumi.Input<string>[]>;
    liveSpan?: pulumi.Input<string>;
    /**
     * @deprecated This parameter has been deprecated. Use `indexes` instead.
     */
    logset?: pulumi.Input<string>;
    messageDisplay?: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    showDateColumn?: pulumi.Input<boolean>;
    showMessageColumn?: pulumi.Input<boolean>;
    sort?: pulumi.Input<inputs.DashboardWidgetLogStreamDefinitionSort>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetLogStreamDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetLogStreamDefinitionSort {
    column: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetLogStreamDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetManageStatusDefinition {
    colorPreference?: pulumi.Input<string>;
    /**
     * @deprecated This parameter has been deprecated.
     */
    count?: pulumi.Input<number>;
    displayFormat?: pulumi.Input<string>;
    hideZeroCounts?: pulumi.Input<boolean>;
    query: pulumi.Input<string>;
    showLastTriggered?: pulumi.Input<boolean>;
    sort?: pulumi.Input<string>;
    /**
     * @deprecated This parameter has been deprecated.
     */
    start?: pulumi.Input<number>;
    summaryType?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetNoteDefinition {
    backgroundColor?: pulumi.Input<string>;
    content: pulumi.Input<string>;
    fontSize?: pulumi.Input<string>;
    showTick?: pulumi.Input<boolean>;
    textAlign?: pulumi.Input<string>;
    tickEdge?: pulumi.Input<string>;
    tickPos?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinition {
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionCustomLink>[]>;
    hasSearchBar?: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequest>[]>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequest {
    aggregator?: pulumi.Input<string>;
    alias?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestApmQuery>;
    apmStatsQuery?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestApmStatsQuery>;
    cellDisplayModes?: pulumi.Input<pulumi.Input<string>[]>;
    conditionalFormats?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestConditionalFormat>[]>;
    limit?: pulumi.Input<number>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestLogQuery>;
    order?: pulumi.Input<string>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestSecurityQuery>;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmStatsQuery {
    columns?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumn>[]>;
    env: pulumi.Input<string>;
    name: pulumi.Input<string>;
    primaryTag: pulumi.Input<string>;
    resource?: pulumi.Input<string>;
    rowType: pulumi.Input<string>;
    service: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumn {
    alias?: pulumi.Input<string>;
    cellDisplayMode?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestConditionalFormat {
    comparator: pulumi.Input<string>;
    customBgColor?: pulumi.Input<string>;
    customFgColor?: pulumi.Input<string>;
    hideValue?: pulumi.Input<boolean>;
    imageUrl?: pulumi.Input<string>;
    metric?: pulumi.Input<string>;
    palette: pulumi.Input<string>;
    timeframe?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryTableDefinitionRequestRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryTableDefinitionRequestRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryTableDefinitionRequestSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinition {
    autoscale?: pulumi.Input<boolean>;
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionCustomLink>[]>;
    customUnit?: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    precision?: pulumi.Input<number>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequest>[]>;
    textAlign?: pulumi.Input<string>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequest {
    aggregator?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestApmQuery>;
    conditionalFormats?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestConditionalFormat>[]>;
    formulas?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestFormula>[]>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    queries?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestQuery>[]>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestSecurityQuery>;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestConditionalFormat {
    comparator: pulumi.Input<string>;
    customBgColor?: pulumi.Input<string>;
    customFgColor?: pulumi.Input<string>;
    hideValue?: pulumi.Input<boolean>;
    imageUrl?: pulumi.Input<string>;
    metric?: pulumi.Input<string>;
    palette: pulumi.Input<string>;
    timeframe?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DashboardWidgetQueryValueDefinitionRequestFormula {
    alias?: pulumi.Input<string>;
    formulaExpression: pulumi.Input<string>;
    limit?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestFormulaLimit>;
}

export interface DashboardWidgetQueryValueDefinitionRequestFormulaLimit {
    count?: pulumi.Input<number>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestQuery {
    eventQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQuery>;
    metricQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestQueryMetricQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestQueryProcessQuery>;
}

export interface DashboardWidgetQueryValueDefinitionRequestQueryEventQuery {
    computes: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQueryCompute>[]>;
    dataSource: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBy>[]>;
    indexes?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQuerySearch>;
}

export interface DashboardWidgetQueryValueDefinitionRequestQueryEventQueryCompute {
    aggregation: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    metric?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBy {
    facet: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort>;
}

export interface DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    metric?: pulumi.Input<string>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestQueryEventQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestQueryMetricQuery {
    aggregator?: pulumi.Input<string>;
    dataSource?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestQueryProcessQuery {
    aggregator?: pulumi.Input<string>;
    dataSource: pulumi.Input<string>;
    isNormalizedCpu?: pulumi.Input<boolean>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    name: pulumi.Input<string>;
    sort?: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<string>[]>;
    textFilter?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryValueDefinitionRequestRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryValueDefinitionRequestRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryValueDefinitionRequestSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinition {
    colorByGroups?: pulumi.Input<pulumi.Input<string>[]>;
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionCustomLink>[]>;
    liveSpan?: pulumi.Input<string>;
    request?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequest>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    xaxis?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionXaxis>;
    yaxis?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionYaxis>;
}

export interface DashboardWidgetScatterplotDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequest {
    xes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestX>[]>;
    ys?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestY>[]>;
}

export interface DashboardWidgetScatterplotDefinitionRequestX {
    aggregator?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXProcessQuery>;
    q?: pulumi.Input<string>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQuery>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestY {
    aggregator?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYProcessQuery>;
    q?: pulumi.Input<string>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQuery>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionXaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionYaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetServiceLevelObjectiveDefinition {
    globalTimeTarget?: pulumi.Input<string>;
    showErrorBudget?: pulumi.Input<boolean>;
    sloId: pulumi.Input<string>;
    timeWindows: pulumi.Input<pulumi.Input<string>[]>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    viewMode: pulumi.Input<string>;
    viewType: pulumi.Input<string>;
}

export interface DashboardWidgetServicemapDefinition {
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetServicemapDefinitionCustomLink>[]>;
    filters: pulumi.Input<pulumi.Input<string>[]>;
    service: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetServicemapDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinition {
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionCustomLink>[]>;
    events?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionEvent>[]>;
    legendColumns?: pulumi.Input<pulumi.Input<string>[]>;
    legendLayout?: pulumi.Input<string>;
    legendSize?: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionMarker>[]>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequest>[]>;
    rightYaxis?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRightYaxis>;
    showLegend?: pulumi.Input<boolean>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    yaxis?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionYaxis>;
}

export interface DashboardWidgetTimeseriesDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionEvent {
    q: pulumi.Input<string>;
    tagsExecution?: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionMarker {
    displayType?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestApmQuery>;
    displayType?: pulumi.Input<string>;
    formulas?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestFormula>[]>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestLogQuery>;
    metadatas?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestMetadata>[]>;
    networkQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQuery>;
    onRightYaxis?: pulumi.Input<boolean>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    queries?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestQuery>[]>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQuery>;
    style?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestStyle>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestFormula {
    alias?: pulumi.Input<string>;
    formulaExpression: pulumi.Input<string>;
    limit?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestFormulaLimit>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestFormulaLimit {
    count?: pulumi.Input<number>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestMetadata {
    aliasName?: pulumi.Input<string>;
    expression: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQuery {
    eventQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQuery>;
    metricQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestQueryMetricQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestQueryProcessQuery>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQueryEventQuery {
    computes: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryCompute>[]>;
    dataSource: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBy>[]>;
    indexes?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQuerySearch>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryCompute {
    aggregation: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    metric?: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBy {
    facet: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    metric?: pulumi.Input<string>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQueryEventQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQueryMetricQuery {
    aggregator?: pulumi.Input<string>;
    dataSource?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestQueryProcessQuery {
    aggregator?: pulumi.Input<string>;
    dataSource: pulumi.Input<string>;
    isNormalizedCpu?: pulumi.Input<boolean>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    name: pulumi.Input<string>;
    sort?: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<string>[]>;
    textFilter?: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestStyle {
    lineType?: pulumi.Input<string>;
    lineWidth?: pulumi.Input<string>;
    palette?: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRightYaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionYaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinition {
    customLinks?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionCustomLink>[]>;
    liveSpan?: pulumi.Input<string>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequest>[]>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionCustomLink {
    label: pulumi.Input<string>;
    link: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestApmQuery>;
    conditionalFormats?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestConditionalFormat>[]>;
    formulas?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestFormula>[]>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    queries?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestQuery>[]>;
    rumQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestRumQuery>;
    securityQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestSecurityQuery>;
    style?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestStyle>;
}

export interface DashboardWidgetToplistDefinitionRequestApmQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestApmQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestApmQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestApmQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestApmQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestApmQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortQuery>;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetToplistDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestConditionalFormat {
    comparator: pulumi.Input<string>;
    customBgColor?: pulumi.Input<string>;
    customFgColor?: pulumi.Input<string>;
    hideValue?: pulumi.Input<boolean>;
    imageUrl?: pulumi.Input<string>;
    metric?: pulumi.Input<string>;
    palette: pulumi.Input<string>;
    timeframe?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DashboardWidgetToplistDefinitionRequestFormula {
    alias?: pulumi.Input<string>;
    formulaExpression: pulumi.Input<string>;
    limit?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestFormulaLimit>;
}

export interface DashboardWidgetToplistDefinitionRequestFormulaLimit {
    count?: pulumi.Input<number>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestLogQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestLogQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestLogQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestLogQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestLogQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestLogQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortQuery>;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetToplistDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestQuery {
    eventQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestQueryEventQuery>;
    metricQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestQueryMetricQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestQueryProcessQuery>;
}

export interface DashboardWidgetToplistDefinitionRequestQueryEventQuery {
    computes: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestQueryEventQueryCompute>[]>;
    dataSource: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBy>[]>;
    indexes?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestQueryEventQuerySearch>;
}

export interface DashboardWidgetToplistDefinitionRequestQueryEventQueryCompute {
    aggregation: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    metric?: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBy {
    facet: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBySort>;
}

export interface DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    metric?: pulumi.Input<string>;
    order?: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestQueryEventQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestQueryMetricQuery {
    aggregator?: pulumi.Input<string>;
    dataSource?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestQueryProcessQuery {
    aggregator?: pulumi.Input<string>;
    dataSource: pulumi.Input<string>;
    isNormalizedCpu?: pulumi.Input<boolean>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    name: pulumi.Input<string>;
    sort?: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<string>[]>;
    textFilter?: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestRumQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestRumQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestRumQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestRumQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestRumQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestRumQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestRumQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetToplistDefinitionRequestRumQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetToplistDefinitionRequestRumQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestRumQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortQuery>;
}

export interface DashboardWidgetToplistDefinitionRequestRumQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestRumQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetToplistDefinitionRequestRumQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestSecurityQuery {
    /**
     * @deprecated Define `compute_query` list with one element instead.
     */
    compute?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestSecurityQueryCompute>;
    computeQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestSecurityQueryComputeQuery>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    multiComputes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestSecurityQueryMultiCompute>[]>;
    /**
     * @deprecated Define `search_query` directly instead.
     */
    search?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestSecurityQuerySearch>;
    searchQuery?: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestSecurityQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetToplistDefinitionRequestSecurityQueryComputeQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    /**
     * @deprecated Define `sort_query` list with one element instead.
     */
    sort?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySort>;
    sortQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery>;
}

export interface DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestSecurityQueryMultiCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetToplistDefinitionRequestSecurityQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestStyle {
    palette?: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetTraceServiceDefinition {
    displayFormat?: pulumi.Input<string>;
    env: pulumi.Input<string>;
    liveSpan?: pulumi.Input<string>;
    service: pulumi.Input<string>;
    showBreakdown?: pulumi.Input<boolean>;
    showDistribution?: pulumi.Input<boolean>;
    showErrors?: pulumi.Input<boolean>;
    showHits?: pulumi.Input<boolean>;
    showLatency?: pulumi.Input<boolean>;
    showResourceList?: pulumi.Input<boolean>;
    sizeFormat?: pulumi.Input<string>;
    spanName: pulumi.Input<string>;
    /**
     * @deprecated Define `live_span` directly in the widget definition instead.
     */
    time?: pulumi.Input<inputs.DashboardWidgetTraceServiceDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetTraceServiceDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetWidgetLayout {
    height: pulumi.Input<number>;
    width: pulumi.Input<number>;
    x: pulumi.Input<number>;
    y: pulumi.Input<number>;
}

export interface DowntimeRecurrence {
    /**
     * How often to repeat as an integer. For example to repeat every 3 days, select a type of days and a period of 3.
     */
    period?: pulumi.Input<number>;
    /**
     * The RRULE standard for defining recurring events. For example, to have a recurring event on the first day of each month, use FREQ=MONTHLY;INTERVAL=1. Most common rrule options from the iCalendar Spec are supported. Attributes specifying the duration in RRULE are not supported (for example, DTSTART, DTEND, DURATION).
     */
    rrule?: pulumi.Input<string>;
    /**
     * One of days, weeks, months, or years
     */
    type: pulumi.Input<string>;
    /**
     * The date at which the recurrence should end as a POSIX timestamp. untilOccurrences and untilDate are mutually exclusive.
     */
    untilDate?: pulumi.Input<number>;
    /**
     * How many times the downtime will be rescheduled. untilOccurrences and untilDate are mutually exclusive.
     */
    untilOccurrences?: pulumi.Input<number>;
    /**
     * A list of week days to repeat on. Choose from: Mon, Tue, Wed, Thu, Fri, Sat or Sun. Only applicable when type is weeks. First letter must be capitalized.
     */
    weekDays?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsArchiveAzure {
    clientId: pulumi.Input<string>;
    container: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    storageAccount: pulumi.Input<string>;
    tenantId: pulumi.Input<string>;
}

export interface LogsArchiveAzureArchive {
    /**
     * Your client id.
     */
    clientId: pulumi.Input<string>;
    /**
     * The container where the archive will be stored.
     */
    container: pulumi.Input<string>;
    /**
     * The path where the archive will be stored.
     */
    path?: pulumi.Input<string>;
    /**
     * The associated storage account.
     */
    storageAccount: pulumi.Input<string>;
    /**
     * Your tenant id.
     */
    tenantId: pulumi.Input<string>;
}

export interface LogsArchiveGcs {
    bucket: pulumi.Input<string>;
    clientEmail: pulumi.Input<string>;
    path: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
}

export interface LogsArchiveGcsArchive {
    /**
     * Name of your GCS bucket.
     */
    bucket: pulumi.Input<string>;
    /**
     * Your client email.
     */
    clientEmail: pulumi.Input<string>;
    /**
     * Path where the archive will be stored.
     */
    path: pulumi.Input<string>;
    /**
     * Your project id.
     */
    projectId: pulumi.Input<string>;
}

export interface LogsArchiveS3 {
    accountId: pulumi.Input<string>;
    bucket: pulumi.Input<string>;
    path: pulumi.Input<string>;
    roleName: pulumi.Input<string>;
}

export interface LogsArchiveS3Archive {
    /**
     * Your AWS account id.
     */
    accountId: pulumi.Input<string>;
    /**
     * Name of your s3 bucket.
     */
    bucket: pulumi.Input<string>;
    /**
     * Path where the archive will be stored.
     */
    path: pulumi.Input<string>;
    /**
     * Your AWS role name
     */
    roleName: pulumi.Input<string>;
}

export interface LogsCustomPipelineFilter {
    /**
     * Filter criteria of the category.
     */
    query: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessor {
    /**
     * Arithmetic Processor. More information can be found in the
     */
    arithmeticProcessor?: pulumi.Input<inputs.LogsCustomPipelineProcessorArithmeticProcessor>;
    /**
     * Attribute Remapper Processor. More information can be found in the
     */
    attributeRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorAttributeRemapper>;
    /**
     * Category Processor. More information can be found in the
     */
    categoryProcessor?: pulumi.Input<inputs.LogsCustomPipelineProcessorCategoryProcessor>;
    /**
     * Date Remapper Processor. More information can be found in the
     */
    dateRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorDateRemapper>;
    geoIpParser?: pulumi.Input<inputs.LogsCustomPipelineProcessorGeoIpParser>;
    /**
     * Grok Processor. More information can be found in the
     */
    grokParser?: pulumi.Input<inputs.LogsCustomPipelineProcessorGrokParser>;
    /**
     * Lookup Processor. More information can be found in the
     */
    lookupProcessor?: pulumi.Input<inputs.LogsCustomPipelineProcessorLookupProcessor>;
    /**
     * Message Remapper Processor. More information can be found in the
     */
    messageRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorMessageRemapper>;
    pipeline?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipeline>;
    /**
     * Service Remapper Processor. More information can be found in the
     */
    serviceRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorServiceRemapper>;
    /**
     * Status Remapper Processor. More information can be found in the
     */
    statusRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorStatusRemapper>;
    stringBuilderProcessor?: pulumi.Input<inputs.LogsCustomPipelineProcessorStringBuilderProcessor>;
    traceIdRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorTraceIdRemapper>;
    /**
     * URL Parser Processor. More information can be found in the
     */
    urlParser?: pulumi.Input<inputs.LogsCustomPipelineProcessorUrlParser>;
    userAgentParser?: pulumi.Input<inputs.LogsCustomPipelineProcessorUserAgentParser>;
}

export interface LogsCustomPipelineProcessorArithmeticProcessor {
    expression: pulumi.Input<string>;
    isEnabled?: pulumi.Input<boolean>;
    isReplaceMissing?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorAttributeRemapper {
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    overrideOnConflict?: pulumi.Input<boolean>;
    preserveSource?: pulumi.Input<boolean>;
    sourceType: pulumi.Input<string>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
    target: pulumi.Input<string>;
    targetFormat?: pulumi.Input<string>;
    targetType: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorCategoryProcessor {
    categories: pulumi.Input<pulumi.Input<inputs.LogsCustomPipelineProcessorCategoryProcessorCategory>[]>;
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorCategoryProcessorCategory {
    filter: pulumi.Input<inputs.LogsCustomPipelineProcessorCategoryProcessorCategoryFilter>;
    name: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorCategoryProcessorCategoryFilter {
    /**
     * Filter criteria of the category.
     */
    query: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorDateRemapper {
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorGeoIpParser {
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorGrokParser {
    grok: pulumi.Input<inputs.LogsCustomPipelineProcessorGrokParserGrok>;
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    samples?: pulumi.Input<pulumi.Input<string>[]>;
    source: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorGrokParserGrok {
    matchRules: pulumi.Input<string>;
    supportRules: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorLookupProcessor {
    defaultLookup?: pulumi.Input<string>;
    isEnabled?: pulumi.Input<boolean>;
    lookupTables: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    source: pulumi.Input<string>;
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorMessageRemapper {
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorPipeline {
    filters: pulumi.Input<pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineFilter>[]>;
    isEnabled?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    processors?: pulumi.Input<pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessor>[]>;
}

export interface LogsCustomPipelineProcessorPipelineFilter {
    /**
     * Filter criteria of the category.
     */
    query: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessor {
    /**
     * Arithmetic Processor. More information can be found in the
     */
    arithmeticProcessor?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessor>;
    /**
     * Attribute Remapper Processor. More information can be found in the
     */
    attributeRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorAttributeRemapper>;
    /**
     * Category Processor. More information can be found in the
     */
    categoryProcessor?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessor>;
    /**
     * Date Remapper Processor. More information can be found in the
     */
    dateRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorDateRemapper>;
    geoIpParser?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorGeoIpParser>;
    /**
     * Grok Processor. More information can be found in the
     */
    grokParser?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorGrokParser>;
    /**
     * Lookup Processor. More information can be found in the
     */
    lookupProcessor?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorLookupProcessor>;
    /**
     * Message Remapper Processor. More information can be found in the
     */
    messageRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorMessageRemapper>;
    /**
     * Service Remapper Processor. More information can be found in the
     */
    serviceRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorServiceRemapper>;
    /**
     * Status Remapper Processor. More information can be found in the
     */
    statusRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorStatusRemapper>;
    stringBuilderProcessor?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessor>;
    traceIdRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapper>;
    /**
     * URL Parser Processor. More information can be found in the
     */
    urlParser?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorUrlParser>;
    userAgentParser?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorUserAgentParser>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessor {
    expression: pulumi.Input<string>;
    isEnabled?: pulumi.Input<boolean>;
    isReplaceMissing?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorAttributeRemapper {
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    overrideOnConflict?: pulumi.Input<boolean>;
    preserveSource?: pulumi.Input<boolean>;
    sourceType: pulumi.Input<string>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
    target: pulumi.Input<string>;
    targetFormat?: pulumi.Input<string>;
    targetType: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorCategoryProcessor {
    categories: pulumi.Input<pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategory>[]>;
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategory {
    filter: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilter>;
    name: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilter {
    /**
     * Filter criteria of the category.
     */
    query: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorDateRemapper {
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorGeoIpParser {
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorGrokParser {
    grok: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorGrokParserGrok>;
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    samples?: pulumi.Input<pulumi.Input<string>[]>;
    source: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorGrokParserGrok {
    matchRules: pulumi.Input<string>;
    supportRules: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorLookupProcessor {
    defaultLookup?: pulumi.Input<string>;
    isEnabled?: pulumi.Input<boolean>;
    lookupTables: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    source: pulumi.Input<string>;
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorMessageRemapper {
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorServiceRemapper {
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorStatusRemapper {
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessor {
    isEnabled?: pulumi.Input<boolean>;
    isReplaceMissing?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    target: pulumi.Input<string>;
    template: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapper {
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorUrlParser {
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    normalizeEndingSlashes?: pulumi.Input<boolean>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorUserAgentParser {
    isEnabled?: pulumi.Input<boolean>;
    isEncoded?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorServiceRemapper {
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorStatusRemapper {
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorStringBuilderProcessor {
    isEnabled?: pulumi.Input<boolean>;
    isReplaceMissing?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    target: pulumi.Input<string>;
    template: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorTraceIdRemapper {
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorUrlParser {
    isEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    normalizeEndingSlashes?: pulumi.Input<boolean>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorUserAgentParser {
    isEnabled?: pulumi.Input<boolean>;
    isEncoded?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    sources: pulumi.Input<pulumi.Input<string>[]>;
    target: pulumi.Input<string>;
}

export interface LogsIndexExclusionFilter {
    filters?: pulumi.Input<pulumi.Input<inputs.LogsIndexExclusionFilterFilter>[]>;
    /**
     * A boolean stating if the exclusion is active or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the exclusion filter.
     */
    name?: pulumi.Input<string>;
}

export interface LogsIndexExclusionFilterFilter {
    /**
     * Logs filter criteria. Only logs matching this filter criteria are considered for this index.
     */
    query?: pulumi.Input<string>;
    sampleRate?: pulumi.Input<number>;
}

export interface LogsIndexFilter {
    /**
     * Logs filter criteria. Only logs matching this filter criteria are considered for this index.
     */
    query: pulumi.Input<string>;
}

export interface LogsMetricCompute {
    /**
     * The type of aggregation to use. This field can't be updated after creation.
     */
    aggregationType: pulumi.Input<string>;
    /**
     * The path to the value the log-based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
     */
    path?: pulumi.Input<string>;
}

export interface LogsMetricFilter {
    /**
     * The search query - following the log search syntax.
     */
    query: pulumi.Input<string>;
}

export interface LogsMetricGroupBy {
    /**
     * The path to the value the log-based metric will be aggregated over.
     */
    path: pulumi.Input<string>;
    /**
     * Name of the tag that gets created.
     */
    tagName: pulumi.Input<string>;
}

export interface MonitorMonitorThresholdWindows {
    /**
     * Describes how long an anomalous metric must be normal before the alert recovers.
     */
    recoveryWindow?: pulumi.Input<string>;
    /**
     * Describes how long a metric must be anomalous before an alert triggers.
     */
    triggerWindow?: pulumi.Input<string>;
}

export interface MonitorMonitorThresholds {
    /**
     * The monitor CRITICAL recovery threshold. Must be a number.
     */
    critical?: pulumi.Input<string>;
    /**
     * The monitor CRITICAL recovery threshold. Must be a number.
     */
    criticalRecovery?: pulumi.Input<string>;
    /**
     * The monitor OK threshold. Must be a number.
     */
    ok?: pulumi.Input<string>;
    /**
     * The monitor UNKNOWN threshold. Must be a number.
     */
    unknown?: pulumi.Input<string>;
    /**
     * The monitor WARNING threshold. Must be a number.
     */
    warning?: pulumi.Input<string>;
    /**
     * The monitor WARNING recovery threshold. Must be a number.
     */
    warningRecovery?: pulumi.Input<string>;
}

export interface MonitorThresholdWindows {
    recoveryWindow?: pulumi.Input<string>;
    triggerWindow?: pulumi.Input<string>;
}

export interface MonitorThresholds {
    critical?: pulumi.Input<number>;
    criticalRecovery?: pulumi.Input<number>;
    ok?: pulumi.Input<number>;
    unknown?: pulumi.Input<number>;
    warning?: pulumi.Input<number>;
    warningRecovery?: pulumi.Input<number>;
}

export interface RolePermission {
    /**
     * ID of the permission to assign.
     */
    id: pulumi.Input<string>;
    /**
     * Name of the permission.
     */
    name?: pulumi.Input<string>;
}

export interface ScreenBoardTemplateVariable {
    default?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}

export interface ScreenBoardWidget {
    alertId?: pulumi.Input<number>;
    autoRefresh?: pulumi.Input<boolean>;
    bgcolor?: pulumi.Input<string>;
    check?: pulumi.Input<string>;
    color?: pulumi.Input<string>;
    colorPreference?: pulumi.Input<string>;
    columns?: pulumi.Input<string>;
    displayFormat?: pulumi.Input<string>;
    env?: pulumi.Input<string>;
    eventSize?: pulumi.Input<string>;
    fontSize?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    grouping?: pulumi.Input<string>;
    height?: pulumi.Input<number>;
    hideZeroCounts?: pulumi.Input<boolean>;
    html?: pulumi.Input<string>;
    layoutVersion?: pulumi.Input<string>;
    legend?: pulumi.Input<boolean>;
    legendSize?: pulumi.Input<string>;
    logset?: pulumi.Input<string>;
    manageStatusShowTitle?: pulumi.Input<boolean>;
    manageStatusTitleAlign?: pulumi.Input<string>;
    manageStatusTitleSize?: pulumi.Input<string>;
    manageStatusTitleText?: pulumi.Input<string>;
    margin?: pulumi.Input<string>;
    monitor?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    mustShowBreakdown?: pulumi.Input<boolean>;
    mustShowDistribution?: pulumi.Input<boolean>;
    mustShowErrors?: pulumi.Input<boolean>;
    mustShowHits?: pulumi.Input<boolean>;
    mustShowLatency?: pulumi.Input<boolean>;
    mustShowResourceList?: pulumi.Input<boolean>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    precision?: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidgetRule>[]>;
    serviceName?: pulumi.Input<string>;
    serviceService?: pulumi.Input<string>;
    showLastTriggered?: pulumi.Input<boolean>;
    sizeVersion?: pulumi.Input<string>;
    sizing?: pulumi.Input<string>;
    summaryType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    text?: pulumi.Input<string>;
    textAlign?: pulumi.Input<string>;
    textSize?: pulumi.Input<string>;
    tick?: pulumi.Input<boolean>;
    tickEdge?: pulumi.Input<string>;
    tickPos?: pulumi.Input<string>;
    tileDeves?: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidgetTileDef>[]>;
    time?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeframes?: pulumi.Input<pulumi.Input<string>[]>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<number>;
    type: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    vizType?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
    x: pulumi.Input<number>;
    y: pulumi.Input<number>;
}

export interface ScreenBoardWidgetRule {
    color?: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
    timeframe?: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDef {
    autoscale?: pulumi.Input<boolean>;
    customUnit?: pulumi.Input<string>;
    events?: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidgetTileDefEvent>[]>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    markers?: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidgetTileDefMarker>[]>;
    noGroupHosts?: pulumi.Input<boolean>;
    noMetricHosts?: pulumi.Input<boolean>;
    nodeType?: pulumi.Input<string>;
    precision?: pulumi.Input<string>;
    requests: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidgetTileDefRequest>[]>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    style?: pulumi.Input<{[key: string]: any}>;
    textAlign?: pulumi.Input<string>;
    viz: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefEvent {
    q: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefMarker {
    label?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequest {
    aggregator?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestApmQuery>;
    changeType?: pulumi.Input<string>;
    compareTo?: pulumi.Input<string>;
    conditionalFormats?: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestConditionalFormat>[]>;
    extraCol?: pulumi.Input<string>;
    increaseGood?: pulumi.Input<boolean>;
    limit?: pulumi.Input<number>;
    logQuery?: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestLogQuery>;
    metadataJson?: pulumi.Input<string>;
    metric?: pulumi.Input<string>;
    orderBy?: pulumi.Input<string>;
    orderDir?: pulumi.Input<string>;
    processQuery?: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestProcessQuery>;
    q?: pulumi.Input<string>;
    queryType?: pulumi.Input<string>;
    style?: pulumi.Input<{[key: string]: any}>;
    tagFilters?: pulumi.Input<pulumi.Input<string>[]>;
    textFilter?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequestApmQuery {
    compute: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestApmQuerySearch>;
}

export interface ScreenBoardWidgetTileDefRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequestApmQueryGroupBy {
    facet: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestApmQueryGroupBySort>;
}

export interface ScreenBoardWidgetTileDefRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequestConditionalFormat {
    color?: pulumi.Input<string>;
    comparator: pulumi.Input<string>;
    customBgColor?: pulumi.Input<string>;
    invert?: pulumi.Input<boolean>;
    palette?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequestLogQuery {
    compute: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestLogQuerySearch>;
}

export interface ScreenBoardWidgetTileDefRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequestLogQueryGroupBy {
    facet: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestLogQueryGroupBySort>;
}

export interface ScreenBoardWidgetTileDefRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface SecurityMonitoringRuleCase {
    /**
     * A rule case contains logical operations (>,>=, &&, ||) to determine if a signal should be generated based on the event counts in the previously defined queries.
     */
    condition?: pulumi.Input<string>;
    /**
     * Name of the case.
     */
    name?: pulumi.Input<string>;
    /**
     * Notification targets for each rule case.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Severity of the Security Signal.
     */
    status: pulumi.Input<string>;
}

export interface SecurityMonitoringRuleOptions {
    /**
     * A time window is specified to match when at least one of the cases matches true. This is a sliding window and evaluates in real time.
     */
    evaluationWindow: pulumi.Input<number>;
    /**
     * Once a signal is generated, the signal will remain “open” if a case is matched at least once within this keep alive window.
     */
    keepAlive: pulumi.Input<number>;
    maxSignalDuration: pulumi.Input<number>;
}

export interface SecurityMonitoringRuleQuery {
    /**
     * The aggregation type.
     */
    aggregation?: pulumi.Input<string>;
    /**
     * Field for which the cardinality is measured. Sent as an array.
     */
    distinctFields?: pulumi.Input<pulumi.Input<string>[]>;
    groupByFields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The target field to aggregate over when using the sum or max aggregations.
     */
    metric?: pulumi.Input<string>;
    /**
     * Name of the query.
     */
    name?: pulumi.Input<string>;
    /**
     * Query to run on logs.
     */
    query: pulumi.Input<string>;
}

export interface ServiceLevelObjectiveQuery {
    /**
     * The sum of the total events.
     */
    denominator: pulumi.Input<string>;
    /**
     * The sum of all the good events.
     */
    numerator: pulumi.Input<string>;
}

export interface ServiceLevelObjectiveThreshold {
    /**
     * The objective's target in[0,100].
     */
    target: pulumi.Input<number>;
    /**
     * A string representation of the target that indicates its precision. It uses trailing zeros to show significant decimal places (e.g. 98.00).
     */
    targetDisplay?: pulumi.Input<string>;
    /**
     * The time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Available options to choose from are: 7d, 30d, 90d.
     */
    timeframe: pulumi.Input<string>;
    /**
     * The objective's warning value in [0,100]. This must be greater than the target value.
     */
    warning?: pulumi.Input<number>;
    /**
     * A string representation of the warning target (see the description of the targetDisplay field for details).
     */
    warningDisplay?: pulumi.Input<string>;
}

export interface SyntheticsGlobalVariableParseTestOptions {
    /**
     * Required when type = http_header. Defines the header to use to extract the value
     */
    field?: pulumi.Input<string>;
    parser: pulumi.Input<inputs.SyntheticsGlobalVariableParseTestOptionsParser>;
    /**
     * Defines the source to use to extract the value. Allowed enum values: http_body, http_header.
     */
    type: pulumi.Input<string>;
}

export interface SyntheticsGlobalVariableParseTestOptionsParser {
    type: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SyntheticsTestApiStep {
    /**
     * Assertions used for the test. Multiple assertion blocks are allowed with the structure below.
     */
    assertions?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestApiStepAssertion>[]>;
    /**
     * Values to parse and save as variables from the response.
     */
    extractedValues?: pulumi.Input<pulumi.Input<inputs.SyntheticsTestApiStepExtractedValue>[]>;
    /**
     * The name of the step.
     */
    name: pulumi.Input<string>;
    /**
     * The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
     */
    requestBasicauth?: pulumi.Input<inputs.SyntheticsTestApiStepRequestBasicauth>;
    requestClientCertificate?: pulumi.Input<inputs.SyntheticsTestApiStepRequestClientCertificate>;
    /**
     * The request for the api step.
     */
    requestDefinition?: pulumi.Input<inputs.SyntheticsTestApiStepRequestDefinition>;
    /**
     * Header name and value map.
     */
    requestHeaders?: pulumi.Input<{[key: string]: any}>;
    /**
     * Query arguments name and value map.
     */
    requestQuery?: pulumi.Input<{[key: string]: any}>;
    /**
     * The subtype of the Synthetic multistep API test step, currently only supporting http.
     */
    subtype?: pulumi.Input<string>;
}

export interface SyntheticsTestApiStepAssertion {
    /**
     * Assertion operator.  Only some combinations of type and operator are valid (please refer to ).
     */
    operator: pulumi.Input<string>;
    /**
     * If assertion type is header, this is the header name.
     */
    property?: pulumi.Input<string>;
    /**
     * Expected value. Depends on the assertion type, refer to  for details.
     */
    target?: pulumi.Input<string>;
    /**
     * Expected structure if operator is validatesJSONPath. Exactly one nested block is allowed with the structure below.
     */
    targetjsonpath?: pulumi.Input<inputs.SyntheticsTestApiStepAssertionTargetjsonpath>;
    /**
     * Type of assertion. Choose from body, header, responseTime, statusCode.  Only some combinations of type and operator are valid (please refer to ).
     */
    type: pulumi.Input<string>;
}

export interface SyntheticsTestApiStepAssertionTargetjsonpath {
    jsonpath: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    targetvalue: pulumi.Input<string>;
}

export interface SyntheticsTestApiStepExtractedValue {
    field?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    parser: pulumi.Input<inputs.SyntheticsTestApiStepExtractedValueParser>;
    type: pulumi.Input<string>;
}

export interface SyntheticsTestApiStepExtractedValueParser {
    type: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SyntheticsTestApiStepRequestBasicauth {
    /**
     * Password for authentication.
     */
    password: pulumi.Input<string>;
    /**
     * Username for authentication.
     */
    username: pulumi.Input<string>;
}

export interface SyntheticsTestApiStepRequestClientCertificate {
    cert: pulumi.Input<inputs.SyntheticsTestApiStepRequestClientCertificateCert>;
    key: pulumi.Input<inputs.SyntheticsTestApiStepRequestClientCertificateKey>;
}

export interface SyntheticsTestApiStepRequestClientCertificateCert {
    content: pulumi.Input<string>;
    filename?: pulumi.Input<string>;
}

export interface SyntheticsTestApiStepRequestClientCertificateKey {
    content: pulumi.Input<string>;
    filename?: pulumi.Input<string>;
}

export interface SyntheticsTestApiStepRequestDefinition {
    /**
     * The request body.
     */
    body?: pulumi.Input<string>;
    /**
     * DNS server to use for DNS tests (subtype = "dns").
     */
    dnsServer?: pulumi.Input<string>;
    /**
     * Host name to perform the test with.
     */
    host?: pulumi.Input<string>;
    /**
     * The HTTP method. One of DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT.
     */
    method?: pulumi.Input<string>;
    noSavingResponseBody?: pulumi.Input<boolean>;
    /**
     * Port to use when performing the test.
     */
    port?: pulumi.Input<number>;
    /**
     * Timeout in seconds for the test. Defaults to 60.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The URL to send the request to.
     */
    url?: pulumi.Input<string>;
}

export interface SyntheticsTestBrowserStep {
    /**
     * Determines if the step should be allowed to fail.
     */
    allowFailure?: pulumi.Input<boolean>;
    forceElementUpdate?: pulumi.Input<boolean>;
    /**
     * Name of the step.
     */
    name: pulumi.Input<string>;
    /**
     * Parameters for the step.
     */
    params: pulumi.Input<inputs.SyntheticsTestBrowserStepParams>;
    /**
     * Used to override the default timeout of a step.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Type of the step. Refer to  for the complete list of available types.
     */
    type: pulumi.Input<string>;
}

export interface SyntheticsTestBrowserStepParams {
    attribute?: pulumi.Input<string>;
    check?: pulumi.Input<string>;
    clickType?: pulumi.Input<string>;
    code?: pulumi.Input<string>;
    delay?: pulumi.Input<number>;
    element?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    file?: pulumi.Input<string>;
    files?: pulumi.Input<string>;
    modifiers?: pulumi.Input<pulumi.Input<string>[]>;
    playingTabId?: pulumi.Input<string>;
    request?: pulumi.Input<string>;
    subtestPublicId?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    variable?: pulumi.Input<inputs.SyntheticsTestBrowserStepParamsVariable>;
    withClick?: pulumi.Input<boolean>;
    x?: pulumi.Input<number>;
    y?: pulumi.Input<number>;
}

export interface SyntheticsTestBrowserStepParamsVariable {
    /**
     * Example for the variable.
     */
    example?: pulumi.Input<string>;
    /**
     * Name of the variable.
     */
    name?: pulumi.Input<string>;
}

export interface SyntheticsTestBrowserVariable {
    /**
     * Example for the variable.
     */
    example?: pulumi.Input<string>;
    /**
     * ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type global.
     */
    id?: pulumi.Input<string>;
    /**
     * Name of the variable.
     */
    name: pulumi.Input<string>;
    /**
     * Pattern of the variable.
     */
    pattern?: pulumi.Input<string>;
    /**
     * Type of browser test variable. Allowed enum values: element, email, global, javascript, text.
     */
    type: pulumi.Input<string>;
}

export interface SyntheticsTestConfigVariable {
    /**
     * Example for the variable.
     */
    example?: pulumi.Input<string>;
    /**
     * Name of the variable.
     */
    name: pulumi.Input<string>;
    /**
     * Pattern of the variable.
     */
    pattern?: pulumi.Input<string>;
    /**
     * Type of test configuration variable. Allowed enum values: text.
     */
    type: pulumi.Input<string>;
}

export interface SyntheticsTestOptions {
    acceptSelfSigned?: pulumi.Input<boolean>;
    allowInsecure?: pulumi.Input<boolean>;
    followRedirects?: pulumi.Input<boolean>;
    minFailureDuration?: pulumi.Input<number>;
    minLocationFailed?: pulumi.Input<number>;
    retryCount?: pulumi.Input<number>;
    retryInterval?: pulumi.Input<number>;
    tickEvery: pulumi.Input<number>;
}

export interface SyntheticsTestOptionsList {
    acceptSelfSigned?: pulumi.Input<boolean>;
    /**
     * Allows loading insecure content for an HTTP test.
     */
    allowInsecure?: pulumi.Input<boolean>;
    /**
     * For API HTTP test, whether or not the test should follow redirects.
     */
    followRedirects?: pulumi.Input<boolean>;
    minFailureDuration?: pulumi.Input<number>;
    minLocationFailed?: pulumi.Input<number>;
    monitorOptions?: pulumi.Input<inputs.SyntheticsTestOptionsListMonitorOptions>;
    /**
     * Prevents saving screenshots of the steps.
     */
    noScreenshot?: pulumi.Input<boolean>;
    retry?: pulumi.Input<inputs.SyntheticsTestOptionsListRetry>;
    /**
     * How often the test should run (in seconds). Current possible values are 900, 1800, 3600, 21600, 43200, 86400, 604800 plus 60 for API tests or 300 for browser tests.
     */
    tickEvery: pulumi.Input<number>;
}

export interface SyntheticsTestOptionsListMonitorOptions {
    renotifyInterval?: pulumi.Input<number>;
}

export interface SyntheticsTestOptionsListRetry {
    count?: pulumi.Input<number>;
    interval?: pulumi.Input<number>;
}

export interface SyntheticsTestRequest {
    body?: pulumi.Input<string>;
    dnsServer?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    noSavingResponseBody?: pulumi.Input<boolean>;
    port?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    url?: pulumi.Input<string>;
}

export interface SyntheticsTestRequestBasicauth {
    /**
     * Password for authentication.
     */
    password: pulumi.Input<string>;
    /**
     * Username for authentication.
     */
    username: pulumi.Input<string>;
}

export interface SyntheticsTestRequestClientCertificate {
    cert: pulumi.Input<inputs.SyntheticsTestRequestClientCertificateCert>;
    key: pulumi.Input<inputs.SyntheticsTestRequestClientCertificateKey>;
}

export interface SyntheticsTestRequestClientCertificateCert {
    content: pulumi.Input<string>;
    filename?: pulumi.Input<string>;
}

export interface SyntheticsTestRequestClientCertificateKey {
    content: pulumi.Input<string>;
    filename?: pulumi.Input<string>;
}

export interface SyntheticsTestRequestDefinition {
    /**
     * The request body.
     */
    body?: pulumi.Input<string>;
    /**
     * DNS server to use for DNS tests (subtype = "dns").
     */
    dnsServer?: pulumi.Input<string>;
    /**
     * Host name to perform the test with.
     */
    host?: pulumi.Input<string>;
    /**
     * The HTTP method. One of DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT.
     */
    method?: pulumi.Input<string>;
    noSavingResponseBody?: pulumi.Input<boolean>;
    /**
     * Port to use when performing the test.
     */
    port?: pulumi.Input<number>;
    /**
     * Timeout in seconds for the test. Defaults to 60.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The URL to send the request to.
     */
    url?: pulumi.Input<string>;
}

export interface SyntheticsTestStep {
    /**
     * Determines if the step should be allowed to fail.
     */
    allowFailure?: pulumi.Input<boolean>;
    forceElementUpdate?: pulumi.Input<boolean>;
    /**
     * Name of the step.
     */
    name: pulumi.Input<string>;
    /**
     * Parameters for the step as JSON string.
     */
    params: pulumi.Input<string>;
    /**
     * Used to override the default timeout of a step.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Type of the step. Refer to  for the complete list of available types.
     */
    type: pulumi.Input<string>;
}

export interface SyntheticsTestVariable {
    /**
     * Example for the variable.
     */
    example?: pulumi.Input<string>;
    /**
     * ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type global.
     */
    id?: pulumi.Input<string>;
    /**
     * Name of the variable.
     */
    name: pulumi.Input<string>;
    /**
     * Pattern of the variable.
     */
    pattern?: pulumi.Input<string>;
    /**
     * Type of browser test variable. Allowed enum values: element, email, global, javascript, text.
     */
    type: pulumi.Input<string>;
}

export interface TimeBoardGraph {
    autoscale?: pulumi.Input<boolean>;
    customUnit?: pulumi.Input<string>;
    events?: pulumi.Input<pulumi.Input<string>[]>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    includeNoMetricHosts?: pulumi.Input<boolean>;
    includeUngroupedHosts?: pulumi.Input<boolean>;
    markers?: pulumi.Input<pulumi.Input<inputs.TimeBoardGraphMarker>[]>;
    nodeType?: pulumi.Input<string>;
    precision?: pulumi.Input<string>;
    requests: pulumi.Input<pulumi.Input<inputs.TimeBoardGraphRequest>[]>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    style?: pulumi.Input<{[key: string]: any}>;
    textAlign?: pulumi.Input<string>;
    title: pulumi.Input<string>;
    viz: pulumi.Input<string>;
    yaxis?: pulumi.Input<{[key: string]: any}>;
}

export interface TimeBoardGraphMarker {
    label?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface TimeBoardGraphRequest {
    aggregator?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.TimeBoardGraphRequestApmQuery>;
    changeType?: pulumi.Input<string>;
    compareTo?: pulumi.Input<string>;
    conditionalFormats?: pulumi.Input<pulumi.Input<inputs.TimeBoardGraphRequestConditionalFormat>[]>;
    extraCol?: pulumi.Input<string>;
    increaseGood?: pulumi.Input<boolean>;
    logQuery?: pulumi.Input<inputs.TimeBoardGraphRequestLogQuery>;
    metadataJson?: pulumi.Input<string>;
    orderBy?: pulumi.Input<string>;
    orderDirection?: pulumi.Input<string>;
    processQuery?: pulumi.Input<inputs.TimeBoardGraphRequestProcessQuery>;
    q?: pulumi.Input<string>;
    stacked?: pulumi.Input<boolean>;
    style?: pulumi.Input<{[key: string]: any}>;
    type?: pulumi.Input<string>;
}

export interface TimeBoardGraphRequestApmQuery {
    compute: pulumi.Input<inputs.TimeBoardGraphRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.TimeBoardGraphRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.TimeBoardGraphRequestApmQuerySearch>;
}

export interface TimeBoardGraphRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface TimeBoardGraphRequestApmQueryGroupBy {
    facet: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.TimeBoardGraphRequestApmQueryGroupBySort>;
}

export interface TimeBoardGraphRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface TimeBoardGraphRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface TimeBoardGraphRequestConditionalFormat {
    comparator: pulumi.Input<string>;
    customBgColor?: pulumi.Input<string>;
    customFgColor?: pulumi.Input<string>;
    palette?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface TimeBoardGraphRequestLogQuery {
    compute: pulumi.Input<inputs.TimeBoardGraphRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.TimeBoardGraphRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.TimeBoardGraphRequestLogQuerySearch>;
}

export interface TimeBoardGraphRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface TimeBoardGraphRequestLogQueryGroupBy {
    facet: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.TimeBoardGraphRequestLogQueryGroupBySort>;
}

export interface TimeBoardGraphRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface TimeBoardGraphRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface TimeBoardGraphRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface TimeBoardTemplateVariable {
    default?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}
export namespace pagerduty {
    export interface IntegrationService {
        /**
         * Your Service name associated service key in Pagerduty.
         */
        serviceKey: pulumi.Input<string>;
        /**
         * Your Service name in PagerDuty.
         */
        serviceName: pulumi.Input<string>;
    }
}
