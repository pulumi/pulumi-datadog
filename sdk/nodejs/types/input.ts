// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";

export interface DashboardListDashItem {
    /**
     * The ID of this dashboard.
     */
    dashId: pulumi.Input<string>;
    /**
     * The type of this dashboard. Available options are: `customTimeboard`, `customScreenboard`, `integrationScreenboard`, `integrationTimeboard`, and `hostTimeboard`
     */
    type: pulumi.Input<string>;
}

export interface DashboardTemplateVariable {
    default?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}

export interface DashboardTemplateVariablePreset {
    name: pulumi.Input<string>;
    templateVariables: pulumi.Input<pulumi.Input<inputs.DashboardTemplateVariablePresetTemplateVariable>[]>;
}

export interface DashboardTemplateVariablePresetTemplateVariable {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface DashboardWidget {
    alertGraphDefinition?: pulumi.Input<inputs.DashboardWidgetAlertGraphDefinition>;
    alertValueDefinition?: pulumi.Input<inputs.DashboardWidgetAlertValueDefinition>;
    changeDefinition?: pulumi.Input<inputs.DashboardWidgetChangeDefinition>;
    checkStatusDefinition?: pulumi.Input<inputs.DashboardWidgetCheckStatusDefinition>;
    distributionDefinition?: pulumi.Input<inputs.DashboardWidgetDistributionDefinition>;
    eventStreamDefinition?: pulumi.Input<inputs.DashboardWidgetEventStreamDefinition>;
    eventTimelineDefinition?: pulumi.Input<inputs.DashboardWidgetEventTimelineDefinition>;
    freeTextDefinition?: pulumi.Input<inputs.DashboardWidgetFreeTextDefinition>;
    groupDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinition>;
    heatmapDefinition?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinition>;
    hostmapDefinition?: pulumi.Input<inputs.DashboardWidgetHostmapDefinition>;
    iframeDefinition?: pulumi.Input<inputs.DashboardWidgetIframeDefinition>;
    imageDefinition?: pulumi.Input<inputs.DashboardWidgetImageDefinition>;
    layout?: pulumi.Input<inputs.DashboardWidgetLayout>;
    logStreamDefinition?: pulumi.Input<inputs.DashboardWidgetLogStreamDefinition>;
    manageStatusDefinition?: pulumi.Input<inputs.DashboardWidgetManageStatusDefinition>;
    noteDefinition?: pulumi.Input<inputs.DashboardWidgetNoteDefinition>;
    queryTableDefinition?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinition>;
    queryValueDefinition?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinition>;
    scatterplotDefinition?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinition>;
    serviceLevelObjectiveDefinition?: pulumi.Input<inputs.DashboardWidgetServiceLevelObjectiveDefinition>;
    timeseriesDefinition?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinition>;
    toplistDefinition?: pulumi.Input<inputs.DashboardWidgetToplistDefinition>;
    traceServiceDefinition?: pulumi.Input<inputs.DashboardWidgetTraceServiceDefinition>;
}

export interface DashboardWidgetAlertGraphDefinition {
    alertId: pulumi.Input<string>;
    time?: pulumi.Input<inputs.DashboardWidgetAlertGraphDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    vizType: pulumi.Input<string>;
}

export interface DashboardWidgetAlertGraphDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetAlertValueDefinition {
    alertId: pulumi.Input<string>;
    precision?: pulumi.Input<number>;
    textAlign?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinition {
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequest>[]>;
    time?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestApmQuery>;
    changeType?: pulumi.Input<string>;
    compareTo?: pulumi.Input<string>;
    increaseGood?: pulumi.Input<boolean>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestLogQuery>;
    orderBy?: pulumi.Input<string>;
    orderDir?: pulumi.Input<string>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    showPresent?: pulumi.Input<boolean>;
}

export interface DashboardWidgetChangeDefinitionRequestApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestApmQuerySearch>;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestApmQueryGroupBySort>;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestLogQuerySearch>;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetChangeDefinitionRequestLogQueryGroupBySort>;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetChangeDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetCheckStatusDefinition {
    check: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    grouping: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    time?: pulumi.Input<inputs.DashboardWidgetCheckStatusDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetCheckStatusDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinition {
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequest>[]>;
    time?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    style?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestStyle>;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestApmQuerySearch>;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySort>;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestLogQuerySearch>;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySort>;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionRequestStyle {
    palette?: pulumi.Input<string>;
}

export interface DashboardWidgetDistributionDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetEventStreamDefinition {
    eventSize?: pulumi.Input<string>;
    query: pulumi.Input<string>;
    time?: pulumi.Input<inputs.DashboardWidgetEventStreamDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetEventStreamDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetEventTimelineDefinition {
    query: pulumi.Input<string>;
    time?: pulumi.Input<inputs.DashboardWidgetEventTimelineDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetEventTimelineDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetFreeTextDefinition {
    color?: pulumi.Input<string>;
    fontSize?: pulumi.Input<string>;
    text: pulumi.Input<string>;
    textAlign?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinition {
    layoutType: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    widgets: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidget>[]>;
}

export interface DashboardWidgetGroupDefinitionWidget {
    alertGraphDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetAlertGraphDefinition>;
    alertValueDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetAlertValueDefinition>;
    changeDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinition>;
    checkStatusDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetCheckStatusDefinition>;
    distributionDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinition>;
    eventStreamDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetEventStreamDefinition>;
    eventTimelineDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetEventTimelineDefinition>;
    freeTextDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetFreeTextDefinition>;
    heatmapDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinition>;
    hostmapDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinition>;
    iframeDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetIframeDefinition>;
    imageDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetImageDefinition>;
    layout?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetLayout>;
    logStreamDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetLogStreamDefinition>;
    manageStatusDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetManageStatusDefinition>;
    noteDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetNoteDefinition>;
    queryTableDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinition>;
    queryValueDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinition>;
    scatterplotDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinition>;
    serviceLevelObjectiveDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition>;
    timeseriesDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinition>;
    toplistDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinition>;
    traceServiceDefinition?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTraceServiceDefinition>;
}

export interface DashboardWidgetGroupDefinitionWidgetAlertGraphDefinition {
    alertId: pulumi.Input<string>;
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    vizType: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetAlertValueDefinition {
    alertId: pulumi.Input<string>;
    precision?: pulumi.Input<number>;
    textAlign?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinition {
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequest>[]>;
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery>;
    changeType?: pulumi.Input<string>;
    compareTo?: pulumi.Input<string>;
    increaseGood?: pulumi.Input<boolean>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery>;
    orderBy?: pulumi.Input<string>;
    orderDir?: pulumi.Input<string>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    showPresent?: pulumi.Input<boolean>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetCheckStatusDefinition {
    check: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    grouping: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinition {
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequest>[]>;
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    style?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle {
    palette?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetEventStreamDefinition {
    eventSize?: pulumi.Input<string>;
    query: pulumi.Input<string>;
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetEventTimelineDefinition {
    query: pulumi.Input<string>;
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetFreeTextDefinition {
    color?: pulumi.Input<string>;
    fontSize?: pulumi.Input<string>;
    text: pulumi.Input<string>;
    textAlign?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinition {
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequest>[]>;
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    yaxis?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    style?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle {
    palette?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinition {
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    noGroupHosts?: pulumi.Input<boolean>;
    noMetricHosts?: pulumi.Input<boolean>;
    nodeType?: pulumi.Input<string>;
    request?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequest>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    style?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyle>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequest {
    fills?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFill>[]>;
    sizes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSize>[]>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFill {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery>;
    q?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSize {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery>;
    q?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyle {
    fillMax?: pulumi.Input<string>;
    fillMin?: pulumi.Input<string>;
    palette?: pulumi.Input<string>;
    paletteFlip?: pulumi.Input<boolean>;
}

export interface DashboardWidgetGroupDefinitionWidgetIframeDefinition {
    url: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetImageDefinition {
    margin?: pulumi.Input<string>;
    sizing?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetLayout {
    height: pulumi.Input<number>;
    width: pulumi.Input<number>;
    x: pulumi.Input<number>;
    y: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetLogStreamDefinition {
    columns?: pulumi.Input<pulumi.Input<string>[]>;
    logset: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetManageStatusDefinition {
    colorPreference?: pulumi.Input<string>;
    count?: pulumi.Input<number>;
    displayFormat?: pulumi.Input<string>;
    hideZeroCounts?: pulumi.Input<boolean>;
    query: pulumi.Input<string>;
    showLastTriggered?: pulumi.Input<boolean>;
    sort?: pulumi.Input<string>;
    start?: pulumi.Input<number>;
    summaryType?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetNoteDefinition {
    backgroundColor?: pulumi.Input<string>;
    content: pulumi.Input<string>;
    fontSize?: pulumi.Input<string>;
    showTick?: pulumi.Input<boolean>;
    textAlign?: pulumi.Input<string>;
    tickEdge?: pulumi.Input<string>;
    tickPos?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinition {
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequest>[]>;
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequest {
    aggregator?: pulumi.Input<string>;
    alias?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery>;
    conditionalFormats?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormat>[]>;
    limit?: pulumi.Input<number>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery>;
    order?: pulumi.Input<string>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormat {
    comparator: pulumi.Input<string>;
    customBgColor?: pulumi.Input<string>;
    customFgColor?: pulumi.Input<string>;
    hideValue?: pulumi.Input<boolean>;
    imageUrl?: pulumi.Input<string>;
    palette: pulumi.Input<string>;
    timeframe?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinition {
    autoscale?: pulumi.Input<boolean>;
    customUnit?: pulumi.Input<string>;
    precision?: pulumi.Input<number>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequest>[]>;
    textAlign?: pulumi.Input<string>;
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequest {
    aggregator?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery>;
    conditionalFormats?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormat>[]>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormat {
    comparator: pulumi.Input<string>;
    customBgColor?: pulumi.Input<string>;
    customFgColor?: pulumi.Input<string>;
    hideValue?: pulumi.Input<boolean>;
    imageUrl?: pulumi.Input<string>;
    palette: pulumi.Input<string>;
    timeframe?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinition {
    colorByGroups?: pulumi.Input<pulumi.Input<string>[]>;
    request?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequest>;
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    xaxis?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis>;
    yaxis?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequest {
    xes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestX>[]>;
    ys?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestY>[]>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestX {
    aggregator?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery>;
    q?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestY {
    aggregator?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery>;
    q?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition {
    showErrorBudget?: pulumi.Input<boolean>;
    sloId: pulumi.Input<string>;
    timeWindows: pulumi.Input<pulumi.Input<string>[]>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    viewMode: pulumi.Input<string>;
    viewType: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinition {
    events?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEvent>[]>;
    legendSize?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarker>[]>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequest>[]>;
    showLegend?: pulumi.Input<boolean>;
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    yaxis?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEvent {
    q: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarker {
    displayType?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery>;
    displayType?: pulumi.Input<string>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery>;
    metadatas?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadata>[]>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    style?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadata {
    aliasName?: pulumi.Input<string>;
    expression: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle {
    lineType?: pulumi.Input<string>;
    lineWidth?: pulumi.Input<string>;
    palette?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinition {
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequest>[]>;
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery>;
    conditionalFormats?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormat>[]>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    style?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormat {
    comparator: pulumi.Input<string>;
    customBgColor?: pulumi.Input<string>;
    customFgColor?: pulumi.Input<string>;
    hideValue?: pulumi.Input<boolean>;
    imageUrl?: pulumi.Input<string>;
    palette: pulumi.Input<string>;
    timeframe?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuerySearch>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySort>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle {
    palette?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTraceServiceDefinition {
    displayFormat?: pulumi.Input<string>;
    env: pulumi.Input<string>;
    service: pulumi.Input<string>;
    showBreakdown?: pulumi.Input<boolean>;
    showDistribution?: pulumi.Input<boolean>;
    showErrors?: pulumi.Input<boolean>;
    showHits?: pulumi.Input<boolean>;
    showLatency?: pulumi.Input<boolean>;
    showResourceList?: pulumi.Input<boolean>;
    sizeFormat?: pulumi.Input<string>;
    spanName: pulumi.Input<string>;
    time?: pulumi.Input<inputs.DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinition {
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequest>[]>;
    time?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    yaxis?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionYaxis>;
}

export interface DashboardWidgetHeatmapDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    style?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestStyle>;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestApmQuerySearch>;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySort>;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestLogQuerySearch>;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySort>;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionRequestStyle {
    palette?: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetHeatmapDefinitionYaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinition {
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    noGroupHosts?: pulumi.Input<boolean>;
    noMetricHosts?: pulumi.Input<boolean>;
    nodeType?: pulumi.Input<string>;
    request?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequest>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    style?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionStyle>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequest {
    fills?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFill>[]>;
    sizes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSize>[]>;
}

export interface DashboardWidgetHostmapDefinitionRequestFill {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillProcessQuery>;
    q?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillApmQuerySearch>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySort>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillLogQuerySearch>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySort>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestFillProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSize {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeProcessQuery>;
    q?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeApmQuerySearch>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySort>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeLogQuerySearch>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySort>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetHostmapDefinitionStyle {
    fillMax?: pulumi.Input<string>;
    fillMin?: pulumi.Input<string>;
    palette?: pulumi.Input<string>;
    paletteFlip?: pulumi.Input<boolean>;
}

export interface DashboardWidgetIframeDefinition {
    url: pulumi.Input<string>;
}

export interface DashboardWidgetImageDefinition {
    margin?: pulumi.Input<string>;
    sizing?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface DashboardWidgetLayout {
    height: pulumi.Input<number>;
    width: pulumi.Input<number>;
    x: pulumi.Input<number>;
    y: pulumi.Input<number>;
}

export interface DashboardWidgetLogStreamDefinition {
    columns?: pulumi.Input<pulumi.Input<string>[]>;
    logset: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    time?: pulumi.Input<inputs.DashboardWidgetLogStreamDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetLogStreamDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetManageStatusDefinition {
    colorPreference?: pulumi.Input<string>;
    count?: pulumi.Input<number>;
    displayFormat?: pulumi.Input<string>;
    hideZeroCounts?: pulumi.Input<boolean>;
    query: pulumi.Input<string>;
    showLastTriggered?: pulumi.Input<boolean>;
    sort?: pulumi.Input<string>;
    start?: pulumi.Input<number>;
    summaryType?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetNoteDefinition {
    backgroundColor?: pulumi.Input<string>;
    content: pulumi.Input<string>;
    fontSize?: pulumi.Input<string>;
    showTick?: pulumi.Input<boolean>;
    textAlign?: pulumi.Input<string>;
    tickEdge?: pulumi.Input<string>;
    tickPos?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinition {
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequest>[]>;
    time?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequest {
    aggregator?: pulumi.Input<string>;
    alias?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestApmQuery>;
    conditionalFormats?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestConditionalFormat>[]>;
    limit?: pulumi.Input<number>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestLogQuery>;
    order?: pulumi.Input<string>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestApmQuerySearch>;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySort>;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestConditionalFormat {
    comparator: pulumi.Input<string>;
    customBgColor?: pulumi.Input<string>;
    customFgColor?: pulumi.Input<string>;
    hideValue?: pulumi.Input<boolean>;
    imageUrl?: pulumi.Input<string>;
    palette: pulumi.Input<string>;
    timeframe?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestLogQuerySearch>;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySort>;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryTableDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinition {
    autoscale?: pulumi.Input<boolean>;
    customUnit?: pulumi.Input<string>;
    precision?: pulumi.Input<number>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequest>[]>;
    textAlign?: pulumi.Input<string>;
    time?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequest {
    aggregator?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestApmQuery>;
    conditionalFormats?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestConditionalFormat>[]>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestApmQuerySearch>;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySort>;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestConditionalFormat {
    comparator: pulumi.Input<string>;
    customBgColor?: pulumi.Input<string>;
    customFgColor?: pulumi.Input<string>;
    hideValue?: pulumi.Input<boolean>;
    imageUrl?: pulumi.Input<string>;
    palette: pulumi.Input<string>;
    timeframe?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestLogQuerySearch>;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySort>;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetQueryValueDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinition {
    colorByGroups?: pulumi.Input<pulumi.Input<string>[]>;
    request?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequest>;
    time?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    xaxis?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionXaxis>;
    yaxis?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionYaxis>;
}

export interface DashboardWidgetScatterplotDefinitionRequest {
    xes?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestX>[]>;
    ys?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestY>[]>;
}

export interface DashboardWidgetScatterplotDefinitionRequestX {
    aggregator?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXProcessQuery>;
    q?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXApmQuerySearch>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySort>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXLogQuerySearch>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySort>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestXProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestY {
    aggregator?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYApmQuery>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYProcessQuery>;
    q?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYApmQuerySearch>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySort>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYLogQuerySearch>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySort>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionRequestYProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionXaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetScatterplotDefinitionYaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetServiceLevelObjectiveDefinition {
    showErrorBudget?: pulumi.Input<boolean>;
    sloId: pulumi.Input<string>;
    timeWindows: pulumi.Input<pulumi.Input<string>[]>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    viewMode: pulumi.Input<string>;
    viewType: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinition {
    events?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionEvent>[]>;
    legendSize?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionMarker>[]>;
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequest>[]>;
    showLegend?: pulumi.Input<boolean>;
    time?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
    yaxis?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionYaxis>;
}

export interface DashboardWidgetTimeseriesDefinitionEvent {
    q: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionMarker {
    displayType?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestApmQuery>;
    displayType?: pulumi.Input<string>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestLogQuery>;
    metadatas?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestMetadata>[]>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    style?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestStyle>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestApmQuerySearch>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySort>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestLogQuerySearch>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySort>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestMetadata {
    aliasName?: pulumi.Input<string>;
    expression: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionRequestStyle {
    lineType?: pulumi.Input<string>;
    lineWidth?: pulumi.Input<string>;
    palette?: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetTimeseriesDefinitionYaxis {
    includeZero?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinition {
    requests?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequest>[]>;
    time?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequest {
    apmQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestApmQuery>;
    conditionalFormats?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestConditionalFormat>[]>;
    logQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestLogQuery>;
    processQuery?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestProcessQuery>;
    q?: pulumi.Input<string>;
    style?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestStyle>;
}

export interface DashboardWidgetToplistDefinitionRequestApmQuery {
    compute: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestApmQuerySearch>;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestApmQueryGroupBySort>;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestConditionalFormat {
    comparator: pulumi.Input<string>;
    customBgColor?: pulumi.Input<string>;
    customFgColor?: pulumi.Input<string>;
    hideValue?: pulumi.Input<boolean>;
    imageUrl?: pulumi.Input<string>;
    palette: pulumi.Input<string>;
    timeframe?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DashboardWidgetToplistDefinitionRequestLogQuery {
    compute: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestLogQuerySearch>;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryGroupBy {
    facet?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.DashboardWidgetToplistDefinitionRequestLogQueryGroupBySort>;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionRequestStyle {
    palette?: pulumi.Input<string>;
}

export interface DashboardWidgetToplistDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DashboardWidgetTraceServiceDefinition {
    displayFormat?: pulumi.Input<string>;
    env: pulumi.Input<string>;
    service: pulumi.Input<string>;
    showBreakdown?: pulumi.Input<boolean>;
    showDistribution?: pulumi.Input<boolean>;
    showErrors?: pulumi.Input<boolean>;
    showHits?: pulumi.Input<boolean>;
    showLatency?: pulumi.Input<boolean>;
    showResourceList?: pulumi.Input<boolean>;
    sizeFormat?: pulumi.Input<string>;
    spanName: pulumi.Input<string>;
    time?: pulumi.Input<inputs.DashboardWidgetTraceServiceDefinitionTime>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<string>;
}

export interface DashboardWidgetTraceServiceDefinitionTime {
    liveSpan?: pulumi.Input<string>;
}

export interface DowntimeRecurrence {
    /**
     * How often to repeat as an integer. For example to repeat every 3 days, select a type of days and a period of 3.
     */
    period: pulumi.Input<number>;
    /**
     * days, weeks, months, or years
     */
    type: pulumi.Input<string>;
    /**
     * The date at which the recurrence should end as a POSIX timestamp. `untilOccurrences` and `untilDate` are mutually exclusive.
     */
    untilDate?: pulumi.Input<number>;
    /**
     * How many times the downtime will be rescheduled. `untilOccurrences` and `untilDate` are mutually exclusive.
     */
    untilOccurrences?: pulumi.Input<number>;
    /**
     * A list of week days to repeat on. Choose from: Mon, Tue, Wed, Thu, Fri, Sat or Sun. Only applicable when type is weeks. First letter must be capitalized.
     */
    weekDays?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineFilter {
    query: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessor {
    arithmeticProcessor?: pulumi.Input<inputs.LogsCustomPipelineProcessorArithmeticProcessor>;
    attributeRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorAttributeRemapper>;
    categoryProcessor?: pulumi.Input<inputs.LogsCustomPipelineProcessorCategoryProcessor>;
    dateRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorDateRemapper>;
    geoIpParser?: pulumi.Input<inputs.LogsCustomPipelineProcessorGeoIpParser>;
    grokParser?: pulumi.Input<inputs.LogsCustomPipelineProcessorGrokParser>;
    messageRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorMessageRemapper>;
    pipeline?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipeline>;
    serviceRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorServiceRemapper>;
    statusRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorStatusRemapper>;
    stringBuilderProcessor?: pulumi.Input<inputs.LogsCustomPipelineProcessorStringBuilderProcessor>;
    traceIdRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorTraceIdRemapper>;
    urlParser?: pulumi.Input<inputs.LogsCustomPipelineProcessorUrlParser>;
    userAgentParser?: pulumi.Input<inputs.LogsCustomPipelineProcessorUserAgentParser>;
}

export interface LogsCustomPipelineProcessorArithmeticProcessor {
    /**
     * Arithmetic operation between one or more log attributes.
     */
    expression: pulumi.Input<string>;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * If it replaces all missing attributes of `template` by an empty string.
     * * trace_id_remapper
     */
    isReplaceMissing?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorAttributeRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * Override the target element if already set.
     */
    overrideOnConflict?: pulumi.Input<boolean>;
    /**
     * Remove or preserve the remapped source element.
     */
    preserveSource?: pulumi.Input<boolean>;
    /**
     * Defines where the sources are from (log `attribute` or `tag`). 
     */
    sourceType: pulumi.Input<string>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: pulumi.Input<string>;
    /**
     * Defines if the target is a log `attribute` or `tag`.
     */
    targetType: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorCategoryProcessor {
    /**
     * List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
     */
    categories: pulumi.Input<pulumi.Input<inputs.LogsCustomPipelineProcessorCategoryProcessorCategory>[]>;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorCategoryProcessorCategory {
    /**
     * Defines the nested pipeline filter. Only logs that match the filter criteria are processed by this pipeline.
     */
    filters: pulumi.Input<pulumi.Input<inputs.LogsCustomPipelineProcessorCategoryProcessorCategoryFilter>[]>;
    /**
     * Name of the processor
     */
    name: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorCategoryProcessorCategoryFilter {
    query: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorDateRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorGeoIpParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorGrokParser {
    grok: pulumi.Input<inputs.LogsCustomPipelineProcessorGrokParserGrok>;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
     */
    samples?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the log attribute to parse.
     * * `grok`
     */
    source: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorGrokParserGrok {
    /**
     * Match rules for your grok parser.
     */
    matchRules: pulumi.Input<string>;
    /**
     * Support rules for your grok parser.
     */
    supportRules: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorMessageRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorPipeline {
    /**
     * Defines the nested pipeline filter. Only logs that match the filter criteria are processed by this pipeline.
     */
    filters: pulumi.Input<pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineFilter>[]>;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name: pulumi.Input<string>;
    /**
     * Processors. Nested pipeline can't take any other nested pipeline as its processor.
     */
    processors?: pulumi.Input<pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessor>[]>;
}

export interface LogsCustomPipelineProcessorPipelineFilter {
    query: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessor {
    arithmeticProcessor?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessor>;
    attributeRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorAttributeRemapper>;
    categoryProcessor?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessor>;
    dateRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorDateRemapper>;
    geoIpParser?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorGeoIpParser>;
    grokParser?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorGrokParser>;
    messageRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorMessageRemapper>;
    serviceRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorServiceRemapper>;
    statusRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorStatusRemapper>;
    stringBuilderProcessor?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessor>;
    traceIdRemapper?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapper>;
    urlParser?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorUrlParser>;
    userAgentParser?: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorUserAgentParser>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessor {
    /**
     * Arithmetic operation between one or more log attributes.
     */
    expression: pulumi.Input<string>;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * If it replaces all missing attributes of `template` by an empty string.
     * * trace_id_remapper
     */
    isReplaceMissing?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorAttributeRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * Override the target element if already set.
     */
    overrideOnConflict?: pulumi.Input<boolean>;
    /**
     * Remove or preserve the remapped source element.
     */
    preserveSource?: pulumi.Input<boolean>;
    /**
     * Defines where the sources are from (log `attribute` or `tag`). 
     */
    sourceType: pulumi.Input<string>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: pulumi.Input<string>;
    /**
     * Defines if the target is a log `attribute` or `tag`.
     */
    targetType: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorCategoryProcessor {
    /**
     * List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
     */
    categories: pulumi.Input<pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategory>[]>;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategory {
    /**
     * Defines the nested pipeline filter. Only logs that match the filter criteria are processed by this pipeline.
     */
    filters: pulumi.Input<pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilter>[]>;
    /**
     * Name of the processor
     */
    name: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilter {
    query: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorDateRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorGeoIpParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorGrokParser {
    grok: pulumi.Input<inputs.LogsCustomPipelineProcessorPipelineProcessorGrokParserGrok>;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
     */
    samples?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the log attribute to parse.
     * * `grok`
     */
    source: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorGrokParserGrok {
    /**
     * Match rules for your grok parser.
     */
    matchRules: pulumi.Input<string>;
    /**
     * Support rules for your grok parser.
     */
    supportRules: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorMessageRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorServiceRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorStatusRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessor {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * If it replaces all missing attributes of `template` by an empty string.
     * * trace_id_remapper
     */
    isReplaceMissing?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: pulumi.Input<string>;
    /**
     * The formula with one or more attributes and raw text.
     */
    template: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorUrlParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * Normalize the ending slashes or not.
     */
    normalizeEndingSlashes?: pulumi.Input<boolean>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorPipelineProcessorUserAgentParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * If the source attribute is URL encoded or not.
     */
    isEncoded?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorServiceRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorStatusRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorStringBuilderProcessor {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * If it replaces all missing attributes of `template` by an empty string.
     * * trace_id_remapper
     */
    isReplaceMissing?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: pulumi.Input<string>;
    /**
     * The formula with one or more attributes and raw text.
     */
    template: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorTraceIdRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogsCustomPipelineProcessorUrlParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * Normalize the ending slashes or not.
     */
    normalizeEndingSlashes?: pulumi.Input<boolean>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: pulumi.Input<string>;
}

export interface LogsCustomPipelineProcessorUserAgentParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * If the source attribute is URL encoded or not.
     */
    isEncoded?: pulumi.Input<boolean>;
    /**
     * Name of the processor
     */
    name?: pulumi.Input<string>;
    /**
     * List of source attributes.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: pulumi.Input<string>;
}

export interface LogsIndexExclusionFilter {
    filters?: pulumi.Input<pulumi.Input<inputs.LogsIndexExclusionFilterFilter>[]>;
    /**
     * A boolean stating if the exclusion is active or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the exclusion filter.
     */
    name?: pulumi.Input<string>;
}

export interface LogsIndexExclusionFilterFilter {
    /**
     * Only logs matching the filter criteria and the query of the parent index will be considered for this exclusion filter.
     */
    query?: pulumi.Input<string>;
    /**
     * The fraction of logs excluded by the exclusion filter, when active.
     */
    sampleRate?: pulumi.Input<number>;
}

export interface LogsIndexFilter {
    /**
     * Only logs matching the filter criteria and the query of the parent index will be considered for this exclusion filter.
     */
    query: pulumi.Input<string>;
}

export interface MonitorThresholdWindows {
    /**
     * describes how long an anomalous metric must be normal before the alert recovers.
     */
    recoveryWindow?: pulumi.Input<string>;
    /**
     * describes how long a metric must be anomalous before an alert triggers.
     */
    triggerWindow?: pulumi.Input<string>;
}

export interface MonitorThresholds {
    critical?: pulumi.Input<number>;
    criticalRecovery?: pulumi.Input<number>;
    ok?: pulumi.Input<number>;
    unknown?: pulumi.Input<number>;
    warning?: pulumi.Input<number>;
    warningRecovery?: pulumi.Input<number>;
}

export interface ScreenBoardTemplateVariable {
    default?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}

export interface ScreenBoardWidget {
    alertId?: pulumi.Input<number>;
    autoRefresh?: pulumi.Input<boolean>;
    bgcolor?: pulumi.Input<string>;
    check?: pulumi.Input<string>;
    color?: pulumi.Input<string>;
    colorPreference?: pulumi.Input<string>;
    columns?: pulumi.Input<string>;
    displayFormat?: pulumi.Input<string>;
    env?: pulumi.Input<string>;
    eventSize?: pulumi.Input<string>;
    fontSize?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    grouping?: pulumi.Input<string>;
    height?: pulumi.Input<number>;
    hideZeroCounts?: pulumi.Input<boolean>;
    html?: pulumi.Input<string>;
    layoutVersion?: pulumi.Input<string>;
    legend?: pulumi.Input<boolean>;
    legendSize?: pulumi.Input<string>;
    logset?: pulumi.Input<string>;
    manageStatusShowTitle?: pulumi.Input<boolean>;
    manageStatusTitleAlign?: pulumi.Input<string>;
    manageStatusTitleSize?: pulumi.Input<string>;
    manageStatusTitleText?: pulumi.Input<string>;
    margin?: pulumi.Input<string>;
    monitor?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    mustShowBreakdown?: pulumi.Input<boolean>;
    mustShowDistribution?: pulumi.Input<boolean>;
    mustShowErrors?: pulumi.Input<boolean>;
    mustShowHits?: pulumi.Input<boolean>;
    mustShowLatency?: pulumi.Input<boolean>;
    mustShowResourceList?: pulumi.Input<boolean>;
    params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    precision?: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidgetRule>[]>;
    serviceName?: pulumi.Input<string>;
    serviceService?: pulumi.Input<string>;
    showLastTriggered?: pulumi.Input<boolean>;
    sizeVersion?: pulumi.Input<string>;
    sizing?: pulumi.Input<string>;
    summaryType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    text?: pulumi.Input<string>;
    textAlign?: pulumi.Input<string>;
    textSize?: pulumi.Input<string>;
    tick?: pulumi.Input<boolean>;
    tickEdge?: pulumi.Input<string>;
    tickPos?: pulumi.Input<string>;
    tileDeves?: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidgetTileDef>[]>;
    time?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeframes?: pulumi.Input<pulumi.Input<string>[]>;
    title?: pulumi.Input<string>;
    titleAlign?: pulumi.Input<string>;
    titleSize?: pulumi.Input<number>;
    type: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    vizType?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
    x: pulumi.Input<number>;
    y: pulumi.Input<number>;
}

export interface ScreenBoardWidgetRule {
    color?: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
    timeframe?: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDef {
    autoscale?: pulumi.Input<boolean>;
    customUnit?: pulumi.Input<string>;
    events?: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidgetTileDefEvent>[]>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    markers?: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidgetTileDefMarker>[]>;
    noGroupHosts?: pulumi.Input<boolean>;
    noMetricHosts?: pulumi.Input<boolean>;
    nodeType?: pulumi.Input<string>;
    precision?: pulumi.Input<string>;
    requests: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidgetTileDefRequest>[]>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    style?: pulumi.Input<{[key: string]: any}>;
    textAlign?: pulumi.Input<string>;
    viz: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefEvent {
    q: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefMarker {
    label?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequest {
    aggregator?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestApmQuery>;
    changeType?: pulumi.Input<string>;
    compareTo?: pulumi.Input<string>;
    conditionalFormats?: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestConditionalFormat>[]>;
    extraCol?: pulumi.Input<string>;
    increaseGood?: pulumi.Input<boolean>;
    limit?: pulumi.Input<number>;
    logQuery?: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestLogQuery>;
    metadataJson?: pulumi.Input<string>;
    metric?: pulumi.Input<string>;
    orderBy?: pulumi.Input<string>;
    orderDir?: pulumi.Input<string>;
    processQuery?: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestProcessQuery>;
    q?: pulumi.Input<string>;
    queryType?: pulumi.Input<string>;
    style?: pulumi.Input<{[key: string]: any}>;
    tagFilters?: pulumi.Input<pulumi.Input<string>[]>;
    textFilter?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequestApmQuery {
    compute: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestApmQuerySearch>;
}

export interface ScreenBoardWidgetTileDefRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequestApmQueryGroupBy {
    facet: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestApmQueryGroupBySort>;
}

export interface ScreenBoardWidgetTileDefRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequestConditionalFormat {
    color?: pulumi.Input<string>;
    comparator: pulumi.Input<string>;
    customBgColor?: pulumi.Input<string>;
    invert?: pulumi.Input<boolean>;
    palette?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequestLogQuery {
    compute: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestLogQuerySearch>;
}

export interface ScreenBoardWidgetTileDefRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequestLogQueryGroupBy {
    facet: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.ScreenBoardWidgetTileDefRequestLogQueryGroupBySort>;
}

export interface ScreenBoardWidgetTileDefRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface ScreenBoardWidgetTileDefRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface ServiceLevelObjectiveQuery {
    /**
     * the sum of the `total` events
     * * Example Usage:
     */
    denominator: pulumi.Input<string>;
    /**
     * the sum of all the `good` events
     */
    numerator: pulumi.Input<string>;
}

export interface ServiceLevelObjectiveThreshold {
    /**
     * the objective's target `[0,100]`
     */
    target: pulumi.Input<number>;
    /**
     * the string version to specify additional digits in the case of `99` but want 3 digits like `99.000` to display.
     */
    targetDisplay?: pulumi.Input<string>;
    /**
     * the time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation](https://docs.datadoghq.com/api/?lang=python#create-a-service-level-objective) page. Available options to choose from are:
     * * `7d`
     * * `30d`
     * * `90d`
     */
    timeframe: pulumi.Input<string>;
    /**
     * the objective's warning value `[0,100]`. This must be `> target` value.
     */
    warning?: pulumi.Input<number>;
    /**
     * the string version to specify additional digits in the case of `99` but want 3 digits like `99.000` to display.
     */
    warningDisplay?: pulumi.Input<string>;
}

export interface SyntheticsTestOptions {
    acceptSelfSigned?: pulumi.Input<boolean>;
    followRedirects?: pulumi.Input<boolean>;
    minFailureDuration?: pulumi.Input<number>;
    minLocationFailed?: pulumi.Input<number>;
    tickEvery: pulumi.Input<number>;
}

export interface SyntheticsTestRequest {
    body?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    url?: pulumi.Input<string>;
}

export interface TimeBoardGraph {
    autoscale?: pulumi.Input<boolean>;
    customUnit?: pulumi.Input<string>;
    events?: pulumi.Input<pulumi.Input<string>[]>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    includeNoMetricHosts?: pulumi.Input<boolean>;
    includeUngroupedHosts?: pulumi.Input<boolean>;
    markers?: pulumi.Input<pulumi.Input<inputs.TimeBoardGraphMarker>[]>;
    nodeType?: pulumi.Input<string>;
    precision?: pulumi.Input<string>;
    requests: pulumi.Input<pulumi.Input<inputs.TimeBoardGraphRequest>[]>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    style?: pulumi.Input<{[key: string]: any}>;
    textAlign?: pulumi.Input<string>;
    title: pulumi.Input<string>;
    viz: pulumi.Input<string>;
    yaxis?: pulumi.Input<{[key: string]: any}>;
}

export interface TimeBoardGraphMarker {
    label?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface TimeBoardGraphRequest {
    aggregator?: pulumi.Input<string>;
    apmQuery?: pulumi.Input<inputs.TimeBoardGraphRequestApmQuery>;
    changeType?: pulumi.Input<string>;
    compareTo?: pulumi.Input<string>;
    conditionalFormats?: pulumi.Input<pulumi.Input<inputs.TimeBoardGraphRequestConditionalFormat>[]>;
    extraCol?: pulumi.Input<string>;
    increaseGood?: pulumi.Input<boolean>;
    logQuery?: pulumi.Input<inputs.TimeBoardGraphRequestLogQuery>;
    metadataJson?: pulumi.Input<string>;
    orderBy?: pulumi.Input<string>;
    orderDirection?: pulumi.Input<string>;
    processQuery?: pulumi.Input<inputs.TimeBoardGraphRequestProcessQuery>;
    q?: pulumi.Input<string>;
    stacked?: pulumi.Input<boolean>;
    style?: pulumi.Input<{[key: string]: any}>;
    type?: pulumi.Input<string>;
}

export interface TimeBoardGraphRequestApmQuery {
    compute: pulumi.Input<inputs.TimeBoardGraphRequestApmQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.TimeBoardGraphRequestApmQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.TimeBoardGraphRequestApmQuerySearch>;
}

export interface TimeBoardGraphRequestApmQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface TimeBoardGraphRequestApmQueryGroupBy {
    facet: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.TimeBoardGraphRequestApmQueryGroupBySort>;
}

export interface TimeBoardGraphRequestApmQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface TimeBoardGraphRequestApmQuerySearch {
    query: pulumi.Input<string>;
}

export interface TimeBoardGraphRequestConditionalFormat {
    comparator: pulumi.Input<string>;
    customBgColor?: pulumi.Input<string>;
    customFgColor?: pulumi.Input<string>;
    palette?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface TimeBoardGraphRequestLogQuery {
    compute: pulumi.Input<inputs.TimeBoardGraphRequestLogQueryCompute>;
    groupBies?: pulumi.Input<pulumi.Input<inputs.TimeBoardGraphRequestLogQueryGroupBy>[]>;
    index: pulumi.Input<string>;
    search?: pulumi.Input<inputs.TimeBoardGraphRequestLogQuerySearch>;
}

export interface TimeBoardGraphRequestLogQueryCompute {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
}

export interface TimeBoardGraphRequestLogQueryGroupBy {
    facet: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    sort?: pulumi.Input<inputs.TimeBoardGraphRequestLogQueryGroupBySort>;
}

export interface TimeBoardGraphRequestLogQueryGroupBySort {
    aggregation: pulumi.Input<string>;
    facet?: pulumi.Input<string>;
    order: pulumi.Input<string>;
}

export interface TimeBoardGraphRequestLogQuerySearch {
    query: pulumi.Input<string>;
}

export interface TimeBoardGraphRequestProcessQuery {
    filterBies?: pulumi.Input<pulumi.Input<string>[]>;
    limit?: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    searchBy?: pulumi.Input<string>;
}

export interface TimeBoardTemplateVariable {
    default?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}

export namespace pagerduty {
    export interface IntegrationService {
        /**
         * Your Service name associated service key in Pagerduty.
         */
        serviceKey: pulumi.Input<string>;
        /**
         * Your Service name in PagerDuty.
         */
        serviceName: pulumi.Input<string>;
    }
}
