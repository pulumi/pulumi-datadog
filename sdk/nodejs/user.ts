// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Datadog user resource. This can be used to create and manage Datadog users.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * const roRole = datadog.getRole({
 *     filter: "Datadog Read Only Role",
 * });
 * // Create a new Datadog user
 * const foo = new datadog.User("foo", {
 *     email: "new@example.com",
 *     roles: [roRole.then(roRole => roRole.id)],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import datadog:index/user:User example_user 6f1b44c0-30b2-11eb-86bc-279f7c1ebaa4
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * Whether the user is disabled.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Email address for user.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * Name for user.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * A list a role IDs to assign to the user.
     */
    public readonly roles!: pulumi.Output<string[] | undefined>;
    /**
     * Whether an invitation email should be sent when the user is created.
     */
    public readonly sendUserInvitation!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the user invitation that was sent when creating the user.
     */
    public /*out*/ readonly userInvitationId!: pulumi.Output<string>;
    /**
     * Returns `true` if the user is verified.
     */
    public /*out*/ readonly verified!: pulumi.Output<boolean>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["sendUserInvitation"] = state ? state.sendUserInvitation : undefined;
            resourceInputs["userInvitationId"] = state ? state.userInvitationId : undefined;
            resourceInputs["verified"] = state ? state.verified : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["sendUserInvitation"] = args ? args.sendUserInvitation : undefined;
            resourceInputs["userInvitationId"] = undefined /*out*/;
            resourceInputs["verified"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * Whether the user is disabled.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Email address for user.
     */
    email?: pulumi.Input<string>;
    /**
     * Name for user.
     */
    name?: pulumi.Input<string>;
    /**
     * A list a role IDs to assign to the user.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether an invitation email should be sent when the user is created.
     */
    sendUserInvitation?: pulumi.Input<boolean>;
    /**
     * The ID of the user invitation that was sent when creating the user.
     */
    userInvitationId?: pulumi.Input<string>;
    /**
     * Returns `true` if the user is verified.
     */
    verified?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Whether the user is disabled.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Email address for user.
     */
    email: pulumi.Input<string>;
    /**
     * Name for user.
     */
    name?: pulumi.Input<string>;
    /**
     * A list a role IDs to assign to the user.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether an invitation email should be sent when the user is created.
     */
    sendUserInvitation?: pulumi.Input<boolean>;
}
