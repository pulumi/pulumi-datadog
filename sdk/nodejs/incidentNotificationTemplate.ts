// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Datadog incident notification template resource. This can be used to create and manage Datadog incident notification templates.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * // Reference incident type
 * const security = new datadog.IncidentType("security", {
 *     name: "Security Incident",
 *     description: "Security-related incidents requiring immediate attention",
 * });
 * // Create a notification template for incident alerts
 * const securityIncident = new datadog.IncidentNotificationTemplate("security_incident", {
 *     name: "Security Incident Template",
 *     subject: "SEV-1 Security Incident: {{incident.title}}",
 *     content: `ðŸš¨ SECURITY INCIDENT DECLARED ðŸš¨
 *
 * **Incident Details:**
 * - Title: {{incident.title}}
 * - Severity: {{incident.severity}}
 * - Status: {{incident.status}}
 * - Declared at: {{incident.created}}
 *
 * **Affected Services:**
 * {{#each incident.services}}
 * - {{name}}
 * {{/each}}
 *
 * **Commander:** {{incident.commander}}
 *
 * **Next Steps:**
 * 1. Join the incident Slack channel: #incident-{{incident.id}}
 * 2. Review the incident details in Datadog
 * 3. Await further instructions from the incident commander
 *
 * For more information: {{incident.url}}
 * `,
 *     category: "alert",
 *     incidentType: security.id,
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * #!/bin/bash
 *
 * Import an existing incident notification template
 *
 * ```sh
 * $ pulumi import datadog:index/incidentNotificationTemplate:IncidentNotificationTemplate security_incident 11111111-2222-3333-4444-555555555555
 * ```
 */
export class IncidentNotificationTemplate extends pulumi.CustomResource {
    /**
     * Get an existing IncidentNotificationTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IncidentNotificationTemplateState, opts?: pulumi.CustomResourceOptions): IncidentNotificationTemplate {
        return new IncidentNotificationTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/incidentNotificationTemplate:IncidentNotificationTemplate';

    /**
     * Returns true if the given object is an instance of IncidentNotificationTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IncidentNotificationTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IncidentNotificationTemplate.__pulumiType;
    }

    /**
     * The category of the notification template. Valid values are `alert`, `incident`, `recovery`.
     */
    declare public readonly category: pulumi.Output<string>;
    /**
     * The content body of the notification template.
     */
    declare public readonly content: pulumi.Output<string>;
    /**
     * Timestamp when the notification template was created.
     */
    declare public /*out*/ readonly created: pulumi.Output<string>;
    /**
     * The ID of the incident type this notification template is associated with.
     */
    declare public readonly incidentType: pulumi.Output<string>;
    /**
     * Timestamp when the notification template was last modified.
     */
    declare public /*out*/ readonly modified: pulumi.Output<string>;
    /**
     * The name of the notification template.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The subject line of the notification template.
     */
    declare public readonly subject: pulumi.Output<string>;

    /**
     * Create a IncidentNotificationTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IncidentNotificationTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IncidentNotificationTemplateArgs | IncidentNotificationTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IncidentNotificationTemplateState | undefined;
            resourceInputs["category"] = state?.category;
            resourceInputs["content"] = state?.content;
            resourceInputs["created"] = state?.created;
            resourceInputs["incidentType"] = state?.incidentType;
            resourceInputs["modified"] = state?.modified;
            resourceInputs["name"] = state?.name;
            resourceInputs["subject"] = state?.subject;
        } else {
            const args = argsOrState as IncidentNotificationTemplateArgs | undefined;
            if (args?.category === undefined && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if (args?.content === undefined && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if (args?.incidentType === undefined && !opts.urn) {
                throw new Error("Missing required property 'incidentType'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.subject === undefined && !opts.urn) {
                throw new Error("Missing required property 'subject'");
            }
            resourceInputs["category"] = args?.category;
            resourceInputs["content"] = args?.content;
            resourceInputs["incidentType"] = args?.incidentType;
            resourceInputs["name"] = args?.name;
            resourceInputs["subject"] = args?.subject;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["modified"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IncidentNotificationTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IncidentNotificationTemplate resources.
 */
export interface IncidentNotificationTemplateState {
    /**
     * The category of the notification template. Valid values are `alert`, `incident`, `recovery`.
     */
    category?: pulumi.Input<string>;
    /**
     * The content body of the notification template.
     */
    content?: pulumi.Input<string>;
    /**
     * Timestamp when the notification template was created.
     */
    created?: pulumi.Input<string>;
    /**
     * The ID of the incident type this notification template is associated with.
     */
    incidentType?: pulumi.Input<string>;
    /**
     * Timestamp when the notification template was last modified.
     */
    modified?: pulumi.Input<string>;
    /**
     * The name of the notification template.
     */
    name?: pulumi.Input<string>;
    /**
     * The subject line of the notification template.
     */
    subject?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IncidentNotificationTemplate resource.
 */
export interface IncidentNotificationTemplateArgs {
    /**
     * The category of the notification template. Valid values are `alert`, `incident`, `recovery`.
     */
    category: pulumi.Input<string>;
    /**
     * The content body of the notification template.
     */
    content: pulumi.Input<string>;
    /**
     * The ID of the incident type this notification template is associated with.
     */
    incidentType: pulumi.Input<string>;
    /**
     * The name of the notification template.
     */
    name: pulumi.Input<string>;
    /**
     * The subject line of the notification template.
     */
    subject: pulumi.Input<string>;
}
