// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Datadog screenboard resource. This can be used to create and manage Datadog screenboards.
 */
export class ScreenBoard extends pulumi.CustomResource {
    /**
     * Get an existing ScreenBoard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScreenBoardState, opts?: pulumi.CustomResourceOptions): ScreenBoard {
        return new ScreenBoard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/screenBoard:ScreenBoard';

    /**
     * Returns true if the given object is an instance of ScreenBoard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScreenBoard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScreenBoard.__pulumiType;
    }

    /**
     * Height of the screenboard
     */
    public readonly height!: pulumi.Output<string | undefined>;
    public readonly readOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Whether the screenboard is shared or not
     */
    public readonly shared!: pulumi.Output<boolean | undefined>;
    /**
     * A list of template variables for using Dashboard templating.
     */
    public readonly templateVariables!: pulumi.Output<{ default?: string, name: string, prefix?: string }[] | undefined>;
    /**
     * Name of the screenboard
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * A list of widget definitions.
     */
    public readonly widgets!: pulumi.Output<{ alertId?: number, autoRefresh?: boolean, bgcolor?: string, check?: string, color?: string, colorPreference?: string, columns?: string, displayFormat?: string, env?: string, eventSize?: string, fontSize?: string, group?: string, groupBies?: string[], grouping?: string, height?: number, hideZeroCounts?: boolean, html?: string, layoutVersion?: string, legend?: boolean, legendSize?: string, logset?: string, manageStatusShowTitle?: boolean, manageStatusTitleAlign?: string, manageStatusTitleSize?: string, manageStatusTitleText?: string, margin?: string, monitor?: {[key: string]: string}, mustShowBreakdown?: boolean, mustShowDistribution?: boolean, mustShowErrors?: boolean, mustShowHits?: boolean, mustShowLatency?: boolean, mustShowResourceList?: boolean, params?: {[key: string]: string}, precision?: string, query?: string, rules?: { color?: string, threshold?: number, timeframe?: string }[], serviceName?: string, serviceService?: string, sizeVersion?: string, sizing?: string, tags?: string[], text?: string, textAlign?: string, textSize?: string, tick?: boolean, tickEdge?: string, tickPos?: string, tileDeves?: { autoscale?: boolean, customUnit?: string, events?: { q: string }[], groups?: string[], markers?: { label?: string, type: string, value: string }[], noGroupHosts?: boolean, noMetricHosts?: boolean, nodeType?: string, precision?: string, requests: { aggregator?: string, changeType?: string, compareTo?: string, conditionalFormats?: { color?: string, comparator: string, customBgColor?: string, invert?: boolean, palette?: string, value?: string }[], extraCol?: string, increaseGood?: boolean, limit?: number, metadataJson?: string, metric?: string, orderBy?: string, orderDir?: string, q?: string, queryType?: string, style?: {[key: string]: any}, tagFilters?: string[], textFilter?: string, type?: string }[], scopes?: string[], style?: {[key: string]: any}, textAlign?: string, viz: string }[], time?: {[key: string]: string}, timeframes?: string[], title?: string, titleAlign?: string, titleSize?: number, type: string, unit?: string, url?: string, vizType?: string, width?: number, x: number, y: number }[]>;
    /**
     * Width of the screenboard
     */
    public readonly width!: pulumi.Output<string | undefined>;

    /**
     * Create a ScreenBoard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScreenBoardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScreenBoardArgs | ScreenBoardState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ScreenBoardState | undefined;
            inputs["height"] = state ? state.height : undefined;
            inputs["readOnly"] = state ? state.readOnly : undefined;
            inputs["shared"] = state ? state.shared : undefined;
            inputs["templateVariables"] = state ? state.templateVariables : undefined;
            inputs["title"] = state ? state.title : undefined;
            inputs["widgets"] = state ? state.widgets : undefined;
            inputs["width"] = state ? state.width : undefined;
        } else {
            const args = argsOrState as ScreenBoardArgs | undefined;
            if (!args || args.title === undefined) {
                throw new Error("Missing required property 'title'");
            }
            if (!args || args.widgets === undefined) {
                throw new Error("Missing required property 'widgets'");
            }
            inputs["height"] = args ? args.height : undefined;
            inputs["readOnly"] = args ? args.readOnly : undefined;
            inputs["shared"] = args ? args.shared : undefined;
            inputs["templateVariables"] = args ? args.templateVariables : undefined;
            inputs["title"] = args ? args.title : undefined;
            inputs["widgets"] = args ? args.widgets : undefined;
            inputs["width"] = args ? args.width : undefined;
        }
        super(ScreenBoard.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScreenBoard resources.
 */
export interface ScreenBoardState {
    /**
     * Height of the screenboard
     */
    readonly height?: pulumi.Input<string>;
    readonly readOnly?: pulumi.Input<boolean>;
    /**
     * Whether the screenboard is shared or not
     */
    readonly shared?: pulumi.Input<boolean>;
    /**
     * A list of template variables for using Dashboard templating.
     */
    readonly templateVariables?: pulumi.Input<pulumi.Input<{ default?: pulumi.Input<string>, name: pulumi.Input<string>, prefix?: pulumi.Input<string> }>[]>;
    /**
     * Name of the screenboard
     */
    readonly title?: pulumi.Input<string>;
    /**
     * A list of widget definitions.
     */
    readonly widgets?: pulumi.Input<pulumi.Input<{ alertId?: pulumi.Input<number>, autoRefresh?: pulumi.Input<boolean>, bgcolor?: pulumi.Input<string>, check?: pulumi.Input<string>, color?: pulumi.Input<string>, colorPreference?: pulumi.Input<string>, columns?: pulumi.Input<string>, displayFormat?: pulumi.Input<string>, env?: pulumi.Input<string>, eventSize?: pulumi.Input<string>, fontSize?: pulumi.Input<string>, group?: pulumi.Input<string>, groupBies?: pulumi.Input<pulumi.Input<string>[]>, grouping?: pulumi.Input<string>, height?: pulumi.Input<number>, hideZeroCounts?: pulumi.Input<boolean>, html?: pulumi.Input<string>, layoutVersion?: pulumi.Input<string>, legend?: pulumi.Input<boolean>, legendSize?: pulumi.Input<string>, logset?: pulumi.Input<string>, manageStatusShowTitle?: pulumi.Input<boolean>, manageStatusTitleAlign?: pulumi.Input<string>, manageStatusTitleSize?: pulumi.Input<string>, manageStatusTitleText?: pulumi.Input<string>, margin?: pulumi.Input<string>, monitor?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, mustShowBreakdown?: pulumi.Input<boolean>, mustShowDistribution?: pulumi.Input<boolean>, mustShowErrors?: pulumi.Input<boolean>, mustShowHits?: pulumi.Input<boolean>, mustShowLatency?: pulumi.Input<boolean>, mustShowResourceList?: pulumi.Input<boolean>, params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, precision?: pulumi.Input<string>, query?: pulumi.Input<string>, rules?: pulumi.Input<pulumi.Input<{ color?: pulumi.Input<string>, threshold?: pulumi.Input<number>, timeframe?: pulumi.Input<string> }>[]>, serviceName?: pulumi.Input<string>, serviceService?: pulumi.Input<string>, sizeVersion?: pulumi.Input<string>, sizing?: pulumi.Input<string>, tags?: pulumi.Input<pulumi.Input<string>[]>, text?: pulumi.Input<string>, textAlign?: pulumi.Input<string>, textSize?: pulumi.Input<string>, tick?: pulumi.Input<boolean>, tickEdge?: pulumi.Input<string>, tickPos?: pulumi.Input<string>, tileDeves?: pulumi.Input<pulumi.Input<{ autoscale?: pulumi.Input<boolean>, customUnit?: pulumi.Input<string>, events?: pulumi.Input<pulumi.Input<{ q: pulumi.Input<string> }>[]>, groups?: pulumi.Input<pulumi.Input<string>[]>, markers?: pulumi.Input<pulumi.Input<{ label?: pulumi.Input<string>, type: pulumi.Input<string>, value: pulumi.Input<string> }>[]>, noGroupHosts?: pulumi.Input<boolean>, noMetricHosts?: pulumi.Input<boolean>, nodeType?: pulumi.Input<string>, precision?: pulumi.Input<string>, requests: pulumi.Input<pulumi.Input<{ aggregator?: pulumi.Input<string>, changeType?: pulumi.Input<string>, compareTo?: pulumi.Input<string>, conditionalFormats?: pulumi.Input<pulumi.Input<{ color?: pulumi.Input<string>, comparator: pulumi.Input<string>, customBgColor?: pulumi.Input<string>, invert?: pulumi.Input<boolean>, palette?: pulumi.Input<string>, value?: pulumi.Input<string> }>[]>, extraCol?: pulumi.Input<string>, increaseGood?: pulumi.Input<boolean>, limit?: pulumi.Input<number>, metadataJson?: pulumi.Input<string>, metric?: pulumi.Input<string>, orderBy?: pulumi.Input<string>, orderDir?: pulumi.Input<string>, q?: pulumi.Input<string>, queryType?: pulumi.Input<string>, style?: pulumi.Input<{[key: string]: any}>, tagFilters?: pulumi.Input<pulumi.Input<string>[]>, textFilter?: pulumi.Input<string>, type?: pulumi.Input<string> }>[]>, scopes?: pulumi.Input<pulumi.Input<string>[]>, style?: pulumi.Input<{[key: string]: any}>, textAlign?: pulumi.Input<string>, viz: pulumi.Input<string> }>[]>, time?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, timeframes?: pulumi.Input<pulumi.Input<string>[]>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<number>, type: pulumi.Input<string>, unit?: pulumi.Input<string>, url?: pulumi.Input<string>, vizType?: pulumi.Input<string>, width?: pulumi.Input<number>, x: pulumi.Input<number>, y: pulumi.Input<number> }>[]>;
    /**
     * Width of the screenboard
     */
    readonly width?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScreenBoard resource.
 */
export interface ScreenBoardArgs {
    /**
     * Height of the screenboard
     */
    readonly height?: pulumi.Input<string>;
    readonly readOnly?: pulumi.Input<boolean>;
    /**
     * Whether the screenboard is shared or not
     */
    readonly shared?: pulumi.Input<boolean>;
    /**
     * A list of template variables for using Dashboard templating.
     */
    readonly templateVariables?: pulumi.Input<pulumi.Input<{ default?: pulumi.Input<string>, name: pulumi.Input<string>, prefix?: pulumi.Input<string> }>[]>;
    /**
     * Name of the screenboard
     */
    readonly title: pulumi.Input<string>;
    /**
     * A list of widget definitions.
     */
    readonly widgets: pulumi.Input<pulumi.Input<{ alertId?: pulumi.Input<number>, autoRefresh?: pulumi.Input<boolean>, bgcolor?: pulumi.Input<string>, check?: pulumi.Input<string>, color?: pulumi.Input<string>, colorPreference?: pulumi.Input<string>, columns?: pulumi.Input<string>, displayFormat?: pulumi.Input<string>, env?: pulumi.Input<string>, eventSize?: pulumi.Input<string>, fontSize?: pulumi.Input<string>, group?: pulumi.Input<string>, groupBies?: pulumi.Input<pulumi.Input<string>[]>, grouping?: pulumi.Input<string>, height?: pulumi.Input<number>, hideZeroCounts?: pulumi.Input<boolean>, html?: pulumi.Input<string>, layoutVersion?: pulumi.Input<string>, legend?: pulumi.Input<boolean>, legendSize?: pulumi.Input<string>, logset?: pulumi.Input<string>, manageStatusShowTitle?: pulumi.Input<boolean>, manageStatusTitleAlign?: pulumi.Input<string>, manageStatusTitleSize?: pulumi.Input<string>, manageStatusTitleText?: pulumi.Input<string>, margin?: pulumi.Input<string>, monitor?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, mustShowBreakdown?: pulumi.Input<boolean>, mustShowDistribution?: pulumi.Input<boolean>, mustShowErrors?: pulumi.Input<boolean>, mustShowHits?: pulumi.Input<boolean>, mustShowLatency?: pulumi.Input<boolean>, mustShowResourceList?: pulumi.Input<boolean>, params?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, precision?: pulumi.Input<string>, query?: pulumi.Input<string>, rules?: pulumi.Input<pulumi.Input<{ color?: pulumi.Input<string>, threshold?: pulumi.Input<number>, timeframe?: pulumi.Input<string> }>[]>, serviceName?: pulumi.Input<string>, serviceService?: pulumi.Input<string>, sizeVersion?: pulumi.Input<string>, sizing?: pulumi.Input<string>, tags?: pulumi.Input<pulumi.Input<string>[]>, text?: pulumi.Input<string>, textAlign?: pulumi.Input<string>, textSize?: pulumi.Input<string>, tick?: pulumi.Input<boolean>, tickEdge?: pulumi.Input<string>, tickPos?: pulumi.Input<string>, tileDeves?: pulumi.Input<pulumi.Input<{ autoscale?: pulumi.Input<boolean>, customUnit?: pulumi.Input<string>, events?: pulumi.Input<pulumi.Input<{ q: pulumi.Input<string> }>[]>, groups?: pulumi.Input<pulumi.Input<string>[]>, markers?: pulumi.Input<pulumi.Input<{ label?: pulumi.Input<string>, type: pulumi.Input<string>, value: pulumi.Input<string> }>[]>, noGroupHosts?: pulumi.Input<boolean>, noMetricHosts?: pulumi.Input<boolean>, nodeType?: pulumi.Input<string>, precision?: pulumi.Input<string>, requests: pulumi.Input<pulumi.Input<{ aggregator?: pulumi.Input<string>, changeType?: pulumi.Input<string>, compareTo?: pulumi.Input<string>, conditionalFormats?: pulumi.Input<pulumi.Input<{ color?: pulumi.Input<string>, comparator: pulumi.Input<string>, customBgColor?: pulumi.Input<string>, invert?: pulumi.Input<boolean>, palette?: pulumi.Input<string>, value?: pulumi.Input<string> }>[]>, extraCol?: pulumi.Input<string>, increaseGood?: pulumi.Input<boolean>, limit?: pulumi.Input<number>, metadataJson?: pulumi.Input<string>, metric?: pulumi.Input<string>, orderBy?: pulumi.Input<string>, orderDir?: pulumi.Input<string>, q?: pulumi.Input<string>, queryType?: pulumi.Input<string>, style?: pulumi.Input<{[key: string]: any}>, tagFilters?: pulumi.Input<pulumi.Input<string>[]>, textFilter?: pulumi.Input<string>, type?: pulumi.Input<string> }>[]>, scopes?: pulumi.Input<pulumi.Input<string>[]>, style?: pulumi.Input<{[key: string]: any}>, textAlign?: pulumi.Input<string>, viz: pulumi.Input<string> }>[]>, time?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, timeframes?: pulumi.Input<pulumi.Input<string>[]>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<number>, type: pulumi.Input<string>, unit?: pulumi.Input<string>, url?: pulumi.Input<string>, vizType?: pulumi.Input<string>, width?: pulumi.Input<number>, x: pulumi.Input<number>, y: pulumi.Input<number> }>[]>;
    /**
     * Width of the screenboard
     */
    readonly width?: pulumi.Input<string>;
}
