// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Datadog screenboard resource. This can be used to create and manage Datadog screenboards.
 *
 * > **Note:** This resource is outdated. Use the new `datadog.Dashboard` resource instead.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as datadog from "@pulumi/datadog";
 *
 * // Create a new Datadog screenboard
 * const acceptanceTest = new datadog.ScreenBoard("acceptanceTest", {
 *     title: "Test Screenboard",
 *     readOnly: true,
 *     templateVariables: [
 *         {
 *             name: "varname 1",
 *             prefix: "pod_name",
 *             "default": "*",
 *         },
 *         {
 *             name: "varname 2",
 *             prefix: "service_name",
 *             "default": "autoscaling",
 *         },
 *     ],
 *     widgets: [
 *         {
 *             type: "free_text",
 *             x: 5,
 *             y: 5,
 *             text: "test text",
 *             textAlign: "right",
 *             fontSize: "36",
 *             color: "#ffc0cb",
 *         },
 *         {
 *             type: "timeseries",
 *             x: 25,
 *             y: 5,
 *             title: "graph title tf",
 *             titleSize: 16,
 *             titleAlign: "right",
 *             legend: true,
 *             legendSize: 16,
 *             time: {
 *                 live_span: "1d",
 *             },
 *             tileDeves: [{
 *                 viz: "timeseries",
 *                 requests: [
 *                     {
 *                         q: "avg:system.cpu.user{*}",
 *                         type: "line",
 *                         style: {
 *                             palette: "purple",
 *                             type: "dashed",
 *                             width: "thin",
 *                         },
 *                         metadataJson: JSON.stringify({
 *                             "avg:system.cpu.user{*}": {
 *                                 alias: "CPU Usage",
 *                             },
 *                         }),
 *                     },
 *                     {
 *                         logQuery: {
 *                             index: "mcnulty",
 *                             compute: {
 *                                 aggregation: "avg",
 *                                 facet: "@duration",
 *                                 interval: 5000,
 *                             },
 *                             search: {
 *                                 query: "status:info",
 *                             },
 *                             groupBies: [{
 *                                 facet: "host",
 *                                 limit: 10,
 *                                 sort: {
 *                                     aggregation: "avg",
 *                                     order: "desc",
 *                                     facet: "@duration",
 *                                 },
 *                             }],
 *                         },
 *                         type: "area",
 *                     },
 *                     {
 *                         apmQuery: {
 *                             index: "apm-search",
 *                             compute: {
 *                                 aggregation: "avg",
 *                                 facet: "@duration",
 *                                 interval: 5000,
 *                             },
 *                             search: {
 *                                 query: "type:web",
 *                             },
 *                             groupBies: [{
 *                                 facet: "resource_name",
 *                                 limit: 50,
 *                                 sort: {
 *                                     aggregation: "avg",
 *                                     order: "desc",
 *                                     facet: "@string_query.interval",
 *                                 },
 *                             }],
 *                         },
 *                         type: "bars",
 *                     },
 *                     {
 *                         processQuery: {
 *                             metric: "process.stat.cpu.total_pct",
 *                             searchBy: "error",
 *                             filterBies: ["active"],
 *                             limit: 50,
 *                         },
 *                         type: "area",
 *                     },
 *                 ],
 *                 markers: [{
 *                     label: "test marker",
 *                     type: "error dashed",
 *                     value: "y < 6",
 *                 }],
 *                 events: [{
 *                     q: "test event",
 *                 }],
 *             }],
 *         },
 *         {
 *             type: "query_value",
 *             x: 45,
 *             y: 25,
 *             title: "query value title tf",
 *             titleSize: 20,
 *             titleAlign: "center",
 *             legend: true,
 *             legendSize: 16,
 *             tileDeves: [{
 *                 viz: "query_value",
 *                 requests: [{
 *                     q: "avg:system.cpu.user{*}",
 *                     type: "line",
 *                     style: {
 *                         palette: "purple",
 *                         type: "dashed",
 *                         width: "thin",
 *                     },
 *                     conditionalFormats: [
 *                         {
 *                             comparator: ">",
 *                             value: "1",
 *                             palette: "white_on_red",
 *                         },
 *                         {
 *                             comparator: ">=",
 *                             value: "2",
 *                             palette: "white_on_yellow",
 *                         },
 *                     ],
 *                     aggregator: "max",
 *                 }],
 *                 customUnit: "%",
 *                 autoscale: false,
 *                 precision: "6",
 *                 textAlign: "right",
 *             }],
 *         },
 *         {
 *             type: "toplist",
 *             x: 65,
 *             y: 5,
 *             title: "toplist title tf",
 *             legend: true,
 *             legendSize: "auto",
 *             time: {
 *                 live_span: "1d",
 *             },
 *             tileDeves: [{
 *                 viz: "toplist",
 *                 requests: [{
 *                     q: "top(avg:system.load.1{*} by {host}, 10, 'mean', 'desc')",
 *                     style: {
 *                         palette: "purple",
 *                         type: "dashed",
 *                         width: "thin",
 *                     },
 *                     conditionalFormats: [{
 *                         comparator: ">",
 *                         value: "4",
 *                         palette: "white_on_green",
 *                     }],
 *                 }],
 *             }],
 *         },
 *         {
 *             type: "change",
 *             x: 85,
 *             y: 5,
 *             title: "change title tf",
 *             tileDeves: [{
 *                 viz: "change",
 *                 requests: [{
 *                     q: "min:system.load.1{*} by {host}",
 *                     compareTo: "week_before",
 *                     changeType: "relative",
 *                     orderBy: "present",
 *                     orderDir: "asc",
 *                     extraCol: "",
 *                     increaseGood: false,
 *                 }],
 *             }],
 *         },
 *         {
 *             type: "event_timeline",
 *             x: 105,
 *             y: 5,
 *             title: "event_timeline title tf",
 *             query: "status:error",
 *             time: {
 *                 live_span: "1d",
 *             },
 *         },
 *         {
 *             type: "event_stream",
 *             x: 115,
 *             y: 5,
 *             title: "event_stream title tf",
 *             query: "*",
 *             eventSize: "l",
 *             time: {
 *                 live_span: "4h",
 *             },
 *         },
 *         {
 *             type: "image",
 *             x: 145,
 *             y: 5,
 *             title: "image title tf",
 *             sizing: "fit",
 *             margin: "large",
 *             url: "https://datadog-prod.imgix.net/img/dd_logo_70x75.png",
 *         },
 *         {
 *             type: "note",
 *             x: 165,
 *             y: 5,
 *             bgcolor: "pink",
 *             textAlign: "right",
 *             fontSize: "36",
 *             tick: true,
 *             tickEdge: "bottom",
 *             tickPos: `50%`,
 *             html: "<b>test note</b>",
 *         },
 *         {
 *             type: "alert_graph",
 *             x: 185,
 *             y: 5,
 *             title: "alert graph title tf",
 *             alertId: "123456",
 *             vizType: "toplist",
 *             time: {
 *                 live_span: "15m",
 *             },
 *         },
 *         {
 *             type: "alert_value",
 *             x: 205,
 *             y: 5,
 *             title: "alert value title tf",
 *             alertId: "123456",
 *             textSize: "fill_height",
 *             textAlign: "right",
 *             precision: "*",
 *             unit: "b",
 *         },
 *         {
 *             type: "iframe",
 *             x: 225,
 *             y: 5,
 *             url: "https://www.datadoghq.org",
 *         },
 *         {
 *             type: "check_status",
 *             x: 245,
 *             y: 5,
 *             title: "test title",
 *             titleAlign: "left",
 *             grouping: "check",
 *             check: "aws.ecs.agent_connected",
 *             tags: ["*"],
 *             group: "cluster:test",
 *             time: {
 *                 live_span: "30m",
 *             },
 *         },
 *         {
 *             type: "trace_service",
 *             x: 265,
 *             y: 5,
 *             env: "testEnv",
 *             serviceService: "",
 *             serviceName: "",
 *             sizeVersion: "large",
 *             layoutVersion: "three_column",
 *             mustShowHits: true,
 *             mustShowErrors: true,
 *             mustShowLatency: true,
 *             mustShowBreakdown: true,
 *             mustShowDistribution: true,
 *             mustShowResourceList: true,
 *             time: {
 *                 live_span: "30m",
 *             },
 *         },
 *         {
 *             type: "hostmap",
 *             x: 285,
 *             y: 5,
 *             query: "avg:system.load.1{*} by {host}",
 *             tileDeves: [{
 *                 viz: "hostmap",
 *                 nodeType: "container",
 *                 scopes: ["datacenter:test"],
 *                 groups: ["pod_name"],
 *                 noGroupHosts: false,
 *                 noMetricHosts: false,
 *                 requests: [{
 *                     q: "max:process.stat.container.io.wbps{datacenter:test} by {host}",
 *                     type: "fill",
 *                 }],
 *                 style: {
 *                     palette: "hostmap_blues",
 *                     palette_flip: true,
 *                     fill_min: 20,
 *                     fill_max: 300,
 *                 },
 *             }],
 *         },
 *         {
 *             type: "manage_status",
 *             x: 305,
 *             y: 5,
 *             summaryType: "monitors",
 *             displayFormat: "countsAndList",
 *             colorPreference: "background",
 *             hideZeroCounts: true,
 *             showLastTriggered: false,
 *             manageStatusShowTitle: false,
 *             manageStatusTitleText: "test title",
 *             manageStatusTitleSize: "20",
 *             manageStatusTitleAlign: "right",
 *             params: {
 *                 sort: "status,asc",
 *                 text: "status:alert",
 *             },
 *         },
 *         {
 *             type: "log_stream",
 *             x: 325,
 *             y: 5,
 *             query: "source:kubernetes",
 *             columns: "[\"column1\",\"column2\",\"column3\"]",
 *             logset: "1234",
 *             time: {
 *                 live_span: "1h",
 *             },
 *         },
 *         {
 *             type: "process",
 *             x: 365,
 *             y: 5,
 *             tileDeves: [{
 *                 viz: "process",
 *                 requests: [{
 *                     queryType: "process",
 *                     metric: "process.stat.cpu.total_pct",
 *                     textFilter: "",
 *                     tagFilters: [],
 *                     limit: 200,
 *                     style: {
 *                         palette: "dog_classic_area",
 *                     },
 *                 }],
 *             }],
 *         },
 *     ],
 * });
 * ```
 */
export class ScreenBoard extends pulumi.CustomResource {
    /**
     * Get an existing ScreenBoard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScreenBoardState, opts?: pulumi.CustomResourceOptions): ScreenBoard {
        return new ScreenBoard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/screenBoard:ScreenBoard';

    /**
     * Returns true if the given object is an instance of ScreenBoard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScreenBoard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScreenBoard.__pulumiType;
    }

    /**
     * Height of the screenboard
     */
    public readonly height!: pulumi.Output<string | undefined>;
    public readonly readOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Whether the screenboard is shared or not
     */
    public readonly shared!: pulumi.Output<boolean | undefined>;
    /**
     * A list of template variables for using Dashboard templating.
     */
    public readonly templateVariables!: pulumi.Output<outputs.ScreenBoardTemplateVariable[] | undefined>;
    /**
     * Name of the screenboard
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * A list of widget definitions.
     */
    public readonly widgets!: pulumi.Output<outputs.ScreenBoardWidget[]>;
    /**
     * Width of the screenboard
     */
    public readonly width!: pulumi.Output<string | undefined>;

    /**
     * Create a ScreenBoard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScreenBoardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScreenBoardArgs | ScreenBoardState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ScreenBoardState | undefined;
            inputs["height"] = state ? state.height : undefined;
            inputs["readOnly"] = state ? state.readOnly : undefined;
            inputs["shared"] = state ? state.shared : undefined;
            inputs["templateVariables"] = state ? state.templateVariables : undefined;
            inputs["title"] = state ? state.title : undefined;
            inputs["widgets"] = state ? state.widgets : undefined;
            inputs["width"] = state ? state.width : undefined;
        } else {
            const args = argsOrState as ScreenBoardArgs | undefined;
            if (!args || args.title === undefined) {
                throw new Error("Missing required property 'title'");
            }
            if (!args || args.widgets === undefined) {
                throw new Error("Missing required property 'widgets'");
            }
            inputs["height"] = args ? args.height : undefined;
            inputs["readOnly"] = args ? args.readOnly : undefined;
            inputs["shared"] = args ? args.shared : undefined;
            inputs["templateVariables"] = args ? args.templateVariables : undefined;
            inputs["title"] = args ? args.title : undefined;
            inputs["widgets"] = args ? args.widgets : undefined;
            inputs["width"] = args ? args.width : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ScreenBoard.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScreenBoard resources.
 */
export interface ScreenBoardState {
    /**
     * Height of the screenboard
     */
    readonly height?: pulumi.Input<string>;
    readonly readOnly?: pulumi.Input<boolean>;
    /**
     * Whether the screenboard is shared or not
     */
    readonly shared?: pulumi.Input<boolean>;
    /**
     * A list of template variables for using Dashboard templating.
     */
    readonly templateVariables?: pulumi.Input<pulumi.Input<inputs.ScreenBoardTemplateVariable>[]>;
    /**
     * Name of the screenboard
     */
    readonly title?: pulumi.Input<string>;
    /**
     * A list of widget definitions.
     */
    readonly widgets?: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidget>[]>;
    /**
     * Width of the screenboard
     */
    readonly width?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScreenBoard resource.
 */
export interface ScreenBoardArgs {
    /**
     * Height of the screenboard
     */
    readonly height?: pulumi.Input<string>;
    readonly readOnly?: pulumi.Input<boolean>;
    /**
     * Whether the screenboard is shared or not
     */
    readonly shared?: pulumi.Input<boolean>;
    /**
     * A list of template variables for using Dashboard templating.
     */
    readonly templateVariables?: pulumi.Input<pulumi.Input<inputs.ScreenBoardTemplateVariable>[]>;
    /**
     * Name of the screenboard
     */
    readonly title: pulumi.Input<string>;
    /**
     * A list of widget definitions.
     */
    readonly widgets: pulumi.Input<pulumi.Input<inputs.ScreenBoardWidget>[]>;
    /**
     * Width of the screenboard
     */
    readonly width?: pulumi.Input<string>;
}
