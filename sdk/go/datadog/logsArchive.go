// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog Logs Archive API resource, which is used to create and manage Datadog logs archives.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.NewLogsArchive(ctx, "myS3Archive", &datadog.LogsArchiveArgs{
//				Name:  pulumi.String("my s3 archive"),
//				Query: pulumi.String("service:myservice"),
//				S3Archive: &datadog.LogsArchiveS3ArchiveArgs{
//					AccountId: pulumi.String("001234567888"),
//					Bucket:    pulumi.String("my-bucket"),
//					Path:      pulumi.String("/path/foo"),
//					RoleName:  pulumi.String("my-role-name"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import datadog:index/logsArchive:LogsArchive my_s3_archive 1Aabc2_dfQPLnXy3HlfK4hi
//
// ```
type LogsArchive struct {
	pulumi.CustomResourceState

	// Definition of an azure archive.
	AzureArchive LogsArchiveAzureArchivePtrOutput `pulumi:"azureArchive"`
	// Definition of a GCS archive.
	GcsArchive LogsArchiveGcsArchivePtrOutput `pulumi:"gcsArchive"`
	// To store the tags in the archive, set the value `true`. If it is set to `false`, the tags will be dropped when the logs are sent to the archive. Defaults to `false`.
	IncludeTags pulumi.BoolPtrOutput `pulumi:"includeTags"`
	// Your archive name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The archive query/filter. Logs matching this query are included in the archive.
	Query pulumi.StringOutput `pulumi:"query"`
	// To limit the rehydration scan size for the archive, set a value in GB.
	RehydrationMaxScanSizeInGb pulumi.IntPtrOutput `pulumi:"rehydrationMaxScanSizeInGb"`
	// An array of tags to add to rehydrated logs from an archive.
	RehydrationTags pulumi.StringArrayOutput `pulumi:"rehydrationTags"`
	// Definition of an s3 archive.
	S3Archive LogsArchiveS3ArchivePtrOutput `pulumi:"s3Archive"`
}

// NewLogsArchive registers a new resource with the given unique name, arguments, and options.
func NewLogsArchive(ctx *pulumi.Context,
	name string, args *LogsArchiveArgs, opts ...pulumi.ResourceOption) (*LogsArchive, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Query == nil {
		return nil, errors.New("invalid value for required argument 'Query'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogsArchive
	err := ctx.RegisterResource("datadog:index/logsArchive:LogsArchive", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogsArchive gets an existing LogsArchive resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogsArchive(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogsArchiveState, opts ...pulumi.ResourceOption) (*LogsArchive, error) {
	var resource LogsArchive
	err := ctx.ReadResource("datadog:index/logsArchive:LogsArchive", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogsArchive resources.
type logsArchiveState struct {
	// Definition of an azure archive.
	AzureArchive *LogsArchiveAzureArchive `pulumi:"azureArchive"`
	// Definition of a GCS archive.
	GcsArchive *LogsArchiveGcsArchive `pulumi:"gcsArchive"`
	// To store the tags in the archive, set the value `true`. If it is set to `false`, the tags will be dropped when the logs are sent to the archive. Defaults to `false`.
	IncludeTags *bool `pulumi:"includeTags"`
	// Your archive name.
	Name *string `pulumi:"name"`
	// The archive query/filter. Logs matching this query are included in the archive.
	Query *string `pulumi:"query"`
	// To limit the rehydration scan size for the archive, set a value in GB.
	RehydrationMaxScanSizeInGb *int `pulumi:"rehydrationMaxScanSizeInGb"`
	// An array of tags to add to rehydrated logs from an archive.
	RehydrationTags []string `pulumi:"rehydrationTags"`
	// Definition of an s3 archive.
	S3Archive *LogsArchiveS3Archive `pulumi:"s3Archive"`
}

type LogsArchiveState struct {
	// Definition of an azure archive.
	AzureArchive LogsArchiveAzureArchivePtrInput
	// Definition of a GCS archive.
	GcsArchive LogsArchiveGcsArchivePtrInput
	// To store the tags in the archive, set the value `true`. If it is set to `false`, the tags will be dropped when the logs are sent to the archive. Defaults to `false`.
	IncludeTags pulumi.BoolPtrInput
	// Your archive name.
	Name pulumi.StringPtrInput
	// The archive query/filter. Logs matching this query are included in the archive.
	Query pulumi.StringPtrInput
	// To limit the rehydration scan size for the archive, set a value in GB.
	RehydrationMaxScanSizeInGb pulumi.IntPtrInput
	// An array of tags to add to rehydrated logs from an archive.
	RehydrationTags pulumi.StringArrayInput
	// Definition of an s3 archive.
	S3Archive LogsArchiveS3ArchivePtrInput
}

func (LogsArchiveState) ElementType() reflect.Type {
	return reflect.TypeOf((*logsArchiveState)(nil)).Elem()
}

type logsArchiveArgs struct {
	// Definition of an azure archive.
	AzureArchive *LogsArchiveAzureArchive `pulumi:"azureArchive"`
	// Definition of a GCS archive.
	GcsArchive *LogsArchiveGcsArchive `pulumi:"gcsArchive"`
	// To store the tags in the archive, set the value `true`. If it is set to `false`, the tags will be dropped when the logs are sent to the archive. Defaults to `false`.
	IncludeTags *bool `pulumi:"includeTags"`
	// Your archive name.
	Name string `pulumi:"name"`
	// The archive query/filter. Logs matching this query are included in the archive.
	Query string `pulumi:"query"`
	// To limit the rehydration scan size for the archive, set a value in GB.
	RehydrationMaxScanSizeInGb *int `pulumi:"rehydrationMaxScanSizeInGb"`
	// An array of tags to add to rehydrated logs from an archive.
	RehydrationTags []string `pulumi:"rehydrationTags"`
	// Definition of an s3 archive.
	S3Archive *LogsArchiveS3Archive `pulumi:"s3Archive"`
}

// The set of arguments for constructing a LogsArchive resource.
type LogsArchiveArgs struct {
	// Definition of an azure archive.
	AzureArchive LogsArchiveAzureArchivePtrInput
	// Definition of a GCS archive.
	GcsArchive LogsArchiveGcsArchivePtrInput
	// To store the tags in the archive, set the value `true`. If it is set to `false`, the tags will be dropped when the logs are sent to the archive. Defaults to `false`.
	IncludeTags pulumi.BoolPtrInput
	// Your archive name.
	Name pulumi.StringInput
	// The archive query/filter. Logs matching this query are included in the archive.
	Query pulumi.StringInput
	// To limit the rehydration scan size for the archive, set a value in GB.
	RehydrationMaxScanSizeInGb pulumi.IntPtrInput
	// An array of tags to add to rehydrated logs from an archive.
	RehydrationTags pulumi.StringArrayInput
	// Definition of an s3 archive.
	S3Archive LogsArchiveS3ArchivePtrInput
}

func (LogsArchiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logsArchiveArgs)(nil)).Elem()
}

type LogsArchiveInput interface {
	pulumi.Input

	ToLogsArchiveOutput() LogsArchiveOutput
	ToLogsArchiveOutputWithContext(ctx context.Context) LogsArchiveOutput
}

func (*LogsArchive) ElementType() reflect.Type {
	return reflect.TypeOf((**LogsArchive)(nil)).Elem()
}

func (i *LogsArchive) ToLogsArchiveOutput() LogsArchiveOutput {
	return i.ToLogsArchiveOutputWithContext(context.Background())
}

func (i *LogsArchive) ToLogsArchiveOutputWithContext(ctx context.Context) LogsArchiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsArchiveOutput)
}

// LogsArchiveArrayInput is an input type that accepts LogsArchiveArray and LogsArchiveArrayOutput values.
// You can construct a concrete instance of `LogsArchiveArrayInput` via:
//
//	LogsArchiveArray{ LogsArchiveArgs{...} }
type LogsArchiveArrayInput interface {
	pulumi.Input

	ToLogsArchiveArrayOutput() LogsArchiveArrayOutput
	ToLogsArchiveArrayOutputWithContext(context.Context) LogsArchiveArrayOutput
}

type LogsArchiveArray []LogsArchiveInput

func (LogsArchiveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogsArchive)(nil)).Elem()
}

func (i LogsArchiveArray) ToLogsArchiveArrayOutput() LogsArchiveArrayOutput {
	return i.ToLogsArchiveArrayOutputWithContext(context.Background())
}

func (i LogsArchiveArray) ToLogsArchiveArrayOutputWithContext(ctx context.Context) LogsArchiveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsArchiveArrayOutput)
}

// LogsArchiveMapInput is an input type that accepts LogsArchiveMap and LogsArchiveMapOutput values.
// You can construct a concrete instance of `LogsArchiveMapInput` via:
//
//	LogsArchiveMap{ "key": LogsArchiveArgs{...} }
type LogsArchiveMapInput interface {
	pulumi.Input

	ToLogsArchiveMapOutput() LogsArchiveMapOutput
	ToLogsArchiveMapOutputWithContext(context.Context) LogsArchiveMapOutput
}

type LogsArchiveMap map[string]LogsArchiveInput

func (LogsArchiveMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogsArchive)(nil)).Elem()
}

func (i LogsArchiveMap) ToLogsArchiveMapOutput() LogsArchiveMapOutput {
	return i.ToLogsArchiveMapOutputWithContext(context.Background())
}

func (i LogsArchiveMap) ToLogsArchiveMapOutputWithContext(ctx context.Context) LogsArchiveMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsArchiveMapOutput)
}

type LogsArchiveOutput struct{ *pulumi.OutputState }

func (LogsArchiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogsArchive)(nil)).Elem()
}

func (o LogsArchiveOutput) ToLogsArchiveOutput() LogsArchiveOutput {
	return o
}

func (o LogsArchiveOutput) ToLogsArchiveOutputWithContext(ctx context.Context) LogsArchiveOutput {
	return o
}

// Definition of an azure archive.
func (o LogsArchiveOutput) AzureArchive() LogsArchiveAzureArchivePtrOutput {
	return o.ApplyT(func(v *LogsArchive) LogsArchiveAzureArchivePtrOutput { return v.AzureArchive }).(LogsArchiveAzureArchivePtrOutput)
}

// Definition of a GCS archive.
func (o LogsArchiveOutput) GcsArchive() LogsArchiveGcsArchivePtrOutput {
	return o.ApplyT(func(v *LogsArchive) LogsArchiveGcsArchivePtrOutput { return v.GcsArchive }).(LogsArchiveGcsArchivePtrOutput)
}

// To store the tags in the archive, set the value `true`. If it is set to `false`, the tags will be dropped when the logs are sent to the archive. Defaults to `false`.
func (o LogsArchiveOutput) IncludeTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogsArchive) pulumi.BoolPtrOutput { return v.IncludeTags }).(pulumi.BoolPtrOutput)
}

// Your archive name.
func (o LogsArchiveOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogsArchive) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The archive query/filter. Logs matching this query are included in the archive.
func (o LogsArchiveOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v *LogsArchive) pulumi.StringOutput { return v.Query }).(pulumi.StringOutput)
}

// To limit the rehydration scan size for the archive, set a value in GB.
func (o LogsArchiveOutput) RehydrationMaxScanSizeInGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogsArchive) pulumi.IntPtrOutput { return v.RehydrationMaxScanSizeInGb }).(pulumi.IntPtrOutput)
}

// An array of tags to add to rehydrated logs from an archive.
func (o LogsArchiveOutput) RehydrationTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LogsArchive) pulumi.StringArrayOutput { return v.RehydrationTags }).(pulumi.StringArrayOutput)
}

// Definition of an s3 archive.
func (o LogsArchiveOutput) S3Archive() LogsArchiveS3ArchivePtrOutput {
	return o.ApplyT(func(v *LogsArchive) LogsArchiveS3ArchivePtrOutput { return v.S3Archive }).(LogsArchiveS3ArchivePtrOutput)
}

type LogsArchiveArrayOutput struct{ *pulumi.OutputState }

func (LogsArchiveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogsArchive)(nil)).Elem()
}

func (o LogsArchiveArrayOutput) ToLogsArchiveArrayOutput() LogsArchiveArrayOutput {
	return o
}

func (o LogsArchiveArrayOutput) ToLogsArchiveArrayOutputWithContext(ctx context.Context) LogsArchiveArrayOutput {
	return o
}

func (o LogsArchiveArrayOutput) Index(i pulumi.IntInput) LogsArchiveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogsArchive {
		return vs[0].([]*LogsArchive)[vs[1].(int)]
	}).(LogsArchiveOutput)
}

type LogsArchiveMapOutput struct{ *pulumi.OutputState }

func (LogsArchiveMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogsArchive)(nil)).Elem()
}

func (o LogsArchiveMapOutput) ToLogsArchiveMapOutput() LogsArchiveMapOutput {
	return o
}

func (o LogsArchiveMapOutput) ToLogsArchiveMapOutputWithContext(ctx context.Context) LogsArchiveMapOutput {
	return o
}

func (o LogsArchiveMapOutput) MapIndex(k pulumi.StringInput) LogsArchiveOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogsArchive {
		return vs[0].(map[string]*LogsArchive)[vs[1].(string)]
	}).(LogsArchiveOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogsArchiveInput)(nil)).Elem(), &LogsArchive{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogsArchiveArrayInput)(nil)).Elem(), LogsArchiveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogsArchiveMapInput)(nil)).Elem(), LogsArchiveMap{})
	pulumi.RegisterOutputType(LogsArchiveOutput{})
	pulumi.RegisterOutputType(LogsArchiveArrayOutput{})
	pulumi.RegisterOutputType(LogsArchiveMapOutput{})
}
