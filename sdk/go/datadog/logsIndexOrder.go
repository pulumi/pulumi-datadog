// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Datadog [Logs Index API](https://docs.datadoghq.com/api/v1/logs-indexes/) resource. This can be used to manage the order of Datadog logs indexes.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := datadog.NewLogsIndexOrder(ctx, "sampleIndexOrder", &datadog.LogsIndexOrderArgs{
// 			Name: pulumi.String("sample_index_order"),
// 			Indexes: pulumi.StringArray{
// 				pulumi.Any(datadog_logs_index.Sample_index.Id),
// 			},
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			"datadog_logs_index.sample_index",
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import datadog:index/logsIndexOrder:LogsIndexOrder The current Datadog Terraform provider version does not support the creation and deletion of index orders. Do `<datadog_logs_index_order.name> <name>` to import index order to Terraform. There must be at most one `datadog_logs_index_order` resource.
// ```
type LogsIndexOrder struct {
	pulumi.CustomResourceState

	Indexes pulumi.StringArrayOutput `pulumi:"indexes"`
	Name    pulumi.StringOutput      `pulumi:"name"`
}

// NewLogsIndexOrder registers a new resource with the given unique name, arguments, and options.
func NewLogsIndexOrder(ctx *pulumi.Context,
	name string, args *LogsIndexOrderArgs, opts ...pulumi.ResourceOption) (*LogsIndexOrder, error) {
	if args == nil || args.Indexes == nil {
		return nil, errors.New("missing required argument 'Indexes'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil {
		args = &LogsIndexOrderArgs{}
	}
	var resource LogsIndexOrder
	err := ctx.RegisterResource("datadog:index/logsIndexOrder:LogsIndexOrder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogsIndexOrder gets an existing LogsIndexOrder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogsIndexOrder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogsIndexOrderState, opts ...pulumi.ResourceOption) (*LogsIndexOrder, error) {
	var resource LogsIndexOrder
	err := ctx.ReadResource("datadog:index/logsIndexOrder:LogsIndexOrder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogsIndexOrder resources.
type logsIndexOrderState struct {
	Indexes []string `pulumi:"indexes"`
	Name    *string  `pulumi:"name"`
}

type LogsIndexOrderState struct {
	Indexes pulumi.StringArrayInput
	Name    pulumi.StringPtrInput
}

func (LogsIndexOrderState) ElementType() reflect.Type {
	return reflect.TypeOf((*logsIndexOrderState)(nil)).Elem()
}

type logsIndexOrderArgs struct {
	Indexes []string `pulumi:"indexes"`
	Name    string   `pulumi:"name"`
}

// The set of arguments for constructing a LogsIndexOrder resource.
type LogsIndexOrderArgs struct {
	Indexes pulumi.StringArrayInput
	Name    pulumi.StringInput
}

func (LogsIndexOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logsIndexOrderArgs)(nil)).Elem()
}

type LogsIndexOrderInput interface {
	pulumi.Input

	ToLogsIndexOrderOutput() LogsIndexOrderOutput
	ToLogsIndexOrderOutputWithContext(ctx context.Context) LogsIndexOrderOutput
}

func (LogsIndexOrder) ElementType() reflect.Type {
	return reflect.TypeOf((*LogsIndexOrder)(nil)).Elem()
}

func (i LogsIndexOrder) ToLogsIndexOrderOutput() LogsIndexOrderOutput {
	return i.ToLogsIndexOrderOutputWithContext(context.Background())
}

func (i LogsIndexOrder) ToLogsIndexOrderOutputWithContext(ctx context.Context) LogsIndexOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsIndexOrderOutput)
}

type LogsIndexOrderOutput struct {
	*pulumi.OutputState
}

func (LogsIndexOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogsIndexOrderOutput)(nil)).Elem()
}

func (o LogsIndexOrderOutput) ToLogsIndexOrderOutput() LogsIndexOrderOutput {
	return o
}

func (o LogsIndexOrderOutput) ToLogsIndexOrderOutputWithContext(ctx context.Context) LogsIndexOrderOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LogsIndexOrderOutput{})
}
