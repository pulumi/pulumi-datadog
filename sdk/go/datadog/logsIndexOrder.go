// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Datadog Logs Index API resource. This can be used to manage the order of Datadog logs indexes.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.NewLogsIndexOrder(ctx, "sampleIndexOrder", &datadog.LogsIndexOrderArgs{
//				Name: pulumi.String("sample_index_order"),
//				Indexes: pulumi.StringArray{
//					datadog_logs_index.Sample_index.Id,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The Datadog Terraform Provider does not support the creation and deletion of index orders. There must be at most one `datadog_logs_index_order` resource `<name>` can be whatever you specify in your code. Datadog does not store the name on the server.
//
// ```sh
//
//	$ pulumi import datadog:index/logsIndexOrder:LogsIndexOrder name> <name>
//
// ```
type LogsIndexOrder struct {
	pulumi.CustomResourceState

	// The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
	Indexes pulumi.StringArrayOutput `pulumi:"indexes"`
	// The unique name of the index order resource.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewLogsIndexOrder registers a new resource with the given unique name, arguments, and options.
func NewLogsIndexOrder(ctx *pulumi.Context,
	name string, args *LogsIndexOrderArgs, opts ...pulumi.ResourceOption) (*LogsIndexOrder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Indexes == nil {
		return nil, errors.New("invalid value for required argument 'Indexes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogsIndexOrder
	err := ctx.RegisterResource("datadog:index/logsIndexOrder:LogsIndexOrder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogsIndexOrder gets an existing LogsIndexOrder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogsIndexOrder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogsIndexOrderState, opts ...pulumi.ResourceOption) (*LogsIndexOrder, error) {
	var resource LogsIndexOrder
	err := ctx.ReadResource("datadog:index/logsIndexOrder:LogsIndexOrder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogsIndexOrder resources.
type logsIndexOrderState struct {
	// The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
	Indexes []string `pulumi:"indexes"`
	// The unique name of the index order resource.
	Name *string `pulumi:"name"`
}

type LogsIndexOrderState struct {
	// The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
	Indexes pulumi.StringArrayInput
	// The unique name of the index order resource.
	Name pulumi.StringPtrInput
}

func (LogsIndexOrderState) ElementType() reflect.Type {
	return reflect.TypeOf((*logsIndexOrderState)(nil)).Elem()
}

type logsIndexOrderArgs struct {
	// The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
	Indexes []string `pulumi:"indexes"`
	// The unique name of the index order resource.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a LogsIndexOrder resource.
type LogsIndexOrderArgs struct {
	// The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
	Indexes pulumi.StringArrayInput
	// The unique name of the index order resource.
	Name pulumi.StringPtrInput
}

func (LogsIndexOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logsIndexOrderArgs)(nil)).Elem()
}

type LogsIndexOrderInput interface {
	pulumi.Input

	ToLogsIndexOrderOutput() LogsIndexOrderOutput
	ToLogsIndexOrderOutputWithContext(ctx context.Context) LogsIndexOrderOutput
}

func (*LogsIndexOrder) ElementType() reflect.Type {
	return reflect.TypeOf((**LogsIndexOrder)(nil)).Elem()
}

func (i *LogsIndexOrder) ToLogsIndexOrderOutput() LogsIndexOrderOutput {
	return i.ToLogsIndexOrderOutputWithContext(context.Background())
}

func (i *LogsIndexOrder) ToLogsIndexOrderOutputWithContext(ctx context.Context) LogsIndexOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsIndexOrderOutput)
}

func (i *LogsIndexOrder) ToOutput(ctx context.Context) pulumix.Output[*LogsIndexOrder] {
	return pulumix.Output[*LogsIndexOrder]{
		OutputState: i.ToLogsIndexOrderOutputWithContext(ctx).OutputState,
	}
}

// LogsIndexOrderArrayInput is an input type that accepts LogsIndexOrderArray and LogsIndexOrderArrayOutput values.
// You can construct a concrete instance of `LogsIndexOrderArrayInput` via:
//
//	LogsIndexOrderArray{ LogsIndexOrderArgs{...} }
type LogsIndexOrderArrayInput interface {
	pulumi.Input

	ToLogsIndexOrderArrayOutput() LogsIndexOrderArrayOutput
	ToLogsIndexOrderArrayOutputWithContext(context.Context) LogsIndexOrderArrayOutput
}

type LogsIndexOrderArray []LogsIndexOrderInput

func (LogsIndexOrderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogsIndexOrder)(nil)).Elem()
}

func (i LogsIndexOrderArray) ToLogsIndexOrderArrayOutput() LogsIndexOrderArrayOutput {
	return i.ToLogsIndexOrderArrayOutputWithContext(context.Background())
}

func (i LogsIndexOrderArray) ToLogsIndexOrderArrayOutputWithContext(ctx context.Context) LogsIndexOrderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsIndexOrderArrayOutput)
}

func (i LogsIndexOrderArray) ToOutput(ctx context.Context) pulumix.Output[[]*LogsIndexOrder] {
	return pulumix.Output[[]*LogsIndexOrder]{
		OutputState: i.ToLogsIndexOrderArrayOutputWithContext(ctx).OutputState,
	}
}

// LogsIndexOrderMapInput is an input type that accepts LogsIndexOrderMap and LogsIndexOrderMapOutput values.
// You can construct a concrete instance of `LogsIndexOrderMapInput` via:
//
//	LogsIndexOrderMap{ "key": LogsIndexOrderArgs{...} }
type LogsIndexOrderMapInput interface {
	pulumi.Input

	ToLogsIndexOrderMapOutput() LogsIndexOrderMapOutput
	ToLogsIndexOrderMapOutputWithContext(context.Context) LogsIndexOrderMapOutput
}

type LogsIndexOrderMap map[string]LogsIndexOrderInput

func (LogsIndexOrderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogsIndexOrder)(nil)).Elem()
}

func (i LogsIndexOrderMap) ToLogsIndexOrderMapOutput() LogsIndexOrderMapOutput {
	return i.ToLogsIndexOrderMapOutputWithContext(context.Background())
}

func (i LogsIndexOrderMap) ToLogsIndexOrderMapOutputWithContext(ctx context.Context) LogsIndexOrderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsIndexOrderMapOutput)
}

func (i LogsIndexOrderMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*LogsIndexOrder] {
	return pulumix.Output[map[string]*LogsIndexOrder]{
		OutputState: i.ToLogsIndexOrderMapOutputWithContext(ctx).OutputState,
	}
}

type LogsIndexOrderOutput struct{ *pulumi.OutputState }

func (LogsIndexOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogsIndexOrder)(nil)).Elem()
}

func (o LogsIndexOrderOutput) ToLogsIndexOrderOutput() LogsIndexOrderOutput {
	return o
}

func (o LogsIndexOrderOutput) ToLogsIndexOrderOutputWithContext(ctx context.Context) LogsIndexOrderOutput {
	return o
}

func (o LogsIndexOrderOutput) ToOutput(ctx context.Context) pulumix.Output[*LogsIndexOrder] {
	return pulumix.Output[*LogsIndexOrder]{
		OutputState: o.OutputState,
	}
}

// The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
func (o LogsIndexOrderOutput) Indexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LogsIndexOrder) pulumi.StringArrayOutput { return v.Indexes }).(pulumi.StringArrayOutput)
}

// The unique name of the index order resource.
func (o LogsIndexOrderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogsIndexOrder) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type LogsIndexOrderArrayOutput struct{ *pulumi.OutputState }

func (LogsIndexOrderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogsIndexOrder)(nil)).Elem()
}

func (o LogsIndexOrderArrayOutput) ToLogsIndexOrderArrayOutput() LogsIndexOrderArrayOutput {
	return o
}

func (o LogsIndexOrderArrayOutput) ToLogsIndexOrderArrayOutputWithContext(ctx context.Context) LogsIndexOrderArrayOutput {
	return o
}

func (o LogsIndexOrderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*LogsIndexOrder] {
	return pulumix.Output[[]*LogsIndexOrder]{
		OutputState: o.OutputState,
	}
}

func (o LogsIndexOrderArrayOutput) Index(i pulumi.IntInput) LogsIndexOrderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogsIndexOrder {
		return vs[0].([]*LogsIndexOrder)[vs[1].(int)]
	}).(LogsIndexOrderOutput)
}

type LogsIndexOrderMapOutput struct{ *pulumi.OutputState }

func (LogsIndexOrderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogsIndexOrder)(nil)).Elem()
}

func (o LogsIndexOrderMapOutput) ToLogsIndexOrderMapOutput() LogsIndexOrderMapOutput {
	return o
}

func (o LogsIndexOrderMapOutput) ToLogsIndexOrderMapOutputWithContext(ctx context.Context) LogsIndexOrderMapOutput {
	return o
}

func (o LogsIndexOrderMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*LogsIndexOrder] {
	return pulumix.Output[map[string]*LogsIndexOrder]{
		OutputState: o.OutputState,
	}
}

func (o LogsIndexOrderMapOutput) MapIndex(k pulumi.StringInput) LogsIndexOrderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogsIndexOrder {
		return vs[0].(map[string]*LogsIndexOrder)[vs[1].(string)]
	}).(LogsIndexOrderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogsIndexOrderInput)(nil)).Elem(), &LogsIndexOrder{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogsIndexOrderArrayInput)(nil)).Elem(), LogsIndexOrderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogsIndexOrderMapInput)(nil)).Elem(), LogsIndexOrderMap{})
	pulumi.RegisterOutputType(LogsIndexOrderOutput{})
	pulumi.RegisterOutputType(LogsIndexOrderArrayOutput{})
	pulumi.RegisterOutputType(LogsIndexOrderMapOutput{})
}
