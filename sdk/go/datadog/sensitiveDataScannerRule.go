// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog SensitiveDataScannerRule resource. This can be used to create and manage Datadog sensitive_data_scanner_rule. Setting the `createBeforeDestroy` lifecycle Meta-argument to `true` is highly recommended if modifying the `includedKeywordConfiguration` field to avoid unexpectedly disabling Sensitive Data Scanner groups.
//
// ## Import
//
// ```sh
// $ pulumi import datadog:index/sensitiveDataScannerRule:SensitiveDataScannerRule new_list "<rule_id>"
// ```
type SensitiveDataScannerRule struct {
	pulumi.CustomResourceState

	// Description of the rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Attributes excluded from the scan. If namespaces is provided, it has to be a sub-path of the namespaces array.
	ExcludedNamespaces pulumi.StringArrayOutput `pulumi:"excludedNamespaces"`
	// Id of the scanning group the rule belongs to.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// Object defining a set of keywords and a number of characters that help reduce noise. You can provide a list of keywords you would like to check within a defined proximity of the matching pattern. If any of the keywords are found within the proximity check then the match is kept. If none are found, the match is discarded. Setting the `createBeforeDestroy` lifecycle Meta-argument to `true` is highly recommended if modifying this field to avoid unexpectedly disabling Sensitive Data Scanner groups.
	IncludedKeywordConfiguration SensitiveDataScannerRuleIncludedKeywordConfigurationPtrOutput `pulumi:"includedKeywordConfiguration"`
	// Whether or not the rule is enabled.
	IsEnabled pulumi.BoolPtrOutput `pulumi:"isEnabled"`
	// Name of the rule.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Attributes included in the scan. If namespaces is empty or missing, all attributes except excludedNamespaces are scanned. If both are missing the whole event is scanned.
	Namespaces pulumi.StringArrayOutput `pulumi:"namespaces"`
	// Not included if there is a relationship to a standard pattern.
	Pattern pulumi.StringPtrOutput `pulumi:"pattern"`
	// Priority level of the rule (optional). Used to order sensitive data discovered in the sds summary page. It must be between 1 and 5 (1 being the most important).
	Priority pulumi.IntOutput `pulumi:"priority"`
	// Id of the standard pattern the rule refers to. If provided, then pattern must not be provided.
	StandardPatternId pulumi.StringPtrOutput `pulumi:"standardPatternId"`
	// List of tags.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Object describing how the scanned event will be replaced. Defaults to `type: none`
	TextReplacement SensitiveDataScannerRuleTextReplacementPtrOutput `pulumi:"textReplacement"`
}

// NewSensitiveDataScannerRule registers a new resource with the given unique name, arguments, and options.
func NewSensitiveDataScannerRule(ctx *pulumi.Context,
	name string, args *SensitiveDataScannerRuleArgs, opts ...pulumi.ResourceOption) (*SensitiveDataScannerRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SensitiveDataScannerRule
	err := ctx.RegisterResource("datadog:index/sensitiveDataScannerRule:SensitiveDataScannerRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSensitiveDataScannerRule gets an existing SensitiveDataScannerRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSensitiveDataScannerRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SensitiveDataScannerRuleState, opts ...pulumi.ResourceOption) (*SensitiveDataScannerRule, error) {
	var resource SensitiveDataScannerRule
	err := ctx.ReadResource("datadog:index/sensitiveDataScannerRule:SensitiveDataScannerRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SensitiveDataScannerRule resources.
type sensitiveDataScannerRuleState struct {
	// Description of the rule.
	Description *string `pulumi:"description"`
	// Attributes excluded from the scan. If namespaces is provided, it has to be a sub-path of the namespaces array.
	ExcludedNamespaces []string `pulumi:"excludedNamespaces"`
	// Id of the scanning group the rule belongs to.
	GroupId *string `pulumi:"groupId"`
	// Object defining a set of keywords and a number of characters that help reduce noise. You can provide a list of keywords you would like to check within a defined proximity of the matching pattern. If any of the keywords are found within the proximity check then the match is kept. If none are found, the match is discarded. Setting the `createBeforeDestroy` lifecycle Meta-argument to `true` is highly recommended if modifying this field to avoid unexpectedly disabling Sensitive Data Scanner groups.
	IncludedKeywordConfiguration *SensitiveDataScannerRuleIncludedKeywordConfiguration `pulumi:"includedKeywordConfiguration"`
	// Whether or not the rule is enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Name of the rule.
	Name *string `pulumi:"name"`
	// Attributes included in the scan. If namespaces is empty or missing, all attributes except excludedNamespaces are scanned. If both are missing the whole event is scanned.
	Namespaces []string `pulumi:"namespaces"`
	// Not included if there is a relationship to a standard pattern.
	Pattern *string `pulumi:"pattern"`
	// Priority level of the rule (optional). Used to order sensitive data discovered in the sds summary page. It must be between 1 and 5 (1 being the most important).
	Priority *int `pulumi:"priority"`
	// Id of the standard pattern the rule refers to. If provided, then pattern must not be provided.
	StandardPatternId *string `pulumi:"standardPatternId"`
	// List of tags.
	Tags []string `pulumi:"tags"`
	// Object describing how the scanned event will be replaced. Defaults to `type: none`
	TextReplacement *SensitiveDataScannerRuleTextReplacement `pulumi:"textReplacement"`
}

type SensitiveDataScannerRuleState struct {
	// Description of the rule.
	Description pulumi.StringPtrInput
	// Attributes excluded from the scan. If namespaces is provided, it has to be a sub-path of the namespaces array.
	ExcludedNamespaces pulumi.StringArrayInput
	// Id of the scanning group the rule belongs to.
	GroupId pulumi.StringPtrInput
	// Object defining a set of keywords and a number of characters that help reduce noise. You can provide a list of keywords you would like to check within a defined proximity of the matching pattern. If any of the keywords are found within the proximity check then the match is kept. If none are found, the match is discarded. Setting the `createBeforeDestroy` lifecycle Meta-argument to `true` is highly recommended if modifying this field to avoid unexpectedly disabling Sensitive Data Scanner groups.
	IncludedKeywordConfiguration SensitiveDataScannerRuleIncludedKeywordConfigurationPtrInput
	// Whether or not the rule is enabled.
	IsEnabled pulumi.BoolPtrInput
	// Name of the rule.
	Name pulumi.StringPtrInput
	// Attributes included in the scan. If namespaces is empty or missing, all attributes except excludedNamespaces are scanned. If both are missing the whole event is scanned.
	Namespaces pulumi.StringArrayInput
	// Not included if there is a relationship to a standard pattern.
	Pattern pulumi.StringPtrInput
	// Priority level of the rule (optional). Used to order sensitive data discovered in the sds summary page. It must be between 1 and 5 (1 being the most important).
	Priority pulumi.IntPtrInput
	// Id of the standard pattern the rule refers to. If provided, then pattern must not be provided.
	StandardPatternId pulumi.StringPtrInput
	// List of tags.
	Tags pulumi.StringArrayInput
	// Object describing how the scanned event will be replaced. Defaults to `type: none`
	TextReplacement SensitiveDataScannerRuleTextReplacementPtrInput
}

func (SensitiveDataScannerRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*sensitiveDataScannerRuleState)(nil)).Elem()
}

type sensitiveDataScannerRuleArgs struct {
	// Description of the rule.
	Description *string `pulumi:"description"`
	// Attributes excluded from the scan. If namespaces is provided, it has to be a sub-path of the namespaces array.
	ExcludedNamespaces []string `pulumi:"excludedNamespaces"`
	// Id of the scanning group the rule belongs to.
	GroupId string `pulumi:"groupId"`
	// Object defining a set of keywords and a number of characters that help reduce noise. You can provide a list of keywords you would like to check within a defined proximity of the matching pattern. If any of the keywords are found within the proximity check then the match is kept. If none are found, the match is discarded. Setting the `createBeforeDestroy` lifecycle Meta-argument to `true` is highly recommended if modifying this field to avoid unexpectedly disabling Sensitive Data Scanner groups.
	IncludedKeywordConfiguration *SensitiveDataScannerRuleIncludedKeywordConfiguration `pulumi:"includedKeywordConfiguration"`
	// Whether or not the rule is enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Name of the rule.
	Name *string `pulumi:"name"`
	// Attributes included in the scan. If namespaces is empty or missing, all attributes except excludedNamespaces are scanned. If both are missing the whole event is scanned.
	Namespaces []string `pulumi:"namespaces"`
	// Not included if there is a relationship to a standard pattern.
	Pattern *string `pulumi:"pattern"`
	// Priority level of the rule (optional). Used to order sensitive data discovered in the sds summary page. It must be between 1 and 5 (1 being the most important).
	Priority *int `pulumi:"priority"`
	// Id of the standard pattern the rule refers to. If provided, then pattern must not be provided.
	StandardPatternId *string `pulumi:"standardPatternId"`
	// List of tags.
	Tags []string `pulumi:"tags"`
	// Object describing how the scanned event will be replaced. Defaults to `type: none`
	TextReplacement *SensitiveDataScannerRuleTextReplacement `pulumi:"textReplacement"`
}

// The set of arguments for constructing a SensitiveDataScannerRule resource.
type SensitiveDataScannerRuleArgs struct {
	// Description of the rule.
	Description pulumi.StringPtrInput
	// Attributes excluded from the scan. If namespaces is provided, it has to be a sub-path of the namespaces array.
	ExcludedNamespaces pulumi.StringArrayInput
	// Id of the scanning group the rule belongs to.
	GroupId pulumi.StringInput
	// Object defining a set of keywords and a number of characters that help reduce noise. You can provide a list of keywords you would like to check within a defined proximity of the matching pattern. If any of the keywords are found within the proximity check then the match is kept. If none are found, the match is discarded. Setting the `createBeforeDestroy` lifecycle Meta-argument to `true` is highly recommended if modifying this field to avoid unexpectedly disabling Sensitive Data Scanner groups.
	IncludedKeywordConfiguration SensitiveDataScannerRuleIncludedKeywordConfigurationPtrInput
	// Whether or not the rule is enabled.
	IsEnabled pulumi.BoolPtrInput
	// Name of the rule.
	Name pulumi.StringPtrInput
	// Attributes included in the scan. If namespaces is empty or missing, all attributes except excludedNamespaces are scanned. If both are missing the whole event is scanned.
	Namespaces pulumi.StringArrayInput
	// Not included if there is a relationship to a standard pattern.
	Pattern pulumi.StringPtrInput
	// Priority level of the rule (optional). Used to order sensitive data discovered in the sds summary page. It must be between 1 and 5 (1 being the most important).
	Priority pulumi.IntPtrInput
	// Id of the standard pattern the rule refers to. If provided, then pattern must not be provided.
	StandardPatternId pulumi.StringPtrInput
	// List of tags.
	Tags pulumi.StringArrayInput
	// Object describing how the scanned event will be replaced. Defaults to `type: none`
	TextReplacement SensitiveDataScannerRuleTextReplacementPtrInput
}

func (SensitiveDataScannerRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sensitiveDataScannerRuleArgs)(nil)).Elem()
}

type SensitiveDataScannerRuleInput interface {
	pulumi.Input

	ToSensitiveDataScannerRuleOutput() SensitiveDataScannerRuleOutput
	ToSensitiveDataScannerRuleOutputWithContext(ctx context.Context) SensitiveDataScannerRuleOutput
}

func (*SensitiveDataScannerRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SensitiveDataScannerRule)(nil)).Elem()
}

func (i *SensitiveDataScannerRule) ToSensitiveDataScannerRuleOutput() SensitiveDataScannerRuleOutput {
	return i.ToSensitiveDataScannerRuleOutputWithContext(context.Background())
}

func (i *SensitiveDataScannerRule) ToSensitiveDataScannerRuleOutputWithContext(ctx context.Context) SensitiveDataScannerRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensitiveDataScannerRuleOutput)
}

// SensitiveDataScannerRuleArrayInput is an input type that accepts SensitiveDataScannerRuleArray and SensitiveDataScannerRuleArrayOutput values.
// You can construct a concrete instance of `SensitiveDataScannerRuleArrayInput` via:
//
//	SensitiveDataScannerRuleArray{ SensitiveDataScannerRuleArgs{...} }
type SensitiveDataScannerRuleArrayInput interface {
	pulumi.Input

	ToSensitiveDataScannerRuleArrayOutput() SensitiveDataScannerRuleArrayOutput
	ToSensitiveDataScannerRuleArrayOutputWithContext(context.Context) SensitiveDataScannerRuleArrayOutput
}

type SensitiveDataScannerRuleArray []SensitiveDataScannerRuleInput

func (SensitiveDataScannerRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensitiveDataScannerRule)(nil)).Elem()
}

func (i SensitiveDataScannerRuleArray) ToSensitiveDataScannerRuleArrayOutput() SensitiveDataScannerRuleArrayOutput {
	return i.ToSensitiveDataScannerRuleArrayOutputWithContext(context.Background())
}

func (i SensitiveDataScannerRuleArray) ToSensitiveDataScannerRuleArrayOutputWithContext(ctx context.Context) SensitiveDataScannerRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensitiveDataScannerRuleArrayOutput)
}

// SensitiveDataScannerRuleMapInput is an input type that accepts SensitiveDataScannerRuleMap and SensitiveDataScannerRuleMapOutput values.
// You can construct a concrete instance of `SensitiveDataScannerRuleMapInput` via:
//
//	SensitiveDataScannerRuleMap{ "key": SensitiveDataScannerRuleArgs{...} }
type SensitiveDataScannerRuleMapInput interface {
	pulumi.Input

	ToSensitiveDataScannerRuleMapOutput() SensitiveDataScannerRuleMapOutput
	ToSensitiveDataScannerRuleMapOutputWithContext(context.Context) SensitiveDataScannerRuleMapOutput
}

type SensitiveDataScannerRuleMap map[string]SensitiveDataScannerRuleInput

func (SensitiveDataScannerRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensitiveDataScannerRule)(nil)).Elem()
}

func (i SensitiveDataScannerRuleMap) ToSensitiveDataScannerRuleMapOutput() SensitiveDataScannerRuleMapOutput {
	return i.ToSensitiveDataScannerRuleMapOutputWithContext(context.Background())
}

func (i SensitiveDataScannerRuleMap) ToSensitiveDataScannerRuleMapOutputWithContext(ctx context.Context) SensitiveDataScannerRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensitiveDataScannerRuleMapOutput)
}

type SensitiveDataScannerRuleOutput struct{ *pulumi.OutputState }

func (SensitiveDataScannerRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SensitiveDataScannerRule)(nil)).Elem()
}

func (o SensitiveDataScannerRuleOutput) ToSensitiveDataScannerRuleOutput() SensitiveDataScannerRuleOutput {
	return o
}

func (o SensitiveDataScannerRuleOutput) ToSensitiveDataScannerRuleOutputWithContext(ctx context.Context) SensitiveDataScannerRuleOutput {
	return o
}

// Description of the rule.
func (o SensitiveDataScannerRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SensitiveDataScannerRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Attributes excluded from the scan. If namespaces is provided, it has to be a sub-path of the namespaces array.
func (o SensitiveDataScannerRuleOutput) ExcludedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SensitiveDataScannerRule) pulumi.StringArrayOutput { return v.ExcludedNamespaces }).(pulumi.StringArrayOutput)
}

// Id of the scanning group the rule belongs to.
func (o SensitiveDataScannerRuleOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataScannerRule) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// Object defining a set of keywords and a number of characters that help reduce noise. You can provide a list of keywords you would like to check within a defined proximity of the matching pattern. If any of the keywords are found within the proximity check then the match is kept. If none are found, the match is discarded. Setting the `createBeforeDestroy` lifecycle Meta-argument to `true` is highly recommended if modifying this field to avoid unexpectedly disabling Sensitive Data Scanner groups.
func (o SensitiveDataScannerRuleOutput) IncludedKeywordConfiguration() SensitiveDataScannerRuleIncludedKeywordConfigurationPtrOutput {
	return o.ApplyT(func(v *SensitiveDataScannerRule) SensitiveDataScannerRuleIncludedKeywordConfigurationPtrOutput {
		return v.IncludedKeywordConfiguration
	}).(SensitiveDataScannerRuleIncludedKeywordConfigurationPtrOutput)
}

// Whether or not the rule is enabled.
func (o SensitiveDataScannerRuleOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SensitiveDataScannerRule) pulumi.BoolPtrOutput { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// Name of the rule.
func (o SensitiveDataScannerRuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SensitiveDataScannerRule) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Attributes included in the scan. If namespaces is empty or missing, all attributes except excludedNamespaces are scanned. If both are missing the whole event is scanned.
func (o SensitiveDataScannerRuleOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SensitiveDataScannerRule) pulumi.StringArrayOutput { return v.Namespaces }).(pulumi.StringArrayOutput)
}

// Not included if there is a relationship to a standard pattern.
func (o SensitiveDataScannerRuleOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SensitiveDataScannerRule) pulumi.StringPtrOutput { return v.Pattern }).(pulumi.StringPtrOutput)
}

// Priority level of the rule (optional). Used to order sensitive data discovered in the sds summary page. It must be between 1 and 5 (1 being the most important).
func (o SensitiveDataScannerRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *SensitiveDataScannerRule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// Id of the standard pattern the rule refers to. If provided, then pattern must not be provided.
func (o SensitiveDataScannerRuleOutput) StandardPatternId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SensitiveDataScannerRule) pulumi.StringPtrOutput { return v.StandardPatternId }).(pulumi.StringPtrOutput)
}

// List of tags.
func (o SensitiveDataScannerRuleOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SensitiveDataScannerRule) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Object describing how the scanned event will be replaced. Defaults to `type: none`
func (o SensitiveDataScannerRuleOutput) TextReplacement() SensitiveDataScannerRuleTextReplacementPtrOutput {
	return o.ApplyT(func(v *SensitiveDataScannerRule) SensitiveDataScannerRuleTextReplacementPtrOutput {
		return v.TextReplacement
	}).(SensitiveDataScannerRuleTextReplacementPtrOutput)
}

type SensitiveDataScannerRuleArrayOutput struct{ *pulumi.OutputState }

func (SensitiveDataScannerRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensitiveDataScannerRule)(nil)).Elem()
}

func (o SensitiveDataScannerRuleArrayOutput) ToSensitiveDataScannerRuleArrayOutput() SensitiveDataScannerRuleArrayOutput {
	return o
}

func (o SensitiveDataScannerRuleArrayOutput) ToSensitiveDataScannerRuleArrayOutputWithContext(ctx context.Context) SensitiveDataScannerRuleArrayOutput {
	return o
}

func (o SensitiveDataScannerRuleArrayOutput) Index(i pulumi.IntInput) SensitiveDataScannerRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SensitiveDataScannerRule {
		return vs[0].([]*SensitiveDataScannerRule)[vs[1].(int)]
	}).(SensitiveDataScannerRuleOutput)
}

type SensitiveDataScannerRuleMapOutput struct{ *pulumi.OutputState }

func (SensitiveDataScannerRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensitiveDataScannerRule)(nil)).Elem()
}

func (o SensitiveDataScannerRuleMapOutput) ToSensitiveDataScannerRuleMapOutput() SensitiveDataScannerRuleMapOutput {
	return o
}

func (o SensitiveDataScannerRuleMapOutput) ToSensitiveDataScannerRuleMapOutputWithContext(ctx context.Context) SensitiveDataScannerRuleMapOutput {
	return o
}

func (o SensitiveDataScannerRuleMapOutput) MapIndex(k pulumi.StringInput) SensitiveDataScannerRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SensitiveDataScannerRule {
		return vs[0].(map[string]*SensitiveDataScannerRule)[vs[1].(string)]
	}).(SensitiveDataScannerRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SensitiveDataScannerRuleInput)(nil)).Elem(), &SensitiveDataScannerRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensitiveDataScannerRuleArrayInput)(nil)).Elem(), SensitiveDataScannerRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensitiveDataScannerRuleMapInput)(nil)).Elem(), SensitiveDataScannerRuleMap{})
	pulumi.RegisterOutputType(SensitiveDataScannerRuleOutput{})
	pulumi.RegisterOutputType(SensitiveDataScannerRuleArrayOutput{})
	pulumi.RegisterOutputType(SensitiveDataScannerRuleMapOutput{})
}
