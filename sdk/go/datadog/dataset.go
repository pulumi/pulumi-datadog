// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog Dataset resource. This can be used to create and manage Datadog datasets.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create new dataset resource
//			_, err := datadog.NewDataset(ctx, "foo", &datadog.DatasetArgs{
//				Name: pulumi.String("HR Dataset"),
//				Principals: pulumi.StringArray{
//					pulumi.String("role:00000000-0000-1111-0000-000000000000"),
//				},
//				ProductFilters: datadog.DatasetProductFilterArray{
//					&datadog.DatasetProductFilterArgs{
//						Product: pulumi.String("rum"),
//						Filters: pulumi.StringArray{
//							pulumi.String("@application.id:123"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import datadog:index/dataset:Dataset foo "<dataset_id>"
// ```
type Dataset struct {
	pulumi.CustomResourceState

	// Indicates when the dataset was created (in ISO 8601).
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Indicates who created the dataset.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// The name of the dataset.
	Name pulumi.StringOutput `pulumi:"name"`
	// An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `team`.
	Principals     pulumi.StringArrayOutput        `pulumi:"principals"`
	ProductFilters DatasetProductFilterArrayOutput `pulumi:"productFilters"`
}

// NewDataset registers a new resource with the given unique name, arguments, and options.
func NewDataset(ctx *pulumi.Context,
	name string, args *DatasetArgs, opts ...pulumi.ResourceOption) (*Dataset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Principals == nil {
		return nil, errors.New("invalid value for required argument 'Principals'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dataset
	err := ctx.RegisterResource("datadog:index/dataset:Dataset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataset gets an existing Dataset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetState, opts ...pulumi.ResourceOption) (*Dataset, error) {
	var resource Dataset
	err := ctx.ReadResource("datadog:index/dataset:Dataset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dataset resources.
type datasetState struct {
	// Indicates when the dataset was created (in ISO 8601).
	CreatedAt *string `pulumi:"createdAt"`
	// Indicates who created the dataset.
	CreatedBy *string `pulumi:"createdBy"`
	// The name of the dataset.
	Name *string `pulumi:"name"`
	// An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `team`.
	Principals     []string               `pulumi:"principals"`
	ProductFilters []DatasetProductFilter `pulumi:"productFilters"`
}

type DatasetState struct {
	// Indicates when the dataset was created (in ISO 8601).
	CreatedAt pulumi.StringPtrInput
	// Indicates who created the dataset.
	CreatedBy pulumi.StringPtrInput
	// The name of the dataset.
	Name pulumi.StringPtrInput
	// An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `team`.
	Principals     pulumi.StringArrayInput
	ProductFilters DatasetProductFilterArrayInput
}

func (DatasetState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetState)(nil)).Elem()
}

type datasetArgs struct {
	// The name of the dataset.
	Name string `pulumi:"name"`
	// An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `team`.
	Principals     []string               `pulumi:"principals"`
	ProductFilters []DatasetProductFilter `pulumi:"productFilters"`
}

// The set of arguments for constructing a Dataset resource.
type DatasetArgs struct {
	// The name of the dataset.
	Name pulumi.StringInput
	// An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `team`.
	Principals     pulumi.StringArrayInput
	ProductFilters DatasetProductFilterArrayInput
}

func (DatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetArgs)(nil)).Elem()
}

type DatasetInput interface {
	pulumi.Input

	ToDatasetOutput() DatasetOutput
	ToDatasetOutputWithContext(ctx context.Context) DatasetOutput
}

func (*Dataset) ElementType() reflect.Type {
	return reflect.TypeOf((**Dataset)(nil)).Elem()
}

func (i *Dataset) ToDatasetOutput() DatasetOutput {
	return i.ToDatasetOutputWithContext(context.Background())
}

func (i *Dataset) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetOutput)
}

// DatasetArrayInput is an input type that accepts DatasetArray and DatasetArrayOutput values.
// You can construct a concrete instance of `DatasetArrayInput` via:
//
//	DatasetArray{ DatasetArgs{...} }
type DatasetArrayInput interface {
	pulumi.Input

	ToDatasetArrayOutput() DatasetArrayOutput
	ToDatasetArrayOutputWithContext(context.Context) DatasetArrayOutput
}

type DatasetArray []DatasetInput

func (DatasetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dataset)(nil)).Elem()
}

func (i DatasetArray) ToDatasetArrayOutput() DatasetArrayOutput {
	return i.ToDatasetArrayOutputWithContext(context.Background())
}

func (i DatasetArray) ToDatasetArrayOutputWithContext(ctx context.Context) DatasetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetArrayOutput)
}

// DatasetMapInput is an input type that accepts DatasetMap and DatasetMapOutput values.
// You can construct a concrete instance of `DatasetMapInput` via:
//
//	DatasetMap{ "key": DatasetArgs{...} }
type DatasetMapInput interface {
	pulumi.Input

	ToDatasetMapOutput() DatasetMapOutput
	ToDatasetMapOutputWithContext(context.Context) DatasetMapOutput
}

type DatasetMap map[string]DatasetInput

func (DatasetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dataset)(nil)).Elem()
}

func (i DatasetMap) ToDatasetMapOutput() DatasetMapOutput {
	return i.ToDatasetMapOutputWithContext(context.Background())
}

func (i DatasetMap) ToDatasetMapOutputWithContext(ctx context.Context) DatasetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetMapOutput)
}

type DatasetOutput struct{ *pulumi.OutputState }

func (DatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dataset)(nil)).Elem()
}

func (o DatasetOutput) ToDatasetOutput() DatasetOutput {
	return o
}

func (o DatasetOutput) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return o
}

// Indicates when the dataset was created (in ISO 8601).
func (o DatasetOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Indicates who created the dataset.
func (o DatasetOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// The name of the dataset.
func (o DatasetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `team`.
func (o DatasetOutput) Principals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringArrayOutput { return v.Principals }).(pulumi.StringArrayOutput)
}

func (o DatasetOutput) ProductFilters() DatasetProductFilterArrayOutput {
	return o.ApplyT(func(v *Dataset) DatasetProductFilterArrayOutput { return v.ProductFilters }).(DatasetProductFilterArrayOutput)
}

type DatasetArrayOutput struct{ *pulumi.OutputState }

func (DatasetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dataset)(nil)).Elem()
}

func (o DatasetArrayOutput) ToDatasetArrayOutput() DatasetArrayOutput {
	return o
}

func (o DatasetArrayOutput) ToDatasetArrayOutputWithContext(ctx context.Context) DatasetArrayOutput {
	return o
}

func (o DatasetArrayOutput) Index(i pulumi.IntInput) DatasetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dataset {
		return vs[0].([]*Dataset)[vs[1].(int)]
	}).(DatasetOutput)
}

type DatasetMapOutput struct{ *pulumi.OutputState }

func (DatasetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dataset)(nil)).Elem()
}

func (o DatasetMapOutput) ToDatasetMapOutput() DatasetMapOutput {
	return o
}

func (o DatasetMapOutput) ToDatasetMapOutputWithContext(ctx context.Context) DatasetMapOutput {
	return o
}

func (o DatasetMapOutput) MapIndex(k pulumi.StringInput) DatasetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dataset {
		return vs[0].(map[string]*Dataset)[vs[1].(string)]
	}).(DatasetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetInput)(nil)).Elem(), &Dataset{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetArrayInput)(nil)).Elem(), DatasetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetMapInput)(nil)).Elem(), DatasetMap{})
	pulumi.RegisterOutputType(DatasetOutput{})
	pulumi.RegisterOutputType(DatasetArrayOutput{})
	pulumi.RegisterOutputType(DatasetMapOutput{})
}
