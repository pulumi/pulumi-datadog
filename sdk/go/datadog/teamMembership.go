// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog TeamMembership resource. This can be used to create and manage Datadog team_membership.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooTeam, err := datadog.NewTeam(ctx, "fooTeam", &datadog.TeamArgs{
//				Description: pulumi.String("Example team"),
//				Handle:      pulumi.String("example-team-updated"),
//				Name:        pulumi.String("Example Team-updated"),
//			})
//			if err != nil {
//				return err
//			}
//			fooUser, err := datadog.NewUser(ctx, "fooUser", &datadog.UserArgs{
//				Email: pulumi.String("new@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create new team_membership resource
//			_, err = datadog.NewTeamMembership(ctx, "fooTeamMembership", &datadog.TeamMembershipArgs{
//				TeamId: fooTeam.ID(),
//				UserId: fooUser.ID(),
//				Role:   pulumi.String("admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource is imported using team_id and user_id seperated by `:`.
//
// ```sh
// $ pulumi import datadog:index/teamMembership:TeamMembership foo "${team_id}:${user_id}"
// ```
type TeamMembership struct {
	pulumi.CustomResourceState

	// The user's role within the team. Valid values are `admin`.
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// ID of the team the team membership is associated with.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// The ID of the user.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewTeamMembership registers a new resource with the given unique name, arguments, and options.
func NewTeamMembership(ctx *pulumi.Context,
	name string, args *TeamMembershipArgs, opts ...pulumi.ResourceOption) (*TeamMembership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TeamMembership
	err := ctx.RegisterResource("datadog:index/teamMembership:TeamMembership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamMembership gets an existing TeamMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamMembershipState, opts ...pulumi.ResourceOption) (*TeamMembership, error) {
	var resource TeamMembership
	err := ctx.ReadResource("datadog:index/teamMembership:TeamMembership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamMembership resources.
type teamMembershipState struct {
	// The user's role within the team. Valid values are `admin`.
	Role *string `pulumi:"role"`
	// ID of the team the team membership is associated with.
	TeamId *string `pulumi:"teamId"`
	// The ID of the user.
	UserId *string `pulumi:"userId"`
}

type TeamMembershipState struct {
	// The user's role within the team. Valid values are `admin`.
	Role pulumi.StringPtrInput
	// ID of the team the team membership is associated with.
	TeamId pulumi.StringPtrInput
	// The ID of the user.
	UserId pulumi.StringPtrInput
}

func (TeamMembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamMembershipState)(nil)).Elem()
}

type teamMembershipArgs struct {
	// The user's role within the team. Valid values are `admin`.
	Role *string `pulumi:"role"`
	// ID of the team the team membership is associated with.
	TeamId string `pulumi:"teamId"`
	// The ID of the user.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a TeamMembership resource.
type TeamMembershipArgs struct {
	// The user's role within the team. Valid values are `admin`.
	Role pulumi.StringPtrInput
	// ID of the team the team membership is associated with.
	TeamId pulumi.StringInput
	// The ID of the user.
	UserId pulumi.StringInput
}

func (TeamMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamMembershipArgs)(nil)).Elem()
}

type TeamMembershipInput interface {
	pulumi.Input

	ToTeamMembershipOutput() TeamMembershipOutput
	ToTeamMembershipOutputWithContext(ctx context.Context) TeamMembershipOutput
}

func (*TeamMembership) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamMembership)(nil)).Elem()
}

func (i *TeamMembership) ToTeamMembershipOutput() TeamMembershipOutput {
	return i.ToTeamMembershipOutputWithContext(context.Background())
}

func (i *TeamMembership) ToTeamMembershipOutputWithContext(ctx context.Context) TeamMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMembershipOutput)
}

// TeamMembershipArrayInput is an input type that accepts TeamMembershipArray and TeamMembershipArrayOutput values.
// You can construct a concrete instance of `TeamMembershipArrayInput` via:
//
//	TeamMembershipArray{ TeamMembershipArgs{...} }
type TeamMembershipArrayInput interface {
	pulumi.Input

	ToTeamMembershipArrayOutput() TeamMembershipArrayOutput
	ToTeamMembershipArrayOutputWithContext(context.Context) TeamMembershipArrayOutput
}

type TeamMembershipArray []TeamMembershipInput

func (TeamMembershipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamMembership)(nil)).Elem()
}

func (i TeamMembershipArray) ToTeamMembershipArrayOutput() TeamMembershipArrayOutput {
	return i.ToTeamMembershipArrayOutputWithContext(context.Background())
}

func (i TeamMembershipArray) ToTeamMembershipArrayOutputWithContext(ctx context.Context) TeamMembershipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMembershipArrayOutput)
}

// TeamMembershipMapInput is an input type that accepts TeamMembershipMap and TeamMembershipMapOutput values.
// You can construct a concrete instance of `TeamMembershipMapInput` via:
//
//	TeamMembershipMap{ "key": TeamMembershipArgs{...} }
type TeamMembershipMapInput interface {
	pulumi.Input

	ToTeamMembershipMapOutput() TeamMembershipMapOutput
	ToTeamMembershipMapOutputWithContext(context.Context) TeamMembershipMapOutput
}

type TeamMembershipMap map[string]TeamMembershipInput

func (TeamMembershipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamMembership)(nil)).Elem()
}

func (i TeamMembershipMap) ToTeamMembershipMapOutput() TeamMembershipMapOutput {
	return i.ToTeamMembershipMapOutputWithContext(context.Background())
}

func (i TeamMembershipMap) ToTeamMembershipMapOutputWithContext(ctx context.Context) TeamMembershipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMembershipMapOutput)
}

type TeamMembershipOutput struct{ *pulumi.OutputState }

func (TeamMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamMembership)(nil)).Elem()
}

func (o TeamMembershipOutput) ToTeamMembershipOutput() TeamMembershipOutput {
	return o
}

func (o TeamMembershipOutput) ToTeamMembershipOutputWithContext(ctx context.Context) TeamMembershipOutput {
	return o
}

// The user's role within the team. Valid values are `admin`.
func (o TeamMembershipOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamMembership) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// ID of the team the team membership is associated with.
func (o TeamMembershipOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamMembership) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// The ID of the user.
func (o TeamMembershipOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamMembership) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type TeamMembershipArrayOutput struct{ *pulumi.OutputState }

func (TeamMembershipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamMembership)(nil)).Elem()
}

func (o TeamMembershipArrayOutput) ToTeamMembershipArrayOutput() TeamMembershipArrayOutput {
	return o
}

func (o TeamMembershipArrayOutput) ToTeamMembershipArrayOutputWithContext(ctx context.Context) TeamMembershipArrayOutput {
	return o
}

func (o TeamMembershipArrayOutput) Index(i pulumi.IntInput) TeamMembershipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamMembership {
		return vs[0].([]*TeamMembership)[vs[1].(int)]
	}).(TeamMembershipOutput)
}

type TeamMembershipMapOutput struct{ *pulumi.OutputState }

func (TeamMembershipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamMembership)(nil)).Elem()
}

func (o TeamMembershipMapOutput) ToTeamMembershipMapOutput() TeamMembershipMapOutput {
	return o
}

func (o TeamMembershipMapOutput) ToTeamMembershipMapOutputWithContext(ctx context.Context) TeamMembershipMapOutput {
	return o
}

func (o TeamMembershipMapOutput) MapIndex(k pulumi.StringInput) TeamMembershipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamMembership {
		return vs[0].(map[string]*TeamMembership)[vs[1].(string)]
	}).(TeamMembershipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMembershipInput)(nil)).Elem(), &TeamMembership{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMembershipArrayInput)(nil)).Elem(), TeamMembershipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMembershipMapInput)(nil)).Elem(), TeamMembershipMap{})
	pulumi.RegisterOutputType(TeamMembershipOutput{})
	pulumi.RegisterOutputType(TeamMembershipArrayOutput{})
	pulumi.RegisterOutputType(TeamMembershipMapOutput{})
}
