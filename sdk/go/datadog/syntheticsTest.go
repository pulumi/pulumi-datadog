// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog synthetics test resource. This can be used to create and manage Datadog synthetics test.
//
// #### *Warning*
// Starting from version 3.1.0+, the direct usage of global variables in the configuration is deprecated, in favor of
// local variables of type `global`. As an example, if you were previously using `{{ GLOBAL_VAR }}` directly in your
// configuration, add a `configVariable` of type `global` with the `id` matching the `id` of the global variable `GLOBAL_VAR`, which can be found in the Synthetics UI or from the output of the `SyntheticsGlobalVariable` resource. The name can be chosen freely.
//
// In practice, it means going from (simplified configuration):
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// to
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// which you can now use in your request definition:
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.NewSyntheticsTest(ctx, "testApi", &datadog.SyntheticsTestArgs{
//				Assertions: datadog.SyntheticsTestAssertionArray{
//					&datadog.SyntheticsTestAssertionArgs{
//						Operator: pulumi.String("is"),
//						Target:   pulumi.String("200"),
//						Type:     pulumi.String("statusCode"),
//					},
//				},
//				Locations: pulumi.StringArray{
//					pulumi.String("aws:eu-central-1"),
//				},
//				Message: pulumi.String("Notify @pagerduty"),
//				Name:    pulumi.String("An API test on example.org"),
//				OptionsList: &datadog.SyntheticsTestOptionsListArgs{
//					MonitorOptions: &datadog.SyntheticsTestOptionsListMonitorOptionsArgs{
//						RenotifyInterval: pulumi.Int(120),
//					},
//					Retry: &datadog.SyntheticsTestOptionsListRetryArgs{
//						Count:    pulumi.Int(2),
//						Interval: pulumi.Int(300),
//					},
//					TickEvery: pulumi.Int(900),
//				},
//				RequestDefinition: &datadog.SyntheticsTestRequestDefinitionArgs{
//					Method: pulumi.String("GET"),
//					Url:    pulumi.String("https://www.example.org"),
//				},
//				RequestHeaders: pulumi.AnyMap{
//					"Authentication": pulumi.Any("Token: 1234566789"),
//					"Content-Type":   pulumi.Any("application/json"),
//				},
//				Status:  pulumi.String("live"),
//				Subtype: pulumi.String("http"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//					pulumi.String("foo"),
//					pulumi.String("env:test"),
//				},
//				Type: pulumi.String("api"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datadog.NewSyntheticsTest(ctx, "testSsl", &datadog.SyntheticsTestArgs{
//				Assertions: datadog.SyntheticsTestAssertionArray{
//					&datadog.SyntheticsTestAssertionArgs{
//						Operator: pulumi.String("isInMoreThan"),
//						Target:   pulumi.String("30"),
//						Type:     pulumi.String("certificate"),
//					},
//				},
//				Locations: pulumi.StringArray{
//					pulumi.String("aws:eu-central-1"),
//				},
//				Message: pulumi.String("Notify @pagerduty"),
//				Name:    pulumi.String("An API test on example.org"),
//				OptionsList: &datadog.SyntheticsTestOptionsListArgs{
//					AcceptSelfSigned: pulumi.Bool(true),
//					TickEvery:        pulumi.Int(900),
//				},
//				RequestDefinition: &datadog.SyntheticsTestRequestDefinitionArgs{
//					Host: pulumi.String("example.org"),
//					Port: pulumi.Int(443),
//				},
//				Status:  pulumi.String("live"),
//				Subtype: pulumi.String("ssl"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//					pulumi.String("foo"),
//					pulumi.String("env:test"),
//				},
//				Type: pulumi.String("api"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datadog.NewSyntheticsTest(ctx, "testTcp", &datadog.SyntheticsTestArgs{
//				Assertions: datadog.SyntheticsTestAssertionArray{
//					&datadog.SyntheticsTestAssertionArgs{
//						Operator: pulumi.String("lessThan"),
//						Target:   pulumi.String("2000"),
//						Type:     pulumi.String("responseTime"),
//					},
//				},
//				ConfigVariables: datadog.SyntheticsTestConfigVariableArray{
//					&datadog.SyntheticsTestConfigVariableArgs{
//						Id:   pulumi.String("76636cd1-82e2-4aeb-9cfe-51366a8198a2"),
//						Name: pulumi.String("MY_GLOBAL_VAR"),
//						Type: pulumi.String("global"),
//					},
//				},
//				Locations: pulumi.StringArray{
//					pulumi.String("aws:eu-central-1"),
//				},
//				Message: pulumi.String("Notify @pagerduty"),
//				Name:    pulumi.String("An API test on example.org"),
//				OptionsList: &datadog.SyntheticsTestOptionsListArgs{
//					TickEvery: pulumi.Int(900),
//				},
//				RequestDefinition: &datadog.SyntheticsTestRequestDefinitionArgs{
//					Host: pulumi.String("example.org"),
//					Port: pulumi.Int(443),
//				},
//				Status:  pulumi.String("live"),
//				Subtype: pulumi.String("tcp"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//					pulumi.String("foo"),
//					pulumi.String("env:test"),
//				},
//				Type: pulumi.String("api"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datadog.NewSyntheticsTest(ctx, "testDns", &datadog.SyntheticsTestArgs{
//				Assertions: datadog.SyntheticsTestAssertionArray{
//					&datadog.SyntheticsTestAssertionArgs{
//						Operator: pulumi.String("is"),
//						Property: pulumi.String("A"),
//						Target:   pulumi.String("0.0.0.0"),
//						Type:     pulumi.String("recordSome"),
//					},
//				},
//				Locations: pulumi.StringArray{
//					pulumi.String("aws:eu-central-1"),
//				},
//				Message: pulumi.String("Notify @pagerduty"),
//				Name:    pulumi.String("An API test on example.org"),
//				OptionsList: &datadog.SyntheticsTestOptionsListArgs{
//					TickEvery: pulumi.Int(900),
//				},
//				RequestDefinition: &datadog.SyntheticsTestRequestDefinitionArgs{
//					Host: pulumi.String("example.org"),
//				},
//				Status:  pulumi.String("live"),
//				Subtype: pulumi.String("dns"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//					pulumi.String("foo"),
//					pulumi.String("env:test"),
//				},
//				Type: pulumi.String("api"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datadog.NewSyntheticsTest(ctx, "test", &datadog.SyntheticsTestArgs{
//				ApiSteps: datadog.SyntheticsTestApiStepArray{
//					&datadog.SyntheticsTestApiStepArgs{
//						Assertions: datadog.SyntheticsTestApiStepAssertionArray{
//							&datadog.SyntheticsTestApiStepAssertionArgs{
//								Operator: pulumi.String("is"),
//								Target:   pulumi.String("200"),
//								Type:     pulumi.String("statusCode"),
//							},
//						},
//						Name: pulumi.String("An API test on example.org"),
//						RequestDefinition: &datadog.SyntheticsTestApiStepRequestDefinitionArgs{
//							Method: pulumi.String("GET"),
//							Url:    pulumi.String("https://example.org"),
//						},
//						RequestHeaders: pulumi.AnyMap{
//							"Authentication": pulumi.Any("Token: 1234566789"),
//							"Content-Type":   pulumi.Any("application/json"),
//						},
//						Subtype: pulumi.String("http"),
//					},
//					&datadog.SyntheticsTestApiStepArgs{
//						Assertions: datadog.SyntheticsTestApiStepAssertionArray{
//							&datadog.SyntheticsTestApiStepAssertionArgs{
//								Operator: pulumi.String("is"),
//								Target:   pulumi.String("200"),
//								Type:     pulumi.String("statusCode"),
//							},
//						},
//						Name: pulumi.String("An API test on example.org"),
//						RequestDefinition: &datadog.SyntheticsTestApiStepRequestDefinitionArgs{
//							Method: pulumi.String("GET"),
//							Url:    pulumi.String("http://example.org"),
//						},
//						Subtype: pulumi.String("http"),
//					},
//				},
//				Locations: pulumi.StringArray{
//					pulumi.String("aws:eu-central-1"),
//				},
//				Name: pulumi.String("Multistep API test"),
//				OptionsList: &datadog.SyntheticsTestOptionsListArgs{
//					AcceptSelfSigned: pulumi.Bool(true),
//					TickEvery:        pulumi.Int(900),
//				},
//				Status:  pulumi.String("live"),
//				Subtype: pulumi.String("multi"),
//				Type:    pulumi.String("api"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datadog.NewSyntheticsTest(ctx, "testBrowser", &datadog.SyntheticsTestArgs{
//				BrowserSteps: datadog.SyntheticsTestBrowserStepArray{
//					&datadog.SyntheticsTestBrowserStepArgs{
//						Name: pulumi.String("Check current url"),
//						Params: &datadog.SyntheticsTestBrowserStepParamsArgs{
//							Check: pulumi.String("contains"),
//							Value: pulumi.String("datadoghq"),
//						},
//						Type: pulumi.String("assertCurrentUrl"),
//					},
//				},
//				BrowserVariables: datadog.SyntheticsTestBrowserVariableArray{
//					&datadog.SyntheticsTestBrowserVariableArgs{
//						Example: pulumi.String("597"),
//						Name:    pulumi.String("MY_PATTERN_VAR"),
//						Pattern: pulumi.String("{{numeric(3)}}"),
//						Type:    pulumi.String("text"),
//					},
//					&datadog.SyntheticsTestBrowserVariableArgs{
//						Example: pulumi.String("jd8-afe-ydv.4546132139@synthetics.dtdg.co"),
//						Name:    pulumi.String("MY_EMAIL_VAR"),
//						Pattern: pulumi.String("jd8-afe-ydv.{{ numeric(10) }}@synthetics.dtdg.co"),
//						Type:    pulumi.String("email"),
//					},
//					&datadog.SyntheticsTestBrowserVariableArgs{
//						Id:   pulumi.String("76636cd1-82e2-4aeb-9cfe-51366a8198a2"),
//						Name: pulumi.String("MY_GLOBAL_VAR"),
//						Type: pulumi.String("global"),
//					},
//				},
//				DeviceIds: pulumi.StringArray{
//					pulumi.String("laptop_large"),
//				},
//				Locations: pulumi.StringArray{
//					pulumi.String("aws:eu-central-1"),
//				},
//				Message: pulumi.String("Notify @qa"),
//				Name:    pulumi.String("A Browser test on example.org"),
//				OptionsList: &datadog.SyntheticsTestOptionsListArgs{
//					TickEvery: pulumi.Int(3600),
//				},
//				RequestDefinition: &datadog.SyntheticsTestRequestDefinitionArgs{
//					Method: pulumi.String("GET"),
//					Url:    pulumi.String("https://app.datadoghq.com"),
//				},
//				Status: pulumi.String("paused"),
//				Tags:   pulumi.StringArray{},
//				Type:   pulumi.String("browser"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Synthetics tests can be imported using their public string ID, e.g.
//
// ```sh
//
//	$ pulumi import datadog:index/syntheticsTest:SyntheticsTest fizz abc-123-xyz
//
// ```
type SyntheticsTest struct {
	pulumi.CustomResourceState

	// Steps for multistep api tests
	ApiSteps SyntheticsTestApiStepArrayOutput `pulumi:"apiSteps"`
	// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
	Assertions SyntheticsTestAssertionArrayOutput `pulumi:"assertions"`
	// Steps for browser tests.
	BrowserSteps SyntheticsTestBrowserStepArrayOutput `pulumi:"browserSteps"`
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariables SyntheticsTestBrowserVariableArrayOutput `pulumi:"browserVariables"`
	// Variables used for the test configuration. Multiple `configVariable` blocks are allowed with the structure below.
	ConfigVariables SyntheticsTestConfigVariableArrayOutput `pulumi:"configVariables"`
	// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptopLarge`, `tablet`, `mobileSmall`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
	DeviceIds pulumi.StringArrayOutput `pulumi:"deviceIds"`
	// Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
	Locations pulumi.StringArrayOutput `pulumi:"locations"`
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events.
	Message pulumi.StringPtrOutput `pulumi:"message"`
	// ID of the monitor associated with the Datadog synthetics test.
	MonitorId pulumi.IntOutput `pulumi:"monitorId"`
	// Name of Datadog synthetics test.
	Name        pulumi.StringOutput                `pulumi:"name"`
	OptionsList SyntheticsTestOptionsListPtrOutput `pulumi:"optionsList"`
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth SyntheticsTestRequestBasicauthPtrOutput `pulumi:"requestBasicauth"`
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
	RequestClientCertificate SyntheticsTestRequestClientCertificatePtrOutput `pulumi:"requestClientCertificate"`
	// Required if `type = "api"`. The synthetics test request.
	RequestDefinition SyntheticsTestRequestDefinitionPtrOutput `pulumi:"requestDefinition"`
	// Header name and value map.
	RequestHeaders pulumi.MapOutput `pulumi:"requestHeaders"`
	// The proxy to perform the test.
	RequestProxy SyntheticsTestRequestProxyPtrOutput `pulumi:"requestProxy"`
	// Query arguments name and value map.
	RequestQuery pulumi.MapOutput `pulumi:"requestQuery"`
	// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
	SetCookie pulumi.StringPtrOutput `pulumi:"setCookie"`
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
	Status pulumi.StringOutput `pulumi:"status"`
	// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
	Subtype pulumi.StringPtrOutput `pulumi:"subtype"`
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Synthetics test type. Valid values are `api`, `browser`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSyntheticsTest registers a new resource with the given unique name, arguments, and options.
func NewSyntheticsTest(ctx *pulumi.Context,
	name string, args *SyntheticsTestArgs, opts ...pulumi.ResourceOption) (*SyntheticsTest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Locations == nil {
		return nil, errors.New("invalid value for required argument 'Locations'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource SyntheticsTest
	err := ctx.RegisterResource("datadog:index/syntheticsTest:SyntheticsTest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyntheticsTest gets an existing SyntheticsTest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyntheticsTest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyntheticsTestState, opts ...pulumi.ResourceOption) (*SyntheticsTest, error) {
	var resource SyntheticsTest
	err := ctx.ReadResource("datadog:index/syntheticsTest:SyntheticsTest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyntheticsTest resources.
type syntheticsTestState struct {
	// Steps for multistep api tests
	ApiSteps []SyntheticsTestApiStep `pulumi:"apiSteps"`
	// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
	Assertions []SyntheticsTestAssertion `pulumi:"assertions"`
	// Steps for browser tests.
	BrowserSteps []SyntheticsTestBrowserStep `pulumi:"browserSteps"`
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariables []SyntheticsTestBrowserVariable `pulumi:"browserVariables"`
	// Variables used for the test configuration. Multiple `configVariable` blocks are allowed with the structure below.
	ConfigVariables []SyntheticsTestConfigVariable `pulumi:"configVariables"`
	// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptopLarge`, `tablet`, `mobileSmall`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
	DeviceIds []string `pulumi:"deviceIds"`
	// Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
	Locations []string `pulumi:"locations"`
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events.
	Message *string `pulumi:"message"`
	// ID of the monitor associated with the Datadog synthetics test.
	MonitorId *int `pulumi:"monitorId"`
	// Name of Datadog synthetics test.
	Name        *string                    `pulumi:"name"`
	OptionsList *SyntheticsTestOptionsList `pulumi:"optionsList"`
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth *SyntheticsTestRequestBasicauth `pulumi:"requestBasicauth"`
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
	RequestClientCertificate *SyntheticsTestRequestClientCertificate `pulumi:"requestClientCertificate"`
	// Required if `type = "api"`. The synthetics test request.
	RequestDefinition *SyntheticsTestRequestDefinition `pulumi:"requestDefinition"`
	// Header name and value map.
	RequestHeaders map[string]interface{} `pulumi:"requestHeaders"`
	// The proxy to perform the test.
	RequestProxy *SyntheticsTestRequestProxy `pulumi:"requestProxy"`
	// Query arguments name and value map.
	RequestQuery map[string]interface{} `pulumi:"requestQuery"`
	// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
	SetCookie *string `pulumi:"setCookie"`
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
	Status *string `pulumi:"status"`
	// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
	Subtype *string `pulumi:"subtype"`
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
	Tags []string `pulumi:"tags"`
	// Synthetics test type. Valid values are `api`, `browser`.
	Type *string `pulumi:"type"`
}

type SyntheticsTestState struct {
	// Steps for multistep api tests
	ApiSteps SyntheticsTestApiStepArrayInput
	// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
	Assertions SyntheticsTestAssertionArrayInput
	// Steps for browser tests.
	BrowserSteps SyntheticsTestBrowserStepArrayInput
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariables SyntheticsTestBrowserVariableArrayInput
	// Variables used for the test configuration. Multiple `configVariable` blocks are allowed with the structure below.
	ConfigVariables SyntheticsTestConfigVariableArrayInput
	// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptopLarge`, `tablet`, `mobileSmall`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
	DeviceIds pulumi.StringArrayInput
	// Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
	Locations pulumi.StringArrayInput
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events.
	Message pulumi.StringPtrInput
	// ID of the monitor associated with the Datadog synthetics test.
	MonitorId pulumi.IntPtrInput
	// Name of Datadog synthetics test.
	Name        pulumi.StringPtrInput
	OptionsList SyntheticsTestOptionsListPtrInput
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth SyntheticsTestRequestBasicauthPtrInput
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
	RequestClientCertificate SyntheticsTestRequestClientCertificatePtrInput
	// Required if `type = "api"`. The synthetics test request.
	RequestDefinition SyntheticsTestRequestDefinitionPtrInput
	// Header name and value map.
	RequestHeaders pulumi.MapInput
	// The proxy to perform the test.
	RequestProxy SyntheticsTestRequestProxyPtrInput
	// Query arguments name and value map.
	RequestQuery pulumi.MapInput
	// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
	SetCookie pulumi.StringPtrInput
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
	Status pulumi.StringPtrInput
	// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
	Subtype pulumi.StringPtrInput
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
	Tags pulumi.StringArrayInput
	// Synthetics test type. Valid values are `api`, `browser`.
	Type pulumi.StringPtrInput
}

func (SyntheticsTestState) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticsTestState)(nil)).Elem()
}

type syntheticsTestArgs struct {
	// Steps for multistep api tests
	ApiSteps []SyntheticsTestApiStep `pulumi:"apiSteps"`
	// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
	Assertions []SyntheticsTestAssertion `pulumi:"assertions"`
	// Steps for browser tests.
	BrowserSteps []SyntheticsTestBrowserStep `pulumi:"browserSteps"`
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariables []SyntheticsTestBrowserVariable `pulumi:"browserVariables"`
	// Variables used for the test configuration. Multiple `configVariable` blocks are allowed with the structure below.
	ConfigVariables []SyntheticsTestConfigVariable `pulumi:"configVariables"`
	// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptopLarge`, `tablet`, `mobileSmall`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
	DeviceIds []string `pulumi:"deviceIds"`
	// Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
	Locations []string `pulumi:"locations"`
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events.
	Message *string `pulumi:"message"`
	// Name of Datadog synthetics test.
	Name        string                     `pulumi:"name"`
	OptionsList *SyntheticsTestOptionsList `pulumi:"optionsList"`
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth *SyntheticsTestRequestBasicauth `pulumi:"requestBasicauth"`
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
	RequestClientCertificate *SyntheticsTestRequestClientCertificate `pulumi:"requestClientCertificate"`
	// Required if `type = "api"`. The synthetics test request.
	RequestDefinition *SyntheticsTestRequestDefinition `pulumi:"requestDefinition"`
	// Header name and value map.
	RequestHeaders map[string]interface{} `pulumi:"requestHeaders"`
	// The proxy to perform the test.
	RequestProxy *SyntheticsTestRequestProxy `pulumi:"requestProxy"`
	// Query arguments name and value map.
	RequestQuery map[string]interface{} `pulumi:"requestQuery"`
	// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
	SetCookie *string `pulumi:"setCookie"`
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
	Status string `pulumi:"status"`
	// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
	Subtype *string `pulumi:"subtype"`
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
	Tags []string `pulumi:"tags"`
	// Synthetics test type. Valid values are `api`, `browser`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a SyntheticsTest resource.
type SyntheticsTestArgs struct {
	// Steps for multistep api tests
	ApiSteps SyntheticsTestApiStepArrayInput
	// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
	Assertions SyntheticsTestAssertionArrayInput
	// Steps for browser tests.
	BrowserSteps SyntheticsTestBrowserStepArrayInput
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariables SyntheticsTestBrowserVariableArrayInput
	// Variables used for the test configuration. Multiple `configVariable` blocks are allowed with the structure below.
	ConfigVariables SyntheticsTestConfigVariableArrayInput
	// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptopLarge`, `tablet`, `mobileSmall`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
	DeviceIds pulumi.StringArrayInput
	// Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
	Locations pulumi.StringArrayInput
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events.
	Message pulumi.StringPtrInput
	// Name of Datadog synthetics test.
	Name        pulumi.StringInput
	OptionsList SyntheticsTestOptionsListPtrInput
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth SyntheticsTestRequestBasicauthPtrInput
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
	RequestClientCertificate SyntheticsTestRequestClientCertificatePtrInput
	// Required if `type = "api"`. The synthetics test request.
	RequestDefinition SyntheticsTestRequestDefinitionPtrInput
	// Header name and value map.
	RequestHeaders pulumi.MapInput
	// The proxy to perform the test.
	RequestProxy SyntheticsTestRequestProxyPtrInput
	// Query arguments name and value map.
	RequestQuery pulumi.MapInput
	// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
	SetCookie pulumi.StringPtrInput
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
	Status pulumi.StringInput
	// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
	Subtype pulumi.StringPtrInput
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
	Tags pulumi.StringArrayInput
	// Synthetics test type. Valid values are `api`, `browser`.
	Type pulumi.StringInput
}

func (SyntheticsTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticsTestArgs)(nil)).Elem()
}

type SyntheticsTestInput interface {
	pulumi.Input

	ToSyntheticsTestOutput() SyntheticsTestOutput
	ToSyntheticsTestOutputWithContext(ctx context.Context) SyntheticsTestOutput
}

func (*SyntheticsTest) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTest)(nil)).Elem()
}

func (i *SyntheticsTest) ToSyntheticsTestOutput() SyntheticsTestOutput {
	return i.ToSyntheticsTestOutputWithContext(context.Background())
}

func (i *SyntheticsTest) ToSyntheticsTestOutputWithContext(ctx context.Context) SyntheticsTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOutput)
}

// SyntheticsTestArrayInput is an input type that accepts SyntheticsTestArray and SyntheticsTestArrayOutput values.
// You can construct a concrete instance of `SyntheticsTestArrayInput` via:
//
//	SyntheticsTestArray{ SyntheticsTestArgs{...} }
type SyntheticsTestArrayInput interface {
	pulumi.Input

	ToSyntheticsTestArrayOutput() SyntheticsTestArrayOutput
	ToSyntheticsTestArrayOutputWithContext(context.Context) SyntheticsTestArrayOutput
}

type SyntheticsTestArray []SyntheticsTestInput

func (SyntheticsTestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyntheticsTest)(nil)).Elem()
}

func (i SyntheticsTestArray) ToSyntheticsTestArrayOutput() SyntheticsTestArrayOutput {
	return i.ToSyntheticsTestArrayOutputWithContext(context.Background())
}

func (i SyntheticsTestArray) ToSyntheticsTestArrayOutputWithContext(ctx context.Context) SyntheticsTestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestArrayOutput)
}

// SyntheticsTestMapInput is an input type that accepts SyntheticsTestMap and SyntheticsTestMapOutput values.
// You can construct a concrete instance of `SyntheticsTestMapInput` via:
//
//	SyntheticsTestMap{ "key": SyntheticsTestArgs{...} }
type SyntheticsTestMapInput interface {
	pulumi.Input

	ToSyntheticsTestMapOutput() SyntheticsTestMapOutput
	ToSyntheticsTestMapOutputWithContext(context.Context) SyntheticsTestMapOutput
}

type SyntheticsTestMap map[string]SyntheticsTestInput

func (SyntheticsTestMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyntheticsTest)(nil)).Elem()
}

func (i SyntheticsTestMap) ToSyntheticsTestMapOutput() SyntheticsTestMapOutput {
	return i.ToSyntheticsTestMapOutputWithContext(context.Background())
}

func (i SyntheticsTestMap) ToSyntheticsTestMapOutputWithContext(ctx context.Context) SyntheticsTestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestMapOutput)
}

type SyntheticsTestOutput struct{ *pulumi.OutputState }

func (SyntheticsTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTest)(nil)).Elem()
}

func (o SyntheticsTestOutput) ToSyntheticsTestOutput() SyntheticsTestOutput {
	return o
}

func (o SyntheticsTestOutput) ToSyntheticsTestOutputWithContext(ctx context.Context) SyntheticsTestOutput {
	return o
}

// Steps for multistep api tests
func (o SyntheticsTestOutput) ApiSteps() SyntheticsTestApiStepArrayOutput {
	return o.ApplyT(func(v *SyntheticsTest) SyntheticsTestApiStepArrayOutput { return v.ApiSteps }).(SyntheticsTestApiStepArrayOutput)
}

// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
func (o SyntheticsTestOutput) Assertions() SyntheticsTestAssertionArrayOutput {
	return o.ApplyT(func(v *SyntheticsTest) SyntheticsTestAssertionArrayOutput { return v.Assertions }).(SyntheticsTestAssertionArrayOutput)
}

// Steps for browser tests.
func (o SyntheticsTestOutput) BrowserSteps() SyntheticsTestBrowserStepArrayOutput {
	return o.ApplyT(func(v *SyntheticsTest) SyntheticsTestBrowserStepArrayOutput { return v.BrowserSteps }).(SyntheticsTestBrowserStepArrayOutput)
}

// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
func (o SyntheticsTestOutput) BrowserVariables() SyntheticsTestBrowserVariableArrayOutput {
	return o.ApplyT(func(v *SyntheticsTest) SyntheticsTestBrowserVariableArrayOutput { return v.BrowserVariables }).(SyntheticsTestBrowserVariableArrayOutput)
}

// Variables used for the test configuration. Multiple `configVariable` blocks are allowed with the structure below.
func (o SyntheticsTestOutput) ConfigVariables() SyntheticsTestConfigVariableArrayOutput {
	return o.ApplyT(func(v *SyntheticsTest) SyntheticsTestConfigVariableArrayOutput { return v.ConfigVariables }).(SyntheticsTestConfigVariableArrayOutput)
}

// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptopLarge`, `tablet`, `mobileSmall`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
func (o SyntheticsTestOutput) DeviceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticsTest) pulumi.StringArrayOutput { return v.DeviceIds }).(pulumi.StringArrayOutput)
}

// Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
func (o SyntheticsTestOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticsTest) pulumi.StringArrayOutput { return v.Locations }).(pulumi.StringArrayOutput)
}

// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events.
func (o SyntheticsTestOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTest) pulumi.StringPtrOutput { return v.Message }).(pulumi.StringPtrOutput)
}

// ID of the monitor associated with the Datadog synthetics test.
func (o SyntheticsTestOutput) MonitorId() pulumi.IntOutput {
	return o.ApplyT(func(v *SyntheticsTest) pulumi.IntOutput { return v.MonitorId }).(pulumi.IntOutput)
}

// Name of Datadog synthetics test.
func (o SyntheticsTestOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SyntheticsTest) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SyntheticsTestOutput) OptionsList() SyntheticsTestOptionsListPtrOutput {
	return o.ApplyT(func(v *SyntheticsTest) SyntheticsTestOptionsListPtrOutput { return v.OptionsList }).(SyntheticsTestOptionsListPtrOutput)
}

// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
func (o SyntheticsTestOutput) RequestBasicauth() SyntheticsTestRequestBasicauthPtrOutput {
	return o.ApplyT(func(v *SyntheticsTest) SyntheticsTestRequestBasicauthPtrOutput { return v.RequestBasicauth }).(SyntheticsTestRequestBasicauthPtrOutput)
}

// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
func (o SyntheticsTestOutput) RequestClientCertificate() SyntheticsTestRequestClientCertificatePtrOutput {
	return o.ApplyT(func(v *SyntheticsTest) SyntheticsTestRequestClientCertificatePtrOutput {
		return v.RequestClientCertificate
	}).(SyntheticsTestRequestClientCertificatePtrOutput)
}

// Required if `type = "api"`. The synthetics test request.
func (o SyntheticsTestOutput) RequestDefinition() SyntheticsTestRequestDefinitionPtrOutput {
	return o.ApplyT(func(v *SyntheticsTest) SyntheticsTestRequestDefinitionPtrOutput { return v.RequestDefinition }).(SyntheticsTestRequestDefinitionPtrOutput)
}

// Header name and value map.
func (o SyntheticsTestOutput) RequestHeaders() pulumi.MapOutput {
	return o.ApplyT(func(v *SyntheticsTest) pulumi.MapOutput { return v.RequestHeaders }).(pulumi.MapOutput)
}

// The proxy to perform the test.
func (o SyntheticsTestOutput) RequestProxy() SyntheticsTestRequestProxyPtrOutput {
	return o.ApplyT(func(v *SyntheticsTest) SyntheticsTestRequestProxyPtrOutput { return v.RequestProxy }).(SyntheticsTestRequestProxyPtrOutput)
}

// Query arguments name and value map.
func (o SyntheticsTestOutput) RequestQuery() pulumi.MapOutput {
	return o.ApplyT(func(v *SyntheticsTest) pulumi.MapOutput { return v.RequestQuery }).(pulumi.MapOutput)
}

// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
func (o SyntheticsTestOutput) SetCookie() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTest) pulumi.StringPtrOutput { return v.SetCookie }).(pulumi.StringPtrOutput)
}

// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
func (o SyntheticsTestOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SyntheticsTest) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
func (o SyntheticsTestOutput) Subtype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTest) pulumi.StringPtrOutput { return v.Subtype }).(pulumi.StringPtrOutput)
}

// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
func (o SyntheticsTestOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticsTest) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Synthetics test type. Valid values are `api`, `browser`.
func (o SyntheticsTestOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SyntheticsTest) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type SyntheticsTestArrayOutput struct{ *pulumi.OutputState }

func (SyntheticsTestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyntheticsTest)(nil)).Elem()
}

func (o SyntheticsTestArrayOutput) ToSyntheticsTestArrayOutput() SyntheticsTestArrayOutput {
	return o
}

func (o SyntheticsTestArrayOutput) ToSyntheticsTestArrayOutputWithContext(ctx context.Context) SyntheticsTestArrayOutput {
	return o
}

func (o SyntheticsTestArrayOutput) Index(i pulumi.IntInput) SyntheticsTestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SyntheticsTest {
		return vs[0].([]*SyntheticsTest)[vs[1].(int)]
	}).(SyntheticsTestOutput)
}

type SyntheticsTestMapOutput struct{ *pulumi.OutputState }

func (SyntheticsTestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyntheticsTest)(nil)).Elem()
}

func (o SyntheticsTestMapOutput) ToSyntheticsTestMapOutput() SyntheticsTestMapOutput {
	return o
}

func (o SyntheticsTestMapOutput) ToSyntheticsTestMapOutputWithContext(ctx context.Context) SyntheticsTestMapOutput {
	return o
}

func (o SyntheticsTestMapOutput) MapIndex(k pulumi.StringInput) SyntheticsTestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SyntheticsTest {
		return vs[0].(map[string]*SyntheticsTest)[vs[1].(string)]
	}).(SyntheticsTestOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestInput)(nil)).Elem(), &SyntheticsTest{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestArrayInput)(nil)).Elem(), SyntheticsTestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestMapInput)(nil)).Elem(), SyntheticsTestMap{})
	pulumi.RegisterOutputType(SyntheticsTestOutput{})
	pulumi.RegisterOutputType(SyntheticsTestArrayOutput{})
	pulumi.RegisterOutputType(SyntheticsTestMapOutput{})
}
