// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog synthetics test resource. This can be used to create and manage Datadog synthetics test.
//
// ## Schema
//
// ### Required
//
// - **locations** (Set of String) Array of locations used to run the test. Refer to [Datadog documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g. `aws:eu-central-1`).
// - **name** (String) Name of Datadog synthetics test.
// - **status** (String) Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
// - **type** (String) Synthetics test type (`api` or `browser`).
//
// ### Optional
//
// - **api_step** (Block List) Steps for multistep api tests (see below for nested schema)
// - **assertion** (Block List) Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below. (see below for nested schema)
// - **assertions** (List of Map of String, Deprecated) List of assertions. **Deprecated.** Define `assertion` blocks instead.
// - **browser_step** (Block List) Steps for browser tests. (see below for nested schema)
// - **browser_variable** (Block List) Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below. (see below for nested schema)
// - **config_variable** (Block List) Variables used for the test configuration. Multiple `configVariable` blocks are allowed with the structure below. (see below for nested schema)
// - **device_ids** (List of String) Array with the different device IDs used to run the test. Allowed enum values: `laptopLarge`, `tablet`, `mobileSmall` (only available for `browser` tests).
// - **message** (String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events.
// - **options** (Map of String, Deprecated) **Deprecated.** Define `optionsList` blocks instead.
// - **options_list** (Block List, Max: 1) (see below for nested schema)
// - **request** (Map of String, Deprecated) The synthetics test request. Required if `type = "api"`. **Deprecated.** Define `requestDefinition` list with one element instead.
// - **request_basicauth** (Block List, Max: 1) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below. (see below for nested schema)
// - **request_client_certificate** (Block List, Max: 1) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below. (see below for nested schema)
// - **request_definition** (Block List, Max: 1) The synthetics test request. Required if `type = "api"`. (see below for nested schema)
// - **request_headers** (Map of String) Header name and value map.
// - **request_query** (Map of String) Query arguments name and value map.
// - **step** (Block List, Deprecated) Steps for browser tests. **Deprecated.** Define `browserStep` blocks instead. (see below for nested schema)
// - **subtype** (String) When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
// - **tags** (List of String) A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
// - **variable** (Block List, Deprecated) Variables used for a browser test steps. Multiple `browserVariable` blocks are allowed with the structure below. **Deprecated.** Define `browserVariable` blocks instead. (see below for nested schema)
//
// ### Read-Only
//
// - **id** (String) The ID of this resource.
// - **monitor_id** (Number) ID of the monitor associated with the Datadog synthetics test.
//
// <a id="nestedblock--api_step"></a>
//
// ## Import
//
// Import is supported using the following syntax# Synthetics tests can be imported using their public string ID, e.g.
//
// ```sh
//  $ pulumi import datadog:index/syntheticsTest:SyntheticsTest fizz abc-123-xyz
// ```
type SyntheticsTest struct {
	pulumi.CustomResourceState

	// Steps for multistep api tests
	ApiSteps SyntheticsTestApiStepArrayOutput `pulumi:"apiSteps"`
	// List of assertions.
	//
	// Deprecated: Define `assertion` blocks instead.
	Assertions pulumi.MapArrayOutput `pulumi:"assertions"`
	// Steps for browser tests.
	BrowserSteps SyntheticsTestBrowserStepArrayOutput `pulumi:"browserSteps"`
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariables SyntheticsTestBrowserVariableArrayOutput `pulumi:"browserVariables"`
	// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
	ConfigVariables SyntheticsTestConfigVariableArrayOutput `pulumi:"configVariables"`
	// Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
	// (only available for `browser` tests).
	DeviceIds pulumi.StringArrayOutput `pulumi:"deviceIds"`
	// Array of locations used to run the test. Refer to [Datadog
	// documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
	// `aws:eu-central-1`).
	Locations pulumi.StringArrayOutput `pulumi:"locations"`
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
	// using the same `@username` notation as events.
	Message pulumi.StringPtrOutput `pulumi:"message"`
	// ID of the monitor associated with the Datadog synthetics test.
	MonitorId pulumi.IntOutput `pulumi:"monitorId"`
	// Name of Datadog synthetics test.
	Name pulumi.StringOutput `pulumi:"name"`
	// Deprecated: Define `options_list` blocks instead.
	Options     SyntheticsTestOptionsPtrOutput     `pulumi:"options"`
	OptionsList SyntheticsTestOptionsListPtrOutput `pulumi:"optionsList"`
	// The synthetics test request. Required if `type = "api"`.
	//
	// Deprecated: Define `request_definition` list with one element instead.
	Request SyntheticsTestRequestPtrOutput `pulumi:"request"`
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth SyntheticsTestRequestBasicauthPtrOutput `pulumi:"requestBasicauth"`
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
	// below.
	RequestClientCertificate SyntheticsTestRequestClientCertificatePtrOutput `pulumi:"requestClientCertificate"`
	// The synthetics test request. Required if `type = "api"`.
	RequestDefinition SyntheticsTestRequestDefinitionPtrOutput `pulumi:"requestDefinition"`
	// Header name and value map.
	RequestHeaders pulumi.MapOutput `pulumi:"requestHeaders"`
	// Query arguments name and value map.
	RequestQuery pulumi.MapOutput `pulumi:"requestQuery"`
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
	Status pulumi.StringOutput `pulumi:"status"`
	// Steps for browser tests.
	//
	// Deprecated: Define `browser_step` blocks instead.
	Steps SyntheticsTestStepArrayOutput `pulumi:"steps"`
	// When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
	Subtype pulumi.StringPtrOutput `pulumi:"subtype"`
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
	// synthetics page of the UI. Default is an empty list (`[]`).
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Synthetics test type (`api` or `browser`).
	Type pulumi.StringOutput `pulumi:"type"`
	// Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
	//
	// Deprecated: Define `browser_variable` blocks instead.
	Variables SyntheticsTestVariableArrayOutput `pulumi:"variables"`
}

// NewSyntheticsTest registers a new resource with the given unique name, arguments, and options.
func NewSyntheticsTest(ctx *pulumi.Context,
	name string, args *SyntheticsTestArgs, opts ...pulumi.ResourceOption) (*SyntheticsTest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Locations == nil {
		return nil, errors.New("invalid value for required argument 'Locations'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource SyntheticsTest
	err := ctx.RegisterResource("datadog:index/syntheticsTest:SyntheticsTest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyntheticsTest gets an existing SyntheticsTest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyntheticsTest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyntheticsTestState, opts ...pulumi.ResourceOption) (*SyntheticsTest, error) {
	var resource SyntheticsTest
	err := ctx.ReadResource("datadog:index/syntheticsTest:SyntheticsTest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyntheticsTest resources.
type syntheticsTestState struct {
	// Steps for multistep api tests
	ApiSteps []SyntheticsTestApiStep `pulumi:"apiSteps"`
	// List of assertions.
	//
	// Deprecated: Define `assertion` blocks instead.
	Assertions []map[string]interface{} `pulumi:"assertions"`
	// Steps for browser tests.
	BrowserSteps []SyntheticsTestBrowserStep `pulumi:"browserSteps"`
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariables []SyntheticsTestBrowserVariable `pulumi:"browserVariables"`
	// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
	ConfigVariables []SyntheticsTestConfigVariable `pulumi:"configVariables"`
	// Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
	// (only available for `browser` tests).
	DeviceIds []string `pulumi:"deviceIds"`
	// Array of locations used to run the test. Refer to [Datadog
	// documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
	// `aws:eu-central-1`).
	Locations []string `pulumi:"locations"`
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
	// using the same `@username` notation as events.
	Message *string `pulumi:"message"`
	// ID of the monitor associated with the Datadog synthetics test.
	MonitorId *int `pulumi:"monitorId"`
	// Name of Datadog synthetics test.
	Name *string `pulumi:"name"`
	// Deprecated: Define `options_list` blocks instead.
	Options     *SyntheticsTestOptions     `pulumi:"options"`
	OptionsList *SyntheticsTestOptionsList `pulumi:"optionsList"`
	// The synthetics test request. Required if `type = "api"`.
	//
	// Deprecated: Define `request_definition` list with one element instead.
	Request *SyntheticsTestRequest `pulumi:"request"`
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth *SyntheticsTestRequestBasicauth `pulumi:"requestBasicauth"`
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
	// below.
	RequestClientCertificate *SyntheticsTestRequestClientCertificate `pulumi:"requestClientCertificate"`
	// The synthetics test request. Required if `type = "api"`.
	RequestDefinition *SyntheticsTestRequestDefinition `pulumi:"requestDefinition"`
	// Header name and value map.
	RequestHeaders map[string]interface{} `pulumi:"requestHeaders"`
	// Query arguments name and value map.
	RequestQuery map[string]interface{} `pulumi:"requestQuery"`
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
	Status *string `pulumi:"status"`
	// Steps for browser tests.
	//
	// Deprecated: Define `browser_step` blocks instead.
	Steps []SyntheticsTestStep `pulumi:"steps"`
	// When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
	Subtype *string `pulumi:"subtype"`
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
	// synthetics page of the UI. Default is an empty list (`[]`).
	Tags []string `pulumi:"tags"`
	// Synthetics test type (`api` or `browser`).
	Type *string `pulumi:"type"`
	// Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
	//
	// Deprecated: Define `browser_variable` blocks instead.
	Variables []SyntheticsTestVariable `pulumi:"variables"`
}

type SyntheticsTestState struct {
	// Steps for multistep api tests
	ApiSteps SyntheticsTestApiStepArrayInput
	// List of assertions.
	//
	// Deprecated: Define `assertion` blocks instead.
	Assertions pulumi.MapArrayInput
	// Steps for browser tests.
	BrowserSteps SyntheticsTestBrowserStepArrayInput
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariables SyntheticsTestBrowserVariableArrayInput
	// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
	ConfigVariables SyntheticsTestConfigVariableArrayInput
	// Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
	// (only available for `browser` tests).
	DeviceIds pulumi.StringArrayInput
	// Array of locations used to run the test. Refer to [Datadog
	// documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
	// `aws:eu-central-1`).
	Locations pulumi.StringArrayInput
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
	// using the same `@username` notation as events.
	Message pulumi.StringPtrInput
	// ID of the monitor associated with the Datadog synthetics test.
	MonitorId pulumi.IntPtrInput
	// Name of Datadog synthetics test.
	Name pulumi.StringPtrInput
	// Deprecated: Define `options_list` blocks instead.
	Options     SyntheticsTestOptionsPtrInput
	OptionsList SyntheticsTestOptionsListPtrInput
	// The synthetics test request. Required if `type = "api"`.
	//
	// Deprecated: Define `request_definition` list with one element instead.
	Request SyntheticsTestRequestPtrInput
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth SyntheticsTestRequestBasicauthPtrInput
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
	// below.
	RequestClientCertificate SyntheticsTestRequestClientCertificatePtrInput
	// The synthetics test request. Required if `type = "api"`.
	RequestDefinition SyntheticsTestRequestDefinitionPtrInput
	// Header name and value map.
	RequestHeaders pulumi.MapInput
	// Query arguments name and value map.
	RequestQuery pulumi.MapInput
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
	Status pulumi.StringPtrInput
	// Steps for browser tests.
	//
	// Deprecated: Define `browser_step` blocks instead.
	Steps SyntheticsTestStepArrayInput
	// When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
	Subtype pulumi.StringPtrInput
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
	// synthetics page of the UI. Default is an empty list (`[]`).
	Tags pulumi.StringArrayInput
	// Synthetics test type (`api` or `browser`).
	Type pulumi.StringPtrInput
	// Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
	//
	// Deprecated: Define `browser_variable` blocks instead.
	Variables SyntheticsTestVariableArrayInput
}

func (SyntheticsTestState) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticsTestState)(nil)).Elem()
}

type syntheticsTestArgs struct {
	// Steps for multistep api tests
	ApiSteps []SyntheticsTestApiStep `pulumi:"apiSteps"`
	// List of assertions.
	//
	// Deprecated: Define `assertion` blocks instead.
	Assertions []map[string]interface{} `pulumi:"assertions"`
	// Steps for browser tests.
	BrowserSteps []SyntheticsTestBrowserStep `pulumi:"browserSteps"`
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariables []SyntheticsTestBrowserVariable `pulumi:"browserVariables"`
	// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
	ConfigVariables []SyntheticsTestConfigVariable `pulumi:"configVariables"`
	// Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
	// (only available for `browser` tests).
	DeviceIds []string `pulumi:"deviceIds"`
	// Array of locations used to run the test. Refer to [Datadog
	// documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
	// `aws:eu-central-1`).
	Locations []string `pulumi:"locations"`
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
	// using the same `@username` notation as events.
	Message *string `pulumi:"message"`
	// Name of Datadog synthetics test.
	Name string `pulumi:"name"`
	// Deprecated: Define `options_list` blocks instead.
	Options     *SyntheticsTestOptions     `pulumi:"options"`
	OptionsList *SyntheticsTestOptionsList `pulumi:"optionsList"`
	// The synthetics test request. Required if `type = "api"`.
	//
	// Deprecated: Define `request_definition` list with one element instead.
	Request *SyntheticsTestRequest `pulumi:"request"`
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth *SyntheticsTestRequestBasicauth `pulumi:"requestBasicauth"`
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
	// below.
	RequestClientCertificate *SyntheticsTestRequestClientCertificate `pulumi:"requestClientCertificate"`
	// The synthetics test request. Required if `type = "api"`.
	RequestDefinition *SyntheticsTestRequestDefinition `pulumi:"requestDefinition"`
	// Header name and value map.
	RequestHeaders map[string]interface{} `pulumi:"requestHeaders"`
	// Query arguments name and value map.
	RequestQuery map[string]interface{} `pulumi:"requestQuery"`
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
	Status string `pulumi:"status"`
	// Steps for browser tests.
	//
	// Deprecated: Define `browser_step` blocks instead.
	Steps []SyntheticsTestStep `pulumi:"steps"`
	// When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
	Subtype *string `pulumi:"subtype"`
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
	// synthetics page of the UI. Default is an empty list (`[]`).
	Tags []string `pulumi:"tags"`
	// Synthetics test type (`api` or `browser`).
	Type string `pulumi:"type"`
	// Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
	//
	// Deprecated: Define `browser_variable` blocks instead.
	Variables []SyntheticsTestVariable `pulumi:"variables"`
}

// The set of arguments for constructing a SyntheticsTest resource.
type SyntheticsTestArgs struct {
	// Steps for multistep api tests
	ApiSteps SyntheticsTestApiStepArrayInput
	// List of assertions.
	//
	// Deprecated: Define `assertion` blocks instead.
	Assertions pulumi.MapArrayInput
	// Steps for browser tests.
	BrowserSteps SyntheticsTestBrowserStepArrayInput
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariables SyntheticsTestBrowserVariableArrayInput
	// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
	ConfigVariables SyntheticsTestConfigVariableArrayInput
	// Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
	// (only available for `browser` tests).
	DeviceIds pulumi.StringArrayInput
	// Array of locations used to run the test. Refer to [Datadog
	// documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
	// `aws:eu-central-1`).
	Locations pulumi.StringArrayInput
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
	// using the same `@username` notation as events.
	Message pulumi.StringPtrInput
	// Name of Datadog synthetics test.
	Name pulumi.StringInput
	// Deprecated: Define `options_list` blocks instead.
	Options     SyntheticsTestOptionsPtrInput
	OptionsList SyntheticsTestOptionsListPtrInput
	// The synthetics test request. Required if `type = "api"`.
	//
	// Deprecated: Define `request_definition` list with one element instead.
	Request SyntheticsTestRequestPtrInput
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth SyntheticsTestRequestBasicauthPtrInput
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
	// below.
	RequestClientCertificate SyntheticsTestRequestClientCertificatePtrInput
	// The synthetics test request. Required if `type = "api"`.
	RequestDefinition SyntheticsTestRequestDefinitionPtrInput
	// Header name and value map.
	RequestHeaders pulumi.MapInput
	// Query arguments name and value map.
	RequestQuery pulumi.MapInput
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
	Status pulumi.StringInput
	// Steps for browser tests.
	//
	// Deprecated: Define `browser_step` blocks instead.
	Steps SyntheticsTestStepArrayInput
	// When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
	Subtype pulumi.StringPtrInput
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
	// synthetics page of the UI. Default is an empty list (`[]`).
	Tags pulumi.StringArrayInput
	// Synthetics test type (`api` or `browser`).
	Type pulumi.StringInput
	// Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
	//
	// Deprecated: Define `browser_variable` blocks instead.
	Variables SyntheticsTestVariableArrayInput
}

func (SyntheticsTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticsTestArgs)(nil)).Elem()
}

type SyntheticsTestInput interface {
	pulumi.Input

	ToSyntheticsTestOutput() SyntheticsTestOutput
	ToSyntheticsTestOutputWithContext(ctx context.Context) SyntheticsTestOutput
}

func (*SyntheticsTest) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTest)(nil))
}

func (i *SyntheticsTest) ToSyntheticsTestOutput() SyntheticsTestOutput {
	return i.ToSyntheticsTestOutputWithContext(context.Background())
}

func (i *SyntheticsTest) ToSyntheticsTestOutputWithContext(ctx context.Context) SyntheticsTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOutput)
}

func (i *SyntheticsTest) ToSyntheticsTestPtrOutput() SyntheticsTestPtrOutput {
	return i.ToSyntheticsTestPtrOutputWithContext(context.Background())
}

func (i *SyntheticsTest) ToSyntheticsTestPtrOutputWithContext(ctx context.Context) SyntheticsTestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestPtrOutput)
}

type SyntheticsTestPtrInput interface {
	pulumi.Input

	ToSyntheticsTestPtrOutput() SyntheticsTestPtrOutput
	ToSyntheticsTestPtrOutputWithContext(ctx context.Context) SyntheticsTestPtrOutput
}

type syntheticsTestPtrType SyntheticsTestArgs

func (*syntheticsTestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTest)(nil))
}

func (i *syntheticsTestPtrType) ToSyntheticsTestPtrOutput() SyntheticsTestPtrOutput {
	return i.ToSyntheticsTestPtrOutputWithContext(context.Background())
}

func (i *syntheticsTestPtrType) ToSyntheticsTestPtrOutputWithContext(ctx context.Context) SyntheticsTestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestPtrOutput)
}

// SyntheticsTestArrayInput is an input type that accepts SyntheticsTestArray and SyntheticsTestArrayOutput values.
// You can construct a concrete instance of `SyntheticsTestArrayInput` via:
//
//          SyntheticsTestArray{ SyntheticsTestArgs{...} }
type SyntheticsTestArrayInput interface {
	pulumi.Input

	ToSyntheticsTestArrayOutput() SyntheticsTestArrayOutput
	ToSyntheticsTestArrayOutputWithContext(context.Context) SyntheticsTestArrayOutput
}

type SyntheticsTestArray []SyntheticsTestInput

func (SyntheticsTestArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SyntheticsTest)(nil))
}

func (i SyntheticsTestArray) ToSyntheticsTestArrayOutput() SyntheticsTestArrayOutput {
	return i.ToSyntheticsTestArrayOutputWithContext(context.Background())
}

func (i SyntheticsTestArray) ToSyntheticsTestArrayOutputWithContext(ctx context.Context) SyntheticsTestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestArrayOutput)
}

// SyntheticsTestMapInput is an input type that accepts SyntheticsTestMap and SyntheticsTestMapOutput values.
// You can construct a concrete instance of `SyntheticsTestMapInput` via:
//
//          SyntheticsTestMap{ "key": SyntheticsTestArgs{...} }
type SyntheticsTestMapInput interface {
	pulumi.Input

	ToSyntheticsTestMapOutput() SyntheticsTestMapOutput
	ToSyntheticsTestMapOutputWithContext(context.Context) SyntheticsTestMapOutput
}

type SyntheticsTestMap map[string]SyntheticsTestInput

func (SyntheticsTestMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SyntheticsTest)(nil))
}

func (i SyntheticsTestMap) ToSyntheticsTestMapOutput() SyntheticsTestMapOutput {
	return i.ToSyntheticsTestMapOutputWithContext(context.Background())
}

func (i SyntheticsTestMap) ToSyntheticsTestMapOutputWithContext(ctx context.Context) SyntheticsTestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestMapOutput)
}

type SyntheticsTestOutput struct {
	*pulumi.OutputState
}

func (SyntheticsTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTest)(nil))
}

func (o SyntheticsTestOutput) ToSyntheticsTestOutput() SyntheticsTestOutput {
	return o
}

func (o SyntheticsTestOutput) ToSyntheticsTestOutputWithContext(ctx context.Context) SyntheticsTestOutput {
	return o
}

func (o SyntheticsTestOutput) ToSyntheticsTestPtrOutput() SyntheticsTestPtrOutput {
	return o.ToSyntheticsTestPtrOutputWithContext(context.Background())
}

func (o SyntheticsTestOutput) ToSyntheticsTestPtrOutputWithContext(ctx context.Context) SyntheticsTestPtrOutput {
	return o.ApplyT(func(v SyntheticsTest) *SyntheticsTest {
		return &v
	}).(SyntheticsTestPtrOutput)
}

type SyntheticsTestPtrOutput struct {
	*pulumi.OutputState
}

func (SyntheticsTestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTest)(nil))
}

func (o SyntheticsTestPtrOutput) ToSyntheticsTestPtrOutput() SyntheticsTestPtrOutput {
	return o
}

func (o SyntheticsTestPtrOutput) ToSyntheticsTestPtrOutputWithContext(ctx context.Context) SyntheticsTestPtrOutput {
	return o
}

type SyntheticsTestArrayOutput struct{ *pulumi.OutputState }

func (SyntheticsTestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticsTest)(nil))
}

func (o SyntheticsTestArrayOutput) ToSyntheticsTestArrayOutput() SyntheticsTestArrayOutput {
	return o
}

func (o SyntheticsTestArrayOutput) ToSyntheticsTestArrayOutputWithContext(ctx context.Context) SyntheticsTestArrayOutput {
	return o
}

func (o SyntheticsTestArrayOutput) Index(i pulumi.IntInput) SyntheticsTestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticsTest {
		return vs[0].([]SyntheticsTest)[vs[1].(int)]
	}).(SyntheticsTestOutput)
}

type SyntheticsTestMapOutput struct{ *pulumi.OutputState }

func (SyntheticsTestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SyntheticsTest)(nil))
}

func (o SyntheticsTestMapOutput) ToSyntheticsTestMapOutput() SyntheticsTestMapOutput {
	return o
}

func (o SyntheticsTestMapOutput) ToSyntheticsTestMapOutputWithContext(ctx context.Context) SyntheticsTestMapOutput {
	return o
}

func (o SyntheticsTestMapOutput) MapIndex(k pulumi.StringInput) SyntheticsTestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SyntheticsTest {
		return vs[0].(map[string]SyntheticsTest)[vs[1].(string)]
	}).(SyntheticsTestOutput)
}

func init() {
	pulumi.RegisterOutputType(SyntheticsTestOutput{})
	pulumi.RegisterOutputType(SyntheticsTestPtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestArrayOutput{})
	pulumi.RegisterOutputType(SyntheticsTestMapOutput{})
}
