// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog Security Monitoring Rule API resource. This can be used to create and manage Datadog security monitoring rules. To change settings for a default rule use `datadogSecurityDefaultRule` instead.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.NewSecurityMonitoringRule(ctx, "myrule", &datadog.SecurityMonitoringRuleArgs{
//				Cases: datadog.SecurityMonitoringRuleCaseArray{
//					&datadog.SecurityMonitoringRuleCaseArgs{
//						Condition: pulumi.String("errors > 3 && warnings > 10"),
//						Notifications: pulumi.StringArray{
//							pulumi.String("@user"),
//						},
//						Status: pulumi.String("high"),
//					},
//				},
//				Enabled: pulumi.Bool(true),
//				Message: pulumi.String("The rule has triggered."),
//				Name:    pulumi.String("My rule"),
//				Options: &datadog.SecurityMonitoringRuleOptionsArgs{
//					EvaluationWindow:  pulumi.Int(300),
//					KeepAlive:         pulumi.Int(600),
//					MaxSignalDuration: pulumi.Int(900),
//				},
//				Queries: datadog.SecurityMonitoringRuleQueryArray{
//					&datadog.SecurityMonitoringRuleQueryArgs{
//						Aggregation: pulumi.String("count"),
//						GroupByFields: pulumi.StringArray{
//							pulumi.String("host"),
//						},
//						Name:  pulumi.String("errors"),
//						Query: pulumi.String("status:error"),
//					},
//					&datadog.SecurityMonitoringRuleQueryArgs{
//						Aggregation: pulumi.String("count"),
//						GroupByFields: pulumi.StringArray{
//							pulumi.String("host"),
//						},
//						Name:  pulumi.String("warnings"),
//						Query: pulumi.String("status:warning"),
//					},
//				},
//				Tags: pulumi.StringArray{
//					pulumi.String("type:dos"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Security monitoring rules can be imported using ID, e.g.
//
// ```sh
// $ pulumi import datadog:index/securityMonitoringRule:SecurityMonitoringRule my_rule m0o-hto-lkb
// ```
type SecurityMonitoringRule struct {
	pulumi.CustomResourceState

	// Cases for generating signals.
	Cases SecurityMonitoringRuleCaseArrayOutput `pulumi:"cases"`
	// Whether the rule is enabled. Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Additional queries to filter matched events before they are processed.
	Filters SecurityMonitoringRuleFilterArrayOutput `pulumi:"filters"`
	// Whether the notifications include the triggering group-by values in their title. Defaults to `false`.
	HasExtendedTitle pulumi.BoolPtrOutput `pulumi:"hasExtendedTitle"`
	// Message for generated signals.
	Message pulumi.StringOutput `pulumi:"message"`
	// Name of the case.
	Name pulumi.StringOutput `pulumi:"name"`
	// Options on rules.
	Options SecurityMonitoringRuleOptionsPtrOutput `pulumi:"options"`
	// Query for selecting logs to apply the filtering action.
	Queries SecurityMonitoringRuleQueryArrayOutput `pulumi:"queries"`
	// Queries for selecting logs which are part of the rule.
	SignalQueries SecurityMonitoringRuleSignalQueryArrayOutput `pulumi:"signalQueries"`
	// Tags for generated signals.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Cases for generating signals for third-party rules. Only required and accepted for third-party rules
	ThirdPartyCases SecurityMonitoringRuleThirdPartyCaseArrayOutput `pulumi:"thirdPartyCases"`
	// The rule type. Valid values are `applicationSecurity`, `logDetection`, `workloadSecurity`, `signalCorrelation`. Defaults to `"logDetection"`.
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewSecurityMonitoringRule registers a new resource with the given unique name, arguments, and options.
func NewSecurityMonitoringRule(ctx *pulumi.Context,
	name string, args *SecurityMonitoringRuleArgs, opts ...pulumi.ResourceOption) (*SecurityMonitoringRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Message == nil {
		return nil, errors.New("invalid value for required argument 'Message'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityMonitoringRule
	err := ctx.RegisterResource("datadog:index/securityMonitoringRule:SecurityMonitoringRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityMonitoringRule gets an existing SecurityMonitoringRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityMonitoringRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityMonitoringRuleState, opts ...pulumi.ResourceOption) (*SecurityMonitoringRule, error) {
	var resource SecurityMonitoringRule
	err := ctx.ReadResource("datadog:index/securityMonitoringRule:SecurityMonitoringRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityMonitoringRule resources.
type securityMonitoringRuleState struct {
	// Cases for generating signals.
	Cases []SecurityMonitoringRuleCase `pulumi:"cases"`
	// Whether the rule is enabled. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Additional queries to filter matched events before they are processed.
	Filters []SecurityMonitoringRuleFilter `pulumi:"filters"`
	// Whether the notifications include the triggering group-by values in their title. Defaults to `false`.
	HasExtendedTitle *bool `pulumi:"hasExtendedTitle"`
	// Message for generated signals.
	Message *string `pulumi:"message"`
	// Name of the case.
	Name *string `pulumi:"name"`
	// Options on rules.
	Options *SecurityMonitoringRuleOptions `pulumi:"options"`
	// Query for selecting logs to apply the filtering action.
	Queries []SecurityMonitoringRuleQuery `pulumi:"queries"`
	// Queries for selecting logs which are part of the rule.
	SignalQueries []SecurityMonitoringRuleSignalQuery `pulumi:"signalQueries"`
	// Tags for generated signals.
	Tags []string `pulumi:"tags"`
	// Cases for generating signals for third-party rules. Only required and accepted for third-party rules
	ThirdPartyCases []SecurityMonitoringRuleThirdPartyCase `pulumi:"thirdPartyCases"`
	// The rule type. Valid values are `applicationSecurity`, `logDetection`, `workloadSecurity`, `signalCorrelation`. Defaults to `"logDetection"`.
	Type *string `pulumi:"type"`
}

type SecurityMonitoringRuleState struct {
	// Cases for generating signals.
	Cases SecurityMonitoringRuleCaseArrayInput
	// Whether the rule is enabled. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Additional queries to filter matched events before they are processed.
	Filters SecurityMonitoringRuleFilterArrayInput
	// Whether the notifications include the triggering group-by values in their title. Defaults to `false`.
	HasExtendedTitle pulumi.BoolPtrInput
	// Message for generated signals.
	Message pulumi.StringPtrInput
	// Name of the case.
	Name pulumi.StringPtrInput
	// Options on rules.
	Options SecurityMonitoringRuleOptionsPtrInput
	// Query for selecting logs to apply the filtering action.
	Queries SecurityMonitoringRuleQueryArrayInput
	// Queries for selecting logs which are part of the rule.
	SignalQueries SecurityMonitoringRuleSignalQueryArrayInput
	// Tags for generated signals.
	Tags pulumi.StringArrayInput
	// Cases for generating signals for third-party rules. Only required and accepted for third-party rules
	ThirdPartyCases SecurityMonitoringRuleThirdPartyCaseArrayInput
	// The rule type. Valid values are `applicationSecurity`, `logDetection`, `workloadSecurity`, `signalCorrelation`. Defaults to `"logDetection"`.
	Type pulumi.StringPtrInput
}

func (SecurityMonitoringRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityMonitoringRuleState)(nil)).Elem()
}

type securityMonitoringRuleArgs struct {
	// Cases for generating signals.
	Cases []SecurityMonitoringRuleCase `pulumi:"cases"`
	// Whether the rule is enabled. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Additional queries to filter matched events before they are processed.
	Filters []SecurityMonitoringRuleFilter `pulumi:"filters"`
	// Whether the notifications include the triggering group-by values in their title. Defaults to `false`.
	HasExtendedTitle *bool `pulumi:"hasExtendedTitle"`
	// Message for generated signals.
	Message string `pulumi:"message"`
	// Name of the case.
	Name string `pulumi:"name"`
	// Options on rules.
	Options *SecurityMonitoringRuleOptions `pulumi:"options"`
	// Query for selecting logs to apply the filtering action.
	Queries []SecurityMonitoringRuleQuery `pulumi:"queries"`
	// Queries for selecting logs which are part of the rule.
	SignalQueries []SecurityMonitoringRuleSignalQuery `pulumi:"signalQueries"`
	// Tags for generated signals.
	Tags []string `pulumi:"tags"`
	// Cases for generating signals for third-party rules. Only required and accepted for third-party rules
	ThirdPartyCases []SecurityMonitoringRuleThirdPartyCase `pulumi:"thirdPartyCases"`
	// The rule type. Valid values are `applicationSecurity`, `logDetection`, `workloadSecurity`, `signalCorrelation`. Defaults to `"logDetection"`.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a SecurityMonitoringRule resource.
type SecurityMonitoringRuleArgs struct {
	// Cases for generating signals.
	Cases SecurityMonitoringRuleCaseArrayInput
	// Whether the rule is enabled. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Additional queries to filter matched events before they are processed.
	Filters SecurityMonitoringRuleFilterArrayInput
	// Whether the notifications include the triggering group-by values in their title. Defaults to `false`.
	HasExtendedTitle pulumi.BoolPtrInput
	// Message for generated signals.
	Message pulumi.StringInput
	// Name of the case.
	Name pulumi.StringInput
	// Options on rules.
	Options SecurityMonitoringRuleOptionsPtrInput
	// Query for selecting logs to apply the filtering action.
	Queries SecurityMonitoringRuleQueryArrayInput
	// Queries for selecting logs which are part of the rule.
	SignalQueries SecurityMonitoringRuleSignalQueryArrayInput
	// Tags for generated signals.
	Tags pulumi.StringArrayInput
	// Cases for generating signals for third-party rules. Only required and accepted for third-party rules
	ThirdPartyCases SecurityMonitoringRuleThirdPartyCaseArrayInput
	// The rule type. Valid values are `applicationSecurity`, `logDetection`, `workloadSecurity`, `signalCorrelation`. Defaults to `"logDetection"`.
	Type pulumi.StringPtrInput
}

func (SecurityMonitoringRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityMonitoringRuleArgs)(nil)).Elem()
}

type SecurityMonitoringRuleInput interface {
	pulumi.Input

	ToSecurityMonitoringRuleOutput() SecurityMonitoringRuleOutput
	ToSecurityMonitoringRuleOutputWithContext(ctx context.Context) SecurityMonitoringRuleOutput
}

func (*SecurityMonitoringRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityMonitoringRule)(nil)).Elem()
}

func (i *SecurityMonitoringRule) ToSecurityMonitoringRuleOutput() SecurityMonitoringRuleOutput {
	return i.ToSecurityMonitoringRuleOutputWithContext(context.Background())
}

func (i *SecurityMonitoringRule) ToSecurityMonitoringRuleOutputWithContext(ctx context.Context) SecurityMonitoringRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityMonitoringRuleOutput)
}

// SecurityMonitoringRuleArrayInput is an input type that accepts SecurityMonitoringRuleArray and SecurityMonitoringRuleArrayOutput values.
// You can construct a concrete instance of `SecurityMonitoringRuleArrayInput` via:
//
//	SecurityMonitoringRuleArray{ SecurityMonitoringRuleArgs{...} }
type SecurityMonitoringRuleArrayInput interface {
	pulumi.Input

	ToSecurityMonitoringRuleArrayOutput() SecurityMonitoringRuleArrayOutput
	ToSecurityMonitoringRuleArrayOutputWithContext(context.Context) SecurityMonitoringRuleArrayOutput
}

type SecurityMonitoringRuleArray []SecurityMonitoringRuleInput

func (SecurityMonitoringRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityMonitoringRule)(nil)).Elem()
}

func (i SecurityMonitoringRuleArray) ToSecurityMonitoringRuleArrayOutput() SecurityMonitoringRuleArrayOutput {
	return i.ToSecurityMonitoringRuleArrayOutputWithContext(context.Background())
}

func (i SecurityMonitoringRuleArray) ToSecurityMonitoringRuleArrayOutputWithContext(ctx context.Context) SecurityMonitoringRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityMonitoringRuleArrayOutput)
}

// SecurityMonitoringRuleMapInput is an input type that accepts SecurityMonitoringRuleMap and SecurityMonitoringRuleMapOutput values.
// You can construct a concrete instance of `SecurityMonitoringRuleMapInput` via:
//
//	SecurityMonitoringRuleMap{ "key": SecurityMonitoringRuleArgs{...} }
type SecurityMonitoringRuleMapInput interface {
	pulumi.Input

	ToSecurityMonitoringRuleMapOutput() SecurityMonitoringRuleMapOutput
	ToSecurityMonitoringRuleMapOutputWithContext(context.Context) SecurityMonitoringRuleMapOutput
}

type SecurityMonitoringRuleMap map[string]SecurityMonitoringRuleInput

func (SecurityMonitoringRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityMonitoringRule)(nil)).Elem()
}

func (i SecurityMonitoringRuleMap) ToSecurityMonitoringRuleMapOutput() SecurityMonitoringRuleMapOutput {
	return i.ToSecurityMonitoringRuleMapOutputWithContext(context.Background())
}

func (i SecurityMonitoringRuleMap) ToSecurityMonitoringRuleMapOutputWithContext(ctx context.Context) SecurityMonitoringRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityMonitoringRuleMapOutput)
}

type SecurityMonitoringRuleOutput struct{ *pulumi.OutputState }

func (SecurityMonitoringRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityMonitoringRule)(nil)).Elem()
}

func (o SecurityMonitoringRuleOutput) ToSecurityMonitoringRuleOutput() SecurityMonitoringRuleOutput {
	return o
}

func (o SecurityMonitoringRuleOutput) ToSecurityMonitoringRuleOutputWithContext(ctx context.Context) SecurityMonitoringRuleOutput {
	return o
}

// Cases for generating signals.
func (o SecurityMonitoringRuleOutput) Cases() SecurityMonitoringRuleCaseArrayOutput {
	return o.ApplyT(func(v *SecurityMonitoringRule) SecurityMonitoringRuleCaseArrayOutput { return v.Cases }).(SecurityMonitoringRuleCaseArrayOutput)
}

// Whether the rule is enabled. Defaults to `true`.
func (o SecurityMonitoringRuleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityMonitoringRule) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Additional queries to filter matched events before they are processed.
func (o SecurityMonitoringRuleOutput) Filters() SecurityMonitoringRuleFilterArrayOutput {
	return o.ApplyT(func(v *SecurityMonitoringRule) SecurityMonitoringRuleFilterArrayOutput { return v.Filters }).(SecurityMonitoringRuleFilterArrayOutput)
}

// Whether the notifications include the triggering group-by values in their title. Defaults to `false`.
func (o SecurityMonitoringRuleOutput) HasExtendedTitle() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityMonitoringRule) pulumi.BoolPtrOutput { return v.HasExtendedTitle }).(pulumi.BoolPtrOutput)
}

// Message for generated signals.
func (o SecurityMonitoringRuleOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityMonitoringRule) pulumi.StringOutput { return v.Message }).(pulumi.StringOutput)
}

// Name of the case.
func (o SecurityMonitoringRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityMonitoringRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Options on rules.
func (o SecurityMonitoringRuleOutput) Options() SecurityMonitoringRuleOptionsPtrOutput {
	return o.ApplyT(func(v *SecurityMonitoringRule) SecurityMonitoringRuleOptionsPtrOutput { return v.Options }).(SecurityMonitoringRuleOptionsPtrOutput)
}

// Query for selecting logs to apply the filtering action.
func (o SecurityMonitoringRuleOutput) Queries() SecurityMonitoringRuleQueryArrayOutput {
	return o.ApplyT(func(v *SecurityMonitoringRule) SecurityMonitoringRuleQueryArrayOutput { return v.Queries }).(SecurityMonitoringRuleQueryArrayOutput)
}

// Queries for selecting logs which are part of the rule.
func (o SecurityMonitoringRuleOutput) SignalQueries() SecurityMonitoringRuleSignalQueryArrayOutput {
	return o.ApplyT(func(v *SecurityMonitoringRule) SecurityMonitoringRuleSignalQueryArrayOutput { return v.SignalQueries }).(SecurityMonitoringRuleSignalQueryArrayOutput)
}

// Tags for generated signals.
func (o SecurityMonitoringRuleOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityMonitoringRule) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Cases for generating signals for third-party rules. Only required and accepted for third-party rules
func (o SecurityMonitoringRuleOutput) ThirdPartyCases() SecurityMonitoringRuleThirdPartyCaseArrayOutput {
	return o.ApplyT(func(v *SecurityMonitoringRule) SecurityMonitoringRuleThirdPartyCaseArrayOutput {
		return v.ThirdPartyCases
	}).(SecurityMonitoringRuleThirdPartyCaseArrayOutput)
}

// The rule type. Valid values are `applicationSecurity`, `logDetection`, `workloadSecurity`, `signalCorrelation`. Defaults to `"logDetection"`.
func (o SecurityMonitoringRuleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityMonitoringRule) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type SecurityMonitoringRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityMonitoringRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityMonitoringRule)(nil)).Elem()
}

func (o SecurityMonitoringRuleArrayOutput) ToSecurityMonitoringRuleArrayOutput() SecurityMonitoringRuleArrayOutput {
	return o
}

func (o SecurityMonitoringRuleArrayOutput) ToSecurityMonitoringRuleArrayOutputWithContext(ctx context.Context) SecurityMonitoringRuleArrayOutput {
	return o
}

func (o SecurityMonitoringRuleArrayOutput) Index(i pulumi.IntInput) SecurityMonitoringRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityMonitoringRule {
		return vs[0].([]*SecurityMonitoringRule)[vs[1].(int)]
	}).(SecurityMonitoringRuleOutput)
}

type SecurityMonitoringRuleMapOutput struct{ *pulumi.OutputState }

func (SecurityMonitoringRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityMonitoringRule)(nil)).Elem()
}

func (o SecurityMonitoringRuleMapOutput) ToSecurityMonitoringRuleMapOutput() SecurityMonitoringRuleMapOutput {
	return o
}

func (o SecurityMonitoringRuleMapOutput) ToSecurityMonitoringRuleMapOutputWithContext(ctx context.Context) SecurityMonitoringRuleMapOutput {
	return o
}

func (o SecurityMonitoringRuleMapOutput) MapIndex(k pulumi.StringInput) SecurityMonitoringRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityMonitoringRule {
		return vs[0].(map[string]*SecurityMonitoringRule)[vs[1].(string)]
	}).(SecurityMonitoringRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityMonitoringRuleInput)(nil)).Elem(), &SecurityMonitoringRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityMonitoringRuleArrayInput)(nil)).Elem(), SecurityMonitoringRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityMonitoringRuleMapInput)(nil)).Elem(), SecurityMonitoringRuleMap{})
	pulumi.RegisterOutputType(SecurityMonitoringRuleOutput{})
	pulumi.RegisterOutputType(SecurityMonitoringRuleArrayOutput{})
	pulumi.RegisterOutputType(SecurityMonitoringRuleMapOutput{})
}
