// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source retrieves the definition of an existing Datadog workflow from Workflow Automation for use in other resources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.LookupWorkflowAutomation(ctx, &datadog.LookupWorkflowAutomationArgs{
//				Id: "11111111-2222-3333-4444-555555555555",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupWorkflowAutomation(ctx *pulumi.Context, args *LookupWorkflowAutomationArgs, opts ...pulumi.InvokeOption) (*LookupWorkflowAutomationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkflowAutomationResult
	err := ctx.Invoke("datadog:index/getWorkflowAutomation:getWorkflowAutomation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWorkflowAutomation.
type LookupWorkflowAutomationArgs struct {
	// ID of the workflow.
	Id string `pulumi:"id"`
}

// A collection of values returned by getWorkflowAutomation.
type LookupWorkflowAutomationResult struct {
	// Description of the workflow.
	Description string `pulumi:"description"`
	// ID of the workflow.
	Id string `pulumi:"id"`
	// Name of the workflow.
	Name string `pulumi:"name"`
	// Set the workflow to published or unpublished. Workflows in an unpublished state are only executable through manual runs. Automatic triggers such as Schedule do not execute the workflow until it is published.
	Published bool `pulumi:"published"`
	// The spec defines what the workflow does.
	SpecJson string `pulumi:"specJson"`
	// Tags of the workflow.
	Tags []string `pulumi:"tags"`
}

func LookupWorkflowAutomationOutput(ctx *pulumi.Context, args LookupWorkflowAutomationOutputArgs, opts ...pulumi.InvokeOption) LookupWorkflowAutomationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupWorkflowAutomationResultOutput, error) {
			args := v.(LookupWorkflowAutomationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("datadog:index/getWorkflowAutomation:getWorkflowAutomation", args, LookupWorkflowAutomationResultOutput{}, options).(LookupWorkflowAutomationResultOutput), nil
		}).(LookupWorkflowAutomationResultOutput)
}

// A collection of arguments for invoking getWorkflowAutomation.
type LookupWorkflowAutomationOutputArgs struct {
	// ID of the workflow.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupWorkflowAutomationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkflowAutomationArgs)(nil)).Elem()
}

// A collection of values returned by getWorkflowAutomation.
type LookupWorkflowAutomationResultOutput struct{ *pulumi.OutputState }

func (LookupWorkflowAutomationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkflowAutomationResult)(nil)).Elem()
}

func (o LookupWorkflowAutomationResultOutput) ToLookupWorkflowAutomationResultOutput() LookupWorkflowAutomationResultOutput {
	return o
}

func (o LookupWorkflowAutomationResultOutput) ToLookupWorkflowAutomationResultOutputWithContext(ctx context.Context) LookupWorkflowAutomationResultOutput {
	return o
}

// Description of the workflow.
func (o LookupWorkflowAutomationResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkflowAutomationResult) string { return v.Description }).(pulumi.StringOutput)
}

// ID of the workflow.
func (o LookupWorkflowAutomationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkflowAutomationResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the workflow.
func (o LookupWorkflowAutomationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkflowAutomationResult) string { return v.Name }).(pulumi.StringOutput)
}

// Set the workflow to published or unpublished. Workflows in an unpublished state are only executable through manual runs. Automatic triggers such as Schedule do not execute the workflow until it is published.
func (o LookupWorkflowAutomationResultOutput) Published() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWorkflowAutomationResult) bool { return v.Published }).(pulumi.BoolOutput)
}

// The spec defines what the workflow does.
func (o LookupWorkflowAutomationResultOutput) SpecJson() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkflowAutomationResult) string { return v.SpecJson }).(pulumi.StringOutput)
}

// Tags of the workflow.
func (o LookupWorkflowAutomationResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupWorkflowAutomationResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkflowAutomationResultOutput{})
}
