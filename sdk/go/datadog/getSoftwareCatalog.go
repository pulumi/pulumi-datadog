// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to list software catalog entities to use in other resources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.LookupSoftwareCatalog(ctx, &datadog.LookupSoftwareCatalogArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSoftwareCatalog(ctx *pulumi.Context, args *LookupSoftwareCatalogArgs, opts ...pulumi.InvokeOption) (*LookupSoftwareCatalogResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSoftwareCatalogResult
	err := ctx.Invoke("datadog:index/getSoftwareCatalog:getSoftwareCatalog", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSoftwareCatalog.
type LookupSoftwareCatalogArgs struct {
	// Filter entities by excluding snapshotted entities.
	FilterExcludeSnapshot *string `pulumi:"filterExcludeSnapshot"`
	// Filter entities by UUID.
	FilterId *string `pulumi:"filterId"`
	// Filter entities by kind.
	FilterKind *string `pulumi:"filterKind"`
	// Filter entities by name.
	FilterName *string `pulumi:"filterName"`
	// Filter entities by owner.
	FilterOwner *string `pulumi:"filterOwner"`
	// Filter entities by reference.
	FilterRef *string `pulumi:"filterRef"`
	// Filter entities by relation type.
	FilterRelationType *string `pulumi:"filterRelationType"`
}

// A collection of values returned by getSoftwareCatalog.
type LookupSoftwareCatalogResult struct {
	// List of entities
	Entities []GetSoftwareCatalogEntity `pulumi:"entities"`
	// Filter entities by excluding snapshotted entities.
	FilterExcludeSnapshot *string `pulumi:"filterExcludeSnapshot"`
	// Filter entities by UUID.
	FilterId *string `pulumi:"filterId"`
	// Filter entities by kind.
	FilterKind *string `pulumi:"filterKind"`
	// Filter entities by name.
	FilterName *string `pulumi:"filterName"`
	// Filter entities by owner.
	FilterOwner *string `pulumi:"filterOwner"`
	// Filter entities by reference.
	FilterRef *string `pulumi:"filterRef"`
	// Filter entities by relation type.
	FilterRelationType *string `pulumi:"filterRelationType"`
	// The ID of this resource.
	Id string `pulumi:"id"`
}

func LookupSoftwareCatalogOutput(ctx *pulumi.Context, args LookupSoftwareCatalogOutputArgs, opts ...pulumi.InvokeOption) LookupSoftwareCatalogResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSoftwareCatalogResultOutput, error) {
			args := v.(LookupSoftwareCatalogArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("datadog:index/getSoftwareCatalog:getSoftwareCatalog", args, LookupSoftwareCatalogResultOutput{}, options).(LookupSoftwareCatalogResultOutput), nil
		}).(LookupSoftwareCatalogResultOutput)
}

// A collection of arguments for invoking getSoftwareCatalog.
type LookupSoftwareCatalogOutputArgs struct {
	// Filter entities by excluding snapshotted entities.
	FilterExcludeSnapshot pulumi.StringPtrInput `pulumi:"filterExcludeSnapshot"`
	// Filter entities by UUID.
	FilterId pulumi.StringPtrInput `pulumi:"filterId"`
	// Filter entities by kind.
	FilterKind pulumi.StringPtrInput `pulumi:"filterKind"`
	// Filter entities by name.
	FilterName pulumi.StringPtrInput `pulumi:"filterName"`
	// Filter entities by owner.
	FilterOwner pulumi.StringPtrInput `pulumi:"filterOwner"`
	// Filter entities by reference.
	FilterRef pulumi.StringPtrInput `pulumi:"filterRef"`
	// Filter entities by relation type.
	FilterRelationType pulumi.StringPtrInput `pulumi:"filterRelationType"`
}

func (LookupSoftwareCatalogOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSoftwareCatalogArgs)(nil)).Elem()
}

// A collection of values returned by getSoftwareCatalog.
type LookupSoftwareCatalogResultOutput struct{ *pulumi.OutputState }

func (LookupSoftwareCatalogResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSoftwareCatalogResult)(nil)).Elem()
}

func (o LookupSoftwareCatalogResultOutput) ToLookupSoftwareCatalogResultOutput() LookupSoftwareCatalogResultOutput {
	return o
}

func (o LookupSoftwareCatalogResultOutput) ToLookupSoftwareCatalogResultOutputWithContext(ctx context.Context) LookupSoftwareCatalogResultOutput {
	return o
}

// List of entities
func (o LookupSoftwareCatalogResultOutput) Entities() GetSoftwareCatalogEntityArrayOutput {
	return o.ApplyT(func(v LookupSoftwareCatalogResult) []GetSoftwareCatalogEntity { return v.Entities }).(GetSoftwareCatalogEntityArrayOutput)
}

// Filter entities by excluding snapshotted entities.
func (o LookupSoftwareCatalogResultOutput) FilterExcludeSnapshot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSoftwareCatalogResult) *string { return v.FilterExcludeSnapshot }).(pulumi.StringPtrOutput)
}

// Filter entities by UUID.
func (o LookupSoftwareCatalogResultOutput) FilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSoftwareCatalogResult) *string { return v.FilterId }).(pulumi.StringPtrOutput)
}

// Filter entities by kind.
func (o LookupSoftwareCatalogResultOutput) FilterKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSoftwareCatalogResult) *string { return v.FilterKind }).(pulumi.StringPtrOutput)
}

// Filter entities by name.
func (o LookupSoftwareCatalogResultOutput) FilterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSoftwareCatalogResult) *string { return v.FilterName }).(pulumi.StringPtrOutput)
}

// Filter entities by owner.
func (o LookupSoftwareCatalogResultOutput) FilterOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSoftwareCatalogResult) *string { return v.FilterOwner }).(pulumi.StringPtrOutput)
}

// Filter entities by reference.
func (o LookupSoftwareCatalogResultOutput) FilterRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSoftwareCatalogResult) *string { return v.FilterRef }).(pulumi.StringPtrOutput)
}

// Filter entities by relation type.
func (o LookupSoftwareCatalogResultOutput) FilterRelationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSoftwareCatalogResult) *string { return v.FilterRelationType }).(pulumi.StringPtrOutput)
}

// The ID of this resource.
func (o LookupSoftwareCatalogResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareCatalogResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSoftwareCatalogResultOutput{})
}
