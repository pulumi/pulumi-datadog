// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azure

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Datadog - Microsoft Azure integration resource. This can be used to create and manage the integrations.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog/azure"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := azure.NewIntegration(ctx, "sandbox", &azure.IntegrationArgs{
// 			ClientId:     pulumi.String("<azure_client_id>"),
// 			ClientSecret: pulumi.String("<azure_client_secret_key>"),
// 			HostFilters:  pulumi.String("examplefilter:true,example:true"),
// 			TenantName:   pulumi.String("<azure_tenant_name>"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Microsoft Azure integrations can be imported using their `tenant name` and `client id` separated with a colon (`:`).
//
// ```sh
//  $ pulumi import datadog:azure/integration:Integration sandbox ${tenant_name}:${client_id}
// ```
type Integration struct {
	pulumi.CustomResourceState

	ClientId     pulumi.StringOutput    `pulumi:"clientId"`
	ClientSecret pulumi.StringOutput    `pulumi:"clientSecret"`
	HostFilters  pulumi.StringPtrOutput `pulumi:"hostFilters"`
	TenantName   pulumi.StringOutput    `pulumi:"tenantName"`
}

// NewIntegration registers a new resource with the given unique name, arguments, and options.
func NewIntegration(ctx *pulumi.Context,
	name string, args *IntegrationArgs, opts ...pulumi.ResourceOption) (*Integration, error) {
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.ClientSecret == nil {
		return nil, errors.New("missing required argument 'ClientSecret'")
	}
	if args == nil || args.TenantName == nil {
		return nil, errors.New("missing required argument 'TenantName'")
	}
	if args == nil {
		args = &IntegrationArgs{}
	}
	var resource Integration
	err := ctx.RegisterResource("datadog:azure/integration:Integration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegration gets an existing Integration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationState, opts ...pulumi.ResourceOption) (*Integration, error) {
	var resource Integration
	err := ctx.ReadResource("datadog:azure/integration:Integration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Integration resources.
type integrationState struct {
	ClientId     *string `pulumi:"clientId"`
	ClientSecret *string `pulumi:"clientSecret"`
	HostFilters  *string `pulumi:"hostFilters"`
	TenantName   *string `pulumi:"tenantName"`
}

type IntegrationState struct {
	ClientId     pulumi.StringPtrInput
	ClientSecret pulumi.StringPtrInput
	HostFilters  pulumi.StringPtrInput
	TenantName   pulumi.StringPtrInput
}

func (IntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationState)(nil)).Elem()
}

type integrationArgs struct {
	ClientId     string  `pulumi:"clientId"`
	ClientSecret string  `pulumi:"clientSecret"`
	HostFilters  *string `pulumi:"hostFilters"`
	TenantName   string  `pulumi:"tenantName"`
}

// The set of arguments for constructing a Integration resource.
type IntegrationArgs struct {
	ClientId     pulumi.StringInput
	ClientSecret pulumi.StringInput
	HostFilters  pulumi.StringPtrInput
	TenantName   pulumi.StringInput
}

func (IntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationArgs)(nil)).Elem()
}

type IntegrationInput interface {
	pulumi.Input

	ToIntegrationOutput() IntegrationOutput
	ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput
}

func (Integration) ElementType() reflect.Type {
	return reflect.TypeOf((*Integration)(nil)).Elem()
}

func (i Integration) ToIntegrationOutput() IntegrationOutput {
	return i.ToIntegrationOutputWithContext(context.Background())
}

func (i Integration) ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationOutput)
}

type IntegrationOutput struct {
	*pulumi.OutputState
}

func (IntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationOutput)(nil)).Elem()
}

func (o IntegrationOutput) ToIntegrationOutput() IntegrationOutput {
	return o
}

func (o IntegrationOutput) ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(IntegrationOutput{})
}
