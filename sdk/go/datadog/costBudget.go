// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog Cost Budget resource.
type CostBudget struct {
	pulumi.CustomResourceState

	// The ID of the budget.
	BudgetId pulumi.StringOutput `pulumi:"budgetId"`
	// The month when the budget ends (YYYYMM).
	EndMonth pulumi.IntOutput `pulumi:"endMonth"`
	// The entries of the budget.
	Entries CostBudgetEntryArrayOutput `pulumi:"entries"`
	// The cost query used to track against the budget.
	MetricsQuery pulumi.StringOutput `pulumi:"metricsQuery"`
	// The name of the budget.
	Name pulumi.StringOutput `pulumi:"name"`
	// The month when the budget starts (YYYYMM).
	StartMonth pulumi.IntOutput `pulumi:"startMonth"`
	// The sum of all budget entries' amounts.
	TotalAmount pulumi.Float64Output `pulumi:"totalAmount"`
}

// NewCostBudget registers a new resource with the given unique name, arguments, and options.
func NewCostBudget(ctx *pulumi.Context,
	name string, args *CostBudgetArgs, opts ...pulumi.ResourceOption) (*CostBudget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndMonth == nil {
		return nil, errors.New("invalid value for required argument 'EndMonth'")
	}
	if args.MetricsQuery == nil {
		return nil, errors.New("invalid value for required argument 'MetricsQuery'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.StartMonth == nil {
		return nil, errors.New("invalid value for required argument 'StartMonth'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CostBudget
	err := ctx.RegisterResource("datadog:index/costBudget:CostBudget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCostBudget gets an existing CostBudget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCostBudget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CostBudgetState, opts ...pulumi.ResourceOption) (*CostBudget, error) {
	var resource CostBudget
	err := ctx.ReadResource("datadog:index/costBudget:CostBudget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CostBudget resources.
type costBudgetState struct {
	// The ID of the budget.
	BudgetId *string `pulumi:"budgetId"`
	// The month when the budget ends (YYYYMM).
	EndMonth *int `pulumi:"endMonth"`
	// The entries of the budget.
	Entries []CostBudgetEntry `pulumi:"entries"`
	// The cost query used to track against the budget.
	MetricsQuery *string `pulumi:"metricsQuery"`
	// The name of the budget.
	Name *string `pulumi:"name"`
	// The month when the budget starts (YYYYMM).
	StartMonth *int `pulumi:"startMonth"`
	// The sum of all budget entries' amounts.
	TotalAmount *float64 `pulumi:"totalAmount"`
}

type CostBudgetState struct {
	// The ID of the budget.
	BudgetId pulumi.StringPtrInput
	// The month when the budget ends (YYYYMM).
	EndMonth pulumi.IntPtrInput
	// The entries of the budget.
	Entries CostBudgetEntryArrayInput
	// The cost query used to track against the budget.
	MetricsQuery pulumi.StringPtrInput
	// The name of the budget.
	Name pulumi.StringPtrInput
	// The month when the budget starts (YYYYMM).
	StartMonth pulumi.IntPtrInput
	// The sum of all budget entries' amounts.
	TotalAmount pulumi.Float64PtrInput
}

func (CostBudgetState) ElementType() reflect.Type {
	return reflect.TypeOf((*costBudgetState)(nil)).Elem()
}

type costBudgetArgs struct {
	// The ID of the budget.
	BudgetId *string `pulumi:"budgetId"`
	// The month when the budget ends (YYYYMM).
	EndMonth int `pulumi:"endMonth"`
	// The entries of the budget.
	Entries []CostBudgetEntry `pulumi:"entries"`
	// The cost query used to track against the budget.
	MetricsQuery string `pulumi:"metricsQuery"`
	// The name of the budget.
	Name string `pulumi:"name"`
	// The month when the budget starts (YYYYMM).
	StartMonth int `pulumi:"startMonth"`
}

// The set of arguments for constructing a CostBudget resource.
type CostBudgetArgs struct {
	// The ID of the budget.
	BudgetId pulumi.StringPtrInput
	// The month when the budget ends (YYYYMM).
	EndMonth pulumi.IntInput
	// The entries of the budget.
	Entries CostBudgetEntryArrayInput
	// The cost query used to track against the budget.
	MetricsQuery pulumi.StringInput
	// The name of the budget.
	Name pulumi.StringInput
	// The month when the budget starts (YYYYMM).
	StartMonth pulumi.IntInput
}

func (CostBudgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*costBudgetArgs)(nil)).Elem()
}

type CostBudgetInput interface {
	pulumi.Input

	ToCostBudgetOutput() CostBudgetOutput
	ToCostBudgetOutputWithContext(ctx context.Context) CostBudgetOutput
}

func (*CostBudget) ElementType() reflect.Type {
	return reflect.TypeOf((**CostBudget)(nil)).Elem()
}

func (i *CostBudget) ToCostBudgetOutput() CostBudgetOutput {
	return i.ToCostBudgetOutputWithContext(context.Background())
}

func (i *CostBudget) ToCostBudgetOutputWithContext(ctx context.Context) CostBudgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostBudgetOutput)
}

// CostBudgetArrayInput is an input type that accepts CostBudgetArray and CostBudgetArrayOutput values.
// You can construct a concrete instance of `CostBudgetArrayInput` via:
//
//	CostBudgetArray{ CostBudgetArgs{...} }
type CostBudgetArrayInput interface {
	pulumi.Input

	ToCostBudgetArrayOutput() CostBudgetArrayOutput
	ToCostBudgetArrayOutputWithContext(context.Context) CostBudgetArrayOutput
}

type CostBudgetArray []CostBudgetInput

func (CostBudgetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CostBudget)(nil)).Elem()
}

func (i CostBudgetArray) ToCostBudgetArrayOutput() CostBudgetArrayOutput {
	return i.ToCostBudgetArrayOutputWithContext(context.Background())
}

func (i CostBudgetArray) ToCostBudgetArrayOutputWithContext(ctx context.Context) CostBudgetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostBudgetArrayOutput)
}

// CostBudgetMapInput is an input type that accepts CostBudgetMap and CostBudgetMapOutput values.
// You can construct a concrete instance of `CostBudgetMapInput` via:
//
//	CostBudgetMap{ "key": CostBudgetArgs{...} }
type CostBudgetMapInput interface {
	pulumi.Input

	ToCostBudgetMapOutput() CostBudgetMapOutput
	ToCostBudgetMapOutputWithContext(context.Context) CostBudgetMapOutput
}

type CostBudgetMap map[string]CostBudgetInput

func (CostBudgetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CostBudget)(nil)).Elem()
}

func (i CostBudgetMap) ToCostBudgetMapOutput() CostBudgetMapOutput {
	return i.ToCostBudgetMapOutputWithContext(context.Background())
}

func (i CostBudgetMap) ToCostBudgetMapOutputWithContext(ctx context.Context) CostBudgetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostBudgetMapOutput)
}

type CostBudgetOutput struct{ *pulumi.OutputState }

func (CostBudgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostBudget)(nil)).Elem()
}

func (o CostBudgetOutput) ToCostBudgetOutput() CostBudgetOutput {
	return o
}

func (o CostBudgetOutput) ToCostBudgetOutputWithContext(ctx context.Context) CostBudgetOutput {
	return o
}

// The ID of the budget.
func (o CostBudgetOutput) BudgetId() pulumi.StringOutput {
	return o.ApplyT(func(v *CostBudget) pulumi.StringOutput { return v.BudgetId }).(pulumi.StringOutput)
}

// The month when the budget ends (YYYYMM).
func (o CostBudgetOutput) EndMonth() pulumi.IntOutput {
	return o.ApplyT(func(v *CostBudget) pulumi.IntOutput { return v.EndMonth }).(pulumi.IntOutput)
}

// The entries of the budget.
func (o CostBudgetOutput) Entries() CostBudgetEntryArrayOutput {
	return o.ApplyT(func(v *CostBudget) CostBudgetEntryArrayOutput { return v.Entries }).(CostBudgetEntryArrayOutput)
}

// The cost query used to track against the budget.
func (o CostBudgetOutput) MetricsQuery() pulumi.StringOutput {
	return o.ApplyT(func(v *CostBudget) pulumi.StringOutput { return v.MetricsQuery }).(pulumi.StringOutput)
}

// The name of the budget.
func (o CostBudgetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CostBudget) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The month when the budget starts (YYYYMM).
func (o CostBudgetOutput) StartMonth() pulumi.IntOutput {
	return o.ApplyT(func(v *CostBudget) pulumi.IntOutput { return v.StartMonth }).(pulumi.IntOutput)
}

// The sum of all budget entries' amounts.
func (o CostBudgetOutput) TotalAmount() pulumi.Float64Output {
	return o.ApplyT(func(v *CostBudget) pulumi.Float64Output { return v.TotalAmount }).(pulumi.Float64Output)
}

type CostBudgetArrayOutput struct{ *pulumi.OutputState }

func (CostBudgetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CostBudget)(nil)).Elem()
}

func (o CostBudgetArrayOutput) ToCostBudgetArrayOutput() CostBudgetArrayOutput {
	return o
}

func (o CostBudgetArrayOutput) ToCostBudgetArrayOutputWithContext(ctx context.Context) CostBudgetArrayOutput {
	return o
}

func (o CostBudgetArrayOutput) Index(i pulumi.IntInput) CostBudgetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CostBudget {
		return vs[0].([]*CostBudget)[vs[1].(int)]
	}).(CostBudgetOutput)
}

type CostBudgetMapOutput struct{ *pulumi.OutputState }

func (CostBudgetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CostBudget)(nil)).Elem()
}

func (o CostBudgetMapOutput) ToCostBudgetMapOutput() CostBudgetMapOutput {
	return o
}

func (o CostBudgetMapOutput) ToCostBudgetMapOutputWithContext(ctx context.Context) CostBudgetMapOutput {
	return o
}

func (o CostBudgetMapOutput) MapIndex(k pulumi.StringInput) CostBudgetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CostBudget {
		return vs[0].(map[string]*CostBudget)[vs[1].(string)]
	}).(CostBudgetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CostBudgetInput)(nil)).Elem(), &CostBudget{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostBudgetArrayInput)(nil)).Elem(), CostBudgetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostBudgetMapInput)(nil)).Elem(), CostBudgetMap{})
	pulumi.RegisterOutputType(CostBudgetOutput{})
	pulumi.RegisterOutputType(CostBudgetArrayOutput{})
	pulumi.RegisterOutputType(CostBudgetMapOutput{})
}
