// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type SyntheticsTestApiStepRequestProxy struct {
	// Header name and value map.
	Headers map[string]interface{} `pulumi:"headers"`
	// URL of the proxy to perform the test.
	Url string `pulumi:"url"`
}

// SyntheticsTestApiStepRequestProxyInput is an input type that accepts SyntheticsTestApiStepRequestProxyArgs and SyntheticsTestApiStepRequestProxyOutput values.
// You can construct a concrete instance of `SyntheticsTestApiStepRequestProxyInput` via:
//
//	SyntheticsTestApiStepRequestProxyArgs{...}
type SyntheticsTestApiStepRequestProxyInput interface {
	pulumi.Input

	ToSyntheticsTestApiStepRequestProxyOutput() SyntheticsTestApiStepRequestProxyOutput
	ToSyntheticsTestApiStepRequestProxyOutputWithContext(context.Context) SyntheticsTestApiStepRequestProxyOutput
}

type SyntheticsTestApiStepRequestProxyArgs struct {
	// Header name and value map.
	Headers pulumi.MapInput `pulumi:"headers"`
	// URL of the proxy to perform the test.
	Url pulumi.StringInput `pulumi:"url"`
}

func (SyntheticsTestApiStepRequestProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestApiStepRequestProxy)(nil)).Elem()
}

func (i SyntheticsTestApiStepRequestProxyArgs) ToSyntheticsTestApiStepRequestProxyOutput() SyntheticsTestApiStepRequestProxyOutput {
	return i.ToSyntheticsTestApiStepRequestProxyOutputWithContext(context.Background())
}

func (i SyntheticsTestApiStepRequestProxyArgs) ToSyntheticsTestApiStepRequestProxyOutputWithContext(ctx context.Context) SyntheticsTestApiStepRequestProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestApiStepRequestProxyOutput)
}

func (i SyntheticsTestApiStepRequestProxyArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestApiStepRequestProxy] {
	return pulumix.Output[SyntheticsTestApiStepRequestProxy]{
		OutputState: i.ToSyntheticsTestApiStepRequestProxyOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestApiStepRequestProxyArgs) ToSyntheticsTestApiStepRequestProxyPtrOutput() SyntheticsTestApiStepRequestProxyPtrOutput {
	return i.ToSyntheticsTestApiStepRequestProxyPtrOutputWithContext(context.Background())
}

func (i SyntheticsTestApiStepRequestProxyArgs) ToSyntheticsTestApiStepRequestProxyPtrOutputWithContext(ctx context.Context) SyntheticsTestApiStepRequestProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestApiStepRequestProxyOutput).ToSyntheticsTestApiStepRequestProxyPtrOutputWithContext(ctx)
}

// SyntheticsTestApiStepRequestProxyPtrInput is an input type that accepts SyntheticsTestApiStepRequestProxyArgs, SyntheticsTestApiStepRequestProxyPtr and SyntheticsTestApiStepRequestProxyPtrOutput values.
// You can construct a concrete instance of `SyntheticsTestApiStepRequestProxyPtrInput` via:
//
//	        SyntheticsTestApiStepRequestProxyArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestApiStepRequestProxyPtrInput interface {
	pulumi.Input

	ToSyntheticsTestApiStepRequestProxyPtrOutput() SyntheticsTestApiStepRequestProxyPtrOutput
	ToSyntheticsTestApiStepRequestProxyPtrOutputWithContext(context.Context) SyntheticsTestApiStepRequestProxyPtrOutput
}

type syntheticsTestApiStepRequestProxyPtrType SyntheticsTestApiStepRequestProxyArgs

func SyntheticsTestApiStepRequestProxyPtr(v *SyntheticsTestApiStepRequestProxyArgs) SyntheticsTestApiStepRequestProxyPtrInput {
	return (*syntheticsTestApiStepRequestProxyPtrType)(v)
}

func (*syntheticsTestApiStepRequestProxyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestApiStepRequestProxy)(nil)).Elem()
}

func (i *syntheticsTestApiStepRequestProxyPtrType) ToSyntheticsTestApiStepRequestProxyPtrOutput() SyntheticsTestApiStepRequestProxyPtrOutput {
	return i.ToSyntheticsTestApiStepRequestProxyPtrOutputWithContext(context.Background())
}

func (i *syntheticsTestApiStepRequestProxyPtrType) ToSyntheticsTestApiStepRequestProxyPtrOutputWithContext(ctx context.Context) SyntheticsTestApiStepRequestProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestApiStepRequestProxyPtrOutput)
}

func (i *syntheticsTestApiStepRequestProxyPtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestApiStepRequestProxy] {
	return pulumix.Output[*SyntheticsTestApiStepRequestProxy]{
		OutputState: i.ToSyntheticsTestApiStepRequestProxyPtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestApiStepRequestProxyOutput struct{ *pulumi.OutputState }

func (SyntheticsTestApiStepRequestProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestApiStepRequestProxy)(nil)).Elem()
}

func (o SyntheticsTestApiStepRequestProxyOutput) ToSyntheticsTestApiStepRequestProxyOutput() SyntheticsTestApiStepRequestProxyOutput {
	return o
}

func (o SyntheticsTestApiStepRequestProxyOutput) ToSyntheticsTestApiStepRequestProxyOutputWithContext(ctx context.Context) SyntheticsTestApiStepRequestProxyOutput {
	return o
}

func (o SyntheticsTestApiStepRequestProxyOutput) ToSyntheticsTestApiStepRequestProxyPtrOutput() SyntheticsTestApiStepRequestProxyPtrOutput {
	return o.ToSyntheticsTestApiStepRequestProxyPtrOutputWithContext(context.Background())
}

func (o SyntheticsTestApiStepRequestProxyOutput) ToSyntheticsTestApiStepRequestProxyPtrOutputWithContext(ctx context.Context) SyntheticsTestApiStepRequestProxyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestApiStepRequestProxy) *SyntheticsTestApiStepRequestProxy {
		return &v
	}).(SyntheticsTestApiStepRequestProxyPtrOutput)
}

func (o SyntheticsTestApiStepRequestProxyOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestApiStepRequestProxy] {
	return pulumix.Output[SyntheticsTestApiStepRequestProxy]{
		OutputState: o.OutputState,
	}
}

// Header name and value map.
func (o SyntheticsTestApiStepRequestProxyOutput) Headers() pulumi.MapOutput {
	return o.ApplyT(func(v SyntheticsTestApiStepRequestProxy) map[string]interface{} { return v.Headers }).(pulumi.MapOutput)
}

// URL of the proxy to perform the test.
func (o SyntheticsTestApiStepRequestProxyOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestApiStepRequestProxy) string { return v.Url }).(pulumi.StringOutput)
}

type SyntheticsTestApiStepRequestProxyPtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestApiStepRequestProxyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestApiStepRequestProxy)(nil)).Elem()
}

func (o SyntheticsTestApiStepRequestProxyPtrOutput) ToSyntheticsTestApiStepRequestProxyPtrOutput() SyntheticsTestApiStepRequestProxyPtrOutput {
	return o
}

func (o SyntheticsTestApiStepRequestProxyPtrOutput) ToSyntheticsTestApiStepRequestProxyPtrOutputWithContext(ctx context.Context) SyntheticsTestApiStepRequestProxyPtrOutput {
	return o
}

func (o SyntheticsTestApiStepRequestProxyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestApiStepRequestProxy] {
	return pulumix.Output[*SyntheticsTestApiStepRequestProxy]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestApiStepRequestProxyPtrOutput) Elem() SyntheticsTestApiStepRequestProxyOutput {
	return o.ApplyT(func(v *SyntheticsTestApiStepRequestProxy) SyntheticsTestApiStepRequestProxy {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestApiStepRequestProxy
		return ret
	}).(SyntheticsTestApiStepRequestProxyOutput)
}

// Header name and value map.
func (o SyntheticsTestApiStepRequestProxyPtrOutput) Headers() pulumi.MapOutput {
	return o.ApplyT(func(v *SyntheticsTestApiStepRequestProxy) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.MapOutput)
}

// URL of the proxy to perform the test.
func (o SyntheticsTestApiStepRequestProxyPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestApiStepRequestProxy) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type SyntheticsTestApiStepRetry struct {
	// Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.
	Count *int `pulumi:"count"`
	// Interval between a failed test and the next retry in milliseconds. Defaults to `300`.
	Interval *int `pulumi:"interval"`
}

// SyntheticsTestApiStepRetryInput is an input type that accepts SyntheticsTestApiStepRetryArgs and SyntheticsTestApiStepRetryOutput values.
// You can construct a concrete instance of `SyntheticsTestApiStepRetryInput` via:
//
//	SyntheticsTestApiStepRetryArgs{...}
type SyntheticsTestApiStepRetryInput interface {
	pulumi.Input

	ToSyntheticsTestApiStepRetryOutput() SyntheticsTestApiStepRetryOutput
	ToSyntheticsTestApiStepRetryOutputWithContext(context.Context) SyntheticsTestApiStepRetryOutput
}

type SyntheticsTestApiStepRetryArgs struct {
	// Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Interval between a failed test and the next retry in milliseconds. Defaults to `300`.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
}

func (SyntheticsTestApiStepRetryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestApiStepRetry)(nil)).Elem()
}

func (i SyntheticsTestApiStepRetryArgs) ToSyntheticsTestApiStepRetryOutput() SyntheticsTestApiStepRetryOutput {
	return i.ToSyntheticsTestApiStepRetryOutputWithContext(context.Background())
}

func (i SyntheticsTestApiStepRetryArgs) ToSyntheticsTestApiStepRetryOutputWithContext(ctx context.Context) SyntheticsTestApiStepRetryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestApiStepRetryOutput)
}

func (i SyntheticsTestApiStepRetryArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestApiStepRetry] {
	return pulumix.Output[SyntheticsTestApiStepRetry]{
		OutputState: i.ToSyntheticsTestApiStepRetryOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestApiStepRetryArgs) ToSyntheticsTestApiStepRetryPtrOutput() SyntheticsTestApiStepRetryPtrOutput {
	return i.ToSyntheticsTestApiStepRetryPtrOutputWithContext(context.Background())
}

func (i SyntheticsTestApiStepRetryArgs) ToSyntheticsTestApiStepRetryPtrOutputWithContext(ctx context.Context) SyntheticsTestApiStepRetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestApiStepRetryOutput).ToSyntheticsTestApiStepRetryPtrOutputWithContext(ctx)
}

// SyntheticsTestApiStepRetryPtrInput is an input type that accepts SyntheticsTestApiStepRetryArgs, SyntheticsTestApiStepRetryPtr and SyntheticsTestApiStepRetryPtrOutput values.
// You can construct a concrete instance of `SyntheticsTestApiStepRetryPtrInput` via:
//
//	        SyntheticsTestApiStepRetryArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestApiStepRetryPtrInput interface {
	pulumi.Input

	ToSyntheticsTestApiStepRetryPtrOutput() SyntheticsTestApiStepRetryPtrOutput
	ToSyntheticsTestApiStepRetryPtrOutputWithContext(context.Context) SyntheticsTestApiStepRetryPtrOutput
}

type syntheticsTestApiStepRetryPtrType SyntheticsTestApiStepRetryArgs

func SyntheticsTestApiStepRetryPtr(v *SyntheticsTestApiStepRetryArgs) SyntheticsTestApiStepRetryPtrInput {
	return (*syntheticsTestApiStepRetryPtrType)(v)
}

func (*syntheticsTestApiStepRetryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestApiStepRetry)(nil)).Elem()
}

func (i *syntheticsTestApiStepRetryPtrType) ToSyntheticsTestApiStepRetryPtrOutput() SyntheticsTestApiStepRetryPtrOutput {
	return i.ToSyntheticsTestApiStepRetryPtrOutputWithContext(context.Background())
}

func (i *syntheticsTestApiStepRetryPtrType) ToSyntheticsTestApiStepRetryPtrOutputWithContext(ctx context.Context) SyntheticsTestApiStepRetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestApiStepRetryPtrOutput)
}

func (i *syntheticsTestApiStepRetryPtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestApiStepRetry] {
	return pulumix.Output[*SyntheticsTestApiStepRetry]{
		OutputState: i.ToSyntheticsTestApiStepRetryPtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestApiStepRetryOutput struct{ *pulumi.OutputState }

func (SyntheticsTestApiStepRetryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestApiStepRetry)(nil)).Elem()
}

func (o SyntheticsTestApiStepRetryOutput) ToSyntheticsTestApiStepRetryOutput() SyntheticsTestApiStepRetryOutput {
	return o
}

func (o SyntheticsTestApiStepRetryOutput) ToSyntheticsTestApiStepRetryOutputWithContext(ctx context.Context) SyntheticsTestApiStepRetryOutput {
	return o
}

func (o SyntheticsTestApiStepRetryOutput) ToSyntheticsTestApiStepRetryPtrOutput() SyntheticsTestApiStepRetryPtrOutput {
	return o.ToSyntheticsTestApiStepRetryPtrOutputWithContext(context.Background())
}

func (o SyntheticsTestApiStepRetryOutput) ToSyntheticsTestApiStepRetryPtrOutputWithContext(ctx context.Context) SyntheticsTestApiStepRetryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestApiStepRetry) *SyntheticsTestApiStepRetry {
		return &v
	}).(SyntheticsTestApiStepRetryPtrOutput)
}

func (o SyntheticsTestApiStepRetryOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestApiStepRetry] {
	return pulumix.Output[SyntheticsTestApiStepRetry]{
		OutputState: o.OutputState,
	}
}

// Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.
func (o SyntheticsTestApiStepRetryOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestApiStepRetry) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Interval between a failed test and the next retry in milliseconds. Defaults to `300`.
func (o SyntheticsTestApiStepRetryOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestApiStepRetry) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type SyntheticsTestApiStepRetryPtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestApiStepRetryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestApiStepRetry)(nil)).Elem()
}

func (o SyntheticsTestApiStepRetryPtrOutput) ToSyntheticsTestApiStepRetryPtrOutput() SyntheticsTestApiStepRetryPtrOutput {
	return o
}

func (o SyntheticsTestApiStepRetryPtrOutput) ToSyntheticsTestApiStepRetryPtrOutputWithContext(ctx context.Context) SyntheticsTestApiStepRetryPtrOutput {
	return o
}

func (o SyntheticsTestApiStepRetryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestApiStepRetry] {
	return pulumix.Output[*SyntheticsTestApiStepRetry]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestApiStepRetryPtrOutput) Elem() SyntheticsTestApiStepRetryOutput {
	return o.ApplyT(func(v *SyntheticsTestApiStepRetry) SyntheticsTestApiStepRetry {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestApiStepRetry
		return ret
	}).(SyntheticsTestApiStepRetryOutput)
}

// Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.
func (o SyntheticsTestApiStepRetryPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestApiStepRetry) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// Interval between a failed test and the next retry in milliseconds. Defaults to `300`.
func (o SyntheticsTestApiStepRetryPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestApiStepRetry) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

type SyntheticsTestAssertion struct {
	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	Operator string `pulumi:"operator"`
	// If assertion type is `header`, this is the header name.
	Property *string `pulumi:"property"`
	// Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
	Target *string `pulumi:"target"`
	// Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
	Targetjsonpath *SyntheticsTestAssertionTargetjsonpath `pulumi:"targetjsonpath"`
	// Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.
	Targetxpath *SyntheticsTestAssertionTargetxpath `pulumi:"targetxpath"`
	// Timings scope for response time assertions. Valid values are `all`, `withoutDNS`.
	TimingsScope *string `pulumi:"timingsScope"`
	// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
	Type string `pulumi:"type"`
}

// SyntheticsTestAssertionInput is an input type that accepts SyntheticsTestAssertionArgs and SyntheticsTestAssertionOutput values.
// You can construct a concrete instance of `SyntheticsTestAssertionInput` via:
//
//	SyntheticsTestAssertionArgs{...}
type SyntheticsTestAssertionInput interface {
	pulumi.Input

	ToSyntheticsTestAssertionOutput() SyntheticsTestAssertionOutput
	ToSyntheticsTestAssertionOutputWithContext(context.Context) SyntheticsTestAssertionOutput
}

type SyntheticsTestAssertionArgs struct {
	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	Operator pulumi.StringInput `pulumi:"operator"`
	// If assertion type is `header`, this is the header name.
	Property pulumi.StringPtrInput `pulumi:"property"`
	// Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
	Targetjsonpath SyntheticsTestAssertionTargetjsonpathPtrInput `pulumi:"targetjsonpath"`
	// Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.
	Targetxpath SyntheticsTestAssertionTargetxpathPtrInput `pulumi:"targetxpath"`
	// Timings scope for response time assertions. Valid values are `all`, `withoutDNS`.
	TimingsScope pulumi.StringPtrInput `pulumi:"timingsScope"`
	// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SyntheticsTestAssertionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestAssertion)(nil)).Elem()
}

func (i SyntheticsTestAssertionArgs) ToSyntheticsTestAssertionOutput() SyntheticsTestAssertionOutput {
	return i.ToSyntheticsTestAssertionOutputWithContext(context.Background())
}

func (i SyntheticsTestAssertionArgs) ToSyntheticsTestAssertionOutputWithContext(ctx context.Context) SyntheticsTestAssertionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestAssertionOutput)
}

func (i SyntheticsTestAssertionArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestAssertion] {
	return pulumix.Output[SyntheticsTestAssertion]{
		OutputState: i.ToSyntheticsTestAssertionOutputWithContext(ctx).OutputState,
	}
}

// SyntheticsTestAssertionArrayInput is an input type that accepts SyntheticsTestAssertionArray and SyntheticsTestAssertionArrayOutput values.
// You can construct a concrete instance of `SyntheticsTestAssertionArrayInput` via:
//
//	SyntheticsTestAssertionArray{ SyntheticsTestAssertionArgs{...} }
type SyntheticsTestAssertionArrayInput interface {
	pulumi.Input

	ToSyntheticsTestAssertionArrayOutput() SyntheticsTestAssertionArrayOutput
	ToSyntheticsTestAssertionArrayOutputWithContext(context.Context) SyntheticsTestAssertionArrayOutput
}

type SyntheticsTestAssertionArray []SyntheticsTestAssertionInput

func (SyntheticsTestAssertionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticsTestAssertion)(nil)).Elem()
}

func (i SyntheticsTestAssertionArray) ToSyntheticsTestAssertionArrayOutput() SyntheticsTestAssertionArrayOutput {
	return i.ToSyntheticsTestAssertionArrayOutputWithContext(context.Background())
}

func (i SyntheticsTestAssertionArray) ToSyntheticsTestAssertionArrayOutputWithContext(ctx context.Context) SyntheticsTestAssertionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestAssertionArrayOutput)
}

func (i SyntheticsTestAssertionArray) ToOutput(ctx context.Context) pulumix.Output[[]SyntheticsTestAssertion] {
	return pulumix.Output[[]SyntheticsTestAssertion]{
		OutputState: i.ToSyntheticsTestAssertionArrayOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestAssertionOutput struct{ *pulumi.OutputState }

func (SyntheticsTestAssertionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestAssertion)(nil)).Elem()
}

func (o SyntheticsTestAssertionOutput) ToSyntheticsTestAssertionOutput() SyntheticsTestAssertionOutput {
	return o
}

func (o SyntheticsTestAssertionOutput) ToSyntheticsTestAssertionOutputWithContext(ctx context.Context) SyntheticsTestAssertionOutput {
	return o
}

func (o SyntheticsTestAssertionOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestAssertion] {
	return pulumix.Output[SyntheticsTestAssertion]{
		OutputState: o.OutputState,
	}
}

// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
func (o SyntheticsTestAssertionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestAssertion) string { return v.Operator }).(pulumi.StringOutput)
}

// If assertion type is `header`, this is the header name.
func (o SyntheticsTestAssertionOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestAssertion) *string { return v.Property }).(pulumi.StringPtrOutput)
}

// Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
func (o SyntheticsTestAssertionOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestAssertion) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
func (o SyntheticsTestAssertionOutput) Targetjsonpath() SyntheticsTestAssertionTargetjsonpathPtrOutput {
	return o.ApplyT(func(v SyntheticsTestAssertion) *SyntheticsTestAssertionTargetjsonpath { return v.Targetjsonpath }).(SyntheticsTestAssertionTargetjsonpathPtrOutput)
}

// Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.
func (o SyntheticsTestAssertionOutput) Targetxpath() SyntheticsTestAssertionTargetxpathPtrOutput {
	return o.ApplyT(func(v SyntheticsTestAssertion) *SyntheticsTestAssertionTargetxpath { return v.Targetxpath }).(SyntheticsTestAssertionTargetxpathPtrOutput)
}

// Timings scope for response time assertions. Valid values are `all`, `withoutDNS`.
func (o SyntheticsTestAssertionOutput) TimingsScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestAssertion) *string { return v.TimingsScope }).(pulumi.StringPtrOutput)
}

// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
func (o SyntheticsTestAssertionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestAssertion) string { return v.Type }).(pulumi.StringOutput)
}

type SyntheticsTestAssertionArrayOutput struct{ *pulumi.OutputState }

func (SyntheticsTestAssertionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticsTestAssertion)(nil)).Elem()
}

func (o SyntheticsTestAssertionArrayOutput) ToSyntheticsTestAssertionArrayOutput() SyntheticsTestAssertionArrayOutput {
	return o
}

func (o SyntheticsTestAssertionArrayOutput) ToSyntheticsTestAssertionArrayOutputWithContext(ctx context.Context) SyntheticsTestAssertionArrayOutput {
	return o
}

func (o SyntheticsTestAssertionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SyntheticsTestAssertion] {
	return pulumix.Output[[]SyntheticsTestAssertion]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestAssertionArrayOutput) Index(i pulumi.IntInput) SyntheticsTestAssertionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticsTestAssertion {
		return vs[0].([]SyntheticsTestAssertion)[vs[1].(int)]
	}).(SyntheticsTestAssertionOutput)
}

type SyntheticsTestAssertionTargetjsonpath struct {
	// The JSON path to assert.
	Jsonpath string `pulumi:"jsonpath"`
	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	Operator string `pulumi:"operator"`
	// Expected matching value.
	Targetvalue *string `pulumi:"targetvalue"`
}

// SyntheticsTestAssertionTargetjsonpathInput is an input type that accepts SyntheticsTestAssertionTargetjsonpathArgs and SyntheticsTestAssertionTargetjsonpathOutput values.
// You can construct a concrete instance of `SyntheticsTestAssertionTargetjsonpathInput` via:
//
//	SyntheticsTestAssertionTargetjsonpathArgs{...}
type SyntheticsTestAssertionTargetjsonpathInput interface {
	pulumi.Input

	ToSyntheticsTestAssertionTargetjsonpathOutput() SyntheticsTestAssertionTargetjsonpathOutput
	ToSyntheticsTestAssertionTargetjsonpathOutputWithContext(context.Context) SyntheticsTestAssertionTargetjsonpathOutput
}

type SyntheticsTestAssertionTargetjsonpathArgs struct {
	// The JSON path to assert.
	Jsonpath pulumi.StringInput `pulumi:"jsonpath"`
	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	Operator pulumi.StringInput `pulumi:"operator"`
	// Expected matching value.
	Targetvalue pulumi.StringPtrInput `pulumi:"targetvalue"`
}

func (SyntheticsTestAssertionTargetjsonpathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestAssertionTargetjsonpath)(nil)).Elem()
}

func (i SyntheticsTestAssertionTargetjsonpathArgs) ToSyntheticsTestAssertionTargetjsonpathOutput() SyntheticsTestAssertionTargetjsonpathOutput {
	return i.ToSyntheticsTestAssertionTargetjsonpathOutputWithContext(context.Background())
}

func (i SyntheticsTestAssertionTargetjsonpathArgs) ToSyntheticsTestAssertionTargetjsonpathOutputWithContext(ctx context.Context) SyntheticsTestAssertionTargetjsonpathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestAssertionTargetjsonpathOutput)
}

func (i SyntheticsTestAssertionTargetjsonpathArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestAssertionTargetjsonpath] {
	return pulumix.Output[SyntheticsTestAssertionTargetjsonpath]{
		OutputState: i.ToSyntheticsTestAssertionTargetjsonpathOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestAssertionTargetjsonpathArgs) ToSyntheticsTestAssertionTargetjsonpathPtrOutput() SyntheticsTestAssertionTargetjsonpathPtrOutput {
	return i.ToSyntheticsTestAssertionTargetjsonpathPtrOutputWithContext(context.Background())
}

func (i SyntheticsTestAssertionTargetjsonpathArgs) ToSyntheticsTestAssertionTargetjsonpathPtrOutputWithContext(ctx context.Context) SyntheticsTestAssertionTargetjsonpathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestAssertionTargetjsonpathOutput).ToSyntheticsTestAssertionTargetjsonpathPtrOutputWithContext(ctx)
}

// SyntheticsTestAssertionTargetjsonpathPtrInput is an input type that accepts SyntheticsTestAssertionTargetjsonpathArgs, SyntheticsTestAssertionTargetjsonpathPtr and SyntheticsTestAssertionTargetjsonpathPtrOutput values.
// You can construct a concrete instance of `SyntheticsTestAssertionTargetjsonpathPtrInput` via:
//
//	        SyntheticsTestAssertionTargetjsonpathArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestAssertionTargetjsonpathPtrInput interface {
	pulumi.Input

	ToSyntheticsTestAssertionTargetjsonpathPtrOutput() SyntheticsTestAssertionTargetjsonpathPtrOutput
	ToSyntheticsTestAssertionTargetjsonpathPtrOutputWithContext(context.Context) SyntheticsTestAssertionTargetjsonpathPtrOutput
}

type syntheticsTestAssertionTargetjsonpathPtrType SyntheticsTestAssertionTargetjsonpathArgs

func SyntheticsTestAssertionTargetjsonpathPtr(v *SyntheticsTestAssertionTargetjsonpathArgs) SyntheticsTestAssertionTargetjsonpathPtrInput {
	return (*syntheticsTestAssertionTargetjsonpathPtrType)(v)
}

func (*syntheticsTestAssertionTargetjsonpathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestAssertionTargetjsonpath)(nil)).Elem()
}

func (i *syntheticsTestAssertionTargetjsonpathPtrType) ToSyntheticsTestAssertionTargetjsonpathPtrOutput() SyntheticsTestAssertionTargetjsonpathPtrOutput {
	return i.ToSyntheticsTestAssertionTargetjsonpathPtrOutputWithContext(context.Background())
}

func (i *syntheticsTestAssertionTargetjsonpathPtrType) ToSyntheticsTestAssertionTargetjsonpathPtrOutputWithContext(ctx context.Context) SyntheticsTestAssertionTargetjsonpathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestAssertionTargetjsonpathPtrOutput)
}

func (i *syntheticsTestAssertionTargetjsonpathPtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestAssertionTargetjsonpath] {
	return pulumix.Output[*SyntheticsTestAssertionTargetjsonpath]{
		OutputState: i.ToSyntheticsTestAssertionTargetjsonpathPtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestAssertionTargetjsonpathOutput struct{ *pulumi.OutputState }

func (SyntheticsTestAssertionTargetjsonpathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestAssertionTargetjsonpath)(nil)).Elem()
}

func (o SyntheticsTestAssertionTargetjsonpathOutput) ToSyntheticsTestAssertionTargetjsonpathOutput() SyntheticsTestAssertionTargetjsonpathOutput {
	return o
}

func (o SyntheticsTestAssertionTargetjsonpathOutput) ToSyntheticsTestAssertionTargetjsonpathOutputWithContext(ctx context.Context) SyntheticsTestAssertionTargetjsonpathOutput {
	return o
}

func (o SyntheticsTestAssertionTargetjsonpathOutput) ToSyntheticsTestAssertionTargetjsonpathPtrOutput() SyntheticsTestAssertionTargetjsonpathPtrOutput {
	return o.ToSyntheticsTestAssertionTargetjsonpathPtrOutputWithContext(context.Background())
}

func (o SyntheticsTestAssertionTargetjsonpathOutput) ToSyntheticsTestAssertionTargetjsonpathPtrOutputWithContext(ctx context.Context) SyntheticsTestAssertionTargetjsonpathPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestAssertionTargetjsonpath) *SyntheticsTestAssertionTargetjsonpath {
		return &v
	}).(SyntheticsTestAssertionTargetjsonpathPtrOutput)
}

func (o SyntheticsTestAssertionTargetjsonpathOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestAssertionTargetjsonpath] {
	return pulumix.Output[SyntheticsTestAssertionTargetjsonpath]{
		OutputState: o.OutputState,
	}
}

// The JSON path to assert.
func (o SyntheticsTestAssertionTargetjsonpathOutput) Jsonpath() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestAssertionTargetjsonpath) string { return v.Jsonpath }).(pulumi.StringOutput)
}

// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
func (o SyntheticsTestAssertionTargetjsonpathOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestAssertionTargetjsonpath) string { return v.Operator }).(pulumi.StringOutput)
}

// Expected matching value.
func (o SyntheticsTestAssertionTargetjsonpathOutput) Targetvalue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestAssertionTargetjsonpath) *string { return v.Targetvalue }).(pulumi.StringPtrOutput)
}

type SyntheticsTestAssertionTargetjsonpathPtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestAssertionTargetjsonpathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestAssertionTargetjsonpath)(nil)).Elem()
}

func (o SyntheticsTestAssertionTargetjsonpathPtrOutput) ToSyntheticsTestAssertionTargetjsonpathPtrOutput() SyntheticsTestAssertionTargetjsonpathPtrOutput {
	return o
}

func (o SyntheticsTestAssertionTargetjsonpathPtrOutput) ToSyntheticsTestAssertionTargetjsonpathPtrOutputWithContext(ctx context.Context) SyntheticsTestAssertionTargetjsonpathPtrOutput {
	return o
}

func (o SyntheticsTestAssertionTargetjsonpathPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestAssertionTargetjsonpath] {
	return pulumix.Output[*SyntheticsTestAssertionTargetjsonpath]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestAssertionTargetjsonpathPtrOutput) Elem() SyntheticsTestAssertionTargetjsonpathOutput {
	return o.ApplyT(func(v *SyntheticsTestAssertionTargetjsonpath) SyntheticsTestAssertionTargetjsonpath {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestAssertionTargetjsonpath
		return ret
	}).(SyntheticsTestAssertionTargetjsonpathOutput)
}

// The JSON path to assert.
func (o SyntheticsTestAssertionTargetjsonpathPtrOutput) Jsonpath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestAssertionTargetjsonpath) *string {
		if v == nil {
			return nil
		}
		return &v.Jsonpath
	}).(pulumi.StringPtrOutput)
}

// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
func (o SyntheticsTestAssertionTargetjsonpathPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestAssertionTargetjsonpath) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Expected matching value.
func (o SyntheticsTestAssertionTargetjsonpathPtrOutput) Targetvalue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestAssertionTargetjsonpath) *string {
		if v == nil {
			return nil
		}
		return v.Targetvalue
	}).(pulumi.StringPtrOutput)
}

type SyntheticsTestAssertionTargetxpath struct {
	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	Operator string `pulumi:"operator"`
	// Expected matching value.
	Targetvalue *string `pulumi:"targetvalue"`
	// The xpath to assert.
	Xpath string `pulumi:"xpath"`
}

// SyntheticsTestAssertionTargetxpathInput is an input type that accepts SyntheticsTestAssertionTargetxpathArgs and SyntheticsTestAssertionTargetxpathOutput values.
// You can construct a concrete instance of `SyntheticsTestAssertionTargetxpathInput` via:
//
//	SyntheticsTestAssertionTargetxpathArgs{...}
type SyntheticsTestAssertionTargetxpathInput interface {
	pulumi.Input

	ToSyntheticsTestAssertionTargetxpathOutput() SyntheticsTestAssertionTargetxpathOutput
	ToSyntheticsTestAssertionTargetxpathOutputWithContext(context.Context) SyntheticsTestAssertionTargetxpathOutput
}

type SyntheticsTestAssertionTargetxpathArgs struct {
	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	Operator pulumi.StringInput `pulumi:"operator"`
	// Expected matching value.
	Targetvalue pulumi.StringPtrInput `pulumi:"targetvalue"`
	// The xpath to assert.
	Xpath pulumi.StringInput `pulumi:"xpath"`
}

func (SyntheticsTestAssertionTargetxpathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestAssertionTargetxpath)(nil)).Elem()
}

func (i SyntheticsTestAssertionTargetxpathArgs) ToSyntheticsTestAssertionTargetxpathOutput() SyntheticsTestAssertionTargetxpathOutput {
	return i.ToSyntheticsTestAssertionTargetxpathOutputWithContext(context.Background())
}

func (i SyntheticsTestAssertionTargetxpathArgs) ToSyntheticsTestAssertionTargetxpathOutputWithContext(ctx context.Context) SyntheticsTestAssertionTargetxpathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestAssertionTargetxpathOutput)
}

func (i SyntheticsTestAssertionTargetxpathArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestAssertionTargetxpath] {
	return pulumix.Output[SyntheticsTestAssertionTargetxpath]{
		OutputState: i.ToSyntheticsTestAssertionTargetxpathOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestAssertionTargetxpathArgs) ToSyntheticsTestAssertionTargetxpathPtrOutput() SyntheticsTestAssertionTargetxpathPtrOutput {
	return i.ToSyntheticsTestAssertionTargetxpathPtrOutputWithContext(context.Background())
}

func (i SyntheticsTestAssertionTargetxpathArgs) ToSyntheticsTestAssertionTargetxpathPtrOutputWithContext(ctx context.Context) SyntheticsTestAssertionTargetxpathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestAssertionTargetxpathOutput).ToSyntheticsTestAssertionTargetxpathPtrOutputWithContext(ctx)
}

// SyntheticsTestAssertionTargetxpathPtrInput is an input type that accepts SyntheticsTestAssertionTargetxpathArgs, SyntheticsTestAssertionTargetxpathPtr and SyntheticsTestAssertionTargetxpathPtrOutput values.
// You can construct a concrete instance of `SyntheticsTestAssertionTargetxpathPtrInput` via:
//
//	        SyntheticsTestAssertionTargetxpathArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestAssertionTargetxpathPtrInput interface {
	pulumi.Input

	ToSyntheticsTestAssertionTargetxpathPtrOutput() SyntheticsTestAssertionTargetxpathPtrOutput
	ToSyntheticsTestAssertionTargetxpathPtrOutputWithContext(context.Context) SyntheticsTestAssertionTargetxpathPtrOutput
}

type syntheticsTestAssertionTargetxpathPtrType SyntheticsTestAssertionTargetxpathArgs

func SyntheticsTestAssertionTargetxpathPtr(v *SyntheticsTestAssertionTargetxpathArgs) SyntheticsTestAssertionTargetxpathPtrInput {
	return (*syntheticsTestAssertionTargetxpathPtrType)(v)
}

func (*syntheticsTestAssertionTargetxpathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestAssertionTargetxpath)(nil)).Elem()
}

func (i *syntheticsTestAssertionTargetxpathPtrType) ToSyntheticsTestAssertionTargetxpathPtrOutput() SyntheticsTestAssertionTargetxpathPtrOutput {
	return i.ToSyntheticsTestAssertionTargetxpathPtrOutputWithContext(context.Background())
}

func (i *syntheticsTestAssertionTargetxpathPtrType) ToSyntheticsTestAssertionTargetxpathPtrOutputWithContext(ctx context.Context) SyntheticsTestAssertionTargetxpathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestAssertionTargetxpathPtrOutput)
}

func (i *syntheticsTestAssertionTargetxpathPtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestAssertionTargetxpath] {
	return pulumix.Output[*SyntheticsTestAssertionTargetxpath]{
		OutputState: i.ToSyntheticsTestAssertionTargetxpathPtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestAssertionTargetxpathOutput struct{ *pulumi.OutputState }

func (SyntheticsTestAssertionTargetxpathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestAssertionTargetxpath)(nil)).Elem()
}

func (o SyntheticsTestAssertionTargetxpathOutput) ToSyntheticsTestAssertionTargetxpathOutput() SyntheticsTestAssertionTargetxpathOutput {
	return o
}

func (o SyntheticsTestAssertionTargetxpathOutput) ToSyntheticsTestAssertionTargetxpathOutputWithContext(ctx context.Context) SyntheticsTestAssertionTargetxpathOutput {
	return o
}

func (o SyntheticsTestAssertionTargetxpathOutput) ToSyntheticsTestAssertionTargetxpathPtrOutput() SyntheticsTestAssertionTargetxpathPtrOutput {
	return o.ToSyntheticsTestAssertionTargetxpathPtrOutputWithContext(context.Background())
}

func (o SyntheticsTestAssertionTargetxpathOutput) ToSyntheticsTestAssertionTargetxpathPtrOutputWithContext(ctx context.Context) SyntheticsTestAssertionTargetxpathPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestAssertionTargetxpath) *SyntheticsTestAssertionTargetxpath {
		return &v
	}).(SyntheticsTestAssertionTargetxpathPtrOutput)
}

func (o SyntheticsTestAssertionTargetxpathOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestAssertionTargetxpath] {
	return pulumix.Output[SyntheticsTestAssertionTargetxpath]{
		OutputState: o.OutputState,
	}
}

// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
func (o SyntheticsTestAssertionTargetxpathOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestAssertionTargetxpath) string { return v.Operator }).(pulumi.StringOutput)
}

// Expected matching value.
func (o SyntheticsTestAssertionTargetxpathOutput) Targetvalue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestAssertionTargetxpath) *string { return v.Targetvalue }).(pulumi.StringPtrOutput)
}

// The xpath to assert.
func (o SyntheticsTestAssertionTargetxpathOutput) Xpath() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestAssertionTargetxpath) string { return v.Xpath }).(pulumi.StringOutput)
}

type SyntheticsTestAssertionTargetxpathPtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestAssertionTargetxpathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestAssertionTargetxpath)(nil)).Elem()
}

func (o SyntheticsTestAssertionTargetxpathPtrOutput) ToSyntheticsTestAssertionTargetxpathPtrOutput() SyntheticsTestAssertionTargetxpathPtrOutput {
	return o
}

func (o SyntheticsTestAssertionTargetxpathPtrOutput) ToSyntheticsTestAssertionTargetxpathPtrOutputWithContext(ctx context.Context) SyntheticsTestAssertionTargetxpathPtrOutput {
	return o
}

func (o SyntheticsTestAssertionTargetxpathPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestAssertionTargetxpath] {
	return pulumix.Output[*SyntheticsTestAssertionTargetxpath]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestAssertionTargetxpathPtrOutput) Elem() SyntheticsTestAssertionTargetxpathOutput {
	return o.ApplyT(func(v *SyntheticsTestAssertionTargetxpath) SyntheticsTestAssertionTargetxpath {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestAssertionTargetxpath
		return ret
	}).(SyntheticsTestAssertionTargetxpathOutput)
}

// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
func (o SyntheticsTestAssertionTargetxpathPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestAssertionTargetxpath) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Expected matching value.
func (o SyntheticsTestAssertionTargetxpathPtrOutput) Targetvalue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestAssertionTargetxpath) *string {
		if v == nil {
			return nil
		}
		return v.Targetvalue
	}).(pulumi.StringPtrOutput)
}

// The xpath to assert.
func (o SyntheticsTestAssertionTargetxpathPtrOutput) Xpath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestAssertionTargetxpath) *string {
		if v == nil {
			return nil
		}
		return &v.Xpath
	}).(pulumi.StringPtrOutput)
}

type SyntheticsTestBrowserStep struct {
	// Determines if the step should be allowed to fail.
	AllowFailure *bool `pulumi:"allowFailure"`
	// Force update of the "element" parameter for the step
	ForceElementUpdate *bool `pulumi:"forceElementUpdate"`
	// Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allowFailure` is `true`.
	IsCritical *bool `pulumi:"isCritical"`
	// Name of the step.
	Name string `pulumi:"name"`
	// Prevents saving screenshots of the step.
	NoScreenshot *bool `pulumi:"noScreenshot"`
	// Parameters for the step.
	Params SyntheticsTestBrowserStepParams `pulumi:"params"`
	// Used to override the default timeout of a step.
	Timeout *int `pulumi:"timeout"`
	// Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.
	Type string `pulumi:"type"`
}

// SyntheticsTestBrowserStepInput is an input type that accepts SyntheticsTestBrowserStepArgs and SyntheticsTestBrowserStepOutput values.
// You can construct a concrete instance of `SyntheticsTestBrowserStepInput` via:
//
//	SyntheticsTestBrowserStepArgs{...}
type SyntheticsTestBrowserStepInput interface {
	pulumi.Input

	ToSyntheticsTestBrowserStepOutput() SyntheticsTestBrowserStepOutput
	ToSyntheticsTestBrowserStepOutputWithContext(context.Context) SyntheticsTestBrowserStepOutput
}

type SyntheticsTestBrowserStepArgs struct {
	// Determines if the step should be allowed to fail.
	AllowFailure pulumi.BoolPtrInput `pulumi:"allowFailure"`
	// Force update of the "element" parameter for the step
	ForceElementUpdate pulumi.BoolPtrInput `pulumi:"forceElementUpdate"`
	// Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allowFailure` is `true`.
	IsCritical pulumi.BoolPtrInput `pulumi:"isCritical"`
	// Name of the step.
	Name pulumi.StringInput `pulumi:"name"`
	// Prevents saving screenshots of the step.
	NoScreenshot pulumi.BoolPtrInput `pulumi:"noScreenshot"`
	// Parameters for the step.
	Params SyntheticsTestBrowserStepParamsInput `pulumi:"params"`
	// Used to override the default timeout of a step.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SyntheticsTestBrowserStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestBrowserStep)(nil)).Elem()
}

func (i SyntheticsTestBrowserStepArgs) ToSyntheticsTestBrowserStepOutput() SyntheticsTestBrowserStepOutput {
	return i.ToSyntheticsTestBrowserStepOutputWithContext(context.Background())
}

func (i SyntheticsTestBrowserStepArgs) ToSyntheticsTestBrowserStepOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestBrowserStepOutput)
}

func (i SyntheticsTestBrowserStepArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestBrowserStep] {
	return pulumix.Output[SyntheticsTestBrowserStep]{
		OutputState: i.ToSyntheticsTestBrowserStepOutputWithContext(ctx).OutputState,
	}
}

// SyntheticsTestBrowserStepArrayInput is an input type that accepts SyntheticsTestBrowserStepArray and SyntheticsTestBrowserStepArrayOutput values.
// You can construct a concrete instance of `SyntheticsTestBrowserStepArrayInput` via:
//
//	SyntheticsTestBrowserStepArray{ SyntheticsTestBrowserStepArgs{...} }
type SyntheticsTestBrowserStepArrayInput interface {
	pulumi.Input

	ToSyntheticsTestBrowserStepArrayOutput() SyntheticsTestBrowserStepArrayOutput
	ToSyntheticsTestBrowserStepArrayOutputWithContext(context.Context) SyntheticsTestBrowserStepArrayOutput
}

type SyntheticsTestBrowserStepArray []SyntheticsTestBrowserStepInput

func (SyntheticsTestBrowserStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticsTestBrowserStep)(nil)).Elem()
}

func (i SyntheticsTestBrowserStepArray) ToSyntheticsTestBrowserStepArrayOutput() SyntheticsTestBrowserStepArrayOutput {
	return i.ToSyntheticsTestBrowserStepArrayOutputWithContext(context.Background())
}

func (i SyntheticsTestBrowserStepArray) ToSyntheticsTestBrowserStepArrayOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestBrowserStepArrayOutput)
}

func (i SyntheticsTestBrowserStepArray) ToOutput(ctx context.Context) pulumix.Output[[]SyntheticsTestBrowserStep] {
	return pulumix.Output[[]SyntheticsTestBrowserStep]{
		OutputState: i.ToSyntheticsTestBrowserStepArrayOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestBrowserStepOutput struct{ *pulumi.OutputState }

func (SyntheticsTestBrowserStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestBrowserStep)(nil)).Elem()
}

func (o SyntheticsTestBrowserStepOutput) ToSyntheticsTestBrowserStepOutput() SyntheticsTestBrowserStepOutput {
	return o
}

func (o SyntheticsTestBrowserStepOutput) ToSyntheticsTestBrowserStepOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepOutput {
	return o
}

func (o SyntheticsTestBrowserStepOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestBrowserStep] {
	return pulumix.Output[SyntheticsTestBrowserStep]{
		OutputState: o.OutputState,
	}
}

// Determines if the step should be allowed to fail.
func (o SyntheticsTestBrowserStepOutput) AllowFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStep) *bool { return v.AllowFailure }).(pulumi.BoolPtrOutput)
}

// Force update of the "element" parameter for the step
func (o SyntheticsTestBrowserStepOutput) ForceElementUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStep) *bool { return v.ForceElementUpdate }).(pulumi.BoolPtrOutput)
}

// Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allowFailure` is `true`.
func (o SyntheticsTestBrowserStepOutput) IsCritical() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStep) *bool { return v.IsCritical }).(pulumi.BoolPtrOutput)
}

// Name of the step.
func (o SyntheticsTestBrowserStepOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStep) string { return v.Name }).(pulumi.StringOutput)
}

// Prevents saving screenshots of the step.
func (o SyntheticsTestBrowserStepOutput) NoScreenshot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStep) *bool { return v.NoScreenshot }).(pulumi.BoolPtrOutput)
}

// Parameters for the step.
func (o SyntheticsTestBrowserStepOutput) Params() SyntheticsTestBrowserStepParamsOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStep) SyntheticsTestBrowserStepParams { return v.Params }).(SyntheticsTestBrowserStepParamsOutput)
}

// Used to override the default timeout of a step.
func (o SyntheticsTestBrowserStepOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStep) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.
func (o SyntheticsTestBrowserStepOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStep) string { return v.Type }).(pulumi.StringOutput)
}

type SyntheticsTestBrowserStepArrayOutput struct{ *pulumi.OutputState }

func (SyntheticsTestBrowserStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticsTestBrowserStep)(nil)).Elem()
}

func (o SyntheticsTestBrowserStepArrayOutput) ToSyntheticsTestBrowserStepArrayOutput() SyntheticsTestBrowserStepArrayOutput {
	return o
}

func (o SyntheticsTestBrowserStepArrayOutput) ToSyntheticsTestBrowserStepArrayOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepArrayOutput {
	return o
}

func (o SyntheticsTestBrowserStepArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SyntheticsTestBrowserStep] {
	return pulumix.Output[[]SyntheticsTestBrowserStep]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestBrowserStepArrayOutput) Index(i pulumi.IntInput) SyntheticsTestBrowserStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticsTestBrowserStep {
		return vs[0].([]SyntheticsTestBrowserStep)[vs[1].(int)]
	}).(SyntheticsTestBrowserStepOutput)
}

type SyntheticsTestBrowserStepParams struct {
	// Name of the attribute to use for an "assert attribute" step.
	Attribute *string `pulumi:"attribute"`
	// Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.
	Check *string `pulumi:"check"`
	// Type of click to use for a "click" step.
	ClickType *string `pulumi:"clickType"`
	// Javascript code to use for the step.
	Code *string `pulumi:"code"`
	// Delay between each key stroke for a "type test" step.
	Delay *int `pulumi:"delay"`
	// Element to use for the step, json encoded string.
	Element *string `pulumi:"element"`
	// Custom user selector to use for the step.
	ElementUserLocator *SyntheticsTestBrowserStepParamsElementUserLocator `pulumi:"elementUserLocator"`
	// Details of the email for an "assert email" step.
	Email *string `pulumi:"email"`
	// For an "assert download" step.
	File *string `pulumi:"file"`
	// Details of the files for an "upload files" step, json encoded string.
	Files *string `pulumi:"files"`
	// Modifier to use for a "press key" step.
	Modifiers []string `pulumi:"modifiers"`
	// ID of the tab to play the subtest.
	PlayingTabId *string `pulumi:"playingTabId"`
	// Request for an API step.
	Request *string `pulumi:"request"`
	// ID of the Synthetics test to use as subtest.
	SubtestPublicId *string `pulumi:"subtestPublicId"`
	// Regex or JSON path used for the parser. Not used with type `raw`.
	Value *string `pulumi:"value"`
	// Details of the variable to extract.
	Variable *SyntheticsTestBrowserStepParamsVariable `pulumi:"variable"`
	// For "file upload" steps.
	WithClick *bool `pulumi:"withClick"`
	// X coordinates for a "scroll step".
	X *int `pulumi:"x"`
	// Y coordinates for a "scroll step".
	Y *int `pulumi:"y"`
}

// SyntheticsTestBrowserStepParamsInput is an input type that accepts SyntheticsTestBrowserStepParamsArgs and SyntheticsTestBrowserStepParamsOutput values.
// You can construct a concrete instance of `SyntheticsTestBrowserStepParamsInput` via:
//
//	SyntheticsTestBrowserStepParamsArgs{...}
type SyntheticsTestBrowserStepParamsInput interface {
	pulumi.Input

	ToSyntheticsTestBrowserStepParamsOutput() SyntheticsTestBrowserStepParamsOutput
	ToSyntheticsTestBrowserStepParamsOutputWithContext(context.Context) SyntheticsTestBrowserStepParamsOutput
}

type SyntheticsTestBrowserStepParamsArgs struct {
	// Name of the attribute to use for an "assert attribute" step.
	Attribute pulumi.StringPtrInput `pulumi:"attribute"`
	// Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.
	Check pulumi.StringPtrInput `pulumi:"check"`
	// Type of click to use for a "click" step.
	ClickType pulumi.StringPtrInput `pulumi:"clickType"`
	// Javascript code to use for the step.
	Code pulumi.StringPtrInput `pulumi:"code"`
	// Delay between each key stroke for a "type test" step.
	Delay pulumi.IntPtrInput `pulumi:"delay"`
	// Element to use for the step, json encoded string.
	Element pulumi.StringPtrInput `pulumi:"element"`
	// Custom user selector to use for the step.
	ElementUserLocator SyntheticsTestBrowserStepParamsElementUserLocatorPtrInput `pulumi:"elementUserLocator"`
	// Details of the email for an "assert email" step.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// For an "assert download" step.
	File pulumi.StringPtrInput `pulumi:"file"`
	// Details of the files for an "upload files" step, json encoded string.
	Files pulumi.StringPtrInput `pulumi:"files"`
	// Modifier to use for a "press key" step.
	Modifiers pulumi.StringArrayInput `pulumi:"modifiers"`
	// ID of the tab to play the subtest.
	PlayingTabId pulumi.StringPtrInput `pulumi:"playingTabId"`
	// Request for an API step.
	Request pulumi.StringPtrInput `pulumi:"request"`
	// ID of the Synthetics test to use as subtest.
	SubtestPublicId pulumi.StringPtrInput `pulumi:"subtestPublicId"`
	// Regex or JSON path used for the parser. Not used with type `raw`.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Details of the variable to extract.
	Variable SyntheticsTestBrowserStepParamsVariablePtrInput `pulumi:"variable"`
	// For "file upload" steps.
	WithClick pulumi.BoolPtrInput `pulumi:"withClick"`
	// X coordinates for a "scroll step".
	X pulumi.IntPtrInput `pulumi:"x"`
	// Y coordinates for a "scroll step".
	Y pulumi.IntPtrInput `pulumi:"y"`
}

func (SyntheticsTestBrowserStepParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestBrowserStepParams)(nil)).Elem()
}

func (i SyntheticsTestBrowserStepParamsArgs) ToSyntheticsTestBrowserStepParamsOutput() SyntheticsTestBrowserStepParamsOutput {
	return i.ToSyntheticsTestBrowserStepParamsOutputWithContext(context.Background())
}

func (i SyntheticsTestBrowserStepParamsArgs) ToSyntheticsTestBrowserStepParamsOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestBrowserStepParamsOutput)
}

func (i SyntheticsTestBrowserStepParamsArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestBrowserStepParams] {
	return pulumix.Output[SyntheticsTestBrowserStepParams]{
		OutputState: i.ToSyntheticsTestBrowserStepParamsOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestBrowserStepParamsOutput struct{ *pulumi.OutputState }

func (SyntheticsTestBrowserStepParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestBrowserStepParams)(nil)).Elem()
}

func (o SyntheticsTestBrowserStepParamsOutput) ToSyntheticsTestBrowserStepParamsOutput() SyntheticsTestBrowserStepParamsOutput {
	return o
}

func (o SyntheticsTestBrowserStepParamsOutput) ToSyntheticsTestBrowserStepParamsOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsOutput {
	return o
}

func (o SyntheticsTestBrowserStepParamsOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestBrowserStepParams] {
	return pulumix.Output[SyntheticsTestBrowserStepParams]{
		OutputState: o.OutputState,
	}
}

// Name of the attribute to use for an "assert attribute" step.
func (o SyntheticsTestBrowserStepParamsOutput) Attribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *string { return v.Attribute }).(pulumi.StringPtrOutput)
}

// Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.
func (o SyntheticsTestBrowserStepParamsOutput) Check() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *string { return v.Check }).(pulumi.StringPtrOutput)
}

// Type of click to use for a "click" step.
func (o SyntheticsTestBrowserStepParamsOutput) ClickType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *string { return v.ClickType }).(pulumi.StringPtrOutput)
}

// Javascript code to use for the step.
func (o SyntheticsTestBrowserStepParamsOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// Delay between each key stroke for a "type test" step.
func (o SyntheticsTestBrowserStepParamsOutput) Delay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *int { return v.Delay }).(pulumi.IntPtrOutput)
}

// Element to use for the step, json encoded string.
func (o SyntheticsTestBrowserStepParamsOutput) Element() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *string { return v.Element }).(pulumi.StringPtrOutput)
}

// Custom user selector to use for the step.
func (o SyntheticsTestBrowserStepParamsOutput) ElementUserLocator() SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *SyntheticsTestBrowserStepParamsElementUserLocator {
		return v.ElementUserLocator
	}).(SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput)
}

// Details of the email for an "assert email" step.
func (o SyntheticsTestBrowserStepParamsOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// For an "assert download" step.
func (o SyntheticsTestBrowserStepParamsOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *string { return v.File }).(pulumi.StringPtrOutput)
}

// Details of the files for an "upload files" step, json encoded string.
func (o SyntheticsTestBrowserStepParamsOutput) Files() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *string { return v.Files }).(pulumi.StringPtrOutput)
}

// Modifier to use for a "press key" step.
func (o SyntheticsTestBrowserStepParamsOutput) Modifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) []string { return v.Modifiers }).(pulumi.StringArrayOutput)
}

// ID of the tab to play the subtest.
func (o SyntheticsTestBrowserStepParamsOutput) PlayingTabId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *string { return v.PlayingTabId }).(pulumi.StringPtrOutput)
}

// Request for an API step.
func (o SyntheticsTestBrowserStepParamsOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *string { return v.Request }).(pulumi.StringPtrOutput)
}

// ID of the Synthetics test to use as subtest.
func (o SyntheticsTestBrowserStepParamsOutput) SubtestPublicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *string { return v.SubtestPublicId }).(pulumi.StringPtrOutput)
}

// Regex or JSON path used for the parser. Not used with type `raw`.
func (o SyntheticsTestBrowserStepParamsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Details of the variable to extract.
func (o SyntheticsTestBrowserStepParamsOutput) Variable() SyntheticsTestBrowserStepParamsVariablePtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *SyntheticsTestBrowserStepParamsVariable { return v.Variable }).(SyntheticsTestBrowserStepParamsVariablePtrOutput)
}

// For "file upload" steps.
func (o SyntheticsTestBrowserStepParamsOutput) WithClick() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *bool { return v.WithClick }).(pulumi.BoolPtrOutput)
}

// X coordinates for a "scroll step".
func (o SyntheticsTestBrowserStepParamsOutput) X() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *int { return v.X }).(pulumi.IntPtrOutput)
}

// Y coordinates for a "scroll step".
func (o SyntheticsTestBrowserStepParamsOutput) Y() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParams) *int { return v.Y }).(pulumi.IntPtrOutput)
}

type SyntheticsTestBrowserStepParamsElementUserLocator struct {
	// Defaults to `false`.
	FailTestOnCannotLocate *bool `pulumi:"failTestOnCannotLocate"`
	// Regex or JSON path used for the parser. Not used with type `raw`.
	Value SyntheticsTestBrowserStepParamsElementUserLocatorValue `pulumi:"value"`
}

// SyntheticsTestBrowserStepParamsElementUserLocatorInput is an input type that accepts SyntheticsTestBrowserStepParamsElementUserLocatorArgs and SyntheticsTestBrowserStepParamsElementUserLocatorOutput values.
// You can construct a concrete instance of `SyntheticsTestBrowserStepParamsElementUserLocatorInput` via:
//
//	SyntheticsTestBrowserStepParamsElementUserLocatorArgs{...}
type SyntheticsTestBrowserStepParamsElementUserLocatorInput interface {
	pulumi.Input

	ToSyntheticsTestBrowserStepParamsElementUserLocatorOutput() SyntheticsTestBrowserStepParamsElementUserLocatorOutput
	ToSyntheticsTestBrowserStepParamsElementUserLocatorOutputWithContext(context.Context) SyntheticsTestBrowserStepParamsElementUserLocatorOutput
}

type SyntheticsTestBrowserStepParamsElementUserLocatorArgs struct {
	// Defaults to `false`.
	FailTestOnCannotLocate pulumi.BoolPtrInput `pulumi:"failTestOnCannotLocate"`
	// Regex or JSON path used for the parser. Not used with type `raw`.
	Value SyntheticsTestBrowserStepParamsElementUserLocatorValueInput `pulumi:"value"`
}

func (SyntheticsTestBrowserStepParamsElementUserLocatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestBrowserStepParamsElementUserLocator)(nil)).Elem()
}

func (i SyntheticsTestBrowserStepParamsElementUserLocatorArgs) ToSyntheticsTestBrowserStepParamsElementUserLocatorOutput() SyntheticsTestBrowserStepParamsElementUserLocatorOutput {
	return i.ToSyntheticsTestBrowserStepParamsElementUserLocatorOutputWithContext(context.Background())
}

func (i SyntheticsTestBrowserStepParamsElementUserLocatorArgs) ToSyntheticsTestBrowserStepParamsElementUserLocatorOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsElementUserLocatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestBrowserStepParamsElementUserLocatorOutput)
}

func (i SyntheticsTestBrowserStepParamsElementUserLocatorArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestBrowserStepParamsElementUserLocator] {
	return pulumix.Output[SyntheticsTestBrowserStepParamsElementUserLocator]{
		OutputState: i.ToSyntheticsTestBrowserStepParamsElementUserLocatorOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestBrowserStepParamsElementUserLocatorArgs) ToSyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput() SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput {
	return i.ToSyntheticsTestBrowserStepParamsElementUserLocatorPtrOutputWithContext(context.Background())
}

func (i SyntheticsTestBrowserStepParamsElementUserLocatorArgs) ToSyntheticsTestBrowserStepParamsElementUserLocatorPtrOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestBrowserStepParamsElementUserLocatorOutput).ToSyntheticsTestBrowserStepParamsElementUserLocatorPtrOutputWithContext(ctx)
}

// SyntheticsTestBrowserStepParamsElementUserLocatorPtrInput is an input type that accepts SyntheticsTestBrowserStepParamsElementUserLocatorArgs, SyntheticsTestBrowserStepParamsElementUserLocatorPtr and SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput values.
// You can construct a concrete instance of `SyntheticsTestBrowserStepParamsElementUserLocatorPtrInput` via:
//
//	        SyntheticsTestBrowserStepParamsElementUserLocatorArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestBrowserStepParamsElementUserLocatorPtrInput interface {
	pulumi.Input

	ToSyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput() SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput
	ToSyntheticsTestBrowserStepParamsElementUserLocatorPtrOutputWithContext(context.Context) SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput
}

type syntheticsTestBrowserStepParamsElementUserLocatorPtrType SyntheticsTestBrowserStepParamsElementUserLocatorArgs

func SyntheticsTestBrowserStepParamsElementUserLocatorPtr(v *SyntheticsTestBrowserStepParamsElementUserLocatorArgs) SyntheticsTestBrowserStepParamsElementUserLocatorPtrInput {
	return (*syntheticsTestBrowserStepParamsElementUserLocatorPtrType)(v)
}

func (*syntheticsTestBrowserStepParamsElementUserLocatorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestBrowserStepParamsElementUserLocator)(nil)).Elem()
}

func (i *syntheticsTestBrowserStepParamsElementUserLocatorPtrType) ToSyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput() SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput {
	return i.ToSyntheticsTestBrowserStepParamsElementUserLocatorPtrOutputWithContext(context.Background())
}

func (i *syntheticsTestBrowserStepParamsElementUserLocatorPtrType) ToSyntheticsTestBrowserStepParamsElementUserLocatorPtrOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput)
}

func (i *syntheticsTestBrowserStepParamsElementUserLocatorPtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestBrowserStepParamsElementUserLocator] {
	return pulumix.Output[*SyntheticsTestBrowserStepParamsElementUserLocator]{
		OutputState: i.ToSyntheticsTestBrowserStepParamsElementUserLocatorPtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestBrowserStepParamsElementUserLocatorOutput struct{ *pulumi.OutputState }

func (SyntheticsTestBrowserStepParamsElementUserLocatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestBrowserStepParamsElementUserLocator)(nil)).Elem()
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorOutput) ToSyntheticsTestBrowserStepParamsElementUserLocatorOutput() SyntheticsTestBrowserStepParamsElementUserLocatorOutput {
	return o
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorOutput) ToSyntheticsTestBrowserStepParamsElementUserLocatorOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsElementUserLocatorOutput {
	return o
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorOutput) ToSyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput() SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput {
	return o.ToSyntheticsTestBrowserStepParamsElementUserLocatorPtrOutputWithContext(context.Background())
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorOutput) ToSyntheticsTestBrowserStepParamsElementUserLocatorPtrOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestBrowserStepParamsElementUserLocator) *SyntheticsTestBrowserStepParamsElementUserLocator {
		return &v
	}).(SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput)
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestBrowserStepParamsElementUserLocator] {
	return pulumix.Output[SyntheticsTestBrowserStepParamsElementUserLocator]{
		OutputState: o.OutputState,
	}
}

// Defaults to `false`.
func (o SyntheticsTestBrowserStepParamsElementUserLocatorOutput) FailTestOnCannotLocate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParamsElementUserLocator) *bool { return v.FailTestOnCannotLocate }).(pulumi.BoolPtrOutput)
}

// Regex or JSON path used for the parser. Not used with type `raw`.
func (o SyntheticsTestBrowserStepParamsElementUserLocatorOutput) Value() SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParamsElementUserLocator) SyntheticsTestBrowserStepParamsElementUserLocatorValue {
		return v.Value
	}).(SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput)
}

type SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestBrowserStepParamsElementUserLocator)(nil)).Elem()
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput) ToSyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput() SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput {
	return o
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput) ToSyntheticsTestBrowserStepParamsElementUserLocatorPtrOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput {
	return o
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestBrowserStepParamsElementUserLocator] {
	return pulumix.Output[*SyntheticsTestBrowserStepParamsElementUserLocator]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput) Elem() SyntheticsTestBrowserStepParamsElementUserLocatorOutput {
	return o.ApplyT(func(v *SyntheticsTestBrowserStepParamsElementUserLocator) SyntheticsTestBrowserStepParamsElementUserLocator {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestBrowserStepParamsElementUserLocator
		return ret
	}).(SyntheticsTestBrowserStepParamsElementUserLocatorOutput)
}

// Defaults to `false`.
func (o SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput) FailTestOnCannotLocate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestBrowserStepParamsElementUserLocator) *bool {
		if v == nil {
			return nil
		}
		return v.FailTestOnCannotLocate
	}).(pulumi.BoolPtrOutput)
}

// Regex or JSON path used for the parser. Not used with type `raw`.
func (o SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput) Value() SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput {
	return o.ApplyT(func(v *SyntheticsTestBrowserStepParamsElementUserLocator) *SyntheticsTestBrowserStepParamsElementUserLocatorValue {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput)
}

type SyntheticsTestBrowserStepParamsElementUserLocatorValue struct {
	// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
	Type *string `pulumi:"type"`
	// Regex or JSON path used for the parser. Not used with type `raw`.
	Value string `pulumi:"value"`
}

// SyntheticsTestBrowserStepParamsElementUserLocatorValueInput is an input type that accepts SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs and SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput values.
// You can construct a concrete instance of `SyntheticsTestBrowserStepParamsElementUserLocatorValueInput` via:
//
//	SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs{...}
type SyntheticsTestBrowserStepParamsElementUserLocatorValueInput interface {
	pulumi.Input

	ToSyntheticsTestBrowserStepParamsElementUserLocatorValueOutput() SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput
	ToSyntheticsTestBrowserStepParamsElementUserLocatorValueOutputWithContext(context.Context) SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput
}

type SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs struct {
	// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Regex or JSON path used for the parser. Not used with type `raw`.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestBrowserStepParamsElementUserLocatorValue)(nil)).Elem()
}

func (i SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs) ToSyntheticsTestBrowserStepParamsElementUserLocatorValueOutput() SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput {
	return i.ToSyntheticsTestBrowserStepParamsElementUserLocatorValueOutputWithContext(context.Background())
}

func (i SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs) ToSyntheticsTestBrowserStepParamsElementUserLocatorValueOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput)
}

func (i SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestBrowserStepParamsElementUserLocatorValue] {
	return pulumix.Output[SyntheticsTestBrowserStepParamsElementUserLocatorValue]{
		OutputState: i.ToSyntheticsTestBrowserStepParamsElementUserLocatorValueOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs) ToSyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput() SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput {
	return i.ToSyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutputWithContext(context.Background())
}

func (i SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs) ToSyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput).ToSyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutputWithContext(ctx)
}

// SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrInput is an input type that accepts SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs, SyntheticsTestBrowserStepParamsElementUserLocatorValuePtr and SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput values.
// You can construct a concrete instance of `SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrInput` via:
//
//	        SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrInput interface {
	pulumi.Input

	ToSyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput() SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput
	ToSyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutputWithContext(context.Context) SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput
}

type syntheticsTestBrowserStepParamsElementUserLocatorValuePtrType SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs

func SyntheticsTestBrowserStepParamsElementUserLocatorValuePtr(v *SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs) SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrInput {
	return (*syntheticsTestBrowserStepParamsElementUserLocatorValuePtrType)(v)
}

func (*syntheticsTestBrowserStepParamsElementUserLocatorValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestBrowserStepParamsElementUserLocatorValue)(nil)).Elem()
}

func (i *syntheticsTestBrowserStepParamsElementUserLocatorValuePtrType) ToSyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput() SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput {
	return i.ToSyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutputWithContext(context.Background())
}

func (i *syntheticsTestBrowserStepParamsElementUserLocatorValuePtrType) ToSyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput)
}

func (i *syntheticsTestBrowserStepParamsElementUserLocatorValuePtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestBrowserStepParamsElementUserLocatorValue] {
	return pulumix.Output[*SyntheticsTestBrowserStepParamsElementUserLocatorValue]{
		OutputState: i.ToSyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput struct{ *pulumi.OutputState }

func (SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestBrowserStepParamsElementUserLocatorValue)(nil)).Elem()
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput) ToSyntheticsTestBrowserStepParamsElementUserLocatorValueOutput() SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput {
	return o
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput) ToSyntheticsTestBrowserStepParamsElementUserLocatorValueOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput {
	return o
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput) ToSyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput() SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput {
	return o.ToSyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutputWithContext(context.Background())
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput) ToSyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestBrowserStepParamsElementUserLocatorValue) *SyntheticsTestBrowserStepParamsElementUserLocatorValue {
		return &v
	}).(SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput)
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestBrowserStepParamsElementUserLocatorValue] {
	return pulumix.Output[SyntheticsTestBrowserStepParamsElementUserLocatorValue]{
		OutputState: o.OutputState,
	}
}

// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
func (o SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParamsElementUserLocatorValue) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Regex or JSON path used for the parser. Not used with type `raw`.
func (o SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParamsElementUserLocatorValue) string { return v.Value }).(pulumi.StringOutput)
}

type SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestBrowserStepParamsElementUserLocatorValue)(nil)).Elem()
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput) ToSyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput() SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput {
	return o
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput) ToSyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput {
	return o
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestBrowserStepParamsElementUserLocatorValue] {
	return pulumix.Output[*SyntheticsTestBrowserStepParamsElementUserLocatorValue]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput) Elem() SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput {
	return o.ApplyT(func(v *SyntheticsTestBrowserStepParamsElementUserLocatorValue) SyntheticsTestBrowserStepParamsElementUserLocatorValue {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestBrowserStepParamsElementUserLocatorValue
		return ret
	}).(SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput)
}

// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
func (o SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestBrowserStepParamsElementUserLocatorValue) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Regex or JSON path used for the parser. Not used with type `raw`.
func (o SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestBrowserStepParamsElementUserLocatorValue) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

type SyntheticsTestBrowserStepParamsVariable struct {
	// Example of the extracted variable. Defaults to `""`.
	Example *string `pulumi:"example"`
	Name    *string `pulumi:"name"`
}

// SyntheticsTestBrowserStepParamsVariableInput is an input type that accepts SyntheticsTestBrowserStepParamsVariableArgs and SyntheticsTestBrowserStepParamsVariableOutput values.
// You can construct a concrete instance of `SyntheticsTestBrowserStepParamsVariableInput` via:
//
//	SyntheticsTestBrowserStepParamsVariableArgs{...}
type SyntheticsTestBrowserStepParamsVariableInput interface {
	pulumi.Input

	ToSyntheticsTestBrowserStepParamsVariableOutput() SyntheticsTestBrowserStepParamsVariableOutput
	ToSyntheticsTestBrowserStepParamsVariableOutputWithContext(context.Context) SyntheticsTestBrowserStepParamsVariableOutput
}

type SyntheticsTestBrowserStepParamsVariableArgs struct {
	// Example of the extracted variable. Defaults to `""`.
	Example pulumi.StringPtrInput `pulumi:"example"`
	Name    pulumi.StringPtrInput `pulumi:"name"`
}

func (SyntheticsTestBrowserStepParamsVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestBrowserStepParamsVariable)(nil)).Elem()
}

func (i SyntheticsTestBrowserStepParamsVariableArgs) ToSyntheticsTestBrowserStepParamsVariableOutput() SyntheticsTestBrowserStepParamsVariableOutput {
	return i.ToSyntheticsTestBrowserStepParamsVariableOutputWithContext(context.Background())
}

func (i SyntheticsTestBrowserStepParamsVariableArgs) ToSyntheticsTestBrowserStepParamsVariableOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestBrowserStepParamsVariableOutput)
}

func (i SyntheticsTestBrowserStepParamsVariableArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestBrowserStepParamsVariable] {
	return pulumix.Output[SyntheticsTestBrowserStepParamsVariable]{
		OutputState: i.ToSyntheticsTestBrowserStepParamsVariableOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestBrowserStepParamsVariableArgs) ToSyntheticsTestBrowserStepParamsVariablePtrOutput() SyntheticsTestBrowserStepParamsVariablePtrOutput {
	return i.ToSyntheticsTestBrowserStepParamsVariablePtrOutputWithContext(context.Background())
}

func (i SyntheticsTestBrowserStepParamsVariableArgs) ToSyntheticsTestBrowserStepParamsVariablePtrOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsVariablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestBrowserStepParamsVariableOutput).ToSyntheticsTestBrowserStepParamsVariablePtrOutputWithContext(ctx)
}

// SyntheticsTestBrowserStepParamsVariablePtrInput is an input type that accepts SyntheticsTestBrowserStepParamsVariableArgs, SyntheticsTestBrowserStepParamsVariablePtr and SyntheticsTestBrowserStepParamsVariablePtrOutput values.
// You can construct a concrete instance of `SyntheticsTestBrowserStepParamsVariablePtrInput` via:
//
//	        SyntheticsTestBrowserStepParamsVariableArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestBrowserStepParamsVariablePtrInput interface {
	pulumi.Input

	ToSyntheticsTestBrowserStepParamsVariablePtrOutput() SyntheticsTestBrowserStepParamsVariablePtrOutput
	ToSyntheticsTestBrowserStepParamsVariablePtrOutputWithContext(context.Context) SyntheticsTestBrowserStepParamsVariablePtrOutput
}

type syntheticsTestBrowserStepParamsVariablePtrType SyntheticsTestBrowserStepParamsVariableArgs

func SyntheticsTestBrowserStepParamsVariablePtr(v *SyntheticsTestBrowserStepParamsVariableArgs) SyntheticsTestBrowserStepParamsVariablePtrInput {
	return (*syntheticsTestBrowserStepParamsVariablePtrType)(v)
}

func (*syntheticsTestBrowserStepParamsVariablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestBrowserStepParamsVariable)(nil)).Elem()
}

func (i *syntheticsTestBrowserStepParamsVariablePtrType) ToSyntheticsTestBrowserStepParamsVariablePtrOutput() SyntheticsTestBrowserStepParamsVariablePtrOutput {
	return i.ToSyntheticsTestBrowserStepParamsVariablePtrOutputWithContext(context.Background())
}

func (i *syntheticsTestBrowserStepParamsVariablePtrType) ToSyntheticsTestBrowserStepParamsVariablePtrOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsVariablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestBrowserStepParamsVariablePtrOutput)
}

func (i *syntheticsTestBrowserStepParamsVariablePtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestBrowserStepParamsVariable] {
	return pulumix.Output[*SyntheticsTestBrowserStepParamsVariable]{
		OutputState: i.ToSyntheticsTestBrowserStepParamsVariablePtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestBrowserStepParamsVariableOutput struct{ *pulumi.OutputState }

func (SyntheticsTestBrowserStepParamsVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestBrowserStepParamsVariable)(nil)).Elem()
}

func (o SyntheticsTestBrowserStepParamsVariableOutput) ToSyntheticsTestBrowserStepParamsVariableOutput() SyntheticsTestBrowserStepParamsVariableOutput {
	return o
}

func (o SyntheticsTestBrowserStepParamsVariableOutput) ToSyntheticsTestBrowserStepParamsVariableOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsVariableOutput {
	return o
}

func (o SyntheticsTestBrowserStepParamsVariableOutput) ToSyntheticsTestBrowserStepParamsVariablePtrOutput() SyntheticsTestBrowserStepParamsVariablePtrOutput {
	return o.ToSyntheticsTestBrowserStepParamsVariablePtrOutputWithContext(context.Background())
}

func (o SyntheticsTestBrowserStepParamsVariableOutput) ToSyntheticsTestBrowserStepParamsVariablePtrOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsVariablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestBrowserStepParamsVariable) *SyntheticsTestBrowserStepParamsVariable {
		return &v
	}).(SyntheticsTestBrowserStepParamsVariablePtrOutput)
}

func (o SyntheticsTestBrowserStepParamsVariableOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestBrowserStepParamsVariable] {
	return pulumix.Output[SyntheticsTestBrowserStepParamsVariable]{
		OutputState: o.OutputState,
	}
}

// Example of the extracted variable. Defaults to `""`.
func (o SyntheticsTestBrowserStepParamsVariableOutput) Example() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParamsVariable) *string { return v.Example }).(pulumi.StringPtrOutput)
}

func (o SyntheticsTestBrowserStepParamsVariableOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserStepParamsVariable) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SyntheticsTestBrowserStepParamsVariablePtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestBrowserStepParamsVariablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestBrowserStepParamsVariable)(nil)).Elem()
}

func (o SyntheticsTestBrowserStepParamsVariablePtrOutput) ToSyntheticsTestBrowserStepParamsVariablePtrOutput() SyntheticsTestBrowserStepParamsVariablePtrOutput {
	return o
}

func (o SyntheticsTestBrowserStepParamsVariablePtrOutput) ToSyntheticsTestBrowserStepParamsVariablePtrOutputWithContext(ctx context.Context) SyntheticsTestBrowserStepParamsVariablePtrOutput {
	return o
}

func (o SyntheticsTestBrowserStepParamsVariablePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestBrowserStepParamsVariable] {
	return pulumix.Output[*SyntheticsTestBrowserStepParamsVariable]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestBrowserStepParamsVariablePtrOutput) Elem() SyntheticsTestBrowserStepParamsVariableOutput {
	return o.ApplyT(func(v *SyntheticsTestBrowserStepParamsVariable) SyntheticsTestBrowserStepParamsVariable {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestBrowserStepParamsVariable
		return ret
	}).(SyntheticsTestBrowserStepParamsVariableOutput)
}

// Example of the extracted variable. Defaults to `""`.
func (o SyntheticsTestBrowserStepParamsVariablePtrOutput) Example() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestBrowserStepParamsVariable) *string {
		if v == nil {
			return nil
		}
		return v.Example
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticsTestBrowserStepParamsVariablePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestBrowserStepParamsVariable) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type SyntheticsTestBrowserVariable struct {
	// Example for the variable. Defaults to `""`.
	Example *string `pulumi:"example"`
	// ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
	Id *string `pulumi:"id"`
	// Name of the variable.
	Name string `pulumi:"name"`
	// Pattern of the variable. Defaults to `""`.
	Pattern *string `pulumi:"pattern"`
	// Determines whether or not the browser test variable is obfuscated. Can only be used with a browser variable of type `text`
	Secure *bool `pulumi:"secure"`
	// Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
	Type string `pulumi:"type"`
}

// SyntheticsTestBrowserVariableInput is an input type that accepts SyntheticsTestBrowserVariableArgs and SyntheticsTestBrowserVariableOutput values.
// You can construct a concrete instance of `SyntheticsTestBrowserVariableInput` via:
//
//	SyntheticsTestBrowserVariableArgs{...}
type SyntheticsTestBrowserVariableInput interface {
	pulumi.Input

	ToSyntheticsTestBrowserVariableOutput() SyntheticsTestBrowserVariableOutput
	ToSyntheticsTestBrowserVariableOutputWithContext(context.Context) SyntheticsTestBrowserVariableOutput
}

type SyntheticsTestBrowserVariableArgs struct {
	// Example for the variable. Defaults to `""`.
	Example pulumi.StringPtrInput `pulumi:"example"`
	// ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the variable.
	Name pulumi.StringInput `pulumi:"name"`
	// Pattern of the variable. Defaults to `""`.
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
	// Determines whether or not the browser test variable is obfuscated. Can only be used with a browser variable of type `text`
	Secure pulumi.BoolPtrInput `pulumi:"secure"`
	// Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SyntheticsTestBrowserVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestBrowserVariable)(nil)).Elem()
}

func (i SyntheticsTestBrowserVariableArgs) ToSyntheticsTestBrowserVariableOutput() SyntheticsTestBrowserVariableOutput {
	return i.ToSyntheticsTestBrowserVariableOutputWithContext(context.Background())
}

func (i SyntheticsTestBrowserVariableArgs) ToSyntheticsTestBrowserVariableOutputWithContext(ctx context.Context) SyntheticsTestBrowserVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestBrowserVariableOutput)
}

func (i SyntheticsTestBrowserVariableArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestBrowserVariable] {
	return pulumix.Output[SyntheticsTestBrowserVariable]{
		OutputState: i.ToSyntheticsTestBrowserVariableOutputWithContext(ctx).OutputState,
	}
}

// SyntheticsTestBrowserVariableArrayInput is an input type that accepts SyntheticsTestBrowserVariableArray and SyntheticsTestBrowserVariableArrayOutput values.
// You can construct a concrete instance of `SyntheticsTestBrowserVariableArrayInput` via:
//
//	SyntheticsTestBrowserVariableArray{ SyntheticsTestBrowserVariableArgs{...} }
type SyntheticsTestBrowserVariableArrayInput interface {
	pulumi.Input

	ToSyntheticsTestBrowserVariableArrayOutput() SyntheticsTestBrowserVariableArrayOutput
	ToSyntheticsTestBrowserVariableArrayOutputWithContext(context.Context) SyntheticsTestBrowserVariableArrayOutput
}

type SyntheticsTestBrowserVariableArray []SyntheticsTestBrowserVariableInput

func (SyntheticsTestBrowserVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticsTestBrowserVariable)(nil)).Elem()
}

func (i SyntheticsTestBrowserVariableArray) ToSyntheticsTestBrowserVariableArrayOutput() SyntheticsTestBrowserVariableArrayOutput {
	return i.ToSyntheticsTestBrowserVariableArrayOutputWithContext(context.Background())
}

func (i SyntheticsTestBrowserVariableArray) ToSyntheticsTestBrowserVariableArrayOutputWithContext(ctx context.Context) SyntheticsTestBrowserVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestBrowserVariableArrayOutput)
}

func (i SyntheticsTestBrowserVariableArray) ToOutput(ctx context.Context) pulumix.Output[[]SyntheticsTestBrowserVariable] {
	return pulumix.Output[[]SyntheticsTestBrowserVariable]{
		OutputState: i.ToSyntheticsTestBrowserVariableArrayOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestBrowserVariableOutput struct{ *pulumi.OutputState }

func (SyntheticsTestBrowserVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestBrowserVariable)(nil)).Elem()
}

func (o SyntheticsTestBrowserVariableOutput) ToSyntheticsTestBrowserVariableOutput() SyntheticsTestBrowserVariableOutput {
	return o
}

func (o SyntheticsTestBrowserVariableOutput) ToSyntheticsTestBrowserVariableOutputWithContext(ctx context.Context) SyntheticsTestBrowserVariableOutput {
	return o
}

func (o SyntheticsTestBrowserVariableOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestBrowserVariable] {
	return pulumix.Output[SyntheticsTestBrowserVariable]{
		OutputState: o.OutputState,
	}
}

// Example for the variable. Defaults to `""`.
func (o SyntheticsTestBrowserVariableOutput) Example() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserVariable) *string { return v.Example }).(pulumi.StringPtrOutput)
}

// ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
func (o SyntheticsTestBrowserVariableOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserVariable) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the variable.
func (o SyntheticsTestBrowserVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Pattern of the variable. Defaults to `""`.
func (o SyntheticsTestBrowserVariableOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserVariable) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

// Determines whether or not the browser test variable is obfuscated. Can only be used with a browser variable of type `text`
func (o SyntheticsTestBrowserVariableOutput) Secure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserVariable) *bool { return v.Secure }).(pulumi.BoolPtrOutput)
}

// Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
func (o SyntheticsTestBrowserVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestBrowserVariable) string { return v.Type }).(pulumi.StringOutput)
}

type SyntheticsTestBrowserVariableArrayOutput struct{ *pulumi.OutputState }

func (SyntheticsTestBrowserVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticsTestBrowserVariable)(nil)).Elem()
}

func (o SyntheticsTestBrowserVariableArrayOutput) ToSyntheticsTestBrowserVariableArrayOutput() SyntheticsTestBrowserVariableArrayOutput {
	return o
}

func (o SyntheticsTestBrowserVariableArrayOutput) ToSyntheticsTestBrowserVariableArrayOutputWithContext(ctx context.Context) SyntheticsTestBrowserVariableArrayOutput {
	return o
}

func (o SyntheticsTestBrowserVariableArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SyntheticsTestBrowserVariable] {
	return pulumix.Output[[]SyntheticsTestBrowserVariable]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestBrowserVariableArrayOutput) Index(i pulumi.IntInput) SyntheticsTestBrowserVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticsTestBrowserVariable {
		return vs[0].([]SyntheticsTestBrowserVariable)[vs[1].(int)]
	}).(SyntheticsTestBrowserVariableOutput)
}

type SyntheticsTestConfigVariable struct {
	Example *string `pulumi:"example"`
	// When type = `global`, ID of the global variable to use.
	Id *string `pulumi:"id"`
	// Name of the variable.
	Name    string  `pulumi:"name"`
	Pattern *string `pulumi:"pattern"`
	// Whether the value of this variable will be obfuscated in test results. Defaults to `false`.
	Secure *bool `pulumi:"secure"`
	// Type of test configuration variable. Valid values are `global`, `text`.
	Type string `pulumi:"type"`
}

// SyntheticsTestConfigVariableInput is an input type that accepts SyntheticsTestConfigVariableArgs and SyntheticsTestConfigVariableOutput values.
// You can construct a concrete instance of `SyntheticsTestConfigVariableInput` via:
//
//	SyntheticsTestConfigVariableArgs{...}
type SyntheticsTestConfigVariableInput interface {
	pulumi.Input

	ToSyntheticsTestConfigVariableOutput() SyntheticsTestConfigVariableOutput
	ToSyntheticsTestConfigVariableOutputWithContext(context.Context) SyntheticsTestConfigVariableOutput
}

type SyntheticsTestConfigVariableArgs struct {
	Example pulumi.StringPtrInput `pulumi:"example"`
	// When type = `global`, ID of the global variable to use.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the variable.
	Name    pulumi.StringInput    `pulumi:"name"`
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
	// Whether the value of this variable will be obfuscated in test results. Defaults to `false`.
	Secure pulumi.BoolPtrInput `pulumi:"secure"`
	// Type of test configuration variable. Valid values are `global`, `text`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SyntheticsTestConfigVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestConfigVariable)(nil)).Elem()
}

func (i SyntheticsTestConfigVariableArgs) ToSyntheticsTestConfigVariableOutput() SyntheticsTestConfigVariableOutput {
	return i.ToSyntheticsTestConfigVariableOutputWithContext(context.Background())
}

func (i SyntheticsTestConfigVariableArgs) ToSyntheticsTestConfigVariableOutputWithContext(ctx context.Context) SyntheticsTestConfigVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestConfigVariableOutput)
}

func (i SyntheticsTestConfigVariableArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestConfigVariable] {
	return pulumix.Output[SyntheticsTestConfigVariable]{
		OutputState: i.ToSyntheticsTestConfigVariableOutputWithContext(ctx).OutputState,
	}
}

// SyntheticsTestConfigVariableArrayInput is an input type that accepts SyntheticsTestConfigVariableArray and SyntheticsTestConfigVariableArrayOutput values.
// You can construct a concrete instance of `SyntheticsTestConfigVariableArrayInput` via:
//
//	SyntheticsTestConfigVariableArray{ SyntheticsTestConfigVariableArgs{...} }
type SyntheticsTestConfigVariableArrayInput interface {
	pulumi.Input

	ToSyntheticsTestConfigVariableArrayOutput() SyntheticsTestConfigVariableArrayOutput
	ToSyntheticsTestConfigVariableArrayOutputWithContext(context.Context) SyntheticsTestConfigVariableArrayOutput
}

type SyntheticsTestConfigVariableArray []SyntheticsTestConfigVariableInput

func (SyntheticsTestConfigVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticsTestConfigVariable)(nil)).Elem()
}

func (i SyntheticsTestConfigVariableArray) ToSyntheticsTestConfigVariableArrayOutput() SyntheticsTestConfigVariableArrayOutput {
	return i.ToSyntheticsTestConfigVariableArrayOutputWithContext(context.Background())
}

func (i SyntheticsTestConfigVariableArray) ToSyntheticsTestConfigVariableArrayOutputWithContext(ctx context.Context) SyntheticsTestConfigVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestConfigVariableArrayOutput)
}

func (i SyntheticsTestConfigVariableArray) ToOutput(ctx context.Context) pulumix.Output[[]SyntheticsTestConfigVariable] {
	return pulumix.Output[[]SyntheticsTestConfigVariable]{
		OutputState: i.ToSyntheticsTestConfigVariableArrayOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestConfigVariableOutput struct{ *pulumi.OutputState }

func (SyntheticsTestConfigVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestConfigVariable)(nil)).Elem()
}

func (o SyntheticsTestConfigVariableOutput) ToSyntheticsTestConfigVariableOutput() SyntheticsTestConfigVariableOutput {
	return o
}

func (o SyntheticsTestConfigVariableOutput) ToSyntheticsTestConfigVariableOutputWithContext(ctx context.Context) SyntheticsTestConfigVariableOutput {
	return o
}

func (o SyntheticsTestConfigVariableOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestConfigVariable] {
	return pulumix.Output[SyntheticsTestConfigVariable]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestConfigVariableOutput) Example() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestConfigVariable) *string { return v.Example }).(pulumi.StringPtrOutput)
}

// When type = `global`, ID of the global variable to use.
func (o SyntheticsTestConfigVariableOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestConfigVariable) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the variable.
func (o SyntheticsTestConfigVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestConfigVariable) string { return v.Name }).(pulumi.StringOutput)
}

func (o SyntheticsTestConfigVariableOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestConfigVariable) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

// Whether the value of this variable will be obfuscated in test results. Defaults to `false`.
func (o SyntheticsTestConfigVariableOutput) Secure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestConfigVariable) *bool { return v.Secure }).(pulumi.BoolPtrOutput)
}

// Type of test configuration variable. Valid values are `global`, `text`.
func (o SyntheticsTestConfigVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestConfigVariable) string { return v.Type }).(pulumi.StringOutput)
}

type SyntheticsTestConfigVariableArrayOutput struct{ *pulumi.OutputState }

func (SyntheticsTestConfigVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticsTestConfigVariable)(nil)).Elem()
}

func (o SyntheticsTestConfigVariableArrayOutput) ToSyntheticsTestConfigVariableArrayOutput() SyntheticsTestConfigVariableArrayOutput {
	return o
}

func (o SyntheticsTestConfigVariableArrayOutput) ToSyntheticsTestConfigVariableArrayOutputWithContext(ctx context.Context) SyntheticsTestConfigVariableArrayOutput {
	return o
}

func (o SyntheticsTestConfigVariableArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SyntheticsTestConfigVariable] {
	return pulumix.Output[[]SyntheticsTestConfigVariable]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestConfigVariableArrayOutput) Index(i pulumi.IntInput) SyntheticsTestConfigVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticsTestConfigVariable {
		return vs[0].([]SyntheticsTestConfigVariable)[vs[1].(int)]
	}).(SyntheticsTestConfigVariableOutput)
}

type SyntheticsTestOptionsList struct {
	// For SSL test, whether or not the test should allow self signed certificates.
	AcceptSelfSigned *bool `pulumi:"acceptSelfSigned"`
	// Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
	AllowInsecure *bool `pulumi:"allowInsecure"`
	// For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
	CheckCertificateRevocation *bool `pulumi:"checkCertificateRevocation"`
	// CI/CD options for a Synthetic test.
	Ci *SyntheticsTestOptionsListCi `pulumi:"ci"`
	// Disable Cross-Origin Resource Sharing for browser tests.
	DisableCors *bool `pulumi:"disableCors"`
	// Disable Content Security Policy for browser tests.
	DisableCsp *bool `pulumi:"disableCsp"`
	// Determines whether or not the API HTTP test should follow redirects.
	FollowRedirects *bool `pulumi:"followRedirects"`
	// HTTP version to use for a Synthetics API test. Valid values are `http1`, `http2`, `any`.
	HttpVersion *string `pulumi:"httpVersion"`
	// Ignore server certificate error for browser tests.
	IgnoreServerCertificateError *bool `pulumi:"ignoreServerCertificateError"`
	// Timeout before declaring the initial step as failed (in seconds) for browser tests.
	InitialNavigationTimeout *int `pulumi:"initialNavigationTimeout"`
	// Minimum amount of time in failure required to trigger an alert (in seconds). Default is `0`.
	MinFailureDuration *int `pulumi:"minFailureDuration"`
	// Minimum number of locations in failure required to trigger an alert. Defaults to `1`.
	MinLocationFailed *int `pulumi:"minLocationFailed"`
	// The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
	MonitorName     *string                                  `pulumi:"monitorName"`
	MonitorOptions  *SyntheticsTestOptionsListMonitorOptions `pulumi:"monitorOptions"`
	MonitorPriority *int                                     `pulumi:"monitorPriority"`
	// Prevents saving screenshots of the steps.
	NoScreenshot *bool `pulumi:"noScreenshot"`
	// A list of role identifiers pulled from the Roles API to restrict read and write access.
	RestrictedRoles []string                        `pulumi:"restrictedRoles"`
	Retry           *SyntheticsTestOptionsListRetry `pulumi:"retry"`
	// The RUM data collection settings for the Synthetic browser test.
	RumSettings *SyntheticsTestOptionsListRumSettings `pulumi:"rumSettings"`
	// Object containing timeframes and timezone used for advanced scheduling.
	Scheduling *SyntheticsTestOptionsListScheduling `pulumi:"scheduling"`
	// How often the test should run (in seconds).
	TickEvery int `pulumi:"tickEvery"`
}

// SyntheticsTestOptionsListInput is an input type that accepts SyntheticsTestOptionsListArgs and SyntheticsTestOptionsListOutput values.
// You can construct a concrete instance of `SyntheticsTestOptionsListInput` via:
//
//	SyntheticsTestOptionsListArgs{...}
type SyntheticsTestOptionsListInput interface {
	pulumi.Input

	ToSyntheticsTestOptionsListOutput() SyntheticsTestOptionsListOutput
	ToSyntheticsTestOptionsListOutputWithContext(context.Context) SyntheticsTestOptionsListOutput
}

type SyntheticsTestOptionsListArgs struct {
	// For SSL test, whether or not the test should allow self signed certificates.
	AcceptSelfSigned pulumi.BoolPtrInput `pulumi:"acceptSelfSigned"`
	// Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
	AllowInsecure pulumi.BoolPtrInput `pulumi:"allowInsecure"`
	// For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
	CheckCertificateRevocation pulumi.BoolPtrInput `pulumi:"checkCertificateRevocation"`
	// CI/CD options for a Synthetic test.
	Ci SyntheticsTestOptionsListCiPtrInput `pulumi:"ci"`
	// Disable Cross-Origin Resource Sharing for browser tests.
	DisableCors pulumi.BoolPtrInput `pulumi:"disableCors"`
	// Disable Content Security Policy for browser tests.
	DisableCsp pulumi.BoolPtrInput `pulumi:"disableCsp"`
	// Determines whether or not the API HTTP test should follow redirects.
	FollowRedirects pulumi.BoolPtrInput `pulumi:"followRedirects"`
	// HTTP version to use for a Synthetics API test. Valid values are `http1`, `http2`, `any`.
	HttpVersion pulumi.StringPtrInput `pulumi:"httpVersion"`
	// Ignore server certificate error for browser tests.
	IgnoreServerCertificateError pulumi.BoolPtrInput `pulumi:"ignoreServerCertificateError"`
	// Timeout before declaring the initial step as failed (in seconds) for browser tests.
	InitialNavigationTimeout pulumi.IntPtrInput `pulumi:"initialNavigationTimeout"`
	// Minimum amount of time in failure required to trigger an alert (in seconds). Default is `0`.
	MinFailureDuration pulumi.IntPtrInput `pulumi:"minFailureDuration"`
	// Minimum number of locations in failure required to trigger an alert. Defaults to `1`.
	MinLocationFailed pulumi.IntPtrInput `pulumi:"minLocationFailed"`
	// The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
	MonitorName     pulumi.StringPtrInput                           `pulumi:"monitorName"`
	MonitorOptions  SyntheticsTestOptionsListMonitorOptionsPtrInput `pulumi:"monitorOptions"`
	MonitorPriority pulumi.IntPtrInput                              `pulumi:"monitorPriority"`
	// Prevents saving screenshots of the steps.
	NoScreenshot pulumi.BoolPtrInput `pulumi:"noScreenshot"`
	// A list of role identifiers pulled from the Roles API to restrict read and write access.
	RestrictedRoles pulumi.StringArrayInput                `pulumi:"restrictedRoles"`
	Retry           SyntheticsTestOptionsListRetryPtrInput `pulumi:"retry"`
	// The RUM data collection settings for the Synthetic browser test.
	RumSettings SyntheticsTestOptionsListRumSettingsPtrInput `pulumi:"rumSettings"`
	// Object containing timeframes and timezone used for advanced scheduling.
	Scheduling SyntheticsTestOptionsListSchedulingPtrInput `pulumi:"scheduling"`
	// How often the test should run (in seconds).
	TickEvery pulumi.IntInput `pulumi:"tickEvery"`
}

func (SyntheticsTestOptionsListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestOptionsList)(nil)).Elem()
}

func (i SyntheticsTestOptionsListArgs) ToSyntheticsTestOptionsListOutput() SyntheticsTestOptionsListOutput {
	return i.ToSyntheticsTestOptionsListOutputWithContext(context.Background())
}

func (i SyntheticsTestOptionsListArgs) ToSyntheticsTestOptionsListOutputWithContext(ctx context.Context) SyntheticsTestOptionsListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListOutput)
}

func (i SyntheticsTestOptionsListArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestOptionsList] {
	return pulumix.Output[SyntheticsTestOptionsList]{
		OutputState: i.ToSyntheticsTestOptionsListOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestOptionsListArgs) ToSyntheticsTestOptionsListPtrOutput() SyntheticsTestOptionsListPtrOutput {
	return i.ToSyntheticsTestOptionsListPtrOutputWithContext(context.Background())
}

func (i SyntheticsTestOptionsListArgs) ToSyntheticsTestOptionsListPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListOutput).ToSyntheticsTestOptionsListPtrOutputWithContext(ctx)
}

// SyntheticsTestOptionsListPtrInput is an input type that accepts SyntheticsTestOptionsListArgs, SyntheticsTestOptionsListPtr and SyntheticsTestOptionsListPtrOutput values.
// You can construct a concrete instance of `SyntheticsTestOptionsListPtrInput` via:
//
//	        SyntheticsTestOptionsListArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestOptionsListPtrInput interface {
	pulumi.Input

	ToSyntheticsTestOptionsListPtrOutput() SyntheticsTestOptionsListPtrOutput
	ToSyntheticsTestOptionsListPtrOutputWithContext(context.Context) SyntheticsTestOptionsListPtrOutput
}

type syntheticsTestOptionsListPtrType SyntheticsTestOptionsListArgs

func SyntheticsTestOptionsListPtr(v *SyntheticsTestOptionsListArgs) SyntheticsTestOptionsListPtrInput {
	return (*syntheticsTestOptionsListPtrType)(v)
}

func (*syntheticsTestOptionsListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestOptionsList)(nil)).Elem()
}

func (i *syntheticsTestOptionsListPtrType) ToSyntheticsTestOptionsListPtrOutput() SyntheticsTestOptionsListPtrOutput {
	return i.ToSyntheticsTestOptionsListPtrOutputWithContext(context.Background())
}

func (i *syntheticsTestOptionsListPtrType) ToSyntheticsTestOptionsListPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListPtrOutput)
}

func (i *syntheticsTestOptionsListPtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestOptionsList] {
	return pulumix.Output[*SyntheticsTestOptionsList]{
		OutputState: i.ToSyntheticsTestOptionsListPtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestOptionsListOutput struct{ *pulumi.OutputState }

func (SyntheticsTestOptionsListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestOptionsList)(nil)).Elem()
}

func (o SyntheticsTestOptionsListOutput) ToSyntheticsTestOptionsListOutput() SyntheticsTestOptionsListOutput {
	return o
}

func (o SyntheticsTestOptionsListOutput) ToSyntheticsTestOptionsListOutputWithContext(ctx context.Context) SyntheticsTestOptionsListOutput {
	return o
}

func (o SyntheticsTestOptionsListOutput) ToSyntheticsTestOptionsListPtrOutput() SyntheticsTestOptionsListPtrOutput {
	return o.ToSyntheticsTestOptionsListPtrOutputWithContext(context.Background())
}

func (o SyntheticsTestOptionsListOutput) ToSyntheticsTestOptionsListPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestOptionsList) *SyntheticsTestOptionsList {
		return &v
	}).(SyntheticsTestOptionsListPtrOutput)
}

func (o SyntheticsTestOptionsListOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestOptionsList] {
	return pulumix.Output[SyntheticsTestOptionsList]{
		OutputState: o.OutputState,
	}
}

// For SSL test, whether or not the test should allow self signed certificates.
func (o SyntheticsTestOptionsListOutput) AcceptSelfSigned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *bool { return v.AcceptSelfSigned }).(pulumi.BoolPtrOutput)
}

// Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
func (o SyntheticsTestOptionsListOutput) AllowInsecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *bool { return v.AllowInsecure }).(pulumi.BoolPtrOutput)
}

// For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
func (o SyntheticsTestOptionsListOutput) CheckCertificateRevocation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *bool { return v.CheckCertificateRevocation }).(pulumi.BoolPtrOutput)
}

// CI/CD options for a Synthetic test.
func (o SyntheticsTestOptionsListOutput) Ci() SyntheticsTestOptionsListCiPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *SyntheticsTestOptionsListCi { return v.Ci }).(SyntheticsTestOptionsListCiPtrOutput)
}

// Disable Cross-Origin Resource Sharing for browser tests.
func (o SyntheticsTestOptionsListOutput) DisableCors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *bool { return v.DisableCors }).(pulumi.BoolPtrOutput)
}

// Disable Content Security Policy for browser tests.
func (o SyntheticsTestOptionsListOutput) DisableCsp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *bool { return v.DisableCsp }).(pulumi.BoolPtrOutput)
}

// Determines whether or not the API HTTP test should follow redirects.
func (o SyntheticsTestOptionsListOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *bool { return v.FollowRedirects }).(pulumi.BoolPtrOutput)
}

// HTTP version to use for a Synthetics API test. Valid values are `http1`, `http2`, `any`.
func (o SyntheticsTestOptionsListOutput) HttpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *string { return v.HttpVersion }).(pulumi.StringPtrOutput)
}

// Ignore server certificate error for browser tests.
func (o SyntheticsTestOptionsListOutput) IgnoreServerCertificateError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *bool { return v.IgnoreServerCertificateError }).(pulumi.BoolPtrOutput)
}

// Timeout before declaring the initial step as failed (in seconds) for browser tests.
func (o SyntheticsTestOptionsListOutput) InitialNavigationTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *int { return v.InitialNavigationTimeout }).(pulumi.IntPtrOutput)
}

// Minimum amount of time in failure required to trigger an alert (in seconds). Default is `0`.
func (o SyntheticsTestOptionsListOutput) MinFailureDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *int { return v.MinFailureDuration }).(pulumi.IntPtrOutput)
}

// Minimum number of locations in failure required to trigger an alert. Defaults to `1`.
func (o SyntheticsTestOptionsListOutput) MinLocationFailed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *int { return v.MinLocationFailed }).(pulumi.IntPtrOutput)
}

// The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
func (o SyntheticsTestOptionsListOutput) MonitorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *string { return v.MonitorName }).(pulumi.StringPtrOutput)
}

func (o SyntheticsTestOptionsListOutput) MonitorOptions() SyntheticsTestOptionsListMonitorOptionsPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *SyntheticsTestOptionsListMonitorOptions { return v.MonitorOptions }).(SyntheticsTestOptionsListMonitorOptionsPtrOutput)
}

func (o SyntheticsTestOptionsListOutput) MonitorPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *int { return v.MonitorPriority }).(pulumi.IntPtrOutput)
}

// Prevents saving screenshots of the steps.
func (o SyntheticsTestOptionsListOutput) NoScreenshot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *bool { return v.NoScreenshot }).(pulumi.BoolPtrOutput)
}

// A list of role identifiers pulled from the Roles API to restrict read and write access.
func (o SyntheticsTestOptionsListOutput) RestrictedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) []string { return v.RestrictedRoles }).(pulumi.StringArrayOutput)
}

func (o SyntheticsTestOptionsListOutput) Retry() SyntheticsTestOptionsListRetryPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *SyntheticsTestOptionsListRetry { return v.Retry }).(SyntheticsTestOptionsListRetryPtrOutput)
}

// The RUM data collection settings for the Synthetic browser test.
func (o SyntheticsTestOptionsListOutput) RumSettings() SyntheticsTestOptionsListRumSettingsPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *SyntheticsTestOptionsListRumSettings { return v.RumSettings }).(SyntheticsTestOptionsListRumSettingsPtrOutput)
}

// Object containing timeframes and timezone used for advanced scheduling.
func (o SyntheticsTestOptionsListOutput) Scheduling() SyntheticsTestOptionsListSchedulingPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) *SyntheticsTestOptionsListScheduling { return v.Scheduling }).(SyntheticsTestOptionsListSchedulingPtrOutput)
}

// How often the test should run (in seconds).
func (o SyntheticsTestOptionsListOutput) TickEvery() pulumi.IntOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsList) int { return v.TickEvery }).(pulumi.IntOutput)
}

type SyntheticsTestOptionsListPtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestOptionsListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestOptionsList)(nil)).Elem()
}

func (o SyntheticsTestOptionsListPtrOutput) ToSyntheticsTestOptionsListPtrOutput() SyntheticsTestOptionsListPtrOutput {
	return o
}

func (o SyntheticsTestOptionsListPtrOutput) ToSyntheticsTestOptionsListPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListPtrOutput {
	return o
}

func (o SyntheticsTestOptionsListPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestOptionsList] {
	return pulumix.Output[*SyntheticsTestOptionsList]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestOptionsListPtrOutput) Elem() SyntheticsTestOptionsListOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) SyntheticsTestOptionsList {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestOptionsList
		return ret
	}).(SyntheticsTestOptionsListOutput)
}

// For SSL test, whether or not the test should allow self signed certificates.
func (o SyntheticsTestOptionsListPtrOutput) AcceptSelfSigned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *bool {
		if v == nil {
			return nil
		}
		return v.AcceptSelfSigned
	}).(pulumi.BoolPtrOutput)
}

// Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
func (o SyntheticsTestOptionsListPtrOutput) AllowInsecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *bool {
		if v == nil {
			return nil
		}
		return v.AllowInsecure
	}).(pulumi.BoolPtrOutput)
}

// For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
func (o SyntheticsTestOptionsListPtrOutput) CheckCertificateRevocation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *bool {
		if v == nil {
			return nil
		}
		return v.CheckCertificateRevocation
	}).(pulumi.BoolPtrOutput)
}

// CI/CD options for a Synthetic test.
func (o SyntheticsTestOptionsListPtrOutput) Ci() SyntheticsTestOptionsListCiPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *SyntheticsTestOptionsListCi {
		if v == nil {
			return nil
		}
		return v.Ci
	}).(SyntheticsTestOptionsListCiPtrOutput)
}

// Disable Cross-Origin Resource Sharing for browser tests.
func (o SyntheticsTestOptionsListPtrOutput) DisableCors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *bool {
		if v == nil {
			return nil
		}
		return v.DisableCors
	}).(pulumi.BoolPtrOutput)
}

// Disable Content Security Policy for browser tests.
func (o SyntheticsTestOptionsListPtrOutput) DisableCsp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *bool {
		if v == nil {
			return nil
		}
		return v.DisableCsp
	}).(pulumi.BoolPtrOutput)
}

// Determines whether or not the API HTTP test should follow redirects.
func (o SyntheticsTestOptionsListPtrOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *bool {
		if v == nil {
			return nil
		}
		return v.FollowRedirects
	}).(pulumi.BoolPtrOutput)
}

// HTTP version to use for a Synthetics API test. Valid values are `http1`, `http2`, `any`.
func (o SyntheticsTestOptionsListPtrOutput) HttpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *string {
		if v == nil {
			return nil
		}
		return v.HttpVersion
	}).(pulumi.StringPtrOutput)
}

// Ignore server certificate error for browser tests.
func (o SyntheticsTestOptionsListPtrOutput) IgnoreServerCertificateError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreServerCertificateError
	}).(pulumi.BoolPtrOutput)
}

// Timeout before declaring the initial step as failed (in seconds) for browser tests.
func (o SyntheticsTestOptionsListPtrOutput) InitialNavigationTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *int {
		if v == nil {
			return nil
		}
		return v.InitialNavigationTimeout
	}).(pulumi.IntPtrOutput)
}

// Minimum amount of time in failure required to trigger an alert (in seconds). Default is `0`.
func (o SyntheticsTestOptionsListPtrOutput) MinFailureDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *int {
		if v == nil {
			return nil
		}
		return v.MinFailureDuration
	}).(pulumi.IntPtrOutput)
}

// Minimum number of locations in failure required to trigger an alert. Defaults to `1`.
func (o SyntheticsTestOptionsListPtrOutput) MinLocationFailed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *int {
		if v == nil {
			return nil
		}
		return v.MinLocationFailed
	}).(pulumi.IntPtrOutput)
}

// The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
func (o SyntheticsTestOptionsListPtrOutput) MonitorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *string {
		if v == nil {
			return nil
		}
		return v.MonitorName
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticsTestOptionsListPtrOutput) MonitorOptions() SyntheticsTestOptionsListMonitorOptionsPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *SyntheticsTestOptionsListMonitorOptions {
		if v == nil {
			return nil
		}
		return v.MonitorOptions
	}).(SyntheticsTestOptionsListMonitorOptionsPtrOutput)
}

func (o SyntheticsTestOptionsListPtrOutput) MonitorPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *int {
		if v == nil {
			return nil
		}
		return v.MonitorPriority
	}).(pulumi.IntPtrOutput)
}

// Prevents saving screenshots of the steps.
func (o SyntheticsTestOptionsListPtrOutput) NoScreenshot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *bool {
		if v == nil {
			return nil
		}
		return v.NoScreenshot
	}).(pulumi.BoolPtrOutput)
}

// A list of role identifiers pulled from the Roles API to restrict read and write access.
func (o SyntheticsTestOptionsListPtrOutput) RestrictedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) []string {
		if v == nil {
			return nil
		}
		return v.RestrictedRoles
	}).(pulumi.StringArrayOutput)
}

func (o SyntheticsTestOptionsListPtrOutput) Retry() SyntheticsTestOptionsListRetryPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *SyntheticsTestOptionsListRetry {
		if v == nil {
			return nil
		}
		return v.Retry
	}).(SyntheticsTestOptionsListRetryPtrOutput)
}

// The RUM data collection settings for the Synthetic browser test.
func (o SyntheticsTestOptionsListPtrOutput) RumSettings() SyntheticsTestOptionsListRumSettingsPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *SyntheticsTestOptionsListRumSettings {
		if v == nil {
			return nil
		}
		return v.RumSettings
	}).(SyntheticsTestOptionsListRumSettingsPtrOutput)
}

// Object containing timeframes and timezone used for advanced scheduling.
func (o SyntheticsTestOptionsListPtrOutput) Scheduling() SyntheticsTestOptionsListSchedulingPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *SyntheticsTestOptionsListScheduling {
		if v == nil {
			return nil
		}
		return v.Scheduling
	}).(SyntheticsTestOptionsListSchedulingPtrOutput)
}

// How often the test should run (in seconds).
func (o SyntheticsTestOptionsListPtrOutput) TickEvery() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsList) *int {
		if v == nil {
			return nil
		}
		return &v.TickEvery
	}).(pulumi.IntPtrOutput)
}

type SyntheticsTestOptionsListCi struct {
	// Execution rule for a Synthetics test. Valid values are `blocking`, `nonBlocking`, `skipped`.
	ExecutionRule *string `pulumi:"executionRule"`
}

// SyntheticsTestOptionsListCiInput is an input type that accepts SyntheticsTestOptionsListCiArgs and SyntheticsTestOptionsListCiOutput values.
// You can construct a concrete instance of `SyntheticsTestOptionsListCiInput` via:
//
//	SyntheticsTestOptionsListCiArgs{...}
type SyntheticsTestOptionsListCiInput interface {
	pulumi.Input

	ToSyntheticsTestOptionsListCiOutput() SyntheticsTestOptionsListCiOutput
	ToSyntheticsTestOptionsListCiOutputWithContext(context.Context) SyntheticsTestOptionsListCiOutput
}

type SyntheticsTestOptionsListCiArgs struct {
	// Execution rule for a Synthetics test. Valid values are `blocking`, `nonBlocking`, `skipped`.
	ExecutionRule pulumi.StringPtrInput `pulumi:"executionRule"`
}

func (SyntheticsTestOptionsListCiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestOptionsListCi)(nil)).Elem()
}

func (i SyntheticsTestOptionsListCiArgs) ToSyntheticsTestOptionsListCiOutput() SyntheticsTestOptionsListCiOutput {
	return i.ToSyntheticsTestOptionsListCiOutputWithContext(context.Background())
}

func (i SyntheticsTestOptionsListCiArgs) ToSyntheticsTestOptionsListCiOutputWithContext(ctx context.Context) SyntheticsTestOptionsListCiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListCiOutput)
}

func (i SyntheticsTestOptionsListCiArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestOptionsListCi] {
	return pulumix.Output[SyntheticsTestOptionsListCi]{
		OutputState: i.ToSyntheticsTestOptionsListCiOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestOptionsListCiArgs) ToSyntheticsTestOptionsListCiPtrOutput() SyntheticsTestOptionsListCiPtrOutput {
	return i.ToSyntheticsTestOptionsListCiPtrOutputWithContext(context.Background())
}

func (i SyntheticsTestOptionsListCiArgs) ToSyntheticsTestOptionsListCiPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListCiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListCiOutput).ToSyntheticsTestOptionsListCiPtrOutputWithContext(ctx)
}

// SyntheticsTestOptionsListCiPtrInput is an input type that accepts SyntheticsTestOptionsListCiArgs, SyntheticsTestOptionsListCiPtr and SyntheticsTestOptionsListCiPtrOutput values.
// You can construct a concrete instance of `SyntheticsTestOptionsListCiPtrInput` via:
//
//	        SyntheticsTestOptionsListCiArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestOptionsListCiPtrInput interface {
	pulumi.Input

	ToSyntheticsTestOptionsListCiPtrOutput() SyntheticsTestOptionsListCiPtrOutput
	ToSyntheticsTestOptionsListCiPtrOutputWithContext(context.Context) SyntheticsTestOptionsListCiPtrOutput
}

type syntheticsTestOptionsListCiPtrType SyntheticsTestOptionsListCiArgs

func SyntheticsTestOptionsListCiPtr(v *SyntheticsTestOptionsListCiArgs) SyntheticsTestOptionsListCiPtrInput {
	return (*syntheticsTestOptionsListCiPtrType)(v)
}

func (*syntheticsTestOptionsListCiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestOptionsListCi)(nil)).Elem()
}

func (i *syntheticsTestOptionsListCiPtrType) ToSyntheticsTestOptionsListCiPtrOutput() SyntheticsTestOptionsListCiPtrOutput {
	return i.ToSyntheticsTestOptionsListCiPtrOutputWithContext(context.Background())
}

func (i *syntheticsTestOptionsListCiPtrType) ToSyntheticsTestOptionsListCiPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListCiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListCiPtrOutput)
}

func (i *syntheticsTestOptionsListCiPtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestOptionsListCi] {
	return pulumix.Output[*SyntheticsTestOptionsListCi]{
		OutputState: i.ToSyntheticsTestOptionsListCiPtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestOptionsListCiOutput struct{ *pulumi.OutputState }

func (SyntheticsTestOptionsListCiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestOptionsListCi)(nil)).Elem()
}

func (o SyntheticsTestOptionsListCiOutput) ToSyntheticsTestOptionsListCiOutput() SyntheticsTestOptionsListCiOutput {
	return o
}

func (o SyntheticsTestOptionsListCiOutput) ToSyntheticsTestOptionsListCiOutputWithContext(ctx context.Context) SyntheticsTestOptionsListCiOutput {
	return o
}

func (o SyntheticsTestOptionsListCiOutput) ToSyntheticsTestOptionsListCiPtrOutput() SyntheticsTestOptionsListCiPtrOutput {
	return o.ToSyntheticsTestOptionsListCiPtrOutputWithContext(context.Background())
}

func (o SyntheticsTestOptionsListCiOutput) ToSyntheticsTestOptionsListCiPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListCiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestOptionsListCi) *SyntheticsTestOptionsListCi {
		return &v
	}).(SyntheticsTestOptionsListCiPtrOutput)
}

func (o SyntheticsTestOptionsListCiOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestOptionsListCi] {
	return pulumix.Output[SyntheticsTestOptionsListCi]{
		OutputState: o.OutputState,
	}
}

// Execution rule for a Synthetics test. Valid values are `blocking`, `nonBlocking`, `skipped`.
func (o SyntheticsTestOptionsListCiOutput) ExecutionRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsListCi) *string { return v.ExecutionRule }).(pulumi.StringPtrOutput)
}

type SyntheticsTestOptionsListCiPtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestOptionsListCiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestOptionsListCi)(nil)).Elem()
}

func (o SyntheticsTestOptionsListCiPtrOutput) ToSyntheticsTestOptionsListCiPtrOutput() SyntheticsTestOptionsListCiPtrOutput {
	return o
}

func (o SyntheticsTestOptionsListCiPtrOutput) ToSyntheticsTestOptionsListCiPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListCiPtrOutput {
	return o
}

func (o SyntheticsTestOptionsListCiPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestOptionsListCi] {
	return pulumix.Output[*SyntheticsTestOptionsListCi]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestOptionsListCiPtrOutput) Elem() SyntheticsTestOptionsListCiOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsListCi) SyntheticsTestOptionsListCi {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestOptionsListCi
		return ret
	}).(SyntheticsTestOptionsListCiOutput)
}

// Execution rule for a Synthetics test. Valid values are `blocking`, `nonBlocking`, `skipped`.
func (o SyntheticsTestOptionsListCiPtrOutput) ExecutionRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsListCi) *string {
		if v == nil {
			return nil
		}
		return v.ExecutionRule
	}).(pulumi.StringPtrOutput)
}

type SyntheticsTestOptionsListMonitorOptions struct {
	// Specify a renotification frequency in minutes. Values available by default are `0`, `10`, `20`, `30`, `40`, `50`, `60`, `90`, `120`, `180`, `240`, `300`, `360`, `720`, `1440`. Defaults to `0`.
	RenotifyInterval *int `pulumi:"renotifyInterval"`
}

// SyntheticsTestOptionsListMonitorOptionsInput is an input type that accepts SyntheticsTestOptionsListMonitorOptionsArgs and SyntheticsTestOptionsListMonitorOptionsOutput values.
// You can construct a concrete instance of `SyntheticsTestOptionsListMonitorOptionsInput` via:
//
//	SyntheticsTestOptionsListMonitorOptionsArgs{...}
type SyntheticsTestOptionsListMonitorOptionsInput interface {
	pulumi.Input

	ToSyntheticsTestOptionsListMonitorOptionsOutput() SyntheticsTestOptionsListMonitorOptionsOutput
	ToSyntheticsTestOptionsListMonitorOptionsOutputWithContext(context.Context) SyntheticsTestOptionsListMonitorOptionsOutput
}

type SyntheticsTestOptionsListMonitorOptionsArgs struct {
	// Specify a renotification frequency in minutes. Values available by default are `0`, `10`, `20`, `30`, `40`, `50`, `60`, `90`, `120`, `180`, `240`, `300`, `360`, `720`, `1440`. Defaults to `0`.
	RenotifyInterval pulumi.IntPtrInput `pulumi:"renotifyInterval"`
}

func (SyntheticsTestOptionsListMonitorOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestOptionsListMonitorOptions)(nil)).Elem()
}

func (i SyntheticsTestOptionsListMonitorOptionsArgs) ToSyntheticsTestOptionsListMonitorOptionsOutput() SyntheticsTestOptionsListMonitorOptionsOutput {
	return i.ToSyntheticsTestOptionsListMonitorOptionsOutputWithContext(context.Background())
}

func (i SyntheticsTestOptionsListMonitorOptionsArgs) ToSyntheticsTestOptionsListMonitorOptionsOutputWithContext(ctx context.Context) SyntheticsTestOptionsListMonitorOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListMonitorOptionsOutput)
}

func (i SyntheticsTestOptionsListMonitorOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestOptionsListMonitorOptions] {
	return pulumix.Output[SyntheticsTestOptionsListMonitorOptions]{
		OutputState: i.ToSyntheticsTestOptionsListMonitorOptionsOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestOptionsListMonitorOptionsArgs) ToSyntheticsTestOptionsListMonitorOptionsPtrOutput() SyntheticsTestOptionsListMonitorOptionsPtrOutput {
	return i.ToSyntheticsTestOptionsListMonitorOptionsPtrOutputWithContext(context.Background())
}

func (i SyntheticsTestOptionsListMonitorOptionsArgs) ToSyntheticsTestOptionsListMonitorOptionsPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListMonitorOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListMonitorOptionsOutput).ToSyntheticsTestOptionsListMonitorOptionsPtrOutputWithContext(ctx)
}

// SyntheticsTestOptionsListMonitorOptionsPtrInput is an input type that accepts SyntheticsTestOptionsListMonitorOptionsArgs, SyntheticsTestOptionsListMonitorOptionsPtr and SyntheticsTestOptionsListMonitorOptionsPtrOutput values.
// You can construct a concrete instance of `SyntheticsTestOptionsListMonitorOptionsPtrInput` via:
//
//	        SyntheticsTestOptionsListMonitorOptionsArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestOptionsListMonitorOptionsPtrInput interface {
	pulumi.Input

	ToSyntheticsTestOptionsListMonitorOptionsPtrOutput() SyntheticsTestOptionsListMonitorOptionsPtrOutput
	ToSyntheticsTestOptionsListMonitorOptionsPtrOutputWithContext(context.Context) SyntheticsTestOptionsListMonitorOptionsPtrOutput
}

type syntheticsTestOptionsListMonitorOptionsPtrType SyntheticsTestOptionsListMonitorOptionsArgs

func SyntheticsTestOptionsListMonitorOptionsPtr(v *SyntheticsTestOptionsListMonitorOptionsArgs) SyntheticsTestOptionsListMonitorOptionsPtrInput {
	return (*syntheticsTestOptionsListMonitorOptionsPtrType)(v)
}

func (*syntheticsTestOptionsListMonitorOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestOptionsListMonitorOptions)(nil)).Elem()
}

func (i *syntheticsTestOptionsListMonitorOptionsPtrType) ToSyntheticsTestOptionsListMonitorOptionsPtrOutput() SyntheticsTestOptionsListMonitorOptionsPtrOutput {
	return i.ToSyntheticsTestOptionsListMonitorOptionsPtrOutputWithContext(context.Background())
}

func (i *syntheticsTestOptionsListMonitorOptionsPtrType) ToSyntheticsTestOptionsListMonitorOptionsPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListMonitorOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListMonitorOptionsPtrOutput)
}

func (i *syntheticsTestOptionsListMonitorOptionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestOptionsListMonitorOptions] {
	return pulumix.Output[*SyntheticsTestOptionsListMonitorOptions]{
		OutputState: i.ToSyntheticsTestOptionsListMonitorOptionsPtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestOptionsListMonitorOptionsOutput struct{ *pulumi.OutputState }

func (SyntheticsTestOptionsListMonitorOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestOptionsListMonitorOptions)(nil)).Elem()
}

func (o SyntheticsTestOptionsListMonitorOptionsOutput) ToSyntheticsTestOptionsListMonitorOptionsOutput() SyntheticsTestOptionsListMonitorOptionsOutput {
	return o
}

func (o SyntheticsTestOptionsListMonitorOptionsOutput) ToSyntheticsTestOptionsListMonitorOptionsOutputWithContext(ctx context.Context) SyntheticsTestOptionsListMonitorOptionsOutput {
	return o
}

func (o SyntheticsTestOptionsListMonitorOptionsOutput) ToSyntheticsTestOptionsListMonitorOptionsPtrOutput() SyntheticsTestOptionsListMonitorOptionsPtrOutput {
	return o.ToSyntheticsTestOptionsListMonitorOptionsPtrOutputWithContext(context.Background())
}

func (o SyntheticsTestOptionsListMonitorOptionsOutput) ToSyntheticsTestOptionsListMonitorOptionsPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListMonitorOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestOptionsListMonitorOptions) *SyntheticsTestOptionsListMonitorOptions {
		return &v
	}).(SyntheticsTestOptionsListMonitorOptionsPtrOutput)
}

func (o SyntheticsTestOptionsListMonitorOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestOptionsListMonitorOptions] {
	return pulumix.Output[SyntheticsTestOptionsListMonitorOptions]{
		OutputState: o.OutputState,
	}
}

// Specify a renotification frequency in minutes. Values available by default are `0`, `10`, `20`, `30`, `40`, `50`, `60`, `90`, `120`, `180`, `240`, `300`, `360`, `720`, `1440`. Defaults to `0`.
func (o SyntheticsTestOptionsListMonitorOptionsOutput) RenotifyInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsListMonitorOptions) *int { return v.RenotifyInterval }).(pulumi.IntPtrOutput)
}

type SyntheticsTestOptionsListMonitorOptionsPtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestOptionsListMonitorOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestOptionsListMonitorOptions)(nil)).Elem()
}

func (o SyntheticsTestOptionsListMonitorOptionsPtrOutput) ToSyntheticsTestOptionsListMonitorOptionsPtrOutput() SyntheticsTestOptionsListMonitorOptionsPtrOutput {
	return o
}

func (o SyntheticsTestOptionsListMonitorOptionsPtrOutput) ToSyntheticsTestOptionsListMonitorOptionsPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListMonitorOptionsPtrOutput {
	return o
}

func (o SyntheticsTestOptionsListMonitorOptionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestOptionsListMonitorOptions] {
	return pulumix.Output[*SyntheticsTestOptionsListMonitorOptions]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestOptionsListMonitorOptionsPtrOutput) Elem() SyntheticsTestOptionsListMonitorOptionsOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsListMonitorOptions) SyntheticsTestOptionsListMonitorOptions {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestOptionsListMonitorOptions
		return ret
	}).(SyntheticsTestOptionsListMonitorOptionsOutput)
}

// Specify a renotification frequency in minutes. Values available by default are `0`, `10`, `20`, `30`, `40`, `50`, `60`, `90`, `120`, `180`, `240`, `300`, `360`, `720`, `1440`. Defaults to `0`.
func (o SyntheticsTestOptionsListMonitorOptionsPtrOutput) RenotifyInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsListMonitorOptions) *int {
		if v == nil {
			return nil
		}
		return v.RenotifyInterval
	}).(pulumi.IntPtrOutput)
}

type SyntheticsTestOptionsListRetry struct {
	// Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.
	Count *int `pulumi:"count"`
	// Interval between a failed test and the next retry in milliseconds. Defaults to `300`.
	Interval *int `pulumi:"interval"`
}

// SyntheticsTestOptionsListRetryInput is an input type that accepts SyntheticsTestOptionsListRetryArgs and SyntheticsTestOptionsListRetryOutput values.
// You can construct a concrete instance of `SyntheticsTestOptionsListRetryInput` via:
//
//	SyntheticsTestOptionsListRetryArgs{...}
type SyntheticsTestOptionsListRetryInput interface {
	pulumi.Input

	ToSyntheticsTestOptionsListRetryOutput() SyntheticsTestOptionsListRetryOutput
	ToSyntheticsTestOptionsListRetryOutputWithContext(context.Context) SyntheticsTestOptionsListRetryOutput
}

type SyntheticsTestOptionsListRetryArgs struct {
	// Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Interval between a failed test and the next retry in milliseconds. Defaults to `300`.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
}

func (SyntheticsTestOptionsListRetryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestOptionsListRetry)(nil)).Elem()
}

func (i SyntheticsTestOptionsListRetryArgs) ToSyntheticsTestOptionsListRetryOutput() SyntheticsTestOptionsListRetryOutput {
	return i.ToSyntheticsTestOptionsListRetryOutputWithContext(context.Background())
}

func (i SyntheticsTestOptionsListRetryArgs) ToSyntheticsTestOptionsListRetryOutputWithContext(ctx context.Context) SyntheticsTestOptionsListRetryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListRetryOutput)
}

func (i SyntheticsTestOptionsListRetryArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestOptionsListRetry] {
	return pulumix.Output[SyntheticsTestOptionsListRetry]{
		OutputState: i.ToSyntheticsTestOptionsListRetryOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestOptionsListRetryArgs) ToSyntheticsTestOptionsListRetryPtrOutput() SyntheticsTestOptionsListRetryPtrOutput {
	return i.ToSyntheticsTestOptionsListRetryPtrOutputWithContext(context.Background())
}

func (i SyntheticsTestOptionsListRetryArgs) ToSyntheticsTestOptionsListRetryPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListRetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListRetryOutput).ToSyntheticsTestOptionsListRetryPtrOutputWithContext(ctx)
}

// SyntheticsTestOptionsListRetryPtrInput is an input type that accepts SyntheticsTestOptionsListRetryArgs, SyntheticsTestOptionsListRetryPtr and SyntheticsTestOptionsListRetryPtrOutput values.
// You can construct a concrete instance of `SyntheticsTestOptionsListRetryPtrInput` via:
//
//	        SyntheticsTestOptionsListRetryArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestOptionsListRetryPtrInput interface {
	pulumi.Input

	ToSyntheticsTestOptionsListRetryPtrOutput() SyntheticsTestOptionsListRetryPtrOutput
	ToSyntheticsTestOptionsListRetryPtrOutputWithContext(context.Context) SyntheticsTestOptionsListRetryPtrOutput
}

type syntheticsTestOptionsListRetryPtrType SyntheticsTestOptionsListRetryArgs

func SyntheticsTestOptionsListRetryPtr(v *SyntheticsTestOptionsListRetryArgs) SyntheticsTestOptionsListRetryPtrInput {
	return (*syntheticsTestOptionsListRetryPtrType)(v)
}

func (*syntheticsTestOptionsListRetryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestOptionsListRetry)(nil)).Elem()
}

func (i *syntheticsTestOptionsListRetryPtrType) ToSyntheticsTestOptionsListRetryPtrOutput() SyntheticsTestOptionsListRetryPtrOutput {
	return i.ToSyntheticsTestOptionsListRetryPtrOutputWithContext(context.Background())
}

func (i *syntheticsTestOptionsListRetryPtrType) ToSyntheticsTestOptionsListRetryPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListRetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListRetryPtrOutput)
}

func (i *syntheticsTestOptionsListRetryPtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestOptionsListRetry] {
	return pulumix.Output[*SyntheticsTestOptionsListRetry]{
		OutputState: i.ToSyntheticsTestOptionsListRetryPtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestOptionsListRetryOutput struct{ *pulumi.OutputState }

func (SyntheticsTestOptionsListRetryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestOptionsListRetry)(nil)).Elem()
}

func (o SyntheticsTestOptionsListRetryOutput) ToSyntheticsTestOptionsListRetryOutput() SyntheticsTestOptionsListRetryOutput {
	return o
}

func (o SyntheticsTestOptionsListRetryOutput) ToSyntheticsTestOptionsListRetryOutputWithContext(ctx context.Context) SyntheticsTestOptionsListRetryOutput {
	return o
}

func (o SyntheticsTestOptionsListRetryOutput) ToSyntheticsTestOptionsListRetryPtrOutput() SyntheticsTestOptionsListRetryPtrOutput {
	return o.ToSyntheticsTestOptionsListRetryPtrOutputWithContext(context.Background())
}

func (o SyntheticsTestOptionsListRetryOutput) ToSyntheticsTestOptionsListRetryPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListRetryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestOptionsListRetry) *SyntheticsTestOptionsListRetry {
		return &v
	}).(SyntheticsTestOptionsListRetryPtrOutput)
}

func (o SyntheticsTestOptionsListRetryOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestOptionsListRetry] {
	return pulumix.Output[SyntheticsTestOptionsListRetry]{
		OutputState: o.OutputState,
	}
}

// Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.
func (o SyntheticsTestOptionsListRetryOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsListRetry) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Interval between a failed test and the next retry in milliseconds. Defaults to `300`.
func (o SyntheticsTestOptionsListRetryOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsListRetry) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type SyntheticsTestOptionsListRetryPtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestOptionsListRetryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestOptionsListRetry)(nil)).Elem()
}

func (o SyntheticsTestOptionsListRetryPtrOutput) ToSyntheticsTestOptionsListRetryPtrOutput() SyntheticsTestOptionsListRetryPtrOutput {
	return o
}

func (o SyntheticsTestOptionsListRetryPtrOutput) ToSyntheticsTestOptionsListRetryPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListRetryPtrOutput {
	return o
}

func (o SyntheticsTestOptionsListRetryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestOptionsListRetry] {
	return pulumix.Output[*SyntheticsTestOptionsListRetry]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestOptionsListRetryPtrOutput) Elem() SyntheticsTestOptionsListRetryOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsListRetry) SyntheticsTestOptionsListRetry {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestOptionsListRetry
		return ret
	}).(SyntheticsTestOptionsListRetryOutput)
}

// Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.
func (o SyntheticsTestOptionsListRetryPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsListRetry) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// Interval between a failed test and the next retry in milliseconds. Defaults to `300`.
func (o SyntheticsTestOptionsListRetryPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsListRetry) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

type SyntheticsTestOptionsListRumSettings struct {
	// RUM application ID used to collect RUM data for the browser test.
	ApplicationId *string `pulumi:"applicationId"`
	// RUM application API key ID used to collect RUM data for the browser test.
	ClientTokenId *int `pulumi:"clientTokenId"`
	// Determines whether RUM data is collected during test runs.
	IsEnabled bool `pulumi:"isEnabled"`
}

// SyntheticsTestOptionsListRumSettingsInput is an input type that accepts SyntheticsTestOptionsListRumSettingsArgs and SyntheticsTestOptionsListRumSettingsOutput values.
// You can construct a concrete instance of `SyntheticsTestOptionsListRumSettingsInput` via:
//
//	SyntheticsTestOptionsListRumSettingsArgs{...}
type SyntheticsTestOptionsListRumSettingsInput interface {
	pulumi.Input

	ToSyntheticsTestOptionsListRumSettingsOutput() SyntheticsTestOptionsListRumSettingsOutput
	ToSyntheticsTestOptionsListRumSettingsOutputWithContext(context.Context) SyntheticsTestOptionsListRumSettingsOutput
}

type SyntheticsTestOptionsListRumSettingsArgs struct {
	// RUM application ID used to collect RUM data for the browser test.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// RUM application API key ID used to collect RUM data for the browser test.
	ClientTokenId pulumi.IntPtrInput `pulumi:"clientTokenId"`
	// Determines whether RUM data is collected during test runs.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
}

func (SyntheticsTestOptionsListRumSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestOptionsListRumSettings)(nil)).Elem()
}

func (i SyntheticsTestOptionsListRumSettingsArgs) ToSyntheticsTestOptionsListRumSettingsOutput() SyntheticsTestOptionsListRumSettingsOutput {
	return i.ToSyntheticsTestOptionsListRumSettingsOutputWithContext(context.Background())
}

func (i SyntheticsTestOptionsListRumSettingsArgs) ToSyntheticsTestOptionsListRumSettingsOutputWithContext(ctx context.Context) SyntheticsTestOptionsListRumSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListRumSettingsOutput)
}

func (i SyntheticsTestOptionsListRumSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestOptionsListRumSettings] {
	return pulumix.Output[SyntheticsTestOptionsListRumSettings]{
		OutputState: i.ToSyntheticsTestOptionsListRumSettingsOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestOptionsListRumSettingsArgs) ToSyntheticsTestOptionsListRumSettingsPtrOutput() SyntheticsTestOptionsListRumSettingsPtrOutput {
	return i.ToSyntheticsTestOptionsListRumSettingsPtrOutputWithContext(context.Background())
}

func (i SyntheticsTestOptionsListRumSettingsArgs) ToSyntheticsTestOptionsListRumSettingsPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListRumSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListRumSettingsOutput).ToSyntheticsTestOptionsListRumSettingsPtrOutputWithContext(ctx)
}

// SyntheticsTestOptionsListRumSettingsPtrInput is an input type that accepts SyntheticsTestOptionsListRumSettingsArgs, SyntheticsTestOptionsListRumSettingsPtr and SyntheticsTestOptionsListRumSettingsPtrOutput values.
// You can construct a concrete instance of `SyntheticsTestOptionsListRumSettingsPtrInput` via:
//
//	        SyntheticsTestOptionsListRumSettingsArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestOptionsListRumSettingsPtrInput interface {
	pulumi.Input

	ToSyntheticsTestOptionsListRumSettingsPtrOutput() SyntheticsTestOptionsListRumSettingsPtrOutput
	ToSyntheticsTestOptionsListRumSettingsPtrOutputWithContext(context.Context) SyntheticsTestOptionsListRumSettingsPtrOutput
}

type syntheticsTestOptionsListRumSettingsPtrType SyntheticsTestOptionsListRumSettingsArgs

func SyntheticsTestOptionsListRumSettingsPtr(v *SyntheticsTestOptionsListRumSettingsArgs) SyntheticsTestOptionsListRumSettingsPtrInput {
	return (*syntheticsTestOptionsListRumSettingsPtrType)(v)
}

func (*syntheticsTestOptionsListRumSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestOptionsListRumSettings)(nil)).Elem()
}

func (i *syntheticsTestOptionsListRumSettingsPtrType) ToSyntheticsTestOptionsListRumSettingsPtrOutput() SyntheticsTestOptionsListRumSettingsPtrOutput {
	return i.ToSyntheticsTestOptionsListRumSettingsPtrOutputWithContext(context.Background())
}

func (i *syntheticsTestOptionsListRumSettingsPtrType) ToSyntheticsTestOptionsListRumSettingsPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListRumSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListRumSettingsPtrOutput)
}

func (i *syntheticsTestOptionsListRumSettingsPtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestOptionsListRumSettings] {
	return pulumix.Output[*SyntheticsTestOptionsListRumSettings]{
		OutputState: i.ToSyntheticsTestOptionsListRumSettingsPtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestOptionsListRumSettingsOutput struct{ *pulumi.OutputState }

func (SyntheticsTestOptionsListRumSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestOptionsListRumSettings)(nil)).Elem()
}

func (o SyntheticsTestOptionsListRumSettingsOutput) ToSyntheticsTestOptionsListRumSettingsOutput() SyntheticsTestOptionsListRumSettingsOutput {
	return o
}

func (o SyntheticsTestOptionsListRumSettingsOutput) ToSyntheticsTestOptionsListRumSettingsOutputWithContext(ctx context.Context) SyntheticsTestOptionsListRumSettingsOutput {
	return o
}

func (o SyntheticsTestOptionsListRumSettingsOutput) ToSyntheticsTestOptionsListRumSettingsPtrOutput() SyntheticsTestOptionsListRumSettingsPtrOutput {
	return o.ToSyntheticsTestOptionsListRumSettingsPtrOutputWithContext(context.Background())
}

func (o SyntheticsTestOptionsListRumSettingsOutput) ToSyntheticsTestOptionsListRumSettingsPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListRumSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestOptionsListRumSettings) *SyntheticsTestOptionsListRumSettings {
		return &v
	}).(SyntheticsTestOptionsListRumSettingsPtrOutput)
}

func (o SyntheticsTestOptionsListRumSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestOptionsListRumSettings] {
	return pulumix.Output[SyntheticsTestOptionsListRumSettings]{
		OutputState: o.OutputState,
	}
}

// RUM application ID used to collect RUM data for the browser test.
func (o SyntheticsTestOptionsListRumSettingsOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsListRumSettings) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// RUM application API key ID used to collect RUM data for the browser test.
func (o SyntheticsTestOptionsListRumSettingsOutput) ClientTokenId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsListRumSettings) *int { return v.ClientTokenId }).(pulumi.IntPtrOutput)
}

// Determines whether RUM data is collected during test runs.
func (o SyntheticsTestOptionsListRumSettingsOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsListRumSettings) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

type SyntheticsTestOptionsListRumSettingsPtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestOptionsListRumSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestOptionsListRumSettings)(nil)).Elem()
}

func (o SyntheticsTestOptionsListRumSettingsPtrOutput) ToSyntheticsTestOptionsListRumSettingsPtrOutput() SyntheticsTestOptionsListRumSettingsPtrOutput {
	return o
}

func (o SyntheticsTestOptionsListRumSettingsPtrOutput) ToSyntheticsTestOptionsListRumSettingsPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListRumSettingsPtrOutput {
	return o
}

func (o SyntheticsTestOptionsListRumSettingsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestOptionsListRumSettings] {
	return pulumix.Output[*SyntheticsTestOptionsListRumSettings]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestOptionsListRumSettingsPtrOutput) Elem() SyntheticsTestOptionsListRumSettingsOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsListRumSettings) SyntheticsTestOptionsListRumSettings {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestOptionsListRumSettings
		return ret
	}).(SyntheticsTestOptionsListRumSettingsOutput)
}

// RUM application ID used to collect RUM data for the browser test.
func (o SyntheticsTestOptionsListRumSettingsPtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsListRumSettings) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

// RUM application API key ID used to collect RUM data for the browser test.
func (o SyntheticsTestOptionsListRumSettingsPtrOutput) ClientTokenId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsListRumSettings) *int {
		if v == nil {
			return nil
		}
		return v.ClientTokenId
	}).(pulumi.IntPtrOutput)
}

// Determines whether RUM data is collected during test runs.
func (o SyntheticsTestOptionsListRumSettingsPtrOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsListRumSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.IsEnabled
	}).(pulumi.BoolPtrOutput)
}

type SyntheticsTestOptionsListScheduling struct {
	// Array containing objects describing the scheduling pattern to apply to each day.
	Timeframes []SyntheticsTestOptionsListSchedulingTimeframe `pulumi:"timeframes"`
	// Timezone in which the timeframe is based.
	Timezone string `pulumi:"timezone"`
}

// SyntheticsTestOptionsListSchedulingInput is an input type that accepts SyntheticsTestOptionsListSchedulingArgs and SyntheticsTestOptionsListSchedulingOutput values.
// You can construct a concrete instance of `SyntheticsTestOptionsListSchedulingInput` via:
//
//	SyntheticsTestOptionsListSchedulingArgs{...}
type SyntheticsTestOptionsListSchedulingInput interface {
	pulumi.Input

	ToSyntheticsTestOptionsListSchedulingOutput() SyntheticsTestOptionsListSchedulingOutput
	ToSyntheticsTestOptionsListSchedulingOutputWithContext(context.Context) SyntheticsTestOptionsListSchedulingOutput
}

type SyntheticsTestOptionsListSchedulingArgs struct {
	// Array containing objects describing the scheduling pattern to apply to each day.
	Timeframes SyntheticsTestOptionsListSchedulingTimeframeArrayInput `pulumi:"timeframes"`
	// Timezone in which the timeframe is based.
	Timezone pulumi.StringInput `pulumi:"timezone"`
}

func (SyntheticsTestOptionsListSchedulingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestOptionsListScheduling)(nil)).Elem()
}

func (i SyntheticsTestOptionsListSchedulingArgs) ToSyntheticsTestOptionsListSchedulingOutput() SyntheticsTestOptionsListSchedulingOutput {
	return i.ToSyntheticsTestOptionsListSchedulingOutputWithContext(context.Background())
}

func (i SyntheticsTestOptionsListSchedulingArgs) ToSyntheticsTestOptionsListSchedulingOutputWithContext(ctx context.Context) SyntheticsTestOptionsListSchedulingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListSchedulingOutput)
}

func (i SyntheticsTestOptionsListSchedulingArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestOptionsListScheduling] {
	return pulumix.Output[SyntheticsTestOptionsListScheduling]{
		OutputState: i.ToSyntheticsTestOptionsListSchedulingOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestOptionsListSchedulingArgs) ToSyntheticsTestOptionsListSchedulingPtrOutput() SyntheticsTestOptionsListSchedulingPtrOutput {
	return i.ToSyntheticsTestOptionsListSchedulingPtrOutputWithContext(context.Background())
}

func (i SyntheticsTestOptionsListSchedulingArgs) ToSyntheticsTestOptionsListSchedulingPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListSchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListSchedulingOutput).ToSyntheticsTestOptionsListSchedulingPtrOutputWithContext(ctx)
}

// SyntheticsTestOptionsListSchedulingPtrInput is an input type that accepts SyntheticsTestOptionsListSchedulingArgs, SyntheticsTestOptionsListSchedulingPtr and SyntheticsTestOptionsListSchedulingPtrOutput values.
// You can construct a concrete instance of `SyntheticsTestOptionsListSchedulingPtrInput` via:
//
//	        SyntheticsTestOptionsListSchedulingArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestOptionsListSchedulingPtrInput interface {
	pulumi.Input

	ToSyntheticsTestOptionsListSchedulingPtrOutput() SyntheticsTestOptionsListSchedulingPtrOutput
	ToSyntheticsTestOptionsListSchedulingPtrOutputWithContext(context.Context) SyntheticsTestOptionsListSchedulingPtrOutput
}

type syntheticsTestOptionsListSchedulingPtrType SyntheticsTestOptionsListSchedulingArgs

func SyntheticsTestOptionsListSchedulingPtr(v *SyntheticsTestOptionsListSchedulingArgs) SyntheticsTestOptionsListSchedulingPtrInput {
	return (*syntheticsTestOptionsListSchedulingPtrType)(v)
}

func (*syntheticsTestOptionsListSchedulingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestOptionsListScheduling)(nil)).Elem()
}

func (i *syntheticsTestOptionsListSchedulingPtrType) ToSyntheticsTestOptionsListSchedulingPtrOutput() SyntheticsTestOptionsListSchedulingPtrOutput {
	return i.ToSyntheticsTestOptionsListSchedulingPtrOutputWithContext(context.Background())
}

func (i *syntheticsTestOptionsListSchedulingPtrType) ToSyntheticsTestOptionsListSchedulingPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListSchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListSchedulingPtrOutput)
}

func (i *syntheticsTestOptionsListSchedulingPtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestOptionsListScheduling] {
	return pulumix.Output[*SyntheticsTestOptionsListScheduling]{
		OutputState: i.ToSyntheticsTestOptionsListSchedulingPtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestOptionsListSchedulingOutput struct{ *pulumi.OutputState }

func (SyntheticsTestOptionsListSchedulingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestOptionsListScheduling)(nil)).Elem()
}

func (o SyntheticsTestOptionsListSchedulingOutput) ToSyntheticsTestOptionsListSchedulingOutput() SyntheticsTestOptionsListSchedulingOutput {
	return o
}

func (o SyntheticsTestOptionsListSchedulingOutput) ToSyntheticsTestOptionsListSchedulingOutputWithContext(ctx context.Context) SyntheticsTestOptionsListSchedulingOutput {
	return o
}

func (o SyntheticsTestOptionsListSchedulingOutput) ToSyntheticsTestOptionsListSchedulingPtrOutput() SyntheticsTestOptionsListSchedulingPtrOutput {
	return o.ToSyntheticsTestOptionsListSchedulingPtrOutputWithContext(context.Background())
}

func (o SyntheticsTestOptionsListSchedulingOutput) ToSyntheticsTestOptionsListSchedulingPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListSchedulingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestOptionsListScheduling) *SyntheticsTestOptionsListScheduling {
		return &v
	}).(SyntheticsTestOptionsListSchedulingPtrOutput)
}

func (o SyntheticsTestOptionsListSchedulingOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestOptionsListScheduling] {
	return pulumix.Output[SyntheticsTestOptionsListScheduling]{
		OutputState: o.OutputState,
	}
}

// Array containing objects describing the scheduling pattern to apply to each day.
func (o SyntheticsTestOptionsListSchedulingOutput) Timeframes() SyntheticsTestOptionsListSchedulingTimeframeArrayOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsListScheduling) []SyntheticsTestOptionsListSchedulingTimeframe {
		return v.Timeframes
	}).(SyntheticsTestOptionsListSchedulingTimeframeArrayOutput)
}

// Timezone in which the timeframe is based.
func (o SyntheticsTestOptionsListSchedulingOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsListScheduling) string { return v.Timezone }).(pulumi.StringOutput)
}

type SyntheticsTestOptionsListSchedulingPtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestOptionsListSchedulingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestOptionsListScheduling)(nil)).Elem()
}

func (o SyntheticsTestOptionsListSchedulingPtrOutput) ToSyntheticsTestOptionsListSchedulingPtrOutput() SyntheticsTestOptionsListSchedulingPtrOutput {
	return o
}

func (o SyntheticsTestOptionsListSchedulingPtrOutput) ToSyntheticsTestOptionsListSchedulingPtrOutputWithContext(ctx context.Context) SyntheticsTestOptionsListSchedulingPtrOutput {
	return o
}

func (o SyntheticsTestOptionsListSchedulingPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestOptionsListScheduling] {
	return pulumix.Output[*SyntheticsTestOptionsListScheduling]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestOptionsListSchedulingPtrOutput) Elem() SyntheticsTestOptionsListSchedulingOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsListScheduling) SyntheticsTestOptionsListScheduling {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestOptionsListScheduling
		return ret
	}).(SyntheticsTestOptionsListSchedulingOutput)
}

// Array containing objects describing the scheduling pattern to apply to each day.
func (o SyntheticsTestOptionsListSchedulingPtrOutput) Timeframes() SyntheticsTestOptionsListSchedulingTimeframeArrayOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsListScheduling) []SyntheticsTestOptionsListSchedulingTimeframe {
		if v == nil {
			return nil
		}
		return v.Timeframes
	}).(SyntheticsTestOptionsListSchedulingTimeframeArrayOutput)
}

// Timezone in which the timeframe is based.
func (o SyntheticsTestOptionsListSchedulingPtrOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestOptionsListScheduling) *string {
		if v == nil {
			return nil
		}
		return &v.Timezone
	}).(pulumi.StringPtrOutput)
}

type SyntheticsTestOptionsListSchedulingTimeframe struct {
	// Number representing the day of the week
	Day int `pulumi:"day"`
	// The hour of the day on which scheduling starts.
	From string `pulumi:"from"`
	// The hour of the day on which scheduling ends.
	To string `pulumi:"to"`
}

// SyntheticsTestOptionsListSchedulingTimeframeInput is an input type that accepts SyntheticsTestOptionsListSchedulingTimeframeArgs and SyntheticsTestOptionsListSchedulingTimeframeOutput values.
// You can construct a concrete instance of `SyntheticsTestOptionsListSchedulingTimeframeInput` via:
//
//	SyntheticsTestOptionsListSchedulingTimeframeArgs{...}
type SyntheticsTestOptionsListSchedulingTimeframeInput interface {
	pulumi.Input

	ToSyntheticsTestOptionsListSchedulingTimeframeOutput() SyntheticsTestOptionsListSchedulingTimeframeOutput
	ToSyntheticsTestOptionsListSchedulingTimeframeOutputWithContext(context.Context) SyntheticsTestOptionsListSchedulingTimeframeOutput
}

type SyntheticsTestOptionsListSchedulingTimeframeArgs struct {
	// Number representing the day of the week
	Day pulumi.IntInput `pulumi:"day"`
	// The hour of the day on which scheduling starts.
	From pulumi.StringInput `pulumi:"from"`
	// The hour of the day on which scheduling ends.
	To pulumi.StringInput `pulumi:"to"`
}

func (SyntheticsTestOptionsListSchedulingTimeframeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestOptionsListSchedulingTimeframe)(nil)).Elem()
}

func (i SyntheticsTestOptionsListSchedulingTimeframeArgs) ToSyntheticsTestOptionsListSchedulingTimeframeOutput() SyntheticsTestOptionsListSchedulingTimeframeOutput {
	return i.ToSyntheticsTestOptionsListSchedulingTimeframeOutputWithContext(context.Background())
}

func (i SyntheticsTestOptionsListSchedulingTimeframeArgs) ToSyntheticsTestOptionsListSchedulingTimeframeOutputWithContext(ctx context.Context) SyntheticsTestOptionsListSchedulingTimeframeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListSchedulingTimeframeOutput)
}

func (i SyntheticsTestOptionsListSchedulingTimeframeArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestOptionsListSchedulingTimeframe] {
	return pulumix.Output[SyntheticsTestOptionsListSchedulingTimeframe]{
		OutputState: i.ToSyntheticsTestOptionsListSchedulingTimeframeOutputWithContext(ctx).OutputState,
	}
}

// SyntheticsTestOptionsListSchedulingTimeframeArrayInput is an input type that accepts SyntheticsTestOptionsListSchedulingTimeframeArray and SyntheticsTestOptionsListSchedulingTimeframeArrayOutput values.
// You can construct a concrete instance of `SyntheticsTestOptionsListSchedulingTimeframeArrayInput` via:
//
//	SyntheticsTestOptionsListSchedulingTimeframeArray{ SyntheticsTestOptionsListSchedulingTimeframeArgs{...} }
type SyntheticsTestOptionsListSchedulingTimeframeArrayInput interface {
	pulumi.Input

	ToSyntheticsTestOptionsListSchedulingTimeframeArrayOutput() SyntheticsTestOptionsListSchedulingTimeframeArrayOutput
	ToSyntheticsTestOptionsListSchedulingTimeframeArrayOutputWithContext(context.Context) SyntheticsTestOptionsListSchedulingTimeframeArrayOutput
}

type SyntheticsTestOptionsListSchedulingTimeframeArray []SyntheticsTestOptionsListSchedulingTimeframeInput

func (SyntheticsTestOptionsListSchedulingTimeframeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticsTestOptionsListSchedulingTimeframe)(nil)).Elem()
}

func (i SyntheticsTestOptionsListSchedulingTimeframeArray) ToSyntheticsTestOptionsListSchedulingTimeframeArrayOutput() SyntheticsTestOptionsListSchedulingTimeframeArrayOutput {
	return i.ToSyntheticsTestOptionsListSchedulingTimeframeArrayOutputWithContext(context.Background())
}

func (i SyntheticsTestOptionsListSchedulingTimeframeArray) ToSyntheticsTestOptionsListSchedulingTimeframeArrayOutputWithContext(ctx context.Context) SyntheticsTestOptionsListSchedulingTimeframeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOptionsListSchedulingTimeframeArrayOutput)
}

func (i SyntheticsTestOptionsListSchedulingTimeframeArray) ToOutput(ctx context.Context) pulumix.Output[[]SyntheticsTestOptionsListSchedulingTimeframe] {
	return pulumix.Output[[]SyntheticsTestOptionsListSchedulingTimeframe]{
		OutputState: i.ToSyntheticsTestOptionsListSchedulingTimeframeArrayOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestOptionsListSchedulingTimeframeOutput struct{ *pulumi.OutputState }

func (SyntheticsTestOptionsListSchedulingTimeframeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestOptionsListSchedulingTimeframe)(nil)).Elem()
}

func (o SyntheticsTestOptionsListSchedulingTimeframeOutput) ToSyntheticsTestOptionsListSchedulingTimeframeOutput() SyntheticsTestOptionsListSchedulingTimeframeOutput {
	return o
}

func (o SyntheticsTestOptionsListSchedulingTimeframeOutput) ToSyntheticsTestOptionsListSchedulingTimeframeOutputWithContext(ctx context.Context) SyntheticsTestOptionsListSchedulingTimeframeOutput {
	return o
}

func (o SyntheticsTestOptionsListSchedulingTimeframeOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestOptionsListSchedulingTimeframe] {
	return pulumix.Output[SyntheticsTestOptionsListSchedulingTimeframe]{
		OutputState: o.OutputState,
	}
}

// Number representing the day of the week
func (o SyntheticsTestOptionsListSchedulingTimeframeOutput) Day() pulumi.IntOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsListSchedulingTimeframe) int { return v.Day }).(pulumi.IntOutput)
}

// The hour of the day on which scheduling starts.
func (o SyntheticsTestOptionsListSchedulingTimeframeOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsListSchedulingTimeframe) string { return v.From }).(pulumi.StringOutput)
}

// The hour of the day on which scheduling ends.
func (o SyntheticsTestOptionsListSchedulingTimeframeOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestOptionsListSchedulingTimeframe) string { return v.To }).(pulumi.StringOutput)
}

type SyntheticsTestOptionsListSchedulingTimeframeArrayOutput struct{ *pulumi.OutputState }

func (SyntheticsTestOptionsListSchedulingTimeframeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticsTestOptionsListSchedulingTimeframe)(nil)).Elem()
}

func (o SyntheticsTestOptionsListSchedulingTimeframeArrayOutput) ToSyntheticsTestOptionsListSchedulingTimeframeArrayOutput() SyntheticsTestOptionsListSchedulingTimeframeArrayOutput {
	return o
}

func (o SyntheticsTestOptionsListSchedulingTimeframeArrayOutput) ToSyntheticsTestOptionsListSchedulingTimeframeArrayOutputWithContext(ctx context.Context) SyntheticsTestOptionsListSchedulingTimeframeArrayOutput {
	return o
}

func (o SyntheticsTestOptionsListSchedulingTimeframeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SyntheticsTestOptionsListSchedulingTimeframe] {
	return pulumix.Output[[]SyntheticsTestOptionsListSchedulingTimeframe]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestOptionsListSchedulingTimeframeArrayOutput) Index(i pulumi.IntInput) SyntheticsTestOptionsListSchedulingTimeframeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticsTestOptionsListSchedulingTimeframe {
		return vs[0].([]SyntheticsTestOptionsListSchedulingTimeframe)[vs[1].(int)]
	}).(SyntheticsTestOptionsListSchedulingTimeframeOutput)
}

type SyntheticsTestRequestBasicauth struct {
	// Access key for `SIGV4` authentication.
	AccessKey *string `pulumi:"accessKey"`
	// Access token url for `oauth-client` or `oauth-rop` authentication.
	AccessTokenUrl *string `pulumi:"accessTokenUrl"`
	// Audience for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Audience *string `pulumi:"audience"`
	// Client ID for `oauth-client` or `oauth-rop` authentication.
	ClientId *string `pulumi:"clientId"`
	// Client secret for `oauth-client` or `oauth-rop` authentication.
	ClientSecret *string `pulumi:"clientSecret"`
	// Domain for `ntlm` authentication.
	Domain *string `pulumi:"domain"`
	// Password for authentication.
	Password *string `pulumi:"password"`
	// Region for `SIGV4` authentication.
	Region *string `pulumi:"region"`
	// Resource for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Resource *string `pulumi:"resource"`
	// Scope for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Scope *string `pulumi:"scope"`
	// Secret key for `SIGV4` authentication.
	SecretKey *string `pulumi:"secretKey"`
	// Service name for `SIGV4` authentication.
	ServiceName *string `pulumi:"serviceName"`
	// Session token for `SIGV4` authentication.
	SessionToken *string `pulumi:"sessionToken"`
	// Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.
	TokenApiAuthentication *string `pulumi:"tokenApiAuthentication"`
	// Type of basic authentication to use when performing the test. Defaults to `"web"`.
	Type *string `pulumi:"type"`
	// Username for authentication.
	Username *string `pulumi:"username"`
	// Workstation for `ntlm` authentication.
	Workstation *string `pulumi:"workstation"`
}

// SyntheticsTestRequestBasicauthInput is an input type that accepts SyntheticsTestRequestBasicauthArgs and SyntheticsTestRequestBasicauthOutput values.
// You can construct a concrete instance of `SyntheticsTestRequestBasicauthInput` via:
//
//	SyntheticsTestRequestBasicauthArgs{...}
type SyntheticsTestRequestBasicauthInput interface {
	pulumi.Input

	ToSyntheticsTestRequestBasicauthOutput() SyntheticsTestRequestBasicauthOutput
	ToSyntheticsTestRequestBasicauthOutputWithContext(context.Context) SyntheticsTestRequestBasicauthOutput
}

type SyntheticsTestRequestBasicauthArgs struct {
	// Access key for `SIGV4` authentication.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// Access token url for `oauth-client` or `oauth-rop` authentication.
	AccessTokenUrl pulumi.StringPtrInput `pulumi:"accessTokenUrl"`
	// Audience for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// Client ID for `oauth-client` or `oauth-rop` authentication.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Client secret for `oauth-client` or `oauth-rop` authentication.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// Domain for `ntlm` authentication.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Password for authentication.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Region for `SIGV4` authentication.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Resource for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// Scope for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// Secret key for `SIGV4` authentication.
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// Service name for `SIGV4` authentication.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
	// Session token for `SIGV4` authentication.
	SessionToken pulumi.StringPtrInput `pulumi:"sessionToken"`
	// Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.
	TokenApiAuthentication pulumi.StringPtrInput `pulumi:"tokenApiAuthentication"`
	// Type of basic authentication to use when performing the test. Defaults to `"web"`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Username for authentication.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// Workstation for `ntlm` authentication.
	Workstation pulumi.StringPtrInput `pulumi:"workstation"`
}

func (SyntheticsTestRequestBasicauthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestRequestBasicauth)(nil)).Elem()
}

func (i SyntheticsTestRequestBasicauthArgs) ToSyntheticsTestRequestBasicauthOutput() SyntheticsTestRequestBasicauthOutput {
	return i.ToSyntheticsTestRequestBasicauthOutputWithContext(context.Background())
}

func (i SyntheticsTestRequestBasicauthArgs) ToSyntheticsTestRequestBasicauthOutputWithContext(ctx context.Context) SyntheticsTestRequestBasicauthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestBasicauthOutput)
}

func (i SyntheticsTestRequestBasicauthArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestRequestBasicauth] {
	return pulumix.Output[SyntheticsTestRequestBasicauth]{
		OutputState: i.ToSyntheticsTestRequestBasicauthOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestRequestBasicauthArgs) ToSyntheticsTestRequestBasicauthPtrOutput() SyntheticsTestRequestBasicauthPtrOutput {
	return i.ToSyntheticsTestRequestBasicauthPtrOutputWithContext(context.Background())
}

func (i SyntheticsTestRequestBasicauthArgs) ToSyntheticsTestRequestBasicauthPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestBasicauthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestBasicauthOutput).ToSyntheticsTestRequestBasicauthPtrOutputWithContext(ctx)
}

// SyntheticsTestRequestBasicauthPtrInput is an input type that accepts SyntheticsTestRequestBasicauthArgs, SyntheticsTestRequestBasicauthPtr and SyntheticsTestRequestBasicauthPtrOutput values.
// You can construct a concrete instance of `SyntheticsTestRequestBasicauthPtrInput` via:
//
//	        SyntheticsTestRequestBasicauthArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestRequestBasicauthPtrInput interface {
	pulumi.Input

	ToSyntheticsTestRequestBasicauthPtrOutput() SyntheticsTestRequestBasicauthPtrOutput
	ToSyntheticsTestRequestBasicauthPtrOutputWithContext(context.Context) SyntheticsTestRequestBasicauthPtrOutput
}

type syntheticsTestRequestBasicauthPtrType SyntheticsTestRequestBasicauthArgs

func SyntheticsTestRequestBasicauthPtr(v *SyntheticsTestRequestBasicauthArgs) SyntheticsTestRequestBasicauthPtrInput {
	return (*syntheticsTestRequestBasicauthPtrType)(v)
}

func (*syntheticsTestRequestBasicauthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestRequestBasicauth)(nil)).Elem()
}

func (i *syntheticsTestRequestBasicauthPtrType) ToSyntheticsTestRequestBasicauthPtrOutput() SyntheticsTestRequestBasicauthPtrOutput {
	return i.ToSyntheticsTestRequestBasicauthPtrOutputWithContext(context.Background())
}

func (i *syntheticsTestRequestBasicauthPtrType) ToSyntheticsTestRequestBasicauthPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestBasicauthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestBasicauthPtrOutput)
}

func (i *syntheticsTestRequestBasicauthPtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestRequestBasicauth] {
	return pulumix.Output[*SyntheticsTestRequestBasicauth]{
		OutputState: i.ToSyntheticsTestRequestBasicauthPtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestRequestBasicauthOutput struct{ *pulumi.OutputState }

func (SyntheticsTestRequestBasicauthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestRequestBasicauth)(nil)).Elem()
}

func (o SyntheticsTestRequestBasicauthOutput) ToSyntheticsTestRequestBasicauthOutput() SyntheticsTestRequestBasicauthOutput {
	return o
}

func (o SyntheticsTestRequestBasicauthOutput) ToSyntheticsTestRequestBasicauthOutputWithContext(ctx context.Context) SyntheticsTestRequestBasicauthOutput {
	return o
}

func (o SyntheticsTestRequestBasicauthOutput) ToSyntheticsTestRequestBasicauthPtrOutput() SyntheticsTestRequestBasicauthPtrOutput {
	return o.ToSyntheticsTestRequestBasicauthPtrOutputWithContext(context.Background())
}

func (o SyntheticsTestRequestBasicauthOutput) ToSyntheticsTestRequestBasicauthPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestBasicauthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestRequestBasicauth) *SyntheticsTestRequestBasicauth {
		return &v
	}).(SyntheticsTestRequestBasicauthPtrOutput)
}

func (o SyntheticsTestRequestBasicauthOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestRequestBasicauth] {
	return pulumix.Output[SyntheticsTestRequestBasicauth]{
		OutputState: o.OutputState,
	}
}

// Access key for `SIGV4` authentication.
func (o SyntheticsTestRequestBasicauthOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestBasicauth) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// Access token url for `oauth-client` or `oauth-rop` authentication.
func (o SyntheticsTestRequestBasicauthOutput) AccessTokenUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestBasicauth) *string { return v.AccessTokenUrl }).(pulumi.StringPtrOutput)
}

// Audience for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
func (o SyntheticsTestRequestBasicauthOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestBasicauth) *string { return v.Audience }).(pulumi.StringPtrOutput)
}

// Client ID for `oauth-client` or `oauth-rop` authentication.
func (o SyntheticsTestRequestBasicauthOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestBasicauth) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Client secret for `oauth-client` or `oauth-rop` authentication.
func (o SyntheticsTestRequestBasicauthOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestBasicauth) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Domain for `ntlm` authentication.
func (o SyntheticsTestRequestBasicauthOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestBasicauth) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// Password for authentication.
func (o SyntheticsTestRequestBasicauthOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestBasicauth) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Region for `SIGV4` authentication.
func (o SyntheticsTestRequestBasicauthOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestBasicauth) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// Resource for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
func (o SyntheticsTestRequestBasicauthOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestBasicauth) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// Scope for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
func (o SyntheticsTestRequestBasicauthOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestBasicauth) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// Secret key for `SIGV4` authentication.
func (o SyntheticsTestRequestBasicauthOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestBasicauth) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// Service name for `SIGV4` authentication.
func (o SyntheticsTestRequestBasicauthOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestBasicauth) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// Session token for `SIGV4` authentication.
func (o SyntheticsTestRequestBasicauthOutput) SessionToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestBasicauth) *string { return v.SessionToken }).(pulumi.StringPtrOutput)
}

// Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.
func (o SyntheticsTestRequestBasicauthOutput) TokenApiAuthentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestBasicauth) *string { return v.TokenApiAuthentication }).(pulumi.StringPtrOutput)
}

// Type of basic authentication to use when performing the test. Defaults to `"web"`.
func (o SyntheticsTestRequestBasicauthOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestBasicauth) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Username for authentication.
func (o SyntheticsTestRequestBasicauthOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestBasicauth) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Workstation for `ntlm` authentication.
func (o SyntheticsTestRequestBasicauthOutput) Workstation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestBasicauth) *string { return v.Workstation }).(pulumi.StringPtrOutput)
}

type SyntheticsTestRequestBasicauthPtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestRequestBasicauthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestRequestBasicauth)(nil)).Elem()
}

func (o SyntheticsTestRequestBasicauthPtrOutput) ToSyntheticsTestRequestBasicauthPtrOutput() SyntheticsTestRequestBasicauthPtrOutput {
	return o
}

func (o SyntheticsTestRequestBasicauthPtrOutput) ToSyntheticsTestRequestBasicauthPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestBasicauthPtrOutput {
	return o
}

func (o SyntheticsTestRequestBasicauthPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestRequestBasicauth] {
	return pulumix.Output[*SyntheticsTestRequestBasicauth]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestRequestBasicauthPtrOutput) Elem() SyntheticsTestRequestBasicauthOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) SyntheticsTestRequestBasicauth {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestRequestBasicauth
		return ret
	}).(SyntheticsTestRequestBasicauthOutput)
}

// Access key for `SIGV4` authentication.
func (o SyntheticsTestRequestBasicauthPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// Access token url for `oauth-client` or `oauth-rop` authentication.
func (o SyntheticsTestRequestBasicauthPtrOutput) AccessTokenUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) *string {
		if v == nil {
			return nil
		}
		return v.AccessTokenUrl
	}).(pulumi.StringPtrOutput)
}

// Audience for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
func (o SyntheticsTestRequestBasicauthPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// Client ID for `oauth-client` or `oauth-rop` authentication.
func (o SyntheticsTestRequestBasicauthPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Client secret for `oauth-client` or `oauth-rop` authentication.
func (o SyntheticsTestRequestBasicauthPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Domain for `ntlm` authentication.
func (o SyntheticsTestRequestBasicauthPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

// Password for authentication.
func (o SyntheticsTestRequestBasicauthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Region for `SIGV4` authentication.
func (o SyntheticsTestRequestBasicauthPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// Resource for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
func (o SyntheticsTestRequestBasicauthPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// Scope for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
func (o SyntheticsTestRequestBasicauthPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// Secret key for `SIGV4` authentication.
func (o SyntheticsTestRequestBasicauthPtrOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) *string {
		if v == nil {
			return nil
		}
		return v.SecretKey
	}).(pulumi.StringPtrOutput)
}

// Service name for `SIGV4` authentication.
func (o SyntheticsTestRequestBasicauthPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// Session token for `SIGV4` authentication.
func (o SyntheticsTestRequestBasicauthPtrOutput) SessionToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) *string {
		if v == nil {
			return nil
		}
		return v.SessionToken
	}).(pulumi.StringPtrOutput)
}

// Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.
func (o SyntheticsTestRequestBasicauthPtrOutput) TokenApiAuthentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) *string {
		if v == nil {
			return nil
		}
		return v.TokenApiAuthentication
	}).(pulumi.StringPtrOutput)
}

// Type of basic authentication to use when performing the test. Defaults to `"web"`.
func (o SyntheticsTestRequestBasicauthPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Username for authentication.
func (o SyntheticsTestRequestBasicauthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Workstation for `ntlm` authentication.
func (o SyntheticsTestRequestBasicauthPtrOutput) Workstation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestBasicauth) *string {
		if v == nil {
			return nil
		}
		return v.Workstation
	}).(pulumi.StringPtrOutput)
}

type SyntheticsTestRequestClientCertificate struct {
	Cert SyntheticsTestRequestClientCertificateCert `pulumi:"cert"`
	Key  SyntheticsTestRequestClientCertificateKey  `pulumi:"key"`
}

// SyntheticsTestRequestClientCertificateInput is an input type that accepts SyntheticsTestRequestClientCertificateArgs and SyntheticsTestRequestClientCertificateOutput values.
// You can construct a concrete instance of `SyntheticsTestRequestClientCertificateInput` via:
//
//	SyntheticsTestRequestClientCertificateArgs{...}
type SyntheticsTestRequestClientCertificateInput interface {
	pulumi.Input

	ToSyntheticsTestRequestClientCertificateOutput() SyntheticsTestRequestClientCertificateOutput
	ToSyntheticsTestRequestClientCertificateOutputWithContext(context.Context) SyntheticsTestRequestClientCertificateOutput
}

type SyntheticsTestRequestClientCertificateArgs struct {
	Cert SyntheticsTestRequestClientCertificateCertInput `pulumi:"cert"`
	Key  SyntheticsTestRequestClientCertificateKeyInput  `pulumi:"key"`
}

func (SyntheticsTestRequestClientCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestRequestClientCertificate)(nil)).Elem()
}

func (i SyntheticsTestRequestClientCertificateArgs) ToSyntheticsTestRequestClientCertificateOutput() SyntheticsTestRequestClientCertificateOutput {
	return i.ToSyntheticsTestRequestClientCertificateOutputWithContext(context.Background())
}

func (i SyntheticsTestRequestClientCertificateArgs) ToSyntheticsTestRequestClientCertificateOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestClientCertificateOutput)
}

func (i SyntheticsTestRequestClientCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestRequestClientCertificate] {
	return pulumix.Output[SyntheticsTestRequestClientCertificate]{
		OutputState: i.ToSyntheticsTestRequestClientCertificateOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestRequestClientCertificateArgs) ToSyntheticsTestRequestClientCertificatePtrOutput() SyntheticsTestRequestClientCertificatePtrOutput {
	return i.ToSyntheticsTestRequestClientCertificatePtrOutputWithContext(context.Background())
}

func (i SyntheticsTestRequestClientCertificateArgs) ToSyntheticsTestRequestClientCertificatePtrOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestClientCertificateOutput).ToSyntheticsTestRequestClientCertificatePtrOutputWithContext(ctx)
}

// SyntheticsTestRequestClientCertificatePtrInput is an input type that accepts SyntheticsTestRequestClientCertificateArgs, SyntheticsTestRequestClientCertificatePtr and SyntheticsTestRequestClientCertificatePtrOutput values.
// You can construct a concrete instance of `SyntheticsTestRequestClientCertificatePtrInput` via:
//
//	        SyntheticsTestRequestClientCertificateArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestRequestClientCertificatePtrInput interface {
	pulumi.Input

	ToSyntheticsTestRequestClientCertificatePtrOutput() SyntheticsTestRequestClientCertificatePtrOutput
	ToSyntheticsTestRequestClientCertificatePtrOutputWithContext(context.Context) SyntheticsTestRequestClientCertificatePtrOutput
}

type syntheticsTestRequestClientCertificatePtrType SyntheticsTestRequestClientCertificateArgs

func SyntheticsTestRequestClientCertificatePtr(v *SyntheticsTestRequestClientCertificateArgs) SyntheticsTestRequestClientCertificatePtrInput {
	return (*syntheticsTestRequestClientCertificatePtrType)(v)
}

func (*syntheticsTestRequestClientCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestRequestClientCertificate)(nil)).Elem()
}

func (i *syntheticsTestRequestClientCertificatePtrType) ToSyntheticsTestRequestClientCertificatePtrOutput() SyntheticsTestRequestClientCertificatePtrOutput {
	return i.ToSyntheticsTestRequestClientCertificatePtrOutputWithContext(context.Background())
}

func (i *syntheticsTestRequestClientCertificatePtrType) ToSyntheticsTestRequestClientCertificatePtrOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestClientCertificatePtrOutput)
}

func (i *syntheticsTestRequestClientCertificatePtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestRequestClientCertificate] {
	return pulumix.Output[*SyntheticsTestRequestClientCertificate]{
		OutputState: i.ToSyntheticsTestRequestClientCertificatePtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestRequestClientCertificateOutput struct{ *pulumi.OutputState }

func (SyntheticsTestRequestClientCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestRequestClientCertificate)(nil)).Elem()
}

func (o SyntheticsTestRequestClientCertificateOutput) ToSyntheticsTestRequestClientCertificateOutput() SyntheticsTestRequestClientCertificateOutput {
	return o
}

func (o SyntheticsTestRequestClientCertificateOutput) ToSyntheticsTestRequestClientCertificateOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificateOutput {
	return o
}

func (o SyntheticsTestRequestClientCertificateOutput) ToSyntheticsTestRequestClientCertificatePtrOutput() SyntheticsTestRequestClientCertificatePtrOutput {
	return o.ToSyntheticsTestRequestClientCertificatePtrOutputWithContext(context.Background())
}

func (o SyntheticsTestRequestClientCertificateOutput) ToSyntheticsTestRequestClientCertificatePtrOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestRequestClientCertificate) *SyntheticsTestRequestClientCertificate {
		return &v
	}).(SyntheticsTestRequestClientCertificatePtrOutput)
}

func (o SyntheticsTestRequestClientCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestRequestClientCertificate] {
	return pulumix.Output[SyntheticsTestRequestClientCertificate]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestRequestClientCertificateOutput) Cert() SyntheticsTestRequestClientCertificateCertOutput {
	return o.ApplyT(func(v SyntheticsTestRequestClientCertificate) SyntheticsTestRequestClientCertificateCert {
		return v.Cert
	}).(SyntheticsTestRequestClientCertificateCertOutput)
}

func (o SyntheticsTestRequestClientCertificateOutput) Key() SyntheticsTestRequestClientCertificateKeyOutput {
	return o.ApplyT(func(v SyntheticsTestRequestClientCertificate) SyntheticsTestRequestClientCertificateKey { return v.Key }).(SyntheticsTestRequestClientCertificateKeyOutput)
}

type SyntheticsTestRequestClientCertificatePtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestRequestClientCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestRequestClientCertificate)(nil)).Elem()
}

func (o SyntheticsTestRequestClientCertificatePtrOutput) ToSyntheticsTestRequestClientCertificatePtrOutput() SyntheticsTestRequestClientCertificatePtrOutput {
	return o
}

func (o SyntheticsTestRequestClientCertificatePtrOutput) ToSyntheticsTestRequestClientCertificatePtrOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificatePtrOutput {
	return o
}

func (o SyntheticsTestRequestClientCertificatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestRequestClientCertificate] {
	return pulumix.Output[*SyntheticsTestRequestClientCertificate]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestRequestClientCertificatePtrOutput) Elem() SyntheticsTestRequestClientCertificateOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestClientCertificate) SyntheticsTestRequestClientCertificate {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestRequestClientCertificate
		return ret
	}).(SyntheticsTestRequestClientCertificateOutput)
}

func (o SyntheticsTestRequestClientCertificatePtrOutput) Cert() SyntheticsTestRequestClientCertificateCertPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestClientCertificate) *SyntheticsTestRequestClientCertificateCert {
		if v == nil {
			return nil
		}
		return &v.Cert
	}).(SyntheticsTestRequestClientCertificateCertPtrOutput)
}

func (o SyntheticsTestRequestClientCertificatePtrOutput) Key() SyntheticsTestRequestClientCertificateKeyPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestClientCertificate) *SyntheticsTestRequestClientCertificateKey {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(SyntheticsTestRequestClientCertificateKeyPtrOutput)
}

type SyntheticsTestRequestClientCertificateCert struct {
	// Content of the certificate.
	Content  string  `pulumi:"content"`
	Filename *string `pulumi:"filename"`
}

// SyntheticsTestRequestClientCertificateCertInput is an input type that accepts SyntheticsTestRequestClientCertificateCertArgs and SyntheticsTestRequestClientCertificateCertOutput values.
// You can construct a concrete instance of `SyntheticsTestRequestClientCertificateCertInput` via:
//
//	SyntheticsTestRequestClientCertificateCertArgs{...}
type SyntheticsTestRequestClientCertificateCertInput interface {
	pulumi.Input

	ToSyntheticsTestRequestClientCertificateCertOutput() SyntheticsTestRequestClientCertificateCertOutput
	ToSyntheticsTestRequestClientCertificateCertOutputWithContext(context.Context) SyntheticsTestRequestClientCertificateCertOutput
}

type SyntheticsTestRequestClientCertificateCertArgs struct {
	// Content of the certificate.
	Content  pulumi.StringInput    `pulumi:"content"`
	Filename pulumi.StringPtrInput `pulumi:"filename"`
}

func (SyntheticsTestRequestClientCertificateCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestRequestClientCertificateCert)(nil)).Elem()
}

func (i SyntheticsTestRequestClientCertificateCertArgs) ToSyntheticsTestRequestClientCertificateCertOutput() SyntheticsTestRequestClientCertificateCertOutput {
	return i.ToSyntheticsTestRequestClientCertificateCertOutputWithContext(context.Background())
}

func (i SyntheticsTestRequestClientCertificateCertArgs) ToSyntheticsTestRequestClientCertificateCertOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificateCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestClientCertificateCertOutput)
}

func (i SyntheticsTestRequestClientCertificateCertArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestRequestClientCertificateCert] {
	return pulumix.Output[SyntheticsTestRequestClientCertificateCert]{
		OutputState: i.ToSyntheticsTestRequestClientCertificateCertOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestRequestClientCertificateCertArgs) ToSyntheticsTestRequestClientCertificateCertPtrOutput() SyntheticsTestRequestClientCertificateCertPtrOutput {
	return i.ToSyntheticsTestRequestClientCertificateCertPtrOutputWithContext(context.Background())
}

func (i SyntheticsTestRequestClientCertificateCertArgs) ToSyntheticsTestRequestClientCertificateCertPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificateCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestClientCertificateCertOutput).ToSyntheticsTestRequestClientCertificateCertPtrOutputWithContext(ctx)
}

// SyntheticsTestRequestClientCertificateCertPtrInput is an input type that accepts SyntheticsTestRequestClientCertificateCertArgs, SyntheticsTestRequestClientCertificateCertPtr and SyntheticsTestRequestClientCertificateCertPtrOutput values.
// You can construct a concrete instance of `SyntheticsTestRequestClientCertificateCertPtrInput` via:
//
//	        SyntheticsTestRequestClientCertificateCertArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestRequestClientCertificateCertPtrInput interface {
	pulumi.Input

	ToSyntheticsTestRequestClientCertificateCertPtrOutput() SyntheticsTestRequestClientCertificateCertPtrOutput
	ToSyntheticsTestRequestClientCertificateCertPtrOutputWithContext(context.Context) SyntheticsTestRequestClientCertificateCertPtrOutput
}

type syntheticsTestRequestClientCertificateCertPtrType SyntheticsTestRequestClientCertificateCertArgs

func SyntheticsTestRequestClientCertificateCertPtr(v *SyntheticsTestRequestClientCertificateCertArgs) SyntheticsTestRequestClientCertificateCertPtrInput {
	return (*syntheticsTestRequestClientCertificateCertPtrType)(v)
}

func (*syntheticsTestRequestClientCertificateCertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestRequestClientCertificateCert)(nil)).Elem()
}

func (i *syntheticsTestRequestClientCertificateCertPtrType) ToSyntheticsTestRequestClientCertificateCertPtrOutput() SyntheticsTestRequestClientCertificateCertPtrOutput {
	return i.ToSyntheticsTestRequestClientCertificateCertPtrOutputWithContext(context.Background())
}

func (i *syntheticsTestRequestClientCertificateCertPtrType) ToSyntheticsTestRequestClientCertificateCertPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificateCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestClientCertificateCertPtrOutput)
}

func (i *syntheticsTestRequestClientCertificateCertPtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestRequestClientCertificateCert] {
	return pulumix.Output[*SyntheticsTestRequestClientCertificateCert]{
		OutputState: i.ToSyntheticsTestRequestClientCertificateCertPtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestRequestClientCertificateCertOutput struct{ *pulumi.OutputState }

func (SyntheticsTestRequestClientCertificateCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestRequestClientCertificateCert)(nil)).Elem()
}

func (o SyntheticsTestRequestClientCertificateCertOutput) ToSyntheticsTestRequestClientCertificateCertOutput() SyntheticsTestRequestClientCertificateCertOutput {
	return o
}

func (o SyntheticsTestRequestClientCertificateCertOutput) ToSyntheticsTestRequestClientCertificateCertOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificateCertOutput {
	return o
}

func (o SyntheticsTestRequestClientCertificateCertOutput) ToSyntheticsTestRequestClientCertificateCertPtrOutput() SyntheticsTestRequestClientCertificateCertPtrOutput {
	return o.ToSyntheticsTestRequestClientCertificateCertPtrOutputWithContext(context.Background())
}

func (o SyntheticsTestRequestClientCertificateCertOutput) ToSyntheticsTestRequestClientCertificateCertPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificateCertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestRequestClientCertificateCert) *SyntheticsTestRequestClientCertificateCert {
		return &v
	}).(SyntheticsTestRequestClientCertificateCertPtrOutput)
}

func (o SyntheticsTestRequestClientCertificateCertOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestRequestClientCertificateCert] {
	return pulumix.Output[SyntheticsTestRequestClientCertificateCert]{
		OutputState: o.OutputState,
	}
}

// Content of the certificate.
func (o SyntheticsTestRequestClientCertificateCertOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestRequestClientCertificateCert) string { return v.Content }).(pulumi.StringOutput)
}

func (o SyntheticsTestRequestClientCertificateCertOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestClientCertificateCert) *string { return v.Filename }).(pulumi.StringPtrOutput)
}

type SyntheticsTestRequestClientCertificateCertPtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestRequestClientCertificateCertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestRequestClientCertificateCert)(nil)).Elem()
}

func (o SyntheticsTestRequestClientCertificateCertPtrOutput) ToSyntheticsTestRequestClientCertificateCertPtrOutput() SyntheticsTestRequestClientCertificateCertPtrOutput {
	return o
}

func (o SyntheticsTestRequestClientCertificateCertPtrOutput) ToSyntheticsTestRequestClientCertificateCertPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificateCertPtrOutput {
	return o
}

func (o SyntheticsTestRequestClientCertificateCertPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestRequestClientCertificateCert] {
	return pulumix.Output[*SyntheticsTestRequestClientCertificateCert]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestRequestClientCertificateCertPtrOutput) Elem() SyntheticsTestRequestClientCertificateCertOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestClientCertificateCert) SyntheticsTestRequestClientCertificateCert {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestRequestClientCertificateCert
		return ret
	}).(SyntheticsTestRequestClientCertificateCertOutput)
}

// Content of the certificate.
func (o SyntheticsTestRequestClientCertificateCertPtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestClientCertificateCert) *string {
		if v == nil {
			return nil
		}
		return &v.Content
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticsTestRequestClientCertificateCertPtrOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestClientCertificateCert) *string {
		if v == nil {
			return nil
		}
		return v.Filename
	}).(pulumi.StringPtrOutput)
}

type SyntheticsTestRequestClientCertificateKey struct {
	// Content of the certificate.
	Content  string  `pulumi:"content"`
	Filename *string `pulumi:"filename"`
}

// SyntheticsTestRequestClientCertificateKeyInput is an input type that accepts SyntheticsTestRequestClientCertificateKeyArgs and SyntheticsTestRequestClientCertificateKeyOutput values.
// You can construct a concrete instance of `SyntheticsTestRequestClientCertificateKeyInput` via:
//
//	SyntheticsTestRequestClientCertificateKeyArgs{...}
type SyntheticsTestRequestClientCertificateKeyInput interface {
	pulumi.Input

	ToSyntheticsTestRequestClientCertificateKeyOutput() SyntheticsTestRequestClientCertificateKeyOutput
	ToSyntheticsTestRequestClientCertificateKeyOutputWithContext(context.Context) SyntheticsTestRequestClientCertificateKeyOutput
}

type SyntheticsTestRequestClientCertificateKeyArgs struct {
	// Content of the certificate.
	Content  pulumi.StringInput    `pulumi:"content"`
	Filename pulumi.StringPtrInput `pulumi:"filename"`
}

func (SyntheticsTestRequestClientCertificateKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestRequestClientCertificateKey)(nil)).Elem()
}

func (i SyntheticsTestRequestClientCertificateKeyArgs) ToSyntheticsTestRequestClientCertificateKeyOutput() SyntheticsTestRequestClientCertificateKeyOutput {
	return i.ToSyntheticsTestRequestClientCertificateKeyOutputWithContext(context.Background())
}

func (i SyntheticsTestRequestClientCertificateKeyArgs) ToSyntheticsTestRequestClientCertificateKeyOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificateKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestClientCertificateKeyOutput)
}

func (i SyntheticsTestRequestClientCertificateKeyArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestRequestClientCertificateKey] {
	return pulumix.Output[SyntheticsTestRequestClientCertificateKey]{
		OutputState: i.ToSyntheticsTestRequestClientCertificateKeyOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestRequestClientCertificateKeyArgs) ToSyntheticsTestRequestClientCertificateKeyPtrOutput() SyntheticsTestRequestClientCertificateKeyPtrOutput {
	return i.ToSyntheticsTestRequestClientCertificateKeyPtrOutputWithContext(context.Background())
}

func (i SyntheticsTestRequestClientCertificateKeyArgs) ToSyntheticsTestRequestClientCertificateKeyPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificateKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestClientCertificateKeyOutput).ToSyntheticsTestRequestClientCertificateKeyPtrOutputWithContext(ctx)
}

// SyntheticsTestRequestClientCertificateKeyPtrInput is an input type that accepts SyntheticsTestRequestClientCertificateKeyArgs, SyntheticsTestRequestClientCertificateKeyPtr and SyntheticsTestRequestClientCertificateKeyPtrOutput values.
// You can construct a concrete instance of `SyntheticsTestRequestClientCertificateKeyPtrInput` via:
//
//	        SyntheticsTestRequestClientCertificateKeyArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestRequestClientCertificateKeyPtrInput interface {
	pulumi.Input

	ToSyntheticsTestRequestClientCertificateKeyPtrOutput() SyntheticsTestRequestClientCertificateKeyPtrOutput
	ToSyntheticsTestRequestClientCertificateKeyPtrOutputWithContext(context.Context) SyntheticsTestRequestClientCertificateKeyPtrOutput
}

type syntheticsTestRequestClientCertificateKeyPtrType SyntheticsTestRequestClientCertificateKeyArgs

func SyntheticsTestRequestClientCertificateKeyPtr(v *SyntheticsTestRequestClientCertificateKeyArgs) SyntheticsTestRequestClientCertificateKeyPtrInput {
	return (*syntheticsTestRequestClientCertificateKeyPtrType)(v)
}

func (*syntheticsTestRequestClientCertificateKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestRequestClientCertificateKey)(nil)).Elem()
}

func (i *syntheticsTestRequestClientCertificateKeyPtrType) ToSyntheticsTestRequestClientCertificateKeyPtrOutput() SyntheticsTestRequestClientCertificateKeyPtrOutput {
	return i.ToSyntheticsTestRequestClientCertificateKeyPtrOutputWithContext(context.Background())
}

func (i *syntheticsTestRequestClientCertificateKeyPtrType) ToSyntheticsTestRequestClientCertificateKeyPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificateKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestClientCertificateKeyPtrOutput)
}

func (i *syntheticsTestRequestClientCertificateKeyPtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestRequestClientCertificateKey] {
	return pulumix.Output[*SyntheticsTestRequestClientCertificateKey]{
		OutputState: i.ToSyntheticsTestRequestClientCertificateKeyPtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestRequestClientCertificateKeyOutput struct{ *pulumi.OutputState }

func (SyntheticsTestRequestClientCertificateKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestRequestClientCertificateKey)(nil)).Elem()
}

func (o SyntheticsTestRequestClientCertificateKeyOutput) ToSyntheticsTestRequestClientCertificateKeyOutput() SyntheticsTestRequestClientCertificateKeyOutput {
	return o
}

func (o SyntheticsTestRequestClientCertificateKeyOutput) ToSyntheticsTestRequestClientCertificateKeyOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificateKeyOutput {
	return o
}

func (o SyntheticsTestRequestClientCertificateKeyOutput) ToSyntheticsTestRequestClientCertificateKeyPtrOutput() SyntheticsTestRequestClientCertificateKeyPtrOutput {
	return o.ToSyntheticsTestRequestClientCertificateKeyPtrOutputWithContext(context.Background())
}

func (o SyntheticsTestRequestClientCertificateKeyOutput) ToSyntheticsTestRequestClientCertificateKeyPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificateKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestRequestClientCertificateKey) *SyntheticsTestRequestClientCertificateKey {
		return &v
	}).(SyntheticsTestRequestClientCertificateKeyPtrOutput)
}

func (o SyntheticsTestRequestClientCertificateKeyOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestRequestClientCertificateKey] {
	return pulumix.Output[SyntheticsTestRequestClientCertificateKey]{
		OutputState: o.OutputState,
	}
}

// Content of the certificate.
func (o SyntheticsTestRequestClientCertificateKeyOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestRequestClientCertificateKey) string { return v.Content }).(pulumi.StringOutput)
}

func (o SyntheticsTestRequestClientCertificateKeyOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestClientCertificateKey) *string { return v.Filename }).(pulumi.StringPtrOutput)
}

type SyntheticsTestRequestClientCertificateKeyPtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestRequestClientCertificateKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestRequestClientCertificateKey)(nil)).Elem()
}

func (o SyntheticsTestRequestClientCertificateKeyPtrOutput) ToSyntheticsTestRequestClientCertificateKeyPtrOutput() SyntheticsTestRequestClientCertificateKeyPtrOutput {
	return o
}

func (o SyntheticsTestRequestClientCertificateKeyPtrOutput) ToSyntheticsTestRequestClientCertificateKeyPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestClientCertificateKeyPtrOutput {
	return o
}

func (o SyntheticsTestRequestClientCertificateKeyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestRequestClientCertificateKey] {
	return pulumix.Output[*SyntheticsTestRequestClientCertificateKey]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestRequestClientCertificateKeyPtrOutput) Elem() SyntheticsTestRequestClientCertificateKeyOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestClientCertificateKey) SyntheticsTestRequestClientCertificateKey {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestRequestClientCertificateKey
		return ret
	}).(SyntheticsTestRequestClientCertificateKeyOutput)
}

// Content of the certificate.
func (o SyntheticsTestRequestClientCertificateKeyPtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestClientCertificateKey) *string {
		if v == nil {
			return nil
		}
		return &v.Content
	}).(pulumi.StringPtrOutput)
}

func (o SyntheticsTestRequestClientCertificateKeyPtrOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestClientCertificateKey) *string {
		if v == nil {
			return nil
		}
		return v.Filename
	}).(pulumi.StringPtrOutput)
}

type SyntheticsTestRequestDefinition struct {
	// The request body.
	Body *string `pulumi:"body"`
	// Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.
	BodyType *string `pulumi:"bodyType"`
	// The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
	CallType *string `pulumi:"callType"`
	// By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificateDomains`.
	CertificateDomains []string `pulumi:"certificateDomains"`
	// DNS server to use for DNS tests (`subtype = "dns"`).
	DnsServer *string `pulumi:"dnsServer"`
	// DNS server port to use for DNS tests.
	DnsServerPort *int `pulumi:"dnsServerPort"`
	// Host name to perform the test with.
	Host *string `pulumi:"host"`
	// For UDP and websocket tests, message to send with the request.
	Message *string `pulumi:"message"`
	// Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
	Method *string `pulumi:"method"`
	// Determines whether or not to save the response body.
	NoSavingResponseBody *bool `pulumi:"noSavingResponseBody"`
	// Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
	NumberOfPackets *int `pulumi:"numberOfPackets"`
	// Persist cookies across redirects.
	PersistCookies *bool `pulumi:"persistCookies"`
	// Port to use when performing the test.
	Port *int `pulumi:"port"`
	// A protobuf JSON descriptor.
	ProtoJsonDescriptor *string `pulumi:"protoJsonDescriptor"`
	// For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	Servername *string `pulumi:"servername"`
	// The gRPC service on which you want to perform the gRPC call.
	Service *string `pulumi:"service"`
	// This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
	ShouldTrackHops *bool `pulumi:"shouldTrackHops"`
	// Timeout in seconds for the test. Defaults to `60`.
	Timeout *int `pulumi:"timeout"`
	// The URL to send the request to.
	Url *string `pulumi:"url"`
}

// SyntheticsTestRequestDefinitionInput is an input type that accepts SyntheticsTestRequestDefinitionArgs and SyntheticsTestRequestDefinitionOutput values.
// You can construct a concrete instance of `SyntheticsTestRequestDefinitionInput` via:
//
//	SyntheticsTestRequestDefinitionArgs{...}
type SyntheticsTestRequestDefinitionInput interface {
	pulumi.Input

	ToSyntheticsTestRequestDefinitionOutput() SyntheticsTestRequestDefinitionOutput
	ToSyntheticsTestRequestDefinitionOutputWithContext(context.Context) SyntheticsTestRequestDefinitionOutput
}

type SyntheticsTestRequestDefinitionArgs struct {
	// The request body.
	Body pulumi.StringPtrInput `pulumi:"body"`
	// Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.
	BodyType pulumi.StringPtrInput `pulumi:"bodyType"`
	// The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
	CallType pulumi.StringPtrInput `pulumi:"callType"`
	// By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificateDomains`.
	CertificateDomains pulumi.StringArrayInput `pulumi:"certificateDomains"`
	// DNS server to use for DNS tests (`subtype = "dns"`).
	DnsServer pulumi.StringPtrInput `pulumi:"dnsServer"`
	// DNS server port to use for DNS tests.
	DnsServerPort pulumi.IntPtrInput `pulumi:"dnsServerPort"`
	// Host name to perform the test with.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// For UDP and websocket tests, message to send with the request.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// Determines whether or not to save the response body.
	NoSavingResponseBody pulumi.BoolPtrInput `pulumi:"noSavingResponseBody"`
	// Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
	NumberOfPackets pulumi.IntPtrInput `pulumi:"numberOfPackets"`
	// Persist cookies across redirects.
	PersistCookies pulumi.BoolPtrInput `pulumi:"persistCookies"`
	// Port to use when performing the test.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// A protobuf JSON descriptor.
	ProtoJsonDescriptor pulumi.StringPtrInput `pulumi:"protoJsonDescriptor"`
	// For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	Servername pulumi.StringPtrInput `pulumi:"servername"`
	// The gRPC service on which you want to perform the gRPC call.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
	ShouldTrackHops pulumi.BoolPtrInput `pulumi:"shouldTrackHops"`
	// Timeout in seconds for the test. Defaults to `60`.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// The URL to send the request to.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (SyntheticsTestRequestDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestRequestDefinition)(nil)).Elem()
}

func (i SyntheticsTestRequestDefinitionArgs) ToSyntheticsTestRequestDefinitionOutput() SyntheticsTestRequestDefinitionOutput {
	return i.ToSyntheticsTestRequestDefinitionOutputWithContext(context.Background())
}

func (i SyntheticsTestRequestDefinitionArgs) ToSyntheticsTestRequestDefinitionOutputWithContext(ctx context.Context) SyntheticsTestRequestDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestDefinitionOutput)
}

func (i SyntheticsTestRequestDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestRequestDefinition] {
	return pulumix.Output[SyntheticsTestRequestDefinition]{
		OutputState: i.ToSyntheticsTestRequestDefinitionOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestRequestDefinitionArgs) ToSyntheticsTestRequestDefinitionPtrOutput() SyntheticsTestRequestDefinitionPtrOutput {
	return i.ToSyntheticsTestRequestDefinitionPtrOutputWithContext(context.Background())
}

func (i SyntheticsTestRequestDefinitionArgs) ToSyntheticsTestRequestDefinitionPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestDefinitionOutput).ToSyntheticsTestRequestDefinitionPtrOutputWithContext(ctx)
}

// SyntheticsTestRequestDefinitionPtrInput is an input type that accepts SyntheticsTestRequestDefinitionArgs, SyntheticsTestRequestDefinitionPtr and SyntheticsTestRequestDefinitionPtrOutput values.
// You can construct a concrete instance of `SyntheticsTestRequestDefinitionPtrInput` via:
//
//	        SyntheticsTestRequestDefinitionArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestRequestDefinitionPtrInput interface {
	pulumi.Input

	ToSyntheticsTestRequestDefinitionPtrOutput() SyntheticsTestRequestDefinitionPtrOutput
	ToSyntheticsTestRequestDefinitionPtrOutputWithContext(context.Context) SyntheticsTestRequestDefinitionPtrOutput
}

type syntheticsTestRequestDefinitionPtrType SyntheticsTestRequestDefinitionArgs

func SyntheticsTestRequestDefinitionPtr(v *SyntheticsTestRequestDefinitionArgs) SyntheticsTestRequestDefinitionPtrInput {
	return (*syntheticsTestRequestDefinitionPtrType)(v)
}

func (*syntheticsTestRequestDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestRequestDefinition)(nil)).Elem()
}

func (i *syntheticsTestRequestDefinitionPtrType) ToSyntheticsTestRequestDefinitionPtrOutput() SyntheticsTestRequestDefinitionPtrOutput {
	return i.ToSyntheticsTestRequestDefinitionPtrOutputWithContext(context.Background())
}

func (i *syntheticsTestRequestDefinitionPtrType) ToSyntheticsTestRequestDefinitionPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestDefinitionPtrOutput)
}

func (i *syntheticsTestRequestDefinitionPtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestRequestDefinition] {
	return pulumix.Output[*SyntheticsTestRequestDefinition]{
		OutputState: i.ToSyntheticsTestRequestDefinitionPtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestRequestDefinitionOutput struct{ *pulumi.OutputState }

func (SyntheticsTestRequestDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestRequestDefinition)(nil)).Elem()
}

func (o SyntheticsTestRequestDefinitionOutput) ToSyntheticsTestRequestDefinitionOutput() SyntheticsTestRequestDefinitionOutput {
	return o
}

func (o SyntheticsTestRequestDefinitionOutput) ToSyntheticsTestRequestDefinitionOutputWithContext(ctx context.Context) SyntheticsTestRequestDefinitionOutput {
	return o
}

func (o SyntheticsTestRequestDefinitionOutput) ToSyntheticsTestRequestDefinitionPtrOutput() SyntheticsTestRequestDefinitionPtrOutput {
	return o.ToSyntheticsTestRequestDefinitionPtrOutputWithContext(context.Background())
}

func (o SyntheticsTestRequestDefinitionOutput) ToSyntheticsTestRequestDefinitionPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestRequestDefinition) *SyntheticsTestRequestDefinition {
		return &v
	}).(SyntheticsTestRequestDefinitionPtrOutput)
}

func (o SyntheticsTestRequestDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestRequestDefinition] {
	return pulumix.Output[SyntheticsTestRequestDefinition]{
		OutputState: o.OutputState,
	}
}

// The request body.
func (o SyntheticsTestRequestDefinitionOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.
func (o SyntheticsTestRequestDefinitionOutput) BodyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *string { return v.BodyType }).(pulumi.StringPtrOutput)
}

// The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
func (o SyntheticsTestRequestDefinitionOutput) CallType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *string { return v.CallType }).(pulumi.StringPtrOutput)
}

// By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificateDomains`.
func (o SyntheticsTestRequestDefinitionOutput) CertificateDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) []string { return v.CertificateDomains }).(pulumi.StringArrayOutput)
}

// DNS server to use for DNS tests (`subtype = "dns"`).
func (o SyntheticsTestRequestDefinitionOutput) DnsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *string { return v.DnsServer }).(pulumi.StringPtrOutput)
}

// DNS server port to use for DNS tests.
func (o SyntheticsTestRequestDefinitionOutput) DnsServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *int { return v.DnsServerPort }).(pulumi.IntPtrOutput)
}

// Host name to perform the test with.
func (o SyntheticsTestRequestDefinitionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// For UDP and websocket tests, message to send with the request.
func (o SyntheticsTestRequestDefinitionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
func (o SyntheticsTestRequestDefinitionOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// Determines whether or not to save the response body.
func (o SyntheticsTestRequestDefinitionOutput) NoSavingResponseBody() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *bool { return v.NoSavingResponseBody }).(pulumi.BoolPtrOutput)
}

// Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
func (o SyntheticsTestRequestDefinitionOutput) NumberOfPackets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *int { return v.NumberOfPackets }).(pulumi.IntPtrOutput)
}

// Persist cookies across redirects.
func (o SyntheticsTestRequestDefinitionOutput) PersistCookies() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *bool { return v.PersistCookies }).(pulumi.BoolPtrOutput)
}

// Port to use when performing the test.
func (o SyntheticsTestRequestDefinitionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A protobuf JSON descriptor.
func (o SyntheticsTestRequestDefinitionOutput) ProtoJsonDescriptor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *string { return v.ProtoJsonDescriptor }).(pulumi.StringPtrOutput)
}

// For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
func (o SyntheticsTestRequestDefinitionOutput) Servername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *string { return v.Servername }).(pulumi.StringPtrOutput)
}

// The gRPC service on which you want to perform the gRPC call.
func (o SyntheticsTestRequestDefinitionOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
func (o SyntheticsTestRequestDefinitionOutput) ShouldTrackHops() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *bool { return v.ShouldTrackHops }).(pulumi.BoolPtrOutput)
}

// Timeout in seconds for the test. Defaults to `60`.
func (o SyntheticsTestRequestDefinitionOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The URL to send the request to.
func (o SyntheticsTestRequestDefinitionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticsTestRequestDefinition) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type SyntheticsTestRequestDefinitionPtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestRequestDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestRequestDefinition)(nil)).Elem()
}

func (o SyntheticsTestRequestDefinitionPtrOutput) ToSyntheticsTestRequestDefinitionPtrOutput() SyntheticsTestRequestDefinitionPtrOutput {
	return o
}

func (o SyntheticsTestRequestDefinitionPtrOutput) ToSyntheticsTestRequestDefinitionPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestDefinitionPtrOutput {
	return o
}

func (o SyntheticsTestRequestDefinitionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestRequestDefinition] {
	return pulumix.Output[*SyntheticsTestRequestDefinition]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestRequestDefinitionPtrOutput) Elem() SyntheticsTestRequestDefinitionOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) SyntheticsTestRequestDefinition {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestRequestDefinition
		return ret
	}).(SyntheticsTestRequestDefinitionOutput)
}

// The request body.
func (o SyntheticsTestRequestDefinitionPtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

// Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.
func (o SyntheticsTestRequestDefinitionPtrOutput) BodyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *string {
		if v == nil {
			return nil
		}
		return v.BodyType
	}).(pulumi.StringPtrOutput)
}

// The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
func (o SyntheticsTestRequestDefinitionPtrOutput) CallType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *string {
		if v == nil {
			return nil
		}
		return v.CallType
	}).(pulumi.StringPtrOutput)
}

// By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificateDomains`.
func (o SyntheticsTestRequestDefinitionPtrOutput) CertificateDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) []string {
		if v == nil {
			return nil
		}
		return v.CertificateDomains
	}).(pulumi.StringArrayOutput)
}

// DNS server to use for DNS tests (`subtype = "dns"`).
func (o SyntheticsTestRequestDefinitionPtrOutput) DnsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *string {
		if v == nil {
			return nil
		}
		return v.DnsServer
	}).(pulumi.StringPtrOutput)
}

// DNS server port to use for DNS tests.
func (o SyntheticsTestRequestDefinitionPtrOutput) DnsServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *int {
		if v == nil {
			return nil
		}
		return v.DnsServerPort
	}).(pulumi.IntPtrOutput)
}

// Host name to perform the test with.
func (o SyntheticsTestRequestDefinitionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// For UDP and websocket tests, message to send with the request.
func (o SyntheticsTestRequestDefinitionPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
func (o SyntheticsTestRequestDefinitionPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// Determines whether or not to save the response body.
func (o SyntheticsTestRequestDefinitionPtrOutput) NoSavingResponseBody() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.NoSavingResponseBody
	}).(pulumi.BoolPtrOutput)
}

// Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
func (o SyntheticsTestRequestDefinitionPtrOutput) NumberOfPackets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfPackets
	}).(pulumi.IntPtrOutput)
}

// Persist cookies across redirects.
func (o SyntheticsTestRequestDefinitionPtrOutput) PersistCookies() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.PersistCookies
	}).(pulumi.BoolPtrOutput)
}

// Port to use when performing the test.
func (o SyntheticsTestRequestDefinitionPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// A protobuf JSON descriptor.
func (o SyntheticsTestRequestDefinitionPtrOutput) ProtoJsonDescriptor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *string {
		if v == nil {
			return nil
		}
		return v.ProtoJsonDescriptor
	}).(pulumi.StringPtrOutput)
}

// For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
func (o SyntheticsTestRequestDefinitionPtrOutput) Servername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Servername
	}).(pulumi.StringPtrOutput)
}

// The gRPC service on which you want to perform the gRPC call.
func (o SyntheticsTestRequestDefinitionPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
func (o SyntheticsTestRequestDefinitionPtrOutput) ShouldTrackHops() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.ShouldTrackHops
	}).(pulumi.BoolPtrOutput)
}

// Timeout in seconds for the test. Defaults to `60`.
func (o SyntheticsTestRequestDefinitionPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// The URL to send the request to.
func (o SyntheticsTestRequestDefinitionPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

type SyntheticsTestRequestProxy struct {
	// Header name and value map.
	Headers map[string]interface{} `pulumi:"headers"`
	// URL of the proxy to perform the test.
	Url string `pulumi:"url"`
}

// SyntheticsTestRequestProxyInput is an input type that accepts SyntheticsTestRequestProxyArgs and SyntheticsTestRequestProxyOutput values.
// You can construct a concrete instance of `SyntheticsTestRequestProxyInput` via:
//
//	SyntheticsTestRequestProxyArgs{...}
type SyntheticsTestRequestProxyInput interface {
	pulumi.Input

	ToSyntheticsTestRequestProxyOutput() SyntheticsTestRequestProxyOutput
	ToSyntheticsTestRequestProxyOutputWithContext(context.Context) SyntheticsTestRequestProxyOutput
}

type SyntheticsTestRequestProxyArgs struct {
	// Header name and value map.
	Headers pulumi.MapInput `pulumi:"headers"`
	// URL of the proxy to perform the test.
	Url pulumi.StringInput `pulumi:"url"`
}

func (SyntheticsTestRequestProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestRequestProxy)(nil)).Elem()
}

func (i SyntheticsTestRequestProxyArgs) ToSyntheticsTestRequestProxyOutput() SyntheticsTestRequestProxyOutput {
	return i.ToSyntheticsTestRequestProxyOutputWithContext(context.Background())
}

func (i SyntheticsTestRequestProxyArgs) ToSyntheticsTestRequestProxyOutputWithContext(ctx context.Context) SyntheticsTestRequestProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestProxyOutput)
}

func (i SyntheticsTestRequestProxyArgs) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestRequestProxy] {
	return pulumix.Output[SyntheticsTestRequestProxy]{
		OutputState: i.ToSyntheticsTestRequestProxyOutputWithContext(ctx).OutputState,
	}
}

func (i SyntheticsTestRequestProxyArgs) ToSyntheticsTestRequestProxyPtrOutput() SyntheticsTestRequestProxyPtrOutput {
	return i.ToSyntheticsTestRequestProxyPtrOutputWithContext(context.Background())
}

func (i SyntheticsTestRequestProxyArgs) ToSyntheticsTestRequestProxyPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestProxyOutput).ToSyntheticsTestRequestProxyPtrOutputWithContext(ctx)
}

// SyntheticsTestRequestProxyPtrInput is an input type that accepts SyntheticsTestRequestProxyArgs, SyntheticsTestRequestProxyPtr and SyntheticsTestRequestProxyPtrOutput values.
// You can construct a concrete instance of `SyntheticsTestRequestProxyPtrInput` via:
//
//	        SyntheticsTestRequestProxyArgs{...}
//
//	or:
//
//	        nil
type SyntheticsTestRequestProxyPtrInput interface {
	pulumi.Input

	ToSyntheticsTestRequestProxyPtrOutput() SyntheticsTestRequestProxyPtrOutput
	ToSyntheticsTestRequestProxyPtrOutputWithContext(context.Context) SyntheticsTestRequestProxyPtrOutput
}

type syntheticsTestRequestProxyPtrType SyntheticsTestRequestProxyArgs

func SyntheticsTestRequestProxyPtr(v *SyntheticsTestRequestProxyArgs) SyntheticsTestRequestProxyPtrInput {
	return (*syntheticsTestRequestProxyPtrType)(v)
}

func (*syntheticsTestRequestProxyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestRequestProxy)(nil)).Elem()
}

func (i *syntheticsTestRequestProxyPtrType) ToSyntheticsTestRequestProxyPtrOutput() SyntheticsTestRequestProxyPtrOutput {
	return i.ToSyntheticsTestRequestProxyPtrOutputWithContext(context.Background())
}

func (i *syntheticsTestRequestProxyPtrType) ToSyntheticsTestRequestProxyPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestRequestProxyPtrOutput)
}

func (i *syntheticsTestRequestProxyPtrType) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestRequestProxy] {
	return pulumix.Output[*SyntheticsTestRequestProxy]{
		OutputState: i.ToSyntheticsTestRequestProxyPtrOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsTestRequestProxyOutput struct{ *pulumi.OutputState }

func (SyntheticsTestRequestProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestRequestProxy)(nil)).Elem()
}

func (o SyntheticsTestRequestProxyOutput) ToSyntheticsTestRequestProxyOutput() SyntheticsTestRequestProxyOutput {
	return o
}

func (o SyntheticsTestRequestProxyOutput) ToSyntheticsTestRequestProxyOutputWithContext(ctx context.Context) SyntheticsTestRequestProxyOutput {
	return o
}

func (o SyntheticsTestRequestProxyOutput) ToSyntheticsTestRequestProxyPtrOutput() SyntheticsTestRequestProxyPtrOutput {
	return o.ToSyntheticsTestRequestProxyPtrOutputWithContext(context.Background())
}

func (o SyntheticsTestRequestProxyOutput) ToSyntheticsTestRequestProxyPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestProxyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticsTestRequestProxy) *SyntheticsTestRequestProxy {
		return &v
	}).(SyntheticsTestRequestProxyPtrOutput)
}

func (o SyntheticsTestRequestProxyOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticsTestRequestProxy] {
	return pulumix.Output[SyntheticsTestRequestProxy]{
		OutputState: o.OutputState,
	}
}

// Header name and value map.
func (o SyntheticsTestRequestProxyOutput) Headers() pulumi.MapOutput {
	return o.ApplyT(func(v SyntheticsTestRequestProxy) map[string]interface{} { return v.Headers }).(pulumi.MapOutput)
}

// URL of the proxy to perform the test.
func (o SyntheticsTestRequestProxyOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticsTestRequestProxy) string { return v.Url }).(pulumi.StringOutput)
}

type SyntheticsTestRequestProxyPtrOutput struct{ *pulumi.OutputState }

func (SyntheticsTestRequestProxyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsTestRequestProxy)(nil)).Elem()
}

func (o SyntheticsTestRequestProxyPtrOutput) ToSyntheticsTestRequestProxyPtrOutput() SyntheticsTestRequestProxyPtrOutput {
	return o
}

func (o SyntheticsTestRequestProxyPtrOutput) ToSyntheticsTestRequestProxyPtrOutputWithContext(ctx context.Context) SyntheticsTestRequestProxyPtrOutput {
	return o
}

func (o SyntheticsTestRequestProxyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsTestRequestProxy] {
	return pulumix.Output[*SyntheticsTestRequestProxy]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsTestRequestProxyPtrOutput) Elem() SyntheticsTestRequestProxyOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestProxy) SyntheticsTestRequestProxy {
		if v != nil {
			return *v
		}
		var ret SyntheticsTestRequestProxy
		return ret
	}).(SyntheticsTestRequestProxyOutput)
}

// Header name and value map.
func (o SyntheticsTestRequestProxyPtrOutput) Headers() pulumi.MapOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestProxy) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.MapOutput)
}

// URL of the proxy to perform the test.
func (o SyntheticsTestRequestProxyPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticsTestRequestProxy) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type GetCloudWorkloadSecurityAgentRulesAgentRule struct {
	Description string `pulumi:"description"`
	Enabled     bool   `pulumi:"enabled"`
	Expression  string `pulumi:"expression"`
	Id          string `pulumi:"id"`
	Name        string `pulumi:"name"`
}

// GetCloudWorkloadSecurityAgentRulesAgentRuleInput is an input type that accepts GetCloudWorkloadSecurityAgentRulesAgentRuleArgs and GetCloudWorkloadSecurityAgentRulesAgentRuleOutput values.
// You can construct a concrete instance of `GetCloudWorkloadSecurityAgentRulesAgentRuleInput` via:
//
//	GetCloudWorkloadSecurityAgentRulesAgentRuleArgs{...}
type GetCloudWorkloadSecurityAgentRulesAgentRuleInput interface {
	pulumi.Input

	ToGetCloudWorkloadSecurityAgentRulesAgentRuleOutput() GetCloudWorkloadSecurityAgentRulesAgentRuleOutput
	ToGetCloudWorkloadSecurityAgentRulesAgentRuleOutputWithContext(context.Context) GetCloudWorkloadSecurityAgentRulesAgentRuleOutput
}

type GetCloudWorkloadSecurityAgentRulesAgentRuleArgs struct {
	Description pulumi.StringInput `pulumi:"description"`
	Enabled     pulumi.BoolInput   `pulumi:"enabled"`
	Expression  pulumi.StringInput `pulumi:"expression"`
	Id          pulumi.StringInput `pulumi:"id"`
	Name        pulumi.StringInput `pulumi:"name"`
}

func (GetCloudWorkloadSecurityAgentRulesAgentRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCloudWorkloadSecurityAgentRulesAgentRule)(nil)).Elem()
}

func (i GetCloudWorkloadSecurityAgentRulesAgentRuleArgs) ToGetCloudWorkloadSecurityAgentRulesAgentRuleOutput() GetCloudWorkloadSecurityAgentRulesAgentRuleOutput {
	return i.ToGetCloudWorkloadSecurityAgentRulesAgentRuleOutputWithContext(context.Background())
}

func (i GetCloudWorkloadSecurityAgentRulesAgentRuleArgs) ToGetCloudWorkloadSecurityAgentRulesAgentRuleOutputWithContext(ctx context.Context) GetCloudWorkloadSecurityAgentRulesAgentRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCloudWorkloadSecurityAgentRulesAgentRuleOutput)
}

func (i GetCloudWorkloadSecurityAgentRulesAgentRuleArgs) ToOutput(ctx context.Context) pulumix.Output[GetCloudWorkloadSecurityAgentRulesAgentRule] {
	return pulumix.Output[GetCloudWorkloadSecurityAgentRulesAgentRule]{
		OutputState: i.ToGetCloudWorkloadSecurityAgentRulesAgentRuleOutputWithContext(ctx).OutputState,
	}
}

// GetCloudWorkloadSecurityAgentRulesAgentRuleArrayInput is an input type that accepts GetCloudWorkloadSecurityAgentRulesAgentRuleArray and GetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput values.
// You can construct a concrete instance of `GetCloudWorkloadSecurityAgentRulesAgentRuleArrayInput` via:
//
//	GetCloudWorkloadSecurityAgentRulesAgentRuleArray{ GetCloudWorkloadSecurityAgentRulesAgentRuleArgs{...} }
type GetCloudWorkloadSecurityAgentRulesAgentRuleArrayInput interface {
	pulumi.Input

	ToGetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput() GetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput
	ToGetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutputWithContext(context.Context) GetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput
}

type GetCloudWorkloadSecurityAgentRulesAgentRuleArray []GetCloudWorkloadSecurityAgentRulesAgentRuleInput

func (GetCloudWorkloadSecurityAgentRulesAgentRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCloudWorkloadSecurityAgentRulesAgentRule)(nil)).Elem()
}

func (i GetCloudWorkloadSecurityAgentRulesAgentRuleArray) ToGetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput() GetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput {
	return i.ToGetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutputWithContext(context.Background())
}

func (i GetCloudWorkloadSecurityAgentRulesAgentRuleArray) ToGetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutputWithContext(ctx context.Context) GetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput)
}

func (i GetCloudWorkloadSecurityAgentRulesAgentRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]GetCloudWorkloadSecurityAgentRulesAgentRule] {
	return pulumix.Output[[]GetCloudWorkloadSecurityAgentRulesAgentRule]{
		OutputState: i.ToGetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type GetCloudWorkloadSecurityAgentRulesAgentRuleOutput struct{ *pulumi.OutputState }

func (GetCloudWorkloadSecurityAgentRulesAgentRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCloudWorkloadSecurityAgentRulesAgentRule)(nil)).Elem()
}

func (o GetCloudWorkloadSecurityAgentRulesAgentRuleOutput) ToGetCloudWorkloadSecurityAgentRulesAgentRuleOutput() GetCloudWorkloadSecurityAgentRulesAgentRuleOutput {
	return o
}

func (o GetCloudWorkloadSecurityAgentRulesAgentRuleOutput) ToGetCloudWorkloadSecurityAgentRulesAgentRuleOutputWithContext(ctx context.Context) GetCloudWorkloadSecurityAgentRulesAgentRuleOutput {
	return o
}

func (o GetCloudWorkloadSecurityAgentRulesAgentRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetCloudWorkloadSecurityAgentRulesAgentRule] {
	return pulumix.Output[GetCloudWorkloadSecurityAgentRulesAgentRule]{
		OutputState: o.OutputState,
	}
}

func (o GetCloudWorkloadSecurityAgentRulesAgentRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudWorkloadSecurityAgentRulesAgentRule) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetCloudWorkloadSecurityAgentRulesAgentRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCloudWorkloadSecurityAgentRulesAgentRule) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetCloudWorkloadSecurityAgentRulesAgentRuleOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudWorkloadSecurityAgentRulesAgentRule) string { return v.Expression }).(pulumi.StringOutput)
}

func (o GetCloudWorkloadSecurityAgentRulesAgentRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudWorkloadSecurityAgentRulesAgentRule) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCloudWorkloadSecurityAgentRulesAgentRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudWorkloadSecurityAgentRulesAgentRule) string { return v.Name }).(pulumi.StringOutput)
}

type GetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput struct{ *pulumi.OutputState }

func (GetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCloudWorkloadSecurityAgentRulesAgentRule)(nil)).Elem()
}

func (o GetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput) ToGetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput() GetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput {
	return o
}

func (o GetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput) ToGetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutputWithContext(ctx context.Context) GetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput {
	return o
}

func (o GetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetCloudWorkloadSecurityAgentRulesAgentRule] {
	return pulumix.Output[[]GetCloudWorkloadSecurityAgentRulesAgentRule]{
		OutputState: o.OutputState,
	}
}

func (o GetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput) Index(i pulumi.IntInput) GetCloudWorkloadSecurityAgentRulesAgentRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCloudWorkloadSecurityAgentRulesAgentRule {
		return vs[0].([]GetCloudWorkloadSecurityAgentRulesAgentRule)[vs[1].(int)]
	}).(GetCloudWorkloadSecurityAgentRulesAgentRuleOutput)
}

type GetHostsHostList struct {
	Aliases          []string                `pulumi:"aliases"`
	Apps             []string                `pulumi:"apps"`
	AwsName          string                  `pulumi:"awsName"`
	HostName         string                  `pulumi:"hostName"`
	Id               int                     `pulumi:"id"`
	IsMuted          bool                    `pulumi:"isMuted"`
	LastReportedTime int                     `pulumi:"lastReportedTime"`
	Meta             GetHostsHostListMeta    `pulumi:"meta"`
	Metrics          GetHostsHostListMetrics `pulumi:"metrics"`
	MuteTimeout      int                     `pulumi:"muteTimeout"`
	Name             string                  `pulumi:"name"`
	Sources          []string                `pulumi:"sources"`
	Up               bool                    `pulumi:"up"`
}

// GetHostsHostListInput is an input type that accepts GetHostsHostListArgs and GetHostsHostListOutput values.
// You can construct a concrete instance of `GetHostsHostListInput` via:
//
//	GetHostsHostListArgs{...}
type GetHostsHostListInput interface {
	pulumi.Input

	ToGetHostsHostListOutput() GetHostsHostListOutput
	ToGetHostsHostListOutputWithContext(context.Context) GetHostsHostListOutput
}

type GetHostsHostListArgs struct {
	Aliases          pulumi.StringArrayInput      `pulumi:"aliases"`
	Apps             pulumi.StringArrayInput      `pulumi:"apps"`
	AwsName          pulumi.StringInput           `pulumi:"awsName"`
	HostName         pulumi.StringInput           `pulumi:"hostName"`
	Id               pulumi.IntInput              `pulumi:"id"`
	IsMuted          pulumi.BoolInput             `pulumi:"isMuted"`
	LastReportedTime pulumi.IntInput              `pulumi:"lastReportedTime"`
	Meta             GetHostsHostListMetaInput    `pulumi:"meta"`
	Metrics          GetHostsHostListMetricsInput `pulumi:"metrics"`
	MuteTimeout      pulumi.IntInput              `pulumi:"muteTimeout"`
	Name             pulumi.StringInput           `pulumi:"name"`
	Sources          pulumi.StringArrayInput      `pulumi:"sources"`
	Up               pulumi.BoolInput             `pulumi:"up"`
}

func (GetHostsHostListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostsHostList)(nil)).Elem()
}

func (i GetHostsHostListArgs) ToGetHostsHostListOutput() GetHostsHostListOutput {
	return i.ToGetHostsHostListOutputWithContext(context.Background())
}

func (i GetHostsHostListArgs) ToGetHostsHostListOutputWithContext(ctx context.Context) GetHostsHostListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHostsHostListOutput)
}

func (i GetHostsHostListArgs) ToOutput(ctx context.Context) pulumix.Output[GetHostsHostList] {
	return pulumix.Output[GetHostsHostList]{
		OutputState: i.ToGetHostsHostListOutputWithContext(ctx).OutputState,
	}
}

// GetHostsHostListArrayInput is an input type that accepts GetHostsHostListArray and GetHostsHostListArrayOutput values.
// You can construct a concrete instance of `GetHostsHostListArrayInput` via:
//
//	GetHostsHostListArray{ GetHostsHostListArgs{...} }
type GetHostsHostListArrayInput interface {
	pulumi.Input

	ToGetHostsHostListArrayOutput() GetHostsHostListArrayOutput
	ToGetHostsHostListArrayOutputWithContext(context.Context) GetHostsHostListArrayOutput
}

type GetHostsHostListArray []GetHostsHostListInput

func (GetHostsHostListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHostsHostList)(nil)).Elem()
}

func (i GetHostsHostListArray) ToGetHostsHostListArrayOutput() GetHostsHostListArrayOutput {
	return i.ToGetHostsHostListArrayOutputWithContext(context.Background())
}

func (i GetHostsHostListArray) ToGetHostsHostListArrayOutputWithContext(ctx context.Context) GetHostsHostListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHostsHostListArrayOutput)
}

func (i GetHostsHostListArray) ToOutput(ctx context.Context) pulumix.Output[[]GetHostsHostList] {
	return pulumix.Output[[]GetHostsHostList]{
		OutputState: i.ToGetHostsHostListArrayOutputWithContext(ctx).OutputState,
	}
}

type GetHostsHostListOutput struct{ *pulumi.OutputState }

func (GetHostsHostListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostsHostList)(nil)).Elem()
}

func (o GetHostsHostListOutput) ToGetHostsHostListOutput() GetHostsHostListOutput {
	return o
}

func (o GetHostsHostListOutput) ToGetHostsHostListOutputWithContext(ctx context.Context) GetHostsHostListOutput {
	return o
}

func (o GetHostsHostListOutput) ToOutput(ctx context.Context) pulumix.Output[GetHostsHostList] {
	return pulumix.Output[GetHostsHostList]{
		OutputState: o.OutputState,
	}
}

func (o GetHostsHostListOutput) Aliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetHostsHostList) []string { return v.Aliases }).(pulumi.StringArrayOutput)
}

func (o GetHostsHostListOutput) Apps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetHostsHostList) []string { return v.Apps }).(pulumi.StringArrayOutput)
}

func (o GetHostsHostListOutput) AwsName() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostsHostList) string { return v.AwsName }).(pulumi.StringOutput)
}

func (o GetHostsHostListOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostsHostList) string { return v.HostName }).(pulumi.StringOutput)
}

func (o GetHostsHostListOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetHostsHostList) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetHostsHostListOutput) IsMuted() pulumi.BoolOutput {
	return o.ApplyT(func(v GetHostsHostList) bool { return v.IsMuted }).(pulumi.BoolOutput)
}

func (o GetHostsHostListOutput) LastReportedTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetHostsHostList) int { return v.LastReportedTime }).(pulumi.IntOutput)
}

func (o GetHostsHostListOutput) Meta() GetHostsHostListMetaOutput {
	return o.ApplyT(func(v GetHostsHostList) GetHostsHostListMeta { return v.Meta }).(GetHostsHostListMetaOutput)
}

func (o GetHostsHostListOutput) Metrics() GetHostsHostListMetricsOutput {
	return o.ApplyT(func(v GetHostsHostList) GetHostsHostListMetrics { return v.Metrics }).(GetHostsHostListMetricsOutput)
}

func (o GetHostsHostListOutput) MuteTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetHostsHostList) int { return v.MuteTimeout }).(pulumi.IntOutput)
}

func (o GetHostsHostListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostsHostList) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetHostsHostListOutput) Sources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetHostsHostList) []string { return v.Sources }).(pulumi.StringArrayOutput)
}

func (o GetHostsHostListOutput) Up() pulumi.BoolOutput {
	return o.ApplyT(func(v GetHostsHostList) bool { return v.Up }).(pulumi.BoolOutput)
}

type GetHostsHostListArrayOutput struct{ *pulumi.OutputState }

func (GetHostsHostListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHostsHostList)(nil)).Elem()
}

func (o GetHostsHostListArrayOutput) ToGetHostsHostListArrayOutput() GetHostsHostListArrayOutput {
	return o
}

func (o GetHostsHostListArrayOutput) ToGetHostsHostListArrayOutputWithContext(ctx context.Context) GetHostsHostListArrayOutput {
	return o
}

func (o GetHostsHostListArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetHostsHostList] {
	return pulumix.Output[[]GetHostsHostList]{
		OutputState: o.OutputState,
	}
}

func (o GetHostsHostListArrayOutput) Index(i pulumi.IntInput) GetHostsHostListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetHostsHostList {
		return vs[0].([]GetHostsHostList)[vs[1].(int)]
	}).(GetHostsHostListOutput)
}

type GetHostsHostListMeta struct {
	AgentVersion   string `pulumi:"agentVersion"`
	CpuCores       int    `pulumi:"cpuCores"`
	Gohai          string `pulumi:"gohai"`
	Machine        string `pulumi:"machine"`
	Platform       string `pulumi:"platform"`
	Processor      string `pulumi:"processor"`
	PythonVersion  string `pulumi:"pythonVersion"`
	SocketFqdn     string `pulumi:"socketFqdn"`
	SocketHostname string `pulumi:"socketHostname"`
}

// GetHostsHostListMetaInput is an input type that accepts GetHostsHostListMetaArgs and GetHostsHostListMetaOutput values.
// You can construct a concrete instance of `GetHostsHostListMetaInput` via:
//
//	GetHostsHostListMetaArgs{...}
type GetHostsHostListMetaInput interface {
	pulumi.Input

	ToGetHostsHostListMetaOutput() GetHostsHostListMetaOutput
	ToGetHostsHostListMetaOutputWithContext(context.Context) GetHostsHostListMetaOutput
}

type GetHostsHostListMetaArgs struct {
	AgentVersion   pulumi.StringInput `pulumi:"agentVersion"`
	CpuCores       pulumi.IntInput    `pulumi:"cpuCores"`
	Gohai          pulumi.StringInput `pulumi:"gohai"`
	Machine        pulumi.StringInput `pulumi:"machine"`
	Platform       pulumi.StringInput `pulumi:"platform"`
	Processor      pulumi.StringInput `pulumi:"processor"`
	PythonVersion  pulumi.StringInput `pulumi:"pythonVersion"`
	SocketFqdn     pulumi.StringInput `pulumi:"socketFqdn"`
	SocketHostname pulumi.StringInput `pulumi:"socketHostname"`
}

func (GetHostsHostListMetaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostsHostListMeta)(nil)).Elem()
}

func (i GetHostsHostListMetaArgs) ToGetHostsHostListMetaOutput() GetHostsHostListMetaOutput {
	return i.ToGetHostsHostListMetaOutputWithContext(context.Background())
}

func (i GetHostsHostListMetaArgs) ToGetHostsHostListMetaOutputWithContext(ctx context.Context) GetHostsHostListMetaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHostsHostListMetaOutput)
}

func (i GetHostsHostListMetaArgs) ToOutput(ctx context.Context) pulumix.Output[GetHostsHostListMeta] {
	return pulumix.Output[GetHostsHostListMeta]{
		OutputState: i.ToGetHostsHostListMetaOutputWithContext(ctx).OutputState,
	}
}

type GetHostsHostListMetaOutput struct{ *pulumi.OutputState }

func (GetHostsHostListMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostsHostListMeta)(nil)).Elem()
}

func (o GetHostsHostListMetaOutput) ToGetHostsHostListMetaOutput() GetHostsHostListMetaOutput {
	return o
}

func (o GetHostsHostListMetaOutput) ToGetHostsHostListMetaOutputWithContext(ctx context.Context) GetHostsHostListMetaOutput {
	return o
}

func (o GetHostsHostListMetaOutput) ToOutput(ctx context.Context) pulumix.Output[GetHostsHostListMeta] {
	return pulumix.Output[GetHostsHostListMeta]{
		OutputState: o.OutputState,
	}
}

func (o GetHostsHostListMetaOutput) AgentVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostsHostListMeta) string { return v.AgentVersion }).(pulumi.StringOutput)
}

func (o GetHostsHostListMetaOutput) CpuCores() pulumi.IntOutput {
	return o.ApplyT(func(v GetHostsHostListMeta) int { return v.CpuCores }).(pulumi.IntOutput)
}

func (o GetHostsHostListMetaOutput) Gohai() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostsHostListMeta) string { return v.Gohai }).(pulumi.StringOutput)
}

func (o GetHostsHostListMetaOutput) Machine() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostsHostListMeta) string { return v.Machine }).(pulumi.StringOutput)
}

func (o GetHostsHostListMetaOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostsHostListMeta) string { return v.Platform }).(pulumi.StringOutput)
}

func (o GetHostsHostListMetaOutput) Processor() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostsHostListMeta) string { return v.Processor }).(pulumi.StringOutput)
}

func (o GetHostsHostListMetaOutput) PythonVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostsHostListMeta) string { return v.PythonVersion }).(pulumi.StringOutput)
}

func (o GetHostsHostListMetaOutput) SocketFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostsHostListMeta) string { return v.SocketFqdn }).(pulumi.StringOutput)
}

func (o GetHostsHostListMetaOutput) SocketHostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostsHostListMeta) string { return v.SocketHostname }).(pulumi.StringOutput)
}

type GetHostsHostListMetrics struct {
	Cpu    float64 `pulumi:"cpu"`
	Iowait float64 `pulumi:"iowait"`
	Load   float64 `pulumi:"load"`
}

// GetHostsHostListMetricsInput is an input type that accepts GetHostsHostListMetricsArgs and GetHostsHostListMetricsOutput values.
// You can construct a concrete instance of `GetHostsHostListMetricsInput` via:
//
//	GetHostsHostListMetricsArgs{...}
type GetHostsHostListMetricsInput interface {
	pulumi.Input

	ToGetHostsHostListMetricsOutput() GetHostsHostListMetricsOutput
	ToGetHostsHostListMetricsOutputWithContext(context.Context) GetHostsHostListMetricsOutput
}

type GetHostsHostListMetricsArgs struct {
	Cpu    pulumi.Float64Input `pulumi:"cpu"`
	Iowait pulumi.Float64Input `pulumi:"iowait"`
	Load   pulumi.Float64Input `pulumi:"load"`
}

func (GetHostsHostListMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostsHostListMetrics)(nil)).Elem()
}

func (i GetHostsHostListMetricsArgs) ToGetHostsHostListMetricsOutput() GetHostsHostListMetricsOutput {
	return i.ToGetHostsHostListMetricsOutputWithContext(context.Background())
}

func (i GetHostsHostListMetricsArgs) ToGetHostsHostListMetricsOutputWithContext(ctx context.Context) GetHostsHostListMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHostsHostListMetricsOutput)
}

func (i GetHostsHostListMetricsArgs) ToOutput(ctx context.Context) pulumix.Output[GetHostsHostListMetrics] {
	return pulumix.Output[GetHostsHostListMetrics]{
		OutputState: i.ToGetHostsHostListMetricsOutputWithContext(ctx).OutputState,
	}
}

type GetHostsHostListMetricsOutput struct{ *pulumi.OutputState }

func (GetHostsHostListMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostsHostListMetrics)(nil)).Elem()
}

func (o GetHostsHostListMetricsOutput) ToGetHostsHostListMetricsOutput() GetHostsHostListMetricsOutput {
	return o
}

func (o GetHostsHostListMetricsOutput) ToGetHostsHostListMetricsOutputWithContext(ctx context.Context) GetHostsHostListMetricsOutput {
	return o
}

func (o GetHostsHostListMetricsOutput) ToOutput(ctx context.Context) pulumix.Output[GetHostsHostListMetrics] {
	return pulumix.Output[GetHostsHostListMetrics]{
		OutputState: o.OutputState,
	}
}

func (o GetHostsHostListMetricsOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v GetHostsHostListMetrics) float64 { return v.Cpu }).(pulumi.Float64Output)
}

func (o GetHostsHostListMetricsOutput) Iowait() pulumi.Float64Output {
	return o.ApplyT(func(v GetHostsHostListMetrics) float64 { return v.Iowait }).(pulumi.Float64Output)
}

func (o GetHostsHostListMetricsOutput) Load() pulumi.Float64Output {
	return o.ApplyT(func(v GetHostsHostListMetrics) float64 { return v.Load }).(pulumi.Float64Output)
}

type GetLogsIndexesLogsIndex struct {
	DailyLimit       int                                      `pulumi:"dailyLimit"`
	ExclusionFilters []GetLogsIndexesLogsIndexExclusionFilter `pulumi:"exclusionFilters"`
	Filters          []GetLogsIndexesLogsIndexFilter          `pulumi:"filters"`
	Name             string                                   `pulumi:"name"`
	RetentionDays    int                                      `pulumi:"retentionDays"`
}

// GetLogsIndexesLogsIndexInput is an input type that accepts GetLogsIndexesLogsIndexArgs and GetLogsIndexesLogsIndexOutput values.
// You can construct a concrete instance of `GetLogsIndexesLogsIndexInput` via:
//
//	GetLogsIndexesLogsIndexArgs{...}
type GetLogsIndexesLogsIndexInput interface {
	pulumi.Input

	ToGetLogsIndexesLogsIndexOutput() GetLogsIndexesLogsIndexOutput
	ToGetLogsIndexesLogsIndexOutputWithContext(context.Context) GetLogsIndexesLogsIndexOutput
}

type GetLogsIndexesLogsIndexArgs struct {
	DailyLimit       pulumi.IntInput                                  `pulumi:"dailyLimit"`
	ExclusionFilters GetLogsIndexesLogsIndexExclusionFilterArrayInput `pulumi:"exclusionFilters"`
	Filters          GetLogsIndexesLogsIndexFilterArrayInput          `pulumi:"filters"`
	Name             pulumi.StringInput                               `pulumi:"name"`
	RetentionDays    pulumi.IntInput                                  `pulumi:"retentionDays"`
}

func (GetLogsIndexesLogsIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogsIndexesLogsIndex)(nil)).Elem()
}

func (i GetLogsIndexesLogsIndexArgs) ToGetLogsIndexesLogsIndexOutput() GetLogsIndexesLogsIndexOutput {
	return i.ToGetLogsIndexesLogsIndexOutputWithContext(context.Background())
}

func (i GetLogsIndexesLogsIndexArgs) ToGetLogsIndexesLogsIndexOutputWithContext(ctx context.Context) GetLogsIndexesLogsIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogsIndexesLogsIndexOutput)
}

func (i GetLogsIndexesLogsIndexArgs) ToOutput(ctx context.Context) pulumix.Output[GetLogsIndexesLogsIndex] {
	return pulumix.Output[GetLogsIndexesLogsIndex]{
		OutputState: i.ToGetLogsIndexesLogsIndexOutputWithContext(ctx).OutputState,
	}
}

// GetLogsIndexesLogsIndexArrayInput is an input type that accepts GetLogsIndexesLogsIndexArray and GetLogsIndexesLogsIndexArrayOutput values.
// You can construct a concrete instance of `GetLogsIndexesLogsIndexArrayInput` via:
//
//	GetLogsIndexesLogsIndexArray{ GetLogsIndexesLogsIndexArgs{...} }
type GetLogsIndexesLogsIndexArrayInput interface {
	pulumi.Input

	ToGetLogsIndexesLogsIndexArrayOutput() GetLogsIndexesLogsIndexArrayOutput
	ToGetLogsIndexesLogsIndexArrayOutputWithContext(context.Context) GetLogsIndexesLogsIndexArrayOutput
}

type GetLogsIndexesLogsIndexArray []GetLogsIndexesLogsIndexInput

func (GetLogsIndexesLogsIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLogsIndexesLogsIndex)(nil)).Elem()
}

func (i GetLogsIndexesLogsIndexArray) ToGetLogsIndexesLogsIndexArrayOutput() GetLogsIndexesLogsIndexArrayOutput {
	return i.ToGetLogsIndexesLogsIndexArrayOutputWithContext(context.Background())
}

func (i GetLogsIndexesLogsIndexArray) ToGetLogsIndexesLogsIndexArrayOutputWithContext(ctx context.Context) GetLogsIndexesLogsIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogsIndexesLogsIndexArrayOutput)
}

func (i GetLogsIndexesLogsIndexArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLogsIndexesLogsIndex] {
	return pulumix.Output[[]GetLogsIndexesLogsIndex]{
		OutputState: i.ToGetLogsIndexesLogsIndexArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLogsIndexesLogsIndexOutput struct{ *pulumi.OutputState }

func (GetLogsIndexesLogsIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogsIndexesLogsIndex)(nil)).Elem()
}

func (o GetLogsIndexesLogsIndexOutput) ToGetLogsIndexesLogsIndexOutput() GetLogsIndexesLogsIndexOutput {
	return o
}

func (o GetLogsIndexesLogsIndexOutput) ToGetLogsIndexesLogsIndexOutputWithContext(ctx context.Context) GetLogsIndexesLogsIndexOutput {
	return o
}

func (o GetLogsIndexesLogsIndexOutput) ToOutput(ctx context.Context) pulumix.Output[GetLogsIndexesLogsIndex] {
	return pulumix.Output[GetLogsIndexesLogsIndex]{
		OutputState: o.OutputState,
	}
}

func (o GetLogsIndexesLogsIndexOutput) DailyLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetLogsIndexesLogsIndex) int { return v.DailyLimit }).(pulumi.IntOutput)
}

func (o GetLogsIndexesLogsIndexOutput) ExclusionFilters() GetLogsIndexesLogsIndexExclusionFilterArrayOutput {
	return o.ApplyT(func(v GetLogsIndexesLogsIndex) []GetLogsIndexesLogsIndexExclusionFilter { return v.ExclusionFilters }).(GetLogsIndexesLogsIndexExclusionFilterArrayOutput)
}

func (o GetLogsIndexesLogsIndexOutput) Filters() GetLogsIndexesLogsIndexFilterArrayOutput {
	return o.ApplyT(func(v GetLogsIndexesLogsIndex) []GetLogsIndexesLogsIndexFilter { return v.Filters }).(GetLogsIndexesLogsIndexFilterArrayOutput)
}

func (o GetLogsIndexesLogsIndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogsIndexesLogsIndex) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetLogsIndexesLogsIndexOutput) RetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v GetLogsIndexesLogsIndex) int { return v.RetentionDays }).(pulumi.IntOutput)
}

type GetLogsIndexesLogsIndexArrayOutput struct{ *pulumi.OutputState }

func (GetLogsIndexesLogsIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLogsIndexesLogsIndex)(nil)).Elem()
}

func (o GetLogsIndexesLogsIndexArrayOutput) ToGetLogsIndexesLogsIndexArrayOutput() GetLogsIndexesLogsIndexArrayOutput {
	return o
}

func (o GetLogsIndexesLogsIndexArrayOutput) ToGetLogsIndexesLogsIndexArrayOutputWithContext(ctx context.Context) GetLogsIndexesLogsIndexArrayOutput {
	return o
}

func (o GetLogsIndexesLogsIndexArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLogsIndexesLogsIndex] {
	return pulumix.Output[[]GetLogsIndexesLogsIndex]{
		OutputState: o.OutputState,
	}
}

func (o GetLogsIndexesLogsIndexArrayOutput) Index(i pulumi.IntInput) GetLogsIndexesLogsIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLogsIndexesLogsIndex {
		return vs[0].([]GetLogsIndexesLogsIndex)[vs[1].(int)]
	}).(GetLogsIndexesLogsIndexOutput)
}

type GetLogsIndexesLogsIndexExclusionFilter struct {
	Filters   []GetLogsIndexesLogsIndexExclusionFilterFilter `pulumi:"filters"`
	IsEnabled bool                                           `pulumi:"isEnabled"`
	Name      string                                         `pulumi:"name"`
}

// GetLogsIndexesLogsIndexExclusionFilterInput is an input type that accepts GetLogsIndexesLogsIndexExclusionFilterArgs and GetLogsIndexesLogsIndexExclusionFilterOutput values.
// You can construct a concrete instance of `GetLogsIndexesLogsIndexExclusionFilterInput` via:
//
//	GetLogsIndexesLogsIndexExclusionFilterArgs{...}
type GetLogsIndexesLogsIndexExclusionFilterInput interface {
	pulumi.Input

	ToGetLogsIndexesLogsIndexExclusionFilterOutput() GetLogsIndexesLogsIndexExclusionFilterOutput
	ToGetLogsIndexesLogsIndexExclusionFilterOutputWithContext(context.Context) GetLogsIndexesLogsIndexExclusionFilterOutput
}

type GetLogsIndexesLogsIndexExclusionFilterArgs struct {
	Filters   GetLogsIndexesLogsIndexExclusionFilterFilterArrayInput `pulumi:"filters"`
	IsEnabled pulumi.BoolInput                                       `pulumi:"isEnabled"`
	Name      pulumi.StringInput                                     `pulumi:"name"`
}

func (GetLogsIndexesLogsIndexExclusionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogsIndexesLogsIndexExclusionFilter)(nil)).Elem()
}

func (i GetLogsIndexesLogsIndexExclusionFilterArgs) ToGetLogsIndexesLogsIndexExclusionFilterOutput() GetLogsIndexesLogsIndexExclusionFilterOutput {
	return i.ToGetLogsIndexesLogsIndexExclusionFilterOutputWithContext(context.Background())
}

func (i GetLogsIndexesLogsIndexExclusionFilterArgs) ToGetLogsIndexesLogsIndexExclusionFilterOutputWithContext(ctx context.Context) GetLogsIndexesLogsIndexExclusionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogsIndexesLogsIndexExclusionFilterOutput)
}

func (i GetLogsIndexesLogsIndexExclusionFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetLogsIndexesLogsIndexExclusionFilter] {
	return pulumix.Output[GetLogsIndexesLogsIndexExclusionFilter]{
		OutputState: i.ToGetLogsIndexesLogsIndexExclusionFilterOutputWithContext(ctx).OutputState,
	}
}

// GetLogsIndexesLogsIndexExclusionFilterArrayInput is an input type that accepts GetLogsIndexesLogsIndexExclusionFilterArray and GetLogsIndexesLogsIndexExclusionFilterArrayOutput values.
// You can construct a concrete instance of `GetLogsIndexesLogsIndexExclusionFilterArrayInput` via:
//
//	GetLogsIndexesLogsIndexExclusionFilterArray{ GetLogsIndexesLogsIndexExclusionFilterArgs{...} }
type GetLogsIndexesLogsIndexExclusionFilterArrayInput interface {
	pulumi.Input

	ToGetLogsIndexesLogsIndexExclusionFilterArrayOutput() GetLogsIndexesLogsIndexExclusionFilterArrayOutput
	ToGetLogsIndexesLogsIndexExclusionFilterArrayOutputWithContext(context.Context) GetLogsIndexesLogsIndexExclusionFilterArrayOutput
}

type GetLogsIndexesLogsIndexExclusionFilterArray []GetLogsIndexesLogsIndexExclusionFilterInput

func (GetLogsIndexesLogsIndexExclusionFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLogsIndexesLogsIndexExclusionFilter)(nil)).Elem()
}

func (i GetLogsIndexesLogsIndexExclusionFilterArray) ToGetLogsIndexesLogsIndexExclusionFilterArrayOutput() GetLogsIndexesLogsIndexExclusionFilterArrayOutput {
	return i.ToGetLogsIndexesLogsIndexExclusionFilterArrayOutputWithContext(context.Background())
}

func (i GetLogsIndexesLogsIndexExclusionFilterArray) ToGetLogsIndexesLogsIndexExclusionFilterArrayOutputWithContext(ctx context.Context) GetLogsIndexesLogsIndexExclusionFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogsIndexesLogsIndexExclusionFilterArrayOutput)
}

func (i GetLogsIndexesLogsIndexExclusionFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLogsIndexesLogsIndexExclusionFilter] {
	return pulumix.Output[[]GetLogsIndexesLogsIndexExclusionFilter]{
		OutputState: i.ToGetLogsIndexesLogsIndexExclusionFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLogsIndexesLogsIndexExclusionFilterOutput struct{ *pulumi.OutputState }

func (GetLogsIndexesLogsIndexExclusionFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogsIndexesLogsIndexExclusionFilter)(nil)).Elem()
}

func (o GetLogsIndexesLogsIndexExclusionFilterOutput) ToGetLogsIndexesLogsIndexExclusionFilterOutput() GetLogsIndexesLogsIndexExclusionFilterOutput {
	return o
}

func (o GetLogsIndexesLogsIndexExclusionFilterOutput) ToGetLogsIndexesLogsIndexExclusionFilterOutputWithContext(ctx context.Context) GetLogsIndexesLogsIndexExclusionFilterOutput {
	return o
}

func (o GetLogsIndexesLogsIndexExclusionFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetLogsIndexesLogsIndexExclusionFilter] {
	return pulumix.Output[GetLogsIndexesLogsIndexExclusionFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetLogsIndexesLogsIndexExclusionFilterOutput) Filters() GetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput {
	return o.ApplyT(func(v GetLogsIndexesLogsIndexExclusionFilter) []GetLogsIndexesLogsIndexExclusionFilterFilter {
		return v.Filters
	}).(GetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput)
}

func (o GetLogsIndexesLogsIndexExclusionFilterOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLogsIndexesLogsIndexExclusionFilter) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

func (o GetLogsIndexesLogsIndexExclusionFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogsIndexesLogsIndexExclusionFilter) string { return v.Name }).(pulumi.StringOutput)
}

type GetLogsIndexesLogsIndexExclusionFilterArrayOutput struct{ *pulumi.OutputState }

func (GetLogsIndexesLogsIndexExclusionFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLogsIndexesLogsIndexExclusionFilter)(nil)).Elem()
}

func (o GetLogsIndexesLogsIndexExclusionFilterArrayOutput) ToGetLogsIndexesLogsIndexExclusionFilterArrayOutput() GetLogsIndexesLogsIndexExclusionFilterArrayOutput {
	return o
}

func (o GetLogsIndexesLogsIndexExclusionFilterArrayOutput) ToGetLogsIndexesLogsIndexExclusionFilterArrayOutputWithContext(ctx context.Context) GetLogsIndexesLogsIndexExclusionFilterArrayOutput {
	return o
}

func (o GetLogsIndexesLogsIndexExclusionFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLogsIndexesLogsIndexExclusionFilter] {
	return pulumix.Output[[]GetLogsIndexesLogsIndexExclusionFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetLogsIndexesLogsIndexExclusionFilterArrayOutput) Index(i pulumi.IntInput) GetLogsIndexesLogsIndexExclusionFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLogsIndexesLogsIndexExclusionFilter {
		return vs[0].([]GetLogsIndexesLogsIndexExclusionFilter)[vs[1].(int)]
	}).(GetLogsIndexesLogsIndexExclusionFilterOutput)
}

type GetLogsIndexesLogsIndexExclusionFilterFilter struct {
	Query      string  `pulumi:"query"`
	SampleRate float64 `pulumi:"sampleRate"`
}

// GetLogsIndexesLogsIndexExclusionFilterFilterInput is an input type that accepts GetLogsIndexesLogsIndexExclusionFilterFilterArgs and GetLogsIndexesLogsIndexExclusionFilterFilterOutput values.
// You can construct a concrete instance of `GetLogsIndexesLogsIndexExclusionFilterFilterInput` via:
//
//	GetLogsIndexesLogsIndexExclusionFilterFilterArgs{...}
type GetLogsIndexesLogsIndexExclusionFilterFilterInput interface {
	pulumi.Input

	ToGetLogsIndexesLogsIndexExclusionFilterFilterOutput() GetLogsIndexesLogsIndexExclusionFilterFilterOutput
	ToGetLogsIndexesLogsIndexExclusionFilterFilterOutputWithContext(context.Context) GetLogsIndexesLogsIndexExclusionFilterFilterOutput
}

type GetLogsIndexesLogsIndexExclusionFilterFilterArgs struct {
	Query      pulumi.StringInput  `pulumi:"query"`
	SampleRate pulumi.Float64Input `pulumi:"sampleRate"`
}

func (GetLogsIndexesLogsIndexExclusionFilterFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogsIndexesLogsIndexExclusionFilterFilter)(nil)).Elem()
}

func (i GetLogsIndexesLogsIndexExclusionFilterFilterArgs) ToGetLogsIndexesLogsIndexExclusionFilterFilterOutput() GetLogsIndexesLogsIndexExclusionFilterFilterOutput {
	return i.ToGetLogsIndexesLogsIndexExclusionFilterFilterOutputWithContext(context.Background())
}

func (i GetLogsIndexesLogsIndexExclusionFilterFilterArgs) ToGetLogsIndexesLogsIndexExclusionFilterFilterOutputWithContext(ctx context.Context) GetLogsIndexesLogsIndexExclusionFilterFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogsIndexesLogsIndexExclusionFilterFilterOutput)
}

func (i GetLogsIndexesLogsIndexExclusionFilterFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetLogsIndexesLogsIndexExclusionFilterFilter] {
	return pulumix.Output[GetLogsIndexesLogsIndexExclusionFilterFilter]{
		OutputState: i.ToGetLogsIndexesLogsIndexExclusionFilterFilterOutputWithContext(ctx).OutputState,
	}
}

// GetLogsIndexesLogsIndexExclusionFilterFilterArrayInput is an input type that accepts GetLogsIndexesLogsIndexExclusionFilterFilterArray and GetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput values.
// You can construct a concrete instance of `GetLogsIndexesLogsIndexExclusionFilterFilterArrayInput` via:
//
//	GetLogsIndexesLogsIndexExclusionFilterFilterArray{ GetLogsIndexesLogsIndexExclusionFilterFilterArgs{...} }
type GetLogsIndexesLogsIndexExclusionFilterFilterArrayInput interface {
	pulumi.Input

	ToGetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput() GetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput
	ToGetLogsIndexesLogsIndexExclusionFilterFilterArrayOutputWithContext(context.Context) GetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput
}

type GetLogsIndexesLogsIndexExclusionFilterFilterArray []GetLogsIndexesLogsIndexExclusionFilterFilterInput

func (GetLogsIndexesLogsIndexExclusionFilterFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLogsIndexesLogsIndexExclusionFilterFilter)(nil)).Elem()
}

func (i GetLogsIndexesLogsIndexExclusionFilterFilterArray) ToGetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput() GetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput {
	return i.ToGetLogsIndexesLogsIndexExclusionFilterFilterArrayOutputWithContext(context.Background())
}

func (i GetLogsIndexesLogsIndexExclusionFilterFilterArray) ToGetLogsIndexesLogsIndexExclusionFilterFilterArrayOutputWithContext(ctx context.Context) GetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput)
}

func (i GetLogsIndexesLogsIndexExclusionFilterFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLogsIndexesLogsIndexExclusionFilterFilter] {
	return pulumix.Output[[]GetLogsIndexesLogsIndexExclusionFilterFilter]{
		OutputState: i.ToGetLogsIndexesLogsIndexExclusionFilterFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLogsIndexesLogsIndexExclusionFilterFilterOutput struct{ *pulumi.OutputState }

func (GetLogsIndexesLogsIndexExclusionFilterFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogsIndexesLogsIndexExclusionFilterFilter)(nil)).Elem()
}

func (o GetLogsIndexesLogsIndexExclusionFilterFilterOutput) ToGetLogsIndexesLogsIndexExclusionFilterFilterOutput() GetLogsIndexesLogsIndexExclusionFilterFilterOutput {
	return o
}

func (o GetLogsIndexesLogsIndexExclusionFilterFilterOutput) ToGetLogsIndexesLogsIndexExclusionFilterFilterOutputWithContext(ctx context.Context) GetLogsIndexesLogsIndexExclusionFilterFilterOutput {
	return o
}

func (o GetLogsIndexesLogsIndexExclusionFilterFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetLogsIndexesLogsIndexExclusionFilterFilter] {
	return pulumix.Output[GetLogsIndexesLogsIndexExclusionFilterFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetLogsIndexesLogsIndexExclusionFilterFilterOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogsIndexesLogsIndexExclusionFilterFilter) string { return v.Query }).(pulumi.StringOutput)
}

func (o GetLogsIndexesLogsIndexExclusionFilterFilterOutput) SampleRate() pulumi.Float64Output {
	return o.ApplyT(func(v GetLogsIndexesLogsIndexExclusionFilterFilter) float64 { return v.SampleRate }).(pulumi.Float64Output)
}

type GetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput struct{ *pulumi.OutputState }

func (GetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLogsIndexesLogsIndexExclusionFilterFilter)(nil)).Elem()
}

func (o GetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput) ToGetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput() GetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput {
	return o
}

func (o GetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput) ToGetLogsIndexesLogsIndexExclusionFilterFilterArrayOutputWithContext(ctx context.Context) GetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput {
	return o
}

func (o GetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLogsIndexesLogsIndexExclusionFilterFilter] {
	return pulumix.Output[[]GetLogsIndexesLogsIndexExclusionFilterFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput) Index(i pulumi.IntInput) GetLogsIndexesLogsIndexExclusionFilterFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLogsIndexesLogsIndexExclusionFilterFilter {
		return vs[0].([]GetLogsIndexesLogsIndexExclusionFilterFilter)[vs[1].(int)]
	}).(GetLogsIndexesLogsIndexExclusionFilterFilterOutput)
}

type GetLogsIndexesLogsIndexFilter struct {
	Query string `pulumi:"query"`
}

// GetLogsIndexesLogsIndexFilterInput is an input type that accepts GetLogsIndexesLogsIndexFilterArgs and GetLogsIndexesLogsIndexFilterOutput values.
// You can construct a concrete instance of `GetLogsIndexesLogsIndexFilterInput` via:
//
//	GetLogsIndexesLogsIndexFilterArgs{...}
type GetLogsIndexesLogsIndexFilterInput interface {
	pulumi.Input

	ToGetLogsIndexesLogsIndexFilterOutput() GetLogsIndexesLogsIndexFilterOutput
	ToGetLogsIndexesLogsIndexFilterOutputWithContext(context.Context) GetLogsIndexesLogsIndexFilterOutput
}

type GetLogsIndexesLogsIndexFilterArgs struct {
	Query pulumi.StringInput `pulumi:"query"`
}

func (GetLogsIndexesLogsIndexFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogsIndexesLogsIndexFilter)(nil)).Elem()
}

func (i GetLogsIndexesLogsIndexFilterArgs) ToGetLogsIndexesLogsIndexFilterOutput() GetLogsIndexesLogsIndexFilterOutput {
	return i.ToGetLogsIndexesLogsIndexFilterOutputWithContext(context.Background())
}

func (i GetLogsIndexesLogsIndexFilterArgs) ToGetLogsIndexesLogsIndexFilterOutputWithContext(ctx context.Context) GetLogsIndexesLogsIndexFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogsIndexesLogsIndexFilterOutput)
}

func (i GetLogsIndexesLogsIndexFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetLogsIndexesLogsIndexFilter] {
	return pulumix.Output[GetLogsIndexesLogsIndexFilter]{
		OutputState: i.ToGetLogsIndexesLogsIndexFilterOutputWithContext(ctx).OutputState,
	}
}

// GetLogsIndexesLogsIndexFilterArrayInput is an input type that accepts GetLogsIndexesLogsIndexFilterArray and GetLogsIndexesLogsIndexFilterArrayOutput values.
// You can construct a concrete instance of `GetLogsIndexesLogsIndexFilterArrayInput` via:
//
//	GetLogsIndexesLogsIndexFilterArray{ GetLogsIndexesLogsIndexFilterArgs{...} }
type GetLogsIndexesLogsIndexFilterArrayInput interface {
	pulumi.Input

	ToGetLogsIndexesLogsIndexFilterArrayOutput() GetLogsIndexesLogsIndexFilterArrayOutput
	ToGetLogsIndexesLogsIndexFilterArrayOutputWithContext(context.Context) GetLogsIndexesLogsIndexFilterArrayOutput
}

type GetLogsIndexesLogsIndexFilterArray []GetLogsIndexesLogsIndexFilterInput

func (GetLogsIndexesLogsIndexFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLogsIndexesLogsIndexFilter)(nil)).Elem()
}

func (i GetLogsIndexesLogsIndexFilterArray) ToGetLogsIndexesLogsIndexFilterArrayOutput() GetLogsIndexesLogsIndexFilterArrayOutput {
	return i.ToGetLogsIndexesLogsIndexFilterArrayOutputWithContext(context.Background())
}

func (i GetLogsIndexesLogsIndexFilterArray) ToGetLogsIndexesLogsIndexFilterArrayOutputWithContext(ctx context.Context) GetLogsIndexesLogsIndexFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogsIndexesLogsIndexFilterArrayOutput)
}

func (i GetLogsIndexesLogsIndexFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLogsIndexesLogsIndexFilter] {
	return pulumix.Output[[]GetLogsIndexesLogsIndexFilter]{
		OutputState: i.ToGetLogsIndexesLogsIndexFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLogsIndexesLogsIndexFilterOutput struct{ *pulumi.OutputState }

func (GetLogsIndexesLogsIndexFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogsIndexesLogsIndexFilter)(nil)).Elem()
}

func (o GetLogsIndexesLogsIndexFilterOutput) ToGetLogsIndexesLogsIndexFilterOutput() GetLogsIndexesLogsIndexFilterOutput {
	return o
}

func (o GetLogsIndexesLogsIndexFilterOutput) ToGetLogsIndexesLogsIndexFilterOutputWithContext(ctx context.Context) GetLogsIndexesLogsIndexFilterOutput {
	return o
}

func (o GetLogsIndexesLogsIndexFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetLogsIndexesLogsIndexFilter] {
	return pulumix.Output[GetLogsIndexesLogsIndexFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetLogsIndexesLogsIndexFilterOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogsIndexesLogsIndexFilter) string { return v.Query }).(pulumi.StringOutput)
}

type GetLogsIndexesLogsIndexFilterArrayOutput struct{ *pulumi.OutputState }

func (GetLogsIndexesLogsIndexFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLogsIndexesLogsIndexFilter)(nil)).Elem()
}

func (o GetLogsIndexesLogsIndexFilterArrayOutput) ToGetLogsIndexesLogsIndexFilterArrayOutput() GetLogsIndexesLogsIndexFilterArrayOutput {
	return o
}

func (o GetLogsIndexesLogsIndexFilterArrayOutput) ToGetLogsIndexesLogsIndexFilterArrayOutputWithContext(ctx context.Context) GetLogsIndexesLogsIndexFilterArrayOutput {
	return o
}

func (o GetLogsIndexesLogsIndexFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLogsIndexesLogsIndexFilter] {
	return pulumix.Output[[]GetLogsIndexesLogsIndexFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetLogsIndexesLogsIndexFilterArrayOutput) Index(i pulumi.IntInput) GetLogsIndexesLogsIndexFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLogsIndexesLogsIndexFilter {
		return vs[0].([]GetLogsIndexesLogsIndexFilter)[vs[1].(int)]
	}).(GetLogsIndexesLogsIndexFilterOutput)
}

type GetLogsPipelinesLogsPipeline struct {
	Filters    []GetLogsPipelinesLogsPipelineFilter `pulumi:"filters"`
	Id         string                               `pulumi:"id"`
	IsEnabled  bool                                 `pulumi:"isEnabled"`
	IsReadOnly bool                                 `pulumi:"isReadOnly"`
	Name       string                               `pulumi:"name"`
	Type       string                               `pulumi:"type"`
}

// GetLogsPipelinesLogsPipelineInput is an input type that accepts GetLogsPipelinesLogsPipelineArgs and GetLogsPipelinesLogsPipelineOutput values.
// You can construct a concrete instance of `GetLogsPipelinesLogsPipelineInput` via:
//
//	GetLogsPipelinesLogsPipelineArgs{...}
type GetLogsPipelinesLogsPipelineInput interface {
	pulumi.Input

	ToGetLogsPipelinesLogsPipelineOutput() GetLogsPipelinesLogsPipelineOutput
	ToGetLogsPipelinesLogsPipelineOutputWithContext(context.Context) GetLogsPipelinesLogsPipelineOutput
}

type GetLogsPipelinesLogsPipelineArgs struct {
	Filters    GetLogsPipelinesLogsPipelineFilterArrayInput `pulumi:"filters"`
	Id         pulumi.StringInput                           `pulumi:"id"`
	IsEnabled  pulumi.BoolInput                             `pulumi:"isEnabled"`
	IsReadOnly pulumi.BoolInput                             `pulumi:"isReadOnly"`
	Name       pulumi.StringInput                           `pulumi:"name"`
	Type       pulumi.StringInput                           `pulumi:"type"`
}

func (GetLogsPipelinesLogsPipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogsPipelinesLogsPipeline)(nil)).Elem()
}

func (i GetLogsPipelinesLogsPipelineArgs) ToGetLogsPipelinesLogsPipelineOutput() GetLogsPipelinesLogsPipelineOutput {
	return i.ToGetLogsPipelinesLogsPipelineOutputWithContext(context.Background())
}

func (i GetLogsPipelinesLogsPipelineArgs) ToGetLogsPipelinesLogsPipelineOutputWithContext(ctx context.Context) GetLogsPipelinesLogsPipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogsPipelinesLogsPipelineOutput)
}

func (i GetLogsPipelinesLogsPipelineArgs) ToOutput(ctx context.Context) pulumix.Output[GetLogsPipelinesLogsPipeline] {
	return pulumix.Output[GetLogsPipelinesLogsPipeline]{
		OutputState: i.ToGetLogsPipelinesLogsPipelineOutputWithContext(ctx).OutputState,
	}
}

// GetLogsPipelinesLogsPipelineArrayInput is an input type that accepts GetLogsPipelinesLogsPipelineArray and GetLogsPipelinesLogsPipelineArrayOutput values.
// You can construct a concrete instance of `GetLogsPipelinesLogsPipelineArrayInput` via:
//
//	GetLogsPipelinesLogsPipelineArray{ GetLogsPipelinesLogsPipelineArgs{...} }
type GetLogsPipelinesLogsPipelineArrayInput interface {
	pulumi.Input

	ToGetLogsPipelinesLogsPipelineArrayOutput() GetLogsPipelinesLogsPipelineArrayOutput
	ToGetLogsPipelinesLogsPipelineArrayOutputWithContext(context.Context) GetLogsPipelinesLogsPipelineArrayOutput
}

type GetLogsPipelinesLogsPipelineArray []GetLogsPipelinesLogsPipelineInput

func (GetLogsPipelinesLogsPipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLogsPipelinesLogsPipeline)(nil)).Elem()
}

func (i GetLogsPipelinesLogsPipelineArray) ToGetLogsPipelinesLogsPipelineArrayOutput() GetLogsPipelinesLogsPipelineArrayOutput {
	return i.ToGetLogsPipelinesLogsPipelineArrayOutputWithContext(context.Background())
}

func (i GetLogsPipelinesLogsPipelineArray) ToGetLogsPipelinesLogsPipelineArrayOutputWithContext(ctx context.Context) GetLogsPipelinesLogsPipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogsPipelinesLogsPipelineArrayOutput)
}

func (i GetLogsPipelinesLogsPipelineArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLogsPipelinesLogsPipeline] {
	return pulumix.Output[[]GetLogsPipelinesLogsPipeline]{
		OutputState: i.ToGetLogsPipelinesLogsPipelineArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLogsPipelinesLogsPipelineOutput struct{ *pulumi.OutputState }

func (GetLogsPipelinesLogsPipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogsPipelinesLogsPipeline)(nil)).Elem()
}

func (o GetLogsPipelinesLogsPipelineOutput) ToGetLogsPipelinesLogsPipelineOutput() GetLogsPipelinesLogsPipelineOutput {
	return o
}

func (o GetLogsPipelinesLogsPipelineOutput) ToGetLogsPipelinesLogsPipelineOutputWithContext(ctx context.Context) GetLogsPipelinesLogsPipelineOutput {
	return o
}

func (o GetLogsPipelinesLogsPipelineOutput) ToOutput(ctx context.Context) pulumix.Output[GetLogsPipelinesLogsPipeline] {
	return pulumix.Output[GetLogsPipelinesLogsPipeline]{
		OutputState: o.OutputState,
	}
}

func (o GetLogsPipelinesLogsPipelineOutput) Filters() GetLogsPipelinesLogsPipelineFilterArrayOutput {
	return o.ApplyT(func(v GetLogsPipelinesLogsPipeline) []GetLogsPipelinesLogsPipelineFilter { return v.Filters }).(GetLogsPipelinesLogsPipelineFilterArrayOutput)
}

func (o GetLogsPipelinesLogsPipelineOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogsPipelinesLogsPipeline) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetLogsPipelinesLogsPipelineOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLogsPipelinesLogsPipeline) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

func (o GetLogsPipelinesLogsPipelineOutput) IsReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLogsPipelinesLogsPipeline) bool { return v.IsReadOnly }).(pulumi.BoolOutput)
}

func (o GetLogsPipelinesLogsPipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogsPipelinesLogsPipeline) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetLogsPipelinesLogsPipelineOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogsPipelinesLogsPipeline) string { return v.Type }).(pulumi.StringOutput)
}

type GetLogsPipelinesLogsPipelineArrayOutput struct{ *pulumi.OutputState }

func (GetLogsPipelinesLogsPipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLogsPipelinesLogsPipeline)(nil)).Elem()
}

func (o GetLogsPipelinesLogsPipelineArrayOutput) ToGetLogsPipelinesLogsPipelineArrayOutput() GetLogsPipelinesLogsPipelineArrayOutput {
	return o
}

func (o GetLogsPipelinesLogsPipelineArrayOutput) ToGetLogsPipelinesLogsPipelineArrayOutputWithContext(ctx context.Context) GetLogsPipelinesLogsPipelineArrayOutput {
	return o
}

func (o GetLogsPipelinesLogsPipelineArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLogsPipelinesLogsPipeline] {
	return pulumix.Output[[]GetLogsPipelinesLogsPipeline]{
		OutputState: o.OutputState,
	}
}

func (o GetLogsPipelinesLogsPipelineArrayOutput) Index(i pulumi.IntInput) GetLogsPipelinesLogsPipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLogsPipelinesLogsPipeline {
		return vs[0].([]GetLogsPipelinesLogsPipeline)[vs[1].(int)]
	}).(GetLogsPipelinesLogsPipelineOutput)
}

type GetLogsPipelinesLogsPipelineFilter struct {
	Query string `pulumi:"query"`
}

// GetLogsPipelinesLogsPipelineFilterInput is an input type that accepts GetLogsPipelinesLogsPipelineFilterArgs and GetLogsPipelinesLogsPipelineFilterOutput values.
// You can construct a concrete instance of `GetLogsPipelinesLogsPipelineFilterInput` via:
//
//	GetLogsPipelinesLogsPipelineFilterArgs{...}
type GetLogsPipelinesLogsPipelineFilterInput interface {
	pulumi.Input

	ToGetLogsPipelinesLogsPipelineFilterOutput() GetLogsPipelinesLogsPipelineFilterOutput
	ToGetLogsPipelinesLogsPipelineFilterOutputWithContext(context.Context) GetLogsPipelinesLogsPipelineFilterOutput
}

type GetLogsPipelinesLogsPipelineFilterArgs struct {
	Query pulumi.StringInput `pulumi:"query"`
}

func (GetLogsPipelinesLogsPipelineFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogsPipelinesLogsPipelineFilter)(nil)).Elem()
}

func (i GetLogsPipelinesLogsPipelineFilterArgs) ToGetLogsPipelinesLogsPipelineFilterOutput() GetLogsPipelinesLogsPipelineFilterOutput {
	return i.ToGetLogsPipelinesLogsPipelineFilterOutputWithContext(context.Background())
}

func (i GetLogsPipelinesLogsPipelineFilterArgs) ToGetLogsPipelinesLogsPipelineFilterOutputWithContext(ctx context.Context) GetLogsPipelinesLogsPipelineFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogsPipelinesLogsPipelineFilterOutput)
}

func (i GetLogsPipelinesLogsPipelineFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetLogsPipelinesLogsPipelineFilter] {
	return pulumix.Output[GetLogsPipelinesLogsPipelineFilter]{
		OutputState: i.ToGetLogsPipelinesLogsPipelineFilterOutputWithContext(ctx).OutputState,
	}
}

// GetLogsPipelinesLogsPipelineFilterArrayInput is an input type that accepts GetLogsPipelinesLogsPipelineFilterArray and GetLogsPipelinesLogsPipelineFilterArrayOutput values.
// You can construct a concrete instance of `GetLogsPipelinesLogsPipelineFilterArrayInput` via:
//
//	GetLogsPipelinesLogsPipelineFilterArray{ GetLogsPipelinesLogsPipelineFilterArgs{...} }
type GetLogsPipelinesLogsPipelineFilterArrayInput interface {
	pulumi.Input

	ToGetLogsPipelinesLogsPipelineFilterArrayOutput() GetLogsPipelinesLogsPipelineFilterArrayOutput
	ToGetLogsPipelinesLogsPipelineFilterArrayOutputWithContext(context.Context) GetLogsPipelinesLogsPipelineFilterArrayOutput
}

type GetLogsPipelinesLogsPipelineFilterArray []GetLogsPipelinesLogsPipelineFilterInput

func (GetLogsPipelinesLogsPipelineFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLogsPipelinesLogsPipelineFilter)(nil)).Elem()
}

func (i GetLogsPipelinesLogsPipelineFilterArray) ToGetLogsPipelinesLogsPipelineFilterArrayOutput() GetLogsPipelinesLogsPipelineFilterArrayOutput {
	return i.ToGetLogsPipelinesLogsPipelineFilterArrayOutputWithContext(context.Background())
}

func (i GetLogsPipelinesLogsPipelineFilterArray) ToGetLogsPipelinesLogsPipelineFilterArrayOutputWithContext(ctx context.Context) GetLogsPipelinesLogsPipelineFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogsPipelinesLogsPipelineFilterArrayOutput)
}

func (i GetLogsPipelinesLogsPipelineFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLogsPipelinesLogsPipelineFilter] {
	return pulumix.Output[[]GetLogsPipelinesLogsPipelineFilter]{
		OutputState: i.ToGetLogsPipelinesLogsPipelineFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLogsPipelinesLogsPipelineFilterOutput struct{ *pulumi.OutputState }

func (GetLogsPipelinesLogsPipelineFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogsPipelinesLogsPipelineFilter)(nil)).Elem()
}

func (o GetLogsPipelinesLogsPipelineFilterOutput) ToGetLogsPipelinesLogsPipelineFilterOutput() GetLogsPipelinesLogsPipelineFilterOutput {
	return o
}

func (o GetLogsPipelinesLogsPipelineFilterOutput) ToGetLogsPipelinesLogsPipelineFilterOutputWithContext(ctx context.Context) GetLogsPipelinesLogsPipelineFilterOutput {
	return o
}

func (o GetLogsPipelinesLogsPipelineFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetLogsPipelinesLogsPipelineFilter] {
	return pulumix.Output[GetLogsPipelinesLogsPipelineFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetLogsPipelinesLogsPipelineFilterOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogsPipelinesLogsPipelineFilter) string { return v.Query }).(pulumi.StringOutput)
}

type GetLogsPipelinesLogsPipelineFilterArrayOutput struct{ *pulumi.OutputState }

func (GetLogsPipelinesLogsPipelineFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLogsPipelinesLogsPipelineFilter)(nil)).Elem()
}

func (o GetLogsPipelinesLogsPipelineFilterArrayOutput) ToGetLogsPipelinesLogsPipelineFilterArrayOutput() GetLogsPipelinesLogsPipelineFilterArrayOutput {
	return o
}

func (o GetLogsPipelinesLogsPipelineFilterArrayOutput) ToGetLogsPipelinesLogsPipelineFilterArrayOutputWithContext(ctx context.Context) GetLogsPipelinesLogsPipelineFilterArrayOutput {
	return o
}

func (o GetLogsPipelinesLogsPipelineFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLogsPipelinesLogsPipelineFilter] {
	return pulumix.Output[[]GetLogsPipelinesLogsPipelineFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetLogsPipelinesLogsPipelineFilterArrayOutput) Index(i pulumi.IntInput) GetLogsPipelinesLogsPipelineFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLogsPipelinesLogsPipelineFilter {
		return vs[0].([]GetLogsPipelinesLogsPipelineFilter)[vs[1].(int)]
	}).(GetLogsPipelinesLogsPipelineFilterOutput)
}

type GetMonitorConfigPoliciesMonitorConfigPolicy struct {
	Id         string                                               `pulumi:"id"`
	PolicyType string                                               `pulumi:"policyType"`
	TagPolicy  GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicy `pulumi:"tagPolicy"`
}

// GetMonitorConfigPoliciesMonitorConfigPolicyInput is an input type that accepts GetMonitorConfigPoliciesMonitorConfigPolicyArgs and GetMonitorConfigPoliciesMonitorConfigPolicyOutput values.
// You can construct a concrete instance of `GetMonitorConfigPoliciesMonitorConfigPolicyInput` via:
//
//	GetMonitorConfigPoliciesMonitorConfigPolicyArgs{...}
type GetMonitorConfigPoliciesMonitorConfigPolicyInput interface {
	pulumi.Input

	ToGetMonitorConfigPoliciesMonitorConfigPolicyOutput() GetMonitorConfigPoliciesMonitorConfigPolicyOutput
	ToGetMonitorConfigPoliciesMonitorConfigPolicyOutputWithContext(context.Context) GetMonitorConfigPoliciesMonitorConfigPolicyOutput
}

type GetMonitorConfigPoliciesMonitorConfigPolicyArgs struct {
	Id         pulumi.StringInput                                        `pulumi:"id"`
	PolicyType pulumi.StringInput                                        `pulumi:"policyType"`
	TagPolicy  GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyInput `pulumi:"tagPolicy"`
}

func (GetMonitorConfigPoliciesMonitorConfigPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorConfigPoliciesMonitorConfigPolicy)(nil)).Elem()
}

func (i GetMonitorConfigPoliciesMonitorConfigPolicyArgs) ToGetMonitorConfigPoliciesMonitorConfigPolicyOutput() GetMonitorConfigPoliciesMonitorConfigPolicyOutput {
	return i.ToGetMonitorConfigPoliciesMonitorConfigPolicyOutputWithContext(context.Background())
}

func (i GetMonitorConfigPoliciesMonitorConfigPolicyArgs) ToGetMonitorConfigPoliciesMonitorConfigPolicyOutputWithContext(ctx context.Context) GetMonitorConfigPoliciesMonitorConfigPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorConfigPoliciesMonitorConfigPolicyOutput)
}

func (i GetMonitorConfigPoliciesMonitorConfigPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[GetMonitorConfigPoliciesMonitorConfigPolicy] {
	return pulumix.Output[GetMonitorConfigPoliciesMonitorConfigPolicy]{
		OutputState: i.ToGetMonitorConfigPoliciesMonitorConfigPolicyOutputWithContext(ctx).OutputState,
	}
}

// GetMonitorConfigPoliciesMonitorConfigPolicyArrayInput is an input type that accepts GetMonitorConfigPoliciesMonitorConfigPolicyArray and GetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput values.
// You can construct a concrete instance of `GetMonitorConfigPoliciesMonitorConfigPolicyArrayInput` via:
//
//	GetMonitorConfigPoliciesMonitorConfigPolicyArray{ GetMonitorConfigPoliciesMonitorConfigPolicyArgs{...} }
type GetMonitorConfigPoliciesMonitorConfigPolicyArrayInput interface {
	pulumi.Input

	ToGetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput() GetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput
	ToGetMonitorConfigPoliciesMonitorConfigPolicyArrayOutputWithContext(context.Context) GetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput
}

type GetMonitorConfigPoliciesMonitorConfigPolicyArray []GetMonitorConfigPoliciesMonitorConfigPolicyInput

func (GetMonitorConfigPoliciesMonitorConfigPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorConfigPoliciesMonitorConfigPolicy)(nil)).Elem()
}

func (i GetMonitorConfigPoliciesMonitorConfigPolicyArray) ToGetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput() GetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput {
	return i.ToGetMonitorConfigPoliciesMonitorConfigPolicyArrayOutputWithContext(context.Background())
}

func (i GetMonitorConfigPoliciesMonitorConfigPolicyArray) ToGetMonitorConfigPoliciesMonitorConfigPolicyArrayOutputWithContext(ctx context.Context) GetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput)
}

func (i GetMonitorConfigPoliciesMonitorConfigPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetMonitorConfigPoliciesMonitorConfigPolicy] {
	return pulumix.Output[[]GetMonitorConfigPoliciesMonitorConfigPolicy]{
		OutputState: i.ToGetMonitorConfigPoliciesMonitorConfigPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetMonitorConfigPoliciesMonitorConfigPolicyOutput struct{ *pulumi.OutputState }

func (GetMonitorConfigPoliciesMonitorConfigPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorConfigPoliciesMonitorConfigPolicy)(nil)).Elem()
}

func (o GetMonitorConfigPoliciesMonitorConfigPolicyOutput) ToGetMonitorConfigPoliciesMonitorConfigPolicyOutput() GetMonitorConfigPoliciesMonitorConfigPolicyOutput {
	return o
}

func (o GetMonitorConfigPoliciesMonitorConfigPolicyOutput) ToGetMonitorConfigPoliciesMonitorConfigPolicyOutputWithContext(ctx context.Context) GetMonitorConfigPoliciesMonitorConfigPolicyOutput {
	return o
}

func (o GetMonitorConfigPoliciesMonitorConfigPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetMonitorConfigPoliciesMonitorConfigPolicy] {
	return pulumix.Output[GetMonitorConfigPoliciesMonitorConfigPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetMonitorConfigPoliciesMonitorConfigPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorConfigPoliciesMonitorConfigPolicy) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetMonitorConfigPoliciesMonitorConfigPolicyOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorConfigPoliciesMonitorConfigPolicy) string { return v.PolicyType }).(pulumi.StringOutput)
}

func (o GetMonitorConfigPoliciesMonitorConfigPolicyOutput) TagPolicy() GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput {
	return o.ApplyT(func(v GetMonitorConfigPoliciesMonitorConfigPolicy) GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicy {
		return v.TagPolicy
	}).(GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput)
}

type GetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorConfigPoliciesMonitorConfigPolicy)(nil)).Elem()
}

func (o GetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput) ToGetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput() GetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput {
	return o
}

func (o GetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput) ToGetMonitorConfigPoliciesMonitorConfigPolicyArrayOutputWithContext(ctx context.Context) GetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput {
	return o
}

func (o GetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetMonitorConfigPoliciesMonitorConfigPolicy] {
	return pulumix.Output[[]GetMonitorConfigPoliciesMonitorConfigPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput) Index(i pulumi.IntInput) GetMonitorConfigPoliciesMonitorConfigPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMonitorConfigPoliciesMonitorConfigPolicy {
		return vs[0].([]GetMonitorConfigPoliciesMonitorConfigPolicy)[vs[1].(int)]
	}).(GetMonitorConfigPoliciesMonitorConfigPolicyOutput)
}

type GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicy struct {
	TagKey         string   `pulumi:"tagKey"`
	TagKeyRequired bool     `pulumi:"tagKeyRequired"`
	ValidTagValues []string `pulumi:"validTagValues"`
}

// GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyInput is an input type that accepts GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyArgs and GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput values.
// You can construct a concrete instance of `GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyInput` via:
//
//	GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyArgs{...}
type GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyInput interface {
	pulumi.Input

	ToGetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput() GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput
	ToGetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutputWithContext(context.Context) GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput
}

type GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyArgs struct {
	TagKey         pulumi.StringInput      `pulumi:"tagKey"`
	TagKeyRequired pulumi.BoolInput        `pulumi:"tagKeyRequired"`
	ValidTagValues pulumi.StringArrayInput `pulumi:"validTagValues"`
}

func (GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicy)(nil)).Elem()
}

func (i GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyArgs) ToGetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput() GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput {
	return i.ToGetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutputWithContext(context.Background())
}

func (i GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyArgs) ToGetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutputWithContext(ctx context.Context) GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput)
}

func (i GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicy] {
	return pulumix.Output[GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicy]{
		OutputState: i.ToGetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutputWithContext(ctx).OutputState,
	}
}

type GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput struct{ *pulumi.OutputState }

func (GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicy)(nil)).Elem()
}

func (o GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput) ToGetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput() GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput {
	return o
}

func (o GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput) ToGetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutputWithContext(ctx context.Context) GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput {
	return o
}

func (o GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicy] {
	return pulumix.Output[GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput) TagKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicy) string { return v.TagKey }).(pulumi.StringOutput)
}

func (o GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput) TagKeyRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicy) bool { return v.TagKeyRequired }).(pulumi.BoolOutput)
}

func (o GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput) ValidTagValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicy) []string { return v.ValidTagValues }).(pulumi.StringArrayOutput)
}

type GetMonitorMonitorThreshold struct {
	Critical         string `pulumi:"critical"`
	CriticalRecovery string `pulumi:"criticalRecovery"`
	Ok               string `pulumi:"ok"`
	Unknown          string `pulumi:"unknown"`
	Warning          string `pulumi:"warning"`
	WarningRecovery  string `pulumi:"warningRecovery"`
}

// GetMonitorMonitorThresholdInput is an input type that accepts GetMonitorMonitorThresholdArgs and GetMonitorMonitorThresholdOutput values.
// You can construct a concrete instance of `GetMonitorMonitorThresholdInput` via:
//
//	GetMonitorMonitorThresholdArgs{...}
type GetMonitorMonitorThresholdInput interface {
	pulumi.Input

	ToGetMonitorMonitorThresholdOutput() GetMonitorMonitorThresholdOutput
	ToGetMonitorMonitorThresholdOutputWithContext(context.Context) GetMonitorMonitorThresholdOutput
}

type GetMonitorMonitorThresholdArgs struct {
	Critical         pulumi.StringInput `pulumi:"critical"`
	CriticalRecovery pulumi.StringInput `pulumi:"criticalRecovery"`
	Ok               pulumi.StringInput `pulumi:"ok"`
	Unknown          pulumi.StringInput `pulumi:"unknown"`
	Warning          pulumi.StringInput `pulumi:"warning"`
	WarningRecovery  pulumi.StringInput `pulumi:"warningRecovery"`
}

func (GetMonitorMonitorThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorMonitorThreshold)(nil)).Elem()
}

func (i GetMonitorMonitorThresholdArgs) ToGetMonitorMonitorThresholdOutput() GetMonitorMonitorThresholdOutput {
	return i.ToGetMonitorMonitorThresholdOutputWithContext(context.Background())
}

func (i GetMonitorMonitorThresholdArgs) ToGetMonitorMonitorThresholdOutputWithContext(ctx context.Context) GetMonitorMonitorThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorMonitorThresholdOutput)
}

func (i GetMonitorMonitorThresholdArgs) ToOutput(ctx context.Context) pulumix.Output[GetMonitorMonitorThreshold] {
	return pulumix.Output[GetMonitorMonitorThreshold]{
		OutputState: i.ToGetMonitorMonitorThresholdOutputWithContext(ctx).OutputState,
	}
}

// GetMonitorMonitorThresholdArrayInput is an input type that accepts GetMonitorMonitorThresholdArray and GetMonitorMonitorThresholdArrayOutput values.
// You can construct a concrete instance of `GetMonitorMonitorThresholdArrayInput` via:
//
//	GetMonitorMonitorThresholdArray{ GetMonitorMonitorThresholdArgs{...} }
type GetMonitorMonitorThresholdArrayInput interface {
	pulumi.Input

	ToGetMonitorMonitorThresholdArrayOutput() GetMonitorMonitorThresholdArrayOutput
	ToGetMonitorMonitorThresholdArrayOutputWithContext(context.Context) GetMonitorMonitorThresholdArrayOutput
}

type GetMonitorMonitorThresholdArray []GetMonitorMonitorThresholdInput

func (GetMonitorMonitorThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorMonitorThreshold)(nil)).Elem()
}

func (i GetMonitorMonitorThresholdArray) ToGetMonitorMonitorThresholdArrayOutput() GetMonitorMonitorThresholdArrayOutput {
	return i.ToGetMonitorMonitorThresholdArrayOutputWithContext(context.Background())
}

func (i GetMonitorMonitorThresholdArray) ToGetMonitorMonitorThresholdArrayOutputWithContext(ctx context.Context) GetMonitorMonitorThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorMonitorThresholdArrayOutput)
}

func (i GetMonitorMonitorThresholdArray) ToOutput(ctx context.Context) pulumix.Output[[]GetMonitorMonitorThreshold] {
	return pulumix.Output[[]GetMonitorMonitorThreshold]{
		OutputState: i.ToGetMonitorMonitorThresholdArrayOutputWithContext(ctx).OutputState,
	}
}

type GetMonitorMonitorThresholdOutput struct{ *pulumi.OutputState }

func (GetMonitorMonitorThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorMonitorThreshold)(nil)).Elem()
}

func (o GetMonitorMonitorThresholdOutput) ToGetMonitorMonitorThresholdOutput() GetMonitorMonitorThresholdOutput {
	return o
}

func (o GetMonitorMonitorThresholdOutput) ToGetMonitorMonitorThresholdOutputWithContext(ctx context.Context) GetMonitorMonitorThresholdOutput {
	return o
}

func (o GetMonitorMonitorThresholdOutput) ToOutput(ctx context.Context) pulumix.Output[GetMonitorMonitorThreshold] {
	return pulumix.Output[GetMonitorMonitorThreshold]{
		OutputState: o.OutputState,
	}
}

func (o GetMonitorMonitorThresholdOutput) Critical() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorMonitorThreshold) string { return v.Critical }).(pulumi.StringOutput)
}

func (o GetMonitorMonitorThresholdOutput) CriticalRecovery() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorMonitorThreshold) string { return v.CriticalRecovery }).(pulumi.StringOutput)
}

func (o GetMonitorMonitorThresholdOutput) Ok() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorMonitorThreshold) string { return v.Ok }).(pulumi.StringOutput)
}

func (o GetMonitorMonitorThresholdOutput) Unknown() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorMonitorThreshold) string { return v.Unknown }).(pulumi.StringOutput)
}

func (o GetMonitorMonitorThresholdOutput) Warning() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorMonitorThreshold) string { return v.Warning }).(pulumi.StringOutput)
}

func (o GetMonitorMonitorThresholdOutput) WarningRecovery() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorMonitorThreshold) string { return v.WarningRecovery }).(pulumi.StringOutput)
}

type GetMonitorMonitorThresholdArrayOutput struct{ *pulumi.OutputState }

func (GetMonitorMonitorThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorMonitorThreshold)(nil)).Elem()
}

func (o GetMonitorMonitorThresholdArrayOutput) ToGetMonitorMonitorThresholdArrayOutput() GetMonitorMonitorThresholdArrayOutput {
	return o
}

func (o GetMonitorMonitorThresholdArrayOutput) ToGetMonitorMonitorThresholdArrayOutputWithContext(ctx context.Context) GetMonitorMonitorThresholdArrayOutput {
	return o
}

func (o GetMonitorMonitorThresholdArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetMonitorMonitorThreshold] {
	return pulumix.Output[[]GetMonitorMonitorThreshold]{
		OutputState: o.OutputState,
	}
}

func (o GetMonitorMonitorThresholdArrayOutput) Index(i pulumi.IntInput) GetMonitorMonitorThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMonitorMonitorThreshold {
		return vs[0].([]GetMonitorMonitorThreshold)[vs[1].(int)]
	}).(GetMonitorMonitorThresholdOutput)
}

type GetMonitorMonitorThresholdWindow struct {
	RecoveryWindow string `pulumi:"recoveryWindow"`
	TriggerWindow  string `pulumi:"triggerWindow"`
}

// GetMonitorMonitorThresholdWindowInput is an input type that accepts GetMonitorMonitorThresholdWindowArgs and GetMonitorMonitorThresholdWindowOutput values.
// You can construct a concrete instance of `GetMonitorMonitorThresholdWindowInput` via:
//
//	GetMonitorMonitorThresholdWindowArgs{...}
type GetMonitorMonitorThresholdWindowInput interface {
	pulumi.Input

	ToGetMonitorMonitorThresholdWindowOutput() GetMonitorMonitorThresholdWindowOutput
	ToGetMonitorMonitorThresholdWindowOutputWithContext(context.Context) GetMonitorMonitorThresholdWindowOutput
}

type GetMonitorMonitorThresholdWindowArgs struct {
	RecoveryWindow pulumi.StringInput `pulumi:"recoveryWindow"`
	TriggerWindow  pulumi.StringInput `pulumi:"triggerWindow"`
}

func (GetMonitorMonitorThresholdWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorMonitorThresholdWindow)(nil)).Elem()
}

func (i GetMonitorMonitorThresholdWindowArgs) ToGetMonitorMonitorThresholdWindowOutput() GetMonitorMonitorThresholdWindowOutput {
	return i.ToGetMonitorMonitorThresholdWindowOutputWithContext(context.Background())
}

func (i GetMonitorMonitorThresholdWindowArgs) ToGetMonitorMonitorThresholdWindowOutputWithContext(ctx context.Context) GetMonitorMonitorThresholdWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorMonitorThresholdWindowOutput)
}

func (i GetMonitorMonitorThresholdWindowArgs) ToOutput(ctx context.Context) pulumix.Output[GetMonitorMonitorThresholdWindow] {
	return pulumix.Output[GetMonitorMonitorThresholdWindow]{
		OutputState: i.ToGetMonitorMonitorThresholdWindowOutputWithContext(ctx).OutputState,
	}
}

// GetMonitorMonitorThresholdWindowArrayInput is an input type that accepts GetMonitorMonitorThresholdWindowArray and GetMonitorMonitorThresholdWindowArrayOutput values.
// You can construct a concrete instance of `GetMonitorMonitorThresholdWindowArrayInput` via:
//
//	GetMonitorMonitorThresholdWindowArray{ GetMonitorMonitorThresholdWindowArgs{...} }
type GetMonitorMonitorThresholdWindowArrayInput interface {
	pulumi.Input

	ToGetMonitorMonitorThresholdWindowArrayOutput() GetMonitorMonitorThresholdWindowArrayOutput
	ToGetMonitorMonitorThresholdWindowArrayOutputWithContext(context.Context) GetMonitorMonitorThresholdWindowArrayOutput
}

type GetMonitorMonitorThresholdWindowArray []GetMonitorMonitorThresholdWindowInput

func (GetMonitorMonitorThresholdWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorMonitorThresholdWindow)(nil)).Elem()
}

func (i GetMonitorMonitorThresholdWindowArray) ToGetMonitorMonitorThresholdWindowArrayOutput() GetMonitorMonitorThresholdWindowArrayOutput {
	return i.ToGetMonitorMonitorThresholdWindowArrayOutputWithContext(context.Background())
}

func (i GetMonitorMonitorThresholdWindowArray) ToGetMonitorMonitorThresholdWindowArrayOutputWithContext(ctx context.Context) GetMonitorMonitorThresholdWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorMonitorThresholdWindowArrayOutput)
}

func (i GetMonitorMonitorThresholdWindowArray) ToOutput(ctx context.Context) pulumix.Output[[]GetMonitorMonitorThresholdWindow] {
	return pulumix.Output[[]GetMonitorMonitorThresholdWindow]{
		OutputState: i.ToGetMonitorMonitorThresholdWindowArrayOutputWithContext(ctx).OutputState,
	}
}

type GetMonitorMonitorThresholdWindowOutput struct{ *pulumi.OutputState }

func (GetMonitorMonitorThresholdWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorMonitorThresholdWindow)(nil)).Elem()
}

func (o GetMonitorMonitorThresholdWindowOutput) ToGetMonitorMonitorThresholdWindowOutput() GetMonitorMonitorThresholdWindowOutput {
	return o
}

func (o GetMonitorMonitorThresholdWindowOutput) ToGetMonitorMonitorThresholdWindowOutputWithContext(ctx context.Context) GetMonitorMonitorThresholdWindowOutput {
	return o
}

func (o GetMonitorMonitorThresholdWindowOutput) ToOutput(ctx context.Context) pulumix.Output[GetMonitorMonitorThresholdWindow] {
	return pulumix.Output[GetMonitorMonitorThresholdWindow]{
		OutputState: o.OutputState,
	}
}

func (o GetMonitorMonitorThresholdWindowOutput) RecoveryWindow() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorMonitorThresholdWindow) string { return v.RecoveryWindow }).(pulumi.StringOutput)
}

func (o GetMonitorMonitorThresholdWindowOutput) TriggerWindow() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorMonitorThresholdWindow) string { return v.TriggerWindow }).(pulumi.StringOutput)
}

type GetMonitorMonitorThresholdWindowArrayOutput struct{ *pulumi.OutputState }

func (GetMonitorMonitorThresholdWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorMonitorThresholdWindow)(nil)).Elem()
}

func (o GetMonitorMonitorThresholdWindowArrayOutput) ToGetMonitorMonitorThresholdWindowArrayOutput() GetMonitorMonitorThresholdWindowArrayOutput {
	return o
}

func (o GetMonitorMonitorThresholdWindowArrayOutput) ToGetMonitorMonitorThresholdWindowArrayOutputWithContext(ctx context.Context) GetMonitorMonitorThresholdWindowArrayOutput {
	return o
}

func (o GetMonitorMonitorThresholdWindowArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetMonitorMonitorThresholdWindow] {
	return pulumix.Output[[]GetMonitorMonitorThresholdWindow]{
		OutputState: o.OutputState,
	}
}

func (o GetMonitorMonitorThresholdWindowArrayOutput) Index(i pulumi.IntInput) GetMonitorMonitorThresholdWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMonitorMonitorThresholdWindow {
		return vs[0].([]GetMonitorMonitorThresholdWindow)[vs[1].(int)]
	}).(GetMonitorMonitorThresholdWindowOutput)
}

type GetMonitorSchedulingOption struct {
	EvaluationWindows []GetMonitorSchedulingOptionEvaluationWindow `pulumi:"evaluationWindows"`
}

// GetMonitorSchedulingOptionInput is an input type that accepts GetMonitorSchedulingOptionArgs and GetMonitorSchedulingOptionOutput values.
// You can construct a concrete instance of `GetMonitorSchedulingOptionInput` via:
//
//	GetMonitorSchedulingOptionArgs{...}
type GetMonitorSchedulingOptionInput interface {
	pulumi.Input

	ToGetMonitorSchedulingOptionOutput() GetMonitorSchedulingOptionOutput
	ToGetMonitorSchedulingOptionOutputWithContext(context.Context) GetMonitorSchedulingOptionOutput
}

type GetMonitorSchedulingOptionArgs struct {
	EvaluationWindows GetMonitorSchedulingOptionEvaluationWindowArrayInput `pulumi:"evaluationWindows"`
}

func (GetMonitorSchedulingOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorSchedulingOption)(nil)).Elem()
}

func (i GetMonitorSchedulingOptionArgs) ToGetMonitorSchedulingOptionOutput() GetMonitorSchedulingOptionOutput {
	return i.ToGetMonitorSchedulingOptionOutputWithContext(context.Background())
}

func (i GetMonitorSchedulingOptionArgs) ToGetMonitorSchedulingOptionOutputWithContext(ctx context.Context) GetMonitorSchedulingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorSchedulingOptionOutput)
}

func (i GetMonitorSchedulingOptionArgs) ToOutput(ctx context.Context) pulumix.Output[GetMonitorSchedulingOption] {
	return pulumix.Output[GetMonitorSchedulingOption]{
		OutputState: i.ToGetMonitorSchedulingOptionOutputWithContext(ctx).OutputState,
	}
}

// GetMonitorSchedulingOptionArrayInput is an input type that accepts GetMonitorSchedulingOptionArray and GetMonitorSchedulingOptionArrayOutput values.
// You can construct a concrete instance of `GetMonitorSchedulingOptionArrayInput` via:
//
//	GetMonitorSchedulingOptionArray{ GetMonitorSchedulingOptionArgs{...} }
type GetMonitorSchedulingOptionArrayInput interface {
	pulumi.Input

	ToGetMonitorSchedulingOptionArrayOutput() GetMonitorSchedulingOptionArrayOutput
	ToGetMonitorSchedulingOptionArrayOutputWithContext(context.Context) GetMonitorSchedulingOptionArrayOutput
}

type GetMonitorSchedulingOptionArray []GetMonitorSchedulingOptionInput

func (GetMonitorSchedulingOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorSchedulingOption)(nil)).Elem()
}

func (i GetMonitorSchedulingOptionArray) ToGetMonitorSchedulingOptionArrayOutput() GetMonitorSchedulingOptionArrayOutput {
	return i.ToGetMonitorSchedulingOptionArrayOutputWithContext(context.Background())
}

func (i GetMonitorSchedulingOptionArray) ToGetMonitorSchedulingOptionArrayOutputWithContext(ctx context.Context) GetMonitorSchedulingOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorSchedulingOptionArrayOutput)
}

func (i GetMonitorSchedulingOptionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetMonitorSchedulingOption] {
	return pulumix.Output[[]GetMonitorSchedulingOption]{
		OutputState: i.ToGetMonitorSchedulingOptionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetMonitorSchedulingOptionOutput struct{ *pulumi.OutputState }

func (GetMonitorSchedulingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorSchedulingOption)(nil)).Elem()
}

func (o GetMonitorSchedulingOptionOutput) ToGetMonitorSchedulingOptionOutput() GetMonitorSchedulingOptionOutput {
	return o
}

func (o GetMonitorSchedulingOptionOutput) ToGetMonitorSchedulingOptionOutputWithContext(ctx context.Context) GetMonitorSchedulingOptionOutput {
	return o
}

func (o GetMonitorSchedulingOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetMonitorSchedulingOption] {
	return pulumix.Output[GetMonitorSchedulingOption]{
		OutputState: o.OutputState,
	}
}

func (o GetMonitorSchedulingOptionOutput) EvaluationWindows() GetMonitorSchedulingOptionEvaluationWindowArrayOutput {
	return o.ApplyT(func(v GetMonitorSchedulingOption) []GetMonitorSchedulingOptionEvaluationWindow {
		return v.EvaluationWindows
	}).(GetMonitorSchedulingOptionEvaluationWindowArrayOutput)
}

type GetMonitorSchedulingOptionArrayOutput struct{ *pulumi.OutputState }

func (GetMonitorSchedulingOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorSchedulingOption)(nil)).Elem()
}

func (o GetMonitorSchedulingOptionArrayOutput) ToGetMonitorSchedulingOptionArrayOutput() GetMonitorSchedulingOptionArrayOutput {
	return o
}

func (o GetMonitorSchedulingOptionArrayOutput) ToGetMonitorSchedulingOptionArrayOutputWithContext(ctx context.Context) GetMonitorSchedulingOptionArrayOutput {
	return o
}

func (o GetMonitorSchedulingOptionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetMonitorSchedulingOption] {
	return pulumix.Output[[]GetMonitorSchedulingOption]{
		OutputState: o.OutputState,
	}
}

func (o GetMonitorSchedulingOptionArrayOutput) Index(i pulumi.IntInput) GetMonitorSchedulingOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMonitorSchedulingOption {
		return vs[0].([]GetMonitorSchedulingOption)[vs[1].(int)]
	}).(GetMonitorSchedulingOptionOutput)
}

type GetMonitorSchedulingOptionEvaluationWindow struct {
	DayStarts   string `pulumi:"dayStarts"`
	HourStarts  int    `pulumi:"hourStarts"`
	MonthStarts int    `pulumi:"monthStarts"`
}

// GetMonitorSchedulingOptionEvaluationWindowInput is an input type that accepts GetMonitorSchedulingOptionEvaluationWindowArgs and GetMonitorSchedulingOptionEvaluationWindowOutput values.
// You can construct a concrete instance of `GetMonitorSchedulingOptionEvaluationWindowInput` via:
//
//	GetMonitorSchedulingOptionEvaluationWindowArgs{...}
type GetMonitorSchedulingOptionEvaluationWindowInput interface {
	pulumi.Input

	ToGetMonitorSchedulingOptionEvaluationWindowOutput() GetMonitorSchedulingOptionEvaluationWindowOutput
	ToGetMonitorSchedulingOptionEvaluationWindowOutputWithContext(context.Context) GetMonitorSchedulingOptionEvaluationWindowOutput
}

type GetMonitorSchedulingOptionEvaluationWindowArgs struct {
	DayStarts   pulumi.StringInput `pulumi:"dayStarts"`
	HourStarts  pulumi.IntInput    `pulumi:"hourStarts"`
	MonthStarts pulumi.IntInput    `pulumi:"monthStarts"`
}

func (GetMonitorSchedulingOptionEvaluationWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorSchedulingOptionEvaluationWindow)(nil)).Elem()
}

func (i GetMonitorSchedulingOptionEvaluationWindowArgs) ToGetMonitorSchedulingOptionEvaluationWindowOutput() GetMonitorSchedulingOptionEvaluationWindowOutput {
	return i.ToGetMonitorSchedulingOptionEvaluationWindowOutputWithContext(context.Background())
}

func (i GetMonitorSchedulingOptionEvaluationWindowArgs) ToGetMonitorSchedulingOptionEvaluationWindowOutputWithContext(ctx context.Context) GetMonitorSchedulingOptionEvaluationWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorSchedulingOptionEvaluationWindowOutput)
}

func (i GetMonitorSchedulingOptionEvaluationWindowArgs) ToOutput(ctx context.Context) pulumix.Output[GetMonitorSchedulingOptionEvaluationWindow] {
	return pulumix.Output[GetMonitorSchedulingOptionEvaluationWindow]{
		OutputState: i.ToGetMonitorSchedulingOptionEvaluationWindowOutputWithContext(ctx).OutputState,
	}
}

// GetMonitorSchedulingOptionEvaluationWindowArrayInput is an input type that accepts GetMonitorSchedulingOptionEvaluationWindowArray and GetMonitorSchedulingOptionEvaluationWindowArrayOutput values.
// You can construct a concrete instance of `GetMonitorSchedulingOptionEvaluationWindowArrayInput` via:
//
//	GetMonitorSchedulingOptionEvaluationWindowArray{ GetMonitorSchedulingOptionEvaluationWindowArgs{...} }
type GetMonitorSchedulingOptionEvaluationWindowArrayInput interface {
	pulumi.Input

	ToGetMonitorSchedulingOptionEvaluationWindowArrayOutput() GetMonitorSchedulingOptionEvaluationWindowArrayOutput
	ToGetMonitorSchedulingOptionEvaluationWindowArrayOutputWithContext(context.Context) GetMonitorSchedulingOptionEvaluationWindowArrayOutput
}

type GetMonitorSchedulingOptionEvaluationWindowArray []GetMonitorSchedulingOptionEvaluationWindowInput

func (GetMonitorSchedulingOptionEvaluationWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorSchedulingOptionEvaluationWindow)(nil)).Elem()
}

func (i GetMonitorSchedulingOptionEvaluationWindowArray) ToGetMonitorSchedulingOptionEvaluationWindowArrayOutput() GetMonitorSchedulingOptionEvaluationWindowArrayOutput {
	return i.ToGetMonitorSchedulingOptionEvaluationWindowArrayOutputWithContext(context.Background())
}

func (i GetMonitorSchedulingOptionEvaluationWindowArray) ToGetMonitorSchedulingOptionEvaluationWindowArrayOutputWithContext(ctx context.Context) GetMonitorSchedulingOptionEvaluationWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorSchedulingOptionEvaluationWindowArrayOutput)
}

func (i GetMonitorSchedulingOptionEvaluationWindowArray) ToOutput(ctx context.Context) pulumix.Output[[]GetMonitorSchedulingOptionEvaluationWindow] {
	return pulumix.Output[[]GetMonitorSchedulingOptionEvaluationWindow]{
		OutputState: i.ToGetMonitorSchedulingOptionEvaluationWindowArrayOutputWithContext(ctx).OutputState,
	}
}

type GetMonitorSchedulingOptionEvaluationWindowOutput struct{ *pulumi.OutputState }

func (GetMonitorSchedulingOptionEvaluationWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorSchedulingOptionEvaluationWindow)(nil)).Elem()
}

func (o GetMonitorSchedulingOptionEvaluationWindowOutput) ToGetMonitorSchedulingOptionEvaluationWindowOutput() GetMonitorSchedulingOptionEvaluationWindowOutput {
	return o
}

func (o GetMonitorSchedulingOptionEvaluationWindowOutput) ToGetMonitorSchedulingOptionEvaluationWindowOutputWithContext(ctx context.Context) GetMonitorSchedulingOptionEvaluationWindowOutput {
	return o
}

func (o GetMonitorSchedulingOptionEvaluationWindowOutput) ToOutput(ctx context.Context) pulumix.Output[GetMonitorSchedulingOptionEvaluationWindow] {
	return pulumix.Output[GetMonitorSchedulingOptionEvaluationWindow]{
		OutputState: o.OutputState,
	}
}

func (o GetMonitorSchedulingOptionEvaluationWindowOutput) DayStarts() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorSchedulingOptionEvaluationWindow) string { return v.DayStarts }).(pulumi.StringOutput)
}

func (o GetMonitorSchedulingOptionEvaluationWindowOutput) HourStarts() pulumi.IntOutput {
	return o.ApplyT(func(v GetMonitorSchedulingOptionEvaluationWindow) int { return v.HourStarts }).(pulumi.IntOutput)
}

func (o GetMonitorSchedulingOptionEvaluationWindowOutput) MonthStarts() pulumi.IntOutput {
	return o.ApplyT(func(v GetMonitorSchedulingOptionEvaluationWindow) int { return v.MonthStarts }).(pulumi.IntOutput)
}

type GetMonitorSchedulingOptionEvaluationWindowArrayOutput struct{ *pulumi.OutputState }

func (GetMonitorSchedulingOptionEvaluationWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorSchedulingOptionEvaluationWindow)(nil)).Elem()
}

func (o GetMonitorSchedulingOptionEvaluationWindowArrayOutput) ToGetMonitorSchedulingOptionEvaluationWindowArrayOutput() GetMonitorSchedulingOptionEvaluationWindowArrayOutput {
	return o
}

func (o GetMonitorSchedulingOptionEvaluationWindowArrayOutput) ToGetMonitorSchedulingOptionEvaluationWindowArrayOutputWithContext(ctx context.Context) GetMonitorSchedulingOptionEvaluationWindowArrayOutput {
	return o
}

func (o GetMonitorSchedulingOptionEvaluationWindowArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetMonitorSchedulingOptionEvaluationWindow] {
	return pulumix.Output[[]GetMonitorSchedulingOptionEvaluationWindow]{
		OutputState: o.OutputState,
	}
}

func (o GetMonitorSchedulingOptionEvaluationWindowArrayOutput) Index(i pulumi.IntInput) GetMonitorSchedulingOptionEvaluationWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMonitorSchedulingOptionEvaluationWindow {
		return vs[0].([]GetMonitorSchedulingOptionEvaluationWindow)[vs[1].(int)]
	}).(GetMonitorSchedulingOptionEvaluationWindowOutput)
}

type GetMonitorsMonitor struct {
	Id   int    `pulumi:"id"`
	Name string `pulumi:"name"`
	Type string `pulumi:"type"`
}

// GetMonitorsMonitorInput is an input type that accepts GetMonitorsMonitorArgs and GetMonitorsMonitorOutput values.
// You can construct a concrete instance of `GetMonitorsMonitorInput` via:
//
//	GetMonitorsMonitorArgs{...}
type GetMonitorsMonitorInput interface {
	pulumi.Input

	ToGetMonitorsMonitorOutput() GetMonitorsMonitorOutput
	ToGetMonitorsMonitorOutputWithContext(context.Context) GetMonitorsMonitorOutput
}

type GetMonitorsMonitorArgs struct {
	Id   pulumi.IntInput    `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetMonitorsMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorsMonitor)(nil)).Elem()
}

func (i GetMonitorsMonitorArgs) ToGetMonitorsMonitorOutput() GetMonitorsMonitorOutput {
	return i.ToGetMonitorsMonitorOutputWithContext(context.Background())
}

func (i GetMonitorsMonitorArgs) ToGetMonitorsMonitorOutputWithContext(ctx context.Context) GetMonitorsMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorsMonitorOutput)
}

func (i GetMonitorsMonitorArgs) ToOutput(ctx context.Context) pulumix.Output[GetMonitorsMonitor] {
	return pulumix.Output[GetMonitorsMonitor]{
		OutputState: i.ToGetMonitorsMonitorOutputWithContext(ctx).OutputState,
	}
}

// GetMonitorsMonitorArrayInput is an input type that accepts GetMonitorsMonitorArray and GetMonitorsMonitorArrayOutput values.
// You can construct a concrete instance of `GetMonitorsMonitorArrayInput` via:
//
//	GetMonitorsMonitorArray{ GetMonitorsMonitorArgs{...} }
type GetMonitorsMonitorArrayInput interface {
	pulumi.Input

	ToGetMonitorsMonitorArrayOutput() GetMonitorsMonitorArrayOutput
	ToGetMonitorsMonitorArrayOutputWithContext(context.Context) GetMonitorsMonitorArrayOutput
}

type GetMonitorsMonitorArray []GetMonitorsMonitorInput

func (GetMonitorsMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorsMonitor)(nil)).Elem()
}

func (i GetMonitorsMonitorArray) ToGetMonitorsMonitorArrayOutput() GetMonitorsMonitorArrayOutput {
	return i.ToGetMonitorsMonitorArrayOutputWithContext(context.Background())
}

func (i GetMonitorsMonitorArray) ToGetMonitorsMonitorArrayOutputWithContext(ctx context.Context) GetMonitorsMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorsMonitorArrayOutput)
}

func (i GetMonitorsMonitorArray) ToOutput(ctx context.Context) pulumix.Output[[]GetMonitorsMonitor] {
	return pulumix.Output[[]GetMonitorsMonitor]{
		OutputState: i.ToGetMonitorsMonitorArrayOutputWithContext(ctx).OutputState,
	}
}

type GetMonitorsMonitorOutput struct{ *pulumi.OutputState }

func (GetMonitorsMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorsMonitor)(nil)).Elem()
}

func (o GetMonitorsMonitorOutput) ToGetMonitorsMonitorOutput() GetMonitorsMonitorOutput {
	return o
}

func (o GetMonitorsMonitorOutput) ToGetMonitorsMonitorOutputWithContext(ctx context.Context) GetMonitorsMonitorOutput {
	return o
}

func (o GetMonitorsMonitorOutput) ToOutput(ctx context.Context) pulumix.Output[GetMonitorsMonitor] {
	return pulumix.Output[GetMonitorsMonitor]{
		OutputState: o.OutputState,
	}
}

func (o GetMonitorsMonitorOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetMonitorsMonitor) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetMonitorsMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorsMonitor) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetMonitorsMonitorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorsMonitor) string { return v.Type }).(pulumi.StringOutput)
}

type GetMonitorsMonitorArrayOutput struct{ *pulumi.OutputState }

func (GetMonitorsMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorsMonitor)(nil)).Elem()
}

func (o GetMonitorsMonitorArrayOutput) ToGetMonitorsMonitorArrayOutput() GetMonitorsMonitorArrayOutput {
	return o
}

func (o GetMonitorsMonitorArrayOutput) ToGetMonitorsMonitorArrayOutputWithContext(ctx context.Context) GetMonitorsMonitorArrayOutput {
	return o
}

func (o GetMonitorsMonitorArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetMonitorsMonitor] {
	return pulumix.Output[[]GetMonitorsMonitor]{
		OutputState: o.OutputState,
	}
}

func (o GetMonitorsMonitorArrayOutput) Index(i pulumi.IntInput) GetMonitorsMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMonitorsMonitor {
		return vs[0].([]GetMonitorsMonitor)[vs[1].(int)]
	}).(GetMonitorsMonitorOutput)
}

type GetRolesRole struct {
	Id        string `pulumi:"id"`
	Name      string `pulumi:"name"`
	UserCount int    `pulumi:"userCount"`
}

// GetRolesRoleInput is an input type that accepts GetRolesRoleArgs and GetRolesRoleOutput values.
// You can construct a concrete instance of `GetRolesRoleInput` via:
//
//	GetRolesRoleArgs{...}
type GetRolesRoleInput interface {
	pulumi.Input

	ToGetRolesRoleOutput() GetRolesRoleOutput
	ToGetRolesRoleOutputWithContext(context.Context) GetRolesRoleOutput
}

type GetRolesRoleArgs struct {
	Id        pulumi.StringInput `pulumi:"id"`
	Name      pulumi.StringInput `pulumi:"name"`
	UserCount pulumi.IntInput    `pulumi:"userCount"`
}

func (GetRolesRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRolesRole)(nil)).Elem()
}

func (i GetRolesRoleArgs) ToGetRolesRoleOutput() GetRolesRoleOutput {
	return i.ToGetRolesRoleOutputWithContext(context.Background())
}

func (i GetRolesRoleArgs) ToGetRolesRoleOutputWithContext(ctx context.Context) GetRolesRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRolesRoleOutput)
}

func (i GetRolesRoleArgs) ToOutput(ctx context.Context) pulumix.Output[GetRolesRole] {
	return pulumix.Output[GetRolesRole]{
		OutputState: i.ToGetRolesRoleOutputWithContext(ctx).OutputState,
	}
}

// GetRolesRoleArrayInput is an input type that accepts GetRolesRoleArray and GetRolesRoleArrayOutput values.
// You can construct a concrete instance of `GetRolesRoleArrayInput` via:
//
//	GetRolesRoleArray{ GetRolesRoleArgs{...} }
type GetRolesRoleArrayInput interface {
	pulumi.Input

	ToGetRolesRoleArrayOutput() GetRolesRoleArrayOutput
	ToGetRolesRoleArrayOutputWithContext(context.Context) GetRolesRoleArrayOutput
}

type GetRolesRoleArray []GetRolesRoleInput

func (GetRolesRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRolesRole)(nil)).Elem()
}

func (i GetRolesRoleArray) ToGetRolesRoleArrayOutput() GetRolesRoleArrayOutput {
	return i.ToGetRolesRoleArrayOutputWithContext(context.Background())
}

func (i GetRolesRoleArray) ToGetRolesRoleArrayOutputWithContext(ctx context.Context) GetRolesRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRolesRoleArrayOutput)
}

func (i GetRolesRoleArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRolesRole] {
	return pulumix.Output[[]GetRolesRole]{
		OutputState: i.ToGetRolesRoleArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRolesRoleOutput struct{ *pulumi.OutputState }

func (GetRolesRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRolesRole)(nil)).Elem()
}

func (o GetRolesRoleOutput) ToGetRolesRoleOutput() GetRolesRoleOutput {
	return o
}

func (o GetRolesRoleOutput) ToGetRolesRoleOutputWithContext(ctx context.Context) GetRolesRoleOutput {
	return o
}

func (o GetRolesRoleOutput) ToOutput(ctx context.Context) pulumix.Output[GetRolesRole] {
	return pulumix.Output[GetRolesRole]{
		OutputState: o.OutputState,
	}
}

func (o GetRolesRoleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRolesRole) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRolesRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRolesRole) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetRolesRoleOutput) UserCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetRolesRole) int { return v.UserCount }).(pulumi.IntOutput)
}

type GetRolesRoleArrayOutput struct{ *pulumi.OutputState }

func (GetRolesRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRolesRole)(nil)).Elem()
}

func (o GetRolesRoleArrayOutput) ToGetRolesRoleArrayOutput() GetRolesRoleArrayOutput {
	return o
}

func (o GetRolesRoleArrayOutput) ToGetRolesRoleArrayOutputWithContext(ctx context.Context) GetRolesRoleArrayOutput {
	return o
}

func (o GetRolesRoleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRolesRole] {
	return pulumix.Output[[]GetRolesRole]{
		OutputState: o.OutputState,
	}
}

func (o GetRolesRoleArrayOutput) Index(i pulumi.IntInput) GetRolesRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRolesRole {
		return vs[0].([]GetRolesRole)[vs[1].(int)]
	}).(GetRolesRoleOutput)
}

type GetSecurityMonitoringFiltersFilter struct {
	ExclusionFilters []GetSecurityMonitoringFiltersFilterExclusionFilter `pulumi:"exclusionFilters"`
	FilteredDataType *string                                             `pulumi:"filteredDataType"`
	IsEnabled        bool                                                `pulumi:"isEnabled"`
	Name             string                                              `pulumi:"name"`
	Query            string                                              `pulumi:"query"`
	Version          int                                                 `pulumi:"version"`
}

// GetSecurityMonitoringFiltersFilterInput is an input type that accepts GetSecurityMonitoringFiltersFilterArgs and GetSecurityMonitoringFiltersFilterOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringFiltersFilterInput` via:
//
//	GetSecurityMonitoringFiltersFilterArgs{...}
type GetSecurityMonitoringFiltersFilterInput interface {
	pulumi.Input

	ToGetSecurityMonitoringFiltersFilterOutput() GetSecurityMonitoringFiltersFilterOutput
	ToGetSecurityMonitoringFiltersFilterOutputWithContext(context.Context) GetSecurityMonitoringFiltersFilterOutput
}

type GetSecurityMonitoringFiltersFilterArgs struct {
	ExclusionFilters GetSecurityMonitoringFiltersFilterExclusionFilterArrayInput `pulumi:"exclusionFilters"`
	FilteredDataType pulumi.StringPtrInput                                       `pulumi:"filteredDataType"`
	IsEnabled        pulumi.BoolInput                                            `pulumi:"isEnabled"`
	Name             pulumi.StringInput                                          `pulumi:"name"`
	Query            pulumi.StringInput                                          `pulumi:"query"`
	Version          pulumi.IntInput                                             `pulumi:"version"`
}

func (GetSecurityMonitoringFiltersFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringFiltersFilter)(nil)).Elem()
}

func (i GetSecurityMonitoringFiltersFilterArgs) ToGetSecurityMonitoringFiltersFilterOutput() GetSecurityMonitoringFiltersFilterOutput {
	return i.ToGetSecurityMonitoringFiltersFilterOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringFiltersFilterArgs) ToGetSecurityMonitoringFiltersFilterOutputWithContext(ctx context.Context) GetSecurityMonitoringFiltersFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringFiltersFilterOutput)
}

func (i GetSecurityMonitoringFiltersFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringFiltersFilter] {
	return pulumix.Output[GetSecurityMonitoringFiltersFilter]{
		OutputState: i.ToGetSecurityMonitoringFiltersFilterOutputWithContext(ctx).OutputState,
	}
}

// GetSecurityMonitoringFiltersFilterArrayInput is an input type that accepts GetSecurityMonitoringFiltersFilterArray and GetSecurityMonitoringFiltersFilterArrayOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringFiltersFilterArrayInput` via:
//
//	GetSecurityMonitoringFiltersFilterArray{ GetSecurityMonitoringFiltersFilterArgs{...} }
type GetSecurityMonitoringFiltersFilterArrayInput interface {
	pulumi.Input

	ToGetSecurityMonitoringFiltersFilterArrayOutput() GetSecurityMonitoringFiltersFilterArrayOutput
	ToGetSecurityMonitoringFiltersFilterArrayOutputWithContext(context.Context) GetSecurityMonitoringFiltersFilterArrayOutput
}

type GetSecurityMonitoringFiltersFilterArray []GetSecurityMonitoringFiltersFilterInput

func (GetSecurityMonitoringFiltersFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityMonitoringFiltersFilter)(nil)).Elem()
}

func (i GetSecurityMonitoringFiltersFilterArray) ToGetSecurityMonitoringFiltersFilterArrayOutput() GetSecurityMonitoringFiltersFilterArrayOutput {
	return i.ToGetSecurityMonitoringFiltersFilterArrayOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringFiltersFilterArray) ToGetSecurityMonitoringFiltersFilterArrayOutputWithContext(ctx context.Context) GetSecurityMonitoringFiltersFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringFiltersFilterArrayOutput)
}

func (i GetSecurityMonitoringFiltersFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSecurityMonitoringFiltersFilter] {
	return pulumix.Output[[]GetSecurityMonitoringFiltersFilter]{
		OutputState: i.ToGetSecurityMonitoringFiltersFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSecurityMonitoringFiltersFilterOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringFiltersFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringFiltersFilter)(nil)).Elem()
}

func (o GetSecurityMonitoringFiltersFilterOutput) ToGetSecurityMonitoringFiltersFilterOutput() GetSecurityMonitoringFiltersFilterOutput {
	return o
}

func (o GetSecurityMonitoringFiltersFilterOutput) ToGetSecurityMonitoringFiltersFilterOutputWithContext(ctx context.Context) GetSecurityMonitoringFiltersFilterOutput {
	return o
}

func (o GetSecurityMonitoringFiltersFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringFiltersFilter] {
	return pulumix.Output[GetSecurityMonitoringFiltersFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringFiltersFilterOutput) ExclusionFilters() GetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput {
	return o.ApplyT(func(v GetSecurityMonitoringFiltersFilter) []GetSecurityMonitoringFiltersFilterExclusionFilter {
		return v.ExclusionFilters
	}).(GetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput)
}

func (o GetSecurityMonitoringFiltersFilterOutput) FilteredDataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringFiltersFilter) *string { return v.FilteredDataType }).(pulumi.StringPtrOutput)
}

func (o GetSecurityMonitoringFiltersFilterOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecurityMonitoringFiltersFilter) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

func (o GetSecurityMonitoringFiltersFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityMonitoringFiltersFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSecurityMonitoringFiltersFilterOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityMonitoringFiltersFilter) string { return v.Query }).(pulumi.StringOutput)
}

func (o GetSecurityMonitoringFiltersFilterOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityMonitoringFiltersFilter) int { return v.Version }).(pulumi.IntOutput)
}

type GetSecurityMonitoringFiltersFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringFiltersFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityMonitoringFiltersFilter)(nil)).Elem()
}

func (o GetSecurityMonitoringFiltersFilterArrayOutput) ToGetSecurityMonitoringFiltersFilterArrayOutput() GetSecurityMonitoringFiltersFilterArrayOutput {
	return o
}

func (o GetSecurityMonitoringFiltersFilterArrayOutput) ToGetSecurityMonitoringFiltersFilterArrayOutputWithContext(ctx context.Context) GetSecurityMonitoringFiltersFilterArrayOutput {
	return o
}

func (o GetSecurityMonitoringFiltersFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSecurityMonitoringFiltersFilter] {
	return pulumix.Output[[]GetSecurityMonitoringFiltersFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringFiltersFilterArrayOutput) Index(i pulumi.IntInput) GetSecurityMonitoringFiltersFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecurityMonitoringFiltersFilter {
		return vs[0].([]GetSecurityMonitoringFiltersFilter)[vs[1].(int)]
	}).(GetSecurityMonitoringFiltersFilterOutput)
}

type GetSecurityMonitoringFiltersFilterExclusionFilter struct {
	Name  string `pulumi:"name"`
	Query string `pulumi:"query"`
}

// GetSecurityMonitoringFiltersFilterExclusionFilterInput is an input type that accepts GetSecurityMonitoringFiltersFilterExclusionFilterArgs and GetSecurityMonitoringFiltersFilterExclusionFilterOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringFiltersFilterExclusionFilterInput` via:
//
//	GetSecurityMonitoringFiltersFilterExclusionFilterArgs{...}
type GetSecurityMonitoringFiltersFilterExclusionFilterInput interface {
	pulumi.Input

	ToGetSecurityMonitoringFiltersFilterExclusionFilterOutput() GetSecurityMonitoringFiltersFilterExclusionFilterOutput
	ToGetSecurityMonitoringFiltersFilterExclusionFilterOutputWithContext(context.Context) GetSecurityMonitoringFiltersFilterExclusionFilterOutput
}

type GetSecurityMonitoringFiltersFilterExclusionFilterArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Query pulumi.StringInput `pulumi:"query"`
}

func (GetSecurityMonitoringFiltersFilterExclusionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringFiltersFilterExclusionFilter)(nil)).Elem()
}

func (i GetSecurityMonitoringFiltersFilterExclusionFilterArgs) ToGetSecurityMonitoringFiltersFilterExclusionFilterOutput() GetSecurityMonitoringFiltersFilterExclusionFilterOutput {
	return i.ToGetSecurityMonitoringFiltersFilterExclusionFilterOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringFiltersFilterExclusionFilterArgs) ToGetSecurityMonitoringFiltersFilterExclusionFilterOutputWithContext(ctx context.Context) GetSecurityMonitoringFiltersFilterExclusionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringFiltersFilterExclusionFilterOutput)
}

func (i GetSecurityMonitoringFiltersFilterExclusionFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringFiltersFilterExclusionFilter] {
	return pulumix.Output[GetSecurityMonitoringFiltersFilterExclusionFilter]{
		OutputState: i.ToGetSecurityMonitoringFiltersFilterExclusionFilterOutputWithContext(ctx).OutputState,
	}
}

// GetSecurityMonitoringFiltersFilterExclusionFilterArrayInput is an input type that accepts GetSecurityMonitoringFiltersFilterExclusionFilterArray and GetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringFiltersFilterExclusionFilterArrayInput` via:
//
//	GetSecurityMonitoringFiltersFilterExclusionFilterArray{ GetSecurityMonitoringFiltersFilterExclusionFilterArgs{...} }
type GetSecurityMonitoringFiltersFilterExclusionFilterArrayInput interface {
	pulumi.Input

	ToGetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput() GetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput
	ToGetSecurityMonitoringFiltersFilterExclusionFilterArrayOutputWithContext(context.Context) GetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput
}

type GetSecurityMonitoringFiltersFilterExclusionFilterArray []GetSecurityMonitoringFiltersFilterExclusionFilterInput

func (GetSecurityMonitoringFiltersFilterExclusionFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityMonitoringFiltersFilterExclusionFilter)(nil)).Elem()
}

func (i GetSecurityMonitoringFiltersFilterExclusionFilterArray) ToGetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput() GetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput {
	return i.ToGetSecurityMonitoringFiltersFilterExclusionFilterArrayOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringFiltersFilterExclusionFilterArray) ToGetSecurityMonitoringFiltersFilterExclusionFilterArrayOutputWithContext(ctx context.Context) GetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput)
}

func (i GetSecurityMonitoringFiltersFilterExclusionFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSecurityMonitoringFiltersFilterExclusionFilter] {
	return pulumix.Output[[]GetSecurityMonitoringFiltersFilterExclusionFilter]{
		OutputState: i.ToGetSecurityMonitoringFiltersFilterExclusionFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSecurityMonitoringFiltersFilterExclusionFilterOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringFiltersFilterExclusionFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringFiltersFilterExclusionFilter)(nil)).Elem()
}

func (o GetSecurityMonitoringFiltersFilterExclusionFilterOutput) ToGetSecurityMonitoringFiltersFilterExclusionFilterOutput() GetSecurityMonitoringFiltersFilterExclusionFilterOutput {
	return o
}

func (o GetSecurityMonitoringFiltersFilterExclusionFilterOutput) ToGetSecurityMonitoringFiltersFilterExclusionFilterOutputWithContext(ctx context.Context) GetSecurityMonitoringFiltersFilterExclusionFilterOutput {
	return o
}

func (o GetSecurityMonitoringFiltersFilterExclusionFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringFiltersFilterExclusionFilter] {
	return pulumix.Output[GetSecurityMonitoringFiltersFilterExclusionFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringFiltersFilterExclusionFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityMonitoringFiltersFilterExclusionFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSecurityMonitoringFiltersFilterExclusionFilterOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityMonitoringFiltersFilterExclusionFilter) string { return v.Query }).(pulumi.StringOutput)
}

type GetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityMonitoringFiltersFilterExclusionFilter)(nil)).Elem()
}

func (o GetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput) ToGetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput() GetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput {
	return o
}

func (o GetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput) ToGetSecurityMonitoringFiltersFilterExclusionFilterArrayOutputWithContext(ctx context.Context) GetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput {
	return o
}

func (o GetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSecurityMonitoringFiltersFilterExclusionFilter] {
	return pulumix.Output[[]GetSecurityMonitoringFiltersFilterExclusionFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput) Index(i pulumi.IntInput) GetSecurityMonitoringFiltersFilterExclusionFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecurityMonitoringFiltersFilterExclusionFilter {
		return vs[0].([]GetSecurityMonitoringFiltersFilterExclusionFilter)[vs[1].(int)]
	}).(GetSecurityMonitoringFiltersFilterExclusionFilterOutput)
}

type GetSecurityMonitoringRulesRule struct {
	Cases            []GetSecurityMonitoringRulesRuleCase        `pulumi:"cases"`
	Enabled          *bool                                       `pulumi:"enabled"`
	Filters          []GetSecurityMonitoringRulesRuleFilter      `pulumi:"filters"`
	HasExtendedTitle *bool                                       `pulumi:"hasExtendedTitle"`
	Message          string                                      `pulumi:"message"`
	Name             string                                      `pulumi:"name"`
	Options          *GetSecurityMonitoringRulesRuleOptions      `pulumi:"options"`
	Queries          []GetSecurityMonitoringRulesRuleQuery       `pulumi:"queries"`
	SignalQueries    []GetSecurityMonitoringRulesRuleSignalQuery `pulumi:"signalQueries"`
	Tags             []string                                    `pulumi:"tags"`
	Type             *string                                     `pulumi:"type"`
}

// GetSecurityMonitoringRulesRuleInput is an input type that accepts GetSecurityMonitoringRulesRuleArgs and GetSecurityMonitoringRulesRuleOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleInput` via:
//
//	GetSecurityMonitoringRulesRuleArgs{...}
type GetSecurityMonitoringRulesRuleInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleOutput() GetSecurityMonitoringRulesRuleOutput
	ToGetSecurityMonitoringRulesRuleOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleOutput
}

type GetSecurityMonitoringRulesRuleArgs struct {
	Cases            GetSecurityMonitoringRulesRuleCaseArrayInput        `pulumi:"cases"`
	Enabled          pulumi.BoolPtrInput                                 `pulumi:"enabled"`
	Filters          GetSecurityMonitoringRulesRuleFilterArrayInput      `pulumi:"filters"`
	HasExtendedTitle pulumi.BoolPtrInput                                 `pulumi:"hasExtendedTitle"`
	Message          pulumi.StringInput                                  `pulumi:"message"`
	Name             pulumi.StringInput                                  `pulumi:"name"`
	Options          GetSecurityMonitoringRulesRuleOptionsPtrInput       `pulumi:"options"`
	Queries          GetSecurityMonitoringRulesRuleQueryArrayInput       `pulumi:"queries"`
	SignalQueries    GetSecurityMonitoringRulesRuleSignalQueryArrayInput `pulumi:"signalQueries"`
	Tags             pulumi.StringArrayInput                             `pulumi:"tags"`
	Type             pulumi.StringPtrInput                               `pulumi:"type"`
}

func (GetSecurityMonitoringRulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRule)(nil)).Elem()
}

func (i GetSecurityMonitoringRulesRuleArgs) ToGetSecurityMonitoringRulesRuleOutput() GetSecurityMonitoringRulesRuleOutput {
	return i.ToGetSecurityMonitoringRulesRuleOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleArgs) ToGetSecurityMonitoringRulesRuleOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleOutput)
}

func (i GetSecurityMonitoringRulesRuleArgs) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRule] {
	return pulumix.Output[GetSecurityMonitoringRulesRule]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleOutputWithContext(ctx).OutputState,
	}
}

// GetSecurityMonitoringRulesRuleArrayInput is an input type that accepts GetSecurityMonitoringRulesRuleArray and GetSecurityMonitoringRulesRuleArrayOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleArrayInput` via:
//
//	GetSecurityMonitoringRulesRuleArray{ GetSecurityMonitoringRulesRuleArgs{...} }
type GetSecurityMonitoringRulesRuleArrayInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleArrayOutput() GetSecurityMonitoringRulesRuleArrayOutput
	ToGetSecurityMonitoringRulesRuleArrayOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleArrayOutput
}

type GetSecurityMonitoringRulesRuleArray []GetSecurityMonitoringRulesRuleInput

func (GetSecurityMonitoringRulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityMonitoringRulesRule)(nil)).Elem()
}

func (i GetSecurityMonitoringRulesRuleArray) ToGetSecurityMonitoringRulesRuleArrayOutput() GetSecurityMonitoringRulesRuleArrayOutput {
	return i.ToGetSecurityMonitoringRulesRuleArrayOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleArray) ToGetSecurityMonitoringRulesRuleArrayOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleArrayOutput)
}

func (i GetSecurityMonitoringRulesRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSecurityMonitoringRulesRule] {
	return pulumix.Output[[]GetSecurityMonitoringRulesRule]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSecurityMonitoringRulesRuleOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRule)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleOutput) ToGetSecurityMonitoringRulesRuleOutput() GetSecurityMonitoringRulesRuleOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleOutput) ToGetSecurityMonitoringRulesRuleOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRule] {
	return pulumix.Output[GetSecurityMonitoringRulesRule]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringRulesRuleOutput) Cases() GetSecurityMonitoringRulesRuleCaseArrayOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRule) []GetSecurityMonitoringRulesRuleCase { return v.Cases }).(GetSecurityMonitoringRulesRuleCaseArrayOutput)
}

func (o GetSecurityMonitoringRulesRuleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRule) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOutput) Filters() GetSecurityMonitoringRulesRuleFilterArrayOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRule) []GetSecurityMonitoringRulesRuleFilter { return v.Filters }).(GetSecurityMonitoringRulesRuleFilterArrayOutput)
}

func (o GetSecurityMonitoringRulesRuleOutput) HasExtendedTitle() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRule) *bool { return v.HasExtendedTitle }).(pulumi.BoolPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRule) string { return v.Message }).(pulumi.StringOutput)
}

func (o GetSecurityMonitoringRulesRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRule) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSecurityMonitoringRulesRuleOutput) Options() GetSecurityMonitoringRulesRuleOptionsPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRule) *GetSecurityMonitoringRulesRuleOptions { return v.Options }).(GetSecurityMonitoringRulesRuleOptionsPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOutput) Queries() GetSecurityMonitoringRulesRuleQueryArrayOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRule) []GetSecurityMonitoringRulesRuleQuery { return v.Queries }).(GetSecurityMonitoringRulesRuleQueryArrayOutput)
}

func (o GetSecurityMonitoringRulesRuleOutput) SignalQueries() GetSecurityMonitoringRulesRuleSignalQueryArrayOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRule) []GetSecurityMonitoringRulesRuleSignalQuery {
		return v.SignalQueries
	}).(GetSecurityMonitoringRulesRuleSignalQueryArrayOutput)
}

func (o GetSecurityMonitoringRulesRuleOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRule) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o GetSecurityMonitoringRulesRuleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRule) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GetSecurityMonitoringRulesRuleArrayOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityMonitoringRulesRule)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleArrayOutput) ToGetSecurityMonitoringRulesRuleArrayOutput() GetSecurityMonitoringRulesRuleArrayOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleArrayOutput) ToGetSecurityMonitoringRulesRuleArrayOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleArrayOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSecurityMonitoringRulesRule] {
	return pulumix.Output[[]GetSecurityMonitoringRulesRule]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringRulesRuleArrayOutput) Index(i pulumi.IntInput) GetSecurityMonitoringRulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecurityMonitoringRulesRule {
		return vs[0].([]GetSecurityMonitoringRulesRule)[vs[1].(int)]
	}).(GetSecurityMonitoringRulesRuleOutput)
}

type GetSecurityMonitoringRulesRuleCase struct {
	Condition     *string  `pulumi:"condition"`
	Name          *string  `pulumi:"name"`
	Notifications []string `pulumi:"notifications"`
	Status        string   `pulumi:"status"`
}

// GetSecurityMonitoringRulesRuleCaseInput is an input type that accepts GetSecurityMonitoringRulesRuleCaseArgs and GetSecurityMonitoringRulesRuleCaseOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleCaseInput` via:
//
//	GetSecurityMonitoringRulesRuleCaseArgs{...}
type GetSecurityMonitoringRulesRuleCaseInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleCaseOutput() GetSecurityMonitoringRulesRuleCaseOutput
	ToGetSecurityMonitoringRulesRuleCaseOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleCaseOutput
}

type GetSecurityMonitoringRulesRuleCaseArgs struct {
	Condition     pulumi.StringPtrInput   `pulumi:"condition"`
	Name          pulumi.StringPtrInput   `pulumi:"name"`
	Notifications pulumi.StringArrayInput `pulumi:"notifications"`
	Status        pulumi.StringInput      `pulumi:"status"`
}

func (GetSecurityMonitoringRulesRuleCaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRuleCase)(nil)).Elem()
}

func (i GetSecurityMonitoringRulesRuleCaseArgs) ToGetSecurityMonitoringRulesRuleCaseOutput() GetSecurityMonitoringRulesRuleCaseOutput {
	return i.ToGetSecurityMonitoringRulesRuleCaseOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleCaseArgs) ToGetSecurityMonitoringRulesRuleCaseOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleCaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleCaseOutput)
}

func (i GetSecurityMonitoringRulesRuleCaseArgs) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRuleCase] {
	return pulumix.Output[GetSecurityMonitoringRulesRuleCase]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleCaseOutputWithContext(ctx).OutputState,
	}
}

// GetSecurityMonitoringRulesRuleCaseArrayInput is an input type that accepts GetSecurityMonitoringRulesRuleCaseArray and GetSecurityMonitoringRulesRuleCaseArrayOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleCaseArrayInput` via:
//
//	GetSecurityMonitoringRulesRuleCaseArray{ GetSecurityMonitoringRulesRuleCaseArgs{...} }
type GetSecurityMonitoringRulesRuleCaseArrayInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleCaseArrayOutput() GetSecurityMonitoringRulesRuleCaseArrayOutput
	ToGetSecurityMonitoringRulesRuleCaseArrayOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleCaseArrayOutput
}

type GetSecurityMonitoringRulesRuleCaseArray []GetSecurityMonitoringRulesRuleCaseInput

func (GetSecurityMonitoringRulesRuleCaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityMonitoringRulesRuleCase)(nil)).Elem()
}

func (i GetSecurityMonitoringRulesRuleCaseArray) ToGetSecurityMonitoringRulesRuleCaseArrayOutput() GetSecurityMonitoringRulesRuleCaseArrayOutput {
	return i.ToGetSecurityMonitoringRulesRuleCaseArrayOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleCaseArray) ToGetSecurityMonitoringRulesRuleCaseArrayOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleCaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleCaseArrayOutput)
}

func (i GetSecurityMonitoringRulesRuleCaseArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSecurityMonitoringRulesRuleCase] {
	return pulumix.Output[[]GetSecurityMonitoringRulesRuleCase]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleCaseArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSecurityMonitoringRulesRuleCaseOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleCaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRuleCase)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleCaseOutput) ToGetSecurityMonitoringRulesRuleCaseOutput() GetSecurityMonitoringRulesRuleCaseOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleCaseOutput) ToGetSecurityMonitoringRulesRuleCaseOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleCaseOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleCaseOutput) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRuleCase] {
	return pulumix.Output[GetSecurityMonitoringRulesRuleCase]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringRulesRuleCaseOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleCase) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleCaseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleCase) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleCaseOutput) Notifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleCase) []string { return v.Notifications }).(pulumi.StringArrayOutput)
}

func (o GetSecurityMonitoringRulesRuleCaseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleCase) string { return v.Status }).(pulumi.StringOutput)
}

type GetSecurityMonitoringRulesRuleCaseArrayOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleCaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityMonitoringRulesRuleCase)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleCaseArrayOutput) ToGetSecurityMonitoringRulesRuleCaseArrayOutput() GetSecurityMonitoringRulesRuleCaseArrayOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleCaseArrayOutput) ToGetSecurityMonitoringRulesRuleCaseArrayOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleCaseArrayOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleCaseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSecurityMonitoringRulesRuleCase] {
	return pulumix.Output[[]GetSecurityMonitoringRulesRuleCase]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringRulesRuleCaseArrayOutput) Index(i pulumi.IntInput) GetSecurityMonitoringRulesRuleCaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecurityMonitoringRulesRuleCase {
		return vs[0].([]GetSecurityMonitoringRulesRuleCase)[vs[1].(int)]
	}).(GetSecurityMonitoringRulesRuleCaseOutput)
}

type GetSecurityMonitoringRulesRuleFilter struct {
	Action string `pulumi:"action"`
	Query  string `pulumi:"query"`
}

// GetSecurityMonitoringRulesRuleFilterInput is an input type that accepts GetSecurityMonitoringRulesRuleFilterArgs and GetSecurityMonitoringRulesRuleFilterOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleFilterInput` via:
//
//	GetSecurityMonitoringRulesRuleFilterArgs{...}
type GetSecurityMonitoringRulesRuleFilterInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleFilterOutput() GetSecurityMonitoringRulesRuleFilterOutput
	ToGetSecurityMonitoringRulesRuleFilterOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleFilterOutput
}

type GetSecurityMonitoringRulesRuleFilterArgs struct {
	Action pulumi.StringInput `pulumi:"action"`
	Query  pulumi.StringInput `pulumi:"query"`
}

func (GetSecurityMonitoringRulesRuleFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRuleFilter)(nil)).Elem()
}

func (i GetSecurityMonitoringRulesRuleFilterArgs) ToGetSecurityMonitoringRulesRuleFilterOutput() GetSecurityMonitoringRulesRuleFilterOutput {
	return i.ToGetSecurityMonitoringRulesRuleFilterOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleFilterArgs) ToGetSecurityMonitoringRulesRuleFilterOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleFilterOutput)
}

func (i GetSecurityMonitoringRulesRuleFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRuleFilter] {
	return pulumix.Output[GetSecurityMonitoringRulesRuleFilter]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleFilterOutputWithContext(ctx).OutputState,
	}
}

// GetSecurityMonitoringRulesRuleFilterArrayInput is an input type that accepts GetSecurityMonitoringRulesRuleFilterArray and GetSecurityMonitoringRulesRuleFilterArrayOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleFilterArrayInput` via:
//
//	GetSecurityMonitoringRulesRuleFilterArray{ GetSecurityMonitoringRulesRuleFilterArgs{...} }
type GetSecurityMonitoringRulesRuleFilterArrayInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleFilterArrayOutput() GetSecurityMonitoringRulesRuleFilterArrayOutput
	ToGetSecurityMonitoringRulesRuleFilterArrayOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleFilterArrayOutput
}

type GetSecurityMonitoringRulesRuleFilterArray []GetSecurityMonitoringRulesRuleFilterInput

func (GetSecurityMonitoringRulesRuleFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityMonitoringRulesRuleFilter)(nil)).Elem()
}

func (i GetSecurityMonitoringRulesRuleFilterArray) ToGetSecurityMonitoringRulesRuleFilterArrayOutput() GetSecurityMonitoringRulesRuleFilterArrayOutput {
	return i.ToGetSecurityMonitoringRulesRuleFilterArrayOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleFilterArray) ToGetSecurityMonitoringRulesRuleFilterArrayOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleFilterArrayOutput)
}

func (i GetSecurityMonitoringRulesRuleFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSecurityMonitoringRulesRuleFilter] {
	return pulumix.Output[[]GetSecurityMonitoringRulesRuleFilter]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSecurityMonitoringRulesRuleFilterOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRuleFilter)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleFilterOutput) ToGetSecurityMonitoringRulesRuleFilterOutput() GetSecurityMonitoringRulesRuleFilterOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleFilterOutput) ToGetSecurityMonitoringRulesRuleFilterOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleFilterOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRuleFilter] {
	return pulumix.Output[GetSecurityMonitoringRulesRuleFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringRulesRuleFilterOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleFilter) string { return v.Action }).(pulumi.StringOutput)
}

func (o GetSecurityMonitoringRulesRuleFilterOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleFilter) string { return v.Query }).(pulumi.StringOutput)
}

type GetSecurityMonitoringRulesRuleFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityMonitoringRulesRuleFilter)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleFilterArrayOutput) ToGetSecurityMonitoringRulesRuleFilterArrayOutput() GetSecurityMonitoringRulesRuleFilterArrayOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleFilterArrayOutput) ToGetSecurityMonitoringRulesRuleFilterArrayOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleFilterArrayOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSecurityMonitoringRulesRuleFilter] {
	return pulumix.Output[[]GetSecurityMonitoringRulesRuleFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringRulesRuleFilterArrayOutput) Index(i pulumi.IntInput) GetSecurityMonitoringRulesRuleFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecurityMonitoringRulesRuleFilter {
		return vs[0].([]GetSecurityMonitoringRulesRuleFilter)[vs[1].(int)]
	}).(GetSecurityMonitoringRulesRuleFilterOutput)
}

type GetSecurityMonitoringRulesRuleOptions struct {
	DecreaseCriticalityBasedOnEnv *bool                                                         `pulumi:"decreaseCriticalityBasedOnEnv"`
	DetectionMethod               *string                                                       `pulumi:"detectionMethod"`
	EvaluationWindow              *int                                                          `pulumi:"evaluationWindow"`
	ImpossibleTravelOptions       *GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions `pulumi:"impossibleTravelOptions"`
	KeepAlive                     int                                                           `pulumi:"keepAlive"`
	MaxSignalDuration             int                                                           `pulumi:"maxSignalDuration"`
	NewValueOptions               *GetSecurityMonitoringRulesRuleOptionsNewValueOptions         `pulumi:"newValueOptions"`
}

// GetSecurityMonitoringRulesRuleOptionsInput is an input type that accepts GetSecurityMonitoringRulesRuleOptionsArgs and GetSecurityMonitoringRulesRuleOptionsOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleOptionsInput` via:
//
//	GetSecurityMonitoringRulesRuleOptionsArgs{...}
type GetSecurityMonitoringRulesRuleOptionsInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleOptionsOutput() GetSecurityMonitoringRulesRuleOptionsOutput
	ToGetSecurityMonitoringRulesRuleOptionsOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleOptionsOutput
}

type GetSecurityMonitoringRulesRuleOptionsArgs struct {
	DecreaseCriticalityBasedOnEnv pulumi.BoolPtrInput                                                  `pulumi:"decreaseCriticalityBasedOnEnv"`
	DetectionMethod               pulumi.StringPtrInput                                                `pulumi:"detectionMethod"`
	EvaluationWindow              pulumi.IntPtrInput                                                   `pulumi:"evaluationWindow"`
	ImpossibleTravelOptions       GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrInput `pulumi:"impossibleTravelOptions"`
	KeepAlive                     pulumi.IntInput                                                      `pulumi:"keepAlive"`
	MaxSignalDuration             pulumi.IntInput                                                      `pulumi:"maxSignalDuration"`
	NewValueOptions               GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrInput         `pulumi:"newValueOptions"`
}

func (GetSecurityMonitoringRulesRuleOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRuleOptions)(nil)).Elem()
}

func (i GetSecurityMonitoringRulesRuleOptionsArgs) ToGetSecurityMonitoringRulesRuleOptionsOutput() GetSecurityMonitoringRulesRuleOptionsOutput {
	return i.ToGetSecurityMonitoringRulesRuleOptionsOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleOptionsArgs) ToGetSecurityMonitoringRulesRuleOptionsOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleOptionsOutput)
}

func (i GetSecurityMonitoringRulesRuleOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRuleOptions] {
	return pulumix.Output[GetSecurityMonitoringRulesRuleOptions]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleOptionsOutputWithContext(ctx).OutputState,
	}
}

func (i GetSecurityMonitoringRulesRuleOptionsArgs) ToGetSecurityMonitoringRulesRuleOptionsPtrOutput() GetSecurityMonitoringRulesRuleOptionsPtrOutput {
	return i.ToGetSecurityMonitoringRulesRuleOptionsPtrOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleOptionsArgs) ToGetSecurityMonitoringRulesRuleOptionsPtrOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleOptionsOutput).ToGetSecurityMonitoringRulesRuleOptionsPtrOutputWithContext(ctx)
}

// GetSecurityMonitoringRulesRuleOptionsPtrInput is an input type that accepts GetSecurityMonitoringRulesRuleOptionsArgs, GetSecurityMonitoringRulesRuleOptionsPtr and GetSecurityMonitoringRulesRuleOptionsPtrOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleOptionsPtrInput` via:
//
//	        GetSecurityMonitoringRulesRuleOptionsArgs{...}
//
//	or:
//
//	        nil
type GetSecurityMonitoringRulesRuleOptionsPtrInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleOptionsPtrOutput() GetSecurityMonitoringRulesRuleOptionsPtrOutput
	ToGetSecurityMonitoringRulesRuleOptionsPtrOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleOptionsPtrOutput
}

type getSecurityMonitoringRulesRuleOptionsPtrType GetSecurityMonitoringRulesRuleOptionsArgs

func GetSecurityMonitoringRulesRuleOptionsPtr(v *GetSecurityMonitoringRulesRuleOptionsArgs) GetSecurityMonitoringRulesRuleOptionsPtrInput {
	return (*getSecurityMonitoringRulesRuleOptionsPtrType)(v)
}

func (*getSecurityMonitoringRulesRuleOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSecurityMonitoringRulesRuleOptions)(nil)).Elem()
}

func (i *getSecurityMonitoringRulesRuleOptionsPtrType) ToGetSecurityMonitoringRulesRuleOptionsPtrOutput() GetSecurityMonitoringRulesRuleOptionsPtrOutput {
	return i.ToGetSecurityMonitoringRulesRuleOptionsPtrOutputWithContext(context.Background())
}

func (i *getSecurityMonitoringRulesRuleOptionsPtrType) ToGetSecurityMonitoringRulesRuleOptionsPtrOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleOptionsPtrOutput)
}

func (i *getSecurityMonitoringRulesRuleOptionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetSecurityMonitoringRulesRuleOptions] {
	return pulumix.Output[*GetSecurityMonitoringRulesRuleOptions]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleOptionsPtrOutputWithContext(ctx).OutputState,
	}
}

type GetSecurityMonitoringRulesRuleOptionsOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRuleOptions)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleOptionsOutput) ToGetSecurityMonitoringRulesRuleOptionsOutput() GetSecurityMonitoringRulesRuleOptionsOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleOptionsOutput) ToGetSecurityMonitoringRulesRuleOptionsOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleOptionsOutput) ToGetSecurityMonitoringRulesRuleOptionsPtrOutput() GetSecurityMonitoringRulesRuleOptionsPtrOutput {
	return o.ToGetSecurityMonitoringRulesRuleOptionsPtrOutputWithContext(context.Background())
}

func (o GetSecurityMonitoringRulesRuleOptionsOutput) ToGetSecurityMonitoringRulesRuleOptionsPtrOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSecurityMonitoringRulesRuleOptions) *GetSecurityMonitoringRulesRuleOptions {
		return &v
	}).(GetSecurityMonitoringRulesRuleOptionsPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRuleOptions] {
	return pulumix.Output[GetSecurityMonitoringRulesRuleOptions]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringRulesRuleOptionsOutput) DecreaseCriticalityBasedOnEnv() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleOptions) *bool { return v.DecreaseCriticalityBasedOnEnv }).(pulumi.BoolPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsOutput) DetectionMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleOptions) *string { return v.DetectionMethod }).(pulumi.StringPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsOutput) EvaluationWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleOptions) *int { return v.EvaluationWindow }).(pulumi.IntPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsOutput) ImpossibleTravelOptions() GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleOptions) *GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions {
		return v.ImpossibleTravelOptions
	}).(GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsOutput) KeepAlive() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleOptions) int { return v.KeepAlive }).(pulumi.IntOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsOutput) MaxSignalDuration() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleOptions) int { return v.MaxSignalDuration }).(pulumi.IntOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsOutput) NewValueOptions() GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleOptions) *GetSecurityMonitoringRulesRuleOptionsNewValueOptions {
		return v.NewValueOptions
	}).(GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput)
}

type GetSecurityMonitoringRulesRuleOptionsPtrOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSecurityMonitoringRulesRuleOptions)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleOptionsPtrOutput) ToGetSecurityMonitoringRulesRuleOptionsPtrOutput() GetSecurityMonitoringRulesRuleOptionsPtrOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleOptionsPtrOutput) ToGetSecurityMonitoringRulesRuleOptionsPtrOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsPtrOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleOptionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetSecurityMonitoringRulesRuleOptions] {
	return pulumix.Output[*GetSecurityMonitoringRulesRuleOptions]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringRulesRuleOptionsPtrOutput) Elem() GetSecurityMonitoringRulesRuleOptionsOutput {
	return o.ApplyT(func(v *GetSecurityMonitoringRulesRuleOptions) GetSecurityMonitoringRulesRuleOptions {
		if v != nil {
			return *v
		}
		var ret GetSecurityMonitoringRulesRuleOptions
		return ret
	}).(GetSecurityMonitoringRulesRuleOptionsOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsPtrOutput) DecreaseCriticalityBasedOnEnv() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetSecurityMonitoringRulesRuleOptions) *bool {
		if v == nil {
			return nil
		}
		return v.DecreaseCriticalityBasedOnEnv
	}).(pulumi.BoolPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsPtrOutput) DetectionMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSecurityMonitoringRulesRuleOptions) *string {
		if v == nil {
			return nil
		}
		return v.DetectionMethod
	}).(pulumi.StringPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsPtrOutput) EvaluationWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetSecurityMonitoringRulesRuleOptions) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationWindow
	}).(pulumi.IntPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsPtrOutput) ImpossibleTravelOptions() GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput {
	return o.ApplyT(func(v *GetSecurityMonitoringRulesRuleOptions) *GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions {
		if v == nil {
			return nil
		}
		return v.ImpossibleTravelOptions
	}).(GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsPtrOutput) KeepAlive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetSecurityMonitoringRulesRuleOptions) *int {
		if v == nil {
			return nil
		}
		return &v.KeepAlive
	}).(pulumi.IntPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsPtrOutput) MaxSignalDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetSecurityMonitoringRulesRuleOptions) *int {
		if v == nil {
			return nil
		}
		return &v.MaxSignalDuration
	}).(pulumi.IntPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsPtrOutput) NewValueOptions() GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput {
	return o.ApplyT(func(v *GetSecurityMonitoringRulesRuleOptions) *GetSecurityMonitoringRulesRuleOptionsNewValueOptions {
		if v == nil {
			return nil
		}
		return v.NewValueOptions
	}).(GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput)
}

type GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions struct {
	BaselineUserLocations *bool `pulumi:"baselineUserLocations"`
}

// GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsInput is an input type that accepts GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsArgs and GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsInput` via:
//
//	GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsArgs{...}
type GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput() GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput
	ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput
}

type GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsArgs struct {
	BaselineUserLocations pulumi.BoolPtrInput `pulumi:"baselineUserLocations"`
}

func (GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions)(nil)).Elem()
}

func (i GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsArgs) ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput() GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput {
	return i.ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsArgs) ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput)
}

func (i GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions] {
	return pulumix.Output[GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutputWithContext(ctx).OutputState,
	}
}

func (i GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsArgs) ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput() GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput {
	return i.ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsArgs) ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput).ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutputWithContext(ctx)
}

// GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrInput is an input type that accepts GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsArgs, GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtr and GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrInput` via:
//
//	        GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsArgs{...}
//
//	or:
//
//	        nil
type GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput() GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput
	ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput
}

type getSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrType GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsArgs

func GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtr(v *GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsArgs) GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrInput {
	return (*getSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrType)(v)
}

func (*getSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions)(nil)).Elem()
}

func (i *getSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrType) ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput() GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput {
	return i.ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutputWithContext(context.Background())
}

func (i *getSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrType) ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput)
}

func (i *getSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions] {
	return pulumix.Output[*GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutputWithContext(ctx).OutputState,
	}
}

type GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput) ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput() GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput) ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput) ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput() GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput {
	return o.ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutputWithContext(context.Background())
}

func (o GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput) ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions) *GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions {
		return &v
	}).(GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions] {
	return pulumix.Output[GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput) BaselineUserLocations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions) *bool {
		return v.BaselineUserLocations
	}).(pulumi.BoolPtrOutput)
}

type GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput) ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput() GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput) ToGetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions] {
	return pulumix.Output[*GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput) Elem() GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput {
	return o.ApplyT(func(v *GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions) GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions {
		if v != nil {
			return *v
		}
		var ret GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions
		return ret
	}).(GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput) BaselineUserLocations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions) *bool {
		if v == nil {
			return nil
		}
		return v.BaselineUserLocations
	}).(pulumi.BoolPtrOutput)
}

type GetSecurityMonitoringRulesRuleOptionsNewValueOptions struct {
	ForgetAfter       int     `pulumi:"forgetAfter"`
	LearningDuration  *int    `pulumi:"learningDuration"`
	LearningMethod    *string `pulumi:"learningMethod"`
	LearningThreshold *int    `pulumi:"learningThreshold"`
}

// GetSecurityMonitoringRulesRuleOptionsNewValueOptionsInput is an input type that accepts GetSecurityMonitoringRulesRuleOptionsNewValueOptionsArgs and GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleOptionsNewValueOptionsInput` via:
//
//	GetSecurityMonitoringRulesRuleOptionsNewValueOptionsArgs{...}
type GetSecurityMonitoringRulesRuleOptionsNewValueOptionsInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput() GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput
	ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput
}

type GetSecurityMonitoringRulesRuleOptionsNewValueOptionsArgs struct {
	ForgetAfter       pulumi.IntInput       `pulumi:"forgetAfter"`
	LearningDuration  pulumi.IntPtrInput    `pulumi:"learningDuration"`
	LearningMethod    pulumi.StringPtrInput `pulumi:"learningMethod"`
	LearningThreshold pulumi.IntPtrInput    `pulumi:"learningThreshold"`
}

func (GetSecurityMonitoringRulesRuleOptionsNewValueOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRuleOptionsNewValueOptions)(nil)).Elem()
}

func (i GetSecurityMonitoringRulesRuleOptionsNewValueOptionsArgs) ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput() GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput {
	return i.ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleOptionsNewValueOptionsArgs) ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput)
}

func (i GetSecurityMonitoringRulesRuleOptionsNewValueOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRuleOptionsNewValueOptions] {
	return pulumix.Output[GetSecurityMonitoringRulesRuleOptionsNewValueOptions]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutputWithContext(ctx).OutputState,
	}
}

func (i GetSecurityMonitoringRulesRuleOptionsNewValueOptionsArgs) ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput() GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput {
	return i.ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleOptionsNewValueOptionsArgs) ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput).ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutputWithContext(ctx)
}

// GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrInput is an input type that accepts GetSecurityMonitoringRulesRuleOptionsNewValueOptionsArgs, GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtr and GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrInput` via:
//
//	        GetSecurityMonitoringRulesRuleOptionsNewValueOptionsArgs{...}
//
//	or:
//
//	        nil
type GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput() GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput
	ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput
}

type getSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrType GetSecurityMonitoringRulesRuleOptionsNewValueOptionsArgs

func GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtr(v *GetSecurityMonitoringRulesRuleOptionsNewValueOptionsArgs) GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrInput {
	return (*getSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrType)(v)
}

func (*getSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSecurityMonitoringRulesRuleOptionsNewValueOptions)(nil)).Elem()
}

func (i *getSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrType) ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput() GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput {
	return i.ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutputWithContext(context.Background())
}

func (i *getSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrType) ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput)
}

func (i *getSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetSecurityMonitoringRulesRuleOptionsNewValueOptions] {
	return pulumix.Output[*GetSecurityMonitoringRulesRuleOptionsNewValueOptions]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutputWithContext(ctx).OutputState,
	}
}

type GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRuleOptionsNewValueOptions)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput) ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput() GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput) ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput) ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput() GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput {
	return o.ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutputWithContext(context.Background())
}

func (o GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput) ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSecurityMonitoringRulesRuleOptionsNewValueOptions) *GetSecurityMonitoringRulesRuleOptionsNewValueOptions {
		return &v
	}).(GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRuleOptionsNewValueOptions] {
	return pulumix.Output[GetSecurityMonitoringRulesRuleOptionsNewValueOptions]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput) ForgetAfter() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleOptionsNewValueOptions) int { return v.ForgetAfter }).(pulumi.IntOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput) LearningDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleOptionsNewValueOptions) *int { return v.LearningDuration }).(pulumi.IntPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput) LearningMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleOptionsNewValueOptions) *string { return v.LearningMethod }).(pulumi.StringPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput) LearningThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleOptionsNewValueOptions) *int { return v.LearningThreshold }).(pulumi.IntPtrOutput)
}

type GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSecurityMonitoringRulesRuleOptionsNewValueOptions)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput) ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput() GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput) ToGetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetSecurityMonitoringRulesRuleOptionsNewValueOptions] {
	return pulumix.Output[*GetSecurityMonitoringRulesRuleOptionsNewValueOptions]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput) Elem() GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput {
	return o.ApplyT(func(v *GetSecurityMonitoringRulesRuleOptionsNewValueOptions) GetSecurityMonitoringRulesRuleOptionsNewValueOptions {
		if v != nil {
			return *v
		}
		var ret GetSecurityMonitoringRulesRuleOptionsNewValueOptions
		return ret
	}).(GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput) ForgetAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetSecurityMonitoringRulesRuleOptionsNewValueOptions) *int {
		if v == nil {
			return nil
		}
		return &v.ForgetAfter
	}).(pulumi.IntPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput) LearningDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetSecurityMonitoringRulesRuleOptionsNewValueOptions) *int {
		if v == nil {
			return nil
		}
		return v.LearningDuration
	}).(pulumi.IntPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput) LearningMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSecurityMonitoringRulesRuleOptionsNewValueOptions) *string {
		if v == nil {
			return nil
		}
		return v.LearningMethod
	}).(pulumi.StringPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput) LearningThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetSecurityMonitoringRulesRuleOptionsNewValueOptions) *int {
		if v == nil {
			return nil
		}
		return v.LearningThreshold
	}).(pulumi.IntPtrOutput)
}

type GetSecurityMonitoringRulesRuleQuery struct {
	// Deprecated: `agent_rule` has been deprecated in favor of new Agent Rule resource.
	AgentRules     []GetSecurityMonitoringRulesRuleQueryAgentRule `pulumi:"agentRules"`
	Aggregation    *string                                        `pulumi:"aggregation"`
	DistinctFields []string                                       `pulumi:"distinctFields"`
	GroupByFields  []string                                       `pulumi:"groupByFields"`
	// Deprecated: Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
	Metric  *string  `pulumi:"metric"`
	Metrics []string `pulumi:"metrics"`
	Name    *string  `pulumi:"name"`
	Query   string   `pulumi:"query"`
}

// GetSecurityMonitoringRulesRuleQueryInput is an input type that accepts GetSecurityMonitoringRulesRuleQueryArgs and GetSecurityMonitoringRulesRuleQueryOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleQueryInput` via:
//
//	GetSecurityMonitoringRulesRuleQueryArgs{...}
type GetSecurityMonitoringRulesRuleQueryInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleQueryOutput() GetSecurityMonitoringRulesRuleQueryOutput
	ToGetSecurityMonitoringRulesRuleQueryOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleQueryOutput
}

type GetSecurityMonitoringRulesRuleQueryArgs struct {
	// Deprecated: `agent_rule` has been deprecated in favor of new Agent Rule resource.
	AgentRules     GetSecurityMonitoringRulesRuleQueryAgentRuleArrayInput `pulumi:"agentRules"`
	Aggregation    pulumi.StringPtrInput                                  `pulumi:"aggregation"`
	DistinctFields pulumi.StringArrayInput                                `pulumi:"distinctFields"`
	GroupByFields  pulumi.StringArrayInput                                `pulumi:"groupByFields"`
	// Deprecated: Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
	Metric  pulumi.StringPtrInput   `pulumi:"metric"`
	Metrics pulumi.StringArrayInput `pulumi:"metrics"`
	Name    pulumi.StringPtrInput   `pulumi:"name"`
	Query   pulumi.StringInput      `pulumi:"query"`
}

func (GetSecurityMonitoringRulesRuleQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRuleQuery)(nil)).Elem()
}

func (i GetSecurityMonitoringRulesRuleQueryArgs) ToGetSecurityMonitoringRulesRuleQueryOutput() GetSecurityMonitoringRulesRuleQueryOutput {
	return i.ToGetSecurityMonitoringRulesRuleQueryOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleQueryArgs) ToGetSecurityMonitoringRulesRuleQueryOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleQueryOutput)
}

func (i GetSecurityMonitoringRulesRuleQueryArgs) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRuleQuery] {
	return pulumix.Output[GetSecurityMonitoringRulesRuleQuery]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleQueryOutputWithContext(ctx).OutputState,
	}
}

// GetSecurityMonitoringRulesRuleQueryArrayInput is an input type that accepts GetSecurityMonitoringRulesRuleQueryArray and GetSecurityMonitoringRulesRuleQueryArrayOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleQueryArrayInput` via:
//
//	GetSecurityMonitoringRulesRuleQueryArray{ GetSecurityMonitoringRulesRuleQueryArgs{...} }
type GetSecurityMonitoringRulesRuleQueryArrayInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleQueryArrayOutput() GetSecurityMonitoringRulesRuleQueryArrayOutput
	ToGetSecurityMonitoringRulesRuleQueryArrayOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleQueryArrayOutput
}

type GetSecurityMonitoringRulesRuleQueryArray []GetSecurityMonitoringRulesRuleQueryInput

func (GetSecurityMonitoringRulesRuleQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityMonitoringRulesRuleQuery)(nil)).Elem()
}

func (i GetSecurityMonitoringRulesRuleQueryArray) ToGetSecurityMonitoringRulesRuleQueryArrayOutput() GetSecurityMonitoringRulesRuleQueryArrayOutput {
	return i.ToGetSecurityMonitoringRulesRuleQueryArrayOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleQueryArray) ToGetSecurityMonitoringRulesRuleQueryArrayOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleQueryArrayOutput)
}

func (i GetSecurityMonitoringRulesRuleQueryArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSecurityMonitoringRulesRuleQuery] {
	return pulumix.Output[[]GetSecurityMonitoringRulesRuleQuery]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleQueryArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSecurityMonitoringRulesRuleQueryOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRuleQuery)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleQueryOutput) ToGetSecurityMonitoringRulesRuleQueryOutput() GetSecurityMonitoringRulesRuleQueryOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleQueryOutput) ToGetSecurityMonitoringRulesRuleQueryOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleQueryOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleQueryOutput) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRuleQuery] {
	return pulumix.Output[GetSecurityMonitoringRulesRuleQuery]{
		OutputState: o.OutputState,
	}
}

// Deprecated: `agent_rule` has been deprecated in favor of new Agent Rule resource.
func (o GetSecurityMonitoringRulesRuleQueryOutput) AgentRules() GetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleQuery) []GetSecurityMonitoringRulesRuleQueryAgentRule {
		return v.AgentRules
	}).(GetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput)
}

func (o GetSecurityMonitoringRulesRuleQueryOutput) Aggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleQuery) *string { return v.Aggregation }).(pulumi.StringPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleQueryOutput) DistinctFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleQuery) []string { return v.DistinctFields }).(pulumi.StringArrayOutput)
}

func (o GetSecurityMonitoringRulesRuleQueryOutput) GroupByFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleQuery) []string { return v.GroupByFields }).(pulumi.StringArrayOutput)
}

// Deprecated: Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
func (o GetSecurityMonitoringRulesRuleQueryOutput) Metric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleQuery) *string { return v.Metric }).(pulumi.StringPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleQueryOutput) Metrics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleQuery) []string { return v.Metrics }).(pulumi.StringArrayOutput)
}

func (o GetSecurityMonitoringRulesRuleQueryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleQuery) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleQuery) string { return v.Query }).(pulumi.StringOutput)
}

type GetSecurityMonitoringRulesRuleQueryArrayOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityMonitoringRulesRuleQuery)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleQueryArrayOutput) ToGetSecurityMonitoringRulesRuleQueryArrayOutput() GetSecurityMonitoringRulesRuleQueryArrayOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleQueryArrayOutput) ToGetSecurityMonitoringRulesRuleQueryArrayOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleQueryArrayOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleQueryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSecurityMonitoringRulesRuleQuery] {
	return pulumix.Output[[]GetSecurityMonitoringRulesRuleQuery]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringRulesRuleQueryArrayOutput) Index(i pulumi.IntInput) GetSecurityMonitoringRulesRuleQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecurityMonitoringRulesRuleQuery {
		return vs[0].([]GetSecurityMonitoringRulesRuleQuery)[vs[1].(int)]
	}).(GetSecurityMonitoringRulesRuleQueryOutput)
}

type GetSecurityMonitoringRulesRuleQueryAgentRule struct {
	AgentRuleId string `pulumi:"agentRuleId"`
	Expression  string `pulumi:"expression"`
}

// GetSecurityMonitoringRulesRuleQueryAgentRuleInput is an input type that accepts GetSecurityMonitoringRulesRuleQueryAgentRuleArgs and GetSecurityMonitoringRulesRuleQueryAgentRuleOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleQueryAgentRuleInput` via:
//
//	GetSecurityMonitoringRulesRuleQueryAgentRuleArgs{...}
type GetSecurityMonitoringRulesRuleQueryAgentRuleInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleQueryAgentRuleOutput() GetSecurityMonitoringRulesRuleQueryAgentRuleOutput
	ToGetSecurityMonitoringRulesRuleQueryAgentRuleOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleQueryAgentRuleOutput
}

type GetSecurityMonitoringRulesRuleQueryAgentRuleArgs struct {
	AgentRuleId pulumi.StringInput `pulumi:"agentRuleId"`
	Expression  pulumi.StringInput `pulumi:"expression"`
}

func (GetSecurityMonitoringRulesRuleQueryAgentRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRuleQueryAgentRule)(nil)).Elem()
}

func (i GetSecurityMonitoringRulesRuleQueryAgentRuleArgs) ToGetSecurityMonitoringRulesRuleQueryAgentRuleOutput() GetSecurityMonitoringRulesRuleQueryAgentRuleOutput {
	return i.ToGetSecurityMonitoringRulesRuleQueryAgentRuleOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleQueryAgentRuleArgs) ToGetSecurityMonitoringRulesRuleQueryAgentRuleOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleQueryAgentRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleQueryAgentRuleOutput)
}

func (i GetSecurityMonitoringRulesRuleQueryAgentRuleArgs) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRuleQueryAgentRule] {
	return pulumix.Output[GetSecurityMonitoringRulesRuleQueryAgentRule]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleQueryAgentRuleOutputWithContext(ctx).OutputState,
	}
}

// GetSecurityMonitoringRulesRuleQueryAgentRuleArrayInput is an input type that accepts GetSecurityMonitoringRulesRuleQueryAgentRuleArray and GetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleQueryAgentRuleArrayInput` via:
//
//	GetSecurityMonitoringRulesRuleQueryAgentRuleArray{ GetSecurityMonitoringRulesRuleQueryAgentRuleArgs{...} }
type GetSecurityMonitoringRulesRuleQueryAgentRuleArrayInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput() GetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput
	ToGetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput
}

type GetSecurityMonitoringRulesRuleQueryAgentRuleArray []GetSecurityMonitoringRulesRuleQueryAgentRuleInput

func (GetSecurityMonitoringRulesRuleQueryAgentRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityMonitoringRulesRuleQueryAgentRule)(nil)).Elem()
}

func (i GetSecurityMonitoringRulesRuleQueryAgentRuleArray) ToGetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput() GetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput {
	return i.ToGetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleQueryAgentRuleArray) ToGetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput)
}

func (i GetSecurityMonitoringRulesRuleQueryAgentRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSecurityMonitoringRulesRuleQueryAgentRule] {
	return pulumix.Output[[]GetSecurityMonitoringRulesRuleQueryAgentRule]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSecurityMonitoringRulesRuleQueryAgentRuleOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleQueryAgentRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRuleQueryAgentRule)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleQueryAgentRuleOutput) ToGetSecurityMonitoringRulesRuleQueryAgentRuleOutput() GetSecurityMonitoringRulesRuleQueryAgentRuleOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleQueryAgentRuleOutput) ToGetSecurityMonitoringRulesRuleQueryAgentRuleOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleQueryAgentRuleOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleQueryAgentRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRuleQueryAgentRule] {
	return pulumix.Output[GetSecurityMonitoringRulesRuleQueryAgentRule]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringRulesRuleQueryAgentRuleOutput) AgentRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleQueryAgentRule) string { return v.AgentRuleId }).(pulumi.StringOutput)
}

func (o GetSecurityMonitoringRulesRuleQueryAgentRuleOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleQueryAgentRule) string { return v.Expression }).(pulumi.StringOutput)
}

type GetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityMonitoringRulesRuleQueryAgentRule)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput) ToGetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput() GetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput) ToGetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSecurityMonitoringRulesRuleQueryAgentRule] {
	return pulumix.Output[[]GetSecurityMonitoringRulesRuleQueryAgentRule]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput) Index(i pulumi.IntInput) GetSecurityMonitoringRulesRuleQueryAgentRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecurityMonitoringRulesRuleQueryAgentRule {
		return vs[0].([]GetSecurityMonitoringRulesRuleQueryAgentRule)[vs[1].(int)]
	}).(GetSecurityMonitoringRulesRuleQueryAgentRuleOutput)
}

type GetSecurityMonitoringRulesRuleSignalQuery struct {
	Aggregation          *string  `pulumi:"aggregation"`
	CorrelatedByFields   []string `pulumi:"correlatedByFields"`
	CorrelatedQueryIndex *string  `pulumi:"correlatedQueryIndex"`
	DefaultRuleId        *string  `pulumi:"defaultRuleId"`
	Name                 *string  `pulumi:"name"`
	RuleId               string   `pulumi:"ruleId"`
}

// GetSecurityMonitoringRulesRuleSignalQueryInput is an input type that accepts GetSecurityMonitoringRulesRuleSignalQueryArgs and GetSecurityMonitoringRulesRuleSignalQueryOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleSignalQueryInput` via:
//
//	GetSecurityMonitoringRulesRuleSignalQueryArgs{...}
type GetSecurityMonitoringRulesRuleSignalQueryInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleSignalQueryOutput() GetSecurityMonitoringRulesRuleSignalQueryOutput
	ToGetSecurityMonitoringRulesRuleSignalQueryOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleSignalQueryOutput
}

type GetSecurityMonitoringRulesRuleSignalQueryArgs struct {
	Aggregation          pulumi.StringPtrInput   `pulumi:"aggregation"`
	CorrelatedByFields   pulumi.StringArrayInput `pulumi:"correlatedByFields"`
	CorrelatedQueryIndex pulumi.StringPtrInput   `pulumi:"correlatedQueryIndex"`
	DefaultRuleId        pulumi.StringPtrInput   `pulumi:"defaultRuleId"`
	Name                 pulumi.StringPtrInput   `pulumi:"name"`
	RuleId               pulumi.StringInput      `pulumi:"ruleId"`
}

func (GetSecurityMonitoringRulesRuleSignalQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRuleSignalQuery)(nil)).Elem()
}

func (i GetSecurityMonitoringRulesRuleSignalQueryArgs) ToGetSecurityMonitoringRulesRuleSignalQueryOutput() GetSecurityMonitoringRulesRuleSignalQueryOutput {
	return i.ToGetSecurityMonitoringRulesRuleSignalQueryOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleSignalQueryArgs) ToGetSecurityMonitoringRulesRuleSignalQueryOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleSignalQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleSignalQueryOutput)
}

func (i GetSecurityMonitoringRulesRuleSignalQueryArgs) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRuleSignalQuery] {
	return pulumix.Output[GetSecurityMonitoringRulesRuleSignalQuery]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleSignalQueryOutputWithContext(ctx).OutputState,
	}
}

// GetSecurityMonitoringRulesRuleSignalQueryArrayInput is an input type that accepts GetSecurityMonitoringRulesRuleSignalQueryArray and GetSecurityMonitoringRulesRuleSignalQueryArrayOutput values.
// You can construct a concrete instance of `GetSecurityMonitoringRulesRuleSignalQueryArrayInput` via:
//
//	GetSecurityMonitoringRulesRuleSignalQueryArray{ GetSecurityMonitoringRulesRuleSignalQueryArgs{...} }
type GetSecurityMonitoringRulesRuleSignalQueryArrayInput interface {
	pulumi.Input

	ToGetSecurityMonitoringRulesRuleSignalQueryArrayOutput() GetSecurityMonitoringRulesRuleSignalQueryArrayOutput
	ToGetSecurityMonitoringRulesRuleSignalQueryArrayOutputWithContext(context.Context) GetSecurityMonitoringRulesRuleSignalQueryArrayOutput
}

type GetSecurityMonitoringRulesRuleSignalQueryArray []GetSecurityMonitoringRulesRuleSignalQueryInput

func (GetSecurityMonitoringRulesRuleSignalQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityMonitoringRulesRuleSignalQuery)(nil)).Elem()
}

func (i GetSecurityMonitoringRulesRuleSignalQueryArray) ToGetSecurityMonitoringRulesRuleSignalQueryArrayOutput() GetSecurityMonitoringRulesRuleSignalQueryArrayOutput {
	return i.ToGetSecurityMonitoringRulesRuleSignalQueryArrayOutputWithContext(context.Background())
}

func (i GetSecurityMonitoringRulesRuleSignalQueryArray) ToGetSecurityMonitoringRulesRuleSignalQueryArrayOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleSignalQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityMonitoringRulesRuleSignalQueryArrayOutput)
}

func (i GetSecurityMonitoringRulesRuleSignalQueryArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSecurityMonitoringRulesRuleSignalQuery] {
	return pulumix.Output[[]GetSecurityMonitoringRulesRuleSignalQuery]{
		OutputState: i.ToGetSecurityMonitoringRulesRuleSignalQueryArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSecurityMonitoringRulesRuleSignalQueryOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleSignalQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityMonitoringRulesRuleSignalQuery)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleSignalQueryOutput) ToGetSecurityMonitoringRulesRuleSignalQueryOutput() GetSecurityMonitoringRulesRuleSignalQueryOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleSignalQueryOutput) ToGetSecurityMonitoringRulesRuleSignalQueryOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleSignalQueryOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleSignalQueryOutput) ToOutput(ctx context.Context) pulumix.Output[GetSecurityMonitoringRulesRuleSignalQuery] {
	return pulumix.Output[GetSecurityMonitoringRulesRuleSignalQuery]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringRulesRuleSignalQueryOutput) Aggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleSignalQuery) *string { return v.Aggregation }).(pulumi.StringPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleSignalQueryOutput) CorrelatedByFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleSignalQuery) []string { return v.CorrelatedByFields }).(pulumi.StringArrayOutput)
}

func (o GetSecurityMonitoringRulesRuleSignalQueryOutput) CorrelatedQueryIndex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleSignalQuery) *string { return v.CorrelatedQueryIndex }).(pulumi.StringPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleSignalQueryOutput) DefaultRuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleSignalQuery) *string { return v.DefaultRuleId }).(pulumi.StringPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleSignalQueryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleSignalQuery) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetSecurityMonitoringRulesRuleSignalQueryOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityMonitoringRulesRuleSignalQuery) string { return v.RuleId }).(pulumi.StringOutput)
}

type GetSecurityMonitoringRulesRuleSignalQueryArrayOutput struct{ *pulumi.OutputState }

func (GetSecurityMonitoringRulesRuleSignalQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityMonitoringRulesRuleSignalQuery)(nil)).Elem()
}

func (o GetSecurityMonitoringRulesRuleSignalQueryArrayOutput) ToGetSecurityMonitoringRulesRuleSignalQueryArrayOutput() GetSecurityMonitoringRulesRuleSignalQueryArrayOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleSignalQueryArrayOutput) ToGetSecurityMonitoringRulesRuleSignalQueryArrayOutputWithContext(ctx context.Context) GetSecurityMonitoringRulesRuleSignalQueryArrayOutput {
	return o
}

func (o GetSecurityMonitoringRulesRuleSignalQueryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSecurityMonitoringRulesRuleSignalQuery] {
	return pulumix.Output[[]GetSecurityMonitoringRulesRuleSignalQuery]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityMonitoringRulesRuleSignalQueryArrayOutput) Index(i pulumi.IntInput) GetSecurityMonitoringRulesRuleSignalQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecurityMonitoringRulesRuleSignalQuery {
		return vs[0].([]GetSecurityMonitoringRulesRuleSignalQuery)[vs[1].(int)]
	}).(GetSecurityMonitoringRulesRuleSignalQueryOutput)
}

type GetServiceLevelObjectiveQuery struct {
	Denominator string `pulumi:"denominator"`
	Numerator   string `pulumi:"numerator"`
}

// GetServiceLevelObjectiveQueryInput is an input type that accepts GetServiceLevelObjectiveQueryArgs and GetServiceLevelObjectiveQueryOutput values.
// You can construct a concrete instance of `GetServiceLevelObjectiveQueryInput` via:
//
//	GetServiceLevelObjectiveQueryArgs{...}
type GetServiceLevelObjectiveQueryInput interface {
	pulumi.Input

	ToGetServiceLevelObjectiveQueryOutput() GetServiceLevelObjectiveQueryOutput
	ToGetServiceLevelObjectiveQueryOutputWithContext(context.Context) GetServiceLevelObjectiveQueryOutput
}

type GetServiceLevelObjectiveQueryArgs struct {
	Denominator pulumi.StringInput `pulumi:"denominator"`
	Numerator   pulumi.StringInput `pulumi:"numerator"`
}

func (GetServiceLevelObjectiveQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceLevelObjectiveQuery)(nil)).Elem()
}

func (i GetServiceLevelObjectiveQueryArgs) ToGetServiceLevelObjectiveQueryOutput() GetServiceLevelObjectiveQueryOutput {
	return i.ToGetServiceLevelObjectiveQueryOutputWithContext(context.Background())
}

func (i GetServiceLevelObjectiveQueryArgs) ToGetServiceLevelObjectiveQueryOutputWithContext(ctx context.Context) GetServiceLevelObjectiveQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceLevelObjectiveQueryOutput)
}

func (i GetServiceLevelObjectiveQueryArgs) ToOutput(ctx context.Context) pulumix.Output[GetServiceLevelObjectiveQuery] {
	return pulumix.Output[GetServiceLevelObjectiveQuery]{
		OutputState: i.ToGetServiceLevelObjectiveQueryOutputWithContext(ctx).OutputState,
	}
}

// GetServiceLevelObjectiveQueryArrayInput is an input type that accepts GetServiceLevelObjectiveQueryArray and GetServiceLevelObjectiveQueryArrayOutput values.
// You can construct a concrete instance of `GetServiceLevelObjectiveQueryArrayInput` via:
//
//	GetServiceLevelObjectiveQueryArray{ GetServiceLevelObjectiveQueryArgs{...} }
type GetServiceLevelObjectiveQueryArrayInput interface {
	pulumi.Input

	ToGetServiceLevelObjectiveQueryArrayOutput() GetServiceLevelObjectiveQueryArrayOutput
	ToGetServiceLevelObjectiveQueryArrayOutputWithContext(context.Context) GetServiceLevelObjectiveQueryArrayOutput
}

type GetServiceLevelObjectiveQueryArray []GetServiceLevelObjectiveQueryInput

func (GetServiceLevelObjectiveQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceLevelObjectiveQuery)(nil)).Elem()
}

func (i GetServiceLevelObjectiveQueryArray) ToGetServiceLevelObjectiveQueryArrayOutput() GetServiceLevelObjectiveQueryArrayOutput {
	return i.ToGetServiceLevelObjectiveQueryArrayOutputWithContext(context.Background())
}

func (i GetServiceLevelObjectiveQueryArray) ToGetServiceLevelObjectiveQueryArrayOutputWithContext(ctx context.Context) GetServiceLevelObjectiveQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceLevelObjectiveQueryArrayOutput)
}

func (i GetServiceLevelObjectiveQueryArray) ToOutput(ctx context.Context) pulumix.Output[[]GetServiceLevelObjectiveQuery] {
	return pulumix.Output[[]GetServiceLevelObjectiveQuery]{
		OutputState: i.ToGetServiceLevelObjectiveQueryArrayOutputWithContext(ctx).OutputState,
	}
}

type GetServiceLevelObjectiveQueryOutput struct{ *pulumi.OutputState }

func (GetServiceLevelObjectiveQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceLevelObjectiveQuery)(nil)).Elem()
}

func (o GetServiceLevelObjectiveQueryOutput) ToGetServiceLevelObjectiveQueryOutput() GetServiceLevelObjectiveQueryOutput {
	return o
}

func (o GetServiceLevelObjectiveQueryOutput) ToGetServiceLevelObjectiveQueryOutputWithContext(ctx context.Context) GetServiceLevelObjectiveQueryOutput {
	return o
}

func (o GetServiceLevelObjectiveQueryOutput) ToOutput(ctx context.Context) pulumix.Output[GetServiceLevelObjectiveQuery] {
	return pulumix.Output[GetServiceLevelObjectiveQuery]{
		OutputState: o.OutputState,
	}
}

func (o GetServiceLevelObjectiveQueryOutput) Denominator() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceLevelObjectiveQuery) string { return v.Denominator }).(pulumi.StringOutput)
}

func (o GetServiceLevelObjectiveQueryOutput) Numerator() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceLevelObjectiveQuery) string { return v.Numerator }).(pulumi.StringOutput)
}

type GetServiceLevelObjectiveQueryArrayOutput struct{ *pulumi.OutputState }

func (GetServiceLevelObjectiveQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceLevelObjectiveQuery)(nil)).Elem()
}

func (o GetServiceLevelObjectiveQueryArrayOutput) ToGetServiceLevelObjectiveQueryArrayOutput() GetServiceLevelObjectiveQueryArrayOutput {
	return o
}

func (o GetServiceLevelObjectiveQueryArrayOutput) ToGetServiceLevelObjectiveQueryArrayOutputWithContext(ctx context.Context) GetServiceLevelObjectiveQueryArrayOutput {
	return o
}

func (o GetServiceLevelObjectiveQueryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetServiceLevelObjectiveQuery] {
	return pulumix.Output[[]GetServiceLevelObjectiveQuery]{
		OutputState: o.OutputState,
	}
}

func (o GetServiceLevelObjectiveQueryArrayOutput) Index(i pulumi.IntInput) GetServiceLevelObjectiveQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceLevelObjectiveQuery {
		return vs[0].([]GetServiceLevelObjectiveQuery)[vs[1].(int)]
	}).(GetServiceLevelObjectiveQueryOutput)
}

type GetServiceLevelObjectivesSlo struct {
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	Type string `pulumi:"type"`
}

// GetServiceLevelObjectivesSloInput is an input type that accepts GetServiceLevelObjectivesSloArgs and GetServiceLevelObjectivesSloOutput values.
// You can construct a concrete instance of `GetServiceLevelObjectivesSloInput` via:
//
//	GetServiceLevelObjectivesSloArgs{...}
type GetServiceLevelObjectivesSloInput interface {
	pulumi.Input

	ToGetServiceLevelObjectivesSloOutput() GetServiceLevelObjectivesSloOutput
	ToGetServiceLevelObjectivesSloOutputWithContext(context.Context) GetServiceLevelObjectivesSloOutput
}

type GetServiceLevelObjectivesSloArgs struct {
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetServiceLevelObjectivesSloArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceLevelObjectivesSlo)(nil)).Elem()
}

func (i GetServiceLevelObjectivesSloArgs) ToGetServiceLevelObjectivesSloOutput() GetServiceLevelObjectivesSloOutput {
	return i.ToGetServiceLevelObjectivesSloOutputWithContext(context.Background())
}

func (i GetServiceLevelObjectivesSloArgs) ToGetServiceLevelObjectivesSloOutputWithContext(ctx context.Context) GetServiceLevelObjectivesSloOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceLevelObjectivesSloOutput)
}

func (i GetServiceLevelObjectivesSloArgs) ToOutput(ctx context.Context) pulumix.Output[GetServiceLevelObjectivesSlo] {
	return pulumix.Output[GetServiceLevelObjectivesSlo]{
		OutputState: i.ToGetServiceLevelObjectivesSloOutputWithContext(ctx).OutputState,
	}
}

// GetServiceLevelObjectivesSloArrayInput is an input type that accepts GetServiceLevelObjectivesSloArray and GetServiceLevelObjectivesSloArrayOutput values.
// You can construct a concrete instance of `GetServiceLevelObjectivesSloArrayInput` via:
//
//	GetServiceLevelObjectivesSloArray{ GetServiceLevelObjectivesSloArgs{...} }
type GetServiceLevelObjectivesSloArrayInput interface {
	pulumi.Input

	ToGetServiceLevelObjectivesSloArrayOutput() GetServiceLevelObjectivesSloArrayOutput
	ToGetServiceLevelObjectivesSloArrayOutputWithContext(context.Context) GetServiceLevelObjectivesSloArrayOutput
}

type GetServiceLevelObjectivesSloArray []GetServiceLevelObjectivesSloInput

func (GetServiceLevelObjectivesSloArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceLevelObjectivesSlo)(nil)).Elem()
}

func (i GetServiceLevelObjectivesSloArray) ToGetServiceLevelObjectivesSloArrayOutput() GetServiceLevelObjectivesSloArrayOutput {
	return i.ToGetServiceLevelObjectivesSloArrayOutputWithContext(context.Background())
}

func (i GetServiceLevelObjectivesSloArray) ToGetServiceLevelObjectivesSloArrayOutputWithContext(ctx context.Context) GetServiceLevelObjectivesSloArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceLevelObjectivesSloArrayOutput)
}

func (i GetServiceLevelObjectivesSloArray) ToOutput(ctx context.Context) pulumix.Output[[]GetServiceLevelObjectivesSlo] {
	return pulumix.Output[[]GetServiceLevelObjectivesSlo]{
		OutputState: i.ToGetServiceLevelObjectivesSloArrayOutputWithContext(ctx).OutputState,
	}
}

type GetServiceLevelObjectivesSloOutput struct{ *pulumi.OutputState }

func (GetServiceLevelObjectivesSloOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceLevelObjectivesSlo)(nil)).Elem()
}

func (o GetServiceLevelObjectivesSloOutput) ToGetServiceLevelObjectivesSloOutput() GetServiceLevelObjectivesSloOutput {
	return o
}

func (o GetServiceLevelObjectivesSloOutput) ToGetServiceLevelObjectivesSloOutputWithContext(ctx context.Context) GetServiceLevelObjectivesSloOutput {
	return o
}

func (o GetServiceLevelObjectivesSloOutput) ToOutput(ctx context.Context) pulumix.Output[GetServiceLevelObjectivesSlo] {
	return pulumix.Output[GetServiceLevelObjectivesSlo]{
		OutputState: o.OutputState,
	}
}

func (o GetServiceLevelObjectivesSloOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceLevelObjectivesSlo) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetServiceLevelObjectivesSloOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceLevelObjectivesSlo) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetServiceLevelObjectivesSloOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceLevelObjectivesSlo) string { return v.Type }).(pulumi.StringOutput)
}

type GetServiceLevelObjectivesSloArrayOutput struct{ *pulumi.OutputState }

func (GetServiceLevelObjectivesSloArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceLevelObjectivesSlo)(nil)).Elem()
}

func (o GetServiceLevelObjectivesSloArrayOutput) ToGetServiceLevelObjectivesSloArrayOutput() GetServiceLevelObjectivesSloArrayOutput {
	return o
}

func (o GetServiceLevelObjectivesSloArrayOutput) ToGetServiceLevelObjectivesSloArrayOutputWithContext(ctx context.Context) GetServiceLevelObjectivesSloArrayOutput {
	return o
}

func (o GetServiceLevelObjectivesSloArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetServiceLevelObjectivesSlo] {
	return pulumix.Output[[]GetServiceLevelObjectivesSlo]{
		OutputState: o.OutputState,
	}
}

func (o GetServiceLevelObjectivesSloArrayOutput) Index(i pulumi.IntInput) GetServiceLevelObjectivesSloOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceLevelObjectivesSlo {
		return vs[0].([]GetServiceLevelObjectivesSlo)[vs[1].(int)]
	}).(GetServiceLevelObjectivesSloOutput)
}

type GetTeamMembershipsTeamMembership struct {
	Id     string `pulumi:"id"`
	Role   string `pulumi:"role"`
	TeamId string `pulumi:"teamId"`
	UserId string `pulumi:"userId"`
}

// GetTeamMembershipsTeamMembershipInput is an input type that accepts GetTeamMembershipsTeamMembershipArgs and GetTeamMembershipsTeamMembershipOutput values.
// You can construct a concrete instance of `GetTeamMembershipsTeamMembershipInput` via:
//
//	GetTeamMembershipsTeamMembershipArgs{...}
type GetTeamMembershipsTeamMembershipInput interface {
	pulumi.Input

	ToGetTeamMembershipsTeamMembershipOutput() GetTeamMembershipsTeamMembershipOutput
	ToGetTeamMembershipsTeamMembershipOutputWithContext(context.Context) GetTeamMembershipsTeamMembershipOutput
}

type GetTeamMembershipsTeamMembershipArgs struct {
	Id     pulumi.StringInput `pulumi:"id"`
	Role   pulumi.StringInput `pulumi:"role"`
	TeamId pulumi.StringInput `pulumi:"teamId"`
	UserId pulumi.StringInput `pulumi:"userId"`
}

func (GetTeamMembershipsTeamMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamMembershipsTeamMembership)(nil)).Elem()
}

func (i GetTeamMembershipsTeamMembershipArgs) ToGetTeamMembershipsTeamMembershipOutput() GetTeamMembershipsTeamMembershipOutput {
	return i.ToGetTeamMembershipsTeamMembershipOutputWithContext(context.Background())
}

func (i GetTeamMembershipsTeamMembershipArgs) ToGetTeamMembershipsTeamMembershipOutputWithContext(ctx context.Context) GetTeamMembershipsTeamMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamMembershipsTeamMembershipOutput)
}

func (i GetTeamMembershipsTeamMembershipArgs) ToOutput(ctx context.Context) pulumix.Output[GetTeamMembershipsTeamMembership] {
	return pulumix.Output[GetTeamMembershipsTeamMembership]{
		OutputState: i.ToGetTeamMembershipsTeamMembershipOutputWithContext(ctx).OutputState,
	}
}

// GetTeamMembershipsTeamMembershipArrayInput is an input type that accepts GetTeamMembershipsTeamMembershipArray and GetTeamMembershipsTeamMembershipArrayOutput values.
// You can construct a concrete instance of `GetTeamMembershipsTeamMembershipArrayInput` via:
//
//	GetTeamMembershipsTeamMembershipArray{ GetTeamMembershipsTeamMembershipArgs{...} }
type GetTeamMembershipsTeamMembershipArrayInput interface {
	pulumi.Input

	ToGetTeamMembershipsTeamMembershipArrayOutput() GetTeamMembershipsTeamMembershipArrayOutput
	ToGetTeamMembershipsTeamMembershipArrayOutputWithContext(context.Context) GetTeamMembershipsTeamMembershipArrayOutput
}

type GetTeamMembershipsTeamMembershipArray []GetTeamMembershipsTeamMembershipInput

func (GetTeamMembershipsTeamMembershipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamMembershipsTeamMembership)(nil)).Elem()
}

func (i GetTeamMembershipsTeamMembershipArray) ToGetTeamMembershipsTeamMembershipArrayOutput() GetTeamMembershipsTeamMembershipArrayOutput {
	return i.ToGetTeamMembershipsTeamMembershipArrayOutputWithContext(context.Background())
}

func (i GetTeamMembershipsTeamMembershipArray) ToGetTeamMembershipsTeamMembershipArrayOutputWithContext(ctx context.Context) GetTeamMembershipsTeamMembershipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamMembershipsTeamMembershipArrayOutput)
}

func (i GetTeamMembershipsTeamMembershipArray) ToOutput(ctx context.Context) pulumix.Output[[]GetTeamMembershipsTeamMembership] {
	return pulumix.Output[[]GetTeamMembershipsTeamMembership]{
		OutputState: i.ToGetTeamMembershipsTeamMembershipArrayOutputWithContext(ctx).OutputState,
	}
}

type GetTeamMembershipsTeamMembershipOutput struct{ *pulumi.OutputState }

func (GetTeamMembershipsTeamMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamMembershipsTeamMembership)(nil)).Elem()
}

func (o GetTeamMembershipsTeamMembershipOutput) ToGetTeamMembershipsTeamMembershipOutput() GetTeamMembershipsTeamMembershipOutput {
	return o
}

func (o GetTeamMembershipsTeamMembershipOutput) ToGetTeamMembershipsTeamMembershipOutputWithContext(ctx context.Context) GetTeamMembershipsTeamMembershipOutput {
	return o
}

func (o GetTeamMembershipsTeamMembershipOutput) ToOutput(ctx context.Context) pulumix.Output[GetTeamMembershipsTeamMembership] {
	return pulumix.Output[GetTeamMembershipsTeamMembership]{
		OutputState: o.OutputState,
	}
}

func (o GetTeamMembershipsTeamMembershipOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamMembershipsTeamMembership) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetTeamMembershipsTeamMembershipOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamMembershipsTeamMembership) string { return v.Role }).(pulumi.StringOutput)
}

func (o GetTeamMembershipsTeamMembershipOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamMembershipsTeamMembership) string { return v.TeamId }).(pulumi.StringOutput)
}

func (o GetTeamMembershipsTeamMembershipOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamMembershipsTeamMembership) string { return v.UserId }).(pulumi.StringOutput)
}

type GetTeamMembershipsTeamMembershipArrayOutput struct{ *pulumi.OutputState }

func (GetTeamMembershipsTeamMembershipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamMembershipsTeamMembership)(nil)).Elem()
}

func (o GetTeamMembershipsTeamMembershipArrayOutput) ToGetTeamMembershipsTeamMembershipArrayOutput() GetTeamMembershipsTeamMembershipArrayOutput {
	return o
}

func (o GetTeamMembershipsTeamMembershipArrayOutput) ToGetTeamMembershipsTeamMembershipArrayOutputWithContext(ctx context.Context) GetTeamMembershipsTeamMembershipArrayOutput {
	return o
}

func (o GetTeamMembershipsTeamMembershipArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetTeamMembershipsTeamMembership] {
	return pulumix.Output[[]GetTeamMembershipsTeamMembership]{
		OutputState: o.OutputState,
	}
}

func (o GetTeamMembershipsTeamMembershipArrayOutput) Index(i pulumi.IntInput) GetTeamMembershipsTeamMembershipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTeamMembershipsTeamMembership {
		return vs[0].([]GetTeamMembershipsTeamMembership)[vs[1].(int)]
	}).(GetTeamMembershipsTeamMembershipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestApiStepRequestProxyInput)(nil)).Elem(), SyntheticsTestApiStepRequestProxyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestApiStepRequestProxyPtrInput)(nil)).Elem(), SyntheticsTestApiStepRequestProxyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestApiStepRetryInput)(nil)).Elem(), SyntheticsTestApiStepRetryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestApiStepRetryPtrInput)(nil)).Elem(), SyntheticsTestApiStepRetryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestAssertionInput)(nil)).Elem(), SyntheticsTestAssertionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestAssertionArrayInput)(nil)).Elem(), SyntheticsTestAssertionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestAssertionTargetjsonpathInput)(nil)).Elem(), SyntheticsTestAssertionTargetjsonpathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestAssertionTargetjsonpathPtrInput)(nil)).Elem(), SyntheticsTestAssertionTargetjsonpathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestAssertionTargetxpathInput)(nil)).Elem(), SyntheticsTestAssertionTargetxpathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestAssertionTargetxpathPtrInput)(nil)).Elem(), SyntheticsTestAssertionTargetxpathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestBrowserStepInput)(nil)).Elem(), SyntheticsTestBrowserStepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestBrowserStepArrayInput)(nil)).Elem(), SyntheticsTestBrowserStepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestBrowserStepParamsInput)(nil)).Elem(), SyntheticsTestBrowserStepParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestBrowserStepParamsElementUserLocatorInput)(nil)).Elem(), SyntheticsTestBrowserStepParamsElementUserLocatorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestBrowserStepParamsElementUserLocatorPtrInput)(nil)).Elem(), SyntheticsTestBrowserStepParamsElementUserLocatorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestBrowserStepParamsElementUserLocatorValueInput)(nil)).Elem(), SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrInput)(nil)).Elem(), SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestBrowserStepParamsVariableInput)(nil)).Elem(), SyntheticsTestBrowserStepParamsVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestBrowserStepParamsVariablePtrInput)(nil)).Elem(), SyntheticsTestBrowserStepParamsVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestBrowserVariableInput)(nil)).Elem(), SyntheticsTestBrowserVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestBrowserVariableArrayInput)(nil)).Elem(), SyntheticsTestBrowserVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestConfigVariableInput)(nil)).Elem(), SyntheticsTestConfigVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestConfigVariableArrayInput)(nil)).Elem(), SyntheticsTestConfigVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestOptionsListInput)(nil)).Elem(), SyntheticsTestOptionsListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestOptionsListPtrInput)(nil)).Elem(), SyntheticsTestOptionsListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestOptionsListCiInput)(nil)).Elem(), SyntheticsTestOptionsListCiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestOptionsListCiPtrInput)(nil)).Elem(), SyntheticsTestOptionsListCiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestOptionsListMonitorOptionsInput)(nil)).Elem(), SyntheticsTestOptionsListMonitorOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestOptionsListMonitorOptionsPtrInput)(nil)).Elem(), SyntheticsTestOptionsListMonitorOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestOptionsListRetryInput)(nil)).Elem(), SyntheticsTestOptionsListRetryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestOptionsListRetryPtrInput)(nil)).Elem(), SyntheticsTestOptionsListRetryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestOptionsListRumSettingsInput)(nil)).Elem(), SyntheticsTestOptionsListRumSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestOptionsListRumSettingsPtrInput)(nil)).Elem(), SyntheticsTestOptionsListRumSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestOptionsListSchedulingInput)(nil)).Elem(), SyntheticsTestOptionsListSchedulingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestOptionsListSchedulingPtrInput)(nil)).Elem(), SyntheticsTestOptionsListSchedulingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestOptionsListSchedulingTimeframeInput)(nil)).Elem(), SyntheticsTestOptionsListSchedulingTimeframeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestOptionsListSchedulingTimeframeArrayInput)(nil)).Elem(), SyntheticsTestOptionsListSchedulingTimeframeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestRequestBasicauthInput)(nil)).Elem(), SyntheticsTestRequestBasicauthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestRequestBasicauthPtrInput)(nil)).Elem(), SyntheticsTestRequestBasicauthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestRequestClientCertificateInput)(nil)).Elem(), SyntheticsTestRequestClientCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestRequestClientCertificatePtrInput)(nil)).Elem(), SyntheticsTestRequestClientCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestRequestClientCertificateCertInput)(nil)).Elem(), SyntheticsTestRequestClientCertificateCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestRequestClientCertificateCertPtrInput)(nil)).Elem(), SyntheticsTestRequestClientCertificateCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestRequestClientCertificateKeyInput)(nil)).Elem(), SyntheticsTestRequestClientCertificateKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestRequestClientCertificateKeyPtrInput)(nil)).Elem(), SyntheticsTestRequestClientCertificateKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestRequestDefinitionInput)(nil)).Elem(), SyntheticsTestRequestDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestRequestDefinitionPtrInput)(nil)).Elem(), SyntheticsTestRequestDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestRequestProxyInput)(nil)).Elem(), SyntheticsTestRequestProxyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsTestRequestProxyPtrInput)(nil)).Elem(), SyntheticsTestRequestProxyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCloudWorkloadSecurityAgentRulesAgentRuleInput)(nil)).Elem(), GetCloudWorkloadSecurityAgentRulesAgentRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCloudWorkloadSecurityAgentRulesAgentRuleArrayInput)(nil)).Elem(), GetCloudWorkloadSecurityAgentRulesAgentRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHostsHostListInput)(nil)).Elem(), GetHostsHostListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHostsHostListArrayInput)(nil)).Elem(), GetHostsHostListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHostsHostListMetaInput)(nil)).Elem(), GetHostsHostListMetaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHostsHostListMetricsInput)(nil)).Elem(), GetHostsHostListMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLogsIndexesLogsIndexInput)(nil)).Elem(), GetLogsIndexesLogsIndexArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLogsIndexesLogsIndexArrayInput)(nil)).Elem(), GetLogsIndexesLogsIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLogsIndexesLogsIndexExclusionFilterInput)(nil)).Elem(), GetLogsIndexesLogsIndexExclusionFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLogsIndexesLogsIndexExclusionFilterArrayInput)(nil)).Elem(), GetLogsIndexesLogsIndexExclusionFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLogsIndexesLogsIndexExclusionFilterFilterInput)(nil)).Elem(), GetLogsIndexesLogsIndexExclusionFilterFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLogsIndexesLogsIndexExclusionFilterFilterArrayInput)(nil)).Elem(), GetLogsIndexesLogsIndexExclusionFilterFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLogsIndexesLogsIndexFilterInput)(nil)).Elem(), GetLogsIndexesLogsIndexFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLogsIndexesLogsIndexFilterArrayInput)(nil)).Elem(), GetLogsIndexesLogsIndexFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLogsPipelinesLogsPipelineInput)(nil)).Elem(), GetLogsPipelinesLogsPipelineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLogsPipelinesLogsPipelineArrayInput)(nil)).Elem(), GetLogsPipelinesLogsPipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLogsPipelinesLogsPipelineFilterInput)(nil)).Elem(), GetLogsPipelinesLogsPipelineFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLogsPipelinesLogsPipelineFilterArrayInput)(nil)).Elem(), GetLogsPipelinesLogsPipelineFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorConfigPoliciesMonitorConfigPolicyInput)(nil)).Elem(), GetMonitorConfigPoliciesMonitorConfigPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorConfigPoliciesMonitorConfigPolicyArrayInput)(nil)).Elem(), GetMonitorConfigPoliciesMonitorConfigPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyInput)(nil)).Elem(), GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorMonitorThresholdInput)(nil)).Elem(), GetMonitorMonitorThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorMonitorThresholdArrayInput)(nil)).Elem(), GetMonitorMonitorThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorMonitorThresholdWindowInput)(nil)).Elem(), GetMonitorMonitorThresholdWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorMonitorThresholdWindowArrayInput)(nil)).Elem(), GetMonitorMonitorThresholdWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorSchedulingOptionInput)(nil)).Elem(), GetMonitorSchedulingOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorSchedulingOptionArrayInput)(nil)).Elem(), GetMonitorSchedulingOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorSchedulingOptionEvaluationWindowInput)(nil)).Elem(), GetMonitorSchedulingOptionEvaluationWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorSchedulingOptionEvaluationWindowArrayInput)(nil)).Elem(), GetMonitorSchedulingOptionEvaluationWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorsMonitorInput)(nil)).Elem(), GetMonitorsMonitorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorsMonitorArrayInput)(nil)).Elem(), GetMonitorsMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRolesRoleInput)(nil)).Elem(), GetRolesRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRolesRoleArrayInput)(nil)).Elem(), GetRolesRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringFiltersFilterInput)(nil)).Elem(), GetSecurityMonitoringFiltersFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringFiltersFilterArrayInput)(nil)).Elem(), GetSecurityMonitoringFiltersFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringFiltersFilterExclusionFilterInput)(nil)).Elem(), GetSecurityMonitoringFiltersFilterExclusionFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringFiltersFilterExclusionFilterArrayInput)(nil)).Elem(), GetSecurityMonitoringFiltersFilterExclusionFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleArrayInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleCaseInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleCaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleCaseArrayInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleCaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleFilterInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleFilterArrayInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleOptionsInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleOptionsPtrInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleOptionsNewValueOptionsInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleOptionsNewValueOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleOptionsNewValueOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleQueryInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleQueryArrayInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleQueryAgentRuleInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleQueryAgentRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleQueryAgentRuleArrayInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleQueryAgentRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleSignalQueryInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleSignalQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityMonitoringRulesRuleSignalQueryArrayInput)(nil)).Elem(), GetSecurityMonitoringRulesRuleSignalQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceLevelObjectiveQueryInput)(nil)).Elem(), GetServiceLevelObjectiveQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceLevelObjectiveQueryArrayInput)(nil)).Elem(), GetServiceLevelObjectiveQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceLevelObjectivesSloInput)(nil)).Elem(), GetServiceLevelObjectivesSloArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceLevelObjectivesSloArrayInput)(nil)).Elem(), GetServiceLevelObjectivesSloArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamMembershipsTeamMembershipInput)(nil)).Elem(), GetTeamMembershipsTeamMembershipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamMembershipsTeamMembershipArrayInput)(nil)).Elem(), GetTeamMembershipsTeamMembershipArray{})
	pulumi.RegisterOutputType(SyntheticsTestApiStepRequestProxyOutput{})
	pulumi.RegisterOutputType(SyntheticsTestApiStepRequestProxyPtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestApiStepRetryOutput{})
	pulumi.RegisterOutputType(SyntheticsTestApiStepRetryPtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestAssertionOutput{})
	pulumi.RegisterOutputType(SyntheticsTestAssertionArrayOutput{})
	pulumi.RegisterOutputType(SyntheticsTestAssertionTargetjsonpathOutput{})
	pulumi.RegisterOutputType(SyntheticsTestAssertionTargetjsonpathPtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestAssertionTargetxpathOutput{})
	pulumi.RegisterOutputType(SyntheticsTestAssertionTargetxpathPtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestBrowserStepOutput{})
	pulumi.RegisterOutputType(SyntheticsTestBrowserStepArrayOutput{})
	pulumi.RegisterOutputType(SyntheticsTestBrowserStepParamsOutput{})
	pulumi.RegisterOutputType(SyntheticsTestBrowserStepParamsElementUserLocatorOutput{})
	pulumi.RegisterOutputType(SyntheticsTestBrowserStepParamsElementUserLocatorPtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestBrowserStepParamsElementUserLocatorValueOutput{})
	pulumi.RegisterOutputType(SyntheticsTestBrowserStepParamsElementUserLocatorValuePtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestBrowserStepParamsVariableOutput{})
	pulumi.RegisterOutputType(SyntheticsTestBrowserStepParamsVariablePtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestBrowserVariableOutput{})
	pulumi.RegisterOutputType(SyntheticsTestBrowserVariableArrayOutput{})
	pulumi.RegisterOutputType(SyntheticsTestConfigVariableOutput{})
	pulumi.RegisterOutputType(SyntheticsTestConfigVariableArrayOutput{})
	pulumi.RegisterOutputType(SyntheticsTestOptionsListOutput{})
	pulumi.RegisterOutputType(SyntheticsTestOptionsListPtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestOptionsListCiOutput{})
	pulumi.RegisterOutputType(SyntheticsTestOptionsListCiPtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestOptionsListMonitorOptionsOutput{})
	pulumi.RegisterOutputType(SyntheticsTestOptionsListMonitorOptionsPtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestOptionsListRetryOutput{})
	pulumi.RegisterOutputType(SyntheticsTestOptionsListRetryPtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestOptionsListRumSettingsOutput{})
	pulumi.RegisterOutputType(SyntheticsTestOptionsListRumSettingsPtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestOptionsListSchedulingOutput{})
	pulumi.RegisterOutputType(SyntheticsTestOptionsListSchedulingPtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestOptionsListSchedulingTimeframeOutput{})
	pulumi.RegisterOutputType(SyntheticsTestOptionsListSchedulingTimeframeArrayOutput{})
	pulumi.RegisterOutputType(SyntheticsTestRequestBasicauthOutput{})
	pulumi.RegisterOutputType(SyntheticsTestRequestBasicauthPtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestRequestClientCertificateOutput{})
	pulumi.RegisterOutputType(SyntheticsTestRequestClientCertificatePtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestRequestClientCertificateCertOutput{})
	pulumi.RegisterOutputType(SyntheticsTestRequestClientCertificateCertPtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestRequestClientCertificateKeyOutput{})
	pulumi.RegisterOutputType(SyntheticsTestRequestClientCertificateKeyPtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestRequestDefinitionOutput{})
	pulumi.RegisterOutputType(SyntheticsTestRequestDefinitionPtrOutput{})
	pulumi.RegisterOutputType(SyntheticsTestRequestProxyOutput{})
	pulumi.RegisterOutputType(SyntheticsTestRequestProxyPtrOutput{})
	pulumi.RegisterOutputType(GetCloudWorkloadSecurityAgentRulesAgentRuleOutput{})
	pulumi.RegisterOutputType(GetCloudWorkloadSecurityAgentRulesAgentRuleArrayOutput{})
	pulumi.RegisterOutputType(GetHostsHostListOutput{})
	pulumi.RegisterOutputType(GetHostsHostListArrayOutput{})
	pulumi.RegisterOutputType(GetHostsHostListMetaOutput{})
	pulumi.RegisterOutputType(GetHostsHostListMetricsOutput{})
	pulumi.RegisterOutputType(GetLogsIndexesLogsIndexOutput{})
	pulumi.RegisterOutputType(GetLogsIndexesLogsIndexArrayOutput{})
	pulumi.RegisterOutputType(GetLogsIndexesLogsIndexExclusionFilterOutput{})
	pulumi.RegisterOutputType(GetLogsIndexesLogsIndexExclusionFilterArrayOutput{})
	pulumi.RegisterOutputType(GetLogsIndexesLogsIndexExclusionFilterFilterOutput{})
	pulumi.RegisterOutputType(GetLogsIndexesLogsIndexExclusionFilterFilterArrayOutput{})
	pulumi.RegisterOutputType(GetLogsIndexesLogsIndexFilterOutput{})
	pulumi.RegisterOutputType(GetLogsIndexesLogsIndexFilterArrayOutput{})
	pulumi.RegisterOutputType(GetLogsPipelinesLogsPipelineOutput{})
	pulumi.RegisterOutputType(GetLogsPipelinesLogsPipelineArrayOutput{})
	pulumi.RegisterOutputType(GetLogsPipelinesLogsPipelineFilterOutput{})
	pulumi.RegisterOutputType(GetLogsPipelinesLogsPipelineFilterArrayOutput{})
	pulumi.RegisterOutputType(GetMonitorConfigPoliciesMonitorConfigPolicyOutput{})
	pulumi.RegisterOutputType(GetMonitorConfigPoliciesMonitorConfigPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetMonitorConfigPoliciesMonitorConfigPolicyTagPolicyOutput{})
	pulumi.RegisterOutputType(GetMonitorMonitorThresholdOutput{})
	pulumi.RegisterOutputType(GetMonitorMonitorThresholdArrayOutput{})
	pulumi.RegisterOutputType(GetMonitorMonitorThresholdWindowOutput{})
	pulumi.RegisterOutputType(GetMonitorMonitorThresholdWindowArrayOutput{})
	pulumi.RegisterOutputType(GetMonitorSchedulingOptionOutput{})
	pulumi.RegisterOutputType(GetMonitorSchedulingOptionArrayOutput{})
	pulumi.RegisterOutputType(GetMonitorSchedulingOptionEvaluationWindowOutput{})
	pulumi.RegisterOutputType(GetMonitorSchedulingOptionEvaluationWindowArrayOutput{})
	pulumi.RegisterOutputType(GetMonitorsMonitorOutput{})
	pulumi.RegisterOutputType(GetMonitorsMonitorArrayOutput{})
	pulumi.RegisterOutputType(GetRolesRoleOutput{})
	pulumi.RegisterOutputType(GetRolesRoleArrayOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringFiltersFilterOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringFiltersFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringFiltersFilterExclusionFilterOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringFiltersFilterExclusionFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleArrayOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleCaseOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleCaseArrayOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleFilterOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleOptionsOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleOptionsPtrOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsPtrOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleOptionsNewValueOptionsOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleOptionsNewValueOptionsPtrOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleQueryOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleQueryArrayOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleQueryAgentRuleOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleQueryAgentRuleArrayOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleSignalQueryOutput{})
	pulumi.RegisterOutputType(GetSecurityMonitoringRulesRuleSignalQueryArrayOutput{})
	pulumi.RegisterOutputType(GetServiceLevelObjectiveQueryOutput{})
	pulumi.RegisterOutputType(GetServiceLevelObjectiveQueryArrayOutput{})
	pulumi.RegisterOutputType(GetServiceLevelObjectivesSloOutput{})
	pulumi.RegisterOutputType(GetServiceLevelObjectivesSloArrayOutput{})
	pulumi.RegisterOutputType(GetTeamMembershipsTeamMembershipOutput{})
	pulumi.RegisterOutputType(GetTeamMembershipsTeamMembershipArrayOutput{})
}
