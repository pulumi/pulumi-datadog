// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog dashboard resource. This can be used to create and manage Datadog dashboards.
//
// ## Import
//
// ```sh
//
//	$ pulumi import datadog:index/dashboard:Dashboard my_service_dashboard sv7-gyh-kas
//
// ```
type Dashboard struct {
	pulumi.CustomResourceState

	// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
	// dashboard lists using Terraform as it causes inconsistent behavior.
	DashboardLists pulumi.IntArrayOutput `pulumi:"dashboardLists"`
	// A list of dashboard lists this dashboard should be removed from. Internal only.
	DashboardListsRemoveds pulumi.IntArrayOutput `pulumi:"dashboardListsRemoveds"`
	// The description of the dashboard.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether this dashboard is read-only. **Deprecated.** Prefer using `restrictedRoles` to define which roles are required to edit the dashboard. Defaults to `false`.
	//
	// Deprecated: Prefer using `restricted_roles` to define which roles are required to edit the dashboard.
	IsReadOnly pulumi.BoolPtrOutput `pulumi:"isReadOnly"`
	// The layout type of the group. Valid values are `ordered`.
	LayoutType pulumi.StringOutput `pulumi:"layoutType"`
	// The list of handles for the users to notify when changes are made to this dashboard.
	NotifyLists pulumi.StringArrayOutput `pulumi:"notifyLists"`
	// The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it's set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
	ReflowType pulumi.StringPtrOutput `pulumi:"reflowType"`
	// UUIDs of roles whose associated users are authorized to edit the dashboard.
	RestrictedRoles pulumi.StringArrayOutput `pulumi:"restrictedRoles"`
	// A list of tags to use in the widget.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The list of selectable template variable presets for this dashboard.
	TemplateVariablePresets DashboardTemplateVariablePresetArrayOutput `pulumi:"templateVariablePresets"`
	// The template variable names and assumed values under the given preset
	TemplateVariables DashboardTemplateVariableArrayOutput `pulumi:"templateVariables"`
	// The title of the widget.
	Title pulumi.StringOutput `pulumi:"title"`
	// The URL to use as a data source for the widget.
	Url pulumi.StringOutput `pulumi:"url"`
	// The list of widgets in this group.
	Widgets DashboardWidgetArrayOutput `pulumi:"widgets"`
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LayoutType == nil {
		return nil, errors.New("invalid value for required argument 'LayoutType'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dashboard
	err := ctx.RegisterResource("datadog:index/dashboard:Dashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardState, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	var resource Dashboard
	err := ctx.ReadResource("datadog:index/dashboard:Dashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboard resources.
type dashboardState struct {
	// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
	// dashboard lists using Terraform as it causes inconsistent behavior.
	DashboardLists []int `pulumi:"dashboardLists"`
	// A list of dashboard lists this dashboard should be removed from. Internal only.
	DashboardListsRemoveds []int `pulumi:"dashboardListsRemoveds"`
	// The description of the dashboard.
	Description *string `pulumi:"description"`
	// Whether this dashboard is read-only. **Deprecated.** Prefer using `restrictedRoles` to define which roles are required to edit the dashboard. Defaults to `false`.
	//
	// Deprecated: Prefer using `restricted_roles` to define which roles are required to edit the dashboard.
	IsReadOnly *bool `pulumi:"isReadOnly"`
	// The layout type of the group. Valid values are `ordered`.
	LayoutType *string `pulumi:"layoutType"`
	// The list of handles for the users to notify when changes are made to this dashboard.
	NotifyLists []string `pulumi:"notifyLists"`
	// The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it's set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
	ReflowType *string `pulumi:"reflowType"`
	// UUIDs of roles whose associated users are authorized to edit the dashboard.
	RestrictedRoles []string `pulumi:"restrictedRoles"`
	// A list of tags to use in the widget.
	Tags []string `pulumi:"tags"`
	// The list of selectable template variable presets for this dashboard.
	TemplateVariablePresets []DashboardTemplateVariablePreset `pulumi:"templateVariablePresets"`
	// The template variable names and assumed values under the given preset
	TemplateVariables []DashboardTemplateVariable `pulumi:"templateVariables"`
	// The title of the widget.
	Title *string `pulumi:"title"`
	// The URL to use as a data source for the widget.
	Url *string `pulumi:"url"`
	// The list of widgets in this group.
	Widgets []DashboardWidget `pulumi:"widgets"`
}

type DashboardState struct {
	// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
	// dashboard lists using Terraform as it causes inconsistent behavior.
	DashboardLists pulumi.IntArrayInput
	// A list of dashboard lists this dashboard should be removed from. Internal only.
	DashboardListsRemoveds pulumi.IntArrayInput
	// The description of the dashboard.
	Description pulumi.StringPtrInput
	// Whether this dashboard is read-only. **Deprecated.** Prefer using `restrictedRoles` to define which roles are required to edit the dashboard. Defaults to `false`.
	//
	// Deprecated: Prefer using `restricted_roles` to define which roles are required to edit the dashboard.
	IsReadOnly pulumi.BoolPtrInput
	// The layout type of the group. Valid values are `ordered`.
	LayoutType pulumi.StringPtrInput
	// The list of handles for the users to notify when changes are made to this dashboard.
	NotifyLists pulumi.StringArrayInput
	// The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it's set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
	ReflowType pulumi.StringPtrInput
	// UUIDs of roles whose associated users are authorized to edit the dashboard.
	RestrictedRoles pulumi.StringArrayInput
	// A list of tags to use in the widget.
	Tags pulumi.StringArrayInput
	// The list of selectable template variable presets for this dashboard.
	TemplateVariablePresets DashboardTemplateVariablePresetArrayInput
	// The template variable names and assumed values under the given preset
	TemplateVariables DashboardTemplateVariableArrayInput
	// The title of the widget.
	Title pulumi.StringPtrInput
	// The URL to use as a data source for the widget.
	Url pulumi.StringPtrInput
	// The list of widgets in this group.
	Widgets DashboardWidgetArrayInput
}

func (DashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardState)(nil)).Elem()
}

type dashboardArgs struct {
	// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
	// dashboard lists using Terraform as it causes inconsistent behavior.
	DashboardLists []int `pulumi:"dashboardLists"`
	// The description of the dashboard.
	Description *string `pulumi:"description"`
	// Whether this dashboard is read-only. **Deprecated.** Prefer using `restrictedRoles` to define which roles are required to edit the dashboard. Defaults to `false`.
	//
	// Deprecated: Prefer using `restricted_roles` to define which roles are required to edit the dashboard.
	IsReadOnly *bool `pulumi:"isReadOnly"`
	// The layout type of the group. Valid values are `ordered`.
	LayoutType string `pulumi:"layoutType"`
	// The list of handles for the users to notify when changes are made to this dashboard.
	NotifyLists []string `pulumi:"notifyLists"`
	// The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it's set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
	ReflowType *string `pulumi:"reflowType"`
	// UUIDs of roles whose associated users are authorized to edit the dashboard.
	RestrictedRoles []string `pulumi:"restrictedRoles"`
	// A list of tags to use in the widget.
	Tags []string `pulumi:"tags"`
	// The list of selectable template variable presets for this dashboard.
	TemplateVariablePresets []DashboardTemplateVariablePreset `pulumi:"templateVariablePresets"`
	// The template variable names and assumed values under the given preset
	TemplateVariables []DashboardTemplateVariable `pulumi:"templateVariables"`
	// The title of the widget.
	Title string `pulumi:"title"`
	// The URL to use as a data source for the widget.
	Url *string `pulumi:"url"`
	// The list of widgets in this group.
	Widgets []DashboardWidget `pulumi:"widgets"`
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
	// dashboard lists using Terraform as it causes inconsistent behavior.
	DashboardLists pulumi.IntArrayInput
	// The description of the dashboard.
	Description pulumi.StringPtrInput
	// Whether this dashboard is read-only. **Deprecated.** Prefer using `restrictedRoles` to define which roles are required to edit the dashboard. Defaults to `false`.
	//
	// Deprecated: Prefer using `restricted_roles` to define which roles are required to edit the dashboard.
	IsReadOnly pulumi.BoolPtrInput
	// The layout type of the group. Valid values are `ordered`.
	LayoutType pulumi.StringInput
	// The list of handles for the users to notify when changes are made to this dashboard.
	NotifyLists pulumi.StringArrayInput
	// The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it's set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
	ReflowType pulumi.StringPtrInput
	// UUIDs of roles whose associated users are authorized to edit the dashboard.
	RestrictedRoles pulumi.StringArrayInput
	// A list of tags to use in the widget.
	Tags pulumi.StringArrayInput
	// The list of selectable template variable presets for this dashboard.
	TemplateVariablePresets DashboardTemplateVariablePresetArrayInput
	// The template variable names and assumed values under the given preset
	TemplateVariables DashboardTemplateVariableArrayInput
	// The title of the widget.
	Title pulumi.StringInput
	// The URL to use as a data source for the widget.
	Url pulumi.StringPtrInput
	// The list of widgets in this group.
	Widgets DashboardWidgetArrayInput
}

func (DashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardArgs)(nil)).Elem()
}

type DashboardInput interface {
	pulumi.Input

	ToDashboardOutput() DashboardOutput
	ToDashboardOutputWithContext(ctx context.Context) DashboardOutput
}

func (*Dashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (i *Dashboard) ToDashboardOutput() DashboardOutput {
	return i.ToDashboardOutputWithContext(context.Background())
}

func (i *Dashboard) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardOutput)
}

// DashboardArrayInput is an input type that accepts DashboardArray and DashboardArrayOutput values.
// You can construct a concrete instance of `DashboardArrayInput` via:
//
//	DashboardArray{ DashboardArgs{...} }
type DashboardArrayInput interface {
	pulumi.Input

	ToDashboardArrayOutput() DashboardArrayOutput
	ToDashboardArrayOutputWithContext(context.Context) DashboardArrayOutput
}

type DashboardArray []DashboardInput

func (DashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dashboard)(nil)).Elem()
}

func (i DashboardArray) ToDashboardArrayOutput() DashboardArrayOutput {
	return i.ToDashboardArrayOutputWithContext(context.Background())
}

func (i DashboardArray) ToDashboardArrayOutputWithContext(ctx context.Context) DashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardArrayOutput)
}

// DashboardMapInput is an input type that accepts DashboardMap and DashboardMapOutput values.
// You can construct a concrete instance of `DashboardMapInput` via:
//
//	DashboardMap{ "key": DashboardArgs{...} }
type DashboardMapInput interface {
	pulumi.Input

	ToDashboardMapOutput() DashboardMapOutput
	ToDashboardMapOutputWithContext(context.Context) DashboardMapOutput
}

type DashboardMap map[string]DashboardInput

func (DashboardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dashboard)(nil)).Elem()
}

func (i DashboardMap) ToDashboardMapOutput() DashboardMapOutput {
	return i.ToDashboardMapOutputWithContext(context.Background())
}

func (i DashboardMap) ToDashboardMapOutputWithContext(ctx context.Context) DashboardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardMapOutput)
}

type DashboardOutput struct{ *pulumi.OutputState }

func (DashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (o DashboardOutput) ToDashboardOutput() DashboardOutput {
	return o
}

func (o DashboardOutput) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return o
}

// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
// dashboard lists using Terraform as it causes inconsistent behavior.
func (o DashboardOutput) DashboardLists() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.IntArrayOutput { return v.DashboardLists }).(pulumi.IntArrayOutput)
}

// A list of dashboard lists this dashboard should be removed from. Internal only.
func (o DashboardOutput) DashboardListsRemoveds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.IntArrayOutput { return v.DashboardListsRemoveds }).(pulumi.IntArrayOutput)
}

// The description of the dashboard.
func (o DashboardOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether this dashboard is read-only. **Deprecated.** Prefer using `restrictedRoles` to define which roles are required to edit the dashboard. Defaults to `false`.
//
// Deprecated: Prefer using `restricted_roles` to define which roles are required to edit the dashboard.
func (o DashboardOutput) IsReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.BoolPtrOutput { return v.IsReadOnly }).(pulumi.BoolPtrOutput)
}

// The layout type of the group. Valid values are `ordered`.
func (o DashboardOutput) LayoutType() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.LayoutType }).(pulumi.StringOutput)
}

// The list of handles for the users to notify when changes are made to this dashboard.
func (o DashboardOutput) NotifyLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringArrayOutput { return v.NotifyLists }).(pulumi.StringArrayOutput)
}

// The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it's set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
func (o DashboardOutput) ReflowType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringPtrOutput { return v.ReflowType }).(pulumi.StringPtrOutput)
}

// UUIDs of roles whose associated users are authorized to edit the dashboard.
func (o DashboardOutput) RestrictedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringArrayOutput { return v.RestrictedRoles }).(pulumi.StringArrayOutput)
}

// A list of tags to use in the widget.
func (o DashboardOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The list of selectable template variable presets for this dashboard.
func (o DashboardOutput) TemplateVariablePresets() DashboardTemplateVariablePresetArrayOutput {
	return o.ApplyT(func(v *Dashboard) DashboardTemplateVariablePresetArrayOutput { return v.TemplateVariablePresets }).(DashboardTemplateVariablePresetArrayOutput)
}

// The template variable names and assumed values under the given preset
func (o DashboardOutput) TemplateVariables() DashboardTemplateVariableArrayOutput {
	return o.ApplyT(func(v *Dashboard) DashboardTemplateVariableArrayOutput { return v.TemplateVariables }).(DashboardTemplateVariableArrayOutput)
}

// The title of the widget.
func (o DashboardOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// The URL to use as a data source for the widget.
func (o DashboardOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The list of widgets in this group.
func (o DashboardOutput) Widgets() DashboardWidgetArrayOutput {
	return o.ApplyT(func(v *Dashboard) DashboardWidgetArrayOutput { return v.Widgets }).(DashboardWidgetArrayOutput)
}

type DashboardArrayOutput struct{ *pulumi.OutputState }

func (DashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dashboard)(nil)).Elem()
}

func (o DashboardArrayOutput) ToDashboardArrayOutput() DashboardArrayOutput {
	return o
}

func (o DashboardArrayOutput) ToDashboardArrayOutputWithContext(ctx context.Context) DashboardArrayOutput {
	return o
}

func (o DashboardArrayOutput) Index(i pulumi.IntInput) DashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dashboard {
		return vs[0].([]*Dashboard)[vs[1].(int)]
	}).(DashboardOutput)
}

type DashboardMapOutput struct{ *pulumi.OutputState }

func (DashboardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dashboard)(nil)).Elem()
}

func (o DashboardMapOutput) ToDashboardMapOutput() DashboardMapOutput {
	return o
}

func (o DashboardMapOutput) ToDashboardMapOutputWithContext(ctx context.Context) DashboardMapOutput {
	return o
}

func (o DashboardMapOutput) MapIndex(k pulumi.StringInput) DashboardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dashboard {
		return vs[0].(map[string]*Dashboard)[vs[1].(string)]
	}).(DashboardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardInput)(nil)).Elem(), &Dashboard{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardArrayInput)(nil)).Elem(), DashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardMapInput)(nil)).Elem(), DashboardMap{})
	pulumi.RegisterOutputType(DashboardOutput{})
	pulumi.RegisterOutputType(DashboardArrayOutput{})
	pulumi.RegisterOutputType(DashboardMapOutput{})
}
