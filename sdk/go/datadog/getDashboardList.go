// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to retrieve information about an existing dashboard list, for use in other resources. In particular, it can be used in a dashboard to register it in the list.
func LookupDashboardList(ctx *pulumi.Context, args *LookupDashboardListArgs, opts ...pulumi.InvokeOption) (*LookupDashboardListResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDashboardListResult
	err := ctx.Invoke("datadog:index/getDashboardList:getDashboardList", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDashboardList.
type LookupDashboardListArgs struct {
	// A dashboard list name to limit the search.
	Name string `pulumi:"name"`
}

// A collection of values returned by getDashboardList.
type LookupDashboardListResult struct {
	// The ID of this resource.
	Id string `pulumi:"id"`
	// A dashboard list name to limit the search.
	Name string `pulumi:"name"`
}

func LookupDashboardListOutput(ctx *pulumi.Context, args LookupDashboardListOutputArgs, opts ...pulumi.InvokeOption) LookupDashboardListResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDashboardListResult, error) {
			args := v.(LookupDashboardListArgs)
			r, err := LookupDashboardList(ctx, &args, opts...)
			var s LookupDashboardListResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDashboardListResultOutput)
}

// A collection of arguments for invoking getDashboardList.
type LookupDashboardListOutputArgs struct {
	// A dashboard list name to limit the search.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupDashboardListOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDashboardListArgs)(nil)).Elem()
}

// A collection of values returned by getDashboardList.
type LookupDashboardListResultOutput struct{ *pulumi.OutputState }

func (LookupDashboardListResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDashboardListResult)(nil)).Elem()
}

func (o LookupDashboardListResultOutput) ToLookupDashboardListResultOutput() LookupDashboardListResultOutput {
	return o
}

func (o LookupDashboardListResultOutput) ToLookupDashboardListResultOutputWithContext(ctx context.Context) LookupDashboardListResultOutput {
	return o
}

func (o LookupDashboardListResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupDashboardListResult] {
	return pulumix.Output[LookupDashboardListResult]{
		OutputState: o.OutputState,
	}
}

// The ID of this resource.
func (o LookupDashboardListResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDashboardListResult) string { return v.Id }).(pulumi.StringOutput)
}

// A dashboard list name to limit the search.
func (o LookupDashboardListResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDashboardListResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDashboardListResultOutput{})
}
