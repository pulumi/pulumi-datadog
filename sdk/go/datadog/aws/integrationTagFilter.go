// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Datadog AWS tag filter resource. This can be used to create and manage Datadog AWS tag filters.
//
// ## Import
//
// Amazon Web Services log filter resource can be imported using their account ID and namespace separated with a colon (:).
//
// ```sh
//
//	$ pulumi import datadog:aws/integrationTagFilter:IntegrationTagFilter foo ${account_id}:${namespace}
//
// ```
type IntegrationTagFilter struct {
	pulumi.CustomResourceState

	// Your AWS Account ID without dashes. If your account is a GovCloud or China account, specify the `accessKeyId` here.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The namespace associated with the tag filter entry. Valid values are `elb`, `applicationElb`, `sqs`, `rds`, `custom`, `networkElb`, `lambda`.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// The tag filter string.
	TagFilterStr pulumi.StringOutput `pulumi:"tagFilterStr"`
}

// NewIntegrationTagFilter registers a new resource with the given unique name, arguments, and options.
func NewIntegrationTagFilter(ctx *pulumi.Context,
	name string, args *IntegrationTagFilterArgs, opts ...pulumi.ResourceOption) (*IntegrationTagFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.TagFilterStr == nil {
		return nil, errors.New("invalid value for required argument 'TagFilterStr'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationTagFilter
	err := ctx.RegisterResource("datadog:aws/integrationTagFilter:IntegrationTagFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationTagFilter gets an existing IntegrationTagFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationTagFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationTagFilterState, opts ...pulumi.ResourceOption) (*IntegrationTagFilter, error) {
	var resource IntegrationTagFilter
	err := ctx.ReadResource("datadog:aws/integrationTagFilter:IntegrationTagFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationTagFilter resources.
type integrationTagFilterState struct {
	// Your AWS Account ID without dashes. If your account is a GovCloud or China account, specify the `accessKeyId` here.
	AccountId *string `pulumi:"accountId"`
	// The namespace associated with the tag filter entry. Valid values are `elb`, `applicationElb`, `sqs`, `rds`, `custom`, `networkElb`, `lambda`.
	Namespace *string `pulumi:"namespace"`
	// The tag filter string.
	TagFilterStr *string `pulumi:"tagFilterStr"`
}

type IntegrationTagFilterState struct {
	// Your AWS Account ID without dashes. If your account is a GovCloud or China account, specify the `accessKeyId` here.
	AccountId pulumi.StringPtrInput
	// The namespace associated with the tag filter entry. Valid values are `elb`, `applicationElb`, `sqs`, `rds`, `custom`, `networkElb`, `lambda`.
	Namespace pulumi.StringPtrInput
	// The tag filter string.
	TagFilterStr pulumi.StringPtrInput
}

func (IntegrationTagFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationTagFilterState)(nil)).Elem()
}

type integrationTagFilterArgs struct {
	// Your AWS Account ID without dashes. If your account is a GovCloud or China account, specify the `accessKeyId` here.
	AccountId string `pulumi:"accountId"`
	// The namespace associated with the tag filter entry. Valid values are `elb`, `applicationElb`, `sqs`, `rds`, `custom`, `networkElb`, `lambda`.
	Namespace string `pulumi:"namespace"`
	// The tag filter string.
	TagFilterStr string `pulumi:"tagFilterStr"`
}

// The set of arguments for constructing a IntegrationTagFilter resource.
type IntegrationTagFilterArgs struct {
	// Your AWS Account ID without dashes. If your account is a GovCloud or China account, specify the `accessKeyId` here.
	AccountId pulumi.StringInput
	// The namespace associated with the tag filter entry. Valid values are `elb`, `applicationElb`, `sqs`, `rds`, `custom`, `networkElb`, `lambda`.
	Namespace pulumi.StringInput
	// The tag filter string.
	TagFilterStr pulumi.StringInput
}

func (IntegrationTagFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationTagFilterArgs)(nil)).Elem()
}

type IntegrationTagFilterInput interface {
	pulumi.Input

	ToIntegrationTagFilterOutput() IntegrationTagFilterOutput
	ToIntegrationTagFilterOutputWithContext(ctx context.Context) IntegrationTagFilterOutput
}

func (*IntegrationTagFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationTagFilter)(nil)).Elem()
}

func (i *IntegrationTagFilter) ToIntegrationTagFilterOutput() IntegrationTagFilterOutput {
	return i.ToIntegrationTagFilterOutputWithContext(context.Background())
}

func (i *IntegrationTagFilter) ToIntegrationTagFilterOutputWithContext(ctx context.Context) IntegrationTagFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTagFilterOutput)
}

func (i *IntegrationTagFilter) ToOutput(ctx context.Context) pulumix.Output[*IntegrationTagFilter] {
	return pulumix.Output[*IntegrationTagFilter]{
		OutputState: i.ToIntegrationTagFilterOutputWithContext(ctx).OutputState,
	}
}

// IntegrationTagFilterArrayInput is an input type that accepts IntegrationTagFilterArray and IntegrationTagFilterArrayOutput values.
// You can construct a concrete instance of `IntegrationTagFilterArrayInput` via:
//
//	IntegrationTagFilterArray{ IntegrationTagFilterArgs{...} }
type IntegrationTagFilterArrayInput interface {
	pulumi.Input

	ToIntegrationTagFilterArrayOutput() IntegrationTagFilterArrayOutput
	ToIntegrationTagFilterArrayOutputWithContext(context.Context) IntegrationTagFilterArrayOutput
}

type IntegrationTagFilterArray []IntegrationTagFilterInput

func (IntegrationTagFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationTagFilter)(nil)).Elem()
}

func (i IntegrationTagFilterArray) ToIntegrationTagFilterArrayOutput() IntegrationTagFilterArrayOutput {
	return i.ToIntegrationTagFilterArrayOutputWithContext(context.Background())
}

func (i IntegrationTagFilterArray) ToIntegrationTagFilterArrayOutputWithContext(ctx context.Context) IntegrationTagFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTagFilterArrayOutput)
}

func (i IntegrationTagFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]*IntegrationTagFilter] {
	return pulumix.Output[[]*IntegrationTagFilter]{
		OutputState: i.ToIntegrationTagFilterArrayOutputWithContext(ctx).OutputState,
	}
}

// IntegrationTagFilterMapInput is an input type that accepts IntegrationTagFilterMap and IntegrationTagFilterMapOutput values.
// You can construct a concrete instance of `IntegrationTagFilterMapInput` via:
//
//	IntegrationTagFilterMap{ "key": IntegrationTagFilterArgs{...} }
type IntegrationTagFilterMapInput interface {
	pulumi.Input

	ToIntegrationTagFilterMapOutput() IntegrationTagFilterMapOutput
	ToIntegrationTagFilterMapOutputWithContext(context.Context) IntegrationTagFilterMapOutput
}

type IntegrationTagFilterMap map[string]IntegrationTagFilterInput

func (IntegrationTagFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationTagFilter)(nil)).Elem()
}

func (i IntegrationTagFilterMap) ToIntegrationTagFilterMapOutput() IntegrationTagFilterMapOutput {
	return i.ToIntegrationTagFilterMapOutputWithContext(context.Background())
}

func (i IntegrationTagFilterMap) ToIntegrationTagFilterMapOutputWithContext(ctx context.Context) IntegrationTagFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTagFilterMapOutput)
}

func (i IntegrationTagFilterMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*IntegrationTagFilter] {
	return pulumix.Output[map[string]*IntegrationTagFilter]{
		OutputState: i.ToIntegrationTagFilterMapOutputWithContext(ctx).OutputState,
	}
}

type IntegrationTagFilterOutput struct{ *pulumi.OutputState }

func (IntegrationTagFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationTagFilter)(nil)).Elem()
}

func (o IntegrationTagFilterOutput) ToIntegrationTagFilterOutput() IntegrationTagFilterOutput {
	return o
}

func (o IntegrationTagFilterOutput) ToIntegrationTagFilterOutputWithContext(ctx context.Context) IntegrationTagFilterOutput {
	return o
}

func (o IntegrationTagFilterOutput) ToOutput(ctx context.Context) pulumix.Output[*IntegrationTagFilter] {
	return pulumix.Output[*IntegrationTagFilter]{
		OutputState: o.OutputState,
	}
}

// Your AWS Account ID without dashes. If your account is a GovCloud or China account, specify the `accessKeyId` here.
func (o IntegrationTagFilterOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationTagFilter) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The namespace associated with the tag filter entry. Valid values are `elb`, `applicationElb`, `sqs`, `rds`, `custom`, `networkElb`, `lambda`.
func (o IntegrationTagFilterOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationTagFilter) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// The tag filter string.
func (o IntegrationTagFilterOutput) TagFilterStr() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationTagFilter) pulumi.StringOutput { return v.TagFilterStr }).(pulumi.StringOutput)
}

type IntegrationTagFilterArrayOutput struct{ *pulumi.OutputState }

func (IntegrationTagFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationTagFilter)(nil)).Elem()
}

func (o IntegrationTagFilterArrayOutput) ToIntegrationTagFilterArrayOutput() IntegrationTagFilterArrayOutput {
	return o
}

func (o IntegrationTagFilterArrayOutput) ToIntegrationTagFilterArrayOutputWithContext(ctx context.Context) IntegrationTagFilterArrayOutput {
	return o
}

func (o IntegrationTagFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*IntegrationTagFilter] {
	return pulumix.Output[[]*IntegrationTagFilter]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationTagFilterArrayOutput) Index(i pulumi.IntInput) IntegrationTagFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationTagFilter {
		return vs[0].([]*IntegrationTagFilter)[vs[1].(int)]
	}).(IntegrationTagFilterOutput)
}

type IntegrationTagFilterMapOutput struct{ *pulumi.OutputState }

func (IntegrationTagFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationTagFilter)(nil)).Elem()
}

func (o IntegrationTagFilterMapOutput) ToIntegrationTagFilterMapOutput() IntegrationTagFilterMapOutput {
	return o
}

func (o IntegrationTagFilterMapOutput) ToIntegrationTagFilterMapOutputWithContext(ctx context.Context) IntegrationTagFilterMapOutput {
	return o
}

func (o IntegrationTagFilterMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*IntegrationTagFilter] {
	return pulumix.Output[map[string]*IntegrationTagFilter]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationTagFilterMapOutput) MapIndex(k pulumi.StringInput) IntegrationTagFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationTagFilter {
		return vs[0].(map[string]*IntegrationTagFilter)[vs[1].(string)]
	}).(IntegrationTagFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTagFilterInput)(nil)).Elem(), &IntegrationTagFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTagFilterArrayInput)(nil)).Elem(), IntegrationTagFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTagFilterMapInput)(nil)).Elem(), IntegrationTagFilterMap{})
	pulumi.RegisterOutputType(IntegrationTagFilterOutput{})
	pulumi.RegisterOutputType(IntegrationTagFilterArrayOutput{})
	pulumi.RegisterOutputType(IntegrationTagFilterMapOutput{})
}
