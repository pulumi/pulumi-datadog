// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog - Amazon Web Services integration EventBridge resource. This can be used to create and manage Event Sources for each Datadog integrated AWS account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/aws"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create new integration_aws_event_bridge resource
//			_, err := aws.NewIntegrationEventBridge(ctx, "foo", &aws.IntegrationEventBridgeArgs{
//				AccountId:          pulumi.String("123456789012"),
//				CreateEventBus:     pulumi.Bool(true),
//				EventGeneratorName: pulumi.String("app-alerts"),
//				Region:             pulumi.String("us-east-1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Amazon Web Service EventBridge integrations are imported using the Event Source name as listed for an integrated AWS account in Datadog
//
// ```sh
// $ pulumi import datadog:aws/integrationEventBridge:IntegrationEventBridge foo event-source-name-abc12345
// ```
type IntegrationEventBridge struct {
	pulumi.CustomResourceState

	// Your AWS Account ID without dashes.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// True if Datadog should create the event bus in addition to the event source. Requires the `events:CreateEventBus` permission. Defaults to `true`.
	CreateEventBus pulumi.BoolOutput `pulumi:"createEventBus"`
	// The given part of the event source name, which is then combined with an assigned suffix to form the full name.
	EventGeneratorName pulumi.StringOutput `pulumi:"eventGeneratorName"`
	// The event source's [AWS region](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints).
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewIntegrationEventBridge registers a new resource with the given unique name, arguments, and options.
func NewIntegrationEventBridge(ctx *pulumi.Context,
	name string, args *IntegrationEventBridgeArgs, opts ...pulumi.ResourceOption) (*IntegrationEventBridge, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.EventGeneratorName == nil {
		return nil, errors.New("invalid value for required argument 'EventGeneratorName'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationEventBridge
	err := ctx.RegisterResource("datadog:aws/integrationEventBridge:IntegrationEventBridge", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationEventBridge gets an existing IntegrationEventBridge resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationEventBridge(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationEventBridgeState, opts ...pulumi.ResourceOption) (*IntegrationEventBridge, error) {
	var resource IntegrationEventBridge
	err := ctx.ReadResource("datadog:aws/integrationEventBridge:IntegrationEventBridge", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationEventBridge resources.
type integrationEventBridgeState struct {
	// Your AWS Account ID without dashes.
	AccountId *string `pulumi:"accountId"`
	// True if Datadog should create the event bus in addition to the event source. Requires the `events:CreateEventBus` permission. Defaults to `true`.
	CreateEventBus *bool `pulumi:"createEventBus"`
	// The given part of the event source name, which is then combined with an assigned suffix to form the full name.
	EventGeneratorName *string `pulumi:"eventGeneratorName"`
	// The event source's [AWS region](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints).
	Region *string `pulumi:"region"`
}

type IntegrationEventBridgeState struct {
	// Your AWS Account ID without dashes.
	AccountId pulumi.StringPtrInput
	// True if Datadog should create the event bus in addition to the event source. Requires the `events:CreateEventBus` permission. Defaults to `true`.
	CreateEventBus pulumi.BoolPtrInput
	// The given part of the event source name, which is then combined with an assigned suffix to form the full name.
	EventGeneratorName pulumi.StringPtrInput
	// The event source's [AWS region](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints).
	Region pulumi.StringPtrInput
}

func (IntegrationEventBridgeState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationEventBridgeState)(nil)).Elem()
}

type integrationEventBridgeArgs struct {
	// Your AWS Account ID without dashes.
	AccountId string `pulumi:"accountId"`
	// True if Datadog should create the event bus in addition to the event source. Requires the `events:CreateEventBus` permission. Defaults to `true`.
	CreateEventBus *bool `pulumi:"createEventBus"`
	// The given part of the event source name, which is then combined with an assigned suffix to form the full name.
	EventGeneratorName string `pulumi:"eventGeneratorName"`
	// The event source's [AWS region](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints).
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a IntegrationEventBridge resource.
type IntegrationEventBridgeArgs struct {
	// Your AWS Account ID without dashes.
	AccountId pulumi.StringInput
	// True if Datadog should create the event bus in addition to the event source. Requires the `events:CreateEventBus` permission. Defaults to `true`.
	CreateEventBus pulumi.BoolPtrInput
	// The given part of the event source name, which is then combined with an assigned suffix to form the full name.
	EventGeneratorName pulumi.StringInput
	// The event source's [AWS region](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints).
	Region pulumi.StringInput
}

func (IntegrationEventBridgeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationEventBridgeArgs)(nil)).Elem()
}

type IntegrationEventBridgeInput interface {
	pulumi.Input

	ToIntegrationEventBridgeOutput() IntegrationEventBridgeOutput
	ToIntegrationEventBridgeOutputWithContext(ctx context.Context) IntegrationEventBridgeOutput
}

func (*IntegrationEventBridge) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationEventBridge)(nil)).Elem()
}

func (i *IntegrationEventBridge) ToIntegrationEventBridgeOutput() IntegrationEventBridgeOutput {
	return i.ToIntegrationEventBridgeOutputWithContext(context.Background())
}

func (i *IntegrationEventBridge) ToIntegrationEventBridgeOutputWithContext(ctx context.Context) IntegrationEventBridgeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationEventBridgeOutput)
}

// IntegrationEventBridgeArrayInput is an input type that accepts IntegrationEventBridgeArray and IntegrationEventBridgeArrayOutput values.
// You can construct a concrete instance of `IntegrationEventBridgeArrayInput` via:
//
//	IntegrationEventBridgeArray{ IntegrationEventBridgeArgs{...} }
type IntegrationEventBridgeArrayInput interface {
	pulumi.Input

	ToIntegrationEventBridgeArrayOutput() IntegrationEventBridgeArrayOutput
	ToIntegrationEventBridgeArrayOutputWithContext(context.Context) IntegrationEventBridgeArrayOutput
}

type IntegrationEventBridgeArray []IntegrationEventBridgeInput

func (IntegrationEventBridgeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationEventBridge)(nil)).Elem()
}

func (i IntegrationEventBridgeArray) ToIntegrationEventBridgeArrayOutput() IntegrationEventBridgeArrayOutput {
	return i.ToIntegrationEventBridgeArrayOutputWithContext(context.Background())
}

func (i IntegrationEventBridgeArray) ToIntegrationEventBridgeArrayOutputWithContext(ctx context.Context) IntegrationEventBridgeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationEventBridgeArrayOutput)
}

// IntegrationEventBridgeMapInput is an input type that accepts IntegrationEventBridgeMap and IntegrationEventBridgeMapOutput values.
// You can construct a concrete instance of `IntegrationEventBridgeMapInput` via:
//
//	IntegrationEventBridgeMap{ "key": IntegrationEventBridgeArgs{...} }
type IntegrationEventBridgeMapInput interface {
	pulumi.Input

	ToIntegrationEventBridgeMapOutput() IntegrationEventBridgeMapOutput
	ToIntegrationEventBridgeMapOutputWithContext(context.Context) IntegrationEventBridgeMapOutput
}

type IntegrationEventBridgeMap map[string]IntegrationEventBridgeInput

func (IntegrationEventBridgeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationEventBridge)(nil)).Elem()
}

func (i IntegrationEventBridgeMap) ToIntegrationEventBridgeMapOutput() IntegrationEventBridgeMapOutput {
	return i.ToIntegrationEventBridgeMapOutputWithContext(context.Background())
}

func (i IntegrationEventBridgeMap) ToIntegrationEventBridgeMapOutputWithContext(ctx context.Context) IntegrationEventBridgeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationEventBridgeMapOutput)
}

type IntegrationEventBridgeOutput struct{ *pulumi.OutputState }

func (IntegrationEventBridgeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationEventBridge)(nil)).Elem()
}

func (o IntegrationEventBridgeOutput) ToIntegrationEventBridgeOutput() IntegrationEventBridgeOutput {
	return o
}

func (o IntegrationEventBridgeOutput) ToIntegrationEventBridgeOutputWithContext(ctx context.Context) IntegrationEventBridgeOutput {
	return o
}

// Your AWS Account ID without dashes.
func (o IntegrationEventBridgeOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationEventBridge) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// True if Datadog should create the event bus in addition to the event source. Requires the `events:CreateEventBus` permission. Defaults to `true`.
func (o IntegrationEventBridgeOutput) CreateEventBus() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationEventBridge) pulumi.BoolOutput { return v.CreateEventBus }).(pulumi.BoolOutput)
}

// The given part of the event source name, which is then combined with an assigned suffix to form the full name.
func (o IntegrationEventBridgeOutput) EventGeneratorName() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationEventBridge) pulumi.StringOutput { return v.EventGeneratorName }).(pulumi.StringOutput)
}

// The event source's [AWS region](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints).
func (o IntegrationEventBridgeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationEventBridge) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type IntegrationEventBridgeArrayOutput struct{ *pulumi.OutputState }

func (IntegrationEventBridgeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationEventBridge)(nil)).Elem()
}

func (o IntegrationEventBridgeArrayOutput) ToIntegrationEventBridgeArrayOutput() IntegrationEventBridgeArrayOutput {
	return o
}

func (o IntegrationEventBridgeArrayOutput) ToIntegrationEventBridgeArrayOutputWithContext(ctx context.Context) IntegrationEventBridgeArrayOutput {
	return o
}

func (o IntegrationEventBridgeArrayOutput) Index(i pulumi.IntInput) IntegrationEventBridgeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationEventBridge {
		return vs[0].([]*IntegrationEventBridge)[vs[1].(int)]
	}).(IntegrationEventBridgeOutput)
}

type IntegrationEventBridgeMapOutput struct{ *pulumi.OutputState }

func (IntegrationEventBridgeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationEventBridge)(nil)).Elem()
}

func (o IntegrationEventBridgeMapOutput) ToIntegrationEventBridgeMapOutput() IntegrationEventBridgeMapOutput {
	return o
}

func (o IntegrationEventBridgeMapOutput) ToIntegrationEventBridgeMapOutputWithContext(ctx context.Context) IntegrationEventBridgeMapOutput {
	return o
}

func (o IntegrationEventBridgeMapOutput) MapIndex(k pulumi.StringInput) IntegrationEventBridgeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationEventBridge {
		return vs[0].(map[string]*IntegrationEventBridge)[vs[1].(string)]
	}).(IntegrationEventBridgeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationEventBridgeInput)(nil)).Elem(), &IntegrationEventBridge{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationEventBridgeArrayInput)(nil)).Elem(), IntegrationEventBridgeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationEventBridgeMapInput)(nil)).Elem(), IntegrationEventBridgeMap{})
	pulumi.RegisterOutputType(IntegrationEventBridgeOutput{})
	pulumi.RegisterOutputType(IntegrationEventBridgeArrayOutput{})
	pulumi.RegisterOutputType(IntegrationEventBridgeMapOutput{})
}
