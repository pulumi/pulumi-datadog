// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve metadata associated with a metric to use in other resources.
func LookupMetricMetadata(ctx *pulumi.Context, args *LookupMetricMetadataArgs, opts ...pulumi.InvokeOption) (*LookupMetricMetadataResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMetricMetadataResult
	err := ctx.Invoke("datadog:index/getMetricMetadata:getMetricMetadata", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMetricMetadata.
type LookupMetricMetadataArgs struct {
	// The metric for which to fetch metadata.
	MetricName string `pulumi:"metricName"`
}

// A collection of values returned by getMetricMetadata.
type LookupMetricMetadataResult struct {
	// The metric description.
	Description string `pulumi:"description"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// The metric integration.
	Integration string `pulumi:"integration"`
	// The metric for which to fetch metadata.
	MetricName string `pulumi:"metricName"`
	// The per unit of the metric.
	PerUnit string `pulumi:"perUnit"`
	// The metric short name.
	ShortName string `pulumi:"shortName"`
	// The metric statsd interval.
	StatsdInterval int `pulumi:"statsdInterval"`
	// The metric type.
	Type string `pulumi:"type"`
	// The metric unit.
	Unit string `pulumi:"unit"`
}

func LookupMetricMetadataOutput(ctx *pulumi.Context, args LookupMetricMetadataOutputArgs, opts ...pulumi.InvokeOption) LookupMetricMetadataResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMetricMetadataResultOutput, error) {
			args := v.(LookupMetricMetadataArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("datadog:index/getMetricMetadata:getMetricMetadata", args, LookupMetricMetadataResultOutput{}, options).(LookupMetricMetadataResultOutput), nil
		}).(LookupMetricMetadataResultOutput)
}

// A collection of arguments for invoking getMetricMetadata.
type LookupMetricMetadataOutputArgs struct {
	// The metric for which to fetch metadata.
	MetricName pulumi.StringInput `pulumi:"metricName"`
}

func (LookupMetricMetadataOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetricMetadataArgs)(nil)).Elem()
}

// A collection of values returned by getMetricMetadata.
type LookupMetricMetadataResultOutput struct{ *pulumi.OutputState }

func (LookupMetricMetadataResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetricMetadataResult)(nil)).Elem()
}

func (o LookupMetricMetadataResultOutput) ToLookupMetricMetadataResultOutput() LookupMetricMetadataResultOutput {
	return o
}

func (o LookupMetricMetadataResultOutput) ToLookupMetricMetadataResultOutputWithContext(ctx context.Context) LookupMetricMetadataResultOutput {
	return o
}

// The metric description.
func (o LookupMetricMetadataResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetricMetadataResult) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o LookupMetricMetadataResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetricMetadataResult) string { return v.Id }).(pulumi.StringOutput)
}

// The metric integration.
func (o LookupMetricMetadataResultOutput) Integration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetricMetadataResult) string { return v.Integration }).(pulumi.StringOutput)
}

// The metric for which to fetch metadata.
func (o LookupMetricMetadataResultOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetricMetadataResult) string { return v.MetricName }).(pulumi.StringOutput)
}

// The per unit of the metric.
func (o LookupMetricMetadataResultOutput) PerUnit() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetricMetadataResult) string { return v.PerUnit }).(pulumi.StringOutput)
}

// The metric short name.
func (o LookupMetricMetadataResultOutput) ShortName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetricMetadataResult) string { return v.ShortName }).(pulumi.StringOutput)
}

// The metric statsd interval.
func (o LookupMetricMetadataResultOutput) StatsdInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMetricMetadataResult) int { return v.StatsdInterval }).(pulumi.IntOutput)
}

// The metric type.
func (o LookupMetricMetadataResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetricMetadataResult) string { return v.Type }).(pulumi.StringOutput)
}

// The metric unit.
func (o LookupMetricMetadataResultOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetricMetadataResult) string { return v.Unit }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMetricMetadataResultOutput{})
}
