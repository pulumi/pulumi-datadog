// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides the Datadog IP allowlist resource. This can be used to manage the Datadog IP allowlist
type IpAllowlist struct {
	pulumi.CustomResourceState

	// Whether the IP Allowlist is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Set of objects containing an IP address or range of IP addresses in the allowlist and an accompanying note.
	Entries IpAllowlistEntryArrayOutput `pulumi:"entries"`
}

// NewIpAllowlist registers a new resource with the given unique name, arguments, and options.
func NewIpAllowlist(ctx *pulumi.Context,
	name string, args *IpAllowlistArgs, opts ...pulumi.ResourceOption) (*IpAllowlist, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpAllowlist
	err := ctx.RegisterResource("datadog:index/ipAllowlist:IpAllowlist", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpAllowlist gets an existing IpAllowlist resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpAllowlist(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpAllowlistState, opts ...pulumi.ResourceOption) (*IpAllowlist, error) {
	var resource IpAllowlist
	err := ctx.ReadResource("datadog:index/ipAllowlist:IpAllowlist", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpAllowlist resources.
type ipAllowlistState struct {
	// Whether the IP Allowlist is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Set of objects containing an IP address or range of IP addresses in the allowlist and an accompanying note.
	Entries []IpAllowlistEntry `pulumi:"entries"`
}

type IpAllowlistState struct {
	// Whether the IP Allowlist is enabled.
	Enabled pulumi.BoolPtrInput
	// Set of objects containing an IP address or range of IP addresses in the allowlist and an accompanying note.
	Entries IpAllowlistEntryArrayInput
}

func (IpAllowlistState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipAllowlistState)(nil)).Elem()
}

type ipAllowlistArgs struct {
	// Whether the IP Allowlist is enabled.
	Enabled bool `pulumi:"enabled"`
	// Set of objects containing an IP address or range of IP addresses in the allowlist and an accompanying note.
	Entries []IpAllowlistEntry `pulumi:"entries"`
}

// The set of arguments for constructing a IpAllowlist resource.
type IpAllowlistArgs struct {
	// Whether the IP Allowlist is enabled.
	Enabled pulumi.BoolInput
	// Set of objects containing an IP address or range of IP addresses in the allowlist and an accompanying note.
	Entries IpAllowlistEntryArrayInput
}

func (IpAllowlistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipAllowlistArgs)(nil)).Elem()
}

type IpAllowlistInput interface {
	pulumi.Input

	ToIpAllowlistOutput() IpAllowlistOutput
	ToIpAllowlistOutputWithContext(ctx context.Context) IpAllowlistOutput
}

func (*IpAllowlist) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAllowlist)(nil)).Elem()
}

func (i *IpAllowlist) ToIpAllowlistOutput() IpAllowlistOutput {
	return i.ToIpAllowlistOutputWithContext(context.Background())
}

func (i *IpAllowlist) ToIpAllowlistOutputWithContext(ctx context.Context) IpAllowlistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAllowlistOutput)
}

// IpAllowlistArrayInput is an input type that accepts IpAllowlistArray and IpAllowlistArrayOutput values.
// You can construct a concrete instance of `IpAllowlistArrayInput` via:
//
//	IpAllowlistArray{ IpAllowlistArgs{...} }
type IpAllowlistArrayInput interface {
	pulumi.Input

	ToIpAllowlistArrayOutput() IpAllowlistArrayOutput
	ToIpAllowlistArrayOutputWithContext(context.Context) IpAllowlistArrayOutput
}

type IpAllowlistArray []IpAllowlistInput

func (IpAllowlistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpAllowlist)(nil)).Elem()
}

func (i IpAllowlistArray) ToIpAllowlistArrayOutput() IpAllowlistArrayOutput {
	return i.ToIpAllowlistArrayOutputWithContext(context.Background())
}

func (i IpAllowlistArray) ToIpAllowlistArrayOutputWithContext(ctx context.Context) IpAllowlistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAllowlistArrayOutput)
}

// IpAllowlistMapInput is an input type that accepts IpAllowlistMap and IpAllowlistMapOutput values.
// You can construct a concrete instance of `IpAllowlistMapInput` via:
//
//	IpAllowlistMap{ "key": IpAllowlistArgs{...} }
type IpAllowlistMapInput interface {
	pulumi.Input

	ToIpAllowlistMapOutput() IpAllowlistMapOutput
	ToIpAllowlistMapOutputWithContext(context.Context) IpAllowlistMapOutput
}

type IpAllowlistMap map[string]IpAllowlistInput

func (IpAllowlistMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpAllowlist)(nil)).Elem()
}

func (i IpAllowlistMap) ToIpAllowlistMapOutput() IpAllowlistMapOutput {
	return i.ToIpAllowlistMapOutputWithContext(context.Background())
}

func (i IpAllowlistMap) ToIpAllowlistMapOutputWithContext(ctx context.Context) IpAllowlistMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAllowlistMapOutput)
}

type IpAllowlistOutput struct{ *pulumi.OutputState }

func (IpAllowlistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAllowlist)(nil)).Elem()
}

func (o IpAllowlistOutput) ToIpAllowlistOutput() IpAllowlistOutput {
	return o
}

func (o IpAllowlistOutput) ToIpAllowlistOutputWithContext(ctx context.Context) IpAllowlistOutput {
	return o
}

// Whether the IP Allowlist is enabled.
func (o IpAllowlistOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *IpAllowlist) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Set of objects containing an IP address or range of IP addresses in the allowlist and an accompanying note.
func (o IpAllowlistOutput) Entries() IpAllowlistEntryArrayOutput {
	return o.ApplyT(func(v *IpAllowlist) IpAllowlistEntryArrayOutput { return v.Entries }).(IpAllowlistEntryArrayOutput)
}

type IpAllowlistArrayOutput struct{ *pulumi.OutputState }

func (IpAllowlistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpAllowlist)(nil)).Elem()
}

func (o IpAllowlistArrayOutput) ToIpAllowlistArrayOutput() IpAllowlistArrayOutput {
	return o
}

func (o IpAllowlistArrayOutput) ToIpAllowlistArrayOutputWithContext(ctx context.Context) IpAllowlistArrayOutput {
	return o
}

func (o IpAllowlistArrayOutput) Index(i pulumi.IntInput) IpAllowlistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpAllowlist {
		return vs[0].([]*IpAllowlist)[vs[1].(int)]
	}).(IpAllowlistOutput)
}

type IpAllowlistMapOutput struct{ *pulumi.OutputState }

func (IpAllowlistMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpAllowlist)(nil)).Elem()
}

func (o IpAllowlistMapOutput) ToIpAllowlistMapOutput() IpAllowlistMapOutput {
	return o
}

func (o IpAllowlistMapOutput) ToIpAllowlistMapOutputWithContext(ctx context.Context) IpAllowlistMapOutput {
	return o
}

func (o IpAllowlistMapOutput) MapIndex(k pulumi.StringInput) IpAllowlistOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpAllowlist {
		return vs[0].(map[string]*IpAllowlist)[vs[1].(string)]
	}).(IpAllowlistOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpAllowlistInput)(nil)).Elem(), &IpAllowlist{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpAllowlistArrayInput)(nil)).Elem(), IpAllowlistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpAllowlistMapInput)(nil)).Elem(), IpAllowlistMap{})
	pulumi.RegisterOutputType(IpAllowlistOutput{})
	pulumi.RegisterOutputType(IpAllowlistArrayOutput{})
	pulumi.RegisterOutputType(IpAllowlistMapOutput{})
}
