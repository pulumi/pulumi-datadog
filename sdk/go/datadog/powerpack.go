// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog powerpack resource. This can be used to create and manage Datadog powerpacks.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Manage Datadog Powerpacks
//			_, err := datadog.NewPowerpack(ctx, "foo", &datadog.PowerpackArgs{
//				Description: pulumi.String("Created using the Datadog provider in terraform"),
//				LiveSpan:    pulumi.String("4h"),
//				Layout: &datadog.PowerpackLayoutArgs{
//					Height: pulumi.Int(10),
//					Width:  pulumi.Int(3),
//					X:      pulumi.Int(1),
//					Y:      pulumi.Int(0),
//				},
//				TemplateVariables: datadog.PowerpackTemplateVariableArray{
//					&datadog.PowerpackTemplateVariableArgs{
//						Defaults: pulumi.StringArray{
//							pulumi.String("defaults"),
//						},
//						Name: pulumi.String("datacenter"),
//					},
//				},
//				Widgets: datadog.PowerpackWidgetArray{
//					&datadog.PowerpackWidgetArgs{
//						EventStreamDefinition: &datadog.PowerpackWidgetEventStreamDefinitionArgs{
//							Query:      pulumi.String("*"),
//							EventSize:  pulumi.String("l"),
//							Title:      pulumi.String("Widget Title"),
//							TitleSize:  pulumi.String("16"),
//							TitleAlign: pulumi.String("right"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import datadog:index/powerpack:Powerpack foo 11111111-2222-3333-4444-555555555555
// ```
type Powerpack struct {
	pulumi.CustomResourceState

	// The description of the powerpack.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The layout of the powerpack on a free-form dashboard.
	Layout PowerpackLayoutOutput `pulumi:"layout"`
	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `weekToDate`, `monthToDate`, `1y`, `alert`.
	LiveSpan pulumi.StringPtrOutput `pulumi:"liveSpan"`
	// The name for the powerpack.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Whether or not title should be displayed in the powerpack.
	ShowTitle pulumi.BoolPtrOutput `pulumi:"showTitle"`
	// List of tags to identify this powerpack.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The list of template variables for this powerpack.
	TemplateVariables PowerpackTemplateVariableArrayOutput `pulumi:"templateVariables"`
	// The list of widgets to display in the powerpack.
	Widgets PowerpackWidgetArrayOutput `pulumi:"widgets"`
}

// NewPowerpack registers a new resource with the given unique name, arguments, and options.
func NewPowerpack(ctx *pulumi.Context,
	name string, args *PowerpackArgs, opts ...pulumi.ResourceOption) (*Powerpack, error) {
	if args == nil {
		args = &PowerpackArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Powerpack
	err := ctx.RegisterResource("datadog:index/powerpack:Powerpack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPowerpack gets an existing Powerpack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPowerpack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PowerpackState, opts ...pulumi.ResourceOption) (*Powerpack, error) {
	var resource Powerpack
	err := ctx.ReadResource("datadog:index/powerpack:Powerpack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Powerpack resources.
type powerpackState struct {
	// The description of the powerpack.
	Description *string `pulumi:"description"`
	// The layout of the powerpack on a free-form dashboard.
	Layout *PowerpackLayout `pulumi:"layout"`
	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `weekToDate`, `monthToDate`, `1y`, `alert`.
	LiveSpan *string `pulumi:"liveSpan"`
	// The name for the powerpack.
	Name *string `pulumi:"name"`
	// Whether or not title should be displayed in the powerpack.
	ShowTitle *bool `pulumi:"showTitle"`
	// List of tags to identify this powerpack.
	Tags []string `pulumi:"tags"`
	// The list of template variables for this powerpack.
	TemplateVariables []PowerpackTemplateVariable `pulumi:"templateVariables"`
	// The list of widgets to display in the powerpack.
	Widgets []PowerpackWidget `pulumi:"widgets"`
}

type PowerpackState struct {
	// The description of the powerpack.
	Description pulumi.StringPtrInput
	// The layout of the powerpack on a free-form dashboard.
	Layout PowerpackLayoutPtrInput
	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `weekToDate`, `monthToDate`, `1y`, `alert`.
	LiveSpan pulumi.StringPtrInput
	// The name for the powerpack.
	Name pulumi.StringPtrInput
	// Whether or not title should be displayed in the powerpack.
	ShowTitle pulumi.BoolPtrInput
	// List of tags to identify this powerpack.
	Tags pulumi.StringArrayInput
	// The list of template variables for this powerpack.
	TemplateVariables PowerpackTemplateVariableArrayInput
	// The list of widgets to display in the powerpack.
	Widgets PowerpackWidgetArrayInput
}

func (PowerpackState) ElementType() reflect.Type {
	return reflect.TypeOf((*powerpackState)(nil)).Elem()
}

type powerpackArgs struct {
	// The description of the powerpack.
	Description *string `pulumi:"description"`
	// The layout of the powerpack on a free-form dashboard.
	Layout *PowerpackLayout `pulumi:"layout"`
	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `weekToDate`, `monthToDate`, `1y`, `alert`.
	LiveSpan *string `pulumi:"liveSpan"`
	// The name for the powerpack.
	Name *string `pulumi:"name"`
	// Whether or not title should be displayed in the powerpack.
	ShowTitle *bool `pulumi:"showTitle"`
	// List of tags to identify this powerpack.
	Tags []string `pulumi:"tags"`
	// The list of template variables for this powerpack.
	TemplateVariables []PowerpackTemplateVariable `pulumi:"templateVariables"`
	// The list of widgets to display in the powerpack.
	Widgets []PowerpackWidget `pulumi:"widgets"`
}

// The set of arguments for constructing a Powerpack resource.
type PowerpackArgs struct {
	// The description of the powerpack.
	Description pulumi.StringPtrInput
	// The layout of the powerpack on a free-form dashboard.
	Layout PowerpackLayoutPtrInput
	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `weekToDate`, `monthToDate`, `1y`, `alert`.
	LiveSpan pulumi.StringPtrInput
	// The name for the powerpack.
	Name pulumi.StringPtrInput
	// Whether or not title should be displayed in the powerpack.
	ShowTitle pulumi.BoolPtrInput
	// List of tags to identify this powerpack.
	Tags pulumi.StringArrayInput
	// The list of template variables for this powerpack.
	TemplateVariables PowerpackTemplateVariableArrayInput
	// The list of widgets to display in the powerpack.
	Widgets PowerpackWidgetArrayInput
}

func (PowerpackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*powerpackArgs)(nil)).Elem()
}

type PowerpackInput interface {
	pulumi.Input

	ToPowerpackOutput() PowerpackOutput
	ToPowerpackOutputWithContext(ctx context.Context) PowerpackOutput
}

func (*Powerpack) ElementType() reflect.Type {
	return reflect.TypeOf((**Powerpack)(nil)).Elem()
}

func (i *Powerpack) ToPowerpackOutput() PowerpackOutput {
	return i.ToPowerpackOutputWithContext(context.Background())
}

func (i *Powerpack) ToPowerpackOutputWithContext(ctx context.Context) PowerpackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerpackOutput)
}

// PowerpackArrayInput is an input type that accepts PowerpackArray and PowerpackArrayOutput values.
// You can construct a concrete instance of `PowerpackArrayInput` via:
//
//	PowerpackArray{ PowerpackArgs{...} }
type PowerpackArrayInput interface {
	pulumi.Input

	ToPowerpackArrayOutput() PowerpackArrayOutput
	ToPowerpackArrayOutputWithContext(context.Context) PowerpackArrayOutput
}

type PowerpackArray []PowerpackInput

func (PowerpackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Powerpack)(nil)).Elem()
}

func (i PowerpackArray) ToPowerpackArrayOutput() PowerpackArrayOutput {
	return i.ToPowerpackArrayOutputWithContext(context.Background())
}

func (i PowerpackArray) ToPowerpackArrayOutputWithContext(ctx context.Context) PowerpackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerpackArrayOutput)
}

// PowerpackMapInput is an input type that accepts PowerpackMap and PowerpackMapOutput values.
// You can construct a concrete instance of `PowerpackMapInput` via:
//
//	PowerpackMap{ "key": PowerpackArgs{...} }
type PowerpackMapInput interface {
	pulumi.Input

	ToPowerpackMapOutput() PowerpackMapOutput
	ToPowerpackMapOutputWithContext(context.Context) PowerpackMapOutput
}

type PowerpackMap map[string]PowerpackInput

func (PowerpackMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Powerpack)(nil)).Elem()
}

func (i PowerpackMap) ToPowerpackMapOutput() PowerpackMapOutput {
	return i.ToPowerpackMapOutputWithContext(context.Background())
}

func (i PowerpackMap) ToPowerpackMapOutputWithContext(ctx context.Context) PowerpackMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerpackMapOutput)
}

type PowerpackOutput struct{ *pulumi.OutputState }

func (PowerpackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Powerpack)(nil)).Elem()
}

func (o PowerpackOutput) ToPowerpackOutput() PowerpackOutput {
	return o
}

func (o PowerpackOutput) ToPowerpackOutputWithContext(ctx context.Context) PowerpackOutput {
	return o
}

// The description of the powerpack.
func (o PowerpackOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Powerpack) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The layout of the powerpack on a free-form dashboard.
func (o PowerpackOutput) Layout() PowerpackLayoutOutput {
	return o.ApplyT(func(v *Powerpack) PowerpackLayoutOutput { return v.Layout }).(PowerpackLayoutOutput)
}

// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `weekToDate`, `monthToDate`, `1y`, `alert`.
func (o PowerpackOutput) LiveSpan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Powerpack) pulumi.StringPtrOutput { return v.LiveSpan }).(pulumi.StringPtrOutput)
}

// The name for the powerpack.
func (o PowerpackOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Powerpack) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Whether or not title should be displayed in the powerpack.
func (o PowerpackOutput) ShowTitle() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Powerpack) pulumi.BoolPtrOutput { return v.ShowTitle }).(pulumi.BoolPtrOutput)
}

// List of tags to identify this powerpack.
func (o PowerpackOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Powerpack) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The list of template variables for this powerpack.
func (o PowerpackOutput) TemplateVariables() PowerpackTemplateVariableArrayOutput {
	return o.ApplyT(func(v *Powerpack) PowerpackTemplateVariableArrayOutput { return v.TemplateVariables }).(PowerpackTemplateVariableArrayOutput)
}

// The list of widgets to display in the powerpack.
func (o PowerpackOutput) Widgets() PowerpackWidgetArrayOutput {
	return o.ApplyT(func(v *Powerpack) PowerpackWidgetArrayOutput { return v.Widgets }).(PowerpackWidgetArrayOutput)
}

type PowerpackArrayOutput struct{ *pulumi.OutputState }

func (PowerpackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Powerpack)(nil)).Elem()
}

func (o PowerpackArrayOutput) ToPowerpackArrayOutput() PowerpackArrayOutput {
	return o
}

func (o PowerpackArrayOutput) ToPowerpackArrayOutputWithContext(ctx context.Context) PowerpackArrayOutput {
	return o
}

func (o PowerpackArrayOutput) Index(i pulumi.IntInput) PowerpackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Powerpack {
		return vs[0].([]*Powerpack)[vs[1].(int)]
	}).(PowerpackOutput)
}

type PowerpackMapOutput struct{ *pulumi.OutputState }

func (PowerpackMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Powerpack)(nil)).Elem()
}

func (o PowerpackMapOutput) ToPowerpackMapOutput() PowerpackMapOutput {
	return o
}

func (o PowerpackMapOutput) ToPowerpackMapOutputWithContext(ctx context.Context) PowerpackMapOutput {
	return o
}

func (o PowerpackMapOutput) MapIndex(k pulumi.StringInput) PowerpackOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Powerpack {
		return vs[0].(map[string]*Powerpack)[vs[1].(string)]
	}).(PowerpackOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PowerpackInput)(nil)).Elem(), &Powerpack{})
	pulumi.RegisterInputType(reflect.TypeOf((*PowerpackArrayInput)(nil)).Elem(), PowerpackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PowerpackMapInput)(nil)).Elem(), PowerpackMap{})
	pulumi.RegisterOutputType(PowerpackOutput{})
	pulumi.RegisterOutputType(PowerpackArrayOutput{})
	pulumi.RegisterOutputType(PowerpackMapOutput{})
}
