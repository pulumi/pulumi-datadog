// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog Tag Pipeline Ruleset resource.
//
// ## Example Usage
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import datadog:index/tagPipelineRuleset:TagPipelineRuleset example "your-ruleset-id-here"
// ```
type TagPipelineRuleset struct {
	pulumi.CustomResourceState

	// Whether the ruleset is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The name of the ruleset.
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the ruleset in the pipeline.
	Position pulumi.IntOutput `pulumi:"position"`
	// The rules in the ruleset.
	Rules TagPipelineRulesetRuleArrayOutput `pulumi:"rules"`
	// The version of the ruleset.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewTagPipelineRuleset registers a new resource with the given unique name, arguments, and options.
func NewTagPipelineRuleset(ctx *pulumi.Context,
	name string, args *TagPipelineRulesetArgs, opts ...pulumi.ResourceOption) (*TagPipelineRuleset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TagPipelineRuleset
	err := ctx.RegisterResource("datadog:index/tagPipelineRuleset:TagPipelineRuleset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagPipelineRuleset gets an existing TagPipelineRuleset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagPipelineRuleset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagPipelineRulesetState, opts ...pulumi.ResourceOption) (*TagPipelineRuleset, error) {
	var resource TagPipelineRuleset
	err := ctx.ReadResource("datadog:index/tagPipelineRuleset:TagPipelineRuleset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagPipelineRuleset resources.
type tagPipelineRulesetState struct {
	// Whether the ruleset is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The name of the ruleset.
	Name *string `pulumi:"name"`
	// The position of the ruleset in the pipeline.
	Position *int `pulumi:"position"`
	// The rules in the ruleset.
	Rules []TagPipelineRulesetRule `pulumi:"rules"`
	// The version of the ruleset.
	Version *int `pulumi:"version"`
}

type TagPipelineRulesetState struct {
	// Whether the ruleset is enabled.
	Enabled pulumi.BoolPtrInput
	// The name of the ruleset.
	Name pulumi.StringPtrInput
	// The position of the ruleset in the pipeline.
	Position pulumi.IntPtrInput
	// The rules in the ruleset.
	Rules TagPipelineRulesetRuleArrayInput
	// The version of the ruleset.
	Version pulumi.IntPtrInput
}

func (TagPipelineRulesetState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagPipelineRulesetState)(nil)).Elem()
}

type tagPipelineRulesetArgs struct {
	// Whether the ruleset is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The name of the ruleset.
	Name string `pulumi:"name"`
	// The rules in the ruleset.
	Rules []TagPipelineRulesetRule `pulumi:"rules"`
}

// The set of arguments for constructing a TagPipelineRuleset resource.
type TagPipelineRulesetArgs struct {
	// Whether the ruleset is enabled.
	Enabled pulumi.BoolPtrInput
	// The name of the ruleset.
	Name pulumi.StringInput
	// The rules in the ruleset.
	Rules TagPipelineRulesetRuleArrayInput
}

func (TagPipelineRulesetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagPipelineRulesetArgs)(nil)).Elem()
}

type TagPipelineRulesetInput interface {
	pulumi.Input

	ToTagPipelineRulesetOutput() TagPipelineRulesetOutput
	ToTagPipelineRulesetOutputWithContext(ctx context.Context) TagPipelineRulesetOutput
}

func (*TagPipelineRuleset) ElementType() reflect.Type {
	return reflect.TypeOf((**TagPipelineRuleset)(nil)).Elem()
}

func (i *TagPipelineRuleset) ToTagPipelineRulesetOutput() TagPipelineRulesetOutput {
	return i.ToTagPipelineRulesetOutputWithContext(context.Background())
}

func (i *TagPipelineRuleset) ToTagPipelineRulesetOutputWithContext(ctx context.Context) TagPipelineRulesetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagPipelineRulesetOutput)
}

// TagPipelineRulesetArrayInput is an input type that accepts TagPipelineRulesetArray and TagPipelineRulesetArrayOutput values.
// You can construct a concrete instance of `TagPipelineRulesetArrayInput` via:
//
//	TagPipelineRulesetArray{ TagPipelineRulesetArgs{...} }
type TagPipelineRulesetArrayInput interface {
	pulumi.Input

	ToTagPipelineRulesetArrayOutput() TagPipelineRulesetArrayOutput
	ToTagPipelineRulesetArrayOutputWithContext(context.Context) TagPipelineRulesetArrayOutput
}

type TagPipelineRulesetArray []TagPipelineRulesetInput

func (TagPipelineRulesetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagPipelineRuleset)(nil)).Elem()
}

func (i TagPipelineRulesetArray) ToTagPipelineRulesetArrayOutput() TagPipelineRulesetArrayOutput {
	return i.ToTagPipelineRulesetArrayOutputWithContext(context.Background())
}

func (i TagPipelineRulesetArray) ToTagPipelineRulesetArrayOutputWithContext(ctx context.Context) TagPipelineRulesetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagPipelineRulesetArrayOutput)
}

// TagPipelineRulesetMapInput is an input type that accepts TagPipelineRulesetMap and TagPipelineRulesetMapOutput values.
// You can construct a concrete instance of `TagPipelineRulesetMapInput` via:
//
//	TagPipelineRulesetMap{ "key": TagPipelineRulesetArgs{...} }
type TagPipelineRulesetMapInput interface {
	pulumi.Input

	ToTagPipelineRulesetMapOutput() TagPipelineRulesetMapOutput
	ToTagPipelineRulesetMapOutputWithContext(context.Context) TagPipelineRulesetMapOutput
}

type TagPipelineRulesetMap map[string]TagPipelineRulesetInput

func (TagPipelineRulesetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagPipelineRuleset)(nil)).Elem()
}

func (i TagPipelineRulesetMap) ToTagPipelineRulesetMapOutput() TagPipelineRulesetMapOutput {
	return i.ToTagPipelineRulesetMapOutputWithContext(context.Background())
}

func (i TagPipelineRulesetMap) ToTagPipelineRulesetMapOutputWithContext(ctx context.Context) TagPipelineRulesetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagPipelineRulesetMapOutput)
}

type TagPipelineRulesetOutput struct{ *pulumi.OutputState }

func (TagPipelineRulesetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagPipelineRuleset)(nil)).Elem()
}

func (o TagPipelineRulesetOutput) ToTagPipelineRulesetOutput() TagPipelineRulesetOutput {
	return o
}

func (o TagPipelineRulesetOutput) ToTagPipelineRulesetOutputWithContext(ctx context.Context) TagPipelineRulesetOutput {
	return o
}

// Whether the ruleset is enabled.
func (o TagPipelineRulesetOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *TagPipelineRuleset) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The name of the ruleset.
func (o TagPipelineRulesetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TagPipelineRuleset) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the ruleset in the pipeline.
func (o TagPipelineRulesetOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *TagPipelineRuleset) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// The rules in the ruleset.
func (o TagPipelineRulesetOutput) Rules() TagPipelineRulesetRuleArrayOutput {
	return o.ApplyT(func(v *TagPipelineRuleset) TagPipelineRulesetRuleArrayOutput { return v.Rules }).(TagPipelineRulesetRuleArrayOutput)
}

// The version of the ruleset.
func (o TagPipelineRulesetOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *TagPipelineRuleset) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type TagPipelineRulesetArrayOutput struct{ *pulumi.OutputState }

func (TagPipelineRulesetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagPipelineRuleset)(nil)).Elem()
}

func (o TagPipelineRulesetArrayOutput) ToTagPipelineRulesetArrayOutput() TagPipelineRulesetArrayOutput {
	return o
}

func (o TagPipelineRulesetArrayOutput) ToTagPipelineRulesetArrayOutputWithContext(ctx context.Context) TagPipelineRulesetArrayOutput {
	return o
}

func (o TagPipelineRulesetArrayOutput) Index(i pulumi.IntInput) TagPipelineRulesetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TagPipelineRuleset {
		return vs[0].([]*TagPipelineRuleset)[vs[1].(int)]
	}).(TagPipelineRulesetOutput)
}

type TagPipelineRulesetMapOutput struct{ *pulumi.OutputState }

func (TagPipelineRulesetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagPipelineRuleset)(nil)).Elem()
}

func (o TagPipelineRulesetMapOutput) ToTagPipelineRulesetMapOutput() TagPipelineRulesetMapOutput {
	return o
}

func (o TagPipelineRulesetMapOutput) ToTagPipelineRulesetMapOutputWithContext(ctx context.Context) TagPipelineRulesetMapOutput {
	return o
}

func (o TagPipelineRulesetMapOutput) MapIndex(k pulumi.StringInput) TagPipelineRulesetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TagPipelineRuleset {
		return vs[0].(map[string]*TagPipelineRuleset)[vs[1].(string)]
	}).(TagPipelineRulesetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TagPipelineRulesetInput)(nil)).Elem(), &TagPipelineRuleset{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagPipelineRulesetArrayInput)(nil)).Elem(), TagPipelineRulesetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagPipelineRulesetMapInput)(nil)).Elem(), TagPipelineRulesetMap{})
	pulumi.RegisterOutputType(TagPipelineRulesetOutput{})
	pulumi.RegisterOutputType(TagPipelineRulesetArrayOutput{})
	pulumi.RegisterOutputType(TagPipelineRulesetMapOutput{})
}
