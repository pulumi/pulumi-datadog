// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.NewLogsIndex(ctx, "sampleIndex", &datadog.LogsIndexArgs{
//				DailyLimit: pulumi.Int(200000),
//				ExclusionFilters: datadog.LogsIndexExclusionFilterArray{
//					&datadog.LogsIndexExclusionFilterArgs{
//						Filters: datadog.LogsIndexExclusionFilterFilterArray{
//							&datadog.LogsIndexExclusionFilterFilterArgs{
//								Query:      pulumi.String("app:coredns"),
//								SampleRate: pulumi.Float64(0.97),
//							},
//						},
//						IsEnabled: pulumi.Bool(true),
//						Name:      pulumi.String("Filter coredns logs"),
//					},
//					&datadog.LogsIndexExclusionFilterArgs{
//						Filters: datadog.LogsIndexExclusionFilterFilterArray{
//							&datadog.LogsIndexExclusionFilterFilterArgs{
//								Query:      pulumi.String("service:kube_apiserver"),
//								SampleRate: pulumi.Float64(1),
//							},
//						},
//						IsEnabled: pulumi.Bool(true),
//						Name:      pulumi.String("Kubernetes apiserver"),
//					},
//				},
//				Filters: datadog.LogsIndexFilterArray{
//					&datadog.LogsIndexFilterArgs{
//						Query: pulumi.String("*"),
//					},
//				},
//				Name:          pulumi.String("your index"),
//				RetentionDays: pulumi.Int(7),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import datadog:index/logsIndex:LogsIndex name> <indexName>
//
// ```
type LogsIndex struct {
	pulumi.CustomResourceState

	// The number of log events you can send in this index per day before you are rate-limited.
	DailyLimit pulumi.IntPtrOutput `pulumi:"dailyLimit"`
	// If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index's current dailyLimit is maintained.
	DisableDailyLimit pulumi.BoolOutput `pulumi:"disableDailyLimit"`
	// List of exclusion filters.
	ExclusionFilters LogsIndexExclusionFilterArrayOutput `pulumi:"exclusionFilters"`
	// Logs filter
	Filters LogsIndexFilterArrayOutput `pulumi:"filters"`
	// The name of the exclusion filter.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of days before logs are deleted from this index.
	RetentionDays pulumi.IntOutput `pulumi:"retentionDays"`
}

// NewLogsIndex registers a new resource with the given unique name, arguments, and options.
func NewLogsIndex(ctx *pulumi.Context,
	name string, args *LogsIndexArgs, opts ...pulumi.ResourceOption) (*LogsIndex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filters == nil {
		return nil, errors.New("invalid value for required argument 'Filters'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogsIndex
	err := ctx.RegisterResource("datadog:index/logsIndex:LogsIndex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogsIndex gets an existing LogsIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogsIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogsIndexState, opts ...pulumi.ResourceOption) (*LogsIndex, error) {
	var resource LogsIndex
	err := ctx.ReadResource("datadog:index/logsIndex:LogsIndex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogsIndex resources.
type logsIndexState struct {
	// The number of log events you can send in this index per day before you are rate-limited.
	DailyLimit *int `pulumi:"dailyLimit"`
	// If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index's current dailyLimit is maintained.
	DisableDailyLimit *bool `pulumi:"disableDailyLimit"`
	// List of exclusion filters.
	ExclusionFilters []LogsIndexExclusionFilter `pulumi:"exclusionFilters"`
	// Logs filter
	Filters []LogsIndexFilter `pulumi:"filters"`
	// The name of the exclusion filter.
	Name *string `pulumi:"name"`
	// The number of days before logs are deleted from this index.
	RetentionDays *int `pulumi:"retentionDays"`
}

type LogsIndexState struct {
	// The number of log events you can send in this index per day before you are rate-limited.
	DailyLimit pulumi.IntPtrInput
	// If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index's current dailyLimit is maintained.
	DisableDailyLimit pulumi.BoolPtrInput
	// List of exclusion filters.
	ExclusionFilters LogsIndexExclusionFilterArrayInput
	// Logs filter
	Filters LogsIndexFilterArrayInput
	// The name of the exclusion filter.
	Name pulumi.StringPtrInput
	// The number of days before logs are deleted from this index.
	RetentionDays pulumi.IntPtrInput
}

func (LogsIndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*logsIndexState)(nil)).Elem()
}

type logsIndexArgs struct {
	// The number of log events you can send in this index per day before you are rate-limited.
	DailyLimit *int `pulumi:"dailyLimit"`
	// If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index's current dailyLimit is maintained.
	DisableDailyLimit *bool `pulumi:"disableDailyLimit"`
	// List of exclusion filters.
	ExclusionFilters []LogsIndexExclusionFilter `pulumi:"exclusionFilters"`
	// Logs filter
	Filters []LogsIndexFilter `pulumi:"filters"`
	// The name of the exclusion filter.
	Name string `pulumi:"name"`
	// The number of days before logs are deleted from this index.
	RetentionDays *int `pulumi:"retentionDays"`
}

// The set of arguments for constructing a LogsIndex resource.
type LogsIndexArgs struct {
	// The number of log events you can send in this index per day before you are rate-limited.
	DailyLimit pulumi.IntPtrInput
	// If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index's current dailyLimit is maintained.
	DisableDailyLimit pulumi.BoolPtrInput
	// List of exclusion filters.
	ExclusionFilters LogsIndexExclusionFilterArrayInput
	// Logs filter
	Filters LogsIndexFilterArrayInput
	// The name of the exclusion filter.
	Name pulumi.StringInput
	// The number of days before logs are deleted from this index.
	RetentionDays pulumi.IntPtrInput
}

func (LogsIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logsIndexArgs)(nil)).Elem()
}

type LogsIndexInput interface {
	pulumi.Input

	ToLogsIndexOutput() LogsIndexOutput
	ToLogsIndexOutputWithContext(ctx context.Context) LogsIndexOutput
}

func (*LogsIndex) ElementType() reflect.Type {
	return reflect.TypeOf((**LogsIndex)(nil)).Elem()
}

func (i *LogsIndex) ToLogsIndexOutput() LogsIndexOutput {
	return i.ToLogsIndexOutputWithContext(context.Background())
}

func (i *LogsIndex) ToLogsIndexOutputWithContext(ctx context.Context) LogsIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsIndexOutput)
}

// LogsIndexArrayInput is an input type that accepts LogsIndexArray and LogsIndexArrayOutput values.
// You can construct a concrete instance of `LogsIndexArrayInput` via:
//
//	LogsIndexArray{ LogsIndexArgs{...} }
type LogsIndexArrayInput interface {
	pulumi.Input

	ToLogsIndexArrayOutput() LogsIndexArrayOutput
	ToLogsIndexArrayOutputWithContext(context.Context) LogsIndexArrayOutput
}

type LogsIndexArray []LogsIndexInput

func (LogsIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogsIndex)(nil)).Elem()
}

func (i LogsIndexArray) ToLogsIndexArrayOutput() LogsIndexArrayOutput {
	return i.ToLogsIndexArrayOutputWithContext(context.Background())
}

func (i LogsIndexArray) ToLogsIndexArrayOutputWithContext(ctx context.Context) LogsIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsIndexArrayOutput)
}

// LogsIndexMapInput is an input type that accepts LogsIndexMap and LogsIndexMapOutput values.
// You can construct a concrete instance of `LogsIndexMapInput` via:
//
//	LogsIndexMap{ "key": LogsIndexArgs{...} }
type LogsIndexMapInput interface {
	pulumi.Input

	ToLogsIndexMapOutput() LogsIndexMapOutput
	ToLogsIndexMapOutputWithContext(context.Context) LogsIndexMapOutput
}

type LogsIndexMap map[string]LogsIndexInput

func (LogsIndexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogsIndex)(nil)).Elem()
}

func (i LogsIndexMap) ToLogsIndexMapOutput() LogsIndexMapOutput {
	return i.ToLogsIndexMapOutputWithContext(context.Background())
}

func (i LogsIndexMap) ToLogsIndexMapOutputWithContext(ctx context.Context) LogsIndexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsIndexMapOutput)
}

type LogsIndexOutput struct{ *pulumi.OutputState }

func (LogsIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogsIndex)(nil)).Elem()
}

func (o LogsIndexOutput) ToLogsIndexOutput() LogsIndexOutput {
	return o
}

func (o LogsIndexOutput) ToLogsIndexOutputWithContext(ctx context.Context) LogsIndexOutput {
	return o
}

// The number of log events you can send in this index per day before you are rate-limited.
func (o LogsIndexOutput) DailyLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogsIndex) pulumi.IntPtrOutput { return v.DailyLimit }).(pulumi.IntPtrOutput)
}

// If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index's current dailyLimit is maintained.
func (o LogsIndexOutput) DisableDailyLimit() pulumi.BoolOutput {
	return o.ApplyT(func(v *LogsIndex) pulumi.BoolOutput { return v.DisableDailyLimit }).(pulumi.BoolOutput)
}

// List of exclusion filters.
func (o LogsIndexOutput) ExclusionFilters() LogsIndexExclusionFilterArrayOutput {
	return o.ApplyT(func(v *LogsIndex) LogsIndexExclusionFilterArrayOutput { return v.ExclusionFilters }).(LogsIndexExclusionFilterArrayOutput)
}

// Logs filter
func (o LogsIndexOutput) Filters() LogsIndexFilterArrayOutput {
	return o.ApplyT(func(v *LogsIndex) LogsIndexFilterArrayOutput { return v.Filters }).(LogsIndexFilterArrayOutput)
}

// The name of the exclusion filter.
func (o LogsIndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogsIndex) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of days before logs are deleted from this index.
func (o LogsIndexOutput) RetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v *LogsIndex) pulumi.IntOutput { return v.RetentionDays }).(pulumi.IntOutput)
}

type LogsIndexArrayOutput struct{ *pulumi.OutputState }

func (LogsIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogsIndex)(nil)).Elem()
}

func (o LogsIndexArrayOutput) ToLogsIndexArrayOutput() LogsIndexArrayOutput {
	return o
}

func (o LogsIndexArrayOutput) ToLogsIndexArrayOutputWithContext(ctx context.Context) LogsIndexArrayOutput {
	return o
}

func (o LogsIndexArrayOutput) Index(i pulumi.IntInput) LogsIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogsIndex {
		return vs[0].([]*LogsIndex)[vs[1].(int)]
	}).(LogsIndexOutput)
}

type LogsIndexMapOutput struct{ *pulumi.OutputState }

func (LogsIndexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogsIndex)(nil)).Elem()
}

func (o LogsIndexMapOutput) ToLogsIndexMapOutput() LogsIndexMapOutput {
	return o
}

func (o LogsIndexMapOutput) ToLogsIndexMapOutputWithContext(ctx context.Context) LogsIndexMapOutput {
	return o
}

func (o LogsIndexMapOutput) MapIndex(k pulumi.StringInput) LogsIndexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogsIndex {
		return vs[0].(map[string]*LogsIndex)[vs[1].(string)]
	}).(LogsIndexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogsIndexInput)(nil)).Elem(), &LogsIndex{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogsIndexArrayInput)(nil)).Elem(), LogsIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogsIndexMapInput)(nil)).Elem(), LogsIndexMap{})
	pulumi.RegisterOutputType(LogsIndexOutput{})
	pulumi.RegisterOutputType(LogsIndexArrayOutput{})
	pulumi.RegisterOutputType(LogsIndexMapOutput{})
}
