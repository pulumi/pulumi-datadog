// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog Observability Pipeline resource. Observability Pipelines allows you to collect and process logs within your own infrastructure, and then route them to downstream integrations.
type ObservabilityPipeline struct {
	pulumi.CustomResourceState

	// Configuration for the pipeline.
	Config ObservabilityPipelineConfigPtrOutput `pulumi:"config"`
	// The pipeline name.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewObservabilityPipeline registers a new resource with the given unique name, arguments, and options.
func NewObservabilityPipeline(ctx *pulumi.Context,
	name string, args *ObservabilityPipelineArgs, opts ...pulumi.ResourceOption) (*ObservabilityPipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ObservabilityPipeline
	err := ctx.RegisterResource("datadog:index/observabilityPipeline:ObservabilityPipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObservabilityPipeline gets an existing ObservabilityPipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObservabilityPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObservabilityPipelineState, opts ...pulumi.ResourceOption) (*ObservabilityPipeline, error) {
	var resource ObservabilityPipeline
	err := ctx.ReadResource("datadog:index/observabilityPipeline:ObservabilityPipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObservabilityPipeline resources.
type observabilityPipelineState struct {
	// Configuration for the pipeline.
	Config *ObservabilityPipelineConfig `pulumi:"config"`
	// The pipeline name.
	Name *string `pulumi:"name"`
}

type ObservabilityPipelineState struct {
	// Configuration for the pipeline.
	Config ObservabilityPipelineConfigPtrInput
	// The pipeline name.
	Name pulumi.StringPtrInput
}

func (ObservabilityPipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityPipelineState)(nil)).Elem()
}

type observabilityPipelineArgs struct {
	// Configuration for the pipeline.
	Config *ObservabilityPipelineConfig `pulumi:"config"`
	// The pipeline name.
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a ObservabilityPipeline resource.
type ObservabilityPipelineArgs struct {
	// Configuration for the pipeline.
	Config ObservabilityPipelineConfigPtrInput
	// The pipeline name.
	Name pulumi.StringInput
}

func (ObservabilityPipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityPipelineArgs)(nil)).Elem()
}

type ObservabilityPipelineInput interface {
	pulumi.Input

	ToObservabilityPipelineOutput() ObservabilityPipelineOutput
	ToObservabilityPipelineOutputWithContext(ctx context.Context) ObservabilityPipelineOutput
}

func (*ObservabilityPipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityPipeline)(nil)).Elem()
}

func (i *ObservabilityPipeline) ToObservabilityPipelineOutput() ObservabilityPipelineOutput {
	return i.ToObservabilityPipelineOutputWithContext(context.Background())
}

func (i *ObservabilityPipeline) ToObservabilityPipelineOutputWithContext(ctx context.Context) ObservabilityPipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityPipelineOutput)
}

// ObservabilityPipelineArrayInput is an input type that accepts ObservabilityPipelineArray and ObservabilityPipelineArrayOutput values.
// You can construct a concrete instance of `ObservabilityPipelineArrayInput` via:
//
//	ObservabilityPipelineArray{ ObservabilityPipelineArgs{...} }
type ObservabilityPipelineArrayInput interface {
	pulumi.Input

	ToObservabilityPipelineArrayOutput() ObservabilityPipelineArrayOutput
	ToObservabilityPipelineArrayOutputWithContext(context.Context) ObservabilityPipelineArrayOutput
}

type ObservabilityPipelineArray []ObservabilityPipelineInput

func (ObservabilityPipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservabilityPipeline)(nil)).Elem()
}

func (i ObservabilityPipelineArray) ToObservabilityPipelineArrayOutput() ObservabilityPipelineArrayOutput {
	return i.ToObservabilityPipelineArrayOutputWithContext(context.Background())
}

func (i ObservabilityPipelineArray) ToObservabilityPipelineArrayOutputWithContext(ctx context.Context) ObservabilityPipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityPipelineArrayOutput)
}

// ObservabilityPipelineMapInput is an input type that accepts ObservabilityPipelineMap and ObservabilityPipelineMapOutput values.
// You can construct a concrete instance of `ObservabilityPipelineMapInput` via:
//
//	ObservabilityPipelineMap{ "key": ObservabilityPipelineArgs{...} }
type ObservabilityPipelineMapInput interface {
	pulumi.Input

	ToObservabilityPipelineMapOutput() ObservabilityPipelineMapOutput
	ToObservabilityPipelineMapOutputWithContext(context.Context) ObservabilityPipelineMapOutput
}

type ObservabilityPipelineMap map[string]ObservabilityPipelineInput

func (ObservabilityPipelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservabilityPipeline)(nil)).Elem()
}

func (i ObservabilityPipelineMap) ToObservabilityPipelineMapOutput() ObservabilityPipelineMapOutput {
	return i.ToObservabilityPipelineMapOutputWithContext(context.Background())
}

func (i ObservabilityPipelineMap) ToObservabilityPipelineMapOutputWithContext(ctx context.Context) ObservabilityPipelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityPipelineMapOutput)
}

type ObservabilityPipelineOutput struct{ *pulumi.OutputState }

func (ObservabilityPipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityPipeline)(nil)).Elem()
}

func (o ObservabilityPipelineOutput) ToObservabilityPipelineOutput() ObservabilityPipelineOutput {
	return o
}

func (o ObservabilityPipelineOutput) ToObservabilityPipelineOutputWithContext(ctx context.Context) ObservabilityPipelineOutput {
	return o
}

// Configuration for the pipeline.
func (o ObservabilityPipelineOutput) Config() ObservabilityPipelineConfigPtrOutput {
	return o.ApplyT(func(v *ObservabilityPipeline) ObservabilityPipelineConfigPtrOutput { return v.Config }).(ObservabilityPipelineConfigPtrOutput)
}

// The pipeline name.
func (o ObservabilityPipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityPipeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type ObservabilityPipelineArrayOutput struct{ *pulumi.OutputState }

func (ObservabilityPipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservabilityPipeline)(nil)).Elem()
}

func (o ObservabilityPipelineArrayOutput) ToObservabilityPipelineArrayOutput() ObservabilityPipelineArrayOutput {
	return o
}

func (o ObservabilityPipelineArrayOutput) ToObservabilityPipelineArrayOutputWithContext(ctx context.Context) ObservabilityPipelineArrayOutput {
	return o
}

func (o ObservabilityPipelineArrayOutput) Index(i pulumi.IntInput) ObservabilityPipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObservabilityPipeline {
		return vs[0].([]*ObservabilityPipeline)[vs[1].(int)]
	}).(ObservabilityPipelineOutput)
}

type ObservabilityPipelineMapOutput struct{ *pulumi.OutputState }

func (ObservabilityPipelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservabilityPipeline)(nil)).Elem()
}

func (o ObservabilityPipelineMapOutput) ToObservabilityPipelineMapOutput() ObservabilityPipelineMapOutput {
	return o
}

func (o ObservabilityPipelineMapOutput) ToObservabilityPipelineMapOutputWithContext(ctx context.Context) ObservabilityPipelineMapOutput {
	return o
}

func (o ObservabilityPipelineMapOutput) MapIndex(k pulumi.StringInput) ObservabilityPipelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObservabilityPipeline {
		return vs[0].(map[string]*ObservabilityPipeline)[vs[1].(string)]
	}).(ObservabilityPipelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityPipelineInput)(nil)).Elem(), &ObservabilityPipeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityPipelineArrayInput)(nil)).Elem(), ObservabilityPipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityPipelineMapInput)(nil)).Elem(), ObservabilityPipelineMap{})
	pulumi.RegisterOutputType(ObservabilityPipelineOutput{})
	pulumi.RegisterOutputType(ObservabilityPipelineArrayOutput{})
	pulumi.RegisterOutputType(ObservabilityPipelineMapOutput{})
}
