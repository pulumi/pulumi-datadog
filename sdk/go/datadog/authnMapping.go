// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog AuthN Mappings resource. This feature lets you automatically assign roles to users based on their SAML attributes.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			roRole, err := datadog.LookupRole(ctx, &datadog.LookupRoleArgs{
//				Filter: "Datadog Read Only Role",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = datadog.NewAuthnMapping(ctx, "devRoRoleMapping", &datadog.AuthnMappingArgs{
//				Key:   pulumi.String("Member-of"),
//				Value: pulumi.String("Development"),
//				Role:  *pulumi.String(roRole.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AuthN mappings can be imported using their ID, e.g.
//
// ```sh
//
//	$ pulumi import datadog:index/authnMapping:AuthnMapping dev_ro_mapping 000000-0000-0000-0000-000000000000
//
// ```
type AuthnMapping struct {
	pulumi.CustomResourceState

	// Identity provider key.
	Key pulumi.StringOutput `pulumi:"key"`
	// The ID of a role to attach to all users with the corresponding key and value.
	Role pulumi.StringOutput `pulumi:"role"`
	// Identity provider value.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewAuthnMapping registers a new resource with the given unique name, arguments, and options.
func NewAuthnMapping(ctx *pulumi.Context,
	name string, args *AuthnMappingArgs, opts ...pulumi.ResourceOption) (*AuthnMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	var resource AuthnMapping
	err := ctx.RegisterResource("datadog:index/authnMapping:AuthnMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthnMapping gets an existing AuthnMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthnMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthnMappingState, opts ...pulumi.ResourceOption) (*AuthnMapping, error) {
	var resource AuthnMapping
	err := ctx.ReadResource("datadog:index/authnMapping:AuthnMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthnMapping resources.
type authnMappingState struct {
	// Identity provider key.
	Key *string `pulumi:"key"`
	// The ID of a role to attach to all users with the corresponding key and value.
	Role *string `pulumi:"role"`
	// Identity provider value.
	Value *string `pulumi:"value"`
}

type AuthnMappingState struct {
	// Identity provider key.
	Key pulumi.StringPtrInput
	// The ID of a role to attach to all users with the corresponding key and value.
	Role pulumi.StringPtrInput
	// Identity provider value.
	Value pulumi.StringPtrInput
}

func (AuthnMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*authnMappingState)(nil)).Elem()
}

type authnMappingArgs struct {
	// Identity provider key.
	Key string `pulumi:"key"`
	// The ID of a role to attach to all users with the corresponding key and value.
	Role string `pulumi:"role"`
	// Identity provider value.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a AuthnMapping resource.
type AuthnMappingArgs struct {
	// Identity provider key.
	Key pulumi.StringInput
	// The ID of a role to attach to all users with the corresponding key and value.
	Role pulumi.StringInput
	// Identity provider value.
	Value pulumi.StringInput
}

func (AuthnMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authnMappingArgs)(nil)).Elem()
}

type AuthnMappingInput interface {
	pulumi.Input

	ToAuthnMappingOutput() AuthnMappingOutput
	ToAuthnMappingOutputWithContext(ctx context.Context) AuthnMappingOutput
}

func (*AuthnMapping) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthnMapping)(nil)).Elem()
}

func (i *AuthnMapping) ToAuthnMappingOutput() AuthnMappingOutput {
	return i.ToAuthnMappingOutputWithContext(context.Background())
}

func (i *AuthnMapping) ToAuthnMappingOutputWithContext(ctx context.Context) AuthnMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthnMappingOutput)
}

// AuthnMappingArrayInput is an input type that accepts AuthnMappingArray and AuthnMappingArrayOutput values.
// You can construct a concrete instance of `AuthnMappingArrayInput` via:
//
//	AuthnMappingArray{ AuthnMappingArgs{...} }
type AuthnMappingArrayInput interface {
	pulumi.Input

	ToAuthnMappingArrayOutput() AuthnMappingArrayOutput
	ToAuthnMappingArrayOutputWithContext(context.Context) AuthnMappingArrayOutput
}

type AuthnMappingArray []AuthnMappingInput

func (AuthnMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthnMapping)(nil)).Elem()
}

func (i AuthnMappingArray) ToAuthnMappingArrayOutput() AuthnMappingArrayOutput {
	return i.ToAuthnMappingArrayOutputWithContext(context.Background())
}

func (i AuthnMappingArray) ToAuthnMappingArrayOutputWithContext(ctx context.Context) AuthnMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthnMappingArrayOutput)
}

// AuthnMappingMapInput is an input type that accepts AuthnMappingMap and AuthnMappingMapOutput values.
// You can construct a concrete instance of `AuthnMappingMapInput` via:
//
//	AuthnMappingMap{ "key": AuthnMappingArgs{...} }
type AuthnMappingMapInput interface {
	pulumi.Input

	ToAuthnMappingMapOutput() AuthnMappingMapOutput
	ToAuthnMappingMapOutputWithContext(context.Context) AuthnMappingMapOutput
}

type AuthnMappingMap map[string]AuthnMappingInput

func (AuthnMappingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthnMapping)(nil)).Elem()
}

func (i AuthnMappingMap) ToAuthnMappingMapOutput() AuthnMappingMapOutput {
	return i.ToAuthnMappingMapOutputWithContext(context.Background())
}

func (i AuthnMappingMap) ToAuthnMappingMapOutputWithContext(ctx context.Context) AuthnMappingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthnMappingMapOutput)
}

type AuthnMappingOutput struct{ *pulumi.OutputState }

func (AuthnMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthnMapping)(nil)).Elem()
}

func (o AuthnMappingOutput) ToAuthnMappingOutput() AuthnMappingOutput {
	return o
}

func (o AuthnMappingOutput) ToAuthnMappingOutputWithContext(ctx context.Context) AuthnMappingOutput {
	return o
}

// Identity provider key.
func (o AuthnMappingOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthnMapping) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The ID of a role to attach to all users with the corresponding key and value.
func (o AuthnMappingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthnMapping) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Identity provider value.
func (o AuthnMappingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthnMapping) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type AuthnMappingArrayOutput struct{ *pulumi.OutputState }

func (AuthnMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthnMapping)(nil)).Elem()
}

func (o AuthnMappingArrayOutput) ToAuthnMappingArrayOutput() AuthnMappingArrayOutput {
	return o
}

func (o AuthnMappingArrayOutput) ToAuthnMappingArrayOutputWithContext(ctx context.Context) AuthnMappingArrayOutput {
	return o
}

func (o AuthnMappingArrayOutput) Index(i pulumi.IntInput) AuthnMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthnMapping {
		return vs[0].([]*AuthnMapping)[vs[1].(int)]
	}).(AuthnMappingOutput)
}

type AuthnMappingMapOutput struct{ *pulumi.OutputState }

func (AuthnMappingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthnMapping)(nil)).Elem()
}

func (o AuthnMappingMapOutput) ToAuthnMappingMapOutput() AuthnMappingMapOutput {
	return o
}

func (o AuthnMappingMapOutput) ToAuthnMappingMapOutputWithContext(ctx context.Context) AuthnMappingMapOutput {
	return o
}

func (o AuthnMappingMapOutput) MapIndex(k pulumi.StringInput) AuthnMappingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthnMapping {
		return vs[0].(map[string]*AuthnMapping)[vs[1].(string)]
	}).(AuthnMappingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthnMappingInput)(nil)).Elem(), &AuthnMapping{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthnMappingArrayInput)(nil)).Elem(), AuthnMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthnMappingMapInput)(nil)).Elem(), AuthnMappingMap{})
	pulumi.RegisterOutputType(AuthnMappingOutput{})
	pulumi.RegisterOutputType(AuthnMappingArrayOutput{})
	pulumi.RegisterOutputType(AuthnMappingMapOutput{})
}
