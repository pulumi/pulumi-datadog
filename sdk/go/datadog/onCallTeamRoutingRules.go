// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog On-Call team routing rules resource.
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// Import existing on_call_team_routing_rules
//
// ```sh
// $ pulumi import datadog:index/onCallTeamRoutingRules:OnCallTeamRoutingRules test "b03a07d5-49da-43e9-83b4-5d84969b588b"
// ```
type OnCallTeamRoutingRules struct {
	pulumi.CustomResourceState

	// List of team routing rules.
	Rules OnCallTeamRoutingRulesRuleArrayOutput `pulumi:"rules"`
	// ID of the team to associate the routing rules with.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewOnCallTeamRoutingRules registers a new resource with the given unique name, arguments, and options.
func NewOnCallTeamRoutingRules(ctx *pulumi.Context,
	name string, args *OnCallTeamRoutingRulesArgs, opts ...pulumi.ResourceOption) (*OnCallTeamRoutingRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OnCallTeamRoutingRules
	err := ctx.RegisterResource("datadog:index/onCallTeamRoutingRules:OnCallTeamRoutingRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOnCallTeamRoutingRules gets an existing OnCallTeamRoutingRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOnCallTeamRoutingRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OnCallTeamRoutingRulesState, opts ...pulumi.ResourceOption) (*OnCallTeamRoutingRules, error) {
	var resource OnCallTeamRoutingRules
	err := ctx.ReadResource("datadog:index/onCallTeamRoutingRules:OnCallTeamRoutingRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OnCallTeamRoutingRules resources.
type onCallTeamRoutingRulesState struct {
	// List of team routing rules.
	Rules []OnCallTeamRoutingRulesRule `pulumi:"rules"`
	// ID of the team to associate the routing rules with.
	TeamId *string `pulumi:"teamId"`
}

type OnCallTeamRoutingRulesState struct {
	// List of team routing rules.
	Rules OnCallTeamRoutingRulesRuleArrayInput
	// ID of the team to associate the routing rules with.
	TeamId pulumi.StringPtrInput
}

func (OnCallTeamRoutingRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*onCallTeamRoutingRulesState)(nil)).Elem()
}

type onCallTeamRoutingRulesArgs struct {
	// List of team routing rules.
	Rules []OnCallTeamRoutingRulesRule `pulumi:"rules"`
	// ID of the team to associate the routing rules with.
	TeamId string `pulumi:"teamId"`
}

// The set of arguments for constructing a OnCallTeamRoutingRules resource.
type OnCallTeamRoutingRulesArgs struct {
	// List of team routing rules.
	Rules OnCallTeamRoutingRulesRuleArrayInput
	// ID of the team to associate the routing rules with.
	TeamId pulumi.StringInput
}

func (OnCallTeamRoutingRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*onCallTeamRoutingRulesArgs)(nil)).Elem()
}

type OnCallTeamRoutingRulesInput interface {
	pulumi.Input

	ToOnCallTeamRoutingRulesOutput() OnCallTeamRoutingRulesOutput
	ToOnCallTeamRoutingRulesOutputWithContext(ctx context.Context) OnCallTeamRoutingRulesOutput
}

func (*OnCallTeamRoutingRules) ElementType() reflect.Type {
	return reflect.TypeOf((**OnCallTeamRoutingRules)(nil)).Elem()
}

func (i *OnCallTeamRoutingRules) ToOnCallTeamRoutingRulesOutput() OnCallTeamRoutingRulesOutput {
	return i.ToOnCallTeamRoutingRulesOutputWithContext(context.Background())
}

func (i *OnCallTeamRoutingRules) ToOnCallTeamRoutingRulesOutputWithContext(ctx context.Context) OnCallTeamRoutingRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnCallTeamRoutingRulesOutput)
}

// OnCallTeamRoutingRulesArrayInput is an input type that accepts OnCallTeamRoutingRulesArray and OnCallTeamRoutingRulesArrayOutput values.
// You can construct a concrete instance of `OnCallTeamRoutingRulesArrayInput` via:
//
//	OnCallTeamRoutingRulesArray{ OnCallTeamRoutingRulesArgs{...} }
type OnCallTeamRoutingRulesArrayInput interface {
	pulumi.Input

	ToOnCallTeamRoutingRulesArrayOutput() OnCallTeamRoutingRulesArrayOutput
	ToOnCallTeamRoutingRulesArrayOutputWithContext(context.Context) OnCallTeamRoutingRulesArrayOutput
}

type OnCallTeamRoutingRulesArray []OnCallTeamRoutingRulesInput

func (OnCallTeamRoutingRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OnCallTeamRoutingRules)(nil)).Elem()
}

func (i OnCallTeamRoutingRulesArray) ToOnCallTeamRoutingRulesArrayOutput() OnCallTeamRoutingRulesArrayOutput {
	return i.ToOnCallTeamRoutingRulesArrayOutputWithContext(context.Background())
}

func (i OnCallTeamRoutingRulesArray) ToOnCallTeamRoutingRulesArrayOutputWithContext(ctx context.Context) OnCallTeamRoutingRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnCallTeamRoutingRulesArrayOutput)
}

// OnCallTeamRoutingRulesMapInput is an input type that accepts OnCallTeamRoutingRulesMap and OnCallTeamRoutingRulesMapOutput values.
// You can construct a concrete instance of `OnCallTeamRoutingRulesMapInput` via:
//
//	OnCallTeamRoutingRulesMap{ "key": OnCallTeamRoutingRulesArgs{...} }
type OnCallTeamRoutingRulesMapInput interface {
	pulumi.Input

	ToOnCallTeamRoutingRulesMapOutput() OnCallTeamRoutingRulesMapOutput
	ToOnCallTeamRoutingRulesMapOutputWithContext(context.Context) OnCallTeamRoutingRulesMapOutput
}

type OnCallTeamRoutingRulesMap map[string]OnCallTeamRoutingRulesInput

func (OnCallTeamRoutingRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OnCallTeamRoutingRules)(nil)).Elem()
}

func (i OnCallTeamRoutingRulesMap) ToOnCallTeamRoutingRulesMapOutput() OnCallTeamRoutingRulesMapOutput {
	return i.ToOnCallTeamRoutingRulesMapOutputWithContext(context.Background())
}

func (i OnCallTeamRoutingRulesMap) ToOnCallTeamRoutingRulesMapOutputWithContext(ctx context.Context) OnCallTeamRoutingRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnCallTeamRoutingRulesMapOutput)
}

type OnCallTeamRoutingRulesOutput struct{ *pulumi.OutputState }

func (OnCallTeamRoutingRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnCallTeamRoutingRules)(nil)).Elem()
}

func (o OnCallTeamRoutingRulesOutput) ToOnCallTeamRoutingRulesOutput() OnCallTeamRoutingRulesOutput {
	return o
}

func (o OnCallTeamRoutingRulesOutput) ToOnCallTeamRoutingRulesOutputWithContext(ctx context.Context) OnCallTeamRoutingRulesOutput {
	return o
}

// List of team routing rules.
func (o OnCallTeamRoutingRulesOutput) Rules() OnCallTeamRoutingRulesRuleArrayOutput {
	return o.ApplyT(func(v *OnCallTeamRoutingRules) OnCallTeamRoutingRulesRuleArrayOutput { return v.Rules }).(OnCallTeamRoutingRulesRuleArrayOutput)
}

// ID of the team to associate the routing rules with.
func (o OnCallTeamRoutingRulesOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *OnCallTeamRoutingRules) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type OnCallTeamRoutingRulesArrayOutput struct{ *pulumi.OutputState }

func (OnCallTeamRoutingRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OnCallTeamRoutingRules)(nil)).Elem()
}

func (o OnCallTeamRoutingRulesArrayOutput) ToOnCallTeamRoutingRulesArrayOutput() OnCallTeamRoutingRulesArrayOutput {
	return o
}

func (o OnCallTeamRoutingRulesArrayOutput) ToOnCallTeamRoutingRulesArrayOutputWithContext(ctx context.Context) OnCallTeamRoutingRulesArrayOutput {
	return o
}

func (o OnCallTeamRoutingRulesArrayOutput) Index(i pulumi.IntInput) OnCallTeamRoutingRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OnCallTeamRoutingRules {
		return vs[0].([]*OnCallTeamRoutingRules)[vs[1].(int)]
	}).(OnCallTeamRoutingRulesOutput)
}

type OnCallTeamRoutingRulesMapOutput struct{ *pulumi.OutputState }

func (OnCallTeamRoutingRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OnCallTeamRoutingRules)(nil)).Elem()
}

func (o OnCallTeamRoutingRulesMapOutput) ToOnCallTeamRoutingRulesMapOutput() OnCallTeamRoutingRulesMapOutput {
	return o
}

func (o OnCallTeamRoutingRulesMapOutput) ToOnCallTeamRoutingRulesMapOutputWithContext(ctx context.Context) OnCallTeamRoutingRulesMapOutput {
	return o
}

func (o OnCallTeamRoutingRulesMapOutput) MapIndex(k pulumi.StringInput) OnCallTeamRoutingRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OnCallTeamRoutingRules {
		return vs[0].(map[string]*OnCallTeamRoutingRules)[vs[1].(string)]
	}).(OnCallTeamRoutingRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OnCallTeamRoutingRulesInput)(nil)).Elem(), &OnCallTeamRoutingRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*OnCallTeamRoutingRulesArrayInput)(nil)).Elem(), OnCallTeamRoutingRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OnCallTeamRoutingRulesMapInput)(nil)).Elem(), OnCallTeamRoutingRulesMap{})
	pulumi.RegisterOutputType(OnCallTeamRoutingRulesOutput{})
	pulumi.RegisterOutputType(OnCallTeamRoutingRulesArrayOutput{})
	pulumi.RegisterOutputType(OnCallTeamRoutingRulesMapOutput{})
}
