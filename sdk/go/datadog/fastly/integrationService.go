// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog IntegrationFastlyService resource. This can be used to create and manage Datadog integration_fastly_service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooIntegrationAccount, err := fastly.NewIntegrationAccount(ctx, "fooIntegrationAccount", &fastly.IntegrationAccountArgs{
//				ApiKey: pulumi.String("ABCDEFG123"),
//				Name:   pulumi.String("test-name"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create new integration_fastly_service resource
//			_, err = fastly.NewIntegrationService(ctx, "fooIntegrationService", &fastly.IntegrationServiceArgs{
//				AccountId: fooIntegrationAccount.ID(),
//				Tags: pulumi.StringArray{
//					pulumi.String("mytag"),
//					pulumi.String("mytag2:myvalue"),
//				},
//				ServiceId: pulumi.String("my-service-id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import datadog:fastly/integrationService:IntegrationService new_list "service-id"
//
// ```
type IntegrationService struct {
	pulumi.CustomResourceState

	// Fastly Account id.
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// The ID of the Fastly service.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// A list of tags for the Fastly service.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewIntegrationService registers a new resource with the given unique name, arguments, and options.
func NewIntegrationService(ctx *pulumi.Context,
	name string, args *IntegrationServiceArgs, opts ...pulumi.ResourceOption) (*IntegrationService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationService
	err := ctx.RegisterResource("datadog:fastly/integrationService:IntegrationService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationService gets an existing IntegrationService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationServiceState, opts ...pulumi.ResourceOption) (*IntegrationService, error) {
	var resource IntegrationService
	err := ctx.ReadResource("datadog:fastly/integrationService:IntegrationService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationService resources.
type integrationServiceState struct {
	// Fastly Account id.
	AccountId *string `pulumi:"accountId"`
	// The ID of the Fastly service.
	ServiceId *string `pulumi:"serviceId"`
	// A list of tags for the Fastly service.
	Tags []string `pulumi:"tags"`
}

type IntegrationServiceState struct {
	// Fastly Account id.
	AccountId pulumi.StringPtrInput
	// The ID of the Fastly service.
	ServiceId pulumi.StringPtrInput
	// A list of tags for the Fastly service.
	Tags pulumi.StringArrayInput
}

func (IntegrationServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationServiceState)(nil)).Elem()
}

type integrationServiceArgs struct {
	// Fastly Account id.
	AccountId *string `pulumi:"accountId"`
	// The ID of the Fastly service.
	ServiceId string `pulumi:"serviceId"`
	// A list of tags for the Fastly service.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a IntegrationService resource.
type IntegrationServiceArgs struct {
	// Fastly Account id.
	AccountId pulumi.StringPtrInput
	// The ID of the Fastly service.
	ServiceId pulumi.StringInput
	// A list of tags for the Fastly service.
	Tags pulumi.StringArrayInput
}

func (IntegrationServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationServiceArgs)(nil)).Elem()
}

type IntegrationServiceInput interface {
	pulumi.Input

	ToIntegrationServiceOutput() IntegrationServiceOutput
	ToIntegrationServiceOutputWithContext(ctx context.Context) IntegrationServiceOutput
}

func (*IntegrationService) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationService)(nil)).Elem()
}

func (i *IntegrationService) ToIntegrationServiceOutput() IntegrationServiceOutput {
	return i.ToIntegrationServiceOutputWithContext(context.Background())
}

func (i *IntegrationService) ToIntegrationServiceOutputWithContext(ctx context.Context) IntegrationServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationServiceOutput)
}

// IntegrationServiceArrayInput is an input type that accepts IntegrationServiceArray and IntegrationServiceArrayOutput values.
// You can construct a concrete instance of `IntegrationServiceArrayInput` via:
//
//	IntegrationServiceArray{ IntegrationServiceArgs{...} }
type IntegrationServiceArrayInput interface {
	pulumi.Input

	ToIntegrationServiceArrayOutput() IntegrationServiceArrayOutput
	ToIntegrationServiceArrayOutputWithContext(context.Context) IntegrationServiceArrayOutput
}

type IntegrationServiceArray []IntegrationServiceInput

func (IntegrationServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationService)(nil)).Elem()
}

func (i IntegrationServiceArray) ToIntegrationServiceArrayOutput() IntegrationServiceArrayOutput {
	return i.ToIntegrationServiceArrayOutputWithContext(context.Background())
}

func (i IntegrationServiceArray) ToIntegrationServiceArrayOutputWithContext(ctx context.Context) IntegrationServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationServiceArrayOutput)
}

// IntegrationServiceMapInput is an input type that accepts IntegrationServiceMap and IntegrationServiceMapOutput values.
// You can construct a concrete instance of `IntegrationServiceMapInput` via:
//
//	IntegrationServiceMap{ "key": IntegrationServiceArgs{...} }
type IntegrationServiceMapInput interface {
	pulumi.Input

	ToIntegrationServiceMapOutput() IntegrationServiceMapOutput
	ToIntegrationServiceMapOutputWithContext(context.Context) IntegrationServiceMapOutput
}

type IntegrationServiceMap map[string]IntegrationServiceInput

func (IntegrationServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationService)(nil)).Elem()
}

func (i IntegrationServiceMap) ToIntegrationServiceMapOutput() IntegrationServiceMapOutput {
	return i.ToIntegrationServiceMapOutputWithContext(context.Background())
}

func (i IntegrationServiceMap) ToIntegrationServiceMapOutputWithContext(ctx context.Context) IntegrationServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationServiceMapOutput)
}

type IntegrationServiceOutput struct{ *pulumi.OutputState }

func (IntegrationServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationService)(nil)).Elem()
}

func (o IntegrationServiceOutput) ToIntegrationServiceOutput() IntegrationServiceOutput {
	return o
}

func (o IntegrationServiceOutput) ToIntegrationServiceOutputWithContext(ctx context.Context) IntegrationServiceOutput {
	return o
}

// Fastly Account id.
func (o IntegrationServiceOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationService) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

// The ID of the Fastly service.
func (o IntegrationServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationService) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// A list of tags for the Fastly service.
func (o IntegrationServiceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IntegrationService) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type IntegrationServiceArrayOutput struct{ *pulumi.OutputState }

func (IntegrationServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationService)(nil)).Elem()
}

func (o IntegrationServiceArrayOutput) ToIntegrationServiceArrayOutput() IntegrationServiceArrayOutput {
	return o
}

func (o IntegrationServiceArrayOutput) ToIntegrationServiceArrayOutputWithContext(ctx context.Context) IntegrationServiceArrayOutput {
	return o
}

func (o IntegrationServiceArrayOutput) Index(i pulumi.IntInput) IntegrationServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationService {
		return vs[0].([]*IntegrationService)[vs[1].(int)]
	}).(IntegrationServiceOutput)
}

type IntegrationServiceMapOutput struct{ *pulumi.OutputState }

func (IntegrationServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationService)(nil)).Elem()
}

func (o IntegrationServiceMapOutput) ToIntegrationServiceMapOutput() IntegrationServiceMapOutput {
	return o
}

func (o IntegrationServiceMapOutput) ToIntegrationServiceMapOutputWithContext(ctx context.Context) IntegrationServiceMapOutput {
	return o
}

func (o IntegrationServiceMapOutput) MapIndex(k pulumi.StringInput) IntegrationServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationService {
		return vs[0].(map[string]*IntegrationService)[vs[1].(string)]
	}).(IntegrationServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationServiceInput)(nil)).Elem(), &IntegrationService{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationServiceArrayInput)(nil)).Elem(), IntegrationServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationServiceMapInput)(nil)).Elem(), IntegrationServiceMap{})
	pulumi.RegisterOutputType(IntegrationServiceOutput{})
	pulumi.RegisterOutputType(IntegrationServiceArrayOutput{})
	pulumi.RegisterOutputType(IntegrationServiceMapOutput{})
}
