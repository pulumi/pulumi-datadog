// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsgenie

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for interacting with Datadog Opsgenie Service API.
type ServiceObject struct {
	pulumi.CustomResourceState

	// The custom url for a custom region.
	CustomUrl pulumi.StringPtrOutput `pulumi:"customUrl"`
	// The name for the Opsgenie service.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Opsgenie API key for the Opsgenie service. Note: Since the Datadog API never returns Opsgenie API keys, it is impossible to detect drifts to have it destroyed and recreated.
	OpsgenieApiKey pulumi.StringOutput `pulumi:"opsgenieApiKey"`
	// The region for the Opsgenie service. Valid values are `us`, `eu`, `custom`.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewServiceObject registers a new resource with the given unique name, arguments, and options.
func NewServiceObject(ctx *pulumi.Context,
	name string, args *ServiceObjectArgs, opts ...pulumi.ResourceOption) (*ServiceObject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.OpsgenieApiKey == nil {
		return nil, errors.New("invalid value for required argument 'OpsgenieApiKey'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.OpsgenieApiKey != nil {
		args.OpsgenieApiKey = pulumi.ToSecret(args.OpsgenieApiKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"opsgenieApiKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceObject
	err := ctx.RegisterResource("datadog:opsgenie/serviceObject:ServiceObject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceObject gets an existing ServiceObject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceObject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceObjectState, opts ...pulumi.ResourceOption) (*ServiceObject, error) {
	var resource ServiceObject
	err := ctx.ReadResource("datadog:opsgenie/serviceObject:ServiceObject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceObject resources.
type serviceObjectState struct {
	// The custom url for a custom region.
	CustomUrl *string `pulumi:"customUrl"`
	// The name for the Opsgenie service.
	Name *string `pulumi:"name"`
	// The Opsgenie API key for the Opsgenie service. Note: Since the Datadog API never returns Opsgenie API keys, it is impossible to detect drifts to have it destroyed and recreated.
	OpsgenieApiKey *string `pulumi:"opsgenieApiKey"`
	// The region for the Opsgenie service. Valid values are `us`, `eu`, `custom`.
	Region *string `pulumi:"region"`
}

type ServiceObjectState struct {
	// The custom url for a custom region.
	CustomUrl pulumi.StringPtrInput
	// The name for the Opsgenie service.
	Name pulumi.StringPtrInput
	// The Opsgenie API key for the Opsgenie service. Note: Since the Datadog API never returns Opsgenie API keys, it is impossible to detect drifts to have it destroyed and recreated.
	OpsgenieApiKey pulumi.StringPtrInput
	// The region for the Opsgenie service. Valid values are `us`, `eu`, `custom`.
	Region pulumi.StringPtrInput
}

func (ServiceObjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceObjectState)(nil)).Elem()
}

type serviceObjectArgs struct {
	// The custom url for a custom region.
	CustomUrl *string `pulumi:"customUrl"`
	// The name for the Opsgenie service.
	Name string `pulumi:"name"`
	// The Opsgenie API key for the Opsgenie service. Note: Since the Datadog API never returns Opsgenie API keys, it is impossible to detect drifts to have it destroyed and recreated.
	OpsgenieApiKey string `pulumi:"opsgenieApiKey"`
	// The region for the Opsgenie service. Valid values are `us`, `eu`, `custom`.
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a ServiceObject resource.
type ServiceObjectArgs struct {
	// The custom url for a custom region.
	CustomUrl pulumi.StringPtrInput
	// The name for the Opsgenie service.
	Name pulumi.StringInput
	// The Opsgenie API key for the Opsgenie service. Note: Since the Datadog API never returns Opsgenie API keys, it is impossible to detect drifts to have it destroyed and recreated.
	OpsgenieApiKey pulumi.StringInput
	// The region for the Opsgenie service. Valid values are `us`, `eu`, `custom`.
	Region pulumi.StringInput
}

func (ServiceObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceObjectArgs)(nil)).Elem()
}

type ServiceObjectInput interface {
	pulumi.Input

	ToServiceObjectOutput() ServiceObjectOutput
	ToServiceObjectOutputWithContext(ctx context.Context) ServiceObjectOutput
}

func (*ServiceObject) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceObject)(nil)).Elem()
}

func (i *ServiceObject) ToServiceObjectOutput() ServiceObjectOutput {
	return i.ToServiceObjectOutputWithContext(context.Background())
}

func (i *ServiceObject) ToServiceObjectOutputWithContext(ctx context.Context) ServiceObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceObjectOutput)
}

func (i *ServiceObject) ToOutput(ctx context.Context) pulumix.Output[*ServiceObject] {
	return pulumix.Output[*ServiceObject]{
		OutputState: i.ToServiceObjectOutputWithContext(ctx).OutputState,
	}
}

// ServiceObjectArrayInput is an input type that accepts ServiceObjectArray and ServiceObjectArrayOutput values.
// You can construct a concrete instance of `ServiceObjectArrayInput` via:
//
//	ServiceObjectArray{ ServiceObjectArgs{...} }
type ServiceObjectArrayInput interface {
	pulumi.Input

	ToServiceObjectArrayOutput() ServiceObjectArrayOutput
	ToServiceObjectArrayOutputWithContext(context.Context) ServiceObjectArrayOutput
}

type ServiceObjectArray []ServiceObjectInput

func (ServiceObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceObject)(nil)).Elem()
}

func (i ServiceObjectArray) ToServiceObjectArrayOutput() ServiceObjectArrayOutput {
	return i.ToServiceObjectArrayOutputWithContext(context.Background())
}

func (i ServiceObjectArray) ToServiceObjectArrayOutputWithContext(ctx context.Context) ServiceObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceObjectArrayOutput)
}

func (i ServiceObjectArray) ToOutput(ctx context.Context) pulumix.Output[[]*ServiceObject] {
	return pulumix.Output[[]*ServiceObject]{
		OutputState: i.ToServiceObjectArrayOutputWithContext(ctx).OutputState,
	}
}

// ServiceObjectMapInput is an input type that accepts ServiceObjectMap and ServiceObjectMapOutput values.
// You can construct a concrete instance of `ServiceObjectMapInput` via:
//
//	ServiceObjectMap{ "key": ServiceObjectArgs{...} }
type ServiceObjectMapInput interface {
	pulumi.Input

	ToServiceObjectMapOutput() ServiceObjectMapOutput
	ToServiceObjectMapOutputWithContext(context.Context) ServiceObjectMapOutput
}

type ServiceObjectMap map[string]ServiceObjectInput

func (ServiceObjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceObject)(nil)).Elem()
}

func (i ServiceObjectMap) ToServiceObjectMapOutput() ServiceObjectMapOutput {
	return i.ToServiceObjectMapOutputWithContext(context.Background())
}

func (i ServiceObjectMap) ToServiceObjectMapOutputWithContext(ctx context.Context) ServiceObjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceObjectMapOutput)
}

func (i ServiceObjectMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServiceObject] {
	return pulumix.Output[map[string]*ServiceObject]{
		OutputState: i.ToServiceObjectMapOutputWithContext(ctx).OutputState,
	}
}

type ServiceObjectOutput struct{ *pulumi.OutputState }

func (ServiceObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceObject)(nil)).Elem()
}

func (o ServiceObjectOutput) ToServiceObjectOutput() ServiceObjectOutput {
	return o
}

func (o ServiceObjectOutput) ToServiceObjectOutputWithContext(ctx context.Context) ServiceObjectOutput {
	return o
}

func (o ServiceObjectOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceObject] {
	return pulumix.Output[*ServiceObject]{
		OutputState: o.OutputState,
	}
}

// The custom url for a custom region.
func (o ServiceObjectOutput) CustomUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceObject) pulumi.StringPtrOutput { return v.CustomUrl }).(pulumi.StringPtrOutput)
}

// The name for the Opsgenie service.
func (o ServiceObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceObject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Opsgenie API key for the Opsgenie service. Note: Since the Datadog API never returns Opsgenie API keys, it is impossible to detect drifts to have it destroyed and recreated.
func (o ServiceObjectOutput) OpsgenieApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceObject) pulumi.StringOutput { return v.OpsgenieApiKey }).(pulumi.StringOutput)
}

// The region for the Opsgenie service. Valid values are `us`, `eu`, `custom`.
func (o ServiceObjectOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceObject) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type ServiceObjectArrayOutput struct{ *pulumi.OutputState }

func (ServiceObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceObject)(nil)).Elem()
}

func (o ServiceObjectArrayOutput) ToServiceObjectArrayOutput() ServiceObjectArrayOutput {
	return o
}

func (o ServiceObjectArrayOutput) ToServiceObjectArrayOutputWithContext(ctx context.Context) ServiceObjectArrayOutput {
	return o
}

func (o ServiceObjectArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ServiceObject] {
	return pulumix.Output[[]*ServiceObject]{
		OutputState: o.OutputState,
	}
}

func (o ServiceObjectArrayOutput) Index(i pulumi.IntInput) ServiceObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceObject {
		return vs[0].([]*ServiceObject)[vs[1].(int)]
	}).(ServiceObjectOutput)
}

type ServiceObjectMapOutput struct{ *pulumi.OutputState }

func (ServiceObjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceObject)(nil)).Elem()
}

func (o ServiceObjectMapOutput) ToServiceObjectMapOutput() ServiceObjectMapOutput {
	return o
}

func (o ServiceObjectMapOutput) ToServiceObjectMapOutputWithContext(ctx context.Context) ServiceObjectMapOutput {
	return o
}

func (o ServiceObjectMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServiceObject] {
	return pulumix.Output[map[string]*ServiceObject]{
		OutputState: o.OutputState,
	}
}

func (o ServiceObjectMapOutput) MapIndex(k pulumi.StringInput) ServiceObjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceObject {
		return vs[0].(map[string]*ServiceObject)[vs[1].(string)]
	}).(ServiceObjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceObjectInput)(nil)).Elem(), &ServiceObject{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceObjectArrayInput)(nil)).Elem(), ServiceObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceObjectMapInput)(nil)).Elem(), ServiceObjectMap{})
	pulumi.RegisterOutputType(ServiceObjectOutput{})
	pulumi.RegisterOutputType(ServiceObjectArrayOutput{})
	pulumi.RegisterOutputType(ServiceObjectMapOutput{})
}
