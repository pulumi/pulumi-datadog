// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve information about an existing application key.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.LookupApplicationKey(ctx, &datadog.LookupApplicationKeyArgs{
//				Name: pulumi.StringRef("foo-application"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupApplicationKey(ctx *pulumi.Context, args *LookupApplicationKeyArgs, opts ...pulumi.InvokeOption) (*LookupApplicationKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupApplicationKeyResult
	err := ctx.Invoke("datadog:index/getApplicationKey:getApplicationKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getApplicationKey.
type LookupApplicationKeyArgs struct {
	// Whether to use exact match when searching by name.
	ExactMatch *bool `pulumi:"exactMatch"`
	// Id for Application Key.
	Id *string `pulumi:"id"`
	// Name for Application Key.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getApplicationKey.
type LookupApplicationKeyResult struct {
	// Whether to use exact match when searching by name.
	ExactMatch *bool `pulumi:"exactMatch"`
	// Id for Application Key.
	Id *string `pulumi:"id"`
	// The value of the Application Key.
	Key string `pulumi:"key"`
	// Name for Application Key.
	Name *string `pulumi:"name"`
}

func LookupApplicationKeyOutput(ctx *pulumi.Context, args LookupApplicationKeyOutputArgs, opts ...pulumi.InvokeOption) LookupApplicationKeyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupApplicationKeyResult, error) {
			args := v.(LookupApplicationKeyArgs)
			r, err := LookupApplicationKey(ctx, &args, opts...)
			var s LookupApplicationKeyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupApplicationKeyResultOutput)
}

// A collection of arguments for invoking getApplicationKey.
type LookupApplicationKeyOutputArgs struct {
	// Whether to use exact match when searching by name.
	ExactMatch pulumi.BoolPtrInput `pulumi:"exactMatch"`
	// Id for Application Key.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name for Application Key.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupApplicationKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationKeyArgs)(nil)).Elem()
}

// A collection of values returned by getApplicationKey.
type LookupApplicationKeyResultOutput struct{ *pulumi.OutputState }

func (LookupApplicationKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationKeyResult)(nil)).Elem()
}

func (o LookupApplicationKeyResultOutput) ToLookupApplicationKeyResultOutput() LookupApplicationKeyResultOutput {
	return o
}

func (o LookupApplicationKeyResultOutput) ToLookupApplicationKeyResultOutputWithContext(ctx context.Context) LookupApplicationKeyResultOutput {
	return o
}

// Whether to use exact match when searching by name.
func (o LookupApplicationKeyResultOutput) ExactMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupApplicationKeyResult) *bool { return v.ExactMatch }).(pulumi.BoolPtrOutput)
}

// Id for Application Key.
func (o LookupApplicationKeyResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApplicationKeyResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value of the Application Key.
func (o LookupApplicationKeyResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationKeyResult) string { return v.Key }).(pulumi.StringOutput)
}

// Name for Application Key.
func (o LookupApplicationKeyResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApplicationKeyResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApplicationKeyResultOutput{})
}
