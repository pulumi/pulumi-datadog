// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Sensitive Data Scanner group resource.
//
// ## Import
//
// ```sh
//
//	$ pulumi import datadog:index/sensitiveDataScannerGroup:SensitiveDataScannerGroup new_list ""
//
// ```
type SensitiveDataScannerGroup struct {
	pulumi.CustomResourceState

	// Description of the Datadog scanning group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Filter object the scanning group applies.
	Filter SensitiveDataScannerGroupFilterOutput `pulumi:"filter"`
	// Whether or not the scanning group is enabled. If the group doesn't contain any rule or if all the rules in it are disabled, the group is force-disabled by our backend
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// Name of the Datadog scanning group.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of products the scanning group applies.
	ProductLists pulumi.StringArrayOutput `pulumi:"productLists"`
}

// NewSensitiveDataScannerGroup registers a new resource with the given unique name, arguments, and options.
func NewSensitiveDataScannerGroup(ctx *pulumi.Context,
	name string, args *SensitiveDataScannerGroupArgs, opts ...pulumi.ResourceOption) (*SensitiveDataScannerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	if args.IsEnabled == nil {
		return nil, errors.New("invalid value for required argument 'IsEnabled'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ProductLists == nil {
		return nil, errors.New("invalid value for required argument 'ProductLists'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SensitiveDataScannerGroup
	err := ctx.RegisterResource("datadog:index/sensitiveDataScannerGroup:SensitiveDataScannerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSensitiveDataScannerGroup gets an existing SensitiveDataScannerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSensitiveDataScannerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SensitiveDataScannerGroupState, opts ...pulumi.ResourceOption) (*SensitiveDataScannerGroup, error) {
	var resource SensitiveDataScannerGroup
	err := ctx.ReadResource("datadog:index/sensitiveDataScannerGroup:SensitiveDataScannerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SensitiveDataScannerGroup resources.
type sensitiveDataScannerGroupState struct {
	// Description of the Datadog scanning group.
	Description *string `pulumi:"description"`
	// Filter object the scanning group applies.
	Filter *SensitiveDataScannerGroupFilter `pulumi:"filter"`
	// Whether or not the scanning group is enabled. If the group doesn't contain any rule or if all the rules in it are disabled, the group is force-disabled by our backend
	IsEnabled *bool `pulumi:"isEnabled"`
	// Name of the Datadog scanning group.
	Name *string `pulumi:"name"`
	// List of products the scanning group applies.
	ProductLists []string `pulumi:"productLists"`
}

type SensitiveDataScannerGroupState struct {
	// Description of the Datadog scanning group.
	Description pulumi.StringPtrInput
	// Filter object the scanning group applies.
	Filter SensitiveDataScannerGroupFilterPtrInput
	// Whether or not the scanning group is enabled. If the group doesn't contain any rule or if all the rules in it are disabled, the group is force-disabled by our backend
	IsEnabled pulumi.BoolPtrInput
	// Name of the Datadog scanning group.
	Name pulumi.StringPtrInput
	// List of products the scanning group applies.
	ProductLists pulumi.StringArrayInput
}

func (SensitiveDataScannerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*sensitiveDataScannerGroupState)(nil)).Elem()
}

type sensitiveDataScannerGroupArgs struct {
	// Description of the Datadog scanning group.
	Description *string `pulumi:"description"`
	// Filter object the scanning group applies.
	Filter SensitiveDataScannerGroupFilter `pulumi:"filter"`
	// Whether or not the scanning group is enabled. If the group doesn't contain any rule or if all the rules in it are disabled, the group is force-disabled by our backend
	IsEnabled bool `pulumi:"isEnabled"`
	// Name of the Datadog scanning group.
	Name string `pulumi:"name"`
	// List of products the scanning group applies.
	ProductLists []string `pulumi:"productLists"`
}

// The set of arguments for constructing a SensitiveDataScannerGroup resource.
type SensitiveDataScannerGroupArgs struct {
	// Description of the Datadog scanning group.
	Description pulumi.StringPtrInput
	// Filter object the scanning group applies.
	Filter SensitiveDataScannerGroupFilterInput
	// Whether or not the scanning group is enabled. If the group doesn't contain any rule or if all the rules in it are disabled, the group is force-disabled by our backend
	IsEnabled pulumi.BoolInput
	// Name of the Datadog scanning group.
	Name pulumi.StringInput
	// List of products the scanning group applies.
	ProductLists pulumi.StringArrayInput
}

func (SensitiveDataScannerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sensitiveDataScannerGroupArgs)(nil)).Elem()
}

type SensitiveDataScannerGroupInput interface {
	pulumi.Input

	ToSensitiveDataScannerGroupOutput() SensitiveDataScannerGroupOutput
	ToSensitiveDataScannerGroupOutputWithContext(ctx context.Context) SensitiveDataScannerGroupOutput
}

func (*SensitiveDataScannerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**SensitiveDataScannerGroup)(nil)).Elem()
}

func (i *SensitiveDataScannerGroup) ToSensitiveDataScannerGroupOutput() SensitiveDataScannerGroupOutput {
	return i.ToSensitiveDataScannerGroupOutputWithContext(context.Background())
}

func (i *SensitiveDataScannerGroup) ToSensitiveDataScannerGroupOutputWithContext(ctx context.Context) SensitiveDataScannerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensitiveDataScannerGroupOutput)
}

func (i *SensitiveDataScannerGroup) ToOutput(ctx context.Context) pulumix.Output[*SensitiveDataScannerGroup] {
	return pulumix.Output[*SensitiveDataScannerGroup]{
		OutputState: i.ToSensitiveDataScannerGroupOutputWithContext(ctx).OutputState,
	}
}

// SensitiveDataScannerGroupArrayInput is an input type that accepts SensitiveDataScannerGroupArray and SensitiveDataScannerGroupArrayOutput values.
// You can construct a concrete instance of `SensitiveDataScannerGroupArrayInput` via:
//
//	SensitiveDataScannerGroupArray{ SensitiveDataScannerGroupArgs{...} }
type SensitiveDataScannerGroupArrayInput interface {
	pulumi.Input

	ToSensitiveDataScannerGroupArrayOutput() SensitiveDataScannerGroupArrayOutput
	ToSensitiveDataScannerGroupArrayOutputWithContext(context.Context) SensitiveDataScannerGroupArrayOutput
}

type SensitiveDataScannerGroupArray []SensitiveDataScannerGroupInput

func (SensitiveDataScannerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensitiveDataScannerGroup)(nil)).Elem()
}

func (i SensitiveDataScannerGroupArray) ToSensitiveDataScannerGroupArrayOutput() SensitiveDataScannerGroupArrayOutput {
	return i.ToSensitiveDataScannerGroupArrayOutputWithContext(context.Background())
}

func (i SensitiveDataScannerGroupArray) ToSensitiveDataScannerGroupArrayOutputWithContext(ctx context.Context) SensitiveDataScannerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensitiveDataScannerGroupArrayOutput)
}

func (i SensitiveDataScannerGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]*SensitiveDataScannerGroup] {
	return pulumix.Output[[]*SensitiveDataScannerGroup]{
		OutputState: i.ToSensitiveDataScannerGroupArrayOutputWithContext(ctx).OutputState,
	}
}

// SensitiveDataScannerGroupMapInput is an input type that accepts SensitiveDataScannerGroupMap and SensitiveDataScannerGroupMapOutput values.
// You can construct a concrete instance of `SensitiveDataScannerGroupMapInput` via:
//
//	SensitiveDataScannerGroupMap{ "key": SensitiveDataScannerGroupArgs{...} }
type SensitiveDataScannerGroupMapInput interface {
	pulumi.Input

	ToSensitiveDataScannerGroupMapOutput() SensitiveDataScannerGroupMapOutput
	ToSensitiveDataScannerGroupMapOutputWithContext(context.Context) SensitiveDataScannerGroupMapOutput
}

type SensitiveDataScannerGroupMap map[string]SensitiveDataScannerGroupInput

func (SensitiveDataScannerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensitiveDataScannerGroup)(nil)).Elem()
}

func (i SensitiveDataScannerGroupMap) ToSensitiveDataScannerGroupMapOutput() SensitiveDataScannerGroupMapOutput {
	return i.ToSensitiveDataScannerGroupMapOutputWithContext(context.Background())
}

func (i SensitiveDataScannerGroupMap) ToSensitiveDataScannerGroupMapOutputWithContext(ctx context.Context) SensitiveDataScannerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensitiveDataScannerGroupMapOutput)
}

func (i SensitiveDataScannerGroupMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SensitiveDataScannerGroup] {
	return pulumix.Output[map[string]*SensitiveDataScannerGroup]{
		OutputState: i.ToSensitiveDataScannerGroupMapOutputWithContext(ctx).OutputState,
	}
}

type SensitiveDataScannerGroupOutput struct{ *pulumi.OutputState }

func (SensitiveDataScannerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SensitiveDataScannerGroup)(nil)).Elem()
}

func (o SensitiveDataScannerGroupOutput) ToSensitiveDataScannerGroupOutput() SensitiveDataScannerGroupOutput {
	return o
}

func (o SensitiveDataScannerGroupOutput) ToSensitiveDataScannerGroupOutputWithContext(ctx context.Context) SensitiveDataScannerGroupOutput {
	return o
}

func (o SensitiveDataScannerGroupOutput) ToOutput(ctx context.Context) pulumix.Output[*SensitiveDataScannerGroup] {
	return pulumix.Output[*SensitiveDataScannerGroup]{
		OutputState: o.OutputState,
	}
}

// Description of the Datadog scanning group.
func (o SensitiveDataScannerGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SensitiveDataScannerGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Filter object the scanning group applies.
func (o SensitiveDataScannerGroupOutput) Filter() SensitiveDataScannerGroupFilterOutput {
	return o.ApplyT(func(v *SensitiveDataScannerGroup) SensitiveDataScannerGroupFilterOutput { return v.Filter }).(SensitiveDataScannerGroupFilterOutput)
}

// Whether or not the scanning group is enabled. If the group doesn't contain any rule or if all the rules in it are disabled, the group is force-disabled by our backend
func (o SensitiveDataScannerGroupOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SensitiveDataScannerGroup) pulumi.BoolOutput { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Name of the Datadog scanning group.
func (o SensitiveDataScannerGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataScannerGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of products the scanning group applies.
func (o SensitiveDataScannerGroupOutput) ProductLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SensitiveDataScannerGroup) pulumi.StringArrayOutput { return v.ProductLists }).(pulumi.StringArrayOutput)
}

type SensitiveDataScannerGroupArrayOutput struct{ *pulumi.OutputState }

func (SensitiveDataScannerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensitiveDataScannerGroup)(nil)).Elem()
}

func (o SensitiveDataScannerGroupArrayOutput) ToSensitiveDataScannerGroupArrayOutput() SensitiveDataScannerGroupArrayOutput {
	return o
}

func (o SensitiveDataScannerGroupArrayOutput) ToSensitiveDataScannerGroupArrayOutputWithContext(ctx context.Context) SensitiveDataScannerGroupArrayOutput {
	return o
}

func (o SensitiveDataScannerGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SensitiveDataScannerGroup] {
	return pulumix.Output[[]*SensitiveDataScannerGroup]{
		OutputState: o.OutputState,
	}
}

func (o SensitiveDataScannerGroupArrayOutput) Index(i pulumi.IntInput) SensitiveDataScannerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SensitiveDataScannerGroup {
		return vs[0].([]*SensitiveDataScannerGroup)[vs[1].(int)]
	}).(SensitiveDataScannerGroupOutput)
}

type SensitiveDataScannerGroupMapOutput struct{ *pulumi.OutputState }

func (SensitiveDataScannerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensitiveDataScannerGroup)(nil)).Elem()
}

func (o SensitiveDataScannerGroupMapOutput) ToSensitiveDataScannerGroupMapOutput() SensitiveDataScannerGroupMapOutput {
	return o
}

func (o SensitiveDataScannerGroupMapOutput) ToSensitiveDataScannerGroupMapOutputWithContext(ctx context.Context) SensitiveDataScannerGroupMapOutput {
	return o
}

func (o SensitiveDataScannerGroupMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SensitiveDataScannerGroup] {
	return pulumix.Output[map[string]*SensitiveDataScannerGroup]{
		OutputState: o.OutputState,
	}
}

func (o SensitiveDataScannerGroupMapOutput) MapIndex(k pulumi.StringInput) SensitiveDataScannerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SensitiveDataScannerGroup {
		return vs[0].(map[string]*SensitiveDataScannerGroup)[vs[1].(string)]
	}).(SensitiveDataScannerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SensitiveDataScannerGroupInput)(nil)).Elem(), &SensitiveDataScannerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensitiveDataScannerGroupArrayInput)(nil)).Elem(), SensitiveDataScannerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensitiveDataScannerGroupMapInput)(nil)).Elem(), SensitiveDataScannerGroupMap{})
	pulumi.RegisterOutputType(SensitiveDataScannerGroupOutput{})
	pulumi.RegisterOutputType(SensitiveDataScannerGroupArrayOutput{})
	pulumi.RegisterOutputType(SensitiveDataScannerGroupMapOutput{})
}
