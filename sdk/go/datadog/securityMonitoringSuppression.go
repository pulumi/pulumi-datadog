// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog Security Monitoring Suppression API resource. It can be used to create and manage Datadog security monitoring suppression rules.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.NewSecurityMonitoringSuppression(ctx, "my_suppression", &datadog.SecurityMonitoringSuppressionArgs{
//				Name:             pulumi.String("My suppression"),
//				Description:      pulumi.String("Suppression for low severity CloudTrail signals from test environments limited to 2024"),
//				Enabled:          pulumi.Bool(true),
//				RuleQuery:        pulumi.String("severity:low source:cloudtrail"),
//				SuppressionQuery: pulumi.String("env:test"),
//				ExpirationDate:   pulumi.String("2024-12-31T12:00:00Z"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Security monitoring suppressions can be imported using ID, for example:
//
// ```sh
// $ pulumi import datadog:index/securityMonitoringSuppression:SecurityMonitoringSuppression my_suppression m0o-hto-lkb
// ```
type SecurityMonitoringSuppression struct {
	pulumi.CustomResourceState

	// A description for the suppression rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the suppression rule is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
	ExpirationDate pulumi.StringPtrOutput `pulumi:"expirationDate"`
	// The name of the suppression rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
	RuleQuery pulumi.StringOutput `pulumi:"ruleQuery"`
	// The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
	SuppressionQuery pulumi.StringOutput `pulumi:"suppressionQuery"`
}

// NewSecurityMonitoringSuppression registers a new resource with the given unique name, arguments, and options.
func NewSecurityMonitoringSuppression(ctx *pulumi.Context,
	name string, args *SecurityMonitoringSuppressionArgs, opts ...pulumi.ResourceOption) (*SecurityMonitoringSuppression, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.RuleQuery == nil {
		return nil, errors.New("invalid value for required argument 'RuleQuery'")
	}
	if args.SuppressionQuery == nil {
		return nil, errors.New("invalid value for required argument 'SuppressionQuery'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityMonitoringSuppression
	err := ctx.RegisterResource("datadog:index/securityMonitoringSuppression:SecurityMonitoringSuppression", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityMonitoringSuppression gets an existing SecurityMonitoringSuppression resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityMonitoringSuppression(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityMonitoringSuppressionState, opts ...pulumi.ResourceOption) (*SecurityMonitoringSuppression, error) {
	var resource SecurityMonitoringSuppression
	err := ctx.ReadResource("datadog:index/securityMonitoringSuppression:SecurityMonitoringSuppression", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityMonitoringSuppression resources.
type securityMonitoringSuppressionState struct {
	// A description for the suppression rule.
	Description *string `pulumi:"description"`
	// Whether the suppression rule is enabled.
	Enabled *bool `pulumi:"enabled"`
	// A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
	ExpirationDate *string `pulumi:"expirationDate"`
	// The name of the suppression rule.
	Name *string `pulumi:"name"`
	// The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
	RuleQuery *string `pulumi:"ruleQuery"`
	// The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
	SuppressionQuery *string `pulumi:"suppressionQuery"`
}

type SecurityMonitoringSuppressionState struct {
	// A description for the suppression rule.
	Description pulumi.StringPtrInput
	// Whether the suppression rule is enabled.
	Enabled pulumi.BoolPtrInput
	// A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
	ExpirationDate pulumi.StringPtrInput
	// The name of the suppression rule.
	Name pulumi.StringPtrInput
	// The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
	RuleQuery pulumi.StringPtrInput
	// The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
	SuppressionQuery pulumi.StringPtrInput
}

func (SecurityMonitoringSuppressionState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityMonitoringSuppressionState)(nil)).Elem()
}

type securityMonitoringSuppressionArgs struct {
	// A description for the suppression rule.
	Description *string `pulumi:"description"`
	// Whether the suppression rule is enabled.
	Enabled bool `pulumi:"enabled"`
	// A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
	ExpirationDate *string `pulumi:"expirationDate"`
	// The name of the suppression rule.
	Name string `pulumi:"name"`
	// The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
	RuleQuery string `pulumi:"ruleQuery"`
	// The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
	SuppressionQuery string `pulumi:"suppressionQuery"`
}

// The set of arguments for constructing a SecurityMonitoringSuppression resource.
type SecurityMonitoringSuppressionArgs struct {
	// A description for the suppression rule.
	Description pulumi.StringPtrInput
	// Whether the suppression rule is enabled.
	Enabled pulumi.BoolInput
	// A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
	ExpirationDate pulumi.StringPtrInput
	// The name of the suppression rule.
	Name pulumi.StringInput
	// The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
	RuleQuery pulumi.StringInput
	// The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
	SuppressionQuery pulumi.StringInput
}

func (SecurityMonitoringSuppressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityMonitoringSuppressionArgs)(nil)).Elem()
}

type SecurityMonitoringSuppressionInput interface {
	pulumi.Input

	ToSecurityMonitoringSuppressionOutput() SecurityMonitoringSuppressionOutput
	ToSecurityMonitoringSuppressionOutputWithContext(ctx context.Context) SecurityMonitoringSuppressionOutput
}

func (*SecurityMonitoringSuppression) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityMonitoringSuppression)(nil)).Elem()
}

func (i *SecurityMonitoringSuppression) ToSecurityMonitoringSuppressionOutput() SecurityMonitoringSuppressionOutput {
	return i.ToSecurityMonitoringSuppressionOutputWithContext(context.Background())
}

func (i *SecurityMonitoringSuppression) ToSecurityMonitoringSuppressionOutputWithContext(ctx context.Context) SecurityMonitoringSuppressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityMonitoringSuppressionOutput)
}

// SecurityMonitoringSuppressionArrayInput is an input type that accepts SecurityMonitoringSuppressionArray and SecurityMonitoringSuppressionArrayOutput values.
// You can construct a concrete instance of `SecurityMonitoringSuppressionArrayInput` via:
//
//	SecurityMonitoringSuppressionArray{ SecurityMonitoringSuppressionArgs{...} }
type SecurityMonitoringSuppressionArrayInput interface {
	pulumi.Input

	ToSecurityMonitoringSuppressionArrayOutput() SecurityMonitoringSuppressionArrayOutput
	ToSecurityMonitoringSuppressionArrayOutputWithContext(context.Context) SecurityMonitoringSuppressionArrayOutput
}

type SecurityMonitoringSuppressionArray []SecurityMonitoringSuppressionInput

func (SecurityMonitoringSuppressionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityMonitoringSuppression)(nil)).Elem()
}

func (i SecurityMonitoringSuppressionArray) ToSecurityMonitoringSuppressionArrayOutput() SecurityMonitoringSuppressionArrayOutput {
	return i.ToSecurityMonitoringSuppressionArrayOutputWithContext(context.Background())
}

func (i SecurityMonitoringSuppressionArray) ToSecurityMonitoringSuppressionArrayOutputWithContext(ctx context.Context) SecurityMonitoringSuppressionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityMonitoringSuppressionArrayOutput)
}

// SecurityMonitoringSuppressionMapInput is an input type that accepts SecurityMonitoringSuppressionMap and SecurityMonitoringSuppressionMapOutput values.
// You can construct a concrete instance of `SecurityMonitoringSuppressionMapInput` via:
//
//	SecurityMonitoringSuppressionMap{ "key": SecurityMonitoringSuppressionArgs{...} }
type SecurityMonitoringSuppressionMapInput interface {
	pulumi.Input

	ToSecurityMonitoringSuppressionMapOutput() SecurityMonitoringSuppressionMapOutput
	ToSecurityMonitoringSuppressionMapOutputWithContext(context.Context) SecurityMonitoringSuppressionMapOutput
}

type SecurityMonitoringSuppressionMap map[string]SecurityMonitoringSuppressionInput

func (SecurityMonitoringSuppressionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityMonitoringSuppression)(nil)).Elem()
}

func (i SecurityMonitoringSuppressionMap) ToSecurityMonitoringSuppressionMapOutput() SecurityMonitoringSuppressionMapOutput {
	return i.ToSecurityMonitoringSuppressionMapOutputWithContext(context.Background())
}

func (i SecurityMonitoringSuppressionMap) ToSecurityMonitoringSuppressionMapOutputWithContext(ctx context.Context) SecurityMonitoringSuppressionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityMonitoringSuppressionMapOutput)
}

type SecurityMonitoringSuppressionOutput struct{ *pulumi.OutputState }

func (SecurityMonitoringSuppressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityMonitoringSuppression)(nil)).Elem()
}

func (o SecurityMonitoringSuppressionOutput) ToSecurityMonitoringSuppressionOutput() SecurityMonitoringSuppressionOutput {
	return o
}

func (o SecurityMonitoringSuppressionOutput) ToSecurityMonitoringSuppressionOutputWithContext(ctx context.Context) SecurityMonitoringSuppressionOutput {
	return o
}

// A description for the suppression rule.
func (o SecurityMonitoringSuppressionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityMonitoringSuppression) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the suppression rule is enabled.
func (o SecurityMonitoringSuppressionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecurityMonitoringSuppression) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
func (o SecurityMonitoringSuppressionOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityMonitoringSuppression) pulumi.StringPtrOutput { return v.ExpirationDate }).(pulumi.StringPtrOutput)
}

// The name of the suppression rule.
func (o SecurityMonitoringSuppressionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityMonitoringSuppression) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
func (o SecurityMonitoringSuppressionOutput) RuleQuery() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityMonitoringSuppression) pulumi.StringOutput { return v.RuleQuery }).(pulumi.StringOutput)
}

// The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
func (o SecurityMonitoringSuppressionOutput) SuppressionQuery() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityMonitoringSuppression) pulumi.StringOutput { return v.SuppressionQuery }).(pulumi.StringOutput)
}

type SecurityMonitoringSuppressionArrayOutput struct{ *pulumi.OutputState }

func (SecurityMonitoringSuppressionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityMonitoringSuppression)(nil)).Elem()
}

func (o SecurityMonitoringSuppressionArrayOutput) ToSecurityMonitoringSuppressionArrayOutput() SecurityMonitoringSuppressionArrayOutput {
	return o
}

func (o SecurityMonitoringSuppressionArrayOutput) ToSecurityMonitoringSuppressionArrayOutputWithContext(ctx context.Context) SecurityMonitoringSuppressionArrayOutput {
	return o
}

func (o SecurityMonitoringSuppressionArrayOutput) Index(i pulumi.IntInput) SecurityMonitoringSuppressionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityMonitoringSuppression {
		return vs[0].([]*SecurityMonitoringSuppression)[vs[1].(int)]
	}).(SecurityMonitoringSuppressionOutput)
}

type SecurityMonitoringSuppressionMapOutput struct{ *pulumi.OutputState }

func (SecurityMonitoringSuppressionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityMonitoringSuppression)(nil)).Elem()
}

func (o SecurityMonitoringSuppressionMapOutput) ToSecurityMonitoringSuppressionMapOutput() SecurityMonitoringSuppressionMapOutput {
	return o
}

func (o SecurityMonitoringSuppressionMapOutput) ToSecurityMonitoringSuppressionMapOutputWithContext(ctx context.Context) SecurityMonitoringSuppressionMapOutput {
	return o
}

func (o SecurityMonitoringSuppressionMapOutput) MapIndex(k pulumi.StringInput) SecurityMonitoringSuppressionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityMonitoringSuppression {
		return vs[0].(map[string]*SecurityMonitoringSuppression)[vs[1].(string)]
	}).(SecurityMonitoringSuppressionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityMonitoringSuppressionInput)(nil)).Elem(), &SecurityMonitoringSuppression{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityMonitoringSuppressionArrayInput)(nil)).Elem(), SecurityMonitoringSuppressionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityMonitoringSuppressionMapInput)(nil)).Elem(), SecurityMonitoringSuppressionMap{})
	pulumi.RegisterOutputType(SecurityMonitoringSuppressionOutput{})
	pulumi.RegisterOutputType(SecurityMonitoringSuppressionArrayOutput{})
	pulumi.RegisterOutputType(SecurityMonitoringSuppressionMapOutput{})
}
