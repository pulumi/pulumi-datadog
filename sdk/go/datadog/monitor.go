// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Datadog monitor resource. This can be used to create and manage Datadog monitors.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := datadog.NewMonitor(ctx, "foo", &datadog.MonitorArgs{
// 			Name:              pulumi.String("Name for monitor foo"),
// 			Type:              pulumi.String("metric alert"),
// 			Message:           pulumi.String("Monitor triggered. Notify: @hipchat-channel"),
// 			EscalationMessage: pulumi.String("Escalation message @pagerduty"),
// 			Query:             pulumi.String("avg(last_1h):avg:aws.ec2.cpu{environment:foo,host:foo} by {host} > 4"),
// 			Thresholds: &datadog.MonitorThresholdsArgs{
// 				Ok:                pulumi.Float64(0),
// 				Warning:           pulumi.Float64(2),
// 				Warning_recovery:  pulumi.Float64(1),
// 				Critical:          pulumi.Float64(4),
// 				Critical_recovery: pulumi.Float64(3),
// 			},
// 			NotifyNoData:     pulumi.Bool(false),
// 			RenotifyInterval: pulumi.Int(60),
// 			NotifyAudit:      pulumi.Bool(false),
// 			TimeoutH:         pulumi.Int(60),
// 			IncludeTags:      pulumi.Bool(true),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("foo:bar"),
// 				pulumi.String("baz"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Silencing by Hand and by Downtimes
//
// There are two ways how to silence a single monitor:
//
// -   Mute it by hand
// -   Create a Downtime
//
// Both of these actions add a new value to the `silenced` map. This can be problematic if the `silenced` attribute doesn't contain them in your application, as they would be removed on next `pulumi up` invocation. In order to prevent that from happening, you can add following to your monitor:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		return nil
// 	})
// }
// ```
//
// The above will make sure that any changes to the `silenced` attribute are ignored.
//
// This issue doesn't apply to multi-monitor downtimes (those that don't contain `monitorId` ), as these don't influence contents of the `silenced` attribute.
//
// ## Composite Monitors
//
// You can compose monitors of all types in order to define more specific alert conditions (see the [doc](https://docs.datadoghq.com/monitors/monitor_types/composite/)). You just need to reuse the ID of your `Monitor` resources. You can also compose any monitor with a `SyntheticsTest` by passing the computed `monitorId` attribute in the query.
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := datadog.NewMonitor(ctx, "bar", &datadog.MonitorArgs{
// 			Message: pulumi.String("This is a message"),
// 			Name:    pulumi.String("Composite Monitor"),
// 			Query:   pulumi.String(fmt.Sprintf("%v%v%v", datadog_monitor.Foo.Id, " || ", datadog_synthetics_test.Foo.Monitor_id)),
// 			Type:    pulumi.String("composite"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Monitors can be imported using their numeric ID, e.g. console
//
// ```sh
//  $ pulumi import datadog:index/monitor:Monitor bytes_received_localhost 2081
// ```
type Monitor struct {
	pulumi.CustomResourceState

	// A boolean indicating whether or not to include a list of log values which triggered the alert. Defaults to false. This is only used by log monitors.
	EnableLogsSample  pulumi.BoolPtrOutput   `pulumi:"enableLogsSample"`
	EscalationMessage pulumi.StringPtrOutput `pulumi:"escalationMessage"`
	// Time (in seconds) to delay evaluation, as a non-negative integer.
	EvaluationDelay pulumi.IntOutput `pulumi:"evaluationDelay"`
	// A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO, composite monitor).
	ForceDelete pulumi.BoolPtrOutput `pulumi:"forceDelete"`
	// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to true.
	IncludeTags pulumi.BoolPtrOutput `pulumi:"includeTags"`
	// A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
	Locked  pulumi.BoolPtrOutput `pulumi:"locked"`
	Message pulumi.StringOutput  `pulumi:"message"`
	Name    pulumi.StringOutput  `pulumi:"name"`
	// Time (in seconds) to allow a host to boot and
	NewHostDelay pulumi.IntPtrOutput `pulumi:"newHostDelay"`
	// The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes.
	NoDataTimeframe pulumi.IntPtrOutput `pulumi:"noDataTimeframe"`
	// A boolean indicating whether tagged users will be notified on changes to this monitor.
	NotifyAudit pulumi.BoolPtrOutput `pulumi:"notifyAudit"`
	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults
	NotifyNoData pulumi.BoolPtrOutput `pulumi:"notifyNoData"`
	Priority     pulumi.IntPtrOutput  `pulumi:"priority"`
	Query        pulumi.StringOutput  `pulumi:"query"`
	// The number of minutes after the last notification before a monitor will re-notify
	RenotifyInterval pulumi.IntPtrOutput `pulumi:"renotifyInterval"`
	// A boolean indicating whether this monitor needs a full window of data before it's evaluated.
	RequireFullWindow pulumi.BoolPtrOutput `pulumi:"requireFullWindow"`
	// Each scope will be muted until the given POSIX timestamp or forever if the value is 0. Use `-1` if you want to unmute the scope. **Deprecated** The `silenced` parameter is being deprecated in favor of the downtime resource. This will be removed in the next major version of the provider Provider.
	//
	// Deprecated: use Downtime Resource instead
	Silenced pulumi.MapOutput `pulumi:"silenced"`
	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// A mapping containing `recoveryWindow` and `triggerWindow` values, e.g. `last15m` . Can only be used for, and are required for, anomaly monitors.
	ThresholdWindows MonitorThresholdWindowsPtrOutput `pulumi:"thresholdWindows"`
	Thresholds       MonitorThresholdsPtrOutput       `pulumi:"thresholds"`
	// The number of hours of the monitor not reporting data before it will automatically resolve
	TimeoutH pulumi.IntPtrOutput `pulumi:"timeoutH"`
	Type     pulumi.StringOutput `pulumi:"type"`
	// If set to false, skip the validation call done during `plan` .
	Validate pulumi.BoolPtrOutput `pulumi:"validate"`
}

// NewMonitor registers a new resource with the given unique name, arguments, and options.
func NewMonitor(ctx *pulumi.Context,
	name string, args *MonitorArgs, opts ...pulumi.ResourceOption) (*Monitor, error) {
	if args == nil || args.Message == nil {
		return nil, errors.New("missing required argument 'Message'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Query == nil {
		return nil, errors.New("missing required argument 'Query'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &MonitorArgs{}
	}
	var resource Monitor
	err := ctx.RegisterResource("datadog:index/monitor:Monitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitor gets an existing Monitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitorState, opts ...pulumi.ResourceOption) (*Monitor, error) {
	var resource Monitor
	err := ctx.ReadResource("datadog:index/monitor:Monitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Monitor resources.
type monitorState struct {
	// A boolean indicating whether or not to include a list of log values which triggered the alert. Defaults to false. This is only used by log monitors.
	EnableLogsSample  *bool   `pulumi:"enableLogsSample"`
	EscalationMessage *string `pulumi:"escalationMessage"`
	// Time (in seconds) to delay evaluation, as a non-negative integer.
	EvaluationDelay *int `pulumi:"evaluationDelay"`
	// A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO, composite monitor).
	ForceDelete *bool `pulumi:"forceDelete"`
	// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to true.
	IncludeTags *bool `pulumi:"includeTags"`
	// A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
	Locked  *bool   `pulumi:"locked"`
	Message *string `pulumi:"message"`
	Name    *string `pulumi:"name"`
	// Time (in seconds) to allow a host to boot and
	NewHostDelay *int `pulumi:"newHostDelay"`
	// The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes.
	NoDataTimeframe *int `pulumi:"noDataTimeframe"`
	// A boolean indicating whether tagged users will be notified on changes to this monitor.
	NotifyAudit *bool `pulumi:"notifyAudit"`
	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults
	NotifyNoData *bool   `pulumi:"notifyNoData"`
	Priority     *int    `pulumi:"priority"`
	Query        *string `pulumi:"query"`
	// The number of minutes after the last notification before a monitor will re-notify
	RenotifyInterval *int `pulumi:"renotifyInterval"`
	// A boolean indicating whether this monitor needs a full window of data before it's evaluated.
	RequireFullWindow *bool `pulumi:"requireFullWindow"`
	// Each scope will be muted until the given POSIX timestamp or forever if the value is 0. Use `-1` if you want to unmute the scope. **Deprecated** The `silenced` parameter is being deprecated in favor of the downtime resource. This will be removed in the next major version of the provider Provider.
	//
	// Deprecated: use Downtime Resource instead
	Silenced map[string]interface{} `pulumi:"silenced"`
	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags []string `pulumi:"tags"`
	// A mapping containing `recoveryWindow` and `triggerWindow` values, e.g. `last15m` . Can only be used for, and are required for, anomaly monitors.
	ThresholdWindows *MonitorThresholdWindows `pulumi:"thresholdWindows"`
	Thresholds       *MonitorThresholds       `pulumi:"thresholds"`
	// The number of hours of the monitor not reporting data before it will automatically resolve
	TimeoutH *int    `pulumi:"timeoutH"`
	Type     *string `pulumi:"type"`
	// If set to false, skip the validation call done during `plan` .
	Validate *bool `pulumi:"validate"`
}

type MonitorState struct {
	// A boolean indicating whether or not to include a list of log values which triggered the alert. Defaults to false. This is only used by log monitors.
	EnableLogsSample  pulumi.BoolPtrInput
	EscalationMessage pulumi.StringPtrInput
	// Time (in seconds) to delay evaluation, as a non-negative integer.
	EvaluationDelay pulumi.IntPtrInput
	// A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO, composite monitor).
	ForceDelete pulumi.BoolPtrInput
	// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to true.
	IncludeTags pulumi.BoolPtrInput
	// A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
	Locked  pulumi.BoolPtrInput
	Message pulumi.StringPtrInput
	Name    pulumi.StringPtrInput
	// Time (in seconds) to allow a host to boot and
	NewHostDelay pulumi.IntPtrInput
	// The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes.
	NoDataTimeframe pulumi.IntPtrInput
	// A boolean indicating whether tagged users will be notified on changes to this monitor.
	NotifyAudit pulumi.BoolPtrInput
	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults
	NotifyNoData pulumi.BoolPtrInput
	Priority     pulumi.IntPtrInput
	Query        pulumi.StringPtrInput
	// The number of minutes after the last notification before a monitor will re-notify
	RenotifyInterval pulumi.IntPtrInput
	// A boolean indicating whether this monitor needs a full window of data before it's evaluated.
	RequireFullWindow pulumi.BoolPtrInput
	// Each scope will be muted until the given POSIX timestamp or forever if the value is 0. Use `-1` if you want to unmute the scope. **Deprecated** The `silenced` parameter is being deprecated in favor of the downtime resource. This will be removed in the next major version of the provider Provider.
	//
	// Deprecated: use Downtime Resource instead
	Silenced pulumi.MapInput
	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags pulumi.StringArrayInput
	// A mapping containing `recoveryWindow` and `triggerWindow` values, e.g. `last15m` . Can only be used for, and are required for, anomaly monitors.
	ThresholdWindows MonitorThresholdWindowsPtrInput
	Thresholds       MonitorThresholdsPtrInput
	// The number of hours of the monitor not reporting data before it will automatically resolve
	TimeoutH pulumi.IntPtrInput
	Type     pulumi.StringPtrInput
	// If set to false, skip the validation call done during `plan` .
	Validate pulumi.BoolPtrInput
}

func (MonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorState)(nil)).Elem()
}

type monitorArgs struct {
	// A boolean indicating whether or not to include a list of log values which triggered the alert. Defaults to false. This is only used by log monitors.
	EnableLogsSample  *bool   `pulumi:"enableLogsSample"`
	EscalationMessage *string `pulumi:"escalationMessage"`
	// Time (in seconds) to delay evaluation, as a non-negative integer.
	EvaluationDelay *int `pulumi:"evaluationDelay"`
	// A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO, composite monitor).
	ForceDelete *bool `pulumi:"forceDelete"`
	// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to true.
	IncludeTags *bool `pulumi:"includeTags"`
	// A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
	Locked  *bool  `pulumi:"locked"`
	Message string `pulumi:"message"`
	Name    string `pulumi:"name"`
	// Time (in seconds) to allow a host to boot and
	NewHostDelay *int `pulumi:"newHostDelay"`
	// The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes.
	NoDataTimeframe *int `pulumi:"noDataTimeframe"`
	// A boolean indicating whether tagged users will be notified on changes to this monitor.
	NotifyAudit *bool `pulumi:"notifyAudit"`
	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults
	NotifyNoData *bool  `pulumi:"notifyNoData"`
	Priority     *int   `pulumi:"priority"`
	Query        string `pulumi:"query"`
	// The number of minutes after the last notification before a monitor will re-notify
	RenotifyInterval *int `pulumi:"renotifyInterval"`
	// A boolean indicating whether this monitor needs a full window of data before it's evaluated.
	RequireFullWindow *bool `pulumi:"requireFullWindow"`
	// Each scope will be muted until the given POSIX timestamp or forever if the value is 0. Use `-1` if you want to unmute the scope. **Deprecated** The `silenced` parameter is being deprecated in favor of the downtime resource. This will be removed in the next major version of the provider Provider.
	//
	// Deprecated: use Downtime Resource instead
	Silenced map[string]interface{} `pulumi:"silenced"`
	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags []string `pulumi:"tags"`
	// A mapping containing `recoveryWindow` and `triggerWindow` values, e.g. `last15m` . Can only be used for, and are required for, anomaly monitors.
	ThresholdWindows *MonitorThresholdWindows `pulumi:"thresholdWindows"`
	Thresholds       *MonitorThresholds       `pulumi:"thresholds"`
	// The number of hours of the monitor not reporting data before it will automatically resolve
	TimeoutH *int   `pulumi:"timeoutH"`
	Type     string `pulumi:"type"`
	// If set to false, skip the validation call done during `plan` .
	Validate *bool `pulumi:"validate"`
}

// The set of arguments for constructing a Monitor resource.
type MonitorArgs struct {
	// A boolean indicating whether or not to include a list of log values which triggered the alert. Defaults to false. This is only used by log monitors.
	EnableLogsSample  pulumi.BoolPtrInput
	EscalationMessage pulumi.StringPtrInput
	// Time (in seconds) to delay evaluation, as a non-negative integer.
	EvaluationDelay pulumi.IntPtrInput
	// A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO, composite monitor).
	ForceDelete pulumi.BoolPtrInput
	// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to true.
	IncludeTags pulumi.BoolPtrInput
	// A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
	Locked  pulumi.BoolPtrInput
	Message pulumi.StringInput
	Name    pulumi.StringInput
	// Time (in seconds) to allow a host to boot and
	NewHostDelay pulumi.IntPtrInput
	// The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes.
	NoDataTimeframe pulumi.IntPtrInput
	// A boolean indicating whether tagged users will be notified on changes to this monitor.
	NotifyAudit pulumi.BoolPtrInput
	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults
	NotifyNoData pulumi.BoolPtrInput
	Priority     pulumi.IntPtrInput
	Query        pulumi.StringInput
	// The number of minutes after the last notification before a monitor will re-notify
	RenotifyInterval pulumi.IntPtrInput
	// A boolean indicating whether this monitor needs a full window of data before it's evaluated.
	RequireFullWindow pulumi.BoolPtrInput
	// Each scope will be muted until the given POSIX timestamp or forever if the value is 0. Use `-1` if you want to unmute the scope. **Deprecated** The `silenced` parameter is being deprecated in favor of the downtime resource. This will be removed in the next major version of the provider Provider.
	//
	// Deprecated: use Downtime Resource instead
	Silenced pulumi.MapInput
	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags pulumi.StringArrayInput
	// A mapping containing `recoveryWindow` and `triggerWindow` values, e.g. `last15m` . Can only be used for, and are required for, anomaly monitors.
	ThresholdWindows MonitorThresholdWindowsPtrInput
	Thresholds       MonitorThresholdsPtrInput
	// The number of hours of the monitor not reporting data before it will automatically resolve
	TimeoutH pulumi.IntPtrInput
	Type     pulumi.StringInput
	// If set to false, skip the validation call done during `plan` .
	Validate pulumi.BoolPtrInput
}

func (MonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorArgs)(nil)).Elem()
}

type MonitorInput interface {
	pulumi.Input

	ToMonitorOutput() MonitorOutput
	ToMonitorOutputWithContext(ctx context.Context) MonitorOutput
}

func (Monitor) ElementType() reflect.Type {
	return reflect.TypeOf((*Monitor)(nil)).Elem()
}

func (i Monitor) ToMonitorOutput() MonitorOutput {
	return i.ToMonitorOutputWithContext(context.Background())
}

func (i Monitor) ToMonitorOutputWithContext(ctx context.Context) MonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorOutput)
}

type MonitorOutput struct {
	*pulumi.OutputState
}

func (MonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorOutput)(nil)).Elem()
}

func (o MonitorOutput) ToMonitorOutput() MonitorOutput {
	return o
}

func (o MonitorOutput) ToMonitorOutputWithContext(ctx context.Context) MonitorOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MonitorOutput{})
}
