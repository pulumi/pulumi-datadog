// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Datadog monitor resource. This can be used to create and manage Datadog monitors.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := datadog.NewMonitor(ctx, "foo", &datadog.MonitorArgs{
// 			Name:              pulumi.String("Name for monitor foo"),
// 			Type:              pulumi.String("metric alert"),
// 			Message:           pulumi.String("Monitor triggered. Notify: @hipchat-channel"),
// 			EscalationMessage: pulumi.String("Escalation message @pagerduty"),
// 			Query:             pulumi.String("avg(last_1h):avg:aws.ec2.cpu{environment:foo,host:foo} by {host} > 4"),
// 			Thresholds: &datadog.MonitorThresholdsArgs{
// 				Ok:                pulumi.Float64(0),
// 				Warning:           pulumi.Float64(2),
// 				Warning_recovery:  pulumi.Float64(1),
// 				Critical:          pulumi.Float64(4),
// 				Critical_recovery: pulumi.Float64(3),
// 			},
// 			NotifyNoData:     pulumi.Bool(false),
// 			RenotifyInterval: pulumi.Int(60),
// 			NotifyAudit:      pulumi.Bool(false),
// 			TimeoutH:         pulumi.Int(60),
// 			IncludeTags:      pulumi.Bool(true),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("foo:bar"),
// 				pulumi.String("baz"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Silencing by Hand and by Downtimes
//
// There are two ways how to silence a single monitor:
//
// * Mute it by hand
// * Create a Downtime
//
// Both of these actions add a new value to the `silenced` map. This can be problematic if the `silenced` attribute doesn't contain them in your application, as they would be removed on next `pulumi up` invocation. In order to prevent that from happening, you can add following to your monitor:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		return nil
// 	})
// }
// ```
//
// The above will make sure that any changes to the `silenced` attribute are ignored.
//
// This issue doesn't apply to multi-monitor downtimes (those that don't contain `monitorId`), as these don't influence contents of the `silenced` attribute.
//
// ## Composite Monitors
//
// You can compose monitors of all types in order to define more specific alert conditions (see the [doc](https://docs.datadoghq.com/monitors/monitor_types/composite/)).
// You just need to reuse the ID of your `Monitor` resources.
// You can also compose any monitor with a `SyntheticsTest` by passing the computed `monitorId` attribute in the query.
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := datadog.NewMonitor(ctx, "bar", &datadog.MonitorArgs{
// 			Message: pulumi.String("This is a message"),
// 			Name:    pulumi.String("Composite Monitor"),
// 			Query:   pulumi.String(fmt.Sprintf("%v%v%v", datadog_monitor.Foo.Id, " || ", datadog_synthetics_test.Foo.Monitor_id)),
// 			Type:    pulumi.String("composite"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Monitor struct {
	pulumi.CustomResourceState

	// A boolean indicating whether or not to include a list of log values which triggered the alert. Defaults to false. This is only used by log monitors.
	// triggering tags into the title. Defaults to true.
	EnableLogsSample pulumi.BoolPtrOutput `pulumi:"enableLogsSample"`
	// A message to include with a re-notification. Supports the '@username'
	// notification allowed elsewhere.
	EscalationMessage pulumi.StringPtrOutput `pulumi:"escalationMessage"`
	// Time (in seconds) to delay evaluation, as a non-negative integer.
	// For example, if the value is set to 300 (5min), the timeframe is set to last5m and the time is 7:00,
	// the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled
	// metrics to ensure the monitor will always have data during evaluation.
	EvaluationDelay pulumi.IntOutput `pulumi:"evaluationDelay"`
	// A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. SLO, composite monitor).
	ForceDelete pulumi.BoolPtrOutput `pulumi:"forceDelete"`
	// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to true.
	IncludeTags pulumi.BoolPtrOutput `pulumi:"includeTags"`
	// A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
	Locked pulumi.BoolPtrOutput `pulumi:"locked"`
	// A message to include with notifications for this monitor.
	// Email notifications can be sent to specific users by using the same '@username' notation as events.
	Message pulumi.StringOutput `pulumi:"message"`
	// Name of Datadog monitor
	Name pulumi.StringOutput `pulumi:"name"`
	// Time (in seconds) to allow a host to boot and
	// applications to fully start before starting the evaluation of monitor
	// results. Should be a non negative integer. Defaults to 300.
	NewHostDelay pulumi.IntPtrOutput `pulumi:"newHostDelay"`
	// The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes.
	// We recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
	NoDataTimeframe pulumi.IntPtrOutput `pulumi:"noDataTimeframe"`
	// A boolean indicating whether tagged users will be notified on changes to this monitor.
	// Defaults to false.
	NotifyAudit pulumi.BoolPtrOutput `pulumi:"notifyAudit"`
	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults
	// to false.
	NotifyNoData pulumi.BoolPtrOutput `pulumi:"notifyNoData"`
	// The monitor query to notify on. Note this is not the same query you see in the UI and
	// the syntax is different depending on the monitor `type`, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for details. **Warning:** `pulumi preview` won't perform any validation of the query contents.
	Query pulumi.StringOutput `pulumi:"query"`
	// The number of minutes after the last notification before a monitor will re-notify
	// on the current status. It will only re-notify if it's not resolved.
	RenotifyInterval pulumi.IntPtrOutput `pulumi:"renotifyInterval"`
	// A boolean indicating whether this monitor needs a full window of data before it's evaluated.
	// We highly recommend you set this to False for sparse metrics, otherwise some evaluations will be skipped.
	// Default: True for "on average", "at all times" and "in total" aggregation. False otherwise.
	RequireFullWindow pulumi.BoolPtrOutput `pulumi:"requireFullWindow"`
	// Each scope will be muted until the given POSIX timestamp or forever if the value is 0. Use `-1` if you want to unmute the scope. **Deprecated** The `silenced` parameter is being deprecated in favor of the downtime resource.
	//
	// Deprecated: use Downtime Resource instead
	Silenced pulumi.MapOutput `pulumi:"silenced"`
	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// A mapping containing `recoveryWindow` and `triggerWindow` values, e.g. `last15m`. Can only be used for, and are required for, anomaly monitors.
	ThresholdWindows MonitorThresholdWindowsPtrOutput `pulumi:"thresholdWindows"`
	// * Metric alerts:
	//   A dictionary of thresholds by threshold type. Currently we have four threshold types for metric alerts: critical, critical recovery, warning, and warning recovery. Critical is defined in the query, but can also be specified in this option. Warning and recovery thresholds can only be specified using the thresholds option.
	//   Example usage:
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	// **Warning:** the `critical` threshold value must match the one contained in the `query` argument. The `threshold` from the previous example is valid along with a query like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 90` but
	// along with something like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 95` would make the Datadog API return a HTTP error 400, complaining "The value provided for parameter 'query' is invalid".
	// * Service checks:
	//   A dictionary of thresholds by status. Because service checks can have multiple thresholds, we don't define them directly in the query.
	//   Default values:
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	Thresholds MonitorThresholdsPtrOutput `pulumi:"thresholds"`
	// The number of hours of the monitor not reporting data before it will automatically resolve
	// from a triggered state. Defaults to false.
	TimeoutH pulumi.IntPtrOutput `pulumi:"timeoutH"`
	// The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) page. The available options are below. **Note**: The monitor type cannot be changed after a monitor is created.
	// * `metric alert`
	// * `service check`
	// * `event alert`
	// * `query alert`
	// * `composite`
	// * `log alert`
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMonitor registers a new resource with the given unique name, arguments, and options.
func NewMonitor(ctx *pulumi.Context,
	name string, args *MonitorArgs, opts ...pulumi.ResourceOption) (*Monitor, error) {
	if args == nil || args.Message == nil {
		return nil, errors.New("missing required argument 'Message'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Query == nil {
		return nil, errors.New("missing required argument 'Query'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &MonitorArgs{}
	}
	var resource Monitor
	err := ctx.RegisterResource("datadog:index/monitor:Monitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitor gets an existing Monitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitorState, opts ...pulumi.ResourceOption) (*Monitor, error) {
	var resource Monitor
	err := ctx.ReadResource("datadog:index/monitor:Monitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Monitor resources.
type monitorState struct {
	// A boolean indicating whether or not to include a list of log values which triggered the alert. Defaults to false. This is only used by log monitors.
	// triggering tags into the title. Defaults to true.
	EnableLogsSample *bool `pulumi:"enableLogsSample"`
	// A message to include with a re-notification. Supports the '@username'
	// notification allowed elsewhere.
	EscalationMessage *string `pulumi:"escalationMessage"`
	// Time (in seconds) to delay evaluation, as a non-negative integer.
	// For example, if the value is set to 300 (5min), the timeframe is set to last5m and the time is 7:00,
	// the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled
	// metrics to ensure the monitor will always have data during evaluation.
	EvaluationDelay *int `pulumi:"evaluationDelay"`
	// A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. SLO, composite monitor).
	ForceDelete *bool `pulumi:"forceDelete"`
	// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to true.
	IncludeTags *bool `pulumi:"includeTags"`
	// A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
	Locked *bool `pulumi:"locked"`
	// A message to include with notifications for this monitor.
	// Email notifications can be sent to specific users by using the same '@username' notation as events.
	Message *string `pulumi:"message"`
	// Name of Datadog monitor
	Name *string `pulumi:"name"`
	// Time (in seconds) to allow a host to boot and
	// applications to fully start before starting the evaluation of monitor
	// results. Should be a non negative integer. Defaults to 300.
	NewHostDelay *int `pulumi:"newHostDelay"`
	// The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes.
	// We recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
	NoDataTimeframe *int `pulumi:"noDataTimeframe"`
	// A boolean indicating whether tagged users will be notified on changes to this monitor.
	// Defaults to false.
	NotifyAudit *bool `pulumi:"notifyAudit"`
	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults
	// to false.
	NotifyNoData *bool `pulumi:"notifyNoData"`
	// The monitor query to notify on. Note this is not the same query you see in the UI and
	// the syntax is different depending on the monitor `type`, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for details. **Warning:** `pulumi preview` won't perform any validation of the query contents.
	Query *string `pulumi:"query"`
	// The number of minutes after the last notification before a monitor will re-notify
	// on the current status. It will only re-notify if it's not resolved.
	RenotifyInterval *int `pulumi:"renotifyInterval"`
	// A boolean indicating whether this monitor needs a full window of data before it's evaluated.
	// We highly recommend you set this to False for sparse metrics, otherwise some evaluations will be skipped.
	// Default: True for "on average", "at all times" and "in total" aggregation. False otherwise.
	RequireFullWindow *bool `pulumi:"requireFullWindow"`
	// Each scope will be muted until the given POSIX timestamp or forever if the value is 0. Use `-1` if you want to unmute the scope. **Deprecated** The `silenced` parameter is being deprecated in favor of the downtime resource.
	//
	// Deprecated: use Downtime Resource instead
	Silenced map[string]interface{} `pulumi:"silenced"`
	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags []string `pulumi:"tags"`
	// A mapping containing `recoveryWindow` and `triggerWindow` values, e.g. `last15m`. Can only be used for, and are required for, anomaly monitors.
	ThresholdWindows *MonitorThresholdWindows `pulumi:"thresholdWindows"`
	// * Metric alerts:
	//   A dictionary of thresholds by threshold type. Currently we have four threshold types for metric alerts: critical, critical recovery, warning, and warning recovery. Critical is defined in the query, but can also be specified in this option. Warning and recovery thresholds can only be specified using the thresholds option.
	//   Example usage:
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	// **Warning:** the `critical` threshold value must match the one contained in the `query` argument. The `threshold` from the previous example is valid along with a query like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 90` but
	// along with something like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 95` would make the Datadog API return a HTTP error 400, complaining "The value provided for parameter 'query' is invalid".
	// * Service checks:
	//   A dictionary of thresholds by status. Because service checks can have multiple thresholds, we don't define them directly in the query.
	//   Default values:
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	Thresholds *MonitorThresholds `pulumi:"thresholds"`
	// The number of hours of the monitor not reporting data before it will automatically resolve
	// from a triggered state. Defaults to false.
	TimeoutH *int `pulumi:"timeoutH"`
	// The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) page. The available options are below. **Note**: The monitor type cannot be changed after a monitor is created.
	// * `metric alert`
	// * `service check`
	// * `event alert`
	// * `query alert`
	// * `composite`
	// * `log alert`
	Type *string `pulumi:"type"`
}

type MonitorState struct {
	// A boolean indicating whether or not to include a list of log values which triggered the alert. Defaults to false. This is only used by log monitors.
	// triggering tags into the title. Defaults to true.
	EnableLogsSample pulumi.BoolPtrInput
	// A message to include with a re-notification. Supports the '@username'
	// notification allowed elsewhere.
	EscalationMessage pulumi.StringPtrInput
	// Time (in seconds) to delay evaluation, as a non-negative integer.
	// For example, if the value is set to 300 (5min), the timeframe is set to last5m and the time is 7:00,
	// the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled
	// metrics to ensure the monitor will always have data during evaluation.
	EvaluationDelay pulumi.IntPtrInput
	// A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. SLO, composite monitor).
	ForceDelete pulumi.BoolPtrInput
	// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to true.
	IncludeTags pulumi.BoolPtrInput
	// A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
	Locked pulumi.BoolPtrInput
	// A message to include with notifications for this monitor.
	// Email notifications can be sent to specific users by using the same '@username' notation as events.
	Message pulumi.StringPtrInput
	// Name of Datadog monitor
	Name pulumi.StringPtrInput
	// Time (in seconds) to allow a host to boot and
	// applications to fully start before starting the evaluation of monitor
	// results. Should be a non negative integer. Defaults to 300.
	NewHostDelay pulumi.IntPtrInput
	// The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes.
	// We recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
	NoDataTimeframe pulumi.IntPtrInput
	// A boolean indicating whether tagged users will be notified on changes to this monitor.
	// Defaults to false.
	NotifyAudit pulumi.BoolPtrInput
	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults
	// to false.
	NotifyNoData pulumi.BoolPtrInput
	// The monitor query to notify on. Note this is not the same query you see in the UI and
	// the syntax is different depending on the monitor `type`, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for details. **Warning:** `pulumi preview` won't perform any validation of the query contents.
	Query pulumi.StringPtrInput
	// The number of minutes after the last notification before a monitor will re-notify
	// on the current status. It will only re-notify if it's not resolved.
	RenotifyInterval pulumi.IntPtrInput
	// A boolean indicating whether this monitor needs a full window of data before it's evaluated.
	// We highly recommend you set this to False for sparse metrics, otherwise some evaluations will be skipped.
	// Default: True for "on average", "at all times" and "in total" aggregation. False otherwise.
	RequireFullWindow pulumi.BoolPtrInput
	// Each scope will be muted until the given POSIX timestamp or forever if the value is 0. Use `-1` if you want to unmute the scope. **Deprecated** The `silenced` parameter is being deprecated in favor of the downtime resource.
	//
	// Deprecated: use Downtime Resource instead
	Silenced pulumi.MapInput
	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags pulumi.StringArrayInput
	// A mapping containing `recoveryWindow` and `triggerWindow` values, e.g. `last15m`. Can only be used for, and are required for, anomaly monitors.
	ThresholdWindows MonitorThresholdWindowsPtrInput
	// * Metric alerts:
	//   A dictionary of thresholds by threshold type. Currently we have four threshold types for metric alerts: critical, critical recovery, warning, and warning recovery. Critical is defined in the query, but can also be specified in this option. Warning and recovery thresholds can only be specified using the thresholds option.
	//   Example usage:
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	// **Warning:** the `critical` threshold value must match the one contained in the `query` argument. The `threshold` from the previous example is valid along with a query like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 90` but
	// along with something like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 95` would make the Datadog API return a HTTP error 400, complaining "The value provided for parameter 'query' is invalid".
	// * Service checks:
	//   A dictionary of thresholds by status. Because service checks can have multiple thresholds, we don't define them directly in the query.
	//   Default values:
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	Thresholds MonitorThresholdsPtrInput
	// The number of hours of the monitor not reporting data before it will automatically resolve
	// from a triggered state. Defaults to false.
	TimeoutH pulumi.IntPtrInput
	// The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) page. The available options are below. **Note**: The monitor type cannot be changed after a monitor is created.
	// * `metric alert`
	// * `service check`
	// * `event alert`
	// * `query alert`
	// * `composite`
	// * `log alert`
	Type pulumi.StringPtrInput
}

func (MonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorState)(nil)).Elem()
}

type monitorArgs struct {
	// A boolean indicating whether or not to include a list of log values which triggered the alert. Defaults to false. This is only used by log monitors.
	// triggering tags into the title. Defaults to true.
	EnableLogsSample *bool `pulumi:"enableLogsSample"`
	// A message to include with a re-notification. Supports the '@username'
	// notification allowed elsewhere.
	EscalationMessage *string `pulumi:"escalationMessage"`
	// Time (in seconds) to delay evaluation, as a non-negative integer.
	// For example, if the value is set to 300 (5min), the timeframe is set to last5m and the time is 7:00,
	// the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled
	// metrics to ensure the monitor will always have data during evaluation.
	EvaluationDelay *int `pulumi:"evaluationDelay"`
	// A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. SLO, composite monitor).
	ForceDelete *bool `pulumi:"forceDelete"`
	// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to true.
	IncludeTags *bool `pulumi:"includeTags"`
	// A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
	Locked *bool `pulumi:"locked"`
	// A message to include with notifications for this monitor.
	// Email notifications can be sent to specific users by using the same '@username' notation as events.
	Message string `pulumi:"message"`
	// Name of Datadog monitor
	Name string `pulumi:"name"`
	// Time (in seconds) to allow a host to boot and
	// applications to fully start before starting the evaluation of monitor
	// results. Should be a non negative integer. Defaults to 300.
	NewHostDelay *int `pulumi:"newHostDelay"`
	// The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes.
	// We recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
	NoDataTimeframe *int `pulumi:"noDataTimeframe"`
	// A boolean indicating whether tagged users will be notified on changes to this monitor.
	// Defaults to false.
	NotifyAudit *bool `pulumi:"notifyAudit"`
	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults
	// to false.
	NotifyNoData *bool `pulumi:"notifyNoData"`
	// The monitor query to notify on. Note this is not the same query you see in the UI and
	// the syntax is different depending on the monitor `type`, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for details. **Warning:** `pulumi preview` won't perform any validation of the query contents.
	Query string `pulumi:"query"`
	// The number of minutes after the last notification before a monitor will re-notify
	// on the current status. It will only re-notify if it's not resolved.
	RenotifyInterval *int `pulumi:"renotifyInterval"`
	// A boolean indicating whether this monitor needs a full window of data before it's evaluated.
	// We highly recommend you set this to False for sparse metrics, otherwise some evaluations will be skipped.
	// Default: True for "on average", "at all times" and "in total" aggregation. False otherwise.
	RequireFullWindow *bool `pulumi:"requireFullWindow"`
	// Each scope will be muted until the given POSIX timestamp or forever if the value is 0. Use `-1` if you want to unmute the scope. **Deprecated** The `silenced` parameter is being deprecated in favor of the downtime resource.
	//
	// Deprecated: use Downtime Resource instead
	Silenced map[string]interface{} `pulumi:"silenced"`
	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags []string `pulumi:"tags"`
	// A mapping containing `recoveryWindow` and `triggerWindow` values, e.g. `last15m`. Can only be used for, and are required for, anomaly monitors.
	ThresholdWindows *MonitorThresholdWindows `pulumi:"thresholdWindows"`
	// * Metric alerts:
	//   A dictionary of thresholds by threshold type. Currently we have four threshold types for metric alerts: critical, critical recovery, warning, and warning recovery. Critical is defined in the query, but can also be specified in this option. Warning and recovery thresholds can only be specified using the thresholds option.
	//   Example usage:
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	// **Warning:** the `critical` threshold value must match the one contained in the `query` argument. The `threshold` from the previous example is valid along with a query like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 90` but
	// along with something like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 95` would make the Datadog API return a HTTP error 400, complaining "The value provided for parameter 'query' is invalid".
	// * Service checks:
	//   A dictionary of thresholds by status. Because service checks can have multiple thresholds, we don't define them directly in the query.
	//   Default values:
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	Thresholds *MonitorThresholds `pulumi:"thresholds"`
	// The number of hours of the monitor not reporting data before it will automatically resolve
	// from a triggered state. Defaults to false.
	TimeoutH *int `pulumi:"timeoutH"`
	// The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) page. The available options are below. **Note**: The monitor type cannot be changed after a monitor is created.
	// * `metric alert`
	// * `service check`
	// * `event alert`
	// * `query alert`
	// * `composite`
	// * `log alert`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Monitor resource.
type MonitorArgs struct {
	// A boolean indicating whether or not to include a list of log values which triggered the alert. Defaults to false. This is only used by log monitors.
	// triggering tags into the title. Defaults to true.
	EnableLogsSample pulumi.BoolPtrInput
	// A message to include with a re-notification. Supports the '@username'
	// notification allowed elsewhere.
	EscalationMessage pulumi.StringPtrInput
	// Time (in seconds) to delay evaluation, as a non-negative integer.
	// For example, if the value is set to 300 (5min), the timeframe is set to last5m and the time is 7:00,
	// the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled
	// metrics to ensure the monitor will always have data during evaluation.
	EvaluationDelay pulumi.IntPtrInput
	// A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. SLO, composite monitor).
	ForceDelete pulumi.BoolPtrInput
	// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to true.
	IncludeTags pulumi.BoolPtrInput
	// A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
	Locked pulumi.BoolPtrInput
	// A message to include with notifications for this monitor.
	// Email notifications can be sent to specific users by using the same '@username' notation as events.
	Message pulumi.StringInput
	// Name of Datadog monitor
	Name pulumi.StringInput
	// Time (in seconds) to allow a host to boot and
	// applications to fully start before starting the evaluation of monitor
	// results. Should be a non negative integer. Defaults to 300.
	NewHostDelay pulumi.IntPtrInput
	// The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes.
	// We recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
	NoDataTimeframe pulumi.IntPtrInput
	// A boolean indicating whether tagged users will be notified on changes to this monitor.
	// Defaults to false.
	NotifyAudit pulumi.BoolPtrInput
	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults
	// to false.
	NotifyNoData pulumi.BoolPtrInput
	// The monitor query to notify on. Note this is not the same query you see in the UI and
	// the syntax is different depending on the monitor `type`, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for details. **Warning:** `pulumi preview` won't perform any validation of the query contents.
	Query pulumi.StringInput
	// The number of minutes after the last notification before a monitor will re-notify
	// on the current status. It will only re-notify if it's not resolved.
	RenotifyInterval pulumi.IntPtrInput
	// A boolean indicating whether this monitor needs a full window of data before it's evaluated.
	// We highly recommend you set this to False for sparse metrics, otherwise some evaluations will be skipped.
	// Default: True for "on average", "at all times" and "in total" aggregation. False otherwise.
	RequireFullWindow pulumi.BoolPtrInput
	// Each scope will be muted until the given POSIX timestamp or forever if the value is 0. Use `-1` if you want to unmute the scope. **Deprecated** The `silenced` parameter is being deprecated in favor of the downtime resource.
	//
	// Deprecated: use Downtime Resource instead
	Silenced pulumi.MapInput
	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags pulumi.StringArrayInput
	// A mapping containing `recoveryWindow` and `triggerWindow` values, e.g. `last15m`. Can only be used for, and are required for, anomaly monitors.
	ThresholdWindows MonitorThresholdWindowsPtrInput
	// * Metric alerts:
	//   A dictionary of thresholds by threshold type. Currently we have four threshold types for metric alerts: critical, critical recovery, warning, and warning recovery. Critical is defined in the query, but can also be specified in this option. Warning and recovery thresholds can only be specified using the thresholds option.
	//   Example usage:
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	// **Warning:** the `critical` threshold value must match the one contained in the `query` argument. The `threshold` from the previous example is valid along with a query like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 90` but
	// along with something like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 95` would make the Datadog API return a HTTP error 400, complaining "The value provided for parameter 'query' is invalid".
	// * Service checks:
	//   A dictionary of thresholds by status. Because service checks can have multiple thresholds, we don't define them directly in the query.
	//   Default values:
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	Thresholds MonitorThresholdsPtrInput
	// The number of hours of the monitor not reporting data before it will automatically resolve
	// from a triggered state. Defaults to false.
	TimeoutH pulumi.IntPtrInput
	// The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) page. The available options are below. **Note**: The monitor type cannot be changed after a monitor is created.
	// * `metric alert`
	// * `service check`
	// * `event alert`
	// * `query alert`
	// * `composite`
	// * `log alert`
	Type pulumi.StringInput
}

func (MonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorArgs)(nil)).Elem()
}
