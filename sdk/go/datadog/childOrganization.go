// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog Child Organization resource. This can be used to create Datadog Child Organizations. To manage created organization use `OrganizationSettings`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.NewChildOrganization(ctx, "organization", &datadog.ChildOrganizationArgs{
//				Name: pulumi.String("foo-organization"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ChildOrganization struct {
	pulumi.CustomResourceState

	// Datadog API key.
	ApiKeys ChildOrganizationApiKeyArrayOutput `pulumi:"apiKeys"`
	// An application key with its associated metadata.
	ApplicationKeys ChildOrganizationApplicationKeyArrayOutput `pulumi:"applicationKeys"`
	// Description of the organization.
	Description pulumi.StringOutput `pulumi:"description"`
	// Name for Child Organization after creation.
	Name pulumi.StringOutput `pulumi:"name"`
	// The `publicId` of the organization you are operating within.
	PublicId pulumi.StringOutput `pulumi:"publicId"`
	// Organization settings
	Settings ChildOrganizationSettingArrayOutput `pulumi:"settings"`
	// Information about a user
	Users ChildOrganizationUserArrayOutput `pulumi:"users"`
}

// NewChildOrganization registers a new resource with the given unique name, arguments, and options.
func NewChildOrganization(ctx *pulumi.Context,
	name string, args *ChildOrganizationArgs, opts ...pulumi.ResourceOption) (*ChildOrganization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource ChildOrganization
	err := ctx.RegisterResource("datadog:index/childOrganization:ChildOrganization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChildOrganization gets an existing ChildOrganization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChildOrganization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChildOrganizationState, opts ...pulumi.ResourceOption) (*ChildOrganization, error) {
	var resource ChildOrganization
	err := ctx.ReadResource("datadog:index/childOrganization:ChildOrganization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChildOrganization resources.
type childOrganizationState struct {
	// Datadog API key.
	ApiKeys []ChildOrganizationApiKey `pulumi:"apiKeys"`
	// An application key with its associated metadata.
	ApplicationKeys []ChildOrganizationApplicationKey `pulumi:"applicationKeys"`
	// Description of the organization.
	Description *string `pulumi:"description"`
	// Name for Child Organization after creation.
	Name *string `pulumi:"name"`
	// The `publicId` of the organization you are operating within.
	PublicId *string `pulumi:"publicId"`
	// Organization settings
	Settings []ChildOrganizationSetting `pulumi:"settings"`
	// Information about a user
	Users []ChildOrganizationUser `pulumi:"users"`
}

type ChildOrganizationState struct {
	// Datadog API key.
	ApiKeys ChildOrganizationApiKeyArrayInput
	// An application key with its associated metadata.
	ApplicationKeys ChildOrganizationApplicationKeyArrayInput
	// Description of the organization.
	Description pulumi.StringPtrInput
	// Name for Child Organization after creation.
	Name pulumi.StringPtrInput
	// The `publicId` of the organization you are operating within.
	PublicId pulumi.StringPtrInput
	// Organization settings
	Settings ChildOrganizationSettingArrayInput
	// Information about a user
	Users ChildOrganizationUserArrayInput
}

func (ChildOrganizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*childOrganizationState)(nil)).Elem()
}

type childOrganizationArgs struct {
	// Name for Child Organization after creation.
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a ChildOrganization resource.
type ChildOrganizationArgs struct {
	// Name for Child Organization after creation.
	Name pulumi.StringInput
}

func (ChildOrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*childOrganizationArgs)(nil)).Elem()
}

type ChildOrganizationInput interface {
	pulumi.Input

	ToChildOrganizationOutput() ChildOrganizationOutput
	ToChildOrganizationOutputWithContext(ctx context.Context) ChildOrganizationOutput
}

func (*ChildOrganization) ElementType() reflect.Type {
	return reflect.TypeOf((**ChildOrganization)(nil)).Elem()
}

func (i *ChildOrganization) ToChildOrganizationOutput() ChildOrganizationOutput {
	return i.ToChildOrganizationOutputWithContext(context.Background())
}

func (i *ChildOrganization) ToChildOrganizationOutputWithContext(ctx context.Context) ChildOrganizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChildOrganizationOutput)
}

// ChildOrganizationArrayInput is an input type that accepts ChildOrganizationArray and ChildOrganizationArrayOutput values.
// You can construct a concrete instance of `ChildOrganizationArrayInput` via:
//
//	ChildOrganizationArray{ ChildOrganizationArgs{...} }
type ChildOrganizationArrayInput interface {
	pulumi.Input

	ToChildOrganizationArrayOutput() ChildOrganizationArrayOutput
	ToChildOrganizationArrayOutputWithContext(context.Context) ChildOrganizationArrayOutput
}

type ChildOrganizationArray []ChildOrganizationInput

func (ChildOrganizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChildOrganization)(nil)).Elem()
}

func (i ChildOrganizationArray) ToChildOrganizationArrayOutput() ChildOrganizationArrayOutput {
	return i.ToChildOrganizationArrayOutputWithContext(context.Background())
}

func (i ChildOrganizationArray) ToChildOrganizationArrayOutputWithContext(ctx context.Context) ChildOrganizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChildOrganizationArrayOutput)
}

// ChildOrganizationMapInput is an input type that accepts ChildOrganizationMap and ChildOrganizationMapOutput values.
// You can construct a concrete instance of `ChildOrganizationMapInput` via:
//
//	ChildOrganizationMap{ "key": ChildOrganizationArgs{...} }
type ChildOrganizationMapInput interface {
	pulumi.Input

	ToChildOrganizationMapOutput() ChildOrganizationMapOutput
	ToChildOrganizationMapOutputWithContext(context.Context) ChildOrganizationMapOutput
}

type ChildOrganizationMap map[string]ChildOrganizationInput

func (ChildOrganizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChildOrganization)(nil)).Elem()
}

func (i ChildOrganizationMap) ToChildOrganizationMapOutput() ChildOrganizationMapOutput {
	return i.ToChildOrganizationMapOutputWithContext(context.Background())
}

func (i ChildOrganizationMap) ToChildOrganizationMapOutputWithContext(ctx context.Context) ChildOrganizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChildOrganizationMapOutput)
}

type ChildOrganizationOutput struct{ *pulumi.OutputState }

func (ChildOrganizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChildOrganization)(nil)).Elem()
}

func (o ChildOrganizationOutput) ToChildOrganizationOutput() ChildOrganizationOutput {
	return o
}

func (o ChildOrganizationOutput) ToChildOrganizationOutputWithContext(ctx context.Context) ChildOrganizationOutput {
	return o
}

// Datadog API key.
func (o ChildOrganizationOutput) ApiKeys() ChildOrganizationApiKeyArrayOutput {
	return o.ApplyT(func(v *ChildOrganization) ChildOrganizationApiKeyArrayOutput { return v.ApiKeys }).(ChildOrganizationApiKeyArrayOutput)
}

// An application key with its associated metadata.
func (o ChildOrganizationOutput) ApplicationKeys() ChildOrganizationApplicationKeyArrayOutput {
	return o.ApplyT(func(v *ChildOrganization) ChildOrganizationApplicationKeyArrayOutput { return v.ApplicationKeys }).(ChildOrganizationApplicationKeyArrayOutput)
}

// Description of the organization.
func (o ChildOrganizationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ChildOrganization) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Name for Child Organization after creation.
func (o ChildOrganizationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ChildOrganization) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The `publicId` of the organization you are operating within.
func (o ChildOrganizationOutput) PublicId() pulumi.StringOutput {
	return o.ApplyT(func(v *ChildOrganization) pulumi.StringOutput { return v.PublicId }).(pulumi.StringOutput)
}

// Organization settings
func (o ChildOrganizationOutput) Settings() ChildOrganizationSettingArrayOutput {
	return o.ApplyT(func(v *ChildOrganization) ChildOrganizationSettingArrayOutput { return v.Settings }).(ChildOrganizationSettingArrayOutput)
}

// Information about a user
func (o ChildOrganizationOutput) Users() ChildOrganizationUserArrayOutput {
	return o.ApplyT(func(v *ChildOrganization) ChildOrganizationUserArrayOutput { return v.Users }).(ChildOrganizationUserArrayOutput)
}

type ChildOrganizationArrayOutput struct{ *pulumi.OutputState }

func (ChildOrganizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChildOrganization)(nil)).Elem()
}

func (o ChildOrganizationArrayOutput) ToChildOrganizationArrayOutput() ChildOrganizationArrayOutput {
	return o
}

func (o ChildOrganizationArrayOutput) ToChildOrganizationArrayOutputWithContext(ctx context.Context) ChildOrganizationArrayOutput {
	return o
}

func (o ChildOrganizationArrayOutput) Index(i pulumi.IntInput) ChildOrganizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ChildOrganization {
		return vs[0].([]*ChildOrganization)[vs[1].(int)]
	}).(ChildOrganizationOutput)
}

type ChildOrganizationMapOutput struct{ *pulumi.OutputState }

func (ChildOrganizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChildOrganization)(nil)).Elem()
}

func (o ChildOrganizationMapOutput) ToChildOrganizationMapOutput() ChildOrganizationMapOutput {
	return o
}

func (o ChildOrganizationMapOutput) ToChildOrganizationMapOutputWithContext(ctx context.Context) ChildOrganizationMapOutput {
	return o
}

func (o ChildOrganizationMapOutput) MapIndex(k pulumi.StringInput) ChildOrganizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ChildOrganization {
		return vs[0].(map[string]*ChildOrganization)[vs[1].(string)]
	}).(ChildOrganizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChildOrganizationInput)(nil)).Elem(), &ChildOrganization{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChildOrganizationArrayInput)(nil)).Elem(), ChildOrganizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChildOrganizationMapInput)(nil)).Elem(), ChildOrganizationMap{})
	pulumi.RegisterOutputType(ChildOrganizationOutput{})
	pulumi.RegisterOutputType(ChildOrganizationArrayOutput{})
	pulumi.RegisterOutputType(ChildOrganizationMapOutput{})
}
