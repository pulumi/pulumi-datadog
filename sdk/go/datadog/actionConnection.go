// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A connection that can be used in Actions, including in the Workflow Automation and App Builder products.
//
// ## Import
//
// ```sh
// $ pulumi import datadog:index/actionConnection:ActionConnection my_connection 11111111-2222-3333-4444-555555555555
// ```
type ActionConnection struct {
	pulumi.CustomResourceState

	// Configuration for an AWS connection
	Aws ActionConnectionAwsPtrOutput `pulumi:"aws"`
	// Configuration for an HTTP connection
	Http ActionConnectionHttpPtrOutput `pulumi:"http"`
	// Name of the connection
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewActionConnection registers a new resource with the given unique name, arguments, and options.
func NewActionConnection(ctx *pulumi.Context,
	name string, args *ActionConnectionArgs, opts ...pulumi.ResourceOption) (*ActionConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ActionConnection
	err := ctx.RegisterResource("datadog:index/actionConnection:ActionConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActionConnection gets an existing ActionConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActionConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActionConnectionState, opts ...pulumi.ResourceOption) (*ActionConnection, error) {
	var resource ActionConnection
	err := ctx.ReadResource("datadog:index/actionConnection:ActionConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActionConnection resources.
type actionConnectionState struct {
	// Configuration for an AWS connection
	Aws *ActionConnectionAws `pulumi:"aws"`
	// Configuration for an HTTP connection
	Http *ActionConnectionHttp `pulumi:"http"`
	// Name of the connection
	Name *string `pulumi:"name"`
}

type ActionConnectionState struct {
	// Configuration for an AWS connection
	Aws ActionConnectionAwsPtrInput
	// Configuration for an HTTP connection
	Http ActionConnectionHttpPtrInput
	// Name of the connection
	Name pulumi.StringPtrInput
}

func (ActionConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*actionConnectionState)(nil)).Elem()
}

type actionConnectionArgs struct {
	// Configuration for an AWS connection
	Aws *ActionConnectionAws `pulumi:"aws"`
	// Configuration for an HTTP connection
	Http *ActionConnectionHttp `pulumi:"http"`
	// Name of the connection
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a ActionConnection resource.
type ActionConnectionArgs struct {
	// Configuration for an AWS connection
	Aws ActionConnectionAwsPtrInput
	// Configuration for an HTTP connection
	Http ActionConnectionHttpPtrInput
	// Name of the connection
	Name pulumi.StringInput
}

func (ActionConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*actionConnectionArgs)(nil)).Elem()
}

type ActionConnectionInput interface {
	pulumi.Input

	ToActionConnectionOutput() ActionConnectionOutput
	ToActionConnectionOutputWithContext(ctx context.Context) ActionConnectionOutput
}

func (*ActionConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionConnection)(nil)).Elem()
}

func (i *ActionConnection) ToActionConnectionOutput() ActionConnectionOutput {
	return i.ToActionConnectionOutputWithContext(context.Background())
}

func (i *ActionConnection) ToActionConnectionOutputWithContext(ctx context.Context) ActionConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionConnectionOutput)
}

// ActionConnectionArrayInput is an input type that accepts ActionConnectionArray and ActionConnectionArrayOutput values.
// You can construct a concrete instance of `ActionConnectionArrayInput` via:
//
//	ActionConnectionArray{ ActionConnectionArgs{...} }
type ActionConnectionArrayInput interface {
	pulumi.Input

	ToActionConnectionArrayOutput() ActionConnectionArrayOutput
	ToActionConnectionArrayOutputWithContext(context.Context) ActionConnectionArrayOutput
}

type ActionConnectionArray []ActionConnectionInput

func (ActionConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionConnection)(nil)).Elem()
}

func (i ActionConnectionArray) ToActionConnectionArrayOutput() ActionConnectionArrayOutput {
	return i.ToActionConnectionArrayOutputWithContext(context.Background())
}

func (i ActionConnectionArray) ToActionConnectionArrayOutputWithContext(ctx context.Context) ActionConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionConnectionArrayOutput)
}

// ActionConnectionMapInput is an input type that accepts ActionConnectionMap and ActionConnectionMapOutput values.
// You can construct a concrete instance of `ActionConnectionMapInput` via:
//
//	ActionConnectionMap{ "key": ActionConnectionArgs{...} }
type ActionConnectionMapInput interface {
	pulumi.Input

	ToActionConnectionMapOutput() ActionConnectionMapOutput
	ToActionConnectionMapOutputWithContext(context.Context) ActionConnectionMapOutput
}

type ActionConnectionMap map[string]ActionConnectionInput

func (ActionConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionConnection)(nil)).Elem()
}

func (i ActionConnectionMap) ToActionConnectionMapOutput() ActionConnectionMapOutput {
	return i.ToActionConnectionMapOutputWithContext(context.Background())
}

func (i ActionConnectionMap) ToActionConnectionMapOutputWithContext(ctx context.Context) ActionConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionConnectionMapOutput)
}

type ActionConnectionOutput struct{ *pulumi.OutputState }

func (ActionConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionConnection)(nil)).Elem()
}

func (o ActionConnectionOutput) ToActionConnectionOutput() ActionConnectionOutput {
	return o
}

func (o ActionConnectionOutput) ToActionConnectionOutputWithContext(ctx context.Context) ActionConnectionOutput {
	return o
}

// Configuration for an AWS connection
func (o ActionConnectionOutput) Aws() ActionConnectionAwsPtrOutput {
	return o.ApplyT(func(v *ActionConnection) ActionConnectionAwsPtrOutput { return v.Aws }).(ActionConnectionAwsPtrOutput)
}

// Configuration for an HTTP connection
func (o ActionConnectionOutput) Http() ActionConnectionHttpPtrOutput {
	return o.ApplyT(func(v *ActionConnection) ActionConnectionHttpPtrOutput { return v.Http }).(ActionConnectionHttpPtrOutput)
}

// Name of the connection
func (o ActionConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type ActionConnectionArrayOutput struct{ *pulumi.OutputState }

func (ActionConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionConnection)(nil)).Elem()
}

func (o ActionConnectionArrayOutput) ToActionConnectionArrayOutput() ActionConnectionArrayOutput {
	return o
}

func (o ActionConnectionArrayOutput) ToActionConnectionArrayOutputWithContext(ctx context.Context) ActionConnectionArrayOutput {
	return o
}

func (o ActionConnectionArrayOutput) Index(i pulumi.IntInput) ActionConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActionConnection {
		return vs[0].([]*ActionConnection)[vs[1].(int)]
	}).(ActionConnectionOutput)
}

type ActionConnectionMapOutput struct{ *pulumi.OutputState }

func (ActionConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionConnection)(nil)).Elem()
}

func (o ActionConnectionMapOutput) ToActionConnectionMapOutput() ActionConnectionMapOutput {
	return o
}

func (o ActionConnectionMapOutput) ToActionConnectionMapOutputWithContext(ctx context.Context) ActionConnectionMapOutput {
	return o
}

func (o ActionConnectionMapOutput) MapIndex(k pulumi.StringInput) ActionConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActionConnection {
		return vs[0].(map[string]*ActionConnection)[vs[1].(string)]
	}).(ActionConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActionConnectionInput)(nil)).Elem(), &ActionConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionConnectionArrayInput)(nil)).Elem(), ActionConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionConnectionMapInput)(nil)).Elem(), ActionConnectionMap{})
	pulumi.RegisterOutputType(ActionConnectionOutput{})
	pulumi.RegisterOutputType(ActionConnectionArrayOutput{})
	pulumi.RegisterOutputType(ActionConnectionMapOutput{})
}
