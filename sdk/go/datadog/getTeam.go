// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to retrieve information about an existing Datadog team.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.LookupTeam(ctx, &datadog.LookupTeamArgs{
//				TeamId: pulumi.StringRef("e6723c40-edb1-11ed-b816-da7ad0900002"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTeam(ctx *pulumi.Context, args *LookupTeamArgs, opts ...pulumi.InvokeOption) (*LookupTeamResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTeamResult
	err := ctx.Invoke("datadog:index/getTeam:getTeam", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTeam.
type LookupTeamArgs struct {
	// Search query. Can be team name, team handle, or email of team member.
	FilterKeyword *string `pulumi:"filterKeyword"`
	// The team's identifier.
	TeamId *string `pulumi:"teamId"`
}

// A collection of values returned by getTeam.
type LookupTeamResult struct {
	// Free-form markdown description/content for the team's homepage.
	Description string `pulumi:"description"`
	// Search query. Can be team name, team handle, or email of team member.
	FilterKeyword *string `pulumi:"filterKeyword"`
	// The team's handle.
	Handle string `pulumi:"handle"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// The number of links belonging to the team.
	LinkCount int `pulumi:"linkCount"`
	// The name of the team.
	Name string `pulumi:"name"`
	// A brief summary of the team, derived from the `description`.
	Summary string `pulumi:"summary"`
	// The team's identifier.
	TeamId string `pulumi:"teamId"`
	// The number of users belonging to the team.
	UserCount int `pulumi:"userCount"`
}

func LookupTeamOutput(ctx *pulumi.Context, args LookupTeamOutputArgs, opts ...pulumi.InvokeOption) LookupTeamResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTeamResult, error) {
			args := v.(LookupTeamArgs)
			r, err := LookupTeam(ctx, &args, opts...)
			var s LookupTeamResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTeamResultOutput)
}

// A collection of arguments for invoking getTeam.
type LookupTeamOutputArgs struct {
	// Search query. Can be team name, team handle, or email of team member.
	FilterKeyword pulumi.StringPtrInput `pulumi:"filterKeyword"`
	// The team's identifier.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
}

func (LookupTeamOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTeamArgs)(nil)).Elem()
}

// A collection of values returned by getTeam.
type LookupTeamResultOutput struct{ *pulumi.OutputState }

func (LookupTeamResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTeamResult)(nil)).Elem()
}

func (o LookupTeamResultOutput) ToLookupTeamResultOutput() LookupTeamResultOutput {
	return o
}

func (o LookupTeamResultOutput) ToLookupTeamResultOutputWithContext(ctx context.Context) LookupTeamResultOutput {
	return o
}

func (o LookupTeamResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupTeamResult] {
	return pulumix.Output[LookupTeamResult]{
		OutputState: o.OutputState,
	}
}

// Free-form markdown description/content for the team's homepage.
func (o LookupTeamResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Description }).(pulumi.StringOutput)
}

// Search query. Can be team name, team handle, or email of team member.
func (o LookupTeamResultOutput) FilterKeyword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTeamResult) *string { return v.FilterKeyword }).(pulumi.StringPtrOutput)
}

// The team's handle.
func (o LookupTeamResultOutput) Handle() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Handle }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o LookupTeamResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Id }).(pulumi.StringOutput)
}

// The number of links belonging to the team.
func (o LookupTeamResultOutput) LinkCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTeamResult) int { return v.LinkCount }).(pulumi.IntOutput)
}

// The name of the team.
func (o LookupTeamResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Name }).(pulumi.StringOutput)
}

// A brief summary of the team, derived from the `description`.
func (o LookupTeamResultOutput) Summary() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Summary }).(pulumi.StringOutput)
}

// The team's identifier.
func (o LookupTeamResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.TeamId }).(pulumi.StringOutput)
}

// The number of users belonging to the team.
func (o LookupTeamResultOutput) UserCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTeamResult) int { return v.UserCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTeamResultOutput{})
}
