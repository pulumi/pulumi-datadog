// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog dashboard JSON resource. This can be used to create and manage Datadog dashboards using the JSON definition.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.NewDashboardJson(ctx, "dashboardJson", &datadog.DashboardJsonArgs{
//				Dashboard: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "   \"title\":\"Ordered Layout Dashboard\",\n", "   \"description\":\"Created using the Datadog provider in Terraform\",\n", "   \"widgets\":[\n", "      {\n", "         \"id\":719369537777170,\n", "         \"definition\":{\n", "            \"title\":\"Widget Title\",\n", "            \"type\":\"alert_graph\",\n", "            \"alert_id\":\"895605\",\n", "            \"viz_type\":\"timeseries\"\n", "         }\n", "      },\n", "      {\n", "         \"id\":2306240030393868,\n", "         \"definition\":{\n", "            \"title\":\"Widget Title\",\n", "            \"type\":\"alert_value\",\n", "            \"alert_id\":\"895605\",\n", "            \"unit\":\"b\",\n", "            \"text_align\":\"center\",\n", "            \"precision\":3\n", "         }\n", "      },\n", "      {\n", "         \"id\":6990998850881326,\n", "         \"definition\":{\n", "            \"title\":\"Widget Title\",\n", "            \"type\":\"alert_value\",\n", "            \"alert_id\":\"895605\",\n", "            \"unit\":\"b\",\n", "            \"text_align\":\"center\",\n", "            \"precision\":3\n", "         }\n", "      },\n", "      {\n", "         \"id\":3351284044659007,\n", "         \"definition\":{\n", "            \"title\":\"Widget Title\",\n", "            \"type\":\"change\",\n", "            \"requests\":[\n", "               {\n", "                  \"q\":\"avg:system.load.1{env:staging} by {account}\",\n", "                  \"compare_to\":\"week_before\",\n", "                  \"change_type\":\"absolute\",\n", "                  \"order_dir\":\"desc\",\n", "                  \"increase_good\":true,\n", "                  \"order_by\":\"name\",\n", "                  \"show_present\":true\n", "               }\n", "            ]\n", "         }\n", "      },\n", "      {\n", "         \"id\":6450290622996182,\n", "         \"definition\":{\n", "            \"title\":\"Widget Title\",\n", "            \"show_legend\":false,\n", "            \"type\":\"distribution\",\n", "            \"requests\":[\n", "               {\n", "                  \"q\":\"avg:system.load.1{env:staging} by {account}\",\n", "                  \"style\":{\n", "                     \"palette\":\"warm\"\n", "                  }\n", "               }\n", "            ]\n", "         }\n", "      },\n", "      {\n", "         \"id\":4902842646291536,\n", "         \"definition\":{\n", "            \"title\":\"Widget Title\",\n", "            \"type\":\"check_status\",\n", "            \"check\":\"aws.ecs.agent_connected\",\n", "            \"grouping\":\"cluster\",\n", "            \"group_by\":[\n", "               \"account\",\n", "               \"cluster\"\n", "            ],\n", "            \"tags\":[\n", "               \"account:demo\",\n", "               \"cluster:awseb-ruthebdog-env-8-dn3m6u3gvk\"\n", "            ]\n", "         }\n", "      },\n", "      {\n", "         \"id\":6392349954822644,\n", "         \"definition\":{\n", "            \"title\":\"Widget Title\",\n", "            \"show_legend\":false,\n", "            \"type\":\"heatmap\",\n", "            \"yaxis\":{\n", "               \"scale\":\"sqrt\",\n", "               \"include_zero\":true,\n", "               \"min\":\"1\",\n", "               \"max\":\"2\"\n", "            },\n", "            \"requests\":[\n", "               {\n", "                  \"q\":\"avg:system.load.1{env:staging} by {account}\",\n", "                  \"style\":{\n", "                     \"palette\":\"warm\"\n", "                  }\n", "               }\n", "            ]\n", "         }\n", "      },\n", "      {\n", "         \"id\":5222961478940988,\n", "         \"definition\":{\n", "            \"title\":\"Widget Title\",\n", "            \"type\":\"hostmap\",\n", "            \"requests\":{\n", "               \"fill\":{\n", "                  \"q\":\"avg:system.load.1{*} by {host}\"\n", "               },\n", "               \"size\":{\n", "                  \"q\":\"avg:memcache.uptime{*} by {host}\"\n", "               }\n", "            },\n", "            \"node_type\":\"container\",\n", "            \"no_metric_hosts\":true,\n", "            \"no_group_hosts\":true,\n", "            \"group\":[\n", "               \"host\",\n", "               \"region\"\n", "            ],\n", "            \"scope\":[\n", "               \"region:us-east-1\",\n", "               \"aws_account:727006795293\"\n", "            ],\n", "            \"style\":{\n", "               \"palette\":\"yellow_to_green\",\n", "               \"palette_flip\":true,\n", "               \"fill_min\":\"10\",\n", "               \"fill_max\":\"20\"\n", "            }\n", "         }\n", "      },\n", "      {\n", "         \"id\":8121199734227072,\n", "         \"definition\":{\n", "            \"type\":\"note\",\n", "            \"content\":\"note text\",\n", "            \"background_color\":\"pink\",\n", "            \"font_size\":\"14\",\n", "            \"text_align\":\"center\",\n", "            \"show_tick\":true,\n", "            \"tick_pos\":\"50", "%", "\",\n", "            \"tick_edge\":\"left\"\n", "         }\n", "      },\n", "      {\n", "         \"id\":1775856835833038,\n", "         \"definition\":{\n", "            \"title\":\"Widget Title\",\n", "            \"type\":\"query_value\",\n", "            \"requests\":[\n", "               {\n", "                  \"q\":\"avg:system.load.1{env:staging} by {account}\",\n", "                  \"aggregator\":\"sum\",\n", "                  \"conditional_formats\":[\n", "                     {\n", "                        \"hide_value\":false,\n", "                        \"comparator\":\"<\",\n", "                        \"palette\":\"white_on_green\",\n", "                        \"value\":2\n", "                     },\n", "                     {\n", "                        \"hide_value\":false,\n", "                        \"comparator\":\">\",\n", "                        \"palette\":\"white_on_red\",\n", "                        \"value\":2.2\n", "                     }\n", "                  ]\n", "               }\n", "            ],\n", "            \"autoscale\":true,\n", "            \"custom_unit\":\"xx\",\n", "            \"text_align\":\"right\",\n", "            \"precision\":4\n", "         }\n", "      },\n", "      {\n", "         \"id\":8461455966625581,\n", "         \"definition\":{\n", "            \"title\":\"Widget Title\",\n", "            \"type\":\"query_table\",\n", "            \"requests\":[\n", "               {\n", "                  \"q\":\"avg:system.load.1{env:staging} by {account}\",\n", "                  \"aggregator\":\"sum\",\n", "                  \"conditional_formats\":[\n", "                     {\n", "                        \"hide_value\":false,\n", "                        \"comparator\":\"<\",\n", "                        \"palette\":\"white_on_green\",\n", "                        \"value\":2\n", "                     },\n", "                     {\n", "                        \"hide_value\":false,\n", "                        \"comparator\":\">\",\n", "                        \"palette\":\"white_on_red\",\n", "                        \"value\":2.2\n", "                     }\n", "                  ],\n", "                  \"limit\":10\n", "               }\n", "            ]\n", "         }\n", "      },\n", "      {\n", "         \"id\":8660006349418736,\n", "         \"definition\":{\n", "            \"title\":\"Widget Title\",\n", "            \"type\":\"scatterplot\",\n", "            \"requests\":{\n", "               \"x\":{\n", "                  \"q\":\"avg:system.cpu.user{*} by {service, account}\",\n", "                  \"aggregator\":\"max\"\n", "               },\n", "               \"y\":{\n", "                  \"q\":\"avg:system.mem.used{*} by {service, account}\",\n", "                  \"aggregator\":\"min\"\n", "               }\n", "            },\n", "            \"xaxis\":{\n", "               \"scale\":\"pow\",\n", "               \"label\":\"x\",\n", "               \"include_zero\":true,\n", "               \"min\":\"1\",\n", "               \"max\":\"2000\"\n", "            },\n", "            \"yaxis\":{\n", "               \"scale\":\"log\",\n", "               \"label\":\"y\",\n", "               \"include_zero\":false,\n", "               \"min\":\"5\",\n", "               \"max\":\"2222\"\n", "            },\n", "            \"color_by_groups\":[\n", "               \"account\",\n", "               \"apm-role-group\"\n", "            ]\n", "         }\n", "      },\n", "      {\n", "         \"id\":1669590772917638,\n", "         \"definition\":{\n", "            \"title\":\"env: prod, datacenter:dc1, service: master-db\",\n", "            \"title_size\":\"16\",\n", "            \"title_align\":\"left\",\n", "            \"type\":\"servicemap\",\n", "            \"service\":\"master-db\",\n", "            \"filters\":[\n", "               \"env:prod\",\n", "               \"datacenter:dc1\"\n", "            ]\n", "         }\n", "      },\n", "      {\n", "         \"id\":2138829058361817,\n", "         \"definition\":{\n", "            \"title\":\"Widget Title\",\n", "            \"show_legend\":true,\n", "            \"legend_size\":\"2\",\n", "            \"type\":\"timeseries\",\n", "            \"requests\":[\n", "               {\n", "                  \"q\":\"avg:system.cpu.user{app:general} by {env}\",\n", "                  \"on_right_yaxis\":false,\n", "                  \"metadata\":[\n", "                     {\n", "                        \"expression\":\"avg:system.cpu.user{app:general} by {env}\",\n", "                        \"alias_name\":\"Alpha\"\n", "                     }\n", "                  ],\n", "                  \"style\":{\n", "                     \"palette\":\"warm\",\n", "                     \"line_type\":\"dashed\",\n", "                     \"line_width\":\"thin\"\n", "                  },\n", "                  \"display_type\":\"line\"\n", "               },\n", "               {\n", "                  \"on_right_yaxis\":false,\n", "                  \"log_query\":{\n", "                     \"index\":\"mcnulty\",\n", "                     \"search\":{\n", "                        \"query\":\"status:info\"\n", "                     },\n", "                     \"group_by\":[\n", "                        {\n", "                           \"facet\":\"host\",\n", "                           \"sort\":{\n", "                              \"facet\":\"@duration\",\n", "                              \"aggregation\":\"avg\",\n", "                              \"order\":\"desc\"\n", "                           },\n", "                           \"limit\":10\n", "                        }\n", "                     ],\n", "                     \"compute\":{\n", "                        \"facet\":\"@duration\",\n", "                        \"interval\":5000,\n", "                        \"aggregation\":\"avg\"\n", "                     }\n", "                  },\n", "                  \"display_type\":\"area\"\n", "               },\n", "               {\n", "                  \"on_right_yaxis\":false,\n", "                  \"apm_query\":{\n", "                     \"index\":\"apm-search\",\n", "                     \"search\":{\n", "                        \"query\":\"type:web\"\n", "                     },\n", "                     \"group_by\":[\n", "                        {\n", "                           \"facet\":\"resource_name\",\n", "                           \"sort\":{\n", "                              \"facet\":\"@string_query.interval\",\n", "                              \"aggregation\":\"avg\",\n", "                              \"order\":\"desc\"\n", "                           },\n", "                           \"limit\":50\n", "                        }\n", "                     ],\n", "                     \"compute\":{\n", "                        \"facet\":\"@duration\",\n", "                        \"interval\":5000,\n", "                        \"aggregation\":\"avg\"\n", "                     }\n", "                  },\n", "                  \"display_type\":\"bars\"\n", "               },\n", "               {\n", "                  \"on_right_yaxis\":false,\n", "                  \"process_query\":{\n", "                     \"search_by\":\"error\",\n", "                     \"metric\":\"process.stat.cpu.total_pct\",\n", "                     \"limit\":50,\n", "                     \"filter_by\":[\n", "                        \"active\"\n", "                     ]\n", "                  },\n", "                  \"display_type\":\"area\"\n", "               }\n", "            ],\n", "            \"yaxis\":{\n", "               \"scale\":\"log\",\n", "               \"include_zero\":false,\n", "               \"max\":\"100\"\n", "            },\n", "            \"events\":[\n", "               {\n", "                  \"q\":\"sources:test tags:1\"\n", "               },\n", "               {\n", "                  \"q\":\"sources:test tags:2\"\n", "               }\n", "            ],\n", "            \"markers\":[\n", "               {\n", "                  \"label\":\" z=6 \",\n", "                  \"value\":\"y = 4\",\n", "                  \"display_type\":\"error dashed\"\n", "               },\n", "               {\n", "                  \"label\":\" x=8 \",\n", "                  \"value\":\"10 < y < 999\",\n", "                  \"display_type\":\"ok solid\"\n", "               }\n", "            ]\n", "         }\n", "      },\n", "      {\n", "         \"id\":7307171374656551,\n", "         \"definition\":{\n", "            \"title\":\"Widget Title\",\n", "            \"type\":\"toplist\",\n", "            \"requests\":[\n", "               {\n", "                  \"q\":\"avg:system.cpu.user{app:general} by {env}\",\n", "                  \"conditional_formats\":[\n", "                     {\n", "                        \"hide_value\":false,\n", "                        \"comparator\":\"<\",\n", "                        \"palette\":\"white_on_green\",\n", "                        \"value\":2\n", "                     },\n", "                     {\n", "                        \"hide_value\":false,\n", "                        \"comparator\":\">\",\n", "                        \"palette\":\"white_on_red\",\n", "                        \"value\":2.2\n", "                     }\n", "                  ]\n", "               }\n", "            ]\n", "         }\n", "      },\n", "      {\n", "         \"id\":7086674838553258,\n", "         \"definition\":{\n", "            \"title\":\"Group Widget\",\n", "            \"type\":\"group\",\n", "            \"layout_type\":\"ordered\",\n", "            \"widgets\":[\n", "               {\n", "                  \"id\":3726092277657502,\n", "                  \"definition\":{\n", "                     \"type\":\"note\",\n", "                     \"content\":\"cluster note widget\",\n", "                     \"background_color\":\"pink\",\n", "                     \"font_size\":\"14\",\n", "                     \"text_align\":\"center\",\n", "                     \"show_tick\":true,\n", "                     \"tick_pos\":\"50", "%", "\",\n", "                     \"tick_edge\":\"left\"\n", "                  }\n", "               },\n", "               {\n", "                  \"id\":6376384650558057,\n", "                  \"definition\":{\n", "                     \"title\":\"Alert Graph\",\n", "                     \"type\":\"alert_graph\",\n", "                     \"alert_id\":\"123\",\n", "                     \"viz_type\":\"toplist\"\n", "                  }\n", "               }\n", "            ]\n", "         }\n", "      },\n", "      {\n", "         \"id\":4668903563678912,\n", "         \"definition\":{\n", "            \"title\":\"Widget Title\",\n", "            \"type\":\"slo\",\n", "            \"view_type\":\"detail\",\n", "            \"time_windows\":[\n", "               \"7d\",\n", "               \"previous_week\"\n", "            ],\n", "            \"slo_id\":\"56789\",\n", "            \"show_error_budget\":true,\n", "            \"view_mode\":\"overall\",\n", "            \"global_time_target\":\"0\"\n", "         }\n", "      }\n", "   ],\n", "   \"template_variables\":[\n", "      {\n", "         \"name\":\"var_1\",\n", "         \"default\":\"aws\",\n", "         \"prefix\":\"host\"\n", "      },\n", "      {\n", "         \"name\":\"var_2\",\n", "         \"default\":\"autoscaling\",\n", "         \"prefix\":\"service_name\"\n", "      }\n", "   ],\n", "   \"layout_type\":\"ordered\",\n", "   \"is_read_only\":true,\n", "   \"notify_list\":[\n", "\n", "   ],\n", "   \"template_variable_presets\":[\n", "      {\n", "         \"name\":\"preset_1\",\n", "         \"template_variables\":[\n", "            {\n", "               \"name\":\"var_1\",\n", "               \"value\":\"host.dc\"\n", "            },\n", "            {\n", "               \"name\":\"var_2\",\n", "               \"value\":\"my_service\"\n", "            }\n", "         ]\n", "      }\n", "   ]\n", "}\n", "\n")),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DashboardJson struct {
	pulumi.CustomResourceState

	// The JSON formatted definition of the Dashboard.
	Dashboard pulumi.StringOutput `pulumi:"dashboard"`
	// The list of dashboard lists this dashboard belongs to.
	DashboardLists pulumi.IntArrayOutput `pulumi:"dashboardLists"`
	// The list of dashboard lists this dashboard should be removed from. Internal only.
	DashboardListsRemoveds pulumi.IntArrayOutput `pulumi:"dashboardListsRemoveds"`
	// The URL of the dashboard.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewDashboardJson registers a new resource with the given unique name, arguments, and options.
func NewDashboardJson(ctx *pulumi.Context,
	name string, args *DashboardJsonArgs, opts ...pulumi.ResourceOption) (*DashboardJson, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dashboard == nil {
		return nil, errors.New("invalid value for required argument 'Dashboard'")
	}
	var resource DashboardJson
	err := ctx.RegisterResource("datadog:index/dashboardJson:DashboardJson", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboardJson gets an existing DashboardJson resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboardJson(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardJsonState, opts ...pulumi.ResourceOption) (*DashboardJson, error) {
	var resource DashboardJson
	err := ctx.ReadResource("datadog:index/dashboardJson:DashboardJson", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DashboardJson resources.
type dashboardJsonState struct {
	// The JSON formatted definition of the Dashboard.
	Dashboard *string `pulumi:"dashboard"`
	// The list of dashboard lists this dashboard belongs to.
	DashboardLists []int `pulumi:"dashboardLists"`
	// The list of dashboard lists this dashboard should be removed from. Internal only.
	DashboardListsRemoveds []int `pulumi:"dashboardListsRemoveds"`
	// The URL of the dashboard.
	Url *string `pulumi:"url"`
}

type DashboardJsonState struct {
	// The JSON formatted definition of the Dashboard.
	Dashboard pulumi.StringPtrInput
	// The list of dashboard lists this dashboard belongs to.
	DashboardLists pulumi.IntArrayInput
	// The list of dashboard lists this dashboard should be removed from. Internal only.
	DashboardListsRemoveds pulumi.IntArrayInput
	// The URL of the dashboard.
	Url pulumi.StringPtrInput
}

func (DashboardJsonState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardJsonState)(nil)).Elem()
}

type dashboardJsonArgs struct {
	// The JSON formatted definition of the Dashboard.
	Dashboard string `pulumi:"dashboard"`
	// The list of dashboard lists this dashboard belongs to.
	DashboardLists []int `pulumi:"dashboardLists"`
	// The URL of the dashboard.
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a DashboardJson resource.
type DashboardJsonArgs struct {
	// The JSON formatted definition of the Dashboard.
	Dashboard pulumi.StringInput
	// The list of dashboard lists this dashboard belongs to.
	DashboardLists pulumi.IntArrayInput
	// The URL of the dashboard.
	Url pulumi.StringPtrInput
}

func (DashboardJsonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardJsonArgs)(nil)).Elem()
}

type DashboardJsonInput interface {
	pulumi.Input

	ToDashboardJsonOutput() DashboardJsonOutput
	ToDashboardJsonOutputWithContext(ctx context.Context) DashboardJsonOutput
}

func (*DashboardJson) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardJson)(nil)).Elem()
}

func (i *DashboardJson) ToDashboardJsonOutput() DashboardJsonOutput {
	return i.ToDashboardJsonOutputWithContext(context.Background())
}

func (i *DashboardJson) ToDashboardJsonOutputWithContext(ctx context.Context) DashboardJsonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardJsonOutput)
}

// DashboardJsonArrayInput is an input type that accepts DashboardJsonArray and DashboardJsonArrayOutput values.
// You can construct a concrete instance of `DashboardJsonArrayInput` via:
//
//	DashboardJsonArray{ DashboardJsonArgs{...} }
type DashboardJsonArrayInput interface {
	pulumi.Input

	ToDashboardJsonArrayOutput() DashboardJsonArrayOutput
	ToDashboardJsonArrayOutputWithContext(context.Context) DashboardJsonArrayOutput
}

type DashboardJsonArray []DashboardJsonInput

func (DashboardJsonArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardJson)(nil)).Elem()
}

func (i DashboardJsonArray) ToDashboardJsonArrayOutput() DashboardJsonArrayOutput {
	return i.ToDashboardJsonArrayOutputWithContext(context.Background())
}

func (i DashboardJsonArray) ToDashboardJsonArrayOutputWithContext(ctx context.Context) DashboardJsonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardJsonArrayOutput)
}

// DashboardJsonMapInput is an input type that accepts DashboardJsonMap and DashboardJsonMapOutput values.
// You can construct a concrete instance of `DashboardJsonMapInput` via:
//
//	DashboardJsonMap{ "key": DashboardJsonArgs{...} }
type DashboardJsonMapInput interface {
	pulumi.Input

	ToDashboardJsonMapOutput() DashboardJsonMapOutput
	ToDashboardJsonMapOutputWithContext(context.Context) DashboardJsonMapOutput
}

type DashboardJsonMap map[string]DashboardJsonInput

func (DashboardJsonMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardJson)(nil)).Elem()
}

func (i DashboardJsonMap) ToDashboardJsonMapOutput() DashboardJsonMapOutput {
	return i.ToDashboardJsonMapOutputWithContext(context.Background())
}

func (i DashboardJsonMap) ToDashboardJsonMapOutputWithContext(ctx context.Context) DashboardJsonMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardJsonMapOutput)
}

type DashboardJsonOutput struct{ *pulumi.OutputState }

func (DashboardJsonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardJson)(nil)).Elem()
}

func (o DashboardJsonOutput) ToDashboardJsonOutput() DashboardJsonOutput {
	return o
}

func (o DashboardJsonOutput) ToDashboardJsonOutputWithContext(ctx context.Context) DashboardJsonOutput {
	return o
}

// The JSON formatted definition of the Dashboard.
func (o DashboardJsonOutput) Dashboard() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardJson) pulumi.StringOutput { return v.Dashboard }).(pulumi.StringOutput)
}

// The list of dashboard lists this dashboard belongs to.
func (o DashboardJsonOutput) DashboardLists() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DashboardJson) pulumi.IntArrayOutput { return v.DashboardLists }).(pulumi.IntArrayOutput)
}

// The list of dashboard lists this dashboard should be removed from. Internal only.
func (o DashboardJsonOutput) DashboardListsRemoveds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DashboardJson) pulumi.IntArrayOutput { return v.DashboardListsRemoveds }).(pulumi.IntArrayOutput)
}

// The URL of the dashboard.
func (o DashboardJsonOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardJson) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type DashboardJsonArrayOutput struct{ *pulumi.OutputState }

func (DashboardJsonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardJson)(nil)).Elem()
}

func (o DashboardJsonArrayOutput) ToDashboardJsonArrayOutput() DashboardJsonArrayOutput {
	return o
}

func (o DashboardJsonArrayOutput) ToDashboardJsonArrayOutputWithContext(ctx context.Context) DashboardJsonArrayOutput {
	return o
}

func (o DashboardJsonArrayOutput) Index(i pulumi.IntInput) DashboardJsonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DashboardJson {
		return vs[0].([]*DashboardJson)[vs[1].(int)]
	}).(DashboardJsonOutput)
}

type DashboardJsonMapOutput struct{ *pulumi.OutputState }

func (DashboardJsonMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardJson)(nil)).Elem()
}

func (o DashboardJsonMapOutput) ToDashboardJsonMapOutput() DashboardJsonMapOutput {
	return o
}

func (o DashboardJsonMapOutput) ToDashboardJsonMapOutputWithContext(ctx context.Context) DashboardJsonMapOutput {
	return o
}

func (o DashboardJsonMapOutput) MapIndex(k pulumi.StringInput) DashboardJsonOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DashboardJson {
		return vs[0].(map[string]*DashboardJson)[vs[1].(string)]
	}).(DashboardJsonOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardJsonInput)(nil)).Elem(), &DashboardJson{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardJsonArrayInput)(nil)).Elem(), DashboardJsonArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardJsonMapInput)(nil)).Elem(), DashboardJsonMap{})
	pulumi.RegisterOutputType(DashboardJsonOutput{})
	pulumi.RegisterOutputType(DashboardJsonArrayOutput{})
	pulumi.RegisterOutputType(DashboardJsonMapOutput{})
}
