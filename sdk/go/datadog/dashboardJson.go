// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Datadog dashboard JSON resource. This can be used to create and manage Datadog dashboards using the JSON definition.
//
// ## Import
//
// ```sh
//
//	$ pulumi import datadog:index/dashboardJson:DashboardJson my_service_dashboard sv7-gyh-kas
//
// ```
type DashboardJson struct {
	pulumi.CustomResourceState

	// The JSON formatted definition of the Dashboard.
	Dashboard pulumi.StringOutput `pulumi:"dashboard"`
	// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
	// dashboard lists using Terraform as it causes inconsistent behavior.
	DashboardLists pulumi.IntArrayOutput `pulumi:"dashboardLists"`
	// The list of dashboard lists this dashboard should be removed from. Internal only.
	DashboardListsRemoveds pulumi.IntArrayOutput `pulumi:"dashboardListsRemoveds"`
	// The URL of the dashboard.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewDashboardJson registers a new resource with the given unique name, arguments, and options.
func NewDashboardJson(ctx *pulumi.Context,
	name string, args *DashboardJsonArgs, opts ...pulumi.ResourceOption) (*DashboardJson, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dashboard == nil {
		return nil, errors.New("invalid value for required argument 'Dashboard'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DashboardJson
	err := ctx.RegisterResource("datadog:index/dashboardJson:DashboardJson", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboardJson gets an existing DashboardJson resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboardJson(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardJsonState, opts ...pulumi.ResourceOption) (*DashboardJson, error) {
	var resource DashboardJson
	err := ctx.ReadResource("datadog:index/dashboardJson:DashboardJson", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DashboardJson resources.
type dashboardJsonState struct {
	// The JSON formatted definition of the Dashboard.
	Dashboard *string `pulumi:"dashboard"`
	// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
	// dashboard lists using Terraform as it causes inconsistent behavior.
	DashboardLists []int `pulumi:"dashboardLists"`
	// The list of dashboard lists this dashboard should be removed from. Internal only.
	DashboardListsRemoveds []int `pulumi:"dashboardListsRemoveds"`
	// The URL of the dashboard.
	Url *string `pulumi:"url"`
}

type DashboardJsonState struct {
	// The JSON formatted definition of the Dashboard.
	Dashboard pulumi.StringPtrInput
	// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
	// dashboard lists using Terraform as it causes inconsistent behavior.
	DashboardLists pulumi.IntArrayInput
	// The list of dashboard lists this dashboard should be removed from. Internal only.
	DashboardListsRemoveds pulumi.IntArrayInput
	// The URL of the dashboard.
	Url pulumi.StringPtrInput
}

func (DashboardJsonState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardJsonState)(nil)).Elem()
}

type dashboardJsonArgs struct {
	// The JSON formatted definition of the Dashboard.
	Dashboard string `pulumi:"dashboard"`
	// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
	// dashboard lists using Terraform as it causes inconsistent behavior.
	DashboardLists []int `pulumi:"dashboardLists"`
	// The URL of the dashboard.
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a DashboardJson resource.
type DashboardJsonArgs struct {
	// The JSON formatted definition of the Dashboard.
	Dashboard pulumi.StringInput
	// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
	// dashboard lists using Terraform as it causes inconsistent behavior.
	DashboardLists pulumi.IntArrayInput
	// The URL of the dashboard.
	Url pulumi.StringPtrInput
}

func (DashboardJsonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardJsonArgs)(nil)).Elem()
}

type DashboardJsonInput interface {
	pulumi.Input

	ToDashboardJsonOutput() DashboardJsonOutput
	ToDashboardJsonOutputWithContext(ctx context.Context) DashboardJsonOutput
}

func (*DashboardJson) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardJson)(nil)).Elem()
}

func (i *DashboardJson) ToDashboardJsonOutput() DashboardJsonOutput {
	return i.ToDashboardJsonOutputWithContext(context.Background())
}

func (i *DashboardJson) ToDashboardJsonOutputWithContext(ctx context.Context) DashboardJsonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardJsonOutput)
}

func (i *DashboardJson) ToOutput(ctx context.Context) pulumix.Output[*DashboardJson] {
	return pulumix.Output[*DashboardJson]{
		OutputState: i.ToDashboardJsonOutputWithContext(ctx).OutputState,
	}
}

// DashboardJsonArrayInput is an input type that accepts DashboardJsonArray and DashboardJsonArrayOutput values.
// You can construct a concrete instance of `DashboardJsonArrayInput` via:
//
//	DashboardJsonArray{ DashboardJsonArgs{...} }
type DashboardJsonArrayInput interface {
	pulumi.Input

	ToDashboardJsonArrayOutput() DashboardJsonArrayOutput
	ToDashboardJsonArrayOutputWithContext(context.Context) DashboardJsonArrayOutput
}

type DashboardJsonArray []DashboardJsonInput

func (DashboardJsonArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardJson)(nil)).Elem()
}

func (i DashboardJsonArray) ToDashboardJsonArrayOutput() DashboardJsonArrayOutput {
	return i.ToDashboardJsonArrayOutputWithContext(context.Background())
}

func (i DashboardJsonArray) ToDashboardJsonArrayOutputWithContext(ctx context.Context) DashboardJsonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardJsonArrayOutput)
}

func (i DashboardJsonArray) ToOutput(ctx context.Context) pulumix.Output[[]*DashboardJson] {
	return pulumix.Output[[]*DashboardJson]{
		OutputState: i.ToDashboardJsonArrayOutputWithContext(ctx).OutputState,
	}
}

// DashboardJsonMapInput is an input type that accepts DashboardJsonMap and DashboardJsonMapOutput values.
// You can construct a concrete instance of `DashboardJsonMapInput` via:
//
//	DashboardJsonMap{ "key": DashboardJsonArgs{...} }
type DashboardJsonMapInput interface {
	pulumi.Input

	ToDashboardJsonMapOutput() DashboardJsonMapOutput
	ToDashboardJsonMapOutputWithContext(context.Context) DashboardJsonMapOutput
}

type DashboardJsonMap map[string]DashboardJsonInput

func (DashboardJsonMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardJson)(nil)).Elem()
}

func (i DashboardJsonMap) ToDashboardJsonMapOutput() DashboardJsonMapOutput {
	return i.ToDashboardJsonMapOutputWithContext(context.Background())
}

func (i DashboardJsonMap) ToDashboardJsonMapOutputWithContext(ctx context.Context) DashboardJsonMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardJsonMapOutput)
}

func (i DashboardJsonMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DashboardJson] {
	return pulumix.Output[map[string]*DashboardJson]{
		OutputState: i.ToDashboardJsonMapOutputWithContext(ctx).OutputState,
	}
}

type DashboardJsonOutput struct{ *pulumi.OutputState }

func (DashboardJsonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardJson)(nil)).Elem()
}

func (o DashboardJsonOutput) ToDashboardJsonOutput() DashboardJsonOutput {
	return o
}

func (o DashboardJsonOutput) ToDashboardJsonOutputWithContext(ctx context.Context) DashboardJsonOutput {
	return o
}

func (o DashboardJsonOutput) ToOutput(ctx context.Context) pulumix.Output[*DashboardJson] {
	return pulumix.Output[*DashboardJson]{
		OutputState: o.OutputState,
	}
}

// The JSON formatted definition of the Dashboard.
func (o DashboardJsonOutput) Dashboard() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardJson) pulumi.StringOutput { return v.Dashboard }).(pulumi.StringOutput)
}

// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
// dashboard lists using Terraform as it causes inconsistent behavior.
func (o DashboardJsonOutput) DashboardLists() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DashboardJson) pulumi.IntArrayOutput { return v.DashboardLists }).(pulumi.IntArrayOutput)
}

// The list of dashboard lists this dashboard should be removed from. Internal only.
func (o DashboardJsonOutput) DashboardListsRemoveds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DashboardJson) pulumi.IntArrayOutput { return v.DashboardListsRemoveds }).(pulumi.IntArrayOutput)
}

// The URL of the dashboard.
func (o DashboardJsonOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardJson) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type DashboardJsonArrayOutput struct{ *pulumi.OutputState }

func (DashboardJsonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardJson)(nil)).Elem()
}

func (o DashboardJsonArrayOutput) ToDashboardJsonArrayOutput() DashboardJsonArrayOutput {
	return o
}

func (o DashboardJsonArrayOutput) ToDashboardJsonArrayOutputWithContext(ctx context.Context) DashboardJsonArrayOutput {
	return o
}

func (o DashboardJsonArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DashboardJson] {
	return pulumix.Output[[]*DashboardJson]{
		OutputState: o.OutputState,
	}
}

func (o DashboardJsonArrayOutput) Index(i pulumi.IntInput) DashboardJsonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DashboardJson {
		return vs[0].([]*DashboardJson)[vs[1].(int)]
	}).(DashboardJsonOutput)
}

type DashboardJsonMapOutput struct{ *pulumi.OutputState }

func (DashboardJsonMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardJson)(nil)).Elem()
}

func (o DashboardJsonMapOutput) ToDashboardJsonMapOutput() DashboardJsonMapOutput {
	return o
}

func (o DashboardJsonMapOutput) ToDashboardJsonMapOutputWithContext(ctx context.Context) DashboardJsonMapOutput {
	return o
}

func (o DashboardJsonMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DashboardJson] {
	return pulumix.Output[map[string]*DashboardJson]{
		OutputState: o.OutputState,
	}
}

func (o DashboardJsonMapOutput) MapIndex(k pulumi.StringInput) DashboardJsonOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DashboardJson {
		return vs[0].(map[string]*DashboardJson)[vs[1].(string)]
	}).(DashboardJsonOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardJsonInput)(nil)).Elem(), &DashboardJson{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardJsonArrayInput)(nil)).Elem(), DashboardJsonArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardJsonMapInput)(nil)).Elem(), DashboardJsonMap{})
	pulumi.RegisterOutputType(DashboardJsonOutput{})
	pulumi.RegisterOutputType(DashboardJsonArrayOutput{})
	pulumi.RegisterOutputType(DashboardJsonMapOutput{})
}
