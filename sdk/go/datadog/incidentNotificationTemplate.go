// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog incident notification template resource. This can be used to create and manage Datadog incident notification templates.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Reference incident type
//			security, err := datadog.NewIncidentType(ctx, "security", &datadog.IncidentTypeArgs{
//				Name:        pulumi.String("Security Incident"),
//				Description: pulumi.String("Security-related incidents requiring immediate attention"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a notification template for incident alerts
//			_, err = datadog.NewIncidentNotificationTemplate(ctx, "security_incident", &datadog.IncidentNotificationTemplateArgs{
//				Name:    pulumi.String("Security Incident Template"),
//				Subject: pulumi.String("SEV-1 Security Incident: {{incident.title}}"),
//				Content: pulumi.String(`ðŸš¨ SECURITY INCIDENT DECLARED ðŸš¨
//
// **Incident Details:**
// - Title: {{incident.title}}
// - Severity: {{incident.severity}}
// - Status: {{incident.status}}
// - Declared at: {{incident.created}}
//
// **Affected Services:**
// {{#each incident.services}}
// - {{name}}
// {{/each}}
//
// **Commander:** {{incident.commander}}
//
// **Next Steps:**
// 1. Join the incident Slack channel: #incident-{{incident.id}}
// 2. Review the incident details in Datadog
// 3. Await further instructions from the incident commander
//
// For more information: {{incident.url}}
// `),
//
//				Category:     pulumi.String("alert"),
//				IncidentType: security.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// #!/bin/bash
//
// # Import an existing incident notification template
//
// ```sh
// $ pulumi import datadog:index/incidentNotificationTemplate:IncidentNotificationTemplate security_incident 11111111-2222-3333-4444-555555555555
// ```
type IncidentNotificationTemplate struct {
	pulumi.CustomResourceState

	// The category of the notification template. Valid values are `alert`, `incident`, `recovery`.
	Category pulumi.StringOutput `pulumi:"category"`
	// The content body of the notification template.
	Content pulumi.StringOutput `pulumi:"content"`
	// Timestamp when the notification template was created.
	Created pulumi.StringOutput `pulumi:"created"`
	// The ID of the incident type this notification template is associated with.
	IncidentType pulumi.StringOutput `pulumi:"incidentType"`
	// Timestamp when the notification template was last modified.
	Modified pulumi.StringOutput `pulumi:"modified"`
	// The name of the notification template.
	Name pulumi.StringOutput `pulumi:"name"`
	// The subject line of the notification template.
	Subject pulumi.StringOutput `pulumi:"subject"`
}

// NewIncidentNotificationTemplate registers a new resource with the given unique name, arguments, and options.
func NewIncidentNotificationTemplate(ctx *pulumi.Context,
	name string, args *IncidentNotificationTemplateArgs, opts ...pulumi.ResourceOption) (*IncidentNotificationTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Category == nil {
		return nil, errors.New("invalid value for required argument 'Category'")
	}
	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.IncidentType == nil {
		return nil, errors.New("invalid value for required argument 'IncidentType'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Subject == nil {
		return nil, errors.New("invalid value for required argument 'Subject'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IncidentNotificationTemplate
	err := ctx.RegisterResource("datadog:index/incidentNotificationTemplate:IncidentNotificationTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIncidentNotificationTemplate gets an existing IncidentNotificationTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIncidentNotificationTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IncidentNotificationTemplateState, opts ...pulumi.ResourceOption) (*IncidentNotificationTemplate, error) {
	var resource IncidentNotificationTemplate
	err := ctx.ReadResource("datadog:index/incidentNotificationTemplate:IncidentNotificationTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IncidentNotificationTemplate resources.
type incidentNotificationTemplateState struct {
	// The category of the notification template. Valid values are `alert`, `incident`, `recovery`.
	Category *string `pulumi:"category"`
	// The content body of the notification template.
	Content *string `pulumi:"content"`
	// Timestamp when the notification template was created.
	Created *string `pulumi:"created"`
	// The ID of the incident type this notification template is associated with.
	IncidentType *string `pulumi:"incidentType"`
	// Timestamp when the notification template was last modified.
	Modified *string `pulumi:"modified"`
	// The name of the notification template.
	Name *string `pulumi:"name"`
	// The subject line of the notification template.
	Subject *string `pulumi:"subject"`
}

type IncidentNotificationTemplateState struct {
	// The category of the notification template. Valid values are `alert`, `incident`, `recovery`.
	Category pulumi.StringPtrInput
	// The content body of the notification template.
	Content pulumi.StringPtrInput
	// Timestamp when the notification template was created.
	Created pulumi.StringPtrInput
	// The ID of the incident type this notification template is associated with.
	IncidentType pulumi.StringPtrInput
	// Timestamp when the notification template was last modified.
	Modified pulumi.StringPtrInput
	// The name of the notification template.
	Name pulumi.StringPtrInput
	// The subject line of the notification template.
	Subject pulumi.StringPtrInput
}

func (IncidentNotificationTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*incidentNotificationTemplateState)(nil)).Elem()
}

type incidentNotificationTemplateArgs struct {
	// The category of the notification template. Valid values are `alert`, `incident`, `recovery`.
	Category string `pulumi:"category"`
	// The content body of the notification template.
	Content string `pulumi:"content"`
	// The ID of the incident type this notification template is associated with.
	IncidentType string `pulumi:"incidentType"`
	// The name of the notification template.
	Name string `pulumi:"name"`
	// The subject line of the notification template.
	Subject string `pulumi:"subject"`
}

// The set of arguments for constructing a IncidentNotificationTemplate resource.
type IncidentNotificationTemplateArgs struct {
	// The category of the notification template. Valid values are `alert`, `incident`, `recovery`.
	Category pulumi.StringInput
	// The content body of the notification template.
	Content pulumi.StringInput
	// The ID of the incident type this notification template is associated with.
	IncidentType pulumi.StringInput
	// The name of the notification template.
	Name pulumi.StringInput
	// The subject line of the notification template.
	Subject pulumi.StringInput
}

func (IncidentNotificationTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*incidentNotificationTemplateArgs)(nil)).Elem()
}

type IncidentNotificationTemplateInput interface {
	pulumi.Input

	ToIncidentNotificationTemplateOutput() IncidentNotificationTemplateOutput
	ToIncidentNotificationTemplateOutputWithContext(ctx context.Context) IncidentNotificationTemplateOutput
}

func (*IncidentNotificationTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentNotificationTemplate)(nil)).Elem()
}

func (i *IncidentNotificationTemplate) ToIncidentNotificationTemplateOutput() IncidentNotificationTemplateOutput {
	return i.ToIncidentNotificationTemplateOutputWithContext(context.Background())
}

func (i *IncidentNotificationTemplate) ToIncidentNotificationTemplateOutputWithContext(ctx context.Context) IncidentNotificationTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentNotificationTemplateOutput)
}

// IncidentNotificationTemplateArrayInput is an input type that accepts IncidentNotificationTemplateArray and IncidentNotificationTemplateArrayOutput values.
// You can construct a concrete instance of `IncidentNotificationTemplateArrayInput` via:
//
//	IncidentNotificationTemplateArray{ IncidentNotificationTemplateArgs{...} }
type IncidentNotificationTemplateArrayInput interface {
	pulumi.Input

	ToIncidentNotificationTemplateArrayOutput() IncidentNotificationTemplateArrayOutput
	ToIncidentNotificationTemplateArrayOutputWithContext(context.Context) IncidentNotificationTemplateArrayOutput
}

type IncidentNotificationTemplateArray []IncidentNotificationTemplateInput

func (IncidentNotificationTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IncidentNotificationTemplate)(nil)).Elem()
}

func (i IncidentNotificationTemplateArray) ToIncidentNotificationTemplateArrayOutput() IncidentNotificationTemplateArrayOutput {
	return i.ToIncidentNotificationTemplateArrayOutputWithContext(context.Background())
}

func (i IncidentNotificationTemplateArray) ToIncidentNotificationTemplateArrayOutputWithContext(ctx context.Context) IncidentNotificationTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentNotificationTemplateArrayOutput)
}

// IncidentNotificationTemplateMapInput is an input type that accepts IncidentNotificationTemplateMap and IncidentNotificationTemplateMapOutput values.
// You can construct a concrete instance of `IncidentNotificationTemplateMapInput` via:
//
//	IncidentNotificationTemplateMap{ "key": IncidentNotificationTemplateArgs{...} }
type IncidentNotificationTemplateMapInput interface {
	pulumi.Input

	ToIncidentNotificationTemplateMapOutput() IncidentNotificationTemplateMapOutput
	ToIncidentNotificationTemplateMapOutputWithContext(context.Context) IncidentNotificationTemplateMapOutput
}

type IncidentNotificationTemplateMap map[string]IncidentNotificationTemplateInput

func (IncidentNotificationTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IncidentNotificationTemplate)(nil)).Elem()
}

func (i IncidentNotificationTemplateMap) ToIncidentNotificationTemplateMapOutput() IncidentNotificationTemplateMapOutput {
	return i.ToIncidentNotificationTemplateMapOutputWithContext(context.Background())
}

func (i IncidentNotificationTemplateMap) ToIncidentNotificationTemplateMapOutputWithContext(ctx context.Context) IncidentNotificationTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentNotificationTemplateMapOutput)
}

type IncidentNotificationTemplateOutput struct{ *pulumi.OutputState }

func (IncidentNotificationTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentNotificationTemplate)(nil)).Elem()
}

func (o IncidentNotificationTemplateOutput) ToIncidentNotificationTemplateOutput() IncidentNotificationTemplateOutput {
	return o
}

func (o IncidentNotificationTemplateOutput) ToIncidentNotificationTemplateOutputWithContext(ctx context.Context) IncidentNotificationTemplateOutput {
	return o
}

// The category of the notification template. Valid values are `alert`, `incident`, `recovery`.
func (o IncidentNotificationTemplateOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentNotificationTemplate) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// The content body of the notification template.
func (o IncidentNotificationTemplateOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentNotificationTemplate) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// Timestamp when the notification template was created.
func (o IncidentNotificationTemplateOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentNotificationTemplate) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// The ID of the incident type this notification template is associated with.
func (o IncidentNotificationTemplateOutput) IncidentType() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentNotificationTemplate) pulumi.StringOutput { return v.IncidentType }).(pulumi.StringOutput)
}

// Timestamp when the notification template was last modified.
func (o IncidentNotificationTemplateOutput) Modified() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentNotificationTemplate) pulumi.StringOutput { return v.Modified }).(pulumi.StringOutput)
}

// The name of the notification template.
func (o IncidentNotificationTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentNotificationTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The subject line of the notification template.
func (o IncidentNotificationTemplateOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentNotificationTemplate) pulumi.StringOutput { return v.Subject }).(pulumi.StringOutput)
}

type IncidentNotificationTemplateArrayOutput struct{ *pulumi.OutputState }

func (IncidentNotificationTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IncidentNotificationTemplate)(nil)).Elem()
}

func (o IncidentNotificationTemplateArrayOutput) ToIncidentNotificationTemplateArrayOutput() IncidentNotificationTemplateArrayOutput {
	return o
}

func (o IncidentNotificationTemplateArrayOutput) ToIncidentNotificationTemplateArrayOutputWithContext(ctx context.Context) IncidentNotificationTemplateArrayOutput {
	return o
}

func (o IncidentNotificationTemplateArrayOutput) Index(i pulumi.IntInput) IncidentNotificationTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IncidentNotificationTemplate {
		return vs[0].([]*IncidentNotificationTemplate)[vs[1].(int)]
	}).(IncidentNotificationTemplateOutput)
}

type IncidentNotificationTemplateMapOutput struct{ *pulumi.OutputState }

func (IncidentNotificationTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IncidentNotificationTemplate)(nil)).Elem()
}

func (o IncidentNotificationTemplateMapOutput) ToIncidentNotificationTemplateMapOutput() IncidentNotificationTemplateMapOutput {
	return o
}

func (o IncidentNotificationTemplateMapOutput) ToIncidentNotificationTemplateMapOutputWithContext(ctx context.Context) IncidentNotificationTemplateMapOutput {
	return o
}

func (o IncidentNotificationTemplateMapOutput) MapIndex(k pulumi.StringInput) IncidentNotificationTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IncidentNotificationTemplate {
		return vs[0].(map[string]*IncidentNotificationTemplate)[vs[1].(string)]
	}).(IncidentNotificationTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentNotificationTemplateInput)(nil)).Elem(), &IncidentNotificationTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentNotificationTemplateArrayInput)(nil)).Elem(), IncidentNotificationTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentNotificationTemplateMapInput)(nil)).Elem(), IncidentNotificationTemplateMap{})
	pulumi.RegisterOutputType(IncidentNotificationTemplateOutput{})
	pulumi.RegisterOutputType(IncidentNotificationTemplateArrayOutput{})
	pulumi.RegisterOutputType(IncidentNotificationTemplateMapOutput{})
}
