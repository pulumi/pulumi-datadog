// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog service level objective resource. This can be used to create and manage Datadog service level objectives.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.NewServiceLevelObjective(ctx, "foo", &datadog.ServiceLevelObjectiveArgs{
//				Description: pulumi.String("My custom metric SLO"),
//				Name:        pulumi.String("Example Metric SLO"),
//				Query: &datadog.ServiceLevelObjectiveQueryArgs{
//					Denominator: pulumi.String("sum:my.custom.count.metric{*}.as_count()"),
//					Numerator:   pulumi.String("sum:my.custom.count.metric{type:good_events}.as_count()"),
//				},
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//					pulumi.String("baz"),
//				},
//				TargetThreshold: pulumi.Float64(99.9),
//				Thresholds: datadog.ServiceLevelObjectiveThresholdArray{
//					&datadog.ServiceLevelObjectiveThresholdArgs{
//						Target:    pulumi.Float64(99.9),
//						Timeframe: pulumi.String("7d"),
//						Warning:   pulumi.Float64(99.99),
//					},
//					&datadog.ServiceLevelObjectiveThresholdArgs{
//						Target:    pulumi.Float64(99.9),
//						Timeframe: pulumi.String("30d"),
//						Warning:   pulumi.Float64(99.99),
//					},
//				},
//				Timeframe:        pulumi.String("30d"),
//				Type:             pulumi.String("metric"),
//				WarningThreshold: pulumi.Float64(99.99),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datadog.NewServiceLevelObjective(ctx, "bar", &datadog.ServiceLevelObjectiveArgs{
//				Description: pulumi.String("My custom monitor SLO"),
//				MonitorIds: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(2),
//					pulumi.Int(3),
//				},
//				Name: pulumi.String("Example Monitor SLO"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//					pulumi.String("baz"),
//				},
//				TargetThreshold: pulumi.Float64(99.9),
//				Thresholds: datadog.ServiceLevelObjectiveThresholdArray{
//					&datadog.ServiceLevelObjectiveThresholdArgs{
//						Target:    pulumi.Float64(99.9),
//						Timeframe: pulumi.String("7d"),
//						Warning:   pulumi.Float64(99.99),
//					},
//					&datadog.ServiceLevelObjectiveThresholdArgs{
//						Target:    pulumi.Float64(99.9),
//						Timeframe: pulumi.String("30d"),
//						Warning:   pulumi.Float64(99.99),
//					},
//				},
//				Timeframe:        pulumi.String("30d"),
//				Type:             pulumi.String("monitor"),
//				WarningThreshold: pulumi.Float64(99.99),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Service Level Objectives can be imported using their string ID, e.g.
//
// ```sh
//
//	$ pulumi import datadog:index/serviceLevelObjective:ServiceLevelObjective baz 12345678901234567890123456789012
//
// ```
type ServiceLevelObjective struct {
	pulumi.CustomResourceState

	// A description of this service level objective.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A boolean indicating whether this monitor can be deleted even if it's referenced by other resources (for example, dashboards).
	ForceDelete pulumi.BoolPtrOutput `pulumi:"forceDelete"`
	// A static set of groups to filter monitor-based SLOs
	Groups pulumi.StringArrayOutput `pulumi:"groups"`
	// A static set of monitor IDs to use as part of the SLO
	MonitorIds pulumi.IntArrayOutput `pulumi:"monitorIds"`
	// Name of Datadog service level objective
	Name pulumi.StringOutput `pulumi:"name"`
	// The metric query of good / total events
	Query ServiceLevelObjectiveQueryPtrOutput `pulumi:"query"`
	// A list of tags to associate with your service level objective. This can help you categorize and filter service level objectives in the service level objectives page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The objective's target in `(0,100)`. This must match the corresponding thresholds of the primary time frame.
	TargetThreshold pulumi.Float64Output `pulumi:"targetThreshold"`
	// A list of thresholds and targets that define the service level objectives from the provided SLIs.
	Thresholds ServiceLevelObjectiveThresholdArrayOutput `pulumi:"thresholds"`
	// The time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Valid values are `7d`, `30d`, `90d`, `custom`.
	Timeframe pulumi.StringOutput `pulumi:"timeframe"`
	// The type of the service level objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/service-level-objectives/#create-a-slo-object). Valid values are `metric`, `monitor`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Whether or not to validate the SLO.
	Validate pulumi.BoolPtrOutput `pulumi:"validate"`
	// The objective's warning value in `(0,100)`. This must be greater than the target value and match the corresponding thresholds of the primary time frame.
	WarningThreshold pulumi.Float64Output `pulumi:"warningThreshold"`
}

// NewServiceLevelObjective registers a new resource with the given unique name, arguments, and options.
func NewServiceLevelObjective(ctx *pulumi.Context,
	name string, args *ServiceLevelObjectiveArgs, opts ...pulumi.ResourceOption) (*ServiceLevelObjective, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Thresholds == nil {
		return nil, errors.New("invalid value for required argument 'Thresholds'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceLevelObjective
	err := ctx.RegisterResource("datadog:index/serviceLevelObjective:ServiceLevelObjective", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceLevelObjective gets an existing ServiceLevelObjective resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceLevelObjective(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceLevelObjectiveState, opts ...pulumi.ResourceOption) (*ServiceLevelObjective, error) {
	var resource ServiceLevelObjective
	err := ctx.ReadResource("datadog:index/serviceLevelObjective:ServiceLevelObjective", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceLevelObjective resources.
type serviceLevelObjectiveState struct {
	// A description of this service level objective.
	Description *string `pulumi:"description"`
	// A boolean indicating whether this monitor can be deleted even if it's referenced by other resources (for example, dashboards).
	ForceDelete *bool `pulumi:"forceDelete"`
	// A static set of groups to filter monitor-based SLOs
	Groups []string `pulumi:"groups"`
	// A static set of monitor IDs to use as part of the SLO
	MonitorIds []int `pulumi:"monitorIds"`
	// Name of Datadog service level objective
	Name *string `pulumi:"name"`
	// The metric query of good / total events
	Query *ServiceLevelObjectiveQuery `pulumi:"query"`
	// A list of tags to associate with your service level objective. This can help you categorize and filter service level objectives in the service level objectives page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags []string `pulumi:"tags"`
	// The objective's target in `(0,100)`. This must match the corresponding thresholds of the primary time frame.
	TargetThreshold *float64 `pulumi:"targetThreshold"`
	// A list of thresholds and targets that define the service level objectives from the provided SLIs.
	Thresholds []ServiceLevelObjectiveThreshold `pulumi:"thresholds"`
	// The time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Valid values are `7d`, `30d`, `90d`, `custom`.
	Timeframe *string `pulumi:"timeframe"`
	// The type of the service level objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/service-level-objectives/#create-a-slo-object). Valid values are `metric`, `monitor`.
	Type *string `pulumi:"type"`
	// Whether or not to validate the SLO.
	Validate *bool `pulumi:"validate"`
	// The objective's warning value in `(0,100)`. This must be greater than the target value and match the corresponding thresholds of the primary time frame.
	WarningThreshold *float64 `pulumi:"warningThreshold"`
}

type ServiceLevelObjectiveState struct {
	// A description of this service level objective.
	Description pulumi.StringPtrInput
	// A boolean indicating whether this monitor can be deleted even if it's referenced by other resources (for example, dashboards).
	ForceDelete pulumi.BoolPtrInput
	// A static set of groups to filter monitor-based SLOs
	Groups pulumi.StringArrayInput
	// A static set of monitor IDs to use as part of the SLO
	MonitorIds pulumi.IntArrayInput
	// Name of Datadog service level objective
	Name pulumi.StringPtrInput
	// The metric query of good / total events
	Query ServiceLevelObjectiveQueryPtrInput
	// A list of tags to associate with your service level objective. This can help you categorize and filter service level objectives in the service level objectives page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags pulumi.StringArrayInput
	// The objective's target in `(0,100)`. This must match the corresponding thresholds of the primary time frame.
	TargetThreshold pulumi.Float64PtrInput
	// A list of thresholds and targets that define the service level objectives from the provided SLIs.
	Thresholds ServiceLevelObjectiveThresholdArrayInput
	// The time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Valid values are `7d`, `30d`, `90d`, `custom`.
	Timeframe pulumi.StringPtrInput
	// The type of the service level objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/service-level-objectives/#create-a-slo-object). Valid values are `metric`, `monitor`.
	Type pulumi.StringPtrInput
	// Whether or not to validate the SLO.
	Validate pulumi.BoolPtrInput
	// The objective's warning value in `(0,100)`. This must be greater than the target value and match the corresponding thresholds of the primary time frame.
	WarningThreshold pulumi.Float64PtrInput
}

func (ServiceLevelObjectiveState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceLevelObjectiveState)(nil)).Elem()
}

type serviceLevelObjectiveArgs struct {
	// A description of this service level objective.
	Description *string `pulumi:"description"`
	// A boolean indicating whether this monitor can be deleted even if it's referenced by other resources (for example, dashboards).
	ForceDelete *bool `pulumi:"forceDelete"`
	// A static set of groups to filter monitor-based SLOs
	Groups []string `pulumi:"groups"`
	// A static set of monitor IDs to use as part of the SLO
	MonitorIds []int `pulumi:"monitorIds"`
	// Name of Datadog service level objective
	Name string `pulumi:"name"`
	// The metric query of good / total events
	Query *ServiceLevelObjectiveQuery `pulumi:"query"`
	// A list of tags to associate with your service level objective. This can help you categorize and filter service level objectives in the service level objectives page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags []string `pulumi:"tags"`
	// The objective's target in `(0,100)`. This must match the corresponding thresholds of the primary time frame.
	TargetThreshold *float64 `pulumi:"targetThreshold"`
	// A list of thresholds and targets that define the service level objectives from the provided SLIs.
	Thresholds []ServiceLevelObjectiveThreshold `pulumi:"thresholds"`
	// The time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Valid values are `7d`, `30d`, `90d`, `custom`.
	Timeframe *string `pulumi:"timeframe"`
	// The type of the service level objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/service-level-objectives/#create-a-slo-object). Valid values are `metric`, `monitor`.
	Type string `pulumi:"type"`
	// Whether or not to validate the SLO.
	Validate *bool `pulumi:"validate"`
	// The objective's warning value in `(0,100)`. This must be greater than the target value and match the corresponding thresholds of the primary time frame.
	WarningThreshold *float64 `pulumi:"warningThreshold"`
}

// The set of arguments for constructing a ServiceLevelObjective resource.
type ServiceLevelObjectiveArgs struct {
	// A description of this service level objective.
	Description pulumi.StringPtrInput
	// A boolean indicating whether this monitor can be deleted even if it's referenced by other resources (for example, dashboards).
	ForceDelete pulumi.BoolPtrInput
	// A static set of groups to filter monitor-based SLOs
	Groups pulumi.StringArrayInput
	// A static set of monitor IDs to use as part of the SLO
	MonitorIds pulumi.IntArrayInput
	// Name of Datadog service level objective
	Name pulumi.StringInput
	// The metric query of good / total events
	Query ServiceLevelObjectiveQueryPtrInput
	// A list of tags to associate with your service level objective. This can help you categorize and filter service level objectives in the service level objectives page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags pulumi.StringArrayInput
	// The objective's target in `(0,100)`. This must match the corresponding thresholds of the primary time frame.
	TargetThreshold pulumi.Float64PtrInput
	// A list of thresholds and targets that define the service level objectives from the provided SLIs.
	Thresholds ServiceLevelObjectiveThresholdArrayInput
	// The time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Valid values are `7d`, `30d`, `90d`, `custom`.
	Timeframe pulumi.StringPtrInput
	// The type of the service level objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/service-level-objectives/#create-a-slo-object). Valid values are `metric`, `monitor`.
	Type pulumi.StringInput
	// Whether or not to validate the SLO.
	Validate pulumi.BoolPtrInput
	// The objective's warning value in `(0,100)`. This must be greater than the target value and match the corresponding thresholds of the primary time frame.
	WarningThreshold pulumi.Float64PtrInput
}

func (ServiceLevelObjectiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceLevelObjectiveArgs)(nil)).Elem()
}

type ServiceLevelObjectiveInput interface {
	pulumi.Input

	ToServiceLevelObjectiveOutput() ServiceLevelObjectiveOutput
	ToServiceLevelObjectiveOutputWithContext(ctx context.Context) ServiceLevelObjectiveOutput
}

func (*ServiceLevelObjective) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjective)(nil)).Elem()
}

func (i *ServiceLevelObjective) ToServiceLevelObjectiveOutput() ServiceLevelObjectiveOutput {
	return i.ToServiceLevelObjectiveOutputWithContext(context.Background())
}

func (i *ServiceLevelObjective) ToServiceLevelObjectiveOutputWithContext(ctx context.Context) ServiceLevelObjectiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveOutput)
}

// ServiceLevelObjectiveArrayInput is an input type that accepts ServiceLevelObjectiveArray and ServiceLevelObjectiveArrayOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveArrayInput` via:
//
//	ServiceLevelObjectiveArray{ ServiceLevelObjectiveArgs{...} }
type ServiceLevelObjectiveArrayInput interface {
	pulumi.Input

	ToServiceLevelObjectiveArrayOutput() ServiceLevelObjectiveArrayOutput
	ToServiceLevelObjectiveArrayOutputWithContext(context.Context) ServiceLevelObjectiveArrayOutput
}

type ServiceLevelObjectiveArray []ServiceLevelObjectiveInput

func (ServiceLevelObjectiveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceLevelObjective)(nil)).Elem()
}

func (i ServiceLevelObjectiveArray) ToServiceLevelObjectiveArrayOutput() ServiceLevelObjectiveArrayOutput {
	return i.ToServiceLevelObjectiveArrayOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveArray) ToServiceLevelObjectiveArrayOutputWithContext(ctx context.Context) ServiceLevelObjectiveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveArrayOutput)
}

// ServiceLevelObjectiveMapInput is an input type that accepts ServiceLevelObjectiveMap and ServiceLevelObjectiveMapOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveMapInput` via:
//
//	ServiceLevelObjectiveMap{ "key": ServiceLevelObjectiveArgs{...} }
type ServiceLevelObjectiveMapInput interface {
	pulumi.Input

	ToServiceLevelObjectiveMapOutput() ServiceLevelObjectiveMapOutput
	ToServiceLevelObjectiveMapOutputWithContext(context.Context) ServiceLevelObjectiveMapOutput
}

type ServiceLevelObjectiveMap map[string]ServiceLevelObjectiveInput

func (ServiceLevelObjectiveMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceLevelObjective)(nil)).Elem()
}

func (i ServiceLevelObjectiveMap) ToServiceLevelObjectiveMapOutput() ServiceLevelObjectiveMapOutput {
	return i.ToServiceLevelObjectiveMapOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveMap) ToServiceLevelObjectiveMapOutputWithContext(ctx context.Context) ServiceLevelObjectiveMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveMapOutput)
}

type ServiceLevelObjectiveOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjective)(nil)).Elem()
}

func (o ServiceLevelObjectiveOutput) ToServiceLevelObjectiveOutput() ServiceLevelObjectiveOutput {
	return o
}

func (o ServiceLevelObjectiveOutput) ToServiceLevelObjectiveOutputWithContext(ctx context.Context) ServiceLevelObjectiveOutput {
	return o
}

// A description of this service level objective.
func (o ServiceLevelObjectiveOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A boolean indicating whether this monitor can be deleted even if it's referenced by other resources (for example, dashboards).
func (o ServiceLevelObjectiveOutput) ForceDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) pulumi.BoolPtrOutput { return v.ForceDelete }).(pulumi.BoolPtrOutput)
}

// A static set of groups to filter monitor-based SLOs
func (o ServiceLevelObjectiveOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) pulumi.StringArrayOutput { return v.Groups }).(pulumi.StringArrayOutput)
}

// A static set of monitor IDs to use as part of the SLO
func (o ServiceLevelObjectiveOutput) MonitorIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) pulumi.IntArrayOutput { return v.MonitorIds }).(pulumi.IntArrayOutput)
}

// Name of Datadog service level objective
func (o ServiceLevelObjectiveOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The metric query of good / total events
func (o ServiceLevelObjectiveOutput) Query() ServiceLevelObjectiveQueryPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) ServiceLevelObjectiveQueryPtrOutput { return v.Query }).(ServiceLevelObjectiveQueryPtrOutput)
}

// A list of tags to associate with your service level objective. This can help you categorize and filter service level objectives in the service level objectives page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
func (o ServiceLevelObjectiveOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The objective's target in `(0,100)`. This must match the corresponding thresholds of the primary time frame.
func (o ServiceLevelObjectiveOutput) TargetThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v *ServiceLevelObjective) pulumi.Float64Output { return v.TargetThreshold }).(pulumi.Float64Output)
}

// A list of thresholds and targets that define the service level objectives from the provided SLIs.
func (o ServiceLevelObjectiveOutput) Thresholds() ServiceLevelObjectiveThresholdArrayOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) ServiceLevelObjectiveThresholdArrayOutput { return v.Thresholds }).(ServiceLevelObjectiveThresholdArrayOutput)
}

// The time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Valid values are `7d`, `30d`, `90d`, `custom`.
func (o ServiceLevelObjectiveOutput) Timeframe() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) pulumi.StringOutput { return v.Timeframe }).(pulumi.StringOutput)
}

// The type of the service level objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/service-level-objectives/#create-a-slo-object). Valid values are `metric`, `monitor`.
func (o ServiceLevelObjectiveOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Whether or not to validate the SLO.
func (o ServiceLevelObjectiveOutput) Validate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) pulumi.BoolPtrOutput { return v.Validate }).(pulumi.BoolPtrOutput)
}

// The objective's warning value in `(0,100)`. This must be greater than the target value and match the corresponding thresholds of the primary time frame.
func (o ServiceLevelObjectiveOutput) WarningThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v *ServiceLevelObjective) pulumi.Float64Output { return v.WarningThreshold }).(pulumi.Float64Output)
}

type ServiceLevelObjectiveArrayOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceLevelObjective)(nil)).Elem()
}

func (o ServiceLevelObjectiveArrayOutput) ToServiceLevelObjectiveArrayOutput() ServiceLevelObjectiveArrayOutput {
	return o
}

func (o ServiceLevelObjectiveArrayOutput) ToServiceLevelObjectiveArrayOutputWithContext(ctx context.Context) ServiceLevelObjectiveArrayOutput {
	return o
}

func (o ServiceLevelObjectiveArrayOutput) Index(i pulumi.IntInput) ServiceLevelObjectiveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceLevelObjective {
		return vs[0].([]*ServiceLevelObjective)[vs[1].(int)]
	}).(ServiceLevelObjectiveOutput)
}

type ServiceLevelObjectiveMapOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceLevelObjective)(nil)).Elem()
}

func (o ServiceLevelObjectiveMapOutput) ToServiceLevelObjectiveMapOutput() ServiceLevelObjectiveMapOutput {
	return o
}

func (o ServiceLevelObjectiveMapOutput) ToServiceLevelObjectiveMapOutputWithContext(ctx context.Context) ServiceLevelObjectiveMapOutput {
	return o
}

func (o ServiceLevelObjectiveMapOutput) MapIndex(k pulumi.StringInput) ServiceLevelObjectiveOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceLevelObjective {
		return vs[0].(map[string]*ServiceLevelObjective)[vs[1].(string)]
	}).(ServiceLevelObjectiveOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveInput)(nil)).Elem(), &ServiceLevelObjective{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveArrayInput)(nil)).Elem(), ServiceLevelObjectiveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveMapInput)(nil)).Elem(), ServiceLevelObjectiveMap{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveArrayOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveMapOutput{})
}
