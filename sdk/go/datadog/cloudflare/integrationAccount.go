// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Datadog IntegrationCloudflareAccount resource. This can be used to create and manage Datadog integration_cloudflare_account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewIntegrationAccount(ctx, "foo", &cloudflare.IntegrationAccountArgs{
//				ApiKey: pulumi.String("12345678910abc"),
//				Email:  pulumi.String("test-email@example.com"),
//				Name:   pulumi.String("test-name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import datadog:cloudflare/integrationAccount:IntegrationAccount new_list ""
//
// ```
type IntegrationAccount struct {
	pulumi.CustomResourceState

	// The API key (or token) for the Cloudflare account.
	ApiKey pulumi.StringOutput `pulumi:"apiKey"`
	// The email associated with the Cloudflare account. If an API key is provided (and not a token), this field is also required.
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// The name of the Cloudflare account.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewIntegrationAccount registers a new resource with the given unique name, arguments, and options.
func NewIntegrationAccount(ctx *pulumi.Context,
	name string, args *IntegrationAccountArgs, opts ...pulumi.ResourceOption) (*IntegrationAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiKey == nil {
		return nil, errors.New("invalid value for required argument 'ApiKey'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ApiKey != nil {
		args.ApiKey = pulumi.ToSecret(args.ApiKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationAccount
	err := ctx.RegisterResource("datadog:cloudflare/integrationAccount:IntegrationAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationAccount gets an existing IntegrationAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationAccountState, opts ...pulumi.ResourceOption) (*IntegrationAccount, error) {
	var resource IntegrationAccount
	err := ctx.ReadResource("datadog:cloudflare/integrationAccount:IntegrationAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationAccount resources.
type integrationAccountState struct {
	// The API key (or token) for the Cloudflare account.
	ApiKey *string `pulumi:"apiKey"`
	// The email associated with the Cloudflare account. If an API key is provided (and not a token), this field is also required.
	Email *string `pulumi:"email"`
	// The name of the Cloudflare account.
	Name *string `pulumi:"name"`
}

type IntegrationAccountState struct {
	// The API key (or token) for the Cloudflare account.
	ApiKey pulumi.StringPtrInput
	// The email associated with the Cloudflare account. If an API key is provided (and not a token), this field is also required.
	Email pulumi.StringPtrInput
	// The name of the Cloudflare account.
	Name pulumi.StringPtrInput
}

func (IntegrationAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAccountState)(nil)).Elem()
}

type integrationAccountArgs struct {
	// The API key (or token) for the Cloudflare account.
	ApiKey string `pulumi:"apiKey"`
	// The email associated with the Cloudflare account. If an API key is provided (and not a token), this field is also required.
	Email *string `pulumi:"email"`
	// The name of the Cloudflare account.
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a IntegrationAccount resource.
type IntegrationAccountArgs struct {
	// The API key (or token) for the Cloudflare account.
	ApiKey pulumi.StringInput
	// The email associated with the Cloudflare account. If an API key is provided (and not a token), this field is also required.
	Email pulumi.StringPtrInput
	// The name of the Cloudflare account.
	Name pulumi.StringInput
}

func (IntegrationAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAccountArgs)(nil)).Elem()
}

type IntegrationAccountInput interface {
	pulumi.Input

	ToIntegrationAccountOutput() IntegrationAccountOutput
	ToIntegrationAccountOutputWithContext(ctx context.Context) IntegrationAccountOutput
}

func (*IntegrationAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccount)(nil)).Elem()
}

func (i *IntegrationAccount) ToIntegrationAccountOutput() IntegrationAccountOutput {
	return i.ToIntegrationAccountOutputWithContext(context.Background())
}

func (i *IntegrationAccount) ToIntegrationAccountOutputWithContext(ctx context.Context) IntegrationAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountOutput)
}

func (i *IntegrationAccount) ToOutput(ctx context.Context) pulumix.Output[*IntegrationAccount] {
	return pulumix.Output[*IntegrationAccount]{
		OutputState: i.ToIntegrationAccountOutputWithContext(ctx).OutputState,
	}
}

// IntegrationAccountArrayInput is an input type that accepts IntegrationAccountArray and IntegrationAccountArrayOutput values.
// You can construct a concrete instance of `IntegrationAccountArrayInput` via:
//
//	IntegrationAccountArray{ IntegrationAccountArgs{...} }
type IntegrationAccountArrayInput interface {
	pulumi.Input

	ToIntegrationAccountArrayOutput() IntegrationAccountArrayOutput
	ToIntegrationAccountArrayOutputWithContext(context.Context) IntegrationAccountArrayOutput
}

type IntegrationAccountArray []IntegrationAccountInput

func (IntegrationAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationAccount)(nil)).Elem()
}

func (i IntegrationAccountArray) ToIntegrationAccountArrayOutput() IntegrationAccountArrayOutput {
	return i.ToIntegrationAccountArrayOutputWithContext(context.Background())
}

func (i IntegrationAccountArray) ToIntegrationAccountArrayOutputWithContext(ctx context.Context) IntegrationAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountArrayOutput)
}

func (i IntegrationAccountArray) ToOutput(ctx context.Context) pulumix.Output[[]*IntegrationAccount] {
	return pulumix.Output[[]*IntegrationAccount]{
		OutputState: i.ToIntegrationAccountArrayOutputWithContext(ctx).OutputState,
	}
}

// IntegrationAccountMapInput is an input type that accepts IntegrationAccountMap and IntegrationAccountMapOutput values.
// You can construct a concrete instance of `IntegrationAccountMapInput` via:
//
//	IntegrationAccountMap{ "key": IntegrationAccountArgs{...} }
type IntegrationAccountMapInput interface {
	pulumi.Input

	ToIntegrationAccountMapOutput() IntegrationAccountMapOutput
	ToIntegrationAccountMapOutputWithContext(context.Context) IntegrationAccountMapOutput
}

type IntegrationAccountMap map[string]IntegrationAccountInput

func (IntegrationAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationAccount)(nil)).Elem()
}

func (i IntegrationAccountMap) ToIntegrationAccountMapOutput() IntegrationAccountMapOutput {
	return i.ToIntegrationAccountMapOutputWithContext(context.Background())
}

func (i IntegrationAccountMap) ToIntegrationAccountMapOutputWithContext(ctx context.Context) IntegrationAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountMapOutput)
}

func (i IntegrationAccountMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*IntegrationAccount] {
	return pulumix.Output[map[string]*IntegrationAccount]{
		OutputState: i.ToIntegrationAccountMapOutputWithContext(ctx).OutputState,
	}
}

type IntegrationAccountOutput struct{ *pulumi.OutputState }

func (IntegrationAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccount)(nil)).Elem()
}

func (o IntegrationAccountOutput) ToIntegrationAccountOutput() IntegrationAccountOutput {
	return o
}

func (o IntegrationAccountOutput) ToIntegrationAccountOutputWithContext(ctx context.Context) IntegrationAccountOutput {
	return o
}

func (o IntegrationAccountOutput) ToOutput(ctx context.Context) pulumix.Output[*IntegrationAccount] {
	return pulumix.Output[*IntegrationAccount]{
		OutputState: o.OutputState,
	}
}

// The API key (or token) for the Cloudflare account.
func (o IntegrationAccountOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccount) pulumi.StringOutput { return v.ApiKey }).(pulumi.StringOutput)
}

// The email associated with the Cloudflare account. If an API key is provided (and not a token), this field is also required.
func (o IntegrationAccountOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAccount) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

// The name of the Cloudflare account.
func (o IntegrationAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccount) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type IntegrationAccountArrayOutput struct{ *pulumi.OutputState }

func (IntegrationAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationAccount)(nil)).Elem()
}

func (o IntegrationAccountArrayOutput) ToIntegrationAccountArrayOutput() IntegrationAccountArrayOutput {
	return o
}

func (o IntegrationAccountArrayOutput) ToIntegrationAccountArrayOutputWithContext(ctx context.Context) IntegrationAccountArrayOutput {
	return o
}

func (o IntegrationAccountArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*IntegrationAccount] {
	return pulumix.Output[[]*IntegrationAccount]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationAccountArrayOutput) Index(i pulumi.IntInput) IntegrationAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationAccount {
		return vs[0].([]*IntegrationAccount)[vs[1].(int)]
	}).(IntegrationAccountOutput)
}

type IntegrationAccountMapOutput struct{ *pulumi.OutputState }

func (IntegrationAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationAccount)(nil)).Elem()
}

func (o IntegrationAccountMapOutput) ToIntegrationAccountMapOutput() IntegrationAccountMapOutput {
	return o
}

func (o IntegrationAccountMapOutput) ToIntegrationAccountMapOutputWithContext(ctx context.Context) IntegrationAccountMapOutput {
	return o
}

func (o IntegrationAccountMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*IntegrationAccount] {
	return pulumix.Output[map[string]*IntegrationAccount]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationAccountMapOutput) MapIndex(k pulumi.StringInput) IntegrationAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationAccount {
		return vs[0].(map[string]*IntegrationAccount)[vs[1].(string)]
	}).(IntegrationAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountInput)(nil)).Elem(), &IntegrationAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountArrayInput)(nil)).Elem(), IntegrationAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountMapInput)(nil)).Elem(), IntegrationAccountMap{})
	pulumi.RegisterOutputType(IntegrationAccountOutput{})
	pulumi.RegisterOutputType(IntegrationAccountArrayOutput{})
	pulumi.RegisterOutputType(IntegrationAccountMapOutput{})
}
