// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog Org Connection resource. Org Connections make data from a source org available in the destination org for selected connection data types (for example, logs or metrics). Org Connections can only be created from a source org to a specified destination org
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create new org connection resource
//			_, err := datadog.NewOrgConnection(ctx, "foo", &datadog.OrgConnectionArgs{
//				ConnectionTypes: pulumi.StringArray{
//					pulumi.String("metrics"),
//					pulumi.String("logs"),
//				},
//				SinkOrgId: pulumi.String("00000000-0000-0000-0000-000000000000"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import datadog:index/orgConnection:OrgConnection foo "<org_connection_id>"
// ```
type OrgConnection struct {
	pulumi.CustomResourceState

	// Set of connection types to enable for this connection (., metrics, logs).
	ConnectionTypes pulumi.StringArrayOutput `pulumi:"connectionTypes"`
	// Timestamp when the connection was created (RFC 3339).
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Creator user ID (UUID).
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// UUID of the sink (destination) organization. Must be a valid UUID.
	SinkOrgId pulumi.StringOutput `pulumi:"sinkOrgId"`
	// Name of the sink (destination) organization.
	SinkOrgName pulumi.StringOutput `pulumi:"sinkOrgName"`
	// UUID of the source (current) organization.
	SourceOrgId pulumi.StringOutput `pulumi:"sourceOrgId"`
	// Name of the source organization.
	SourceOrgName pulumi.StringOutput `pulumi:"sourceOrgName"`
}

// NewOrgConnection registers a new resource with the given unique name, arguments, and options.
func NewOrgConnection(ctx *pulumi.Context,
	name string, args *OrgConnectionArgs, opts ...pulumi.ResourceOption) (*OrgConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionTypes == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionTypes'")
	}
	if args.SinkOrgId == nil {
		return nil, errors.New("invalid value for required argument 'SinkOrgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrgConnection
	err := ctx.RegisterResource("datadog:index/orgConnection:OrgConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgConnection gets an existing OrgConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgConnectionState, opts ...pulumi.ResourceOption) (*OrgConnection, error) {
	var resource OrgConnection
	err := ctx.ReadResource("datadog:index/orgConnection:OrgConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgConnection resources.
type orgConnectionState struct {
	// Set of connection types to enable for this connection (., metrics, logs).
	ConnectionTypes []string `pulumi:"connectionTypes"`
	// Timestamp when the connection was created (RFC 3339).
	CreatedAt *string `pulumi:"createdAt"`
	// Creator user ID (UUID).
	CreatedBy *string `pulumi:"createdBy"`
	// UUID of the sink (destination) organization. Must be a valid UUID.
	SinkOrgId *string `pulumi:"sinkOrgId"`
	// Name of the sink (destination) organization.
	SinkOrgName *string `pulumi:"sinkOrgName"`
	// UUID of the source (current) organization.
	SourceOrgId *string `pulumi:"sourceOrgId"`
	// Name of the source organization.
	SourceOrgName *string `pulumi:"sourceOrgName"`
}

type OrgConnectionState struct {
	// Set of connection types to enable for this connection (., metrics, logs).
	ConnectionTypes pulumi.StringArrayInput
	// Timestamp when the connection was created (RFC 3339).
	CreatedAt pulumi.StringPtrInput
	// Creator user ID (UUID).
	CreatedBy pulumi.StringPtrInput
	// UUID of the sink (destination) organization. Must be a valid UUID.
	SinkOrgId pulumi.StringPtrInput
	// Name of the sink (destination) organization.
	SinkOrgName pulumi.StringPtrInput
	// UUID of the source (current) organization.
	SourceOrgId pulumi.StringPtrInput
	// Name of the source organization.
	SourceOrgName pulumi.StringPtrInput
}

func (OrgConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgConnectionState)(nil)).Elem()
}

type orgConnectionArgs struct {
	// Set of connection types to enable for this connection (., metrics, logs).
	ConnectionTypes []string `pulumi:"connectionTypes"`
	// UUID of the sink (destination) organization. Must be a valid UUID.
	SinkOrgId string `pulumi:"sinkOrgId"`
}

// The set of arguments for constructing a OrgConnection resource.
type OrgConnectionArgs struct {
	// Set of connection types to enable for this connection (., metrics, logs).
	ConnectionTypes pulumi.StringArrayInput
	// UUID of the sink (destination) organization. Must be a valid UUID.
	SinkOrgId pulumi.StringInput
}

func (OrgConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgConnectionArgs)(nil)).Elem()
}

type OrgConnectionInput interface {
	pulumi.Input

	ToOrgConnectionOutput() OrgConnectionOutput
	ToOrgConnectionOutputWithContext(ctx context.Context) OrgConnectionOutput
}

func (*OrgConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgConnection)(nil)).Elem()
}

func (i *OrgConnection) ToOrgConnectionOutput() OrgConnectionOutput {
	return i.ToOrgConnectionOutputWithContext(context.Background())
}

func (i *OrgConnection) ToOrgConnectionOutputWithContext(ctx context.Context) OrgConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgConnectionOutput)
}

// OrgConnectionArrayInput is an input type that accepts OrgConnectionArray and OrgConnectionArrayOutput values.
// You can construct a concrete instance of `OrgConnectionArrayInput` via:
//
//	OrgConnectionArray{ OrgConnectionArgs{...} }
type OrgConnectionArrayInput interface {
	pulumi.Input

	ToOrgConnectionArrayOutput() OrgConnectionArrayOutput
	ToOrgConnectionArrayOutputWithContext(context.Context) OrgConnectionArrayOutput
}

type OrgConnectionArray []OrgConnectionInput

func (OrgConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgConnection)(nil)).Elem()
}

func (i OrgConnectionArray) ToOrgConnectionArrayOutput() OrgConnectionArrayOutput {
	return i.ToOrgConnectionArrayOutputWithContext(context.Background())
}

func (i OrgConnectionArray) ToOrgConnectionArrayOutputWithContext(ctx context.Context) OrgConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgConnectionArrayOutput)
}

// OrgConnectionMapInput is an input type that accepts OrgConnectionMap and OrgConnectionMapOutput values.
// You can construct a concrete instance of `OrgConnectionMapInput` via:
//
//	OrgConnectionMap{ "key": OrgConnectionArgs{...} }
type OrgConnectionMapInput interface {
	pulumi.Input

	ToOrgConnectionMapOutput() OrgConnectionMapOutput
	ToOrgConnectionMapOutputWithContext(context.Context) OrgConnectionMapOutput
}

type OrgConnectionMap map[string]OrgConnectionInput

func (OrgConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgConnection)(nil)).Elem()
}

func (i OrgConnectionMap) ToOrgConnectionMapOutput() OrgConnectionMapOutput {
	return i.ToOrgConnectionMapOutputWithContext(context.Background())
}

func (i OrgConnectionMap) ToOrgConnectionMapOutputWithContext(ctx context.Context) OrgConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgConnectionMapOutput)
}

type OrgConnectionOutput struct{ *pulumi.OutputState }

func (OrgConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgConnection)(nil)).Elem()
}

func (o OrgConnectionOutput) ToOrgConnectionOutput() OrgConnectionOutput {
	return o
}

func (o OrgConnectionOutput) ToOrgConnectionOutputWithContext(ctx context.Context) OrgConnectionOutput {
	return o
}

// Set of connection types to enable for this connection (., metrics, logs).
func (o OrgConnectionOutput) ConnectionTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrgConnection) pulumi.StringArrayOutput { return v.ConnectionTypes }).(pulumi.StringArrayOutput)
}

// Timestamp when the connection was created (RFC 3339).
func (o OrgConnectionOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgConnection) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Creator user ID (UUID).
func (o OrgConnectionOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgConnection) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// UUID of the sink (destination) organization. Must be a valid UUID.
func (o OrgConnectionOutput) SinkOrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgConnection) pulumi.StringOutput { return v.SinkOrgId }).(pulumi.StringOutput)
}

// Name of the sink (destination) organization.
func (o OrgConnectionOutput) SinkOrgName() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgConnection) pulumi.StringOutput { return v.SinkOrgName }).(pulumi.StringOutput)
}

// UUID of the source (current) organization.
func (o OrgConnectionOutput) SourceOrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgConnection) pulumi.StringOutput { return v.SourceOrgId }).(pulumi.StringOutput)
}

// Name of the source organization.
func (o OrgConnectionOutput) SourceOrgName() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgConnection) pulumi.StringOutput { return v.SourceOrgName }).(pulumi.StringOutput)
}

type OrgConnectionArrayOutput struct{ *pulumi.OutputState }

func (OrgConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgConnection)(nil)).Elem()
}

func (o OrgConnectionArrayOutput) ToOrgConnectionArrayOutput() OrgConnectionArrayOutput {
	return o
}

func (o OrgConnectionArrayOutput) ToOrgConnectionArrayOutputWithContext(ctx context.Context) OrgConnectionArrayOutput {
	return o
}

func (o OrgConnectionArrayOutput) Index(i pulumi.IntInput) OrgConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgConnection {
		return vs[0].([]*OrgConnection)[vs[1].(int)]
	}).(OrgConnectionOutput)
}

type OrgConnectionMapOutput struct{ *pulumi.OutputState }

func (OrgConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgConnection)(nil)).Elem()
}

func (o OrgConnectionMapOutput) ToOrgConnectionMapOutput() OrgConnectionMapOutput {
	return o
}

func (o OrgConnectionMapOutput) ToOrgConnectionMapOutputWithContext(ctx context.Context) OrgConnectionMapOutput {
	return o
}

func (o OrgConnectionMapOutput) MapIndex(k pulumi.StringInput) OrgConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgConnection {
		return vs[0].(map[string]*OrgConnection)[vs[1].(string)]
	}).(OrgConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgConnectionInput)(nil)).Elem(), &OrgConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgConnectionArrayInput)(nil)).Elem(), OrgConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgConnectionMapInput)(nil)).Elem(), OrgConnectionMap{})
	pulumi.RegisterOutputType(OrgConnectionOutput{})
	pulumi.RegisterOutputType(OrgConnectionArrayOutput{})
	pulumi.RegisterOutputType(OrgConnectionMapOutput{})
}
