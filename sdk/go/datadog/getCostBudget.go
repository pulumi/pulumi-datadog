// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve information about an existing Datadog cost budget.
func LookupCostBudget(ctx *pulumi.Context, args *LookupCostBudgetArgs, opts ...pulumi.InvokeOption) (*LookupCostBudgetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCostBudgetResult
	err := ctx.Invoke("datadog:index/getCostBudget:getCostBudget", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCostBudget.
type LookupCostBudgetArgs struct {
	// The entries of the budget.
	Entries []GetCostBudgetEntry `pulumi:"entries"`
	// The ID of the budget.
	Id string `pulumi:"id"`
}

// A collection of values returned by getCostBudget.
type LookupCostBudgetResult struct {
	// The month when the budget ends (YYYYMM).
	EndMonth int `pulumi:"endMonth"`
	// The entries of the budget.
	Entries []GetCostBudgetEntry `pulumi:"entries"`
	// The ID of the budget.
	Id string `pulumi:"id"`
	// The cost query used to track against the budget.
	MetricsQuery string `pulumi:"metricsQuery"`
	// The name of the budget.
	Name string `pulumi:"name"`
	// The month when the budget starts (YYYYMM).
	StartMonth int `pulumi:"startMonth"`
	// The sum of all budget entries' amounts.
	TotalAmount float64 `pulumi:"totalAmount"`
}

func LookupCostBudgetOutput(ctx *pulumi.Context, args LookupCostBudgetOutputArgs, opts ...pulumi.InvokeOption) LookupCostBudgetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCostBudgetResultOutput, error) {
			args := v.(LookupCostBudgetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("datadog:index/getCostBudget:getCostBudget", args, LookupCostBudgetResultOutput{}, options).(LookupCostBudgetResultOutput), nil
		}).(LookupCostBudgetResultOutput)
}

// A collection of arguments for invoking getCostBudget.
type LookupCostBudgetOutputArgs struct {
	// The entries of the budget.
	Entries GetCostBudgetEntryArrayInput `pulumi:"entries"`
	// The ID of the budget.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupCostBudgetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCostBudgetArgs)(nil)).Elem()
}

// A collection of values returned by getCostBudget.
type LookupCostBudgetResultOutput struct{ *pulumi.OutputState }

func (LookupCostBudgetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCostBudgetResult)(nil)).Elem()
}

func (o LookupCostBudgetResultOutput) ToLookupCostBudgetResultOutput() LookupCostBudgetResultOutput {
	return o
}

func (o LookupCostBudgetResultOutput) ToLookupCostBudgetResultOutputWithContext(ctx context.Context) LookupCostBudgetResultOutput {
	return o
}

// The month when the budget ends (YYYYMM).
func (o LookupCostBudgetResultOutput) EndMonth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCostBudgetResult) int { return v.EndMonth }).(pulumi.IntOutput)
}

// The entries of the budget.
func (o LookupCostBudgetResultOutput) Entries() GetCostBudgetEntryArrayOutput {
	return o.ApplyT(func(v LookupCostBudgetResult) []GetCostBudgetEntry { return v.Entries }).(GetCostBudgetEntryArrayOutput)
}

// The ID of the budget.
func (o LookupCostBudgetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCostBudgetResult) string { return v.Id }).(pulumi.StringOutput)
}

// The cost query used to track against the budget.
func (o LookupCostBudgetResultOutput) MetricsQuery() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCostBudgetResult) string { return v.MetricsQuery }).(pulumi.StringOutput)
}

// The name of the budget.
func (o LookupCostBudgetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCostBudgetResult) string { return v.Name }).(pulumi.StringOutput)
}

// The month when the budget starts (YYYYMM).
func (o LookupCostBudgetResultOutput) StartMonth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCostBudgetResult) int { return v.StartMonth }).(pulumi.IntOutput)
}

// The sum of all budget entries' amounts.
func (o LookupCostBudgetResultOutput) TotalAmount() pulumi.Float64Output {
	return o.ApplyT(func(v LookupCostBudgetResult) float64 { return v.TotalAmount }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterOutputType(LookupCostBudgetResultOutput{})
}
