// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.NewAppKeyRegistration(ctx, "app_key_registration", &datadog.AppKeyRegistrationArgs{
//				AppKeyId: pulumi.String("11111111-2222-3333-4444-555555555555"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import datadog:index/appKeyRegistration:AppKeyRegistration my_app_key_registration 11111111-2222-3333-4444-555555555555
// ```
type AppKeyRegistration struct {
	pulumi.CustomResourceState

	// The Application Key ID to register.
	AppKeyId pulumi.StringOutput `pulumi:"appKeyId"`
}

// NewAppKeyRegistration registers a new resource with the given unique name, arguments, and options.
func NewAppKeyRegistration(ctx *pulumi.Context,
	name string, args *AppKeyRegistrationArgs, opts ...pulumi.ResourceOption) (*AppKeyRegistration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppKeyId == nil {
		return nil, errors.New("invalid value for required argument 'AppKeyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppKeyRegistration
	err := ctx.RegisterResource("datadog:index/appKeyRegistration:AppKeyRegistration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppKeyRegistration gets an existing AppKeyRegistration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppKeyRegistration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppKeyRegistrationState, opts ...pulumi.ResourceOption) (*AppKeyRegistration, error) {
	var resource AppKeyRegistration
	err := ctx.ReadResource("datadog:index/appKeyRegistration:AppKeyRegistration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppKeyRegistration resources.
type appKeyRegistrationState struct {
	// The Application Key ID to register.
	AppKeyId *string `pulumi:"appKeyId"`
}

type AppKeyRegistrationState struct {
	// The Application Key ID to register.
	AppKeyId pulumi.StringPtrInput
}

func (AppKeyRegistrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*appKeyRegistrationState)(nil)).Elem()
}

type appKeyRegistrationArgs struct {
	// The Application Key ID to register.
	AppKeyId string `pulumi:"appKeyId"`
}

// The set of arguments for constructing a AppKeyRegistration resource.
type AppKeyRegistrationArgs struct {
	// The Application Key ID to register.
	AppKeyId pulumi.StringInput
}

func (AppKeyRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appKeyRegistrationArgs)(nil)).Elem()
}

type AppKeyRegistrationInput interface {
	pulumi.Input

	ToAppKeyRegistrationOutput() AppKeyRegistrationOutput
	ToAppKeyRegistrationOutputWithContext(ctx context.Context) AppKeyRegistrationOutput
}

func (*AppKeyRegistration) ElementType() reflect.Type {
	return reflect.TypeOf((**AppKeyRegistration)(nil)).Elem()
}

func (i *AppKeyRegistration) ToAppKeyRegistrationOutput() AppKeyRegistrationOutput {
	return i.ToAppKeyRegistrationOutputWithContext(context.Background())
}

func (i *AppKeyRegistration) ToAppKeyRegistrationOutputWithContext(ctx context.Context) AppKeyRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppKeyRegistrationOutput)
}

// AppKeyRegistrationArrayInput is an input type that accepts AppKeyRegistrationArray and AppKeyRegistrationArrayOutput values.
// You can construct a concrete instance of `AppKeyRegistrationArrayInput` via:
//
//	AppKeyRegistrationArray{ AppKeyRegistrationArgs{...} }
type AppKeyRegistrationArrayInput interface {
	pulumi.Input

	ToAppKeyRegistrationArrayOutput() AppKeyRegistrationArrayOutput
	ToAppKeyRegistrationArrayOutputWithContext(context.Context) AppKeyRegistrationArrayOutput
}

type AppKeyRegistrationArray []AppKeyRegistrationInput

func (AppKeyRegistrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppKeyRegistration)(nil)).Elem()
}

func (i AppKeyRegistrationArray) ToAppKeyRegistrationArrayOutput() AppKeyRegistrationArrayOutput {
	return i.ToAppKeyRegistrationArrayOutputWithContext(context.Background())
}

func (i AppKeyRegistrationArray) ToAppKeyRegistrationArrayOutputWithContext(ctx context.Context) AppKeyRegistrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppKeyRegistrationArrayOutput)
}

// AppKeyRegistrationMapInput is an input type that accepts AppKeyRegistrationMap and AppKeyRegistrationMapOutput values.
// You can construct a concrete instance of `AppKeyRegistrationMapInput` via:
//
//	AppKeyRegistrationMap{ "key": AppKeyRegistrationArgs{...} }
type AppKeyRegistrationMapInput interface {
	pulumi.Input

	ToAppKeyRegistrationMapOutput() AppKeyRegistrationMapOutput
	ToAppKeyRegistrationMapOutputWithContext(context.Context) AppKeyRegistrationMapOutput
}

type AppKeyRegistrationMap map[string]AppKeyRegistrationInput

func (AppKeyRegistrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppKeyRegistration)(nil)).Elem()
}

func (i AppKeyRegistrationMap) ToAppKeyRegistrationMapOutput() AppKeyRegistrationMapOutput {
	return i.ToAppKeyRegistrationMapOutputWithContext(context.Background())
}

func (i AppKeyRegistrationMap) ToAppKeyRegistrationMapOutputWithContext(ctx context.Context) AppKeyRegistrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppKeyRegistrationMapOutput)
}

type AppKeyRegistrationOutput struct{ *pulumi.OutputState }

func (AppKeyRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppKeyRegistration)(nil)).Elem()
}

func (o AppKeyRegistrationOutput) ToAppKeyRegistrationOutput() AppKeyRegistrationOutput {
	return o
}

func (o AppKeyRegistrationOutput) ToAppKeyRegistrationOutputWithContext(ctx context.Context) AppKeyRegistrationOutput {
	return o
}

// The Application Key ID to register.
func (o AppKeyRegistrationOutput) AppKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppKeyRegistration) pulumi.StringOutput { return v.AppKeyId }).(pulumi.StringOutput)
}

type AppKeyRegistrationArrayOutput struct{ *pulumi.OutputState }

func (AppKeyRegistrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppKeyRegistration)(nil)).Elem()
}

func (o AppKeyRegistrationArrayOutput) ToAppKeyRegistrationArrayOutput() AppKeyRegistrationArrayOutput {
	return o
}

func (o AppKeyRegistrationArrayOutput) ToAppKeyRegistrationArrayOutputWithContext(ctx context.Context) AppKeyRegistrationArrayOutput {
	return o
}

func (o AppKeyRegistrationArrayOutput) Index(i pulumi.IntInput) AppKeyRegistrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppKeyRegistration {
		return vs[0].([]*AppKeyRegistration)[vs[1].(int)]
	}).(AppKeyRegistrationOutput)
}

type AppKeyRegistrationMapOutput struct{ *pulumi.OutputState }

func (AppKeyRegistrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppKeyRegistration)(nil)).Elem()
}

func (o AppKeyRegistrationMapOutput) ToAppKeyRegistrationMapOutput() AppKeyRegistrationMapOutput {
	return o
}

func (o AppKeyRegistrationMapOutput) ToAppKeyRegistrationMapOutputWithContext(ctx context.Context) AppKeyRegistrationMapOutput {
	return o
}

func (o AppKeyRegistrationMapOutput) MapIndex(k pulumi.StringInput) AppKeyRegistrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppKeyRegistration {
		return vs[0].(map[string]*AppKeyRegistration)[vs[1].(string)]
	}).(AppKeyRegistrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppKeyRegistrationInput)(nil)).Elem(), &AppKeyRegistration{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppKeyRegistrationArrayInput)(nil)).Elem(), AppKeyRegistrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppKeyRegistrationMapInput)(nil)).Elem(), AppKeyRegistrationMap{})
	pulumi.RegisterOutputType(AppKeyRegistrationOutput{})
	pulumi.RegisterOutputType(AppKeyRegistrationArrayOutput{})
	pulumi.RegisterOutputType(AppKeyRegistrationMapOutput{})
}
