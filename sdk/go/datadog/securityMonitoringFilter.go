// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog Security Monitoring Rule API resource for security filters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := datadog.NewSecurityMonitoringFilter(ctx, "myFilter", &datadog.SecurityMonitoringFilterArgs{
// 			ExclusionFilters: SecurityMonitoringFilterExclusionFilterArray{
// 				&SecurityMonitoringFilterExclusionFilterArgs{
// 					Name:  pulumi.String("first"),
// 					Query: pulumi.String("exclude some logs"),
// 				},
// 				&SecurityMonitoringFilterExclusionFilterArgs{
// 					Name:  pulumi.String("second"),
// 					Query: pulumi.String("exclude some other logs"),
// 				},
// 			},
// 			IsEnabled: pulumi.Bool(true),
// 			Name:      pulumi.String("My filter"),
// 			Query:     pulumi.String("The filter is filtering."),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// # Security monitoring filters can be imported using ID, e.g.
//
// ```sh
//  $ pulumi import datadog:index/securityMonitoringFilter:SecurityMonitoringFilter my_filter m0o-hto-lkb
// ```
type SecurityMonitoringFilter struct {
	pulumi.CustomResourceState

	// Exclusion filters to exclude some logs from the security filter.
	ExclusionFilters SecurityMonitoringFilterExclusionFilterArrayOutput `pulumi:"exclusionFilters"`
	// The filtered data type. Valid values are `logs`.
	FilteredDataType pulumi.StringPtrOutput `pulumi:"filteredDataType"`
	// Whether the security filter is enabled.
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// The name of the security filter.
	Name pulumi.StringOutput `pulumi:"name"`
	// The query of the security filter.
	Query pulumi.StringOutput `pulumi:"query"`
	// The version of the security filter.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewSecurityMonitoringFilter registers a new resource with the given unique name, arguments, and options.
func NewSecurityMonitoringFilter(ctx *pulumi.Context,
	name string, args *SecurityMonitoringFilterArgs, opts ...pulumi.ResourceOption) (*SecurityMonitoringFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IsEnabled == nil {
		return nil, errors.New("invalid value for required argument 'IsEnabled'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Query == nil {
		return nil, errors.New("invalid value for required argument 'Query'")
	}
	var resource SecurityMonitoringFilter
	err := ctx.RegisterResource("datadog:index/securityMonitoringFilter:SecurityMonitoringFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityMonitoringFilter gets an existing SecurityMonitoringFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityMonitoringFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityMonitoringFilterState, opts ...pulumi.ResourceOption) (*SecurityMonitoringFilter, error) {
	var resource SecurityMonitoringFilter
	err := ctx.ReadResource("datadog:index/securityMonitoringFilter:SecurityMonitoringFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityMonitoringFilter resources.
type securityMonitoringFilterState struct {
	// Exclusion filters to exclude some logs from the security filter.
	ExclusionFilters []SecurityMonitoringFilterExclusionFilter `pulumi:"exclusionFilters"`
	// The filtered data type. Valid values are `logs`.
	FilteredDataType *string `pulumi:"filteredDataType"`
	// Whether the security filter is enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The name of the security filter.
	Name *string `pulumi:"name"`
	// The query of the security filter.
	Query *string `pulumi:"query"`
	// The version of the security filter.
	Version *int `pulumi:"version"`
}

type SecurityMonitoringFilterState struct {
	// Exclusion filters to exclude some logs from the security filter.
	ExclusionFilters SecurityMonitoringFilterExclusionFilterArrayInput
	// The filtered data type. Valid values are `logs`.
	FilteredDataType pulumi.StringPtrInput
	// Whether the security filter is enabled.
	IsEnabled pulumi.BoolPtrInput
	// The name of the security filter.
	Name pulumi.StringPtrInput
	// The query of the security filter.
	Query pulumi.StringPtrInput
	// The version of the security filter.
	Version pulumi.IntPtrInput
}

func (SecurityMonitoringFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityMonitoringFilterState)(nil)).Elem()
}

type securityMonitoringFilterArgs struct {
	// Exclusion filters to exclude some logs from the security filter.
	ExclusionFilters []SecurityMonitoringFilterExclusionFilter `pulumi:"exclusionFilters"`
	// The filtered data type. Valid values are `logs`.
	FilteredDataType *string `pulumi:"filteredDataType"`
	// Whether the security filter is enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// The name of the security filter.
	Name string `pulumi:"name"`
	// The query of the security filter.
	Query string `pulumi:"query"`
}

// The set of arguments for constructing a SecurityMonitoringFilter resource.
type SecurityMonitoringFilterArgs struct {
	// Exclusion filters to exclude some logs from the security filter.
	ExclusionFilters SecurityMonitoringFilterExclusionFilterArrayInput
	// The filtered data type. Valid values are `logs`.
	FilteredDataType pulumi.StringPtrInput
	// Whether the security filter is enabled.
	IsEnabled pulumi.BoolInput
	// The name of the security filter.
	Name pulumi.StringInput
	// The query of the security filter.
	Query pulumi.StringInput
}

func (SecurityMonitoringFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityMonitoringFilterArgs)(nil)).Elem()
}

type SecurityMonitoringFilterInput interface {
	pulumi.Input

	ToSecurityMonitoringFilterOutput() SecurityMonitoringFilterOutput
	ToSecurityMonitoringFilterOutputWithContext(ctx context.Context) SecurityMonitoringFilterOutput
}

func (*SecurityMonitoringFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityMonitoringFilter)(nil)).Elem()
}

func (i *SecurityMonitoringFilter) ToSecurityMonitoringFilterOutput() SecurityMonitoringFilterOutput {
	return i.ToSecurityMonitoringFilterOutputWithContext(context.Background())
}

func (i *SecurityMonitoringFilter) ToSecurityMonitoringFilterOutputWithContext(ctx context.Context) SecurityMonitoringFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityMonitoringFilterOutput)
}

// SecurityMonitoringFilterArrayInput is an input type that accepts SecurityMonitoringFilterArray and SecurityMonitoringFilterArrayOutput values.
// You can construct a concrete instance of `SecurityMonitoringFilterArrayInput` via:
//
//          SecurityMonitoringFilterArray{ SecurityMonitoringFilterArgs{...} }
type SecurityMonitoringFilterArrayInput interface {
	pulumi.Input

	ToSecurityMonitoringFilterArrayOutput() SecurityMonitoringFilterArrayOutput
	ToSecurityMonitoringFilterArrayOutputWithContext(context.Context) SecurityMonitoringFilterArrayOutput
}

type SecurityMonitoringFilterArray []SecurityMonitoringFilterInput

func (SecurityMonitoringFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityMonitoringFilter)(nil)).Elem()
}

func (i SecurityMonitoringFilterArray) ToSecurityMonitoringFilterArrayOutput() SecurityMonitoringFilterArrayOutput {
	return i.ToSecurityMonitoringFilterArrayOutputWithContext(context.Background())
}

func (i SecurityMonitoringFilterArray) ToSecurityMonitoringFilterArrayOutputWithContext(ctx context.Context) SecurityMonitoringFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityMonitoringFilterArrayOutput)
}

// SecurityMonitoringFilterMapInput is an input type that accepts SecurityMonitoringFilterMap and SecurityMonitoringFilterMapOutput values.
// You can construct a concrete instance of `SecurityMonitoringFilterMapInput` via:
//
//          SecurityMonitoringFilterMap{ "key": SecurityMonitoringFilterArgs{...} }
type SecurityMonitoringFilterMapInput interface {
	pulumi.Input

	ToSecurityMonitoringFilterMapOutput() SecurityMonitoringFilterMapOutput
	ToSecurityMonitoringFilterMapOutputWithContext(context.Context) SecurityMonitoringFilterMapOutput
}

type SecurityMonitoringFilterMap map[string]SecurityMonitoringFilterInput

func (SecurityMonitoringFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityMonitoringFilter)(nil)).Elem()
}

func (i SecurityMonitoringFilterMap) ToSecurityMonitoringFilterMapOutput() SecurityMonitoringFilterMapOutput {
	return i.ToSecurityMonitoringFilterMapOutputWithContext(context.Background())
}

func (i SecurityMonitoringFilterMap) ToSecurityMonitoringFilterMapOutputWithContext(ctx context.Context) SecurityMonitoringFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityMonitoringFilterMapOutput)
}

type SecurityMonitoringFilterOutput struct{ *pulumi.OutputState }

func (SecurityMonitoringFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityMonitoringFilter)(nil)).Elem()
}

func (o SecurityMonitoringFilterOutput) ToSecurityMonitoringFilterOutput() SecurityMonitoringFilterOutput {
	return o
}

func (o SecurityMonitoringFilterOutput) ToSecurityMonitoringFilterOutputWithContext(ctx context.Context) SecurityMonitoringFilterOutput {
	return o
}

type SecurityMonitoringFilterArrayOutput struct{ *pulumi.OutputState }

func (SecurityMonitoringFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityMonitoringFilter)(nil)).Elem()
}

func (o SecurityMonitoringFilterArrayOutput) ToSecurityMonitoringFilterArrayOutput() SecurityMonitoringFilterArrayOutput {
	return o
}

func (o SecurityMonitoringFilterArrayOutput) ToSecurityMonitoringFilterArrayOutputWithContext(ctx context.Context) SecurityMonitoringFilterArrayOutput {
	return o
}

func (o SecurityMonitoringFilterArrayOutput) Index(i pulumi.IntInput) SecurityMonitoringFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityMonitoringFilter {
		return vs[0].([]*SecurityMonitoringFilter)[vs[1].(int)]
	}).(SecurityMonitoringFilterOutput)
}

type SecurityMonitoringFilterMapOutput struct{ *pulumi.OutputState }

func (SecurityMonitoringFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityMonitoringFilter)(nil)).Elem()
}

func (o SecurityMonitoringFilterMapOutput) ToSecurityMonitoringFilterMapOutput() SecurityMonitoringFilterMapOutput {
	return o
}

func (o SecurityMonitoringFilterMapOutput) ToSecurityMonitoringFilterMapOutputWithContext(ctx context.Context) SecurityMonitoringFilterMapOutput {
	return o
}

func (o SecurityMonitoringFilterMapOutput) MapIndex(k pulumi.StringInput) SecurityMonitoringFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityMonitoringFilter {
		return vs[0].(map[string]*SecurityMonitoringFilter)[vs[1].(string)]
	}).(SecurityMonitoringFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityMonitoringFilterInput)(nil)).Elem(), &SecurityMonitoringFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityMonitoringFilterArrayInput)(nil)).Elem(), SecurityMonitoringFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityMonitoringFilterMapInput)(nil)).Elem(), SecurityMonitoringFilterMap{})
	pulumi.RegisterOutputType(SecurityMonitoringFilterOutput{})
	pulumi.RegisterOutputType(SecurityMonitoringFilterArrayOutput{})
	pulumi.RegisterOutputType(SecurityMonitoringFilterMapOutput{})
}
