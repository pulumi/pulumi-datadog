// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Datadog Cloud Configuration Rule resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.NewCloudConfigurationRule(ctx, "myrule", &datadog.CloudConfigurationRuleArgs{
//				Enabled: pulumi.Bool(true),
//				GroupBies: pulumi.StringArray{
//					pulumi.String("@resource"),
//				},
//				Message: pulumi.String("Rule has triggered"),
//				Name:    pulumi.String("My cloud configuration rule"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("@channel"),
//				},
//				Policy: pulumi.String(`        package datadog
//
//	        import data.datadog.output as dd_output
//
//	        import future.keywords.contains
//	        import future.keywords.if
//	        import future.keywords.in
//
//	        eval(resource) = "skip" if {
//	            # Logic that evaluates to true if the resource should be skipped
//	            true
//	        } else = "pass" {
//	            # Logic that evaluates to true if the resource is compliant
//	            true
//	        } else = "fail" {
//	            # Logic that evaluates to true if the resource is not compliant
//	            true
//	        }
//
//	        # This part remains unchanged for all rules
//	        results contains result if {
//	            some resource in input.resources[input.main_resource_type]
//	            result := dd_output.format(resource, eval(resource))
//	        }
//
// `),
//
//				RelatedResourceTypes: pulumi.StringArray{},
//				ResourceType:         pulumi.String("aws_s3_bucket"),
//				Severity:             pulumi.String("high"),
//				Tags: pulumi.StringArray{
//					pulumi.String("some:tag"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Security monitoring rules can be imported using ID, e.g.
//
// ```sh
//
//	$ pulumi import datadog:index/cloudConfigurationRule:CloudConfigurationRule my_rule m0o-hto-lkb
//
// ```
type CloudConfigurationRule struct {
	pulumi.CustomResourceState

	// Whether the cloud configuration rule is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Additional queries to filter matched events before they are processed. Defaults to empty list
	Filters CloudConfigurationRuleFilterArrayOutput `pulumi:"filters"`
	// Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
	GroupBies pulumi.StringArrayOutput `pulumi:"groupBies"`
	// The message associated to the rule that will be shown in findings and signals.
	Message pulumi.StringOutput `pulumi:"message"`
	// The name of the cloud configuration rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// Notification targets for signals. Defaults to empty list.
	Notifications pulumi.StringArrayOutput `pulumi:"notifications"`
	// Policy written in Rego format.
	Policy pulumi.StringOutput `pulumi:"policy"`
	// Related resource types to be checked by the rule. Defaults to empty list.
	RelatedResourceTypes pulumi.StringArrayOutput `pulumi:"relatedResourceTypes"`
	// Main resource type to be checked by the rule.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
	Severity pulumi.StringOutput `pulumi:"severity"`
	// Tags of the rule, propagated to findings and signals. Defaults to empty list.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewCloudConfigurationRule registers a new resource with the given unique name, arguments, and options.
func NewCloudConfigurationRule(ctx *pulumi.Context,
	name string, args *CloudConfigurationRuleArgs, opts ...pulumi.ResourceOption) (*CloudConfigurationRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Message == nil {
		return nil, errors.New("invalid value for required argument 'Message'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	if args.Severity == nil {
		return nil, errors.New("invalid value for required argument 'Severity'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudConfigurationRule
	err := ctx.RegisterResource("datadog:index/cloudConfigurationRule:CloudConfigurationRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudConfigurationRule gets an existing CloudConfigurationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudConfigurationRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudConfigurationRuleState, opts ...pulumi.ResourceOption) (*CloudConfigurationRule, error) {
	var resource CloudConfigurationRule
	err := ctx.ReadResource("datadog:index/cloudConfigurationRule:CloudConfigurationRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudConfigurationRule resources.
type cloudConfigurationRuleState struct {
	// Whether the cloud configuration rule is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Additional queries to filter matched events before they are processed. Defaults to empty list
	Filters []CloudConfigurationRuleFilter `pulumi:"filters"`
	// Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
	GroupBies []string `pulumi:"groupBies"`
	// The message associated to the rule that will be shown in findings and signals.
	Message *string `pulumi:"message"`
	// The name of the cloud configuration rule.
	Name *string `pulumi:"name"`
	// Notification targets for signals. Defaults to empty list.
	Notifications []string `pulumi:"notifications"`
	// Policy written in Rego format.
	Policy *string `pulumi:"policy"`
	// Related resource types to be checked by the rule. Defaults to empty list.
	RelatedResourceTypes []string `pulumi:"relatedResourceTypes"`
	// Main resource type to be checked by the rule.
	ResourceType *string `pulumi:"resourceType"`
	// Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
	Severity *string `pulumi:"severity"`
	// Tags of the rule, propagated to findings and signals. Defaults to empty list.
	Tags []string `pulumi:"tags"`
}

type CloudConfigurationRuleState struct {
	// Whether the cloud configuration rule is enabled.
	Enabled pulumi.BoolPtrInput
	// Additional queries to filter matched events before they are processed. Defaults to empty list
	Filters CloudConfigurationRuleFilterArrayInput
	// Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
	GroupBies pulumi.StringArrayInput
	// The message associated to the rule that will be shown in findings and signals.
	Message pulumi.StringPtrInput
	// The name of the cloud configuration rule.
	Name pulumi.StringPtrInput
	// Notification targets for signals. Defaults to empty list.
	Notifications pulumi.StringArrayInput
	// Policy written in Rego format.
	Policy pulumi.StringPtrInput
	// Related resource types to be checked by the rule. Defaults to empty list.
	RelatedResourceTypes pulumi.StringArrayInput
	// Main resource type to be checked by the rule.
	ResourceType pulumi.StringPtrInput
	// Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
	Severity pulumi.StringPtrInput
	// Tags of the rule, propagated to findings and signals. Defaults to empty list.
	Tags pulumi.StringArrayInput
}

func (CloudConfigurationRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudConfigurationRuleState)(nil)).Elem()
}

type cloudConfigurationRuleArgs struct {
	// Whether the cloud configuration rule is enabled.
	Enabled bool `pulumi:"enabled"`
	// Additional queries to filter matched events before they are processed. Defaults to empty list
	Filters []CloudConfigurationRuleFilter `pulumi:"filters"`
	// Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
	GroupBies []string `pulumi:"groupBies"`
	// The message associated to the rule that will be shown in findings and signals.
	Message string `pulumi:"message"`
	// The name of the cloud configuration rule.
	Name string `pulumi:"name"`
	// Notification targets for signals. Defaults to empty list.
	Notifications []string `pulumi:"notifications"`
	// Policy written in Rego format.
	Policy string `pulumi:"policy"`
	// Related resource types to be checked by the rule. Defaults to empty list.
	RelatedResourceTypes []string `pulumi:"relatedResourceTypes"`
	// Main resource type to be checked by the rule.
	ResourceType string `pulumi:"resourceType"`
	// Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
	Severity string `pulumi:"severity"`
	// Tags of the rule, propagated to findings and signals. Defaults to empty list.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a CloudConfigurationRule resource.
type CloudConfigurationRuleArgs struct {
	// Whether the cloud configuration rule is enabled.
	Enabled pulumi.BoolInput
	// Additional queries to filter matched events before they are processed. Defaults to empty list
	Filters CloudConfigurationRuleFilterArrayInput
	// Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
	GroupBies pulumi.StringArrayInput
	// The message associated to the rule that will be shown in findings and signals.
	Message pulumi.StringInput
	// The name of the cloud configuration rule.
	Name pulumi.StringInput
	// Notification targets for signals. Defaults to empty list.
	Notifications pulumi.StringArrayInput
	// Policy written in Rego format.
	Policy pulumi.StringInput
	// Related resource types to be checked by the rule. Defaults to empty list.
	RelatedResourceTypes pulumi.StringArrayInput
	// Main resource type to be checked by the rule.
	ResourceType pulumi.StringInput
	// Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
	Severity pulumi.StringInput
	// Tags of the rule, propagated to findings and signals. Defaults to empty list.
	Tags pulumi.StringArrayInput
}

func (CloudConfigurationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudConfigurationRuleArgs)(nil)).Elem()
}

type CloudConfigurationRuleInput interface {
	pulumi.Input

	ToCloudConfigurationRuleOutput() CloudConfigurationRuleOutput
	ToCloudConfigurationRuleOutputWithContext(ctx context.Context) CloudConfigurationRuleOutput
}

func (*CloudConfigurationRule) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudConfigurationRule)(nil)).Elem()
}

func (i *CloudConfigurationRule) ToCloudConfigurationRuleOutput() CloudConfigurationRuleOutput {
	return i.ToCloudConfigurationRuleOutputWithContext(context.Background())
}

func (i *CloudConfigurationRule) ToCloudConfigurationRuleOutputWithContext(ctx context.Context) CloudConfigurationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudConfigurationRuleOutput)
}

func (i *CloudConfigurationRule) ToOutput(ctx context.Context) pulumix.Output[*CloudConfigurationRule] {
	return pulumix.Output[*CloudConfigurationRule]{
		OutputState: i.ToCloudConfigurationRuleOutputWithContext(ctx).OutputState,
	}
}

// CloudConfigurationRuleArrayInput is an input type that accepts CloudConfigurationRuleArray and CloudConfigurationRuleArrayOutput values.
// You can construct a concrete instance of `CloudConfigurationRuleArrayInput` via:
//
//	CloudConfigurationRuleArray{ CloudConfigurationRuleArgs{...} }
type CloudConfigurationRuleArrayInput interface {
	pulumi.Input

	ToCloudConfigurationRuleArrayOutput() CloudConfigurationRuleArrayOutput
	ToCloudConfigurationRuleArrayOutputWithContext(context.Context) CloudConfigurationRuleArrayOutput
}

type CloudConfigurationRuleArray []CloudConfigurationRuleInput

func (CloudConfigurationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudConfigurationRule)(nil)).Elem()
}

func (i CloudConfigurationRuleArray) ToCloudConfigurationRuleArrayOutput() CloudConfigurationRuleArrayOutput {
	return i.ToCloudConfigurationRuleArrayOutputWithContext(context.Background())
}

func (i CloudConfigurationRuleArray) ToCloudConfigurationRuleArrayOutputWithContext(ctx context.Context) CloudConfigurationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudConfigurationRuleArrayOutput)
}

func (i CloudConfigurationRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]*CloudConfigurationRule] {
	return pulumix.Output[[]*CloudConfigurationRule]{
		OutputState: i.ToCloudConfigurationRuleArrayOutputWithContext(ctx).OutputState,
	}
}

// CloudConfigurationRuleMapInput is an input type that accepts CloudConfigurationRuleMap and CloudConfigurationRuleMapOutput values.
// You can construct a concrete instance of `CloudConfigurationRuleMapInput` via:
//
//	CloudConfigurationRuleMap{ "key": CloudConfigurationRuleArgs{...} }
type CloudConfigurationRuleMapInput interface {
	pulumi.Input

	ToCloudConfigurationRuleMapOutput() CloudConfigurationRuleMapOutput
	ToCloudConfigurationRuleMapOutputWithContext(context.Context) CloudConfigurationRuleMapOutput
}

type CloudConfigurationRuleMap map[string]CloudConfigurationRuleInput

func (CloudConfigurationRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudConfigurationRule)(nil)).Elem()
}

func (i CloudConfigurationRuleMap) ToCloudConfigurationRuleMapOutput() CloudConfigurationRuleMapOutput {
	return i.ToCloudConfigurationRuleMapOutputWithContext(context.Background())
}

func (i CloudConfigurationRuleMap) ToCloudConfigurationRuleMapOutputWithContext(ctx context.Context) CloudConfigurationRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudConfigurationRuleMapOutput)
}

func (i CloudConfigurationRuleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CloudConfigurationRule] {
	return pulumix.Output[map[string]*CloudConfigurationRule]{
		OutputState: i.ToCloudConfigurationRuleMapOutputWithContext(ctx).OutputState,
	}
}

type CloudConfigurationRuleOutput struct{ *pulumi.OutputState }

func (CloudConfigurationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudConfigurationRule)(nil)).Elem()
}

func (o CloudConfigurationRuleOutput) ToCloudConfigurationRuleOutput() CloudConfigurationRuleOutput {
	return o
}

func (o CloudConfigurationRuleOutput) ToCloudConfigurationRuleOutputWithContext(ctx context.Context) CloudConfigurationRuleOutput {
	return o
}

func (o CloudConfigurationRuleOutput) ToOutput(ctx context.Context) pulumix.Output[*CloudConfigurationRule] {
	return pulumix.Output[*CloudConfigurationRule]{
		OutputState: o.OutputState,
	}
}

// Whether the cloud configuration rule is enabled.
func (o CloudConfigurationRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CloudConfigurationRule) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Additional queries to filter matched events before they are processed. Defaults to empty list
func (o CloudConfigurationRuleOutput) Filters() CloudConfigurationRuleFilterArrayOutput {
	return o.ApplyT(func(v *CloudConfigurationRule) CloudConfigurationRuleFilterArrayOutput { return v.Filters }).(CloudConfigurationRuleFilterArrayOutput)
}

// Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
func (o CloudConfigurationRuleOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudConfigurationRule) pulumi.StringArrayOutput { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// The message associated to the rule that will be shown in findings and signals.
func (o CloudConfigurationRuleOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudConfigurationRule) pulumi.StringOutput { return v.Message }).(pulumi.StringOutput)
}

// The name of the cloud configuration rule.
func (o CloudConfigurationRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudConfigurationRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Notification targets for signals. Defaults to empty list.
func (o CloudConfigurationRuleOutput) Notifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudConfigurationRule) pulumi.StringArrayOutput { return v.Notifications }).(pulumi.StringArrayOutput)
}

// Policy written in Rego format.
func (o CloudConfigurationRuleOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudConfigurationRule) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

// Related resource types to be checked by the rule. Defaults to empty list.
func (o CloudConfigurationRuleOutput) RelatedResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudConfigurationRule) pulumi.StringArrayOutput { return v.RelatedResourceTypes }).(pulumi.StringArrayOutput)
}

// Main resource type to be checked by the rule.
func (o CloudConfigurationRuleOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudConfigurationRule) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
func (o CloudConfigurationRuleOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudConfigurationRule) pulumi.StringOutput { return v.Severity }).(pulumi.StringOutput)
}

// Tags of the rule, propagated to findings and signals. Defaults to empty list.
func (o CloudConfigurationRuleOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudConfigurationRule) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type CloudConfigurationRuleArrayOutput struct{ *pulumi.OutputState }

func (CloudConfigurationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudConfigurationRule)(nil)).Elem()
}

func (o CloudConfigurationRuleArrayOutput) ToCloudConfigurationRuleArrayOutput() CloudConfigurationRuleArrayOutput {
	return o
}

func (o CloudConfigurationRuleArrayOutput) ToCloudConfigurationRuleArrayOutputWithContext(ctx context.Context) CloudConfigurationRuleArrayOutput {
	return o
}

func (o CloudConfigurationRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CloudConfigurationRule] {
	return pulumix.Output[[]*CloudConfigurationRule]{
		OutputState: o.OutputState,
	}
}

func (o CloudConfigurationRuleArrayOutput) Index(i pulumi.IntInput) CloudConfigurationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudConfigurationRule {
		return vs[0].([]*CloudConfigurationRule)[vs[1].(int)]
	}).(CloudConfigurationRuleOutput)
}

type CloudConfigurationRuleMapOutput struct{ *pulumi.OutputState }

func (CloudConfigurationRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudConfigurationRule)(nil)).Elem()
}

func (o CloudConfigurationRuleMapOutput) ToCloudConfigurationRuleMapOutput() CloudConfigurationRuleMapOutput {
	return o
}

func (o CloudConfigurationRuleMapOutput) ToCloudConfigurationRuleMapOutputWithContext(ctx context.Context) CloudConfigurationRuleMapOutput {
	return o
}

func (o CloudConfigurationRuleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CloudConfigurationRule] {
	return pulumix.Output[map[string]*CloudConfigurationRule]{
		OutputState: o.OutputState,
	}
}

func (o CloudConfigurationRuleMapOutput) MapIndex(k pulumi.StringInput) CloudConfigurationRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudConfigurationRule {
		return vs[0].(map[string]*CloudConfigurationRule)[vs[1].(string)]
	}).(CloudConfigurationRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudConfigurationRuleInput)(nil)).Elem(), &CloudConfigurationRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudConfigurationRuleArrayInput)(nil)).Elem(), CloudConfigurationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudConfigurationRuleMapInput)(nil)).Elem(), CloudConfigurationRuleMap{})
	pulumi.RegisterOutputType(CloudConfigurationRuleOutput{})
	pulumi.RegisterOutputType(CloudConfigurationRuleArrayOutput{})
	pulumi.RegisterOutputType(CloudConfigurationRuleMapOutput{})
}
