// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog SpansMetric resource. This can be used to create and manage Datadog spans_metric.
//
// ## Import
//
// ```sh
//
//	$ pulumi import datadog:index/spansMetric:SpansMetric testing_spans_metric testing.span.metric
//
// ```
type SpansMetric struct {
	pulumi.CustomResourceState

	Compute   SpansMetricComputePtrOutput   `pulumi:"compute"`
	Filter    SpansMetricFilterPtrOutput    `pulumi:"filter"`
	GroupBies SpansMetricGroupByArrayOutput `pulumi:"groupBies"`
	// The name of the span-based metric. This field can't be updated after creation.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewSpansMetric registers a new resource with the given unique name, arguments, and options.
func NewSpansMetric(ctx *pulumi.Context,
	name string, args *SpansMetricArgs, opts ...pulumi.ResourceOption) (*SpansMetric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource SpansMetric
	err := ctx.RegisterResource("datadog:index/spansMetric:SpansMetric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpansMetric gets an existing SpansMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpansMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpansMetricState, opts ...pulumi.ResourceOption) (*SpansMetric, error) {
	var resource SpansMetric
	err := ctx.ReadResource("datadog:index/spansMetric:SpansMetric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpansMetric resources.
type spansMetricState struct {
	Compute   *SpansMetricCompute  `pulumi:"compute"`
	Filter    *SpansMetricFilter   `pulumi:"filter"`
	GroupBies []SpansMetricGroupBy `pulumi:"groupBies"`
	// The name of the span-based metric. This field can't be updated after creation.
	Name *string `pulumi:"name"`
}

type SpansMetricState struct {
	Compute   SpansMetricComputePtrInput
	Filter    SpansMetricFilterPtrInput
	GroupBies SpansMetricGroupByArrayInput
	// The name of the span-based metric. This field can't be updated after creation.
	Name pulumi.StringPtrInput
}

func (SpansMetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*spansMetricState)(nil)).Elem()
}

type spansMetricArgs struct {
	Compute   *SpansMetricCompute  `pulumi:"compute"`
	Filter    *SpansMetricFilter   `pulumi:"filter"`
	GroupBies []SpansMetricGroupBy `pulumi:"groupBies"`
	// The name of the span-based metric. This field can't be updated after creation.
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a SpansMetric resource.
type SpansMetricArgs struct {
	Compute   SpansMetricComputePtrInput
	Filter    SpansMetricFilterPtrInput
	GroupBies SpansMetricGroupByArrayInput
	// The name of the span-based metric. This field can't be updated after creation.
	Name pulumi.StringInput
}

func (SpansMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spansMetricArgs)(nil)).Elem()
}

type SpansMetricInput interface {
	pulumi.Input

	ToSpansMetricOutput() SpansMetricOutput
	ToSpansMetricOutputWithContext(ctx context.Context) SpansMetricOutput
}

func (*SpansMetric) ElementType() reflect.Type {
	return reflect.TypeOf((**SpansMetric)(nil)).Elem()
}

func (i *SpansMetric) ToSpansMetricOutput() SpansMetricOutput {
	return i.ToSpansMetricOutputWithContext(context.Background())
}

func (i *SpansMetric) ToSpansMetricOutputWithContext(ctx context.Context) SpansMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpansMetricOutput)
}

// SpansMetricArrayInput is an input type that accepts SpansMetricArray and SpansMetricArrayOutput values.
// You can construct a concrete instance of `SpansMetricArrayInput` via:
//
//	SpansMetricArray{ SpansMetricArgs{...} }
type SpansMetricArrayInput interface {
	pulumi.Input

	ToSpansMetricArrayOutput() SpansMetricArrayOutput
	ToSpansMetricArrayOutputWithContext(context.Context) SpansMetricArrayOutput
}

type SpansMetricArray []SpansMetricInput

func (SpansMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpansMetric)(nil)).Elem()
}

func (i SpansMetricArray) ToSpansMetricArrayOutput() SpansMetricArrayOutput {
	return i.ToSpansMetricArrayOutputWithContext(context.Background())
}

func (i SpansMetricArray) ToSpansMetricArrayOutputWithContext(ctx context.Context) SpansMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpansMetricArrayOutput)
}

// SpansMetricMapInput is an input type that accepts SpansMetricMap and SpansMetricMapOutput values.
// You can construct a concrete instance of `SpansMetricMapInput` via:
//
//	SpansMetricMap{ "key": SpansMetricArgs{...} }
type SpansMetricMapInput interface {
	pulumi.Input

	ToSpansMetricMapOutput() SpansMetricMapOutput
	ToSpansMetricMapOutputWithContext(context.Context) SpansMetricMapOutput
}

type SpansMetricMap map[string]SpansMetricInput

func (SpansMetricMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpansMetric)(nil)).Elem()
}

func (i SpansMetricMap) ToSpansMetricMapOutput() SpansMetricMapOutput {
	return i.ToSpansMetricMapOutputWithContext(context.Background())
}

func (i SpansMetricMap) ToSpansMetricMapOutputWithContext(ctx context.Context) SpansMetricMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpansMetricMapOutput)
}

type SpansMetricOutput struct{ *pulumi.OutputState }

func (SpansMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpansMetric)(nil)).Elem()
}

func (o SpansMetricOutput) ToSpansMetricOutput() SpansMetricOutput {
	return o
}

func (o SpansMetricOutput) ToSpansMetricOutputWithContext(ctx context.Context) SpansMetricOutput {
	return o
}

func (o SpansMetricOutput) Compute() SpansMetricComputePtrOutput {
	return o.ApplyT(func(v *SpansMetric) SpansMetricComputePtrOutput { return v.Compute }).(SpansMetricComputePtrOutput)
}

func (o SpansMetricOutput) Filter() SpansMetricFilterPtrOutput {
	return o.ApplyT(func(v *SpansMetric) SpansMetricFilterPtrOutput { return v.Filter }).(SpansMetricFilterPtrOutput)
}

func (o SpansMetricOutput) GroupBies() SpansMetricGroupByArrayOutput {
	return o.ApplyT(func(v *SpansMetric) SpansMetricGroupByArrayOutput { return v.GroupBies }).(SpansMetricGroupByArrayOutput)
}

// The name of the span-based metric. This field can't be updated after creation.
func (o SpansMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SpansMetric) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type SpansMetricArrayOutput struct{ *pulumi.OutputState }

func (SpansMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpansMetric)(nil)).Elem()
}

func (o SpansMetricArrayOutput) ToSpansMetricArrayOutput() SpansMetricArrayOutput {
	return o
}

func (o SpansMetricArrayOutput) ToSpansMetricArrayOutputWithContext(ctx context.Context) SpansMetricArrayOutput {
	return o
}

func (o SpansMetricArrayOutput) Index(i pulumi.IntInput) SpansMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpansMetric {
		return vs[0].([]*SpansMetric)[vs[1].(int)]
	}).(SpansMetricOutput)
}

type SpansMetricMapOutput struct{ *pulumi.OutputState }

func (SpansMetricMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpansMetric)(nil)).Elem()
}

func (o SpansMetricMapOutput) ToSpansMetricMapOutput() SpansMetricMapOutput {
	return o
}

func (o SpansMetricMapOutput) ToSpansMetricMapOutputWithContext(ctx context.Context) SpansMetricMapOutput {
	return o
}

func (o SpansMetricMapOutput) MapIndex(k pulumi.StringInput) SpansMetricOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpansMetric {
		return vs[0].(map[string]*SpansMetric)[vs[1].(string)]
	}).(SpansMetricOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpansMetricInput)(nil)).Elem(), &SpansMetric{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpansMetricArrayInput)(nil)).Elem(), SpansMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpansMetricMapInput)(nil)).Elem(), SpansMetricMap{})
	pulumi.RegisterOutputType(SpansMetricOutput{})
	pulumi.RegisterOutputType(SpansMetricArrayOutput{})
	pulumi.RegisterOutputType(SpansMetricMapOutput{})
}
