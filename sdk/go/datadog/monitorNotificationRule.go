// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog MonitorNotificationRule resource.
//
// ## Import
//
// ```sh
// $ pulumi import datadog:index/monitorNotificationRule:MonitorNotificationRule new_list "00e000000-0000-1234-0000-000000000000"
// ```
type MonitorNotificationRule struct {
	pulumi.CustomResourceState

	Filter MonitorNotificationRuleFilterPtrOutput `pulumi:"filter"`
	// The name of the monitor notification rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of recipients to notify.
	Recipients pulumi.StringArrayOutput `pulumi:"recipients"`
}

// NewMonitorNotificationRule registers a new resource with the given unique name, arguments, and options.
func NewMonitorNotificationRule(ctx *pulumi.Context,
	name string, args *MonitorNotificationRuleArgs, opts ...pulumi.ResourceOption) (*MonitorNotificationRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Recipients == nil {
		return nil, errors.New("invalid value for required argument 'Recipients'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MonitorNotificationRule
	err := ctx.RegisterResource("datadog:index/monitorNotificationRule:MonitorNotificationRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitorNotificationRule gets an existing MonitorNotificationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitorNotificationRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitorNotificationRuleState, opts ...pulumi.ResourceOption) (*MonitorNotificationRule, error) {
	var resource MonitorNotificationRule
	err := ctx.ReadResource("datadog:index/monitorNotificationRule:MonitorNotificationRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitorNotificationRule resources.
type monitorNotificationRuleState struct {
	Filter *MonitorNotificationRuleFilter `pulumi:"filter"`
	// The name of the monitor notification rule.
	Name *string `pulumi:"name"`
	// List of recipients to notify.
	Recipients []string `pulumi:"recipients"`
}

type MonitorNotificationRuleState struct {
	Filter MonitorNotificationRuleFilterPtrInput
	// The name of the monitor notification rule.
	Name pulumi.StringPtrInput
	// List of recipients to notify.
	Recipients pulumi.StringArrayInput
}

func (MonitorNotificationRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorNotificationRuleState)(nil)).Elem()
}

type monitorNotificationRuleArgs struct {
	Filter *MonitorNotificationRuleFilter `pulumi:"filter"`
	// The name of the monitor notification rule.
	Name string `pulumi:"name"`
	// List of recipients to notify.
	Recipients []string `pulumi:"recipients"`
}

// The set of arguments for constructing a MonitorNotificationRule resource.
type MonitorNotificationRuleArgs struct {
	Filter MonitorNotificationRuleFilterPtrInput
	// The name of the monitor notification rule.
	Name pulumi.StringInput
	// List of recipients to notify.
	Recipients pulumi.StringArrayInput
}

func (MonitorNotificationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorNotificationRuleArgs)(nil)).Elem()
}

type MonitorNotificationRuleInput interface {
	pulumi.Input

	ToMonitorNotificationRuleOutput() MonitorNotificationRuleOutput
	ToMonitorNotificationRuleOutputWithContext(ctx context.Context) MonitorNotificationRuleOutput
}

func (*MonitorNotificationRule) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorNotificationRule)(nil)).Elem()
}

func (i *MonitorNotificationRule) ToMonitorNotificationRuleOutput() MonitorNotificationRuleOutput {
	return i.ToMonitorNotificationRuleOutputWithContext(context.Background())
}

func (i *MonitorNotificationRule) ToMonitorNotificationRuleOutputWithContext(ctx context.Context) MonitorNotificationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorNotificationRuleOutput)
}

// MonitorNotificationRuleArrayInput is an input type that accepts MonitorNotificationRuleArray and MonitorNotificationRuleArrayOutput values.
// You can construct a concrete instance of `MonitorNotificationRuleArrayInput` via:
//
//	MonitorNotificationRuleArray{ MonitorNotificationRuleArgs{...} }
type MonitorNotificationRuleArrayInput interface {
	pulumi.Input

	ToMonitorNotificationRuleArrayOutput() MonitorNotificationRuleArrayOutput
	ToMonitorNotificationRuleArrayOutputWithContext(context.Context) MonitorNotificationRuleArrayOutput
}

type MonitorNotificationRuleArray []MonitorNotificationRuleInput

func (MonitorNotificationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitorNotificationRule)(nil)).Elem()
}

func (i MonitorNotificationRuleArray) ToMonitorNotificationRuleArrayOutput() MonitorNotificationRuleArrayOutput {
	return i.ToMonitorNotificationRuleArrayOutputWithContext(context.Background())
}

func (i MonitorNotificationRuleArray) ToMonitorNotificationRuleArrayOutputWithContext(ctx context.Context) MonitorNotificationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorNotificationRuleArrayOutput)
}

// MonitorNotificationRuleMapInput is an input type that accepts MonitorNotificationRuleMap and MonitorNotificationRuleMapOutput values.
// You can construct a concrete instance of `MonitorNotificationRuleMapInput` via:
//
//	MonitorNotificationRuleMap{ "key": MonitorNotificationRuleArgs{...} }
type MonitorNotificationRuleMapInput interface {
	pulumi.Input

	ToMonitorNotificationRuleMapOutput() MonitorNotificationRuleMapOutput
	ToMonitorNotificationRuleMapOutputWithContext(context.Context) MonitorNotificationRuleMapOutput
}

type MonitorNotificationRuleMap map[string]MonitorNotificationRuleInput

func (MonitorNotificationRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitorNotificationRule)(nil)).Elem()
}

func (i MonitorNotificationRuleMap) ToMonitorNotificationRuleMapOutput() MonitorNotificationRuleMapOutput {
	return i.ToMonitorNotificationRuleMapOutputWithContext(context.Background())
}

func (i MonitorNotificationRuleMap) ToMonitorNotificationRuleMapOutputWithContext(ctx context.Context) MonitorNotificationRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorNotificationRuleMapOutput)
}

type MonitorNotificationRuleOutput struct{ *pulumi.OutputState }

func (MonitorNotificationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorNotificationRule)(nil)).Elem()
}

func (o MonitorNotificationRuleOutput) ToMonitorNotificationRuleOutput() MonitorNotificationRuleOutput {
	return o
}

func (o MonitorNotificationRuleOutput) ToMonitorNotificationRuleOutputWithContext(ctx context.Context) MonitorNotificationRuleOutput {
	return o
}

func (o MonitorNotificationRuleOutput) Filter() MonitorNotificationRuleFilterPtrOutput {
	return o.ApplyT(func(v *MonitorNotificationRule) MonitorNotificationRuleFilterPtrOutput { return v.Filter }).(MonitorNotificationRuleFilterPtrOutput)
}

// The name of the monitor notification rule.
func (o MonitorNotificationRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitorNotificationRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of recipients to notify.
func (o MonitorNotificationRuleOutput) Recipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MonitorNotificationRule) pulumi.StringArrayOutput { return v.Recipients }).(pulumi.StringArrayOutput)
}

type MonitorNotificationRuleArrayOutput struct{ *pulumi.OutputState }

func (MonitorNotificationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitorNotificationRule)(nil)).Elem()
}

func (o MonitorNotificationRuleArrayOutput) ToMonitorNotificationRuleArrayOutput() MonitorNotificationRuleArrayOutput {
	return o
}

func (o MonitorNotificationRuleArrayOutput) ToMonitorNotificationRuleArrayOutputWithContext(ctx context.Context) MonitorNotificationRuleArrayOutput {
	return o
}

func (o MonitorNotificationRuleArrayOutput) Index(i pulumi.IntInput) MonitorNotificationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MonitorNotificationRule {
		return vs[0].([]*MonitorNotificationRule)[vs[1].(int)]
	}).(MonitorNotificationRuleOutput)
}

type MonitorNotificationRuleMapOutput struct{ *pulumi.OutputState }

func (MonitorNotificationRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitorNotificationRule)(nil)).Elem()
}

func (o MonitorNotificationRuleMapOutput) ToMonitorNotificationRuleMapOutput() MonitorNotificationRuleMapOutput {
	return o
}

func (o MonitorNotificationRuleMapOutput) ToMonitorNotificationRuleMapOutputWithContext(ctx context.Context) MonitorNotificationRuleMapOutput {
	return o
}

func (o MonitorNotificationRuleMapOutput) MapIndex(k pulumi.StringInput) MonitorNotificationRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MonitorNotificationRule {
		return vs[0].(map[string]*MonitorNotificationRule)[vs[1].(string)]
	}).(MonitorNotificationRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorNotificationRuleInput)(nil)).Elem(), &MonitorNotificationRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorNotificationRuleArrayInput)(nil)).Elem(), MonitorNotificationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorNotificationRuleMapInput)(nil)).Elem(), MonitorNotificationRuleMap{})
	pulumi.RegisterOutputType(MonitorNotificationRuleOutput{})
	pulumi.RegisterOutputType(MonitorNotificationRuleArrayOutput{})
	pulumi.RegisterOutputType(MonitorNotificationRuleMapOutput{})
}
