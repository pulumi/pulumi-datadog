// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog Security Monitoring Notification Rule API resource for creating and managing Datadog security notification rules.
//
// ## Import
//
// ```sh
// $ pulumi import datadog:index/securityNotificationRule:SecurityNotificationRule signal_rule yq9-t9l-bso
// ```
type SecurityNotificationRule struct {
	pulumi.CustomResourceState

	// Indicates when this rule was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// The handle of the rule creator.
	CreatedByHandle pulumi.StringOutput `pulumi:"createdByHandle"`
	// The name of the rule creator.
	CreatedByName pulumi.StringOutput `pulumi:"createdByName"`
	// Indicates whether the rule is enabled. Defaults to `true`.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Indicates when this rule was last modified.
	ModifiedAt pulumi.IntOutput `pulumi:"modifiedAt"`
	// The handle of the rule last modifier.
	ModifiedByHandle pulumi.StringOutput `pulumi:"modifiedByHandle"`
	// The name of the rule last modifier.
	ModifiedByName pulumi.StringOutput `pulumi:"modifiedByName"`
	// The name of the rule (must be unique).
	Name pulumi.StringOutput `pulumi:"name"`
	// Defines selectors to filter security issues that generate notifications.
	Selectors SecurityNotificationRuleSelectorsPtrOutput `pulumi:"selectors"`
	// The list of handle targets for the notifications.
	Targets pulumi.StringArrayOutput `pulumi:"targets"`
	// Specifies the time period, in seconds, used to aggregate the notification. Defaults to `0`.
	TimeAggregation pulumi.IntOutput `pulumi:"timeAggregation"`
	// The rule version (incremented at each update).
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewSecurityNotificationRule registers a new resource with the given unique name, arguments, and options.
func NewSecurityNotificationRule(ctx *pulumi.Context,
	name string, args *SecurityNotificationRuleArgs, opts ...pulumi.ResourceOption) (*SecurityNotificationRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Targets == nil {
		return nil, errors.New("invalid value for required argument 'Targets'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityNotificationRule
	err := ctx.RegisterResource("datadog:index/securityNotificationRule:SecurityNotificationRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityNotificationRule gets an existing SecurityNotificationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityNotificationRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityNotificationRuleState, opts ...pulumi.ResourceOption) (*SecurityNotificationRule, error) {
	var resource SecurityNotificationRule
	err := ctx.ReadResource("datadog:index/securityNotificationRule:SecurityNotificationRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityNotificationRule resources.
type securityNotificationRuleState struct {
	// Indicates when this rule was created.
	CreatedAt *int `pulumi:"createdAt"`
	// The handle of the rule creator.
	CreatedByHandle *string `pulumi:"createdByHandle"`
	// The name of the rule creator.
	CreatedByName *string `pulumi:"createdByName"`
	// Indicates whether the rule is enabled. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Indicates when this rule was last modified.
	ModifiedAt *int `pulumi:"modifiedAt"`
	// The handle of the rule last modifier.
	ModifiedByHandle *string `pulumi:"modifiedByHandle"`
	// The name of the rule last modifier.
	ModifiedByName *string `pulumi:"modifiedByName"`
	// The name of the rule (must be unique).
	Name *string `pulumi:"name"`
	// Defines selectors to filter security issues that generate notifications.
	Selectors *SecurityNotificationRuleSelectors `pulumi:"selectors"`
	// The list of handle targets for the notifications.
	Targets []string `pulumi:"targets"`
	// Specifies the time period, in seconds, used to aggregate the notification. Defaults to `0`.
	TimeAggregation *int `pulumi:"timeAggregation"`
	// The rule version (incremented at each update).
	Version *int `pulumi:"version"`
}

type SecurityNotificationRuleState struct {
	// Indicates when this rule was created.
	CreatedAt pulumi.IntPtrInput
	// The handle of the rule creator.
	CreatedByHandle pulumi.StringPtrInput
	// The name of the rule creator.
	CreatedByName pulumi.StringPtrInput
	// Indicates whether the rule is enabled. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Indicates when this rule was last modified.
	ModifiedAt pulumi.IntPtrInput
	// The handle of the rule last modifier.
	ModifiedByHandle pulumi.StringPtrInput
	// The name of the rule last modifier.
	ModifiedByName pulumi.StringPtrInput
	// The name of the rule (must be unique).
	Name pulumi.StringPtrInput
	// Defines selectors to filter security issues that generate notifications.
	Selectors SecurityNotificationRuleSelectorsPtrInput
	// The list of handle targets for the notifications.
	Targets pulumi.StringArrayInput
	// Specifies the time period, in seconds, used to aggregate the notification. Defaults to `0`.
	TimeAggregation pulumi.IntPtrInput
	// The rule version (incremented at each update).
	Version pulumi.IntPtrInput
}

func (SecurityNotificationRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityNotificationRuleState)(nil)).Elem()
}

type securityNotificationRuleArgs struct {
	// Indicates whether the rule is enabled. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The name of the rule (must be unique).
	Name string `pulumi:"name"`
	// Defines selectors to filter security issues that generate notifications.
	Selectors *SecurityNotificationRuleSelectors `pulumi:"selectors"`
	// The list of handle targets for the notifications.
	Targets []string `pulumi:"targets"`
	// Specifies the time period, in seconds, used to aggregate the notification. Defaults to `0`.
	TimeAggregation *int `pulumi:"timeAggregation"`
}

// The set of arguments for constructing a SecurityNotificationRule resource.
type SecurityNotificationRuleArgs struct {
	// Indicates whether the rule is enabled. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// The name of the rule (must be unique).
	Name pulumi.StringInput
	// Defines selectors to filter security issues that generate notifications.
	Selectors SecurityNotificationRuleSelectorsPtrInput
	// The list of handle targets for the notifications.
	Targets pulumi.StringArrayInput
	// Specifies the time period, in seconds, used to aggregate the notification. Defaults to `0`.
	TimeAggregation pulumi.IntPtrInput
}

func (SecurityNotificationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityNotificationRuleArgs)(nil)).Elem()
}

type SecurityNotificationRuleInput interface {
	pulumi.Input

	ToSecurityNotificationRuleOutput() SecurityNotificationRuleOutput
	ToSecurityNotificationRuleOutputWithContext(ctx context.Context) SecurityNotificationRuleOutput
}

func (*SecurityNotificationRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityNotificationRule)(nil)).Elem()
}

func (i *SecurityNotificationRule) ToSecurityNotificationRuleOutput() SecurityNotificationRuleOutput {
	return i.ToSecurityNotificationRuleOutputWithContext(context.Background())
}

func (i *SecurityNotificationRule) ToSecurityNotificationRuleOutputWithContext(ctx context.Context) SecurityNotificationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityNotificationRuleOutput)
}

// SecurityNotificationRuleArrayInput is an input type that accepts SecurityNotificationRuleArray and SecurityNotificationRuleArrayOutput values.
// You can construct a concrete instance of `SecurityNotificationRuleArrayInput` via:
//
//	SecurityNotificationRuleArray{ SecurityNotificationRuleArgs{...} }
type SecurityNotificationRuleArrayInput interface {
	pulumi.Input

	ToSecurityNotificationRuleArrayOutput() SecurityNotificationRuleArrayOutput
	ToSecurityNotificationRuleArrayOutputWithContext(context.Context) SecurityNotificationRuleArrayOutput
}

type SecurityNotificationRuleArray []SecurityNotificationRuleInput

func (SecurityNotificationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityNotificationRule)(nil)).Elem()
}

func (i SecurityNotificationRuleArray) ToSecurityNotificationRuleArrayOutput() SecurityNotificationRuleArrayOutput {
	return i.ToSecurityNotificationRuleArrayOutputWithContext(context.Background())
}

func (i SecurityNotificationRuleArray) ToSecurityNotificationRuleArrayOutputWithContext(ctx context.Context) SecurityNotificationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityNotificationRuleArrayOutput)
}

// SecurityNotificationRuleMapInput is an input type that accepts SecurityNotificationRuleMap and SecurityNotificationRuleMapOutput values.
// You can construct a concrete instance of `SecurityNotificationRuleMapInput` via:
//
//	SecurityNotificationRuleMap{ "key": SecurityNotificationRuleArgs{...} }
type SecurityNotificationRuleMapInput interface {
	pulumi.Input

	ToSecurityNotificationRuleMapOutput() SecurityNotificationRuleMapOutput
	ToSecurityNotificationRuleMapOutputWithContext(context.Context) SecurityNotificationRuleMapOutput
}

type SecurityNotificationRuleMap map[string]SecurityNotificationRuleInput

func (SecurityNotificationRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityNotificationRule)(nil)).Elem()
}

func (i SecurityNotificationRuleMap) ToSecurityNotificationRuleMapOutput() SecurityNotificationRuleMapOutput {
	return i.ToSecurityNotificationRuleMapOutputWithContext(context.Background())
}

func (i SecurityNotificationRuleMap) ToSecurityNotificationRuleMapOutputWithContext(ctx context.Context) SecurityNotificationRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityNotificationRuleMapOutput)
}

type SecurityNotificationRuleOutput struct{ *pulumi.OutputState }

func (SecurityNotificationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityNotificationRule)(nil)).Elem()
}

func (o SecurityNotificationRuleOutput) ToSecurityNotificationRuleOutput() SecurityNotificationRuleOutput {
	return o
}

func (o SecurityNotificationRuleOutput) ToSecurityNotificationRuleOutputWithContext(ctx context.Context) SecurityNotificationRuleOutput {
	return o
}

// Indicates when this rule was created.
func (o SecurityNotificationRuleOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *SecurityNotificationRule) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// The handle of the rule creator.
func (o SecurityNotificationRuleOutput) CreatedByHandle() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityNotificationRule) pulumi.StringOutput { return v.CreatedByHandle }).(pulumi.StringOutput)
}

// The name of the rule creator.
func (o SecurityNotificationRuleOutput) CreatedByName() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityNotificationRule) pulumi.StringOutput { return v.CreatedByName }).(pulumi.StringOutput)
}

// Indicates whether the rule is enabled. Defaults to `true`.
func (o SecurityNotificationRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecurityNotificationRule) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Indicates when this rule was last modified.
func (o SecurityNotificationRuleOutput) ModifiedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *SecurityNotificationRule) pulumi.IntOutput { return v.ModifiedAt }).(pulumi.IntOutput)
}

// The handle of the rule last modifier.
func (o SecurityNotificationRuleOutput) ModifiedByHandle() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityNotificationRule) pulumi.StringOutput { return v.ModifiedByHandle }).(pulumi.StringOutput)
}

// The name of the rule last modifier.
func (o SecurityNotificationRuleOutput) ModifiedByName() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityNotificationRule) pulumi.StringOutput { return v.ModifiedByName }).(pulumi.StringOutput)
}

// The name of the rule (must be unique).
func (o SecurityNotificationRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityNotificationRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Defines selectors to filter security issues that generate notifications.
func (o SecurityNotificationRuleOutput) Selectors() SecurityNotificationRuleSelectorsPtrOutput {
	return o.ApplyT(func(v *SecurityNotificationRule) SecurityNotificationRuleSelectorsPtrOutput { return v.Selectors }).(SecurityNotificationRuleSelectorsPtrOutput)
}

// The list of handle targets for the notifications.
func (o SecurityNotificationRuleOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityNotificationRule) pulumi.StringArrayOutput { return v.Targets }).(pulumi.StringArrayOutput)
}

// Specifies the time period, in seconds, used to aggregate the notification. Defaults to `0`.
func (o SecurityNotificationRuleOutput) TimeAggregation() pulumi.IntOutput {
	return o.ApplyT(func(v *SecurityNotificationRule) pulumi.IntOutput { return v.TimeAggregation }).(pulumi.IntOutput)
}

// The rule version (incremented at each update).
func (o SecurityNotificationRuleOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *SecurityNotificationRule) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type SecurityNotificationRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityNotificationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityNotificationRule)(nil)).Elem()
}

func (o SecurityNotificationRuleArrayOutput) ToSecurityNotificationRuleArrayOutput() SecurityNotificationRuleArrayOutput {
	return o
}

func (o SecurityNotificationRuleArrayOutput) ToSecurityNotificationRuleArrayOutputWithContext(ctx context.Context) SecurityNotificationRuleArrayOutput {
	return o
}

func (o SecurityNotificationRuleArrayOutput) Index(i pulumi.IntInput) SecurityNotificationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityNotificationRule {
		return vs[0].([]*SecurityNotificationRule)[vs[1].(int)]
	}).(SecurityNotificationRuleOutput)
}

type SecurityNotificationRuleMapOutput struct{ *pulumi.OutputState }

func (SecurityNotificationRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityNotificationRule)(nil)).Elem()
}

func (o SecurityNotificationRuleMapOutput) ToSecurityNotificationRuleMapOutput() SecurityNotificationRuleMapOutput {
	return o
}

func (o SecurityNotificationRuleMapOutput) ToSecurityNotificationRuleMapOutputWithContext(ctx context.Context) SecurityNotificationRuleMapOutput {
	return o
}

func (o SecurityNotificationRuleMapOutput) MapIndex(k pulumi.StringInput) SecurityNotificationRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityNotificationRule {
		return vs[0].(map[string]*SecurityNotificationRule)[vs[1].(string)]
	}).(SecurityNotificationRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityNotificationRuleInput)(nil)).Elem(), &SecurityNotificationRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityNotificationRuleArrayInput)(nil)).Elem(), SecurityNotificationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityNotificationRuleMapInput)(nil)).Elem(), SecurityNotificationRuleMap{})
	pulumi.RegisterOutputType(SecurityNotificationRuleOutput{})
	pulumi.RegisterOutputType(SecurityNotificationRuleArrayOutput{})
	pulumi.RegisterOutputType(SecurityNotificationRuleMapOutput{})
}
