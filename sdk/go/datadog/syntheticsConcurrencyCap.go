// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Datadog Synthetics On Demand Concurrency Cap API resource. This can be used to manage the Concurrency Cap for Synthetic tests.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.NewSyntheticsConcurrencyCap(ctx, "this", &datadog.SyntheticsConcurrencyCapArgs{
//				OnDemandConcurrencyCap: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The Synthetics concurrency cap can be imported. <name> can be whatever you specify in your code. Datadog does not store the name on the server.
//
// ```sh
//
//	$ pulumi import datadog:index/syntheticsConcurrencyCap:SyntheticsConcurrencyCap this <name>
//
// ```
type SyntheticsConcurrencyCap struct {
	pulumi.CustomResourceState

	// Value of the on-demand concurrency cap, customizing the number of Synthetic tests run in parallel.
	OnDemandConcurrencyCap pulumi.IntOutput `pulumi:"onDemandConcurrencyCap"`
}

// NewSyntheticsConcurrencyCap registers a new resource with the given unique name, arguments, and options.
func NewSyntheticsConcurrencyCap(ctx *pulumi.Context,
	name string, args *SyntheticsConcurrencyCapArgs, opts ...pulumi.ResourceOption) (*SyntheticsConcurrencyCap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OnDemandConcurrencyCap == nil {
		return nil, errors.New("invalid value for required argument 'OnDemandConcurrencyCap'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SyntheticsConcurrencyCap
	err := ctx.RegisterResource("datadog:index/syntheticsConcurrencyCap:SyntheticsConcurrencyCap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyntheticsConcurrencyCap gets an existing SyntheticsConcurrencyCap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyntheticsConcurrencyCap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyntheticsConcurrencyCapState, opts ...pulumi.ResourceOption) (*SyntheticsConcurrencyCap, error) {
	var resource SyntheticsConcurrencyCap
	err := ctx.ReadResource("datadog:index/syntheticsConcurrencyCap:SyntheticsConcurrencyCap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyntheticsConcurrencyCap resources.
type syntheticsConcurrencyCapState struct {
	// Value of the on-demand concurrency cap, customizing the number of Synthetic tests run in parallel.
	OnDemandConcurrencyCap *int `pulumi:"onDemandConcurrencyCap"`
}

type SyntheticsConcurrencyCapState struct {
	// Value of the on-demand concurrency cap, customizing the number of Synthetic tests run in parallel.
	OnDemandConcurrencyCap pulumi.IntPtrInput
}

func (SyntheticsConcurrencyCapState) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticsConcurrencyCapState)(nil)).Elem()
}

type syntheticsConcurrencyCapArgs struct {
	// Value of the on-demand concurrency cap, customizing the number of Synthetic tests run in parallel.
	OnDemandConcurrencyCap int `pulumi:"onDemandConcurrencyCap"`
}

// The set of arguments for constructing a SyntheticsConcurrencyCap resource.
type SyntheticsConcurrencyCapArgs struct {
	// Value of the on-demand concurrency cap, customizing the number of Synthetic tests run in parallel.
	OnDemandConcurrencyCap pulumi.IntInput
}

func (SyntheticsConcurrencyCapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticsConcurrencyCapArgs)(nil)).Elem()
}

type SyntheticsConcurrencyCapInput interface {
	pulumi.Input

	ToSyntheticsConcurrencyCapOutput() SyntheticsConcurrencyCapOutput
	ToSyntheticsConcurrencyCapOutputWithContext(ctx context.Context) SyntheticsConcurrencyCapOutput
}

func (*SyntheticsConcurrencyCap) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsConcurrencyCap)(nil)).Elem()
}

func (i *SyntheticsConcurrencyCap) ToSyntheticsConcurrencyCapOutput() SyntheticsConcurrencyCapOutput {
	return i.ToSyntheticsConcurrencyCapOutputWithContext(context.Background())
}

func (i *SyntheticsConcurrencyCap) ToSyntheticsConcurrencyCapOutputWithContext(ctx context.Context) SyntheticsConcurrencyCapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsConcurrencyCapOutput)
}

func (i *SyntheticsConcurrencyCap) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsConcurrencyCap] {
	return pulumix.Output[*SyntheticsConcurrencyCap]{
		OutputState: i.ToSyntheticsConcurrencyCapOutputWithContext(ctx).OutputState,
	}
}

// SyntheticsConcurrencyCapArrayInput is an input type that accepts SyntheticsConcurrencyCapArray and SyntheticsConcurrencyCapArrayOutput values.
// You can construct a concrete instance of `SyntheticsConcurrencyCapArrayInput` via:
//
//	SyntheticsConcurrencyCapArray{ SyntheticsConcurrencyCapArgs{...} }
type SyntheticsConcurrencyCapArrayInput interface {
	pulumi.Input

	ToSyntheticsConcurrencyCapArrayOutput() SyntheticsConcurrencyCapArrayOutput
	ToSyntheticsConcurrencyCapArrayOutputWithContext(context.Context) SyntheticsConcurrencyCapArrayOutput
}

type SyntheticsConcurrencyCapArray []SyntheticsConcurrencyCapInput

func (SyntheticsConcurrencyCapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyntheticsConcurrencyCap)(nil)).Elem()
}

func (i SyntheticsConcurrencyCapArray) ToSyntheticsConcurrencyCapArrayOutput() SyntheticsConcurrencyCapArrayOutput {
	return i.ToSyntheticsConcurrencyCapArrayOutputWithContext(context.Background())
}

func (i SyntheticsConcurrencyCapArray) ToSyntheticsConcurrencyCapArrayOutputWithContext(ctx context.Context) SyntheticsConcurrencyCapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsConcurrencyCapArrayOutput)
}

func (i SyntheticsConcurrencyCapArray) ToOutput(ctx context.Context) pulumix.Output[[]*SyntheticsConcurrencyCap] {
	return pulumix.Output[[]*SyntheticsConcurrencyCap]{
		OutputState: i.ToSyntheticsConcurrencyCapArrayOutputWithContext(ctx).OutputState,
	}
}

// SyntheticsConcurrencyCapMapInput is an input type that accepts SyntheticsConcurrencyCapMap and SyntheticsConcurrencyCapMapOutput values.
// You can construct a concrete instance of `SyntheticsConcurrencyCapMapInput` via:
//
//	SyntheticsConcurrencyCapMap{ "key": SyntheticsConcurrencyCapArgs{...} }
type SyntheticsConcurrencyCapMapInput interface {
	pulumi.Input

	ToSyntheticsConcurrencyCapMapOutput() SyntheticsConcurrencyCapMapOutput
	ToSyntheticsConcurrencyCapMapOutputWithContext(context.Context) SyntheticsConcurrencyCapMapOutput
}

type SyntheticsConcurrencyCapMap map[string]SyntheticsConcurrencyCapInput

func (SyntheticsConcurrencyCapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyntheticsConcurrencyCap)(nil)).Elem()
}

func (i SyntheticsConcurrencyCapMap) ToSyntheticsConcurrencyCapMapOutput() SyntheticsConcurrencyCapMapOutput {
	return i.ToSyntheticsConcurrencyCapMapOutputWithContext(context.Background())
}

func (i SyntheticsConcurrencyCapMap) ToSyntheticsConcurrencyCapMapOutputWithContext(ctx context.Context) SyntheticsConcurrencyCapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsConcurrencyCapMapOutput)
}

func (i SyntheticsConcurrencyCapMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SyntheticsConcurrencyCap] {
	return pulumix.Output[map[string]*SyntheticsConcurrencyCap]{
		OutputState: i.ToSyntheticsConcurrencyCapMapOutputWithContext(ctx).OutputState,
	}
}

type SyntheticsConcurrencyCapOutput struct{ *pulumi.OutputState }

func (SyntheticsConcurrencyCapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsConcurrencyCap)(nil)).Elem()
}

func (o SyntheticsConcurrencyCapOutput) ToSyntheticsConcurrencyCapOutput() SyntheticsConcurrencyCapOutput {
	return o
}

func (o SyntheticsConcurrencyCapOutput) ToSyntheticsConcurrencyCapOutputWithContext(ctx context.Context) SyntheticsConcurrencyCapOutput {
	return o
}

func (o SyntheticsConcurrencyCapOutput) ToOutput(ctx context.Context) pulumix.Output[*SyntheticsConcurrencyCap] {
	return pulumix.Output[*SyntheticsConcurrencyCap]{
		OutputState: o.OutputState,
	}
}

// Value of the on-demand concurrency cap, customizing the number of Synthetic tests run in parallel.
func (o SyntheticsConcurrencyCapOutput) OnDemandConcurrencyCap() pulumi.IntOutput {
	return o.ApplyT(func(v *SyntheticsConcurrencyCap) pulumi.IntOutput { return v.OnDemandConcurrencyCap }).(pulumi.IntOutput)
}

type SyntheticsConcurrencyCapArrayOutput struct{ *pulumi.OutputState }

func (SyntheticsConcurrencyCapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyntheticsConcurrencyCap)(nil)).Elem()
}

func (o SyntheticsConcurrencyCapArrayOutput) ToSyntheticsConcurrencyCapArrayOutput() SyntheticsConcurrencyCapArrayOutput {
	return o
}

func (o SyntheticsConcurrencyCapArrayOutput) ToSyntheticsConcurrencyCapArrayOutputWithContext(ctx context.Context) SyntheticsConcurrencyCapArrayOutput {
	return o
}

func (o SyntheticsConcurrencyCapArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SyntheticsConcurrencyCap] {
	return pulumix.Output[[]*SyntheticsConcurrencyCap]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsConcurrencyCapArrayOutput) Index(i pulumi.IntInput) SyntheticsConcurrencyCapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SyntheticsConcurrencyCap {
		return vs[0].([]*SyntheticsConcurrencyCap)[vs[1].(int)]
	}).(SyntheticsConcurrencyCapOutput)
}

type SyntheticsConcurrencyCapMapOutput struct{ *pulumi.OutputState }

func (SyntheticsConcurrencyCapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyntheticsConcurrencyCap)(nil)).Elem()
}

func (o SyntheticsConcurrencyCapMapOutput) ToSyntheticsConcurrencyCapMapOutput() SyntheticsConcurrencyCapMapOutput {
	return o
}

func (o SyntheticsConcurrencyCapMapOutput) ToSyntheticsConcurrencyCapMapOutputWithContext(ctx context.Context) SyntheticsConcurrencyCapMapOutput {
	return o
}

func (o SyntheticsConcurrencyCapMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SyntheticsConcurrencyCap] {
	return pulumix.Output[map[string]*SyntheticsConcurrencyCap]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticsConcurrencyCapMapOutput) MapIndex(k pulumi.StringInput) SyntheticsConcurrencyCapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SyntheticsConcurrencyCap {
		return vs[0].(map[string]*SyntheticsConcurrencyCap)[vs[1].(string)]
	}).(SyntheticsConcurrencyCapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsConcurrencyCapInput)(nil)).Elem(), &SyntheticsConcurrencyCap{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsConcurrencyCapArrayInput)(nil)).Elem(), SyntheticsConcurrencyCapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsConcurrencyCapMapInput)(nil)).Elem(), SyntheticsConcurrencyCapMap{})
	pulumi.RegisterOutputType(SyntheticsConcurrencyCapOutput{})
	pulumi.RegisterOutputType(SyntheticsConcurrencyCapArrayOutput{})
	pulumi.RegisterOutputType(SyntheticsConcurrencyCapMapOutput{})
}
