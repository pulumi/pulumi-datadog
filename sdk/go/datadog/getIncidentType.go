// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve information about an existing incident type.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.LookupIncidentType(ctx, &datadog.LookupIncidentTypeArgs{
//				Id: "01234567-89ab-cdef-0123-456789abcdef",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupIncidentType(ctx *pulumi.Context, args *LookupIncidentTypeArgs, opts ...pulumi.InvokeOption) (*LookupIncidentTypeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIncidentTypeResult
	err := ctx.Invoke("datadog:index/getIncidentType:getIncidentType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIncidentType.
type LookupIncidentTypeArgs struct {
	// The ID of the incident type.
	Id string `pulumi:"id"`
}

// A collection of values returned by getIncidentType.
type LookupIncidentTypeResult struct {
	// Description of the incident type.
	Description string `pulumi:"description"`
	// The ID of the incident type.
	Id string `pulumi:"id"`
	// Whether this incident type is the default type.
	IsDefault bool `pulumi:"isDefault"`
	// Name of the incident type.
	Name string `pulumi:"name"`
}

func LookupIncidentTypeOutput(ctx *pulumi.Context, args LookupIncidentTypeOutputArgs, opts ...pulumi.InvokeOption) LookupIncidentTypeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupIncidentTypeResultOutput, error) {
			args := v.(LookupIncidentTypeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("datadog:index/getIncidentType:getIncidentType", args, LookupIncidentTypeResultOutput{}, options).(LookupIncidentTypeResultOutput), nil
		}).(LookupIncidentTypeResultOutput)
}

// A collection of arguments for invoking getIncidentType.
type LookupIncidentTypeOutputArgs struct {
	// The ID of the incident type.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupIncidentTypeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIncidentTypeArgs)(nil)).Elem()
}

// A collection of values returned by getIncidentType.
type LookupIncidentTypeResultOutput struct{ *pulumi.OutputState }

func (LookupIncidentTypeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIncidentTypeResult)(nil)).Elem()
}

func (o LookupIncidentTypeResultOutput) ToLookupIncidentTypeResultOutput() LookupIncidentTypeResultOutput {
	return o
}

func (o LookupIncidentTypeResultOutput) ToLookupIncidentTypeResultOutputWithContext(ctx context.Context) LookupIncidentTypeResultOutput {
	return o
}

// Description of the incident type.
func (o LookupIncidentTypeResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIncidentTypeResult) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the incident type.
func (o LookupIncidentTypeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIncidentTypeResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether this incident type is the default type.
func (o LookupIncidentTypeResultOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIncidentTypeResult) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// Name of the incident type.
func (o LookupIncidentTypeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIncidentTypeResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIncidentTypeResultOutput{})
}
