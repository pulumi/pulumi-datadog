// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog incident notification rule resource. This can be used to create and manage Datadog incident notification rules.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := datadog.NewIncidentType(ctx, "example", &datadog.IncidentTypeArgs{
//				Name:        pulumi.String("My Incident Type"),
//				Description: pulumi.String("Incident type for critical production issues"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleIncidentNotificationTemplate, err := datadog.NewIncidentNotificationTemplate(ctx, "example", &datadog.IncidentNotificationTemplateArgs{
//				Name:    pulumi.String("My Notification Template"),
//				Subject: pulumi.String("SEV-1 Incident: {{incident.title}}"),
//				Content: pulumi.String(`An incident has been declared.
//
// Title: {{incident.title}}
// Severity: {{incident.severity}}
// Status: {{incident.status}}
//
// Please join the incident channel for updates.
// `),
//
//				Category:     pulumi.String("alert"),
//				IncidentType: example.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datadog.NewIncidentNotificationRule(ctx, "example", &datadog.IncidentNotificationRuleArgs{
//				Enabled:    pulumi.Bool(true),
//				Trigger:    pulumi.String("incident_created_trigger"),
//				Visibility: pulumi.String("organization"),
//				Handles: pulumi.StringArray{
//					pulumi.String("@team-email@company.com"),
//					pulumi.String("@slack-channel-alerts"),
//					pulumi.String("@pagerduty-service"),
//				},
//				Conditions: datadog.IncidentNotificationRuleConditionArray{
//					&datadog.IncidentNotificationRuleConditionArgs{
//						Field: pulumi.String("severity"),
//						Values: pulumi.StringArray{
//							pulumi.String("SEV-1"),
//							pulumi.String("SEV-2"),
//						},
//					},
//					&datadog.IncidentNotificationRuleConditionArgs{
//						Field: pulumi.String("services"),
//						Values: pulumi.StringArray{
//							pulumi.String("web-service"),
//							pulumi.String("api-service"),
//							pulumi.String("database-service"),
//						},
//					},
//				},
//				RenotifyOns: pulumi.StringArray{
//					pulumi.String("status"),
//					pulumi.String("severity"),
//				},
//				IncidentType:         example.ID(),
//				NotificationTemplate: exampleIncidentNotificationTemplate.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import datadog:index/incidentNotificationRule:IncidentNotificationRule example "00000000-0000-0000-0000-000000000000"
// ```
type IncidentNotificationRule struct {
	pulumi.CustomResourceState

	// The conditions that trigger this notification rule. At least one condition is required.
	Conditions IncidentNotificationRuleConditionArrayOutput `pulumi:"conditions"`
	// Timestamp when the notification rule was created.
	Created pulumi.StringOutput `pulumi:"created"`
	// Whether the notification rule is enabled. Defaults to `false`.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The notification handles (targets) for this rule. Examples: @team-email@company.com, @slack-channel.
	Handles pulumi.StringArrayOutput `pulumi:"handles"`
	// The ID of the incident type this notification rule is associated with.
	IncidentType pulumi.StringOutput `pulumi:"incidentType"`
	// Timestamp when the notification rule was last modified.
	Modified pulumi.StringOutput `pulumi:"modified"`
	// The ID of the notification template to use for this rule.
	NotificationTemplate pulumi.StringPtrOutput `pulumi:"notificationTemplate"`
	// List of incident fields that trigger re-notification when changed. Valid values are: status, severity, customer*impact, title, description, detected, root*cause, services, state.
	RenotifyOns pulumi.StringArrayOutput `pulumi:"renotifyOns"`
	// The trigger event for this notification rule. Valid values are: incident*created*trigger, incident*saved*trigger.
	Trigger pulumi.StringOutput `pulumi:"trigger"`
	// The visibility of the notification rule. Valid values are: all, organization, private. Defaults to organization.
	Visibility pulumi.StringOutput `pulumi:"visibility"`
}

// NewIncidentNotificationRule registers a new resource with the given unique name, arguments, and options.
func NewIncidentNotificationRule(ctx *pulumi.Context,
	name string, args *IncidentNotificationRuleArgs, opts ...pulumi.ResourceOption) (*IncidentNotificationRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Handles == nil {
		return nil, errors.New("invalid value for required argument 'Handles'")
	}
	if args.IncidentType == nil {
		return nil, errors.New("invalid value for required argument 'IncidentType'")
	}
	if args.Trigger == nil {
		return nil, errors.New("invalid value for required argument 'Trigger'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IncidentNotificationRule
	err := ctx.RegisterResource("datadog:index/incidentNotificationRule:IncidentNotificationRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIncidentNotificationRule gets an existing IncidentNotificationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIncidentNotificationRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IncidentNotificationRuleState, opts ...pulumi.ResourceOption) (*IncidentNotificationRule, error) {
	var resource IncidentNotificationRule
	err := ctx.ReadResource("datadog:index/incidentNotificationRule:IncidentNotificationRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IncidentNotificationRule resources.
type incidentNotificationRuleState struct {
	// The conditions that trigger this notification rule. At least one condition is required.
	Conditions []IncidentNotificationRuleCondition `pulumi:"conditions"`
	// Timestamp when the notification rule was created.
	Created *string `pulumi:"created"`
	// Whether the notification rule is enabled. Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
	// The notification handles (targets) for this rule. Examples: @team-email@company.com, @slack-channel.
	Handles []string `pulumi:"handles"`
	// The ID of the incident type this notification rule is associated with.
	IncidentType *string `pulumi:"incidentType"`
	// Timestamp when the notification rule was last modified.
	Modified *string `pulumi:"modified"`
	// The ID of the notification template to use for this rule.
	NotificationTemplate *string `pulumi:"notificationTemplate"`
	// List of incident fields that trigger re-notification when changed. Valid values are: status, severity, customer*impact, title, description, detected, root*cause, services, state.
	RenotifyOns []string `pulumi:"renotifyOns"`
	// The trigger event for this notification rule. Valid values are: incident*created*trigger, incident*saved*trigger.
	Trigger *string `pulumi:"trigger"`
	// The visibility of the notification rule. Valid values are: all, organization, private. Defaults to organization.
	Visibility *string `pulumi:"visibility"`
}

type IncidentNotificationRuleState struct {
	// The conditions that trigger this notification rule. At least one condition is required.
	Conditions IncidentNotificationRuleConditionArrayInput
	// Timestamp when the notification rule was created.
	Created pulumi.StringPtrInput
	// Whether the notification rule is enabled. Defaults to `false`.
	Enabled pulumi.BoolPtrInput
	// The notification handles (targets) for this rule. Examples: @team-email@company.com, @slack-channel.
	Handles pulumi.StringArrayInput
	// The ID of the incident type this notification rule is associated with.
	IncidentType pulumi.StringPtrInput
	// Timestamp when the notification rule was last modified.
	Modified pulumi.StringPtrInput
	// The ID of the notification template to use for this rule.
	NotificationTemplate pulumi.StringPtrInput
	// List of incident fields that trigger re-notification when changed. Valid values are: status, severity, customer*impact, title, description, detected, root*cause, services, state.
	RenotifyOns pulumi.StringArrayInput
	// The trigger event for this notification rule. Valid values are: incident*created*trigger, incident*saved*trigger.
	Trigger pulumi.StringPtrInput
	// The visibility of the notification rule. Valid values are: all, organization, private. Defaults to organization.
	Visibility pulumi.StringPtrInput
}

func (IncidentNotificationRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*incidentNotificationRuleState)(nil)).Elem()
}

type incidentNotificationRuleArgs struct {
	// The conditions that trigger this notification rule. At least one condition is required.
	Conditions []IncidentNotificationRuleCondition `pulumi:"conditions"`
	// Whether the notification rule is enabled. Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
	// The notification handles (targets) for this rule. Examples: @team-email@company.com, @slack-channel.
	Handles []string `pulumi:"handles"`
	// The ID of the incident type this notification rule is associated with.
	IncidentType string `pulumi:"incidentType"`
	// The ID of the notification template to use for this rule.
	NotificationTemplate *string `pulumi:"notificationTemplate"`
	// List of incident fields that trigger re-notification when changed. Valid values are: status, severity, customer*impact, title, description, detected, root*cause, services, state.
	RenotifyOns []string `pulumi:"renotifyOns"`
	// The trigger event for this notification rule. Valid values are: incident*created*trigger, incident*saved*trigger.
	Trigger string `pulumi:"trigger"`
	// The visibility of the notification rule. Valid values are: all, organization, private. Defaults to organization.
	Visibility *string `pulumi:"visibility"`
}

// The set of arguments for constructing a IncidentNotificationRule resource.
type IncidentNotificationRuleArgs struct {
	// The conditions that trigger this notification rule. At least one condition is required.
	Conditions IncidentNotificationRuleConditionArrayInput
	// Whether the notification rule is enabled. Defaults to `false`.
	Enabled pulumi.BoolPtrInput
	// The notification handles (targets) for this rule. Examples: @team-email@company.com, @slack-channel.
	Handles pulumi.StringArrayInput
	// The ID of the incident type this notification rule is associated with.
	IncidentType pulumi.StringInput
	// The ID of the notification template to use for this rule.
	NotificationTemplate pulumi.StringPtrInput
	// List of incident fields that trigger re-notification when changed. Valid values are: status, severity, customer*impact, title, description, detected, root*cause, services, state.
	RenotifyOns pulumi.StringArrayInput
	// The trigger event for this notification rule. Valid values are: incident*created*trigger, incident*saved*trigger.
	Trigger pulumi.StringInput
	// The visibility of the notification rule. Valid values are: all, organization, private. Defaults to organization.
	Visibility pulumi.StringPtrInput
}

func (IncidentNotificationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*incidentNotificationRuleArgs)(nil)).Elem()
}

type IncidentNotificationRuleInput interface {
	pulumi.Input

	ToIncidentNotificationRuleOutput() IncidentNotificationRuleOutput
	ToIncidentNotificationRuleOutputWithContext(ctx context.Context) IncidentNotificationRuleOutput
}

func (*IncidentNotificationRule) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentNotificationRule)(nil)).Elem()
}

func (i *IncidentNotificationRule) ToIncidentNotificationRuleOutput() IncidentNotificationRuleOutput {
	return i.ToIncidentNotificationRuleOutputWithContext(context.Background())
}

func (i *IncidentNotificationRule) ToIncidentNotificationRuleOutputWithContext(ctx context.Context) IncidentNotificationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentNotificationRuleOutput)
}

// IncidentNotificationRuleArrayInput is an input type that accepts IncidentNotificationRuleArray and IncidentNotificationRuleArrayOutput values.
// You can construct a concrete instance of `IncidentNotificationRuleArrayInput` via:
//
//	IncidentNotificationRuleArray{ IncidentNotificationRuleArgs{...} }
type IncidentNotificationRuleArrayInput interface {
	pulumi.Input

	ToIncidentNotificationRuleArrayOutput() IncidentNotificationRuleArrayOutput
	ToIncidentNotificationRuleArrayOutputWithContext(context.Context) IncidentNotificationRuleArrayOutput
}

type IncidentNotificationRuleArray []IncidentNotificationRuleInput

func (IncidentNotificationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IncidentNotificationRule)(nil)).Elem()
}

func (i IncidentNotificationRuleArray) ToIncidentNotificationRuleArrayOutput() IncidentNotificationRuleArrayOutput {
	return i.ToIncidentNotificationRuleArrayOutputWithContext(context.Background())
}

func (i IncidentNotificationRuleArray) ToIncidentNotificationRuleArrayOutputWithContext(ctx context.Context) IncidentNotificationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentNotificationRuleArrayOutput)
}

// IncidentNotificationRuleMapInput is an input type that accepts IncidentNotificationRuleMap and IncidentNotificationRuleMapOutput values.
// You can construct a concrete instance of `IncidentNotificationRuleMapInput` via:
//
//	IncidentNotificationRuleMap{ "key": IncidentNotificationRuleArgs{...} }
type IncidentNotificationRuleMapInput interface {
	pulumi.Input

	ToIncidentNotificationRuleMapOutput() IncidentNotificationRuleMapOutput
	ToIncidentNotificationRuleMapOutputWithContext(context.Context) IncidentNotificationRuleMapOutput
}

type IncidentNotificationRuleMap map[string]IncidentNotificationRuleInput

func (IncidentNotificationRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IncidentNotificationRule)(nil)).Elem()
}

func (i IncidentNotificationRuleMap) ToIncidentNotificationRuleMapOutput() IncidentNotificationRuleMapOutput {
	return i.ToIncidentNotificationRuleMapOutputWithContext(context.Background())
}

func (i IncidentNotificationRuleMap) ToIncidentNotificationRuleMapOutputWithContext(ctx context.Context) IncidentNotificationRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentNotificationRuleMapOutput)
}

type IncidentNotificationRuleOutput struct{ *pulumi.OutputState }

func (IncidentNotificationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentNotificationRule)(nil)).Elem()
}

func (o IncidentNotificationRuleOutput) ToIncidentNotificationRuleOutput() IncidentNotificationRuleOutput {
	return o
}

func (o IncidentNotificationRuleOutput) ToIncidentNotificationRuleOutputWithContext(ctx context.Context) IncidentNotificationRuleOutput {
	return o
}

// The conditions that trigger this notification rule. At least one condition is required.
func (o IncidentNotificationRuleOutput) Conditions() IncidentNotificationRuleConditionArrayOutput {
	return o.ApplyT(func(v *IncidentNotificationRule) IncidentNotificationRuleConditionArrayOutput { return v.Conditions }).(IncidentNotificationRuleConditionArrayOutput)
}

// Timestamp when the notification rule was created.
func (o IncidentNotificationRuleOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentNotificationRule) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// Whether the notification rule is enabled. Defaults to `false`.
func (o IncidentNotificationRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *IncidentNotificationRule) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The notification handles (targets) for this rule. Examples: @team-email@company.com, @slack-channel.
func (o IncidentNotificationRuleOutput) Handles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IncidentNotificationRule) pulumi.StringArrayOutput { return v.Handles }).(pulumi.StringArrayOutput)
}

// The ID of the incident type this notification rule is associated with.
func (o IncidentNotificationRuleOutput) IncidentType() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentNotificationRule) pulumi.StringOutput { return v.IncidentType }).(pulumi.StringOutput)
}

// Timestamp when the notification rule was last modified.
func (o IncidentNotificationRuleOutput) Modified() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentNotificationRule) pulumi.StringOutput { return v.Modified }).(pulumi.StringOutput)
}

// The ID of the notification template to use for this rule.
func (o IncidentNotificationRuleOutput) NotificationTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentNotificationRule) pulumi.StringPtrOutput { return v.NotificationTemplate }).(pulumi.StringPtrOutput)
}

// List of incident fields that trigger re-notification when changed. Valid values are: status, severity, customer*impact, title, description, detected, root*cause, services, state.
func (o IncidentNotificationRuleOutput) RenotifyOns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IncidentNotificationRule) pulumi.StringArrayOutput { return v.RenotifyOns }).(pulumi.StringArrayOutput)
}

// The trigger event for this notification rule. Valid values are: incident*created*trigger, incident*saved*trigger.
func (o IncidentNotificationRuleOutput) Trigger() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentNotificationRule) pulumi.StringOutput { return v.Trigger }).(pulumi.StringOutput)
}

// The visibility of the notification rule. Valid values are: all, organization, private. Defaults to organization.
func (o IncidentNotificationRuleOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentNotificationRule) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

type IncidentNotificationRuleArrayOutput struct{ *pulumi.OutputState }

func (IncidentNotificationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IncidentNotificationRule)(nil)).Elem()
}

func (o IncidentNotificationRuleArrayOutput) ToIncidentNotificationRuleArrayOutput() IncidentNotificationRuleArrayOutput {
	return o
}

func (o IncidentNotificationRuleArrayOutput) ToIncidentNotificationRuleArrayOutputWithContext(ctx context.Context) IncidentNotificationRuleArrayOutput {
	return o
}

func (o IncidentNotificationRuleArrayOutput) Index(i pulumi.IntInput) IncidentNotificationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IncidentNotificationRule {
		return vs[0].([]*IncidentNotificationRule)[vs[1].(int)]
	}).(IncidentNotificationRuleOutput)
}

type IncidentNotificationRuleMapOutput struct{ *pulumi.OutputState }

func (IncidentNotificationRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IncidentNotificationRule)(nil)).Elem()
}

func (o IncidentNotificationRuleMapOutput) ToIncidentNotificationRuleMapOutput() IncidentNotificationRuleMapOutput {
	return o
}

func (o IncidentNotificationRuleMapOutput) ToIncidentNotificationRuleMapOutputWithContext(ctx context.Context) IncidentNotificationRuleMapOutput {
	return o
}

func (o IncidentNotificationRuleMapOutput) MapIndex(k pulumi.StringInput) IncidentNotificationRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IncidentNotificationRule {
		return vs[0].(map[string]*IncidentNotificationRule)[vs[1].(string)]
	}).(IncidentNotificationRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentNotificationRuleInput)(nil)).Elem(), &IncidentNotificationRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentNotificationRuleArrayInput)(nil)).Elem(), IncidentNotificationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentNotificationRuleMapInput)(nil)).Elem(), IncidentNotificationRuleMap{})
	pulumi.RegisterOutputType(IncidentNotificationRuleOutput{})
	pulumi.RegisterOutputType(IncidentNotificationRuleArrayOutput{})
	pulumi.RegisterOutputType(IncidentNotificationRuleMapOutput{})
}
