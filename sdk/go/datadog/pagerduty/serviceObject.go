// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides access to individual Service Objects of Datadog - PagerDuty integrations. Note that the Datadog - PagerDuty integration must be activated in the Datadog UI in order for this resource to be usable.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog/pagerduty"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := pagerduty.NewServiceObject(ctx, "testingFoo", &pagerduty.ServiceObjectArgs{
// 			ServiceKey:  pulumi.String("9876543210123456789"),
// 			ServiceName: pulumi.String("testing_foo"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = pagerduty.NewServiceObject(ctx, "testingBar", &pagerduty.ServiceObjectArgs{
// 			ServiceKey:  pulumi.String("54321098765432109876"),
// 			ServiceName: pulumi.String("testing_bar"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ServiceObject struct {
	pulumi.CustomResourceState

	ServiceKey  pulumi.StringOutput `pulumi:"serviceKey"`
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewServiceObject registers a new resource with the given unique name, arguments, and options.
func NewServiceObject(ctx *pulumi.Context,
	name string, args *ServiceObjectArgs, opts ...pulumi.ResourceOption) (*ServiceObject, error) {
	if args == nil || args.ServiceKey == nil {
		return nil, errors.New("missing required argument 'ServiceKey'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil {
		args = &ServiceObjectArgs{}
	}
	var resource ServiceObject
	err := ctx.RegisterResource("datadog:pagerduty/serviceObject:ServiceObject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceObject gets an existing ServiceObject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceObject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceObjectState, opts ...pulumi.ResourceOption) (*ServiceObject, error) {
	var resource ServiceObject
	err := ctx.ReadResource("datadog:pagerduty/serviceObject:ServiceObject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceObject resources.
type serviceObjectState struct {
	ServiceKey  *string `pulumi:"serviceKey"`
	ServiceName *string `pulumi:"serviceName"`
}

type ServiceObjectState struct {
	ServiceKey  pulumi.StringPtrInput
	ServiceName pulumi.StringPtrInput
}

func (ServiceObjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceObjectState)(nil)).Elem()
}

type serviceObjectArgs struct {
	ServiceKey  string `pulumi:"serviceKey"`
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a ServiceObject resource.
type ServiceObjectArgs struct {
	ServiceKey  pulumi.StringInput
	ServiceName pulumi.StringInput
}

func (ServiceObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceObjectArgs)(nil)).Elem()
}

type ServiceObjectInput interface {
	pulumi.Input

	ToServiceObjectOutput() ServiceObjectOutput
	ToServiceObjectOutputWithContext(ctx context.Context) ServiceObjectOutput
}

func (ServiceObject) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceObject)(nil)).Elem()
}

func (i ServiceObject) ToServiceObjectOutput() ServiceObjectOutput {
	return i.ToServiceObjectOutputWithContext(context.Background())
}

func (i ServiceObject) ToServiceObjectOutputWithContext(ctx context.Context) ServiceObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceObjectOutput)
}

type ServiceObjectOutput struct {
	*pulumi.OutputState
}

func (ServiceObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceObjectOutput)(nil)).Elem()
}

func (o ServiceObjectOutput) ToServiceObjectOutput() ServiceObjectOutput {
	return o
}

func (o ServiceObjectOutput) ToServiceObjectOutputWithContext(ctx context.Context) ServiceObjectOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ServiceObjectOutput{})
}
