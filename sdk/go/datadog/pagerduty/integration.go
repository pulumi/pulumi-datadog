// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pagerduty

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Datadog - PagerDuty resource. This can be used to create and manage Datadog - PagerDuty integration. This resource is deprecated and should only be used for legacy purposes.
//
// ## Example Usage
// ### Services as Individual Resources
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog/pagerduty"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := pagerduty.NewIntegration(ctx, "pd", &pagerduty.IntegrationArgs{
// 			ApiToken:           pulumi.String("38457822378273432587234242874"),
// 			IndividualServices: pulumi.Bool(true),
// 			Schedules: pulumi.StringArray{
// 				pulumi.String("https://ddog.pagerduty.com/schedules/X123VF"),
// 				pulumi.String("https://ddog.pagerduty.com/schedules/X321XX"),
// 			},
// 			Subdomain: pulumi.String("ddog"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = pagerduty.NewServiceObject(ctx, "testingFoo", &pagerduty.ServiceObjectArgs{
// 			ServiceKey:  pulumi.String("9876543210123456789"),
// 			ServiceName: pulumi.String("testing_foo"),
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			"datadog_integration_pagerduty.pd",
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = pagerduty.NewServiceObject(ctx, "testingBar", &pagerduty.ServiceObjectArgs{
// 			ServiceKey:  pulumi.String("54321098765432109876"),
// 			ServiceName: pulumi.String("testing_bar"),
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			"datadog_integration_pagerduty.pd",
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Integration struct {
	pulumi.CustomResourceState

	ApiToken           pulumi.StringPtrOutput   `pulumi:"apiToken"`
	IndividualServices pulumi.BoolPtrOutput     `pulumi:"individualServices"`
	Schedules          pulumi.StringArrayOutput `pulumi:"schedules"`
	// A list of service names and service keys.
	//
	// Deprecated: set "individual_services" to true and use datadog_pagerduty_integration_service_object
	Services  IntegrationServiceArrayOutput `pulumi:"services"`
	Subdomain pulumi.StringOutput           `pulumi:"subdomain"`
}

// NewIntegration registers a new resource with the given unique name, arguments, and options.
func NewIntegration(ctx *pulumi.Context,
	name string, args *IntegrationArgs, opts ...pulumi.ResourceOption) (*Integration, error) {
	if args == nil || args.Subdomain == nil {
		return nil, errors.New("missing required argument 'Subdomain'")
	}
	if args == nil {
		args = &IntegrationArgs{}
	}
	var resource Integration
	err := ctx.RegisterResource("datadog:pagerduty/integration:Integration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegration gets an existing Integration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationState, opts ...pulumi.ResourceOption) (*Integration, error) {
	var resource Integration
	err := ctx.ReadResource("datadog:pagerduty/integration:Integration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Integration resources.
type integrationState struct {
	ApiToken           *string  `pulumi:"apiToken"`
	IndividualServices *bool    `pulumi:"individualServices"`
	Schedules          []string `pulumi:"schedules"`
	// A list of service names and service keys.
	//
	// Deprecated: set "individual_services" to true and use datadog_pagerduty_integration_service_object
	Services  []IntegrationService `pulumi:"services"`
	Subdomain *string              `pulumi:"subdomain"`
}

type IntegrationState struct {
	ApiToken           pulumi.StringPtrInput
	IndividualServices pulumi.BoolPtrInput
	Schedules          pulumi.StringArrayInput
	// A list of service names and service keys.
	//
	// Deprecated: set "individual_services" to true and use datadog_pagerduty_integration_service_object
	Services  IntegrationServiceArrayInput
	Subdomain pulumi.StringPtrInput
}

func (IntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationState)(nil)).Elem()
}

type integrationArgs struct {
	ApiToken           *string  `pulumi:"apiToken"`
	IndividualServices *bool    `pulumi:"individualServices"`
	Schedules          []string `pulumi:"schedules"`
	// A list of service names and service keys.
	//
	// Deprecated: set "individual_services" to true and use datadog_pagerduty_integration_service_object
	Services  []IntegrationService `pulumi:"services"`
	Subdomain string               `pulumi:"subdomain"`
}

// The set of arguments for constructing a Integration resource.
type IntegrationArgs struct {
	ApiToken           pulumi.StringPtrInput
	IndividualServices pulumi.BoolPtrInput
	Schedules          pulumi.StringArrayInput
	// A list of service names and service keys.
	//
	// Deprecated: set "individual_services" to true and use datadog_pagerduty_integration_service_object
	Services  IntegrationServiceArrayInput
	Subdomain pulumi.StringInput
}

func (IntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationArgs)(nil)).Elem()
}

type IntegrationInput interface {
	pulumi.Input

	ToIntegrationOutput() IntegrationOutput
	ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput
}

func (Integration) ElementType() reflect.Type {
	return reflect.TypeOf((*Integration)(nil)).Elem()
}

func (i Integration) ToIntegrationOutput() IntegrationOutput {
	return i.ToIntegrationOutputWithContext(context.Background())
}

func (i Integration) ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationOutput)
}

type IntegrationOutput struct {
	*pulumi.OutputState
}

func (IntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationOutput)(nil)).Elem()
}

func (o IntegrationOutput) ToIntegrationOutput() IntegrationOutput {
	return o
}

func (o IntegrationOutput) ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(IntegrationOutput{})
}
