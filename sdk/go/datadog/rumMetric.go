// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog RumMetric resource. This can be used to create and manage Datadog rum_metric.
//
// ## Import
//
// ```sh
// $ pulumi import datadog:index/rumMetric:RumMetric testing_rum_metric "testing.rum.metric"
// ```
type RumMetric struct {
	pulumi.CustomResourceState

	Compute RumMetricComputePtrOutput `pulumi:"compute"`
	// The type of RUM events to filter on.
	EventType pulumi.StringOutput         `pulumi:"eventType"`
	Filter    RumMetricFilterPtrOutput    `pulumi:"filter"`
	GroupBies RumMetricGroupByArrayOutput `pulumi:"groupBies"`
	// The name of the RUM-based metric. This field can't be updated after creation.
	Name       pulumi.StringOutput          `pulumi:"name"`
	Uniqueness RumMetricUniquenessPtrOutput `pulumi:"uniqueness"`
}

// NewRumMetric registers a new resource with the given unique name, arguments, and options.
func NewRumMetric(ctx *pulumi.Context,
	name string, args *RumMetricArgs, opts ...pulumi.ResourceOption) (*RumMetric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventType == nil {
		return nil, errors.New("invalid value for required argument 'EventType'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RumMetric
	err := ctx.RegisterResource("datadog:index/rumMetric:RumMetric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRumMetric gets an existing RumMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRumMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RumMetricState, opts ...pulumi.ResourceOption) (*RumMetric, error) {
	var resource RumMetric
	err := ctx.ReadResource("datadog:index/rumMetric:RumMetric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RumMetric resources.
type rumMetricState struct {
	Compute *RumMetricCompute `pulumi:"compute"`
	// The type of RUM events to filter on.
	EventType *string            `pulumi:"eventType"`
	Filter    *RumMetricFilter   `pulumi:"filter"`
	GroupBies []RumMetricGroupBy `pulumi:"groupBies"`
	// The name of the RUM-based metric. This field can't be updated after creation.
	Name       *string              `pulumi:"name"`
	Uniqueness *RumMetricUniqueness `pulumi:"uniqueness"`
}

type RumMetricState struct {
	Compute RumMetricComputePtrInput
	// The type of RUM events to filter on.
	EventType pulumi.StringPtrInput
	Filter    RumMetricFilterPtrInput
	GroupBies RumMetricGroupByArrayInput
	// The name of the RUM-based metric. This field can't be updated after creation.
	Name       pulumi.StringPtrInput
	Uniqueness RumMetricUniquenessPtrInput
}

func (RumMetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*rumMetricState)(nil)).Elem()
}

type rumMetricArgs struct {
	Compute *RumMetricCompute `pulumi:"compute"`
	// The type of RUM events to filter on.
	EventType string             `pulumi:"eventType"`
	Filter    *RumMetricFilter   `pulumi:"filter"`
	GroupBies []RumMetricGroupBy `pulumi:"groupBies"`
	// The name of the RUM-based metric. This field can't be updated after creation.
	Name       string               `pulumi:"name"`
	Uniqueness *RumMetricUniqueness `pulumi:"uniqueness"`
}

// The set of arguments for constructing a RumMetric resource.
type RumMetricArgs struct {
	Compute RumMetricComputePtrInput
	// The type of RUM events to filter on.
	EventType pulumi.StringInput
	Filter    RumMetricFilterPtrInput
	GroupBies RumMetricGroupByArrayInput
	// The name of the RUM-based metric. This field can't be updated after creation.
	Name       pulumi.StringInput
	Uniqueness RumMetricUniquenessPtrInput
}

func (RumMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rumMetricArgs)(nil)).Elem()
}

type RumMetricInput interface {
	pulumi.Input

	ToRumMetricOutput() RumMetricOutput
	ToRumMetricOutputWithContext(ctx context.Context) RumMetricOutput
}

func (*RumMetric) ElementType() reflect.Type {
	return reflect.TypeOf((**RumMetric)(nil)).Elem()
}

func (i *RumMetric) ToRumMetricOutput() RumMetricOutput {
	return i.ToRumMetricOutputWithContext(context.Background())
}

func (i *RumMetric) ToRumMetricOutputWithContext(ctx context.Context) RumMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumMetricOutput)
}

// RumMetricArrayInput is an input type that accepts RumMetricArray and RumMetricArrayOutput values.
// You can construct a concrete instance of `RumMetricArrayInput` via:
//
//	RumMetricArray{ RumMetricArgs{...} }
type RumMetricArrayInput interface {
	pulumi.Input

	ToRumMetricArrayOutput() RumMetricArrayOutput
	ToRumMetricArrayOutputWithContext(context.Context) RumMetricArrayOutput
}

type RumMetricArray []RumMetricInput

func (RumMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RumMetric)(nil)).Elem()
}

func (i RumMetricArray) ToRumMetricArrayOutput() RumMetricArrayOutput {
	return i.ToRumMetricArrayOutputWithContext(context.Background())
}

func (i RumMetricArray) ToRumMetricArrayOutputWithContext(ctx context.Context) RumMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumMetricArrayOutput)
}

// RumMetricMapInput is an input type that accepts RumMetricMap and RumMetricMapOutput values.
// You can construct a concrete instance of `RumMetricMapInput` via:
//
//	RumMetricMap{ "key": RumMetricArgs{...} }
type RumMetricMapInput interface {
	pulumi.Input

	ToRumMetricMapOutput() RumMetricMapOutput
	ToRumMetricMapOutputWithContext(context.Context) RumMetricMapOutput
}

type RumMetricMap map[string]RumMetricInput

func (RumMetricMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RumMetric)(nil)).Elem()
}

func (i RumMetricMap) ToRumMetricMapOutput() RumMetricMapOutput {
	return i.ToRumMetricMapOutputWithContext(context.Background())
}

func (i RumMetricMap) ToRumMetricMapOutputWithContext(ctx context.Context) RumMetricMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumMetricMapOutput)
}

type RumMetricOutput struct{ *pulumi.OutputState }

func (RumMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RumMetric)(nil)).Elem()
}

func (o RumMetricOutput) ToRumMetricOutput() RumMetricOutput {
	return o
}

func (o RumMetricOutput) ToRumMetricOutputWithContext(ctx context.Context) RumMetricOutput {
	return o
}

func (o RumMetricOutput) Compute() RumMetricComputePtrOutput {
	return o.ApplyT(func(v *RumMetric) RumMetricComputePtrOutput { return v.Compute }).(RumMetricComputePtrOutput)
}

// The type of RUM events to filter on.
func (o RumMetricOutput) EventType() pulumi.StringOutput {
	return o.ApplyT(func(v *RumMetric) pulumi.StringOutput { return v.EventType }).(pulumi.StringOutput)
}

func (o RumMetricOutput) Filter() RumMetricFilterPtrOutput {
	return o.ApplyT(func(v *RumMetric) RumMetricFilterPtrOutput { return v.Filter }).(RumMetricFilterPtrOutput)
}

func (o RumMetricOutput) GroupBies() RumMetricGroupByArrayOutput {
	return o.ApplyT(func(v *RumMetric) RumMetricGroupByArrayOutput { return v.GroupBies }).(RumMetricGroupByArrayOutput)
}

// The name of the RUM-based metric. This field can't be updated after creation.
func (o RumMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RumMetric) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RumMetricOutput) Uniqueness() RumMetricUniquenessPtrOutput {
	return o.ApplyT(func(v *RumMetric) RumMetricUniquenessPtrOutput { return v.Uniqueness }).(RumMetricUniquenessPtrOutput)
}

type RumMetricArrayOutput struct{ *pulumi.OutputState }

func (RumMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RumMetric)(nil)).Elem()
}

func (o RumMetricArrayOutput) ToRumMetricArrayOutput() RumMetricArrayOutput {
	return o
}

func (o RumMetricArrayOutput) ToRumMetricArrayOutputWithContext(ctx context.Context) RumMetricArrayOutput {
	return o
}

func (o RumMetricArrayOutput) Index(i pulumi.IntInput) RumMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RumMetric {
		return vs[0].([]*RumMetric)[vs[1].(int)]
	}).(RumMetricOutput)
}

type RumMetricMapOutput struct{ *pulumi.OutputState }

func (RumMetricMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RumMetric)(nil)).Elem()
}

func (o RumMetricMapOutput) ToRumMetricMapOutput() RumMetricMapOutput {
	return o
}

func (o RumMetricMapOutput) ToRumMetricMapOutputWithContext(ctx context.Context) RumMetricMapOutput {
	return o
}

func (o RumMetricMapOutput) MapIndex(k pulumi.StringInput) RumMetricOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RumMetric {
		return vs[0].(map[string]*RumMetric)[vs[1].(string)]
	}).(RumMetricOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RumMetricInput)(nil)).Elem(), &RumMetric{})
	pulumi.RegisterInputType(reflect.TypeOf((*RumMetricArrayInput)(nil)).Elem(), RumMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RumMetricMapInput)(nil)).Elem(), RumMetricMap{})
	pulumi.RegisterOutputType(RumMetricOutput{})
	pulumi.RegisterOutputType(RumMetricArrayOutput{})
	pulumi.RegisterOutputType(RumMetricMapOutput{})
}
