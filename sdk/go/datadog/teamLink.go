// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog TeamLink resource. This can be used to create and manage Datadog team_link.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooTeam, err := datadog.NewTeam(ctx, "fooTeam", &datadog.TeamArgs{
//				Description: pulumi.String("Example team"),
//				Handle:      pulumi.String("example-team-updated"),
//				Name:        pulumi.String("Example Team-updated"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datadog.NewTeamLink(ctx, "fooTeamLink", &datadog.TeamLinkArgs{
//				TeamId:   fooTeam.ID(),
//				Label:    pulumi.String("Link label"),
//				Position: pulumi.Int("Example link"),
//				Url:      pulumi.String("https://example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import datadog:index/teamLink:TeamLink new_list "${team_id}:${resource_id}"
//
// ```
type TeamLink struct {
	pulumi.CustomResourceState

	// The link's label.
	Label pulumi.StringOutput `pulumi:"label"`
	// The link's position, used to sort links for the team.
	Position pulumi.IntOutput `pulumi:"position"`
	// ID of the team the link is associated with.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// The URL for the link.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewTeamLink registers a new resource with the given unique name, arguments, and options.
func NewTeamLink(ctx *pulumi.Context,
	name string, args *TeamLinkArgs, opts ...pulumi.ResourceOption) (*TeamLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource TeamLink
	err := ctx.RegisterResource("datadog:index/teamLink:TeamLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamLink gets an existing TeamLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamLinkState, opts ...pulumi.ResourceOption) (*TeamLink, error) {
	var resource TeamLink
	err := ctx.ReadResource("datadog:index/teamLink:TeamLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamLink resources.
type teamLinkState struct {
	// The link's label.
	Label *string `pulumi:"label"`
	// The link's position, used to sort links for the team.
	Position *int `pulumi:"position"`
	// ID of the team the link is associated with.
	TeamId *string `pulumi:"teamId"`
	// The URL for the link.
	Url *string `pulumi:"url"`
}

type TeamLinkState struct {
	// The link's label.
	Label pulumi.StringPtrInput
	// The link's position, used to sort links for the team.
	Position pulumi.IntPtrInput
	// ID of the team the link is associated with.
	TeamId pulumi.StringPtrInput
	// The URL for the link.
	Url pulumi.StringPtrInput
}

func (TeamLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamLinkState)(nil)).Elem()
}

type teamLinkArgs struct {
	// The link's label.
	Label string `pulumi:"label"`
	// The link's position, used to sort links for the team.
	Position *int `pulumi:"position"`
	// ID of the team the link is associated with.
	TeamId string `pulumi:"teamId"`
	// The URL for the link.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a TeamLink resource.
type TeamLinkArgs struct {
	// The link's label.
	Label pulumi.StringInput
	// The link's position, used to sort links for the team.
	Position pulumi.IntPtrInput
	// ID of the team the link is associated with.
	TeamId pulumi.StringInput
	// The URL for the link.
	Url pulumi.StringInput
}

func (TeamLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamLinkArgs)(nil)).Elem()
}

type TeamLinkInput interface {
	pulumi.Input

	ToTeamLinkOutput() TeamLinkOutput
	ToTeamLinkOutputWithContext(ctx context.Context) TeamLinkOutput
}

func (*TeamLink) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamLink)(nil)).Elem()
}

func (i *TeamLink) ToTeamLinkOutput() TeamLinkOutput {
	return i.ToTeamLinkOutputWithContext(context.Background())
}

func (i *TeamLink) ToTeamLinkOutputWithContext(ctx context.Context) TeamLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamLinkOutput)
}

// TeamLinkArrayInput is an input type that accepts TeamLinkArray and TeamLinkArrayOutput values.
// You can construct a concrete instance of `TeamLinkArrayInput` via:
//
//	TeamLinkArray{ TeamLinkArgs{...} }
type TeamLinkArrayInput interface {
	pulumi.Input

	ToTeamLinkArrayOutput() TeamLinkArrayOutput
	ToTeamLinkArrayOutputWithContext(context.Context) TeamLinkArrayOutput
}

type TeamLinkArray []TeamLinkInput

func (TeamLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamLink)(nil)).Elem()
}

func (i TeamLinkArray) ToTeamLinkArrayOutput() TeamLinkArrayOutput {
	return i.ToTeamLinkArrayOutputWithContext(context.Background())
}

func (i TeamLinkArray) ToTeamLinkArrayOutputWithContext(ctx context.Context) TeamLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamLinkArrayOutput)
}

// TeamLinkMapInput is an input type that accepts TeamLinkMap and TeamLinkMapOutput values.
// You can construct a concrete instance of `TeamLinkMapInput` via:
//
//	TeamLinkMap{ "key": TeamLinkArgs{...} }
type TeamLinkMapInput interface {
	pulumi.Input

	ToTeamLinkMapOutput() TeamLinkMapOutput
	ToTeamLinkMapOutputWithContext(context.Context) TeamLinkMapOutput
}

type TeamLinkMap map[string]TeamLinkInput

func (TeamLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamLink)(nil)).Elem()
}

func (i TeamLinkMap) ToTeamLinkMapOutput() TeamLinkMapOutput {
	return i.ToTeamLinkMapOutputWithContext(context.Background())
}

func (i TeamLinkMap) ToTeamLinkMapOutputWithContext(ctx context.Context) TeamLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamLinkMapOutput)
}

type TeamLinkOutput struct{ *pulumi.OutputState }

func (TeamLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamLink)(nil)).Elem()
}

func (o TeamLinkOutput) ToTeamLinkOutput() TeamLinkOutput {
	return o
}

func (o TeamLinkOutput) ToTeamLinkOutputWithContext(ctx context.Context) TeamLinkOutput {
	return o
}

// The link's label.
func (o TeamLinkOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamLink) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// The link's position, used to sort links for the team.
func (o TeamLinkOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *TeamLink) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// ID of the team the link is associated with.
func (o TeamLinkOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamLink) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// The URL for the link.
func (o TeamLinkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamLink) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type TeamLinkArrayOutput struct{ *pulumi.OutputState }

func (TeamLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamLink)(nil)).Elem()
}

func (o TeamLinkArrayOutput) ToTeamLinkArrayOutput() TeamLinkArrayOutput {
	return o
}

func (o TeamLinkArrayOutput) ToTeamLinkArrayOutputWithContext(ctx context.Context) TeamLinkArrayOutput {
	return o
}

func (o TeamLinkArrayOutput) Index(i pulumi.IntInput) TeamLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamLink {
		return vs[0].([]*TeamLink)[vs[1].(int)]
	}).(TeamLinkOutput)
}

type TeamLinkMapOutput struct{ *pulumi.OutputState }

func (TeamLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamLink)(nil)).Elem()
}

func (o TeamLinkMapOutput) ToTeamLinkMapOutput() TeamLinkMapOutput {
	return o
}

func (o TeamLinkMapOutput) ToTeamLinkMapOutputWithContext(ctx context.Context) TeamLinkMapOutput {
	return o
}

func (o TeamLinkMapOutput) MapIndex(k pulumi.StringInput) TeamLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamLink {
		return vs[0].(map[string]*TeamLink)[vs[1].(string)]
	}).(TeamLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamLinkInput)(nil)).Elem(), &TeamLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamLinkArrayInput)(nil)).Elem(), TeamLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamLinkMapInput)(nil)).Elem(), TeamLinkMap{})
	pulumi.RegisterOutputType(TeamLinkOutput{})
	pulumi.RegisterOutputType(TeamLinkArrayOutput{})
	pulumi.RegisterOutputType(TeamLinkMapOutput{})
}
