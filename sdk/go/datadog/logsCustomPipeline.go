// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog [Logs Pipeline API](https://docs.datadoghq.com/api/v1/logs-pipelines/) resource, which is used to create and manage Datadog logs custom pipelines. Each `LogsCustomPipeline` resource defines a complete pipeline. The order of the pipelines is maintained in a different resource: `LogsPipelineOrder`. When creating a new pipeline, you need to **explicitly** add this pipeline to the `LogsPipelineOrder` resource to track the pipeline. Similarly, when a pipeline needs to be destroyed, remove its references from the `LogsPipelineOrder` resource.
//
// ## Import
//
// To find the pipeline ID, click the "edit" button in the UI to open the pipeline details. The pipeline ID is the last part of the URL.
//
// ```sh
//
//	$ pulumi import datadog:index/logsCustomPipeline:LogsCustomPipeline name> <pipelineID>
//
// ```
type LogsCustomPipeline struct {
	pulumi.CustomResourceState

	Filters    LogsCustomPipelineFilterArrayOutput    `pulumi:"filters"`
	IsEnabled  pulumi.BoolPtrOutput                   `pulumi:"isEnabled"`
	Name       pulumi.StringOutput                    `pulumi:"name"`
	Processors LogsCustomPipelineProcessorArrayOutput `pulumi:"processors"`
}

// NewLogsCustomPipeline registers a new resource with the given unique name, arguments, and options.
func NewLogsCustomPipeline(ctx *pulumi.Context,
	name string, args *LogsCustomPipelineArgs, opts ...pulumi.ResourceOption) (*LogsCustomPipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filters == nil {
		return nil, errors.New("invalid value for required argument 'Filters'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogsCustomPipeline
	err := ctx.RegisterResource("datadog:index/logsCustomPipeline:LogsCustomPipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogsCustomPipeline gets an existing LogsCustomPipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogsCustomPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogsCustomPipelineState, opts ...pulumi.ResourceOption) (*LogsCustomPipeline, error) {
	var resource LogsCustomPipeline
	err := ctx.ReadResource("datadog:index/logsCustomPipeline:LogsCustomPipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogsCustomPipeline resources.
type logsCustomPipelineState struct {
	Filters    []LogsCustomPipelineFilter    `pulumi:"filters"`
	IsEnabled  *bool                         `pulumi:"isEnabled"`
	Name       *string                       `pulumi:"name"`
	Processors []LogsCustomPipelineProcessor `pulumi:"processors"`
}

type LogsCustomPipelineState struct {
	Filters    LogsCustomPipelineFilterArrayInput
	IsEnabled  pulumi.BoolPtrInput
	Name       pulumi.StringPtrInput
	Processors LogsCustomPipelineProcessorArrayInput
}

func (LogsCustomPipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*logsCustomPipelineState)(nil)).Elem()
}

type logsCustomPipelineArgs struct {
	Filters    []LogsCustomPipelineFilter    `pulumi:"filters"`
	IsEnabled  *bool                         `pulumi:"isEnabled"`
	Name       string                        `pulumi:"name"`
	Processors []LogsCustomPipelineProcessor `pulumi:"processors"`
}

// The set of arguments for constructing a LogsCustomPipeline resource.
type LogsCustomPipelineArgs struct {
	Filters    LogsCustomPipelineFilterArrayInput
	IsEnabled  pulumi.BoolPtrInput
	Name       pulumi.StringInput
	Processors LogsCustomPipelineProcessorArrayInput
}

func (LogsCustomPipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logsCustomPipelineArgs)(nil)).Elem()
}

type LogsCustomPipelineInput interface {
	pulumi.Input

	ToLogsCustomPipelineOutput() LogsCustomPipelineOutput
	ToLogsCustomPipelineOutputWithContext(ctx context.Context) LogsCustomPipelineOutput
}

func (*LogsCustomPipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**LogsCustomPipeline)(nil)).Elem()
}

func (i *LogsCustomPipeline) ToLogsCustomPipelineOutput() LogsCustomPipelineOutput {
	return i.ToLogsCustomPipelineOutputWithContext(context.Background())
}

func (i *LogsCustomPipeline) ToLogsCustomPipelineOutputWithContext(ctx context.Context) LogsCustomPipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsCustomPipelineOutput)
}

// LogsCustomPipelineArrayInput is an input type that accepts LogsCustomPipelineArray and LogsCustomPipelineArrayOutput values.
// You can construct a concrete instance of `LogsCustomPipelineArrayInput` via:
//
//	LogsCustomPipelineArray{ LogsCustomPipelineArgs{...} }
type LogsCustomPipelineArrayInput interface {
	pulumi.Input

	ToLogsCustomPipelineArrayOutput() LogsCustomPipelineArrayOutput
	ToLogsCustomPipelineArrayOutputWithContext(context.Context) LogsCustomPipelineArrayOutput
}

type LogsCustomPipelineArray []LogsCustomPipelineInput

func (LogsCustomPipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogsCustomPipeline)(nil)).Elem()
}

func (i LogsCustomPipelineArray) ToLogsCustomPipelineArrayOutput() LogsCustomPipelineArrayOutput {
	return i.ToLogsCustomPipelineArrayOutputWithContext(context.Background())
}

func (i LogsCustomPipelineArray) ToLogsCustomPipelineArrayOutputWithContext(ctx context.Context) LogsCustomPipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsCustomPipelineArrayOutput)
}

// LogsCustomPipelineMapInput is an input type that accepts LogsCustomPipelineMap and LogsCustomPipelineMapOutput values.
// You can construct a concrete instance of `LogsCustomPipelineMapInput` via:
//
//	LogsCustomPipelineMap{ "key": LogsCustomPipelineArgs{...} }
type LogsCustomPipelineMapInput interface {
	pulumi.Input

	ToLogsCustomPipelineMapOutput() LogsCustomPipelineMapOutput
	ToLogsCustomPipelineMapOutputWithContext(context.Context) LogsCustomPipelineMapOutput
}

type LogsCustomPipelineMap map[string]LogsCustomPipelineInput

func (LogsCustomPipelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogsCustomPipeline)(nil)).Elem()
}

func (i LogsCustomPipelineMap) ToLogsCustomPipelineMapOutput() LogsCustomPipelineMapOutput {
	return i.ToLogsCustomPipelineMapOutputWithContext(context.Background())
}

func (i LogsCustomPipelineMap) ToLogsCustomPipelineMapOutputWithContext(ctx context.Context) LogsCustomPipelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsCustomPipelineMapOutput)
}

type LogsCustomPipelineOutput struct{ *pulumi.OutputState }

func (LogsCustomPipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogsCustomPipeline)(nil)).Elem()
}

func (o LogsCustomPipelineOutput) ToLogsCustomPipelineOutput() LogsCustomPipelineOutput {
	return o
}

func (o LogsCustomPipelineOutput) ToLogsCustomPipelineOutputWithContext(ctx context.Context) LogsCustomPipelineOutput {
	return o
}

func (o LogsCustomPipelineOutput) Filters() LogsCustomPipelineFilterArrayOutput {
	return o.ApplyT(func(v *LogsCustomPipeline) LogsCustomPipelineFilterArrayOutput { return v.Filters }).(LogsCustomPipelineFilterArrayOutput)
}

func (o LogsCustomPipelineOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogsCustomPipeline) pulumi.BoolPtrOutput { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

func (o LogsCustomPipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogsCustomPipeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LogsCustomPipelineOutput) Processors() LogsCustomPipelineProcessorArrayOutput {
	return o.ApplyT(func(v *LogsCustomPipeline) LogsCustomPipelineProcessorArrayOutput { return v.Processors }).(LogsCustomPipelineProcessorArrayOutput)
}

type LogsCustomPipelineArrayOutput struct{ *pulumi.OutputState }

func (LogsCustomPipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogsCustomPipeline)(nil)).Elem()
}

func (o LogsCustomPipelineArrayOutput) ToLogsCustomPipelineArrayOutput() LogsCustomPipelineArrayOutput {
	return o
}

func (o LogsCustomPipelineArrayOutput) ToLogsCustomPipelineArrayOutputWithContext(ctx context.Context) LogsCustomPipelineArrayOutput {
	return o
}

func (o LogsCustomPipelineArrayOutput) Index(i pulumi.IntInput) LogsCustomPipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogsCustomPipeline {
		return vs[0].([]*LogsCustomPipeline)[vs[1].(int)]
	}).(LogsCustomPipelineOutput)
}

type LogsCustomPipelineMapOutput struct{ *pulumi.OutputState }

func (LogsCustomPipelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogsCustomPipeline)(nil)).Elem()
}

func (o LogsCustomPipelineMapOutput) ToLogsCustomPipelineMapOutput() LogsCustomPipelineMapOutput {
	return o
}

func (o LogsCustomPipelineMapOutput) ToLogsCustomPipelineMapOutputWithContext(ctx context.Context) LogsCustomPipelineMapOutput {
	return o
}

func (o LogsCustomPipelineMapOutput) MapIndex(k pulumi.StringInput) LogsCustomPipelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogsCustomPipeline {
		return vs[0].(map[string]*LogsCustomPipeline)[vs[1].(string)]
	}).(LogsCustomPipelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogsCustomPipelineInput)(nil)).Elem(), &LogsCustomPipeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogsCustomPipelineArrayInput)(nil)).Elem(), LogsCustomPipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogsCustomPipelineMapInput)(nil)).Elem(), LogsCustomPipelineMap{})
	pulumi.RegisterOutputType(LogsCustomPipelineOutput{})
	pulumi.RegisterOutputType(LogsCustomPipelineArrayOutput{})
	pulumi.RegisterOutputType(LogsCustomPipelineMapOutput{})
}
