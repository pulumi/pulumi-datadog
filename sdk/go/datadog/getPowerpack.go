// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve information about an existing Datadog Powerpack.
func LookupPowerpack(ctx *pulumi.Context, args *LookupPowerpackArgs, opts ...pulumi.InvokeOption) (*LookupPowerpackResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPowerpackResult
	err := ctx.Invoke("datadog:index/getPowerpack:getPowerpack", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPowerpack.
type LookupPowerpackArgs struct {
	// The name of the Powerpack to search for.
	Name string `pulumi:"name"`
}

// A collection of values returned by getPowerpack.
type LookupPowerpackResult struct {
	// The ID of this resource.
	Id string `pulumi:"id"`
	// The name of the Powerpack to search for.
	Name string `pulumi:"name"`
}

func LookupPowerpackOutput(ctx *pulumi.Context, args LookupPowerpackOutputArgs, opts ...pulumi.InvokeOption) LookupPowerpackResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPowerpackResult, error) {
			args := v.(LookupPowerpackArgs)
			r, err := LookupPowerpack(ctx, &args, opts...)
			var s LookupPowerpackResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPowerpackResultOutput)
}

// A collection of arguments for invoking getPowerpack.
type LookupPowerpackOutputArgs struct {
	// The name of the Powerpack to search for.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupPowerpackOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPowerpackArgs)(nil)).Elem()
}

// A collection of values returned by getPowerpack.
type LookupPowerpackResultOutput struct{ *pulumi.OutputState }

func (LookupPowerpackResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPowerpackResult)(nil)).Elem()
}

func (o LookupPowerpackResultOutput) ToLookupPowerpackResultOutput() LookupPowerpackResultOutput {
	return o
}

func (o LookupPowerpackResultOutput) ToLookupPowerpackResultOutputWithContext(ctx context.Context) LookupPowerpackResultOutput {
	return o
}

// The ID of this resource.
func (o LookupPowerpackResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPowerpackResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the Powerpack to search for.
func (o LookupPowerpackResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPowerpackResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPowerpackResultOutput{})
}
