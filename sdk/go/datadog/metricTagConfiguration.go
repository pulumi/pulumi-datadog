// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Datadog metric tag configuration resource. This can be used to modify tag configurations for metrics.
//
// ## Import
//
// ```sh
//
//	$ pulumi import datadog:index/metricTagConfiguration:MetricTagConfiguration example_dist_metric example.terraform.dist.metric
//
// ```
type MetricTagConfiguration struct {
	pulumi.CustomResourceState

	// A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metricType` of count, rate, or gauge.
	Aggregations MetricTagConfigurationAggregationArrayOutput `pulumi:"aggregations"`
	// Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metricType` of distribution.
	IncludePercentiles pulumi.BoolPtrOutput `pulumi:"includePercentiles"`
	// The metric name for this resource.
	MetricName pulumi.StringOutput `pulumi:"metricName"`
	// The metric's type. This field can't be updated after creation. Valid values are `gauge`, `count`, `rate`, `distribution`.
	MetricType pulumi.StringOutput `pulumi:"metricType"`
	// A list of tag keys that will be queryable for your metric.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewMetricTagConfiguration registers a new resource with the given unique name, arguments, and options.
func NewMetricTagConfiguration(ctx *pulumi.Context,
	name string, args *MetricTagConfigurationArgs, opts ...pulumi.ResourceOption) (*MetricTagConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetricName == nil {
		return nil, errors.New("invalid value for required argument 'MetricName'")
	}
	if args.MetricType == nil {
		return nil, errors.New("invalid value for required argument 'MetricType'")
	}
	if args.Tags == nil {
		return nil, errors.New("invalid value for required argument 'Tags'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetricTagConfiguration
	err := ctx.RegisterResource("datadog:index/metricTagConfiguration:MetricTagConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricTagConfiguration gets an existing MetricTagConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricTagConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricTagConfigurationState, opts ...pulumi.ResourceOption) (*MetricTagConfiguration, error) {
	var resource MetricTagConfiguration
	err := ctx.ReadResource("datadog:index/metricTagConfiguration:MetricTagConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricTagConfiguration resources.
type metricTagConfigurationState struct {
	// A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metricType` of count, rate, or gauge.
	Aggregations []MetricTagConfigurationAggregation `pulumi:"aggregations"`
	// Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metricType` of distribution.
	IncludePercentiles *bool `pulumi:"includePercentiles"`
	// The metric name for this resource.
	MetricName *string `pulumi:"metricName"`
	// The metric's type. This field can't be updated after creation. Valid values are `gauge`, `count`, `rate`, `distribution`.
	MetricType *string `pulumi:"metricType"`
	// A list of tag keys that will be queryable for your metric.
	Tags []string `pulumi:"tags"`
}

type MetricTagConfigurationState struct {
	// A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metricType` of count, rate, or gauge.
	Aggregations MetricTagConfigurationAggregationArrayInput
	// Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metricType` of distribution.
	IncludePercentiles pulumi.BoolPtrInput
	// The metric name for this resource.
	MetricName pulumi.StringPtrInput
	// The metric's type. This field can't be updated after creation. Valid values are `gauge`, `count`, `rate`, `distribution`.
	MetricType pulumi.StringPtrInput
	// A list of tag keys that will be queryable for your metric.
	Tags pulumi.StringArrayInput
}

func (MetricTagConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricTagConfigurationState)(nil)).Elem()
}

type metricTagConfigurationArgs struct {
	// A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metricType` of count, rate, or gauge.
	Aggregations []MetricTagConfigurationAggregation `pulumi:"aggregations"`
	// Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metricType` of distribution.
	IncludePercentiles *bool `pulumi:"includePercentiles"`
	// The metric name for this resource.
	MetricName string `pulumi:"metricName"`
	// The metric's type. This field can't be updated after creation. Valid values are `gauge`, `count`, `rate`, `distribution`.
	MetricType string `pulumi:"metricType"`
	// A list of tag keys that will be queryable for your metric.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a MetricTagConfiguration resource.
type MetricTagConfigurationArgs struct {
	// A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metricType` of count, rate, or gauge.
	Aggregations MetricTagConfigurationAggregationArrayInput
	// Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metricType` of distribution.
	IncludePercentiles pulumi.BoolPtrInput
	// The metric name for this resource.
	MetricName pulumi.StringInput
	// The metric's type. This field can't be updated after creation. Valid values are `gauge`, `count`, `rate`, `distribution`.
	MetricType pulumi.StringInput
	// A list of tag keys that will be queryable for your metric.
	Tags pulumi.StringArrayInput
}

func (MetricTagConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricTagConfigurationArgs)(nil)).Elem()
}

type MetricTagConfigurationInput interface {
	pulumi.Input

	ToMetricTagConfigurationOutput() MetricTagConfigurationOutput
	ToMetricTagConfigurationOutputWithContext(ctx context.Context) MetricTagConfigurationOutput
}

func (*MetricTagConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricTagConfiguration)(nil)).Elem()
}

func (i *MetricTagConfiguration) ToMetricTagConfigurationOutput() MetricTagConfigurationOutput {
	return i.ToMetricTagConfigurationOutputWithContext(context.Background())
}

func (i *MetricTagConfiguration) ToMetricTagConfigurationOutputWithContext(ctx context.Context) MetricTagConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricTagConfigurationOutput)
}

func (i *MetricTagConfiguration) ToOutput(ctx context.Context) pulumix.Output[*MetricTagConfiguration] {
	return pulumix.Output[*MetricTagConfiguration]{
		OutputState: i.ToMetricTagConfigurationOutputWithContext(ctx).OutputState,
	}
}

// MetricTagConfigurationArrayInput is an input type that accepts MetricTagConfigurationArray and MetricTagConfigurationArrayOutput values.
// You can construct a concrete instance of `MetricTagConfigurationArrayInput` via:
//
//	MetricTagConfigurationArray{ MetricTagConfigurationArgs{...} }
type MetricTagConfigurationArrayInput interface {
	pulumi.Input

	ToMetricTagConfigurationArrayOutput() MetricTagConfigurationArrayOutput
	ToMetricTagConfigurationArrayOutputWithContext(context.Context) MetricTagConfigurationArrayOutput
}

type MetricTagConfigurationArray []MetricTagConfigurationInput

func (MetricTagConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricTagConfiguration)(nil)).Elem()
}

func (i MetricTagConfigurationArray) ToMetricTagConfigurationArrayOutput() MetricTagConfigurationArrayOutput {
	return i.ToMetricTagConfigurationArrayOutputWithContext(context.Background())
}

func (i MetricTagConfigurationArray) ToMetricTagConfigurationArrayOutputWithContext(ctx context.Context) MetricTagConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricTagConfigurationArrayOutput)
}

func (i MetricTagConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]*MetricTagConfiguration] {
	return pulumix.Output[[]*MetricTagConfiguration]{
		OutputState: i.ToMetricTagConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

// MetricTagConfigurationMapInput is an input type that accepts MetricTagConfigurationMap and MetricTagConfigurationMapOutput values.
// You can construct a concrete instance of `MetricTagConfigurationMapInput` via:
//
//	MetricTagConfigurationMap{ "key": MetricTagConfigurationArgs{...} }
type MetricTagConfigurationMapInput interface {
	pulumi.Input

	ToMetricTagConfigurationMapOutput() MetricTagConfigurationMapOutput
	ToMetricTagConfigurationMapOutputWithContext(context.Context) MetricTagConfigurationMapOutput
}

type MetricTagConfigurationMap map[string]MetricTagConfigurationInput

func (MetricTagConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricTagConfiguration)(nil)).Elem()
}

func (i MetricTagConfigurationMap) ToMetricTagConfigurationMapOutput() MetricTagConfigurationMapOutput {
	return i.ToMetricTagConfigurationMapOutputWithContext(context.Background())
}

func (i MetricTagConfigurationMap) ToMetricTagConfigurationMapOutputWithContext(ctx context.Context) MetricTagConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricTagConfigurationMapOutput)
}

func (i MetricTagConfigurationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*MetricTagConfiguration] {
	return pulumix.Output[map[string]*MetricTagConfiguration]{
		OutputState: i.ToMetricTagConfigurationMapOutputWithContext(ctx).OutputState,
	}
}

type MetricTagConfigurationOutput struct{ *pulumi.OutputState }

func (MetricTagConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricTagConfiguration)(nil)).Elem()
}

func (o MetricTagConfigurationOutput) ToMetricTagConfigurationOutput() MetricTagConfigurationOutput {
	return o
}

func (o MetricTagConfigurationOutput) ToMetricTagConfigurationOutputWithContext(ctx context.Context) MetricTagConfigurationOutput {
	return o
}

func (o MetricTagConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[*MetricTagConfiguration] {
	return pulumix.Output[*MetricTagConfiguration]{
		OutputState: o.OutputState,
	}
}

// A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metricType` of count, rate, or gauge.
func (o MetricTagConfigurationOutput) Aggregations() MetricTagConfigurationAggregationArrayOutput {
	return o.ApplyT(func(v *MetricTagConfiguration) MetricTagConfigurationAggregationArrayOutput { return v.Aggregations }).(MetricTagConfigurationAggregationArrayOutput)
}

// Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metricType` of distribution.
func (o MetricTagConfigurationOutput) IncludePercentiles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetricTagConfiguration) pulumi.BoolPtrOutput { return v.IncludePercentiles }).(pulumi.BoolPtrOutput)
}

// The metric name for this resource.
func (o MetricTagConfigurationOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricTagConfiguration) pulumi.StringOutput { return v.MetricName }).(pulumi.StringOutput)
}

// The metric's type. This field can't be updated after creation. Valid values are `gauge`, `count`, `rate`, `distribution`.
func (o MetricTagConfigurationOutput) MetricType() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricTagConfiguration) pulumi.StringOutput { return v.MetricType }).(pulumi.StringOutput)
}

// A list of tag keys that will be queryable for your metric.
func (o MetricTagConfigurationOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetricTagConfiguration) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type MetricTagConfigurationArrayOutput struct{ *pulumi.OutputState }

func (MetricTagConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricTagConfiguration)(nil)).Elem()
}

func (o MetricTagConfigurationArrayOutput) ToMetricTagConfigurationArrayOutput() MetricTagConfigurationArrayOutput {
	return o
}

func (o MetricTagConfigurationArrayOutput) ToMetricTagConfigurationArrayOutputWithContext(ctx context.Context) MetricTagConfigurationArrayOutput {
	return o
}

func (o MetricTagConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*MetricTagConfiguration] {
	return pulumix.Output[[]*MetricTagConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o MetricTagConfigurationArrayOutput) Index(i pulumi.IntInput) MetricTagConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetricTagConfiguration {
		return vs[0].([]*MetricTagConfiguration)[vs[1].(int)]
	}).(MetricTagConfigurationOutput)
}

type MetricTagConfigurationMapOutput struct{ *pulumi.OutputState }

func (MetricTagConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricTagConfiguration)(nil)).Elem()
}

func (o MetricTagConfigurationMapOutput) ToMetricTagConfigurationMapOutput() MetricTagConfigurationMapOutput {
	return o
}

func (o MetricTagConfigurationMapOutput) ToMetricTagConfigurationMapOutputWithContext(ctx context.Context) MetricTagConfigurationMapOutput {
	return o
}

func (o MetricTagConfigurationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*MetricTagConfiguration] {
	return pulumix.Output[map[string]*MetricTagConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o MetricTagConfigurationMapOutput) MapIndex(k pulumi.StringInput) MetricTagConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetricTagConfiguration {
		return vs[0].(map[string]*MetricTagConfiguration)[vs[1].(string)]
	}).(MetricTagConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricTagConfigurationInput)(nil)).Elem(), &MetricTagConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricTagConfigurationArrayInput)(nil)).Elem(), MetricTagConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricTagConfigurationMapInput)(nil)).Elem(), MetricTagConfigurationMap{})
	pulumi.RegisterOutputType(MetricTagConfigurationOutput{})
	pulumi.RegisterOutputType(MetricTagConfigurationArrayOutput{})
	pulumi.RegisterOutputType(MetricTagConfigurationMapOutput{})
}
