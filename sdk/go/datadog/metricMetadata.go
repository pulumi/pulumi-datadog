// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Datadog metricMetadata resource. This can be used to manage a metric's metadata.
type MetricMetadata struct {
	pulumi.CustomResourceState

	// A description of the metric.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the metric.
	Metric pulumi.StringOutput `pulumi:"metric"`
	// 'Per' unit of the metric such as 'second' in 'bytes per second'.
	PerUnit pulumi.StringPtrOutput `pulumi:"perUnit"`
	// A short name of the metric.
	ShortName pulumi.StringPtrOutput `pulumi:"shortName"`
	// If applicable, stasd flush interval in seconds for the metric.
	StatsdInterval pulumi.IntPtrOutput    `pulumi:"statsdInterval"`
	Type           pulumi.StringPtrOutput `pulumi:"type"`
	// Primary unit of the metric such as 'byte' or 'operation'.
	Unit pulumi.StringPtrOutput `pulumi:"unit"`
}

// NewMetricMetadata registers a new resource with the given unique name, arguments, and options.
func NewMetricMetadata(ctx *pulumi.Context,
	name string, args *MetricMetadataArgs, opts ...pulumi.ResourceOption) (*MetricMetadata, error) {
	if args == nil || args.Metric == nil {
		return nil, errors.New("missing required argument 'Metric'")
	}
	if args == nil {
		args = &MetricMetadataArgs{}
	}
	var resource MetricMetadata
	err := ctx.RegisterResource("datadog:index/metricMetadata:MetricMetadata", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricMetadata gets an existing MetricMetadata resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricMetadata(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricMetadataState, opts ...pulumi.ResourceOption) (*MetricMetadata, error) {
	var resource MetricMetadata
	err := ctx.ReadResource("datadog:index/metricMetadata:MetricMetadata", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricMetadata resources.
type metricMetadataState struct {
	// A description of the metric.
	Description *string `pulumi:"description"`
	// The name of the metric.
	Metric *string `pulumi:"metric"`
	// 'Per' unit of the metric such as 'second' in 'bytes per second'.
	PerUnit *string `pulumi:"perUnit"`
	// A short name of the metric.
	ShortName *string `pulumi:"shortName"`
	// If applicable, stasd flush interval in seconds for the metric.
	StatsdInterval *int    `pulumi:"statsdInterval"`
	Type           *string `pulumi:"type"`
	// Primary unit of the metric such as 'byte' or 'operation'.
	Unit *string `pulumi:"unit"`
}

type MetricMetadataState struct {
	// A description of the metric.
	Description pulumi.StringPtrInput
	// The name of the metric.
	Metric pulumi.StringPtrInput
	// 'Per' unit of the metric such as 'second' in 'bytes per second'.
	PerUnit pulumi.StringPtrInput
	// A short name of the metric.
	ShortName pulumi.StringPtrInput
	// If applicable, stasd flush interval in seconds for the metric.
	StatsdInterval pulumi.IntPtrInput
	Type           pulumi.StringPtrInput
	// Primary unit of the metric such as 'byte' or 'operation'.
	Unit pulumi.StringPtrInput
}

func (MetricMetadataState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricMetadataState)(nil)).Elem()
}

type metricMetadataArgs struct {
	// A description of the metric.
	Description *string `pulumi:"description"`
	// The name of the metric.
	Metric string `pulumi:"metric"`
	// 'Per' unit of the metric such as 'second' in 'bytes per second'.
	PerUnit *string `pulumi:"perUnit"`
	// A short name of the metric.
	ShortName *string `pulumi:"shortName"`
	// If applicable, stasd flush interval in seconds for the metric.
	StatsdInterval *int    `pulumi:"statsdInterval"`
	Type           *string `pulumi:"type"`
	// Primary unit of the metric such as 'byte' or 'operation'.
	Unit *string `pulumi:"unit"`
}

// The set of arguments for constructing a MetricMetadata resource.
type MetricMetadataArgs struct {
	// A description of the metric.
	Description pulumi.StringPtrInput
	// The name of the metric.
	Metric pulumi.StringInput
	// 'Per' unit of the metric such as 'second' in 'bytes per second'.
	PerUnit pulumi.StringPtrInput
	// A short name of the metric.
	ShortName pulumi.StringPtrInput
	// If applicable, stasd flush interval in seconds for the metric.
	StatsdInterval pulumi.IntPtrInput
	Type           pulumi.StringPtrInput
	// Primary unit of the metric such as 'byte' or 'operation'.
	Unit pulumi.StringPtrInput
}

func (MetricMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricMetadataArgs)(nil)).Elem()
}
