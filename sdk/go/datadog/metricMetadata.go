// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Datadog metricMetadata resource. This can be used to manage a metric's metadata.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := datadog.NewMetricMetadata(ctx, "requestTime", &datadog.MetricMetadataArgs{
// 			Description: pulumi.String("99th percentile request time in millseconds"),
// 			Metric:      pulumi.String("request.time"),
// 			ShortName:   pulumi.String("Request time"),
// 			Type:        pulumi.String("gauge"),
// 			Unit:        pulumi.String("millisecond"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type MetricMetadata struct {
	pulumi.CustomResourceState

	Description    pulumi.StringPtrOutput `pulumi:"description"`
	Metric         pulumi.StringOutput    `pulumi:"metric"`
	PerUnit        pulumi.StringPtrOutput `pulumi:"perUnit"`
	ShortName      pulumi.StringPtrOutput `pulumi:"shortName"`
	StatsdInterval pulumi.IntPtrOutput    `pulumi:"statsdInterval"`
	Type           pulumi.StringPtrOutput `pulumi:"type"`
	Unit           pulumi.StringPtrOutput `pulumi:"unit"`
}

// NewMetricMetadata registers a new resource with the given unique name, arguments, and options.
func NewMetricMetadata(ctx *pulumi.Context,
	name string, args *MetricMetadataArgs, opts ...pulumi.ResourceOption) (*MetricMetadata, error) {
	if args == nil || args.Metric == nil {
		return nil, errors.New("missing required argument 'Metric'")
	}
	if args == nil {
		args = &MetricMetadataArgs{}
	}
	var resource MetricMetadata
	err := ctx.RegisterResource("datadog:index/metricMetadata:MetricMetadata", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricMetadata gets an existing MetricMetadata resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricMetadata(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricMetadataState, opts ...pulumi.ResourceOption) (*MetricMetadata, error) {
	var resource MetricMetadata
	err := ctx.ReadResource("datadog:index/metricMetadata:MetricMetadata", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricMetadata resources.
type metricMetadataState struct {
	Description    *string `pulumi:"description"`
	Metric         *string `pulumi:"metric"`
	PerUnit        *string `pulumi:"perUnit"`
	ShortName      *string `pulumi:"shortName"`
	StatsdInterval *int    `pulumi:"statsdInterval"`
	Type           *string `pulumi:"type"`
	Unit           *string `pulumi:"unit"`
}

type MetricMetadataState struct {
	Description    pulumi.StringPtrInput
	Metric         pulumi.StringPtrInput
	PerUnit        pulumi.StringPtrInput
	ShortName      pulumi.StringPtrInput
	StatsdInterval pulumi.IntPtrInput
	Type           pulumi.StringPtrInput
	Unit           pulumi.StringPtrInput
}

func (MetricMetadataState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricMetadataState)(nil)).Elem()
}

type metricMetadataArgs struct {
	Description    *string `pulumi:"description"`
	Metric         string  `pulumi:"metric"`
	PerUnit        *string `pulumi:"perUnit"`
	ShortName      *string `pulumi:"shortName"`
	StatsdInterval *int    `pulumi:"statsdInterval"`
	Type           *string `pulumi:"type"`
	Unit           *string `pulumi:"unit"`
}

// The set of arguments for constructing a MetricMetadata resource.
type MetricMetadataArgs struct {
	Description    pulumi.StringPtrInput
	Metric         pulumi.StringInput
	PerUnit        pulumi.StringPtrInput
	ShortName      pulumi.StringPtrInput
	StatsdInterval pulumi.IntPtrInput
	Type           pulumi.StringPtrInput
	Unit           pulumi.StringPtrInput
}

func (MetricMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricMetadataArgs)(nil)).Elem()
}

type MetricMetadataInput interface {
	pulumi.Input

	ToMetricMetadataOutput() MetricMetadataOutput
	ToMetricMetadataOutputWithContext(ctx context.Context) MetricMetadataOutput
}

func (MetricMetadata) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetadata)(nil)).Elem()
}

func (i MetricMetadata) ToMetricMetadataOutput() MetricMetadataOutput {
	return i.ToMetricMetadataOutputWithContext(context.Background())
}

func (i MetricMetadata) ToMetricMetadataOutputWithContext(ctx context.Context) MetricMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetadataOutput)
}

type MetricMetadataOutput struct {
	*pulumi.OutputState
}

func (MetricMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricMetadataOutput)(nil)).Elem()
}

func (o MetricMetadataOutput) ToMetricMetadataOutput() MetricMetadataOutput {
	return o
}

func (o MetricMetadataOutput) ToMetricMetadataOutputWithContext(ctx context.Context) MetricMetadataOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MetricMetadataOutput{})
}
