// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Datadog metric_metadata resource. This can be used to manage a metric's metadata.
type MetricMetadata struct {
	s *pulumi.ResourceState
}

// NewMetricMetadata registers a new resource with the given unique name, arguments, and options.
func NewMetricMetadata(ctx *pulumi.Context,
	name string, args *MetricMetadataArgs, opts ...pulumi.ResourceOpt) (*MetricMetadata, error) {
	if args == nil || args.Metric == nil {
		return nil, errors.New("missing required argument 'Metric'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["metric"] = nil
		inputs["perUnit"] = nil
		inputs["shortName"] = nil
		inputs["statsdInterval"] = nil
		inputs["type"] = nil
		inputs["unit"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["metric"] = args.Metric
		inputs["perUnit"] = args.PerUnit
		inputs["shortName"] = args.ShortName
		inputs["statsdInterval"] = args.StatsdInterval
		inputs["type"] = args.Type
		inputs["unit"] = args.Unit
	}
	s, err := ctx.RegisterResource("index:index/metricMetadata:MetricMetadata", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MetricMetadata{s: s}, nil
}

// GetMetricMetadata gets an existing MetricMetadata resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricMetadata(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MetricMetadataState, opts ...pulumi.ResourceOpt) (*MetricMetadata, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["metric"] = state.Metric
		inputs["perUnit"] = state.PerUnit
		inputs["shortName"] = state.ShortName
		inputs["statsdInterval"] = state.StatsdInterval
		inputs["type"] = state.Type
		inputs["unit"] = state.Unit
	}
	s, err := ctx.ReadResource("index:index/metricMetadata:MetricMetadata", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MetricMetadata{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *MetricMetadata) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *MetricMetadata) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A description of the metric.
func (r *MetricMetadata) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The name of the metric.
func (r *MetricMetadata) Metric() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["metric"])
}

// 'Per' unit of the metric such as 'second' in 'bytes per second'.
func (r *MetricMetadata) PerUnit() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["perUnit"])
}

// A short name of the metric.
func (r *MetricMetadata) ShortName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["shortName"])
}

// If applicable, stasd flush interval in seconds for the metric.
func (r *MetricMetadata) StatsdInterval() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["statsdInterval"])
}

func (r *MetricMetadata) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Primary unit of the metric such as 'byte' or 'operation'.
func (r *MetricMetadata) Unit() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["unit"])
}

// Input properties used for looking up and filtering MetricMetadata resources.
type MetricMetadataState struct {
	// A description of the metric.
	Description interface{}
	// The name of the metric.
	Metric interface{}
	// 'Per' unit of the metric such as 'second' in 'bytes per second'.
	PerUnit interface{}
	// A short name of the metric.
	ShortName interface{}
	// If applicable, stasd flush interval in seconds for the metric.
	StatsdInterval interface{}
	Type interface{}
	// Primary unit of the metric such as 'byte' or 'operation'.
	Unit interface{}
}

// The set of arguments for constructing a MetricMetadata resource.
type MetricMetadataArgs struct {
	// A description of the metric.
	Description interface{}
	// The name of the metric.
	Metric interface{}
	// 'Per' unit of the metric such as 'second' in 'bytes per second'.
	PerUnit interface{}
	// A short name of the metric.
	ShortName interface{}
	// If applicable, stasd flush interval in seconds for the metric.
	StatsdInterval interface{}
	Type interface{}
	// Primary unit of the metric such as 'byte' or 'operation'.
	Unit interface{}
}
