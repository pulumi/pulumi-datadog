// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog metricMetadata resource. This can be used to manage a metric's metadata.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.NewMetricMetadata(ctx, "requestTime", &datadog.MetricMetadataArgs{
//				Description: pulumi.String("99th percentile request time in milliseconds"),
//				Metric:      pulumi.String("request.time"),
//				ShortName:   pulumi.String("Request time"),
//				Type:        pulumi.String("gauge"),
//				Unit:        pulumi.String("millisecond"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import datadog:index/metricMetadata:MetricMetadata request_time request.time
//
// ```
type MetricMetadata struct {
	pulumi.CustomResourceState

	// A description of the metric.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the metric.
	Metric pulumi.StringOutput `pulumi:"metric"`
	// Per unit of the metric such as `second` in `bytes per second`.
	PerUnit pulumi.StringPtrOutput `pulumi:"perUnit"`
	// A short name of the metric.
	ShortName pulumi.StringPtrOutput `pulumi:"shortName"`
	// If applicable, statsd flush interval in seconds for the metric.
	StatsdInterval pulumi.IntPtrOutput `pulumi:"statsdInterval"`
	// Metric type such as `count`, `gauge`, or `rate`. Updating a metric of type `distribution` is not supported. If you would like to see the `distribution` type returned, contact [Datadog support](https://docs.datadoghq.com/help/).
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// Primary unit of the metric such as `byte` or `operation`.
	Unit pulumi.StringPtrOutput `pulumi:"unit"`
}

// NewMetricMetadata registers a new resource with the given unique name, arguments, and options.
func NewMetricMetadata(ctx *pulumi.Context,
	name string, args *MetricMetadataArgs, opts ...pulumi.ResourceOption) (*MetricMetadata, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetricMetadata
	err := ctx.RegisterResource("datadog:index/metricMetadata:MetricMetadata", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricMetadata gets an existing MetricMetadata resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricMetadata(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricMetadataState, opts ...pulumi.ResourceOption) (*MetricMetadata, error) {
	var resource MetricMetadata
	err := ctx.ReadResource("datadog:index/metricMetadata:MetricMetadata", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricMetadata resources.
type metricMetadataState struct {
	// A description of the metric.
	Description *string `pulumi:"description"`
	// The name of the metric.
	Metric *string `pulumi:"metric"`
	// Per unit of the metric such as `second` in `bytes per second`.
	PerUnit *string `pulumi:"perUnit"`
	// A short name of the metric.
	ShortName *string `pulumi:"shortName"`
	// If applicable, statsd flush interval in seconds for the metric.
	StatsdInterval *int `pulumi:"statsdInterval"`
	// Metric type such as `count`, `gauge`, or `rate`. Updating a metric of type `distribution` is not supported. If you would like to see the `distribution` type returned, contact [Datadog support](https://docs.datadoghq.com/help/).
	Type *string `pulumi:"type"`
	// Primary unit of the metric such as `byte` or `operation`.
	Unit *string `pulumi:"unit"`
}

type MetricMetadataState struct {
	// A description of the metric.
	Description pulumi.StringPtrInput
	// The name of the metric.
	Metric pulumi.StringPtrInput
	// Per unit of the metric such as `second` in `bytes per second`.
	PerUnit pulumi.StringPtrInput
	// A short name of the metric.
	ShortName pulumi.StringPtrInput
	// If applicable, statsd flush interval in seconds for the metric.
	StatsdInterval pulumi.IntPtrInput
	// Metric type such as `count`, `gauge`, or `rate`. Updating a metric of type `distribution` is not supported. If you would like to see the `distribution` type returned, contact [Datadog support](https://docs.datadoghq.com/help/).
	Type pulumi.StringPtrInput
	// Primary unit of the metric such as `byte` or `operation`.
	Unit pulumi.StringPtrInput
}

func (MetricMetadataState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricMetadataState)(nil)).Elem()
}

type metricMetadataArgs struct {
	// A description of the metric.
	Description *string `pulumi:"description"`
	// The name of the metric.
	Metric string `pulumi:"metric"`
	// Per unit of the metric such as `second` in `bytes per second`.
	PerUnit *string `pulumi:"perUnit"`
	// A short name of the metric.
	ShortName *string `pulumi:"shortName"`
	// If applicable, statsd flush interval in seconds for the metric.
	StatsdInterval *int `pulumi:"statsdInterval"`
	// Metric type such as `count`, `gauge`, or `rate`. Updating a metric of type `distribution` is not supported. If you would like to see the `distribution` type returned, contact [Datadog support](https://docs.datadoghq.com/help/).
	Type *string `pulumi:"type"`
	// Primary unit of the metric such as `byte` or `operation`.
	Unit *string `pulumi:"unit"`
}

// The set of arguments for constructing a MetricMetadata resource.
type MetricMetadataArgs struct {
	// A description of the metric.
	Description pulumi.StringPtrInput
	// The name of the metric.
	Metric pulumi.StringInput
	// Per unit of the metric such as `second` in `bytes per second`.
	PerUnit pulumi.StringPtrInput
	// A short name of the metric.
	ShortName pulumi.StringPtrInput
	// If applicable, statsd flush interval in seconds for the metric.
	StatsdInterval pulumi.IntPtrInput
	// Metric type such as `count`, `gauge`, or `rate`. Updating a metric of type `distribution` is not supported. If you would like to see the `distribution` type returned, contact [Datadog support](https://docs.datadoghq.com/help/).
	Type pulumi.StringPtrInput
	// Primary unit of the metric such as `byte` or `operation`.
	Unit pulumi.StringPtrInput
}

func (MetricMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricMetadataArgs)(nil)).Elem()
}

type MetricMetadataInput interface {
	pulumi.Input

	ToMetricMetadataOutput() MetricMetadataOutput
	ToMetricMetadataOutputWithContext(ctx context.Context) MetricMetadataOutput
}

func (*MetricMetadata) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricMetadata)(nil)).Elem()
}

func (i *MetricMetadata) ToMetricMetadataOutput() MetricMetadataOutput {
	return i.ToMetricMetadataOutputWithContext(context.Background())
}

func (i *MetricMetadata) ToMetricMetadataOutputWithContext(ctx context.Context) MetricMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetadataOutput)
}

// MetricMetadataArrayInput is an input type that accepts MetricMetadataArray and MetricMetadataArrayOutput values.
// You can construct a concrete instance of `MetricMetadataArrayInput` via:
//
//	MetricMetadataArray{ MetricMetadataArgs{...} }
type MetricMetadataArrayInput interface {
	pulumi.Input

	ToMetricMetadataArrayOutput() MetricMetadataArrayOutput
	ToMetricMetadataArrayOutputWithContext(context.Context) MetricMetadataArrayOutput
}

type MetricMetadataArray []MetricMetadataInput

func (MetricMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricMetadata)(nil)).Elem()
}

func (i MetricMetadataArray) ToMetricMetadataArrayOutput() MetricMetadataArrayOutput {
	return i.ToMetricMetadataArrayOutputWithContext(context.Background())
}

func (i MetricMetadataArray) ToMetricMetadataArrayOutputWithContext(ctx context.Context) MetricMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetadataArrayOutput)
}

// MetricMetadataMapInput is an input type that accepts MetricMetadataMap and MetricMetadataMapOutput values.
// You can construct a concrete instance of `MetricMetadataMapInput` via:
//
//	MetricMetadataMap{ "key": MetricMetadataArgs{...} }
type MetricMetadataMapInput interface {
	pulumi.Input

	ToMetricMetadataMapOutput() MetricMetadataMapOutput
	ToMetricMetadataMapOutputWithContext(context.Context) MetricMetadataMapOutput
}

type MetricMetadataMap map[string]MetricMetadataInput

func (MetricMetadataMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricMetadata)(nil)).Elem()
}

func (i MetricMetadataMap) ToMetricMetadataMapOutput() MetricMetadataMapOutput {
	return i.ToMetricMetadataMapOutputWithContext(context.Background())
}

func (i MetricMetadataMap) ToMetricMetadataMapOutputWithContext(ctx context.Context) MetricMetadataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetadataMapOutput)
}

type MetricMetadataOutput struct{ *pulumi.OutputState }

func (MetricMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricMetadata)(nil)).Elem()
}

func (o MetricMetadataOutput) ToMetricMetadataOutput() MetricMetadataOutput {
	return o
}

func (o MetricMetadataOutput) ToMetricMetadataOutputWithContext(ctx context.Context) MetricMetadataOutput {
	return o
}

// A description of the metric.
func (o MetricMetadataOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricMetadata) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the metric.
func (o MetricMetadataOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricMetadata) pulumi.StringOutput { return v.Metric }).(pulumi.StringOutput)
}

// Per unit of the metric such as `second` in `bytes per second`.
func (o MetricMetadataOutput) PerUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricMetadata) pulumi.StringPtrOutput { return v.PerUnit }).(pulumi.StringPtrOutput)
}

// A short name of the metric.
func (o MetricMetadataOutput) ShortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricMetadata) pulumi.StringPtrOutput { return v.ShortName }).(pulumi.StringPtrOutput)
}

// If applicable, statsd flush interval in seconds for the metric.
func (o MetricMetadataOutput) StatsdInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetricMetadata) pulumi.IntPtrOutput { return v.StatsdInterval }).(pulumi.IntPtrOutput)
}

// Metric type such as `count`, `gauge`, or `rate`. Updating a metric of type `distribution` is not supported. If you would like to see the `distribution` type returned, contact [Datadog support](https://docs.datadoghq.com/help/).
func (o MetricMetadataOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricMetadata) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// Primary unit of the metric such as `byte` or `operation`.
func (o MetricMetadataOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricMetadata) pulumi.StringPtrOutput { return v.Unit }).(pulumi.StringPtrOutput)
}

type MetricMetadataArrayOutput struct{ *pulumi.OutputState }

func (MetricMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricMetadata)(nil)).Elem()
}

func (o MetricMetadataArrayOutput) ToMetricMetadataArrayOutput() MetricMetadataArrayOutput {
	return o
}

func (o MetricMetadataArrayOutput) ToMetricMetadataArrayOutputWithContext(ctx context.Context) MetricMetadataArrayOutput {
	return o
}

func (o MetricMetadataArrayOutput) Index(i pulumi.IntInput) MetricMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetricMetadata {
		return vs[0].([]*MetricMetadata)[vs[1].(int)]
	}).(MetricMetadataOutput)
}

type MetricMetadataMapOutput struct{ *pulumi.OutputState }

func (MetricMetadataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricMetadata)(nil)).Elem()
}

func (o MetricMetadataMapOutput) ToMetricMetadataMapOutput() MetricMetadataMapOutput {
	return o
}

func (o MetricMetadataMapOutput) ToMetricMetadataMapOutputWithContext(ctx context.Context) MetricMetadataMapOutput {
	return o
}

func (o MetricMetadataMapOutput) MapIndex(k pulumi.StringInput) MetricMetadataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetricMetadata {
		return vs[0].(map[string]*MetricMetadata)[vs[1].(string)]
	}).(MetricMetadataOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricMetadataInput)(nil)).Elem(), &MetricMetadata{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricMetadataArrayInput)(nil)).Elem(), MetricMetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricMetadataMapInput)(nil)).Elem(), MetricMetadataMap{})
	pulumi.RegisterOutputType(MetricMetadataOutput{})
	pulumi.RegisterOutputType(MetricMetadataArrayOutput{})
	pulumi.RegisterOutputType(MetricMetadataMapOutput{})
}
