// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Datadog Sensitive Data Scanner Group Order API resource. This can be used to manage the order of Datadog Sensitive Data Scanner Groups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.NewSensitiveDataScannerGroupOrder(ctx, "mygrouporder", &datadog.SensitiveDataScannerGroupOrderArgs{
//				GroupIds: pulumi.StringArray{
//					pulumi.String("group-id-1"),
//					pulumi.String("group-id-2"),
//					pulumi.String("group-id-3"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import datadog:index/sensitiveDataScannerGroupOrder:SensitiveDataScannerGroupOrder mygrouporder order
//
// ```
type SensitiveDataScannerGroupOrder struct {
	pulumi.CustomResourceState

	// The list of Sensitive Data Scanner group IDs, in order. Logs are tested against the query filter of each index one by one following the order of the list.
	GroupIds pulumi.StringArrayOutput `pulumi:"groupIds"`
}

// NewSensitiveDataScannerGroupOrder registers a new resource with the given unique name, arguments, and options.
func NewSensitiveDataScannerGroupOrder(ctx *pulumi.Context,
	name string, args *SensitiveDataScannerGroupOrderArgs, opts ...pulumi.ResourceOption) (*SensitiveDataScannerGroupOrder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupIds == nil {
		return nil, errors.New("invalid value for required argument 'GroupIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SensitiveDataScannerGroupOrder
	err := ctx.RegisterResource("datadog:index/sensitiveDataScannerGroupOrder:SensitiveDataScannerGroupOrder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSensitiveDataScannerGroupOrder gets an existing SensitiveDataScannerGroupOrder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSensitiveDataScannerGroupOrder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SensitiveDataScannerGroupOrderState, opts ...pulumi.ResourceOption) (*SensitiveDataScannerGroupOrder, error) {
	var resource SensitiveDataScannerGroupOrder
	err := ctx.ReadResource("datadog:index/sensitiveDataScannerGroupOrder:SensitiveDataScannerGroupOrder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SensitiveDataScannerGroupOrder resources.
type sensitiveDataScannerGroupOrderState struct {
	// The list of Sensitive Data Scanner group IDs, in order. Logs are tested against the query filter of each index one by one following the order of the list.
	GroupIds []string `pulumi:"groupIds"`
}

type SensitiveDataScannerGroupOrderState struct {
	// The list of Sensitive Data Scanner group IDs, in order. Logs are tested against the query filter of each index one by one following the order of the list.
	GroupIds pulumi.StringArrayInput
}

func (SensitiveDataScannerGroupOrderState) ElementType() reflect.Type {
	return reflect.TypeOf((*sensitiveDataScannerGroupOrderState)(nil)).Elem()
}

type sensitiveDataScannerGroupOrderArgs struct {
	// The list of Sensitive Data Scanner group IDs, in order. Logs are tested against the query filter of each index one by one following the order of the list.
	GroupIds []string `pulumi:"groupIds"`
}

// The set of arguments for constructing a SensitiveDataScannerGroupOrder resource.
type SensitiveDataScannerGroupOrderArgs struct {
	// The list of Sensitive Data Scanner group IDs, in order. Logs are tested against the query filter of each index one by one following the order of the list.
	GroupIds pulumi.StringArrayInput
}

func (SensitiveDataScannerGroupOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sensitiveDataScannerGroupOrderArgs)(nil)).Elem()
}

type SensitiveDataScannerGroupOrderInput interface {
	pulumi.Input

	ToSensitiveDataScannerGroupOrderOutput() SensitiveDataScannerGroupOrderOutput
	ToSensitiveDataScannerGroupOrderOutputWithContext(ctx context.Context) SensitiveDataScannerGroupOrderOutput
}

func (*SensitiveDataScannerGroupOrder) ElementType() reflect.Type {
	return reflect.TypeOf((**SensitiveDataScannerGroupOrder)(nil)).Elem()
}

func (i *SensitiveDataScannerGroupOrder) ToSensitiveDataScannerGroupOrderOutput() SensitiveDataScannerGroupOrderOutput {
	return i.ToSensitiveDataScannerGroupOrderOutputWithContext(context.Background())
}

func (i *SensitiveDataScannerGroupOrder) ToSensitiveDataScannerGroupOrderOutputWithContext(ctx context.Context) SensitiveDataScannerGroupOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensitiveDataScannerGroupOrderOutput)
}

func (i *SensitiveDataScannerGroupOrder) ToOutput(ctx context.Context) pulumix.Output[*SensitiveDataScannerGroupOrder] {
	return pulumix.Output[*SensitiveDataScannerGroupOrder]{
		OutputState: i.ToSensitiveDataScannerGroupOrderOutputWithContext(ctx).OutputState,
	}
}

// SensitiveDataScannerGroupOrderArrayInput is an input type that accepts SensitiveDataScannerGroupOrderArray and SensitiveDataScannerGroupOrderArrayOutput values.
// You can construct a concrete instance of `SensitiveDataScannerGroupOrderArrayInput` via:
//
//	SensitiveDataScannerGroupOrderArray{ SensitiveDataScannerGroupOrderArgs{...} }
type SensitiveDataScannerGroupOrderArrayInput interface {
	pulumi.Input

	ToSensitiveDataScannerGroupOrderArrayOutput() SensitiveDataScannerGroupOrderArrayOutput
	ToSensitiveDataScannerGroupOrderArrayOutputWithContext(context.Context) SensitiveDataScannerGroupOrderArrayOutput
}

type SensitiveDataScannerGroupOrderArray []SensitiveDataScannerGroupOrderInput

func (SensitiveDataScannerGroupOrderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensitiveDataScannerGroupOrder)(nil)).Elem()
}

func (i SensitiveDataScannerGroupOrderArray) ToSensitiveDataScannerGroupOrderArrayOutput() SensitiveDataScannerGroupOrderArrayOutput {
	return i.ToSensitiveDataScannerGroupOrderArrayOutputWithContext(context.Background())
}

func (i SensitiveDataScannerGroupOrderArray) ToSensitiveDataScannerGroupOrderArrayOutputWithContext(ctx context.Context) SensitiveDataScannerGroupOrderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensitiveDataScannerGroupOrderArrayOutput)
}

func (i SensitiveDataScannerGroupOrderArray) ToOutput(ctx context.Context) pulumix.Output[[]*SensitiveDataScannerGroupOrder] {
	return pulumix.Output[[]*SensitiveDataScannerGroupOrder]{
		OutputState: i.ToSensitiveDataScannerGroupOrderArrayOutputWithContext(ctx).OutputState,
	}
}

// SensitiveDataScannerGroupOrderMapInput is an input type that accepts SensitiveDataScannerGroupOrderMap and SensitiveDataScannerGroupOrderMapOutput values.
// You can construct a concrete instance of `SensitiveDataScannerGroupOrderMapInput` via:
//
//	SensitiveDataScannerGroupOrderMap{ "key": SensitiveDataScannerGroupOrderArgs{...} }
type SensitiveDataScannerGroupOrderMapInput interface {
	pulumi.Input

	ToSensitiveDataScannerGroupOrderMapOutput() SensitiveDataScannerGroupOrderMapOutput
	ToSensitiveDataScannerGroupOrderMapOutputWithContext(context.Context) SensitiveDataScannerGroupOrderMapOutput
}

type SensitiveDataScannerGroupOrderMap map[string]SensitiveDataScannerGroupOrderInput

func (SensitiveDataScannerGroupOrderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensitiveDataScannerGroupOrder)(nil)).Elem()
}

func (i SensitiveDataScannerGroupOrderMap) ToSensitiveDataScannerGroupOrderMapOutput() SensitiveDataScannerGroupOrderMapOutput {
	return i.ToSensitiveDataScannerGroupOrderMapOutputWithContext(context.Background())
}

func (i SensitiveDataScannerGroupOrderMap) ToSensitiveDataScannerGroupOrderMapOutputWithContext(ctx context.Context) SensitiveDataScannerGroupOrderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensitiveDataScannerGroupOrderMapOutput)
}

func (i SensitiveDataScannerGroupOrderMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SensitiveDataScannerGroupOrder] {
	return pulumix.Output[map[string]*SensitiveDataScannerGroupOrder]{
		OutputState: i.ToSensitiveDataScannerGroupOrderMapOutputWithContext(ctx).OutputState,
	}
}

type SensitiveDataScannerGroupOrderOutput struct{ *pulumi.OutputState }

func (SensitiveDataScannerGroupOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SensitiveDataScannerGroupOrder)(nil)).Elem()
}

func (o SensitiveDataScannerGroupOrderOutput) ToSensitiveDataScannerGroupOrderOutput() SensitiveDataScannerGroupOrderOutput {
	return o
}

func (o SensitiveDataScannerGroupOrderOutput) ToSensitiveDataScannerGroupOrderOutputWithContext(ctx context.Context) SensitiveDataScannerGroupOrderOutput {
	return o
}

func (o SensitiveDataScannerGroupOrderOutput) ToOutput(ctx context.Context) pulumix.Output[*SensitiveDataScannerGroupOrder] {
	return pulumix.Output[*SensitiveDataScannerGroupOrder]{
		OutputState: o.OutputState,
	}
}

// The list of Sensitive Data Scanner group IDs, in order. Logs are tested against the query filter of each index one by one following the order of the list.
func (o SensitiveDataScannerGroupOrderOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SensitiveDataScannerGroupOrder) pulumi.StringArrayOutput { return v.GroupIds }).(pulumi.StringArrayOutput)
}

type SensitiveDataScannerGroupOrderArrayOutput struct{ *pulumi.OutputState }

func (SensitiveDataScannerGroupOrderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensitiveDataScannerGroupOrder)(nil)).Elem()
}

func (o SensitiveDataScannerGroupOrderArrayOutput) ToSensitiveDataScannerGroupOrderArrayOutput() SensitiveDataScannerGroupOrderArrayOutput {
	return o
}

func (o SensitiveDataScannerGroupOrderArrayOutput) ToSensitiveDataScannerGroupOrderArrayOutputWithContext(ctx context.Context) SensitiveDataScannerGroupOrderArrayOutput {
	return o
}

func (o SensitiveDataScannerGroupOrderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SensitiveDataScannerGroupOrder] {
	return pulumix.Output[[]*SensitiveDataScannerGroupOrder]{
		OutputState: o.OutputState,
	}
}

func (o SensitiveDataScannerGroupOrderArrayOutput) Index(i pulumi.IntInput) SensitiveDataScannerGroupOrderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SensitiveDataScannerGroupOrder {
		return vs[0].([]*SensitiveDataScannerGroupOrder)[vs[1].(int)]
	}).(SensitiveDataScannerGroupOrderOutput)
}

type SensitiveDataScannerGroupOrderMapOutput struct{ *pulumi.OutputState }

func (SensitiveDataScannerGroupOrderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensitiveDataScannerGroupOrder)(nil)).Elem()
}

func (o SensitiveDataScannerGroupOrderMapOutput) ToSensitiveDataScannerGroupOrderMapOutput() SensitiveDataScannerGroupOrderMapOutput {
	return o
}

func (o SensitiveDataScannerGroupOrderMapOutput) ToSensitiveDataScannerGroupOrderMapOutputWithContext(ctx context.Context) SensitiveDataScannerGroupOrderMapOutput {
	return o
}

func (o SensitiveDataScannerGroupOrderMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SensitiveDataScannerGroupOrder] {
	return pulumix.Output[map[string]*SensitiveDataScannerGroupOrder]{
		OutputState: o.OutputState,
	}
}

func (o SensitiveDataScannerGroupOrderMapOutput) MapIndex(k pulumi.StringInput) SensitiveDataScannerGroupOrderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SensitiveDataScannerGroupOrder {
		return vs[0].(map[string]*SensitiveDataScannerGroupOrder)[vs[1].(string)]
	}).(SensitiveDataScannerGroupOrderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SensitiveDataScannerGroupOrderInput)(nil)).Elem(), &SensitiveDataScannerGroupOrder{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensitiveDataScannerGroupOrderArrayInput)(nil)).Elem(), SensitiveDataScannerGroupOrderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensitiveDataScannerGroupOrderMapInput)(nil)).Elem(), SensitiveDataScannerGroupOrderMap{})
	pulumi.RegisterOutputType(SensitiveDataScannerGroupOrderOutput{})
	pulumi.RegisterOutputType(SensitiveDataScannerGroupOrderArrayOutput{})
	pulumi.RegisterOutputType(SensitiveDataScannerGroupOrderMapOutput{})
}
