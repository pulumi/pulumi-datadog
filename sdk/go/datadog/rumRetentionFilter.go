// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog RumRetentionFilter resource. This can be used to create and manage Datadog rum_retention_filter.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create new rum_retention_filter resource
//			_, err := datadog.NewRumRetentionFilter(ctx, "testing_rum_retention_filter", &datadog.RumRetentionFilterArgs{
//				ApplicationId: pulumi.String("<APPLICATION_ID>"),
//				Name:          pulumi.String("testing.rum.retention_filter"),
//				EventType:     pulumi.String("session"),
//				SampleRate:    pulumi.Int(41),
//				Query:         pulumi.String("@session.has_replay:true"),
//				Enabled:       pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import datadog:index/rumRetentionFilter:RumRetentionFilter testing_rum_retention_filter "<application_id>:<retention_filter_id>"
// ```
type RumRetentionFilter struct {
	pulumi.CustomResourceState

	// RUM application ID.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Whether the retention filter is to be enabled. Defaults to `true`.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The type of RUM events to filter on.
	EventType pulumi.StringOutput `pulumi:"eventType"`
	// The name of a RUM retention filter.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Query string for a RUM retention filter. Defaults to `""`.
	Query pulumi.StringOutput `pulumi:"query"`
	// The sample rate for a RUM retention filter, between 0 and 100.
	SampleRate pulumi.IntOutput `pulumi:"sampleRate"`
}

// NewRumRetentionFilter registers a new resource with the given unique name, arguments, and options.
func NewRumRetentionFilter(ctx *pulumi.Context,
	name string, args *RumRetentionFilterArgs, opts ...pulumi.ResourceOption) (*RumRetentionFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.EventType == nil {
		return nil, errors.New("invalid value for required argument 'EventType'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.SampleRate == nil {
		return nil, errors.New("invalid value for required argument 'SampleRate'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RumRetentionFilter
	err := ctx.RegisterResource("datadog:index/rumRetentionFilter:RumRetentionFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRumRetentionFilter gets an existing RumRetentionFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRumRetentionFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RumRetentionFilterState, opts ...pulumi.ResourceOption) (*RumRetentionFilter, error) {
	var resource RumRetentionFilter
	err := ctx.ReadResource("datadog:index/rumRetentionFilter:RumRetentionFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RumRetentionFilter resources.
type rumRetentionFilterState struct {
	// RUM application ID.
	ApplicationId *string `pulumi:"applicationId"`
	// Whether the retention filter is to be enabled. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The type of RUM events to filter on.
	EventType *string `pulumi:"eventType"`
	// The name of a RUM retention filter.
	Name *string `pulumi:"name"`
	// The Query string for a RUM retention filter. Defaults to `""`.
	Query *string `pulumi:"query"`
	// The sample rate for a RUM retention filter, between 0 and 100.
	SampleRate *int `pulumi:"sampleRate"`
}

type RumRetentionFilterState struct {
	// RUM application ID.
	ApplicationId pulumi.StringPtrInput
	// Whether the retention filter is to be enabled. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// The type of RUM events to filter on.
	EventType pulumi.StringPtrInput
	// The name of a RUM retention filter.
	Name pulumi.StringPtrInput
	// The Query string for a RUM retention filter. Defaults to `""`.
	Query pulumi.StringPtrInput
	// The sample rate for a RUM retention filter, between 0 and 100.
	SampleRate pulumi.IntPtrInput
}

func (RumRetentionFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*rumRetentionFilterState)(nil)).Elem()
}

type rumRetentionFilterArgs struct {
	// RUM application ID.
	ApplicationId string `pulumi:"applicationId"`
	// Whether the retention filter is to be enabled. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The type of RUM events to filter on.
	EventType string `pulumi:"eventType"`
	// The name of a RUM retention filter.
	Name string `pulumi:"name"`
	// The Query string for a RUM retention filter. Defaults to `""`.
	Query *string `pulumi:"query"`
	// The sample rate for a RUM retention filter, between 0 and 100.
	SampleRate int `pulumi:"sampleRate"`
}

// The set of arguments for constructing a RumRetentionFilter resource.
type RumRetentionFilterArgs struct {
	// RUM application ID.
	ApplicationId pulumi.StringInput
	// Whether the retention filter is to be enabled. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// The type of RUM events to filter on.
	EventType pulumi.StringInput
	// The name of a RUM retention filter.
	Name pulumi.StringInput
	// The Query string for a RUM retention filter. Defaults to `""`.
	Query pulumi.StringPtrInput
	// The sample rate for a RUM retention filter, between 0 and 100.
	SampleRate pulumi.IntInput
}

func (RumRetentionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rumRetentionFilterArgs)(nil)).Elem()
}

type RumRetentionFilterInput interface {
	pulumi.Input

	ToRumRetentionFilterOutput() RumRetentionFilterOutput
	ToRumRetentionFilterOutputWithContext(ctx context.Context) RumRetentionFilterOutput
}

func (*RumRetentionFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**RumRetentionFilter)(nil)).Elem()
}

func (i *RumRetentionFilter) ToRumRetentionFilterOutput() RumRetentionFilterOutput {
	return i.ToRumRetentionFilterOutputWithContext(context.Background())
}

func (i *RumRetentionFilter) ToRumRetentionFilterOutputWithContext(ctx context.Context) RumRetentionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumRetentionFilterOutput)
}

// RumRetentionFilterArrayInput is an input type that accepts RumRetentionFilterArray and RumRetentionFilterArrayOutput values.
// You can construct a concrete instance of `RumRetentionFilterArrayInput` via:
//
//	RumRetentionFilterArray{ RumRetentionFilterArgs{...} }
type RumRetentionFilterArrayInput interface {
	pulumi.Input

	ToRumRetentionFilterArrayOutput() RumRetentionFilterArrayOutput
	ToRumRetentionFilterArrayOutputWithContext(context.Context) RumRetentionFilterArrayOutput
}

type RumRetentionFilterArray []RumRetentionFilterInput

func (RumRetentionFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RumRetentionFilter)(nil)).Elem()
}

func (i RumRetentionFilterArray) ToRumRetentionFilterArrayOutput() RumRetentionFilterArrayOutput {
	return i.ToRumRetentionFilterArrayOutputWithContext(context.Background())
}

func (i RumRetentionFilterArray) ToRumRetentionFilterArrayOutputWithContext(ctx context.Context) RumRetentionFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumRetentionFilterArrayOutput)
}

// RumRetentionFilterMapInput is an input type that accepts RumRetentionFilterMap and RumRetentionFilterMapOutput values.
// You can construct a concrete instance of `RumRetentionFilterMapInput` via:
//
//	RumRetentionFilterMap{ "key": RumRetentionFilterArgs{...} }
type RumRetentionFilterMapInput interface {
	pulumi.Input

	ToRumRetentionFilterMapOutput() RumRetentionFilterMapOutput
	ToRumRetentionFilterMapOutputWithContext(context.Context) RumRetentionFilterMapOutput
}

type RumRetentionFilterMap map[string]RumRetentionFilterInput

func (RumRetentionFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RumRetentionFilter)(nil)).Elem()
}

func (i RumRetentionFilterMap) ToRumRetentionFilterMapOutput() RumRetentionFilterMapOutput {
	return i.ToRumRetentionFilterMapOutputWithContext(context.Background())
}

func (i RumRetentionFilterMap) ToRumRetentionFilterMapOutputWithContext(ctx context.Context) RumRetentionFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumRetentionFilterMapOutput)
}

type RumRetentionFilterOutput struct{ *pulumi.OutputState }

func (RumRetentionFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RumRetentionFilter)(nil)).Elem()
}

func (o RumRetentionFilterOutput) ToRumRetentionFilterOutput() RumRetentionFilterOutput {
	return o
}

func (o RumRetentionFilterOutput) ToRumRetentionFilterOutputWithContext(ctx context.Context) RumRetentionFilterOutput {
	return o
}

// RUM application ID.
func (o RumRetentionFilterOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *RumRetentionFilter) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Whether the retention filter is to be enabled. Defaults to `true`.
func (o RumRetentionFilterOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RumRetentionFilter) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The type of RUM events to filter on.
func (o RumRetentionFilterOutput) EventType() pulumi.StringOutput {
	return o.ApplyT(func(v *RumRetentionFilter) pulumi.StringOutput { return v.EventType }).(pulumi.StringOutput)
}

// The name of a RUM retention filter.
func (o RumRetentionFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RumRetentionFilter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Query string for a RUM retention filter. Defaults to `""`.
func (o RumRetentionFilterOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v *RumRetentionFilter) pulumi.StringOutput { return v.Query }).(pulumi.StringOutput)
}

// The sample rate for a RUM retention filter, between 0 and 100.
func (o RumRetentionFilterOutput) SampleRate() pulumi.IntOutput {
	return o.ApplyT(func(v *RumRetentionFilter) pulumi.IntOutput { return v.SampleRate }).(pulumi.IntOutput)
}

type RumRetentionFilterArrayOutput struct{ *pulumi.OutputState }

func (RumRetentionFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RumRetentionFilter)(nil)).Elem()
}

func (o RumRetentionFilterArrayOutput) ToRumRetentionFilterArrayOutput() RumRetentionFilterArrayOutput {
	return o
}

func (o RumRetentionFilterArrayOutput) ToRumRetentionFilterArrayOutputWithContext(ctx context.Context) RumRetentionFilterArrayOutput {
	return o
}

func (o RumRetentionFilterArrayOutput) Index(i pulumi.IntInput) RumRetentionFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RumRetentionFilter {
		return vs[0].([]*RumRetentionFilter)[vs[1].(int)]
	}).(RumRetentionFilterOutput)
}

type RumRetentionFilterMapOutput struct{ *pulumi.OutputState }

func (RumRetentionFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RumRetentionFilter)(nil)).Elem()
}

func (o RumRetentionFilterMapOutput) ToRumRetentionFilterMapOutput() RumRetentionFilterMapOutput {
	return o
}

func (o RumRetentionFilterMapOutput) ToRumRetentionFilterMapOutputWithContext(ctx context.Context) RumRetentionFilterMapOutput {
	return o
}

func (o RumRetentionFilterMapOutput) MapIndex(k pulumi.StringInput) RumRetentionFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RumRetentionFilter {
		return vs[0].(map[string]*RumRetentionFilter)[vs[1].(string)]
	}).(RumRetentionFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RumRetentionFilterInput)(nil)).Elem(), &RumRetentionFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*RumRetentionFilterArrayInput)(nil)).Elem(), RumRetentionFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RumRetentionFilterMapInput)(nil)).Elem(), RumRetentionFilterMap{})
	pulumi.RegisterOutputType(RumRetentionFilterOutput{})
	pulumi.RegisterOutputType(RumRetentionFilterArrayOutput{})
	pulumi.RegisterOutputType(RumRetentionFilterMapOutput{})
}
