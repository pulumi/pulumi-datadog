// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Datadog Application Key resource. This can be used to create and manage Datadog Application Keys.
//
// ## Import
//
// ```sh
//
//	$ pulumi import datadog:index/applicationKey:ApplicationKey foo 11111111-2222-3333-4444-555555555555
//
// ```
type ApplicationKey struct {
	pulumi.CustomResourceState

	// The value of the Application Key.
	Key pulumi.StringOutput `pulumi:"key"`
	// Name for Application Key.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewApplicationKey registers a new resource with the given unique name, arguments, and options.
func NewApplicationKey(ctx *pulumi.Context,
	name string, args *ApplicationKeyArgs, opts ...pulumi.ResourceOption) (*ApplicationKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationKey
	err := ctx.RegisterResource("datadog:index/applicationKey:ApplicationKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationKey gets an existing ApplicationKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationKeyState, opts ...pulumi.ResourceOption) (*ApplicationKey, error) {
	var resource ApplicationKey
	err := ctx.ReadResource("datadog:index/applicationKey:ApplicationKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationKey resources.
type applicationKeyState struct {
	// The value of the Application Key.
	Key *string `pulumi:"key"`
	// Name for Application Key.
	Name *string `pulumi:"name"`
}

type ApplicationKeyState struct {
	// The value of the Application Key.
	Key pulumi.StringPtrInput
	// Name for Application Key.
	Name pulumi.StringPtrInput
}

func (ApplicationKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationKeyState)(nil)).Elem()
}

type applicationKeyArgs struct {
	// Name for Application Key.
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a ApplicationKey resource.
type ApplicationKeyArgs struct {
	// Name for Application Key.
	Name pulumi.StringInput
}

func (ApplicationKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationKeyArgs)(nil)).Elem()
}

type ApplicationKeyInput interface {
	pulumi.Input

	ToApplicationKeyOutput() ApplicationKeyOutput
	ToApplicationKeyOutputWithContext(ctx context.Context) ApplicationKeyOutput
}

func (*ApplicationKey) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationKey)(nil)).Elem()
}

func (i *ApplicationKey) ToApplicationKeyOutput() ApplicationKeyOutput {
	return i.ToApplicationKeyOutputWithContext(context.Background())
}

func (i *ApplicationKey) ToApplicationKeyOutputWithContext(ctx context.Context) ApplicationKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKeyOutput)
}

func (i *ApplicationKey) ToOutput(ctx context.Context) pulumix.Output[*ApplicationKey] {
	return pulumix.Output[*ApplicationKey]{
		OutputState: i.ToApplicationKeyOutputWithContext(ctx).OutputState,
	}
}

// ApplicationKeyArrayInput is an input type that accepts ApplicationKeyArray and ApplicationKeyArrayOutput values.
// You can construct a concrete instance of `ApplicationKeyArrayInput` via:
//
//	ApplicationKeyArray{ ApplicationKeyArgs{...} }
type ApplicationKeyArrayInput interface {
	pulumi.Input

	ToApplicationKeyArrayOutput() ApplicationKeyArrayOutput
	ToApplicationKeyArrayOutputWithContext(context.Context) ApplicationKeyArrayOutput
}

type ApplicationKeyArray []ApplicationKeyInput

func (ApplicationKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationKey)(nil)).Elem()
}

func (i ApplicationKeyArray) ToApplicationKeyArrayOutput() ApplicationKeyArrayOutput {
	return i.ToApplicationKeyArrayOutputWithContext(context.Background())
}

func (i ApplicationKeyArray) ToApplicationKeyArrayOutputWithContext(ctx context.Context) ApplicationKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKeyArrayOutput)
}

func (i ApplicationKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]*ApplicationKey] {
	return pulumix.Output[[]*ApplicationKey]{
		OutputState: i.ToApplicationKeyArrayOutputWithContext(ctx).OutputState,
	}
}

// ApplicationKeyMapInput is an input type that accepts ApplicationKeyMap and ApplicationKeyMapOutput values.
// You can construct a concrete instance of `ApplicationKeyMapInput` via:
//
//	ApplicationKeyMap{ "key": ApplicationKeyArgs{...} }
type ApplicationKeyMapInput interface {
	pulumi.Input

	ToApplicationKeyMapOutput() ApplicationKeyMapOutput
	ToApplicationKeyMapOutputWithContext(context.Context) ApplicationKeyMapOutput
}

type ApplicationKeyMap map[string]ApplicationKeyInput

func (ApplicationKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationKey)(nil)).Elem()
}

func (i ApplicationKeyMap) ToApplicationKeyMapOutput() ApplicationKeyMapOutput {
	return i.ToApplicationKeyMapOutputWithContext(context.Background())
}

func (i ApplicationKeyMap) ToApplicationKeyMapOutputWithContext(ctx context.Context) ApplicationKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKeyMapOutput)
}

func (i ApplicationKeyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ApplicationKey] {
	return pulumix.Output[map[string]*ApplicationKey]{
		OutputState: i.ToApplicationKeyMapOutputWithContext(ctx).OutputState,
	}
}

type ApplicationKeyOutput struct{ *pulumi.OutputState }

func (ApplicationKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationKey)(nil)).Elem()
}

func (o ApplicationKeyOutput) ToApplicationKeyOutput() ApplicationKeyOutput {
	return o
}

func (o ApplicationKeyOutput) ToApplicationKeyOutputWithContext(ctx context.Context) ApplicationKeyOutput {
	return o
}

func (o ApplicationKeyOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationKey] {
	return pulumix.Output[*ApplicationKey]{
		OutputState: o.OutputState,
	}
}

// The value of the Application Key.
func (o ApplicationKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationKey) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Name for Application Key.
func (o ApplicationKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type ApplicationKeyArrayOutput struct{ *pulumi.OutputState }

func (ApplicationKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationKey)(nil)).Elem()
}

func (o ApplicationKeyArrayOutput) ToApplicationKeyArrayOutput() ApplicationKeyArrayOutput {
	return o
}

func (o ApplicationKeyArrayOutput) ToApplicationKeyArrayOutputWithContext(ctx context.Context) ApplicationKeyArrayOutput {
	return o
}

func (o ApplicationKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ApplicationKey] {
	return pulumix.Output[[]*ApplicationKey]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationKeyArrayOutput) Index(i pulumi.IntInput) ApplicationKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationKey {
		return vs[0].([]*ApplicationKey)[vs[1].(int)]
	}).(ApplicationKeyOutput)
}

type ApplicationKeyMapOutput struct{ *pulumi.OutputState }

func (ApplicationKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationKey)(nil)).Elem()
}

func (o ApplicationKeyMapOutput) ToApplicationKeyMapOutput() ApplicationKeyMapOutput {
	return o
}

func (o ApplicationKeyMapOutput) ToApplicationKeyMapOutputWithContext(ctx context.Context) ApplicationKeyMapOutput {
	return o
}

func (o ApplicationKeyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ApplicationKey] {
	return pulumix.Output[map[string]*ApplicationKey]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationKeyMapOutput) MapIndex(k pulumi.StringInput) ApplicationKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationKey {
		return vs[0].(map[string]*ApplicationKey)[vs[1].(string)]
	}).(ApplicationKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKeyInput)(nil)).Elem(), &ApplicationKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKeyArrayInput)(nil)).Elem(), ApplicationKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKeyMapInput)(nil)).Elem(), ApplicationKeyMap{})
	pulumi.RegisterOutputType(ApplicationKeyOutput{})
	pulumi.RegisterOutputType(ApplicationKeyArrayOutput{})
	pulumi.RegisterOutputType(ApplicationKeyMapOutput{})
}
