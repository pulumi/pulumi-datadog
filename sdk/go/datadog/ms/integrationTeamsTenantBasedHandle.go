// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for interacting with Datadog Microsoft Teams Integration tenant-based handles.
type IntegrationTeamsTenantBasedHandle struct {
	pulumi.CustomResourceState

	// Your channel name.
	ChannelName pulumi.StringOutput `pulumi:"channelName"`
	// Your tenant-based handle name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Your team name.
	TeamName pulumi.StringOutput `pulumi:"teamName"`
	// Your tenant name.
	TenantName pulumi.StringOutput `pulumi:"tenantName"`
}

// NewIntegrationTeamsTenantBasedHandle registers a new resource with the given unique name, arguments, and options.
func NewIntegrationTeamsTenantBasedHandle(ctx *pulumi.Context,
	name string, args *IntegrationTeamsTenantBasedHandleArgs, opts ...pulumi.ResourceOption) (*IntegrationTeamsTenantBasedHandle, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChannelName == nil {
		return nil, errors.New("invalid value for required argument 'ChannelName'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.TeamName == nil {
		return nil, errors.New("invalid value for required argument 'TeamName'")
	}
	if args.TenantName == nil {
		return nil, errors.New("invalid value for required argument 'TenantName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationTeamsTenantBasedHandle
	err := ctx.RegisterResource("datadog:ms/integrationTeamsTenantBasedHandle:IntegrationTeamsTenantBasedHandle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationTeamsTenantBasedHandle gets an existing IntegrationTeamsTenantBasedHandle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationTeamsTenantBasedHandle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationTeamsTenantBasedHandleState, opts ...pulumi.ResourceOption) (*IntegrationTeamsTenantBasedHandle, error) {
	var resource IntegrationTeamsTenantBasedHandle
	err := ctx.ReadResource("datadog:ms/integrationTeamsTenantBasedHandle:IntegrationTeamsTenantBasedHandle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationTeamsTenantBasedHandle resources.
type integrationTeamsTenantBasedHandleState struct {
	// Your channel name.
	ChannelName *string `pulumi:"channelName"`
	// Your tenant-based handle name.
	Name *string `pulumi:"name"`
	// Your team name.
	TeamName *string `pulumi:"teamName"`
	// Your tenant name.
	TenantName *string `pulumi:"tenantName"`
}

type IntegrationTeamsTenantBasedHandleState struct {
	// Your channel name.
	ChannelName pulumi.StringPtrInput
	// Your tenant-based handle name.
	Name pulumi.StringPtrInput
	// Your team name.
	TeamName pulumi.StringPtrInput
	// Your tenant name.
	TenantName pulumi.StringPtrInput
}

func (IntegrationTeamsTenantBasedHandleState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationTeamsTenantBasedHandleState)(nil)).Elem()
}

type integrationTeamsTenantBasedHandleArgs struct {
	// Your channel name.
	ChannelName string `pulumi:"channelName"`
	// Your tenant-based handle name.
	Name string `pulumi:"name"`
	// Your team name.
	TeamName string `pulumi:"teamName"`
	// Your tenant name.
	TenantName string `pulumi:"tenantName"`
}

// The set of arguments for constructing a IntegrationTeamsTenantBasedHandle resource.
type IntegrationTeamsTenantBasedHandleArgs struct {
	// Your channel name.
	ChannelName pulumi.StringInput
	// Your tenant-based handle name.
	Name pulumi.StringInput
	// Your team name.
	TeamName pulumi.StringInput
	// Your tenant name.
	TenantName pulumi.StringInput
}

func (IntegrationTeamsTenantBasedHandleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationTeamsTenantBasedHandleArgs)(nil)).Elem()
}

type IntegrationTeamsTenantBasedHandleInput interface {
	pulumi.Input

	ToIntegrationTeamsTenantBasedHandleOutput() IntegrationTeamsTenantBasedHandleOutput
	ToIntegrationTeamsTenantBasedHandleOutputWithContext(ctx context.Context) IntegrationTeamsTenantBasedHandleOutput
}

func (*IntegrationTeamsTenantBasedHandle) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationTeamsTenantBasedHandle)(nil)).Elem()
}

func (i *IntegrationTeamsTenantBasedHandle) ToIntegrationTeamsTenantBasedHandleOutput() IntegrationTeamsTenantBasedHandleOutput {
	return i.ToIntegrationTeamsTenantBasedHandleOutputWithContext(context.Background())
}

func (i *IntegrationTeamsTenantBasedHandle) ToIntegrationTeamsTenantBasedHandleOutputWithContext(ctx context.Context) IntegrationTeamsTenantBasedHandleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTeamsTenantBasedHandleOutput)
}

// IntegrationTeamsTenantBasedHandleArrayInput is an input type that accepts IntegrationTeamsTenantBasedHandleArray and IntegrationTeamsTenantBasedHandleArrayOutput values.
// You can construct a concrete instance of `IntegrationTeamsTenantBasedHandleArrayInput` via:
//
//	IntegrationTeamsTenantBasedHandleArray{ IntegrationTeamsTenantBasedHandleArgs{...} }
type IntegrationTeamsTenantBasedHandleArrayInput interface {
	pulumi.Input

	ToIntegrationTeamsTenantBasedHandleArrayOutput() IntegrationTeamsTenantBasedHandleArrayOutput
	ToIntegrationTeamsTenantBasedHandleArrayOutputWithContext(context.Context) IntegrationTeamsTenantBasedHandleArrayOutput
}

type IntegrationTeamsTenantBasedHandleArray []IntegrationTeamsTenantBasedHandleInput

func (IntegrationTeamsTenantBasedHandleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationTeamsTenantBasedHandle)(nil)).Elem()
}

func (i IntegrationTeamsTenantBasedHandleArray) ToIntegrationTeamsTenantBasedHandleArrayOutput() IntegrationTeamsTenantBasedHandleArrayOutput {
	return i.ToIntegrationTeamsTenantBasedHandleArrayOutputWithContext(context.Background())
}

func (i IntegrationTeamsTenantBasedHandleArray) ToIntegrationTeamsTenantBasedHandleArrayOutputWithContext(ctx context.Context) IntegrationTeamsTenantBasedHandleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTeamsTenantBasedHandleArrayOutput)
}

// IntegrationTeamsTenantBasedHandleMapInput is an input type that accepts IntegrationTeamsTenantBasedHandleMap and IntegrationTeamsTenantBasedHandleMapOutput values.
// You can construct a concrete instance of `IntegrationTeamsTenantBasedHandleMapInput` via:
//
//	IntegrationTeamsTenantBasedHandleMap{ "key": IntegrationTeamsTenantBasedHandleArgs{...} }
type IntegrationTeamsTenantBasedHandleMapInput interface {
	pulumi.Input

	ToIntegrationTeamsTenantBasedHandleMapOutput() IntegrationTeamsTenantBasedHandleMapOutput
	ToIntegrationTeamsTenantBasedHandleMapOutputWithContext(context.Context) IntegrationTeamsTenantBasedHandleMapOutput
}

type IntegrationTeamsTenantBasedHandleMap map[string]IntegrationTeamsTenantBasedHandleInput

func (IntegrationTeamsTenantBasedHandleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationTeamsTenantBasedHandle)(nil)).Elem()
}

func (i IntegrationTeamsTenantBasedHandleMap) ToIntegrationTeamsTenantBasedHandleMapOutput() IntegrationTeamsTenantBasedHandleMapOutput {
	return i.ToIntegrationTeamsTenantBasedHandleMapOutputWithContext(context.Background())
}

func (i IntegrationTeamsTenantBasedHandleMap) ToIntegrationTeamsTenantBasedHandleMapOutputWithContext(ctx context.Context) IntegrationTeamsTenantBasedHandleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTeamsTenantBasedHandleMapOutput)
}

type IntegrationTeamsTenantBasedHandleOutput struct{ *pulumi.OutputState }

func (IntegrationTeamsTenantBasedHandleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationTeamsTenantBasedHandle)(nil)).Elem()
}

func (o IntegrationTeamsTenantBasedHandleOutput) ToIntegrationTeamsTenantBasedHandleOutput() IntegrationTeamsTenantBasedHandleOutput {
	return o
}

func (o IntegrationTeamsTenantBasedHandleOutput) ToIntegrationTeamsTenantBasedHandleOutputWithContext(ctx context.Context) IntegrationTeamsTenantBasedHandleOutput {
	return o
}

// Your channel name.
func (o IntegrationTeamsTenantBasedHandleOutput) ChannelName() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationTeamsTenantBasedHandle) pulumi.StringOutput { return v.ChannelName }).(pulumi.StringOutput)
}

// Your tenant-based handle name.
func (o IntegrationTeamsTenantBasedHandleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationTeamsTenantBasedHandle) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Your team name.
func (o IntegrationTeamsTenantBasedHandleOutput) TeamName() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationTeamsTenantBasedHandle) pulumi.StringOutput { return v.TeamName }).(pulumi.StringOutput)
}

// Your tenant name.
func (o IntegrationTeamsTenantBasedHandleOutput) TenantName() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationTeamsTenantBasedHandle) pulumi.StringOutput { return v.TenantName }).(pulumi.StringOutput)
}

type IntegrationTeamsTenantBasedHandleArrayOutput struct{ *pulumi.OutputState }

func (IntegrationTeamsTenantBasedHandleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationTeamsTenantBasedHandle)(nil)).Elem()
}

func (o IntegrationTeamsTenantBasedHandleArrayOutput) ToIntegrationTeamsTenantBasedHandleArrayOutput() IntegrationTeamsTenantBasedHandleArrayOutput {
	return o
}

func (o IntegrationTeamsTenantBasedHandleArrayOutput) ToIntegrationTeamsTenantBasedHandleArrayOutputWithContext(ctx context.Context) IntegrationTeamsTenantBasedHandleArrayOutput {
	return o
}

func (o IntegrationTeamsTenantBasedHandleArrayOutput) Index(i pulumi.IntInput) IntegrationTeamsTenantBasedHandleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationTeamsTenantBasedHandle {
		return vs[0].([]*IntegrationTeamsTenantBasedHandle)[vs[1].(int)]
	}).(IntegrationTeamsTenantBasedHandleOutput)
}

type IntegrationTeamsTenantBasedHandleMapOutput struct{ *pulumi.OutputState }

func (IntegrationTeamsTenantBasedHandleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationTeamsTenantBasedHandle)(nil)).Elem()
}

func (o IntegrationTeamsTenantBasedHandleMapOutput) ToIntegrationTeamsTenantBasedHandleMapOutput() IntegrationTeamsTenantBasedHandleMapOutput {
	return o
}

func (o IntegrationTeamsTenantBasedHandleMapOutput) ToIntegrationTeamsTenantBasedHandleMapOutputWithContext(ctx context.Context) IntegrationTeamsTenantBasedHandleMapOutput {
	return o
}

func (o IntegrationTeamsTenantBasedHandleMapOutput) MapIndex(k pulumi.StringInput) IntegrationTeamsTenantBasedHandleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationTeamsTenantBasedHandle {
		return vs[0].(map[string]*IntegrationTeamsTenantBasedHandle)[vs[1].(string)]
	}).(IntegrationTeamsTenantBasedHandleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTeamsTenantBasedHandleInput)(nil)).Elem(), &IntegrationTeamsTenantBasedHandle{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTeamsTenantBasedHandleArrayInput)(nil)).Elem(), IntegrationTeamsTenantBasedHandleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTeamsTenantBasedHandleMapInput)(nil)).Elem(), IntegrationTeamsTenantBasedHandleMap{})
	pulumi.RegisterOutputType(IntegrationTeamsTenantBasedHandleOutput{})
	pulumi.RegisterOutputType(IntegrationTeamsTenantBasedHandleArrayOutput{})
	pulumi.RegisterOutputType(IntegrationTeamsTenantBasedHandleMapOutput{})
}
