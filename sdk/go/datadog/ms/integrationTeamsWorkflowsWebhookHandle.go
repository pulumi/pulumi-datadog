// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for interacting with Datadog Microsoft Teams integration Microsoft Workflows webhook handles.
type IntegrationTeamsWorkflowsWebhookHandle struct {
	pulumi.CustomResourceState

	// Your Microsoft Workflows webhook handle name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Your Microsoft Workflows webhook URL.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewIntegrationTeamsWorkflowsWebhookHandle registers a new resource with the given unique name, arguments, and options.
func NewIntegrationTeamsWorkflowsWebhookHandle(ctx *pulumi.Context,
	name string, args *IntegrationTeamsWorkflowsWebhookHandleArgs, opts ...pulumi.ResourceOption) (*IntegrationTeamsWorkflowsWebhookHandle, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Url != nil {
		args.Url = pulumi.ToSecret(args.Url).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"url",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationTeamsWorkflowsWebhookHandle
	err := ctx.RegisterResource("datadog:ms/integrationTeamsWorkflowsWebhookHandle:IntegrationTeamsWorkflowsWebhookHandle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationTeamsWorkflowsWebhookHandle gets an existing IntegrationTeamsWorkflowsWebhookHandle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationTeamsWorkflowsWebhookHandle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationTeamsWorkflowsWebhookHandleState, opts ...pulumi.ResourceOption) (*IntegrationTeamsWorkflowsWebhookHandle, error) {
	var resource IntegrationTeamsWorkflowsWebhookHandle
	err := ctx.ReadResource("datadog:ms/integrationTeamsWorkflowsWebhookHandle:IntegrationTeamsWorkflowsWebhookHandle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationTeamsWorkflowsWebhookHandle resources.
type integrationTeamsWorkflowsWebhookHandleState struct {
	// Your Microsoft Workflows webhook handle name.
	Name *string `pulumi:"name"`
	// Your Microsoft Workflows webhook URL.
	Url *string `pulumi:"url"`
}

type IntegrationTeamsWorkflowsWebhookHandleState struct {
	// Your Microsoft Workflows webhook handle name.
	Name pulumi.StringPtrInput
	// Your Microsoft Workflows webhook URL.
	Url pulumi.StringPtrInput
}

func (IntegrationTeamsWorkflowsWebhookHandleState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationTeamsWorkflowsWebhookHandleState)(nil)).Elem()
}

type integrationTeamsWorkflowsWebhookHandleArgs struct {
	// Your Microsoft Workflows webhook handle name.
	Name string `pulumi:"name"`
	// Your Microsoft Workflows webhook URL.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a IntegrationTeamsWorkflowsWebhookHandle resource.
type IntegrationTeamsWorkflowsWebhookHandleArgs struct {
	// Your Microsoft Workflows webhook handle name.
	Name pulumi.StringInput
	// Your Microsoft Workflows webhook URL.
	Url pulumi.StringInput
}

func (IntegrationTeamsWorkflowsWebhookHandleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationTeamsWorkflowsWebhookHandleArgs)(nil)).Elem()
}

type IntegrationTeamsWorkflowsWebhookHandleInput interface {
	pulumi.Input

	ToIntegrationTeamsWorkflowsWebhookHandleOutput() IntegrationTeamsWorkflowsWebhookHandleOutput
	ToIntegrationTeamsWorkflowsWebhookHandleOutputWithContext(ctx context.Context) IntegrationTeamsWorkflowsWebhookHandleOutput
}

func (*IntegrationTeamsWorkflowsWebhookHandle) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationTeamsWorkflowsWebhookHandle)(nil)).Elem()
}

func (i *IntegrationTeamsWorkflowsWebhookHandle) ToIntegrationTeamsWorkflowsWebhookHandleOutput() IntegrationTeamsWorkflowsWebhookHandleOutput {
	return i.ToIntegrationTeamsWorkflowsWebhookHandleOutputWithContext(context.Background())
}

func (i *IntegrationTeamsWorkflowsWebhookHandle) ToIntegrationTeamsWorkflowsWebhookHandleOutputWithContext(ctx context.Context) IntegrationTeamsWorkflowsWebhookHandleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTeamsWorkflowsWebhookHandleOutput)
}

// IntegrationTeamsWorkflowsWebhookHandleArrayInput is an input type that accepts IntegrationTeamsWorkflowsWebhookHandleArray and IntegrationTeamsWorkflowsWebhookHandleArrayOutput values.
// You can construct a concrete instance of `IntegrationTeamsWorkflowsWebhookHandleArrayInput` via:
//
//	IntegrationTeamsWorkflowsWebhookHandleArray{ IntegrationTeamsWorkflowsWebhookHandleArgs{...} }
type IntegrationTeamsWorkflowsWebhookHandleArrayInput interface {
	pulumi.Input

	ToIntegrationTeamsWorkflowsWebhookHandleArrayOutput() IntegrationTeamsWorkflowsWebhookHandleArrayOutput
	ToIntegrationTeamsWorkflowsWebhookHandleArrayOutputWithContext(context.Context) IntegrationTeamsWorkflowsWebhookHandleArrayOutput
}

type IntegrationTeamsWorkflowsWebhookHandleArray []IntegrationTeamsWorkflowsWebhookHandleInput

func (IntegrationTeamsWorkflowsWebhookHandleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationTeamsWorkflowsWebhookHandle)(nil)).Elem()
}

func (i IntegrationTeamsWorkflowsWebhookHandleArray) ToIntegrationTeamsWorkflowsWebhookHandleArrayOutput() IntegrationTeamsWorkflowsWebhookHandleArrayOutput {
	return i.ToIntegrationTeamsWorkflowsWebhookHandleArrayOutputWithContext(context.Background())
}

func (i IntegrationTeamsWorkflowsWebhookHandleArray) ToIntegrationTeamsWorkflowsWebhookHandleArrayOutputWithContext(ctx context.Context) IntegrationTeamsWorkflowsWebhookHandleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTeamsWorkflowsWebhookHandleArrayOutput)
}

// IntegrationTeamsWorkflowsWebhookHandleMapInput is an input type that accepts IntegrationTeamsWorkflowsWebhookHandleMap and IntegrationTeamsWorkflowsWebhookHandleMapOutput values.
// You can construct a concrete instance of `IntegrationTeamsWorkflowsWebhookHandleMapInput` via:
//
//	IntegrationTeamsWorkflowsWebhookHandleMap{ "key": IntegrationTeamsWorkflowsWebhookHandleArgs{...} }
type IntegrationTeamsWorkflowsWebhookHandleMapInput interface {
	pulumi.Input

	ToIntegrationTeamsWorkflowsWebhookHandleMapOutput() IntegrationTeamsWorkflowsWebhookHandleMapOutput
	ToIntegrationTeamsWorkflowsWebhookHandleMapOutputWithContext(context.Context) IntegrationTeamsWorkflowsWebhookHandleMapOutput
}

type IntegrationTeamsWorkflowsWebhookHandleMap map[string]IntegrationTeamsWorkflowsWebhookHandleInput

func (IntegrationTeamsWorkflowsWebhookHandleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationTeamsWorkflowsWebhookHandle)(nil)).Elem()
}

func (i IntegrationTeamsWorkflowsWebhookHandleMap) ToIntegrationTeamsWorkflowsWebhookHandleMapOutput() IntegrationTeamsWorkflowsWebhookHandleMapOutput {
	return i.ToIntegrationTeamsWorkflowsWebhookHandleMapOutputWithContext(context.Background())
}

func (i IntegrationTeamsWorkflowsWebhookHandleMap) ToIntegrationTeamsWorkflowsWebhookHandleMapOutputWithContext(ctx context.Context) IntegrationTeamsWorkflowsWebhookHandleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTeamsWorkflowsWebhookHandleMapOutput)
}

type IntegrationTeamsWorkflowsWebhookHandleOutput struct{ *pulumi.OutputState }

func (IntegrationTeamsWorkflowsWebhookHandleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationTeamsWorkflowsWebhookHandle)(nil)).Elem()
}

func (o IntegrationTeamsWorkflowsWebhookHandleOutput) ToIntegrationTeamsWorkflowsWebhookHandleOutput() IntegrationTeamsWorkflowsWebhookHandleOutput {
	return o
}

func (o IntegrationTeamsWorkflowsWebhookHandleOutput) ToIntegrationTeamsWorkflowsWebhookHandleOutputWithContext(ctx context.Context) IntegrationTeamsWorkflowsWebhookHandleOutput {
	return o
}

// Your Microsoft Workflows webhook handle name.
func (o IntegrationTeamsWorkflowsWebhookHandleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationTeamsWorkflowsWebhookHandle) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Your Microsoft Workflows webhook URL.
func (o IntegrationTeamsWorkflowsWebhookHandleOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationTeamsWorkflowsWebhookHandle) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type IntegrationTeamsWorkflowsWebhookHandleArrayOutput struct{ *pulumi.OutputState }

func (IntegrationTeamsWorkflowsWebhookHandleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationTeamsWorkflowsWebhookHandle)(nil)).Elem()
}

func (o IntegrationTeamsWorkflowsWebhookHandleArrayOutput) ToIntegrationTeamsWorkflowsWebhookHandleArrayOutput() IntegrationTeamsWorkflowsWebhookHandleArrayOutput {
	return o
}

func (o IntegrationTeamsWorkflowsWebhookHandleArrayOutput) ToIntegrationTeamsWorkflowsWebhookHandleArrayOutputWithContext(ctx context.Context) IntegrationTeamsWorkflowsWebhookHandleArrayOutput {
	return o
}

func (o IntegrationTeamsWorkflowsWebhookHandleArrayOutput) Index(i pulumi.IntInput) IntegrationTeamsWorkflowsWebhookHandleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationTeamsWorkflowsWebhookHandle {
		return vs[0].([]*IntegrationTeamsWorkflowsWebhookHandle)[vs[1].(int)]
	}).(IntegrationTeamsWorkflowsWebhookHandleOutput)
}

type IntegrationTeamsWorkflowsWebhookHandleMapOutput struct{ *pulumi.OutputState }

func (IntegrationTeamsWorkflowsWebhookHandleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationTeamsWorkflowsWebhookHandle)(nil)).Elem()
}

func (o IntegrationTeamsWorkflowsWebhookHandleMapOutput) ToIntegrationTeamsWorkflowsWebhookHandleMapOutput() IntegrationTeamsWorkflowsWebhookHandleMapOutput {
	return o
}

func (o IntegrationTeamsWorkflowsWebhookHandleMapOutput) ToIntegrationTeamsWorkflowsWebhookHandleMapOutputWithContext(ctx context.Context) IntegrationTeamsWorkflowsWebhookHandleMapOutput {
	return o
}

func (o IntegrationTeamsWorkflowsWebhookHandleMapOutput) MapIndex(k pulumi.StringInput) IntegrationTeamsWorkflowsWebhookHandleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationTeamsWorkflowsWebhookHandle {
		return vs[0].(map[string]*IntegrationTeamsWorkflowsWebhookHandle)[vs[1].(string)]
	}).(IntegrationTeamsWorkflowsWebhookHandleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTeamsWorkflowsWebhookHandleInput)(nil)).Elem(), &IntegrationTeamsWorkflowsWebhookHandle{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTeamsWorkflowsWebhookHandleArrayInput)(nil)).Elem(), IntegrationTeamsWorkflowsWebhookHandleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTeamsWorkflowsWebhookHandleMapInput)(nil)).Elem(), IntegrationTeamsWorkflowsWebhookHandleMap{})
	pulumi.RegisterOutputType(IntegrationTeamsWorkflowsWebhookHandleOutput{})
	pulumi.RegisterOutputType(IntegrationTeamsWorkflowsWebhookHandleArrayOutput{})
	pulumi.RegisterOutputType(IntegrationTeamsWorkflowsWebhookHandleMapOutput{})
}
