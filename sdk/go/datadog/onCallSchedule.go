// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog On-Call schedule resource. This can be used to create and manage Datadog On-Call schedules.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.NewOnCallSchedule(ctx, "test", &datadog.OnCallScheduleArgs{
//				Name:     pulumi.String("Team A On-Call"),
//				TimeZone: pulumi.String("America/New_York"),
//				Teams: pulumi.StringArray{
//					pulumi.String("00000000-aba2-0000-0000-000000000000"),
//				},
//				Layers: datadog.OnCallScheduleLayerArray{
//					&datadog.OnCallScheduleLayerArgs{
//						Name:          pulumi.String("Primary On-Call Layer"),
//						EffectiveDate: pulumi.String("2025-01-01T00:00:00Z"),
//						EndDate:       pulumi.String("2026-01-01T00:00:00Z"),
//						RotationStart: pulumi.String("2025-01-01T00:00:00Z"),
//						Interval: datadog.OnCallScheduleLayerIntervalArgs{
//							map[string]interface{}{
//								"days":    1,
//								"seconds": 300,
//							},
//						},
//						Users: pulumi.StringArray{
//							pulumi.String("00000000-aba1-0000-0000-000000000000"),
//						},
//						Restrictions: datadog.OnCallScheduleLayerRestrictionArray{
//							&datadog.OnCallScheduleLayerRestrictionArgs{
//								EndDay:    pulumi.String("monday"),
//								EndTime:   pulumi.String("17:00:00"),
//								StartDay:  pulumi.String("monday"),
//								StartTime: pulumi.String("09:00:00"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// Import an existing on_call_schedule
//
// ```sh
// $ pulumi import datadog:index/onCallSchedule:OnCallSchedule test "b03a07d5-49da-43e9-83b4-5d84969b588b"
// ```
type OnCallSchedule struct {
	pulumi.CustomResourceState

	// List of layers for the schedule.
	Layers OnCallScheduleLayerArrayOutput `pulumi:"layers"`
	// A human-readable name for the new schedule.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of team ids associated with the schedule.
	Teams pulumi.StringArrayOutput `pulumi:"teams"`
	// The time zone in which the schedule is defined.
	TimeZone pulumi.StringOutput `pulumi:"timeZone"`
}

// NewOnCallSchedule registers a new resource with the given unique name, arguments, and options.
func NewOnCallSchedule(ctx *pulumi.Context,
	name string, args *OnCallScheduleArgs, opts ...pulumi.ResourceOption) (*OnCallSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.TimeZone == nil {
		return nil, errors.New("invalid value for required argument 'TimeZone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OnCallSchedule
	err := ctx.RegisterResource("datadog:index/onCallSchedule:OnCallSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOnCallSchedule gets an existing OnCallSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOnCallSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OnCallScheduleState, opts ...pulumi.ResourceOption) (*OnCallSchedule, error) {
	var resource OnCallSchedule
	err := ctx.ReadResource("datadog:index/onCallSchedule:OnCallSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OnCallSchedule resources.
type onCallScheduleState struct {
	// List of layers for the schedule.
	Layers []OnCallScheduleLayer `pulumi:"layers"`
	// A human-readable name for the new schedule.
	Name *string `pulumi:"name"`
	// A list of team ids associated with the schedule.
	Teams []string `pulumi:"teams"`
	// The time zone in which the schedule is defined.
	TimeZone *string `pulumi:"timeZone"`
}

type OnCallScheduleState struct {
	// List of layers for the schedule.
	Layers OnCallScheduleLayerArrayInput
	// A human-readable name for the new schedule.
	Name pulumi.StringPtrInput
	// A list of team ids associated with the schedule.
	Teams pulumi.StringArrayInput
	// The time zone in which the schedule is defined.
	TimeZone pulumi.StringPtrInput
}

func (OnCallScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*onCallScheduleState)(nil)).Elem()
}

type onCallScheduleArgs struct {
	// List of layers for the schedule.
	Layers []OnCallScheduleLayer `pulumi:"layers"`
	// A human-readable name for the new schedule.
	Name string `pulumi:"name"`
	// A list of team ids associated with the schedule.
	Teams []string `pulumi:"teams"`
	// The time zone in which the schedule is defined.
	TimeZone string `pulumi:"timeZone"`
}

// The set of arguments for constructing a OnCallSchedule resource.
type OnCallScheduleArgs struct {
	// List of layers for the schedule.
	Layers OnCallScheduleLayerArrayInput
	// A human-readable name for the new schedule.
	Name pulumi.StringInput
	// A list of team ids associated with the schedule.
	Teams pulumi.StringArrayInput
	// The time zone in which the schedule is defined.
	TimeZone pulumi.StringInput
}

func (OnCallScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*onCallScheduleArgs)(nil)).Elem()
}

type OnCallScheduleInput interface {
	pulumi.Input

	ToOnCallScheduleOutput() OnCallScheduleOutput
	ToOnCallScheduleOutputWithContext(ctx context.Context) OnCallScheduleOutput
}

func (*OnCallSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**OnCallSchedule)(nil)).Elem()
}

func (i *OnCallSchedule) ToOnCallScheduleOutput() OnCallScheduleOutput {
	return i.ToOnCallScheduleOutputWithContext(context.Background())
}

func (i *OnCallSchedule) ToOnCallScheduleOutputWithContext(ctx context.Context) OnCallScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnCallScheduleOutput)
}

// OnCallScheduleArrayInput is an input type that accepts OnCallScheduleArray and OnCallScheduleArrayOutput values.
// You can construct a concrete instance of `OnCallScheduleArrayInput` via:
//
//	OnCallScheduleArray{ OnCallScheduleArgs{...} }
type OnCallScheduleArrayInput interface {
	pulumi.Input

	ToOnCallScheduleArrayOutput() OnCallScheduleArrayOutput
	ToOnCallScheduleArrayOutputWithContext(context.Context) OnCallScheduleArrayOutput
}

type OnCallScheduleArray []OnCallScheduleInput

func (OnCallScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OnCallSchedule)(nil)).Elem()
}

func (i OnCallScheduleArray) ToOnCallScheduleArrayOutput() OnCallScheduleArrayOutput {
	return i.ToOnCallScheduleArrayOutputWithContext(context.Background())
}

func (i OnCallScheduleArray) ToOnCallScheduleArrayOutputWithContext(ctx context.Context) OnCallScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnCallScheduleArrayOutput)
}

// OnCallScheduleMapInput is an input type that accepts OnCallScheduleMap and OnCallScheduleMapOutput values.
// You can construct a concrete instance of `OnCallScheduleMapInput` via:
//
//	OnCallScheduleMap{ "key": OnCallScheduleArgs{...} }
type OnCallScheduleMapInput interface {
	pulumi.Input

	ToOnCallScheduleMapOutput() OnCallScheduleMapOutput
	ToOnCallScheduleMapOutputWithContext(context.Context) OnCallScheduleMapOutput
}

type OnCallScheduleMap map[string]OnCallScheduleInput

func (OnCallScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OnCallSchedule)(nil)).Elem()
}

func (i OnCallScheduleMap) ToOnCallScheduleMapOutput() OnCallScheduleMapOutput {
	return i.ToOnCallScheduleMapOutputWithContext(context.Background())
}

func (i OnCallScheduleMap) ToOnCallScheduleMapOutputWithContext(ctx context.Context) OnCallScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnCallScheduleMapOutput)
}

type OnCallScheduleOutput struct{ *pulumi.OutputState }

func (OnCallScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnCallSchedule)(nil)).Elem()
}

func (o OnCallScheduleOutput) ToOnCallScheduleOutput() OnCallScheduleOutput {
	return o
}

func (o OnCallScheduleOutput) ToOnCallScheduleOutputWithContext(ctx context.Context) OnCallScheduleOutput {
	return o
}

// List of layers for the schedule.
func (o OnCallScheduleOutput) Layers() OnCallScheduleLayerArrayOutput {
	return o.ApplyT(func(v *OnCallSchedule) OnCallScheduleLayerArrayOutput { return v.Layers }).(OnCallScheduleLayerArrayOutput)
}

// A human-readable name for the new schedule.
func (o OnCallScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OnCallSchedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of team ids associated with the schedule.
func (o OnCallScheduleOutput) Teams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OnCallSchedule) pulumi.StringArrayOutput { return v.Teams }).(pulumi.StringArrayOutput)
}

// The time zone in which the schedule is defined.
func (o OnCallScheduleOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *OnCallSchedule) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

type OnCallScheduleArrayOutput struct{ *pulumi.OutputState }

func (OnCallScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OnCallSchedule)(nil)).Elem()
}

func (o OnCallScheduleArrayOutput) ToOnCallScheduleArrayOutput() OnCallScheduleArrayOutput {
	return o
}

func (o OnCallScheduleArrayOutput) ToOnCallScheduleArrayOutputWithContext(ctx context.Context) OnCallScheduleArrayOutput {
	return o
}

func (o OnCallScheduleArrayOutput) Index(i pulumi.IntInput) OnCallScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OnCallSchedule {
		return vs[0].([]*OnCallSchedule)[vs[1].(int)]
	}).(OnCallScheduleOutput)
}

type OnCallScheduleMapOutput struct{ *pulumi.OutputState }

func (OnCallScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OnCallSchedule)(nil)).Elem()
}

func (o OnCallScheduleMapOutput) ToOnCallScheduleMapOutput() OnCallScheduleMapOutput {
	return o
}

func (o OnCallScheduleMapOutput) ToOnCallScheduleMapOutputWithContext(ctx context.Context) OnCallScheduleMapOutput {
	return o
}

func (o OnCallScheduleMapOutput) MapIndex(k pulumi.StringInput) OnCallScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OnCallSchedule {
		return vs[0].(map[string]*OnCallSchedule)[vs[1].(string)]
	}).(OnCallScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OnCallScheduleInput)(nil)).Elem(), &OnCallSchedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*OnCallScheduleArrayInput)(nil)).Elem(), OnCallScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OnCallScheduleMapInput)(nil)).Elem(), OnCallScheduleMap{})
	pulumi.RegisterOutputType(OnCallScheduleOutput{})
	pulumi.RegisterOutputType(OnCallScheduleArrayOutput{})
	pulumi.RegisterOutputType(OnCallScheduleMapOutput{})
}
