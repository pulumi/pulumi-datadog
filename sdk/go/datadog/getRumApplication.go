// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve a Datadog RUM Application.
func LookupRumApplication(ctx *pulumi.Context, args *LookupRumApplicationArgs, opts ...pulumi.InvokeOption) (*LookupRumApplicationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRumApplicationResult
	err := ctx.Invoke("datadog:index/getRumApplication:getRumApplication", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRumApplication.
type LookupRumApplicationArgs struct {
	// ID of the RUM application. Cannot be used with name and type filters.
	Id *string `pulumi:"id"`
	// The name used to search for a RUM application
	NameFilter *string `pulumi:"nameFilter"`
	// The type used to search for a RUM application
	TypeFilter *string `pulumi:"typeFilter"`
}

// A collection of values returned by getRumApplication.
type LookupRumApplicationResult struct {
	// The client token
	ClientToken string `pulumi:"clientToken"`
	// ID of the RUM application. Cannot be used with name and type filters.
	Id string `pulumi:"id"`
	// The name of the RUM application
	Name string `pulumi:"name"`
	// The name used to search for a RUM application
	NameFilter *string `pulumi:"nameFilter"`
	// The RUM application type. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`
	Type string `pulumi:"type"`
	// The type used to search for a RUM application
	TypeFilter *string `pulumi:"typeFilter"`
}

func LookupRumApplicationOutput(ctx *pulumi.Context, args LookupRumApplicationOutputArgs, opts ...pulumi.InvokeOption) LookupRumApplicationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRumApplicationResult, error) {
			args := v.(LookupRumApplicationArgs)
			r, err := LookupRumApplication(ctx, &args, opts...)
			var s LookupRumApplicationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRumApplicationResultOutput)
}

// A collection of arguments for invoking getRumApplication.
type LookupRumApplicationOutputArgs struct {
	// ID of the RUM application. Cannot be used with name and type filters.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name used to search for a RUM application
	NameFilter pulumi.StringPtrInput `pulumi:"nameFilter"`
	// The type used to search for a RUM application
	TypeFilter pulumi.StringPtrInput `pulumi:"typeFilter"`
}

func (LookupRumApplicationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRumApplicationArgs)(nil)).Elem()
}

// A collection of values returned by getRumApplication.
type LookupRumApplicationResultOutput struct{ *pulumi.OutputState }

func (LookupRumApplicationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRumApplicationResult)(nil)).Elem()
}

func (o LookupRumApplicationResultOutput) ToLookupRumApplicationResultOutput() LookupRumApplicationResultOutput {
	return o
}

func (o LookupRumApplicationResultOutput) ToLookupRumApplicationResultOutputWithContext(ctx context.Context) LookupRumApplicationResultOutput {
	return o
}

// The client token
func (o LookupRumApplicationResultOutput) ClientToken() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRumApplicationResult) string { return v.ClientToken }).(pulumi.StringOutput)
}

// ID of the RUM application. Cannot be used with name and type filters.
func (o LookupRumApplicationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRumApplicationResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the RUM application
func (o LookupRumApplicationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRumApplicationResult) string { return v.Name }).(pulumi.StringOutput)
}

// The name used to search for a RUM application
func (o LookupRumApplicationResultOutput) NameFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRumApplicationResult) *string { return v.NameFilter }).(pulumi.StringPtrOutput)
}

// The RUM application type. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`
func (o LookupRumApplicationResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRumApplicationResult) string { return v.Type }).(pulumi.StringOutput)
}

// The type used to search for a RUM application
func (o LookupRumApplicationResultOutput) TypeFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRumApplicationResult) *string { return v.TypeFilter }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRumApplicationResultOutput{})
}
