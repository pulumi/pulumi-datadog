// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog dashboardList resource. This can be used to create and manage Datadog Dashboard Lists and the individual dashboards within them.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			time, err := datadog.NewDashboard(ctx, "time", &datadog.DashboardArgs{
//				Title:       pulumi.String("TF Test Layout Dashboard"),
//				Description: pulumi.String("Created using the Datadog provider"),
//				LayoutType:  pulumi.String("ordered"),
//				IsReadOnly:  pulumi.Bool(true),
//				Widgets: datadog.DashboardWidgetArray{
//					&datadog.DashboardWidgetArgs{
//						AlertGraphDefinition: &datadog.DashboardWidgetAlertGraphDefinitionArgs{
//							AlertId:  pulumi.String("1234"),
//							VizType:  pulumi.String("timeseries"),
//							Title:    pulumi.String("Widget Title"),
//							LiveSpan: pulumi.String("1h"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			screen, err := datadog.NewDashboard(ctx, "screen", &datadog.DashboardArgs{
//				Title:       pulumi.String("TF Test Free Layout Dashboard"),
//				Description: pulumi.String("Created using the Datadog provider"),
//				LayoutType:  pulumi.String("free"),
//				IsReadOnly:  pulumi.Bool(false),
//				Widgets: datadog.DashboardWidgetArray{
//					&datadog.DashboardWidgetArgs{
//						EventStreamDefinition: &datadog.DashboardWidgetEventStreamDefinitionArgs{
//							Query:      pulumi.String("*"),
//							EventSize:  pulumi.String("l"),
//							Title:      pulumi.String("Widget Title"),
//							TitleSize:  pulumi.String("16"),
//							TitleAlign: pulumi.String("left"),
//							LiveSpan:   pulumi.String("1h"),
//						},
//						WidgetLayout: &datadog.DashboardWidgetWidgetLayoutArgs{
//							Height: pulumi.Int(43),
//							Width:  pulumi.Int(32),
//							X:      pulumi.Int(5),
//							Y:      pulumi.Int(5),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datadog.NewDashboardList(ctx, "newList", &datadog.DashboardListArgs{
//				Name: pulumi.String("Automated Created List"),
//				DashItems: datadog.DashboardListDashItemArray{
//					&datadog.DashboardListDashItemArgs{
//						Type:   pulumi.String("custom_timeboard"),
//						DashId: time.ID(),
//					},
//					&datadog.DashboardListDashItemArgs{
//						Type:   pulumi.String("custom_screenboard"),
//						DashId: screen.ID(),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				screen,
//				time,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import datadog:index/dashboardList:DashboardList new_list 123456
//
// ```
type DashboardList struct {
	pulumi.CustomResourceState

	// A set of dashboard items that belong to this list
	DashItems DashboardListDashItemArrayOutput `pulumi:"dashItems"`
	// The name of the Dashboard List
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewDashboardList registers a new resource with the given unique name, arguments, and options.
func NewDashboardList(ctx *pulumi.Context,
	name string, args *DashboardListArgs, opts ...pulumi.ResourceOption) (*DashboardList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DashboardList
	err := ctx.RegisterResource("datadog:index/dashboardList:DashboardList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboardList gets an existing DashboardList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboardList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardListState, opts ...pulumi.ResourceOption) (*DashboardList, error) {
	var resource DashboardList
	err := ctx.ReadResource("datadog:index/dashboardList:DashboardList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DashboardList resources.
type dashboardListState struct {
	// A set of dashboard items that belong to this list
	DashItems []DashboardListDashItem `pulumi:"dashItems"`
	// The name of the Dashboard List
	Name *string `pulumi:"name"`
}

type DashboardListState struct {
	// A set of dashboard items that belong to this list
	DashItems DashboardListDashItemArrayInput
	// The name of the Dashboard List
	Name pulumi.StringPtrInput
}

func (DashboardListState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardListState)(nil)).Elem()
}

type dashboardListArgs struct {
	// A set of dashboard items that belong to this list
	DashItems []DashboardListDashItem `pulumi:"dashItems"`
	// The name of the Dashboard List
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a DashboardList resource.
type DashboardListArgs struct {
	// A set of dashboard items that belong to this list
	DashItems DashboardListDashItemArrayInput
	// The name of the Dashboard List
	Name pulumi.StringInput
}

func (DashboardListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardListArgs)(nil)).Elem()
}

type DashboardListInput interface {
	pulumi.Input

	ToDashboardListOutput() DashboardListOutput
	ToDashboardListOutputWithContext(ctx context.Context) DashboardListOutput
}

func (*DashboardList) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardList)(nil)).Elem()
}

func (i *DashboardList) ToDashboardListOutput() DashboardListOutput {
	return i.ToDashboardListOutputWithContext(context.Background())
}

func (i *DashboardList) ToDashboardListOutputWithContext(ctx context.Context) DashboardListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardListOutput)
}

// DashboardListArrayInput is an input type that accepts DashboardListArray and DashboardListArrayOutput values.
// You can construct a concrete instance of `DashboardListArrayInput` via:
//
//	DashboardListArray{ DashboardListArgs{...} }
type DashboardListArrayInput interface {
	pulumi.Input

	ToDashboardListArrayOutput() DashboardListArrayOutput
	ToDashboardListArrayOutputWithContext(context.Context) DashboardListArrayOutput
}

type DashboardListArray []DashboardListInput

func (DashboardListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardList)(nil)).Elem()
}

func (i DashboardListArray) ToDashboardListArrayOutput() DashboardListArrayOutput {
	return i.ToDashboardListArrayOutputWithContext(context.Background())
}

func (i DashboardListArray) ToDashboardListArrayOutputWithContext(ctx context.Context) DashboardListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardListArrayOutput)
}

// DashboardListMapInput is an input type that accepts DashboardListMap and DashboardListMapOutput values.
// You can construct a concrete instance of `DashboardListMapInput` via:
//
//	DashboardListMap{ "key": DashboardListArgs{...} }
type DashboardListMapInput interface {
	pulumi.Input

	ToDashboardListMapOutput() DashboardListMapOutput
	ToDashboardListMapOutputWithContext(context.Context) DashboardListMapOutput
}

type DashboardListMap map[string]DashboardListInput

func (DashboardListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardList)(nil)).Elem()
}

func (i DashboardListMap) ToDashboardListMapOutput() DashboardListMapOutput {
	return i.ToDashboardListMapOutputWithContext(context.Background())
}

func (i DashboardListMap) ToDashboardListMapOutputWithContext(ctx context.Context) DashboardListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardListMapOutput)
}

type DashboardListOutput struct{ *pulumi.OutputState }

func (DashboardListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardList)(nil)).Elem()
}

func (o DashboardListOutput) ToDashboardListOutput() DashboardListOutput {
	return o
}

func (o DashboardListOutput) ToDashboardListOutputWithContext(ctx context.Context) DashboardListOutput {
	return o
}

// A set of dashboard items that belong to this list
func (o DashboardListOutput) DashItems() DashboardListDashItemArrayOutput {
	return o.ApplyT(func(v *DashboardList) DashboardListDashItemArrayOutput { return v.DashItems }).(DashboardListDashItemArrayOutput)
}

// The name of the Dashboard List
func (o DashboardListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardList) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type DashboardListArrayOutput struct{ *pulumi.OutputState }

func (DashboardListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardList)(nil)).Elem()
}

func (o DashboardListArrayOutput) ToDashboardListArrayOutput() DashboardListArrayOutput {
	return o
}

func (o DashboardListArrayOutput) ToDashboardListArrayOutputWithContext(ctx context.Context) DashboardListArrayOutput {
	return o
}

func (o DashboardListArrayOutput) Index(i pulumi.IntInput) DashboardListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DashboardList {
		return vs[0].([]*DashboardList)[vs[1].(int)]
	}).(DashboardListOutput)
}

type DashboardListMapOutput struct{ *pulumi.OutputState }

func (DashboardListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardList)(nil)).Elem()
}

func (o DashboardListMapOutput) ToDashboardListMapOutput() DashboardListMapOutput {
	return o
}

func (o DashboardListMapOutput) ToDashboardListMapOutputWithContext(ctx context.Context) DashboardListMapOutput {
	return o
}

func (o DashboardListMapOutput) MapIndex(k pulumi.StringInput) DashboardListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DashboardList {
		return vs[0].(map[string]*DashboardList)[vs[1].(string)]
	}).(DashboardListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardListInput)(nil)).Elem(), &DashboardList{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardListArrayInput)(nil)).Elem(), DashboardListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardListMapInput)(nil)).Elem(), DashboardListMap{})
	pulumi.RegisterOutputType(DashboardListOutput{})
	pulumi.RegisterOutputType(DashboardListArrayOutput{})
	pulumi.RegisterOutputType(DashboardListMapOutput{})
}
