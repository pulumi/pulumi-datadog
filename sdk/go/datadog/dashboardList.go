// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Datadog dashboardList resource. This can be used to create and manage Datadog Dashboard Lists and the individual dashboards within them.
//
// ## Example Usage
//
// Create a new Dashboard list with two dashbaords
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		time, err := datadog.NewDashboard(ctx, "time", &datadog.DashboardArgs{
// 			Description: pulumi.String("Created using the Datadog provider in TF"),
// 			IsReadOnly:  pulumi.Bool(true),
// 			LayoutType:  pulumi.String("ordered"),
// 			Title:       pulumi.String("TF Test Layout Dashboard"),
// 			Widgets: datadog.DashboardWidgetArray{
// 				&datadog.DashboardWidgetArgs{
// 					AlertGraphDefinition: &datadog.DashboardWidgetAlertGraphDefinitionArgs{
// 						AlertId: pulumi.String("1234"),
// 						Time: &datadog.DashboardWidgetAlertGraphDefinitionTimeArgs{
// 							LiveSpan: pulumi.String("1h"),
// 						},
// 						Title:   pulumi.String("Widget Title"),
// 						VizType: pulumi.String("timeseries"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		screen, err := datadog.NewDashboard(ctx, "screen", &datadog.DashboardArgs{
// 			Description: pulumi.String("Created using the Datadog provider in TF"),
// 			IsReadOnly:  pulumi.Bool(false),
// 			LayoutType:  pulumi.String("free"),
// 			Title:       pulumi.String("TF Test Free Layout Dashboard"),
// 			Widgets: datadog.DashboardWidgetArray{
// 				&datadog.DashboardWidgetArgs{
// 					EventStreamDefinition: &datadog.DashboardWidgetEventStreamDefinitionArgs{
// 						EventSize: pulumi.String("l"),
// 						Query:     pulumi.String("*"),
// 						Time: &datadog.DashboardWidgetEventStreamDefinitionTimeArgs{
// 							LiveSpan: pulumi.String("1h"),
// 						},
// 						Title:      pulumi.String("Widget Title"),
// 						TitleAlign: pulumi.String("left"),
// 						TitleSize:  pulumi.String("16"),
// 					},
// 					Layout: &datadog.DashboardWidgetLayoutArgs{
// 						Height: pulumi.Float64(43),
// 						Width:  pulumi.Float64(32),
// 						X:      pulumi.Float64(5),
// 						Y:      pulumi.Float64(5),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = datadog.NewDashboardList(ctx, "newList", &datadog.DashboardListArgs{
// 			DashItems: datadog.DashboardListDashItemArray{
// 				&datadog.DashboardListDashItemArgs{
// 					DashId: time.ID(),
// 					Type:   pulumi.String("custom_timeboard"),
// 				},
// 				&datadog.DashboardListDashItemArgs{
// 					DashId: screen.ID(),
// 					Type:   pulumi.String("custom_screenboard"),
// 				},
// 			},
// 			Name: pulumi.String("TF Created List"),
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			"datadog_dashboard.screen",
// 			"datadog_dashboard.time",
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type DashboardList struct {
	pulumi.CustomResourceState

	// An individual dashboard object to add to this Dashboard List. If present, must contain the following:
	DashItems DashboardListDashItemArrayOutput `pulumi:"dashItems"`
	// The name of this Dashbaord List.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewDashboardList registers a new resource with the given unique name, arguments, and options.
func NewDashboardList(ctx *pulumi.Context,
	name string, args *DashboardListArgs, opts ...pulumi.ResourceOption) (*DashboardList, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil {
		args = &DashboardListArgs{}
	}
	var resource DashboardList
	err := ctx.RegisterResource("datadog:index/dashboardList:DashboardList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboardList gets an existing DashboardList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboardList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardListState, opts ...pulumi.ResourceOption) (*DashboardList, error) {
	var resource DashboardList
	err := ctx.ReadResource("datadog:index/dashboardList:DashboardList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DashboardList resources.
type dashboardListState struct {
	// An individual dashboard object to add to this Dashboard List. If present, must contain the following:
	DashItems []DashboardListDashItem `pulumi:"dashItems"`
	// The name of this Dashbaord List.
	Name *string `pulumi:"name"`
}

type DashboardListState struct {
	// An individual dashboard object to add to this Dashboard List. If present, must contain the following:
	DashItems DashboardListDashItemArrayInput
	// The name of this Dashbaord List.
	Name pulumi.StringPtrInput
}

func (DashboardListState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardListState)(nil)).Elem()
}

type dashboardListArgs struct {
	// An individual dashboard object to add to this Dashboard List. If present, must contain the following:
	DashItems []DashboardListDashItem `pulumi:"dashItems"`
	// The name of this Dashbaord List.
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a DashboardList resource.
type DashboardListArgs struct {
	// An individual dashboard object to add to this Dashboard List. If present, must contain the following:
	DashItems DashboardListDashItemArrayInput
	// The name of this Dashbaord List.
	Name pulumi.StringInput
}

func (DashboardListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardListArgs)(nil)).Elem()
}
