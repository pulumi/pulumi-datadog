// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog OpenapiApi resource. This can be used to create and manage Datadog openapi_api.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"os"
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create new openapi_api resource
//			_, err := datadog.NewOpenapiApi(ctx, "my-api", &datadog.OpenapiApiArgs{
//				Spec: readFileOrPanic("./path/my-api.yaml"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// ```sh
// $ pulumi import datadog:index/openapiApi:OpenapiApi new_list "90646597-5fdb-4a17-a240-647003f8c028"
// ```
type OpenapiApi struct {
	pulumi.CustomResourceState

	// The OpenAPI spec.
	Spec pulumi.StringOutput `pulumi:"spec"`
}

// NewOpenapiApi registers a new resource with the given unique name, arguments, and options.
func NewOpenapiApi(ctx *pulumi.Context,
	name string, args *OpenapiApiArgs, opts ...pulumi.ResourceOption) (*OpenapiApi, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenapiApi
	err := ctx.RegisterResource("datadog:index/openapiApi:OpenapiApi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenapiApi gets an existing OpenapiApi resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenapiApi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenapiApiState, opts ...pulumi.ResourceOption) (*OpenapiApi, error) {
	var resource OpenapiApi
	err := ctx.ReadResource("datadog:index/openapiApi:OpenapiApi", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenapiApi resources.
type openapiApiState struct {
	// The OpenAPI spec.
	Spec *string `pulumi:"spec"`
}

type OpenapiApiState struct {
	// The OpenAPI spec.
	Spec pulumi.StringPtrInput
}

func (OpenapiApiState) ElementType() reflect.Type {
	return reflect.TypeOf((*openapiApiState)(nil)).Elem()
}

type openapiApiArgs struct {
	// The OpenAPI spec.
	Spec string `pulumi:"spec"`
}

// The set of arguments for constructing a OpenapiApi resource.
type OpenapiApiArgs struct {
	// The OpenAPI spec.
	Spec pulumi.StringInput
}

func (OpenapiApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openapiApiArgs)(nil)).Elem()
}

type OpenapiApiInput interface {
	pulumi.Input

	ToOpenapiApiOutput() OpenapiApiOutput
	ToOpenapiApiOutputWithContext(ctx context.Context) OpenapiApiOutput
}

func (*OpenapiApi) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenapiApi)(nil)).Elem()
}

func (i *OpenapiApi) ToOpenapiApiOutput() OpenapiApiOutput {
	return i.ToOpenapiApiOutputWithContext(context.Background())
}

func (i *OpenapiApi) ToOpenapiApiOutputWithContext(ctx context.Context) OpenapiApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenapiApiOutput)
}

// OpenapiApiArrayInput is an input type that accepts OpenapiApiArray and OpenapiApiArrayOutput values.
// You can construct a concrete instance of `OpenapiApiArrayInput` via:
//
//	OpenapiApiArray{ OpenapiApiArgs{...} }
type OpenapiApiArrayInput interface {
	pulumi.Input

	ToOpenapiApiArrayOutput() OpenapiApiArrayOutput
	ToOpenapiApiArrayOutputWithContext(context.Context) OpenapiApiArrayOutput
}

type OpenapiApiArray []OpenapiApiInput

func (OpenapiApiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenapiApi)(nil)).Elem()
}

func (i OpenapiApiArray) ToOpenapiApiArrayOutput() OpenapiApiArrayOutput {
	return i.ToOpenapiApiArrayOutputWithContext(context.Background())
}

func (i OpenapiApiArray) ToOpenapiApiArrayOutputWithContext(ctx context.Context) OpenapiApiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenapiApiArrayOutput)
}

// OpenapiApiMapInput is an input type that accepts OpenapiApiMap and OpenapiApiMapOutput values.
// You can construct a concrete instance of `OpenapiApiMapInput` via:
//
//	OpenapiApiMap{ "key": OpenapiApiArgs{...} }
type OpenapiApiMapInput interface {
	pulumi.Input

	ToOpenapiApiMapOutput() OpenapiApiMapOutput
	ToOpenapiApiMapOutputWithContext(context.Context) OpenapiApiMapOutput
}

type OpenapiApiMap map[string]OpenapiApiInput

func (OpenapiApiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenapiApi)(nil)).Elem()
}

func (i OpenapiApiMap) ToOpenapiApiMapOutput() OpenapiApiMapOutput {
	return i.ToOpenapiApiMapOutputWithContext(context.Background())
}

func (i OpenapiApiMap) ToOpenapiApiMapOutputWithContext(ctx context.Context) OpenapiApiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenapiApiMapOutput)
}

type OpenapiApiOutput struct{ *pulumi.OutputState }

func (OpenapiApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenapiApi)(nil)).Elem()
}

func (o OpenapiApiOutput) ToOpenapiApiOutput() OpenapiApiOutput {
	return o
}

func (o OpenapiApiOutput) ToOpenapiApiOutputWithContext(ctx context.Context) OpenapiApiOutput {
	return o
}

// The OpenAPI spec.
func (o OpenapiApiOutput) Spec() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenapiApi) pulumi.StringOutput { return v.Spec }).(pulumi.StringOutput)
}

type OpenapiApiArrayOutput struct{ *pulumi.OutputState }

func (OpenapiApiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenapiApi)(nil)).Elem()
}

func (o OpenapiApiArrayOutput) ToOpenapiApiArrayOutput() OpenapiApiArrayOutput {
	return o
}

func (o OpenapiApiArrayOutput) ToOpenapiApiArrayOutputWithContext(ctx context.Context) OpenapiApiArrayOutput {
	return o
}

func (o OpenapiApiArrayOutput) Index(i pulumi.IntInput) OpenapiApiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenapiApi {
		return vs[0].([]*OpenapiApi)[vs[1].(int)]
	}).(OpenapiApiOutput)
}

type OpenapiApiMapOutput struct{ *pulumi.OutputState }

func (OpenapiApiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenapiApi)(nil)).Elem()
}

func (o OpenapiApiMapOutput) ToOpenapiApiMapOutput() OpenapiApiMapOutput {
	return o
}

func (o OpenapiApiMapOutput) ToOpenapiApiMapOutputWithContext(ctx context.Context) OpenapiApiMapOutput {
	return o
}

func (o OpenapiApiMapOutput) MapIndex(k pulumi.StringInput) OpenapiApiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenapiApi {
		return vs[0].(map[string]*OpenapiApi)[vs[1].(string)]
	}).(OpenapiApiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenapiApiInput)(nil)).Elem(), &OpenapiApi{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenapiApiArrayInput)(nil)).Elem(), OpenapiApiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenapiApiMapInput)(nil)).Elem(), OpenapiApiMap{})
	pulumi.RegisterOutputType(OpenapiApiOutput{})
	pulumi.RegisterOutputType(OpenapiApiArrayOutput{})
	pulumi.RegisterOutputType(OpenapiApiMapOutput{})
}
