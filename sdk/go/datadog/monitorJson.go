// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Datadog monitor JSON resource. This can be used to create and manage Datadog monitors using the JSON definition.
//
// ## Import
//
// ```sh
//
//	$ pulumi import datadog:index/monitorJson:MonitorJson monitor_json 123456
//
// ```
type MonitorJson struct {
	pulumi.CustomResourceState

	// The JSON formatted definition of the monitor.
	Monitor pulumi.StringOutput `pulumi:"monitor"`
	// The URL of the monitor.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewMonitorJson registers a new resource with the given unique name, arguments, and options.
func NewMonitorJson(ctx *pulumi.Context,
	name string, args *MonitorJsonArgs, opts ...pulumi.ResourceOption) (*MonitorJson, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Monitor == nil {
		return nil, errors.New("invalid value for required argument 'Monitor'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MonitorJson
	err := ctx.RegisterResource("datadog:index/monitorJson:MonitorJson", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitorJson gets an existing MonitorJson resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitorJson(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitorJsonState, opts ...pulumi.ResourceOption) (*MonitorJson, error) {
	var resource MonitorJson
	err := ctx.ReadResource("datadog:index/monitorJson:MonitorJson", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitorJson resources.
type monitorJsonState struct {
	// The JSON formatted definition of the monitor.
	Monitor *string `pulumi:"monitor"`
	// The URL of the monitor.
	Url *string `pulumi:"url"`
}

type MonitorJsonState struct {
	// The JSON formatted definition of the monitor.
	Monitor pulumi.StringPtrInput
	// The URL of the monitor.
	Url pulumi.StringPtrInput
}

func (MonitorJsonState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorJsonState)(nil)).Elem()
}

type monitorJsonArgs struct {
	// The JSON formatted definition of the monitor.
	Monitor string `pulumi:"monitor"`
	// The URL of the monitor.
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a MonitorJson resource.
type MonitorJsonArgs struct {
	// The JSON formatted definition of the monitor.
	Monitor pulumi.StringInput
	// The URL of the monitor.
	Url pulumi.StringPtrInput
}

func (MonitorJsonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorJsonArgs)(nil)).Elem()
}

type MonitorJsonInput interface {
	pulumi.Input

	ToMonitorJsonOutput() MonitorJsonOutput
	ToMonitorJsonOutputWithContext(ctx context.Context) MonitorJsonOutput
}

func (*MonitorJson) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorJson)(nil)).Elem()
}

func (i *MonitorJson) ToMonitorJsonOutput() MonitorJsonOutput {
	return i.ToMonitorJsonOutputWithContext(context.Background())
}

func (i *MonitorJson) ToMonitorJsonOutputWithContext(ctx context.Context) MonitorJsonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorJsonOutput)
}

func (i *MonitorJson) ToOutput(ctx context.Context) pulumix.Output[*MonitorJson] {
	return pulumix.Output[*MonitorJson]{
		OutputState: i.ToMonitorJsonOutputWithContext(ctx).OutputState,
	}
}

// MonitorJsonArrayInput is an input type that accepts MonitorJsonArray and MonitorJsonArrayOutput values.
// You can construct a concrete instance of `MonitorJsonArrayInput` via:
//
//	MonitorJsonArray{ MonitorJsonArgs{...} }
type MonitorJsonArrayInput interface {
	pulumi.Input

	ToMonitorJsonArrayOutput() MonitorJsonArrayOutput
	ToMonitorJsonArrayOutputWithContext(context.Context) MonitorJsonArrayOutput
}

type MonitorJsonArray []MonitorJsonInput

func (MonitorJsonArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitorJson)(nil)).Elem()
}

func (i MonitorJsonArray) ToMonitorJsonArrayOutput() MonitorJsonArrayOutput {
	return i.ToMonitorJsonArrayOutputWithContext(context.Background())
}

func (i MonitorJsonArray) ToMonitorJsonArrayOutputWithContext(ctx context.Context) MonitorJsonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorJsonArrayOutput)
}

func (i MonitorJsonArray) ToOutput(ctx context.Context) pulumix.Output[[]*MonitorJson] {
	return pulumix.Output[[]*MonitorJson]{
		OutputState: i.ToMonitorJsonArrayOutputWithContext(ctx).OutputState,
	}
}

// MonitorJsonMapInput is an input type that accepts MonitorJsonMap and MonitorJsonMapOutput values.
// You can construct a concrete instance of `MonitorJsonMapInput` via:
//
//	MonitorJsonMap{ "key": MonitorJsonArgs{...} }
type MonitorJsonMapInput interface {
	pulumi.Input

	ToMonitorJsonMapOutput() MonitorJsonMapOutput
	ToMonitorJsonMapOutputWithContext(context.Context) MonitorJsonMapOutput
}

type MonitorJsonMap map[string]MonitorJsonInput

func (MonitorJsonMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitorJson)(nil)).Elem()
}

func (i MonitorJsonMap) ToMonitorJsonMapOutput() MonitorJsonMapOutput {
	return i.ToMonitorJsonMapOutputWithContext(context.Background())
}

func (i MonitorJsonMap) ToMonitorJsonMapOutputWithContext(ctx context.Context) MonitorJsonMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorJsonMapOutput)
}

func (i MonitorJsonMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*MonitorJson] {
	return pulumix.Output[map[string]*MonitorJson]{
		OutputState: i.ToMonitorJsonMapOutputWithContext(ctx).OutputState,
	}
}

type MonitorJsonOutput struct{ *pulumi.OutputState }

func (MonitorJsonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorJson)(nil)).Elem()
}

func (o MonitorJsonOutput) ToMonitorJsonOutput() MonitorJsonOutput {
	return o
}

func (o MonitorJsonOutput) ToMonitorJsonOutputWithContext(ctx context.Context) MonitorJsonOutput {
	return o
}

func (o MonitorJsonOutput) ToOutput(ctx context.Context) pulumix.Output[*MonitorJson] {
	return pulumix.Output[*MonitorJson]{
		OutputState: o.OutputState,
	}
}

// The JSON formatted definition of the monitor.
func (o MonitorJsonOutput) Monitor() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitorJson) pulumi.StringOutput { return v.Monitor }).(pulumi.StringOutput)
}

// The URL of the monitor.
func (o MonitorJsonOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitorJson) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type MonitorJsonArrayOutput struct{ *pulumi.OutputState }

func (MonitorJsonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitorJson)(nil)).Elem()
}

func (o MonitorJsonArrayOutput) ToMonitorJsonArrayOutput() MonitorJsonArrayOutput {
	return o
}

func (o MonitorJsonArrayOutput) ToMonitorJsonArrayOutputWithContext(ctx context.Context) MonitorJsonArrayOutput {
	return o
}

func (o MonitorJsonArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*MonitorJson] {
	return pulumix.Output[[]*MonitorJson]{
		OutputState: o.OutputState,
	}
}

func (o MonitorJsonArrayOutput) Index(i pulumi.IntInput) MonitorJsonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MonitorJson {
		return vs[0].([]*MonitorJson)[vs[1].(int)]
	}).(MonitorJsonOutput)
}

type MonitorJsonMapOutput struct{ *pulumi.OutputState }

func (MonitorJsonMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitorJson)(nil)).Elem()
}

func (o MonitorJsonMapOutput) ToMonitorJsonMapOutput() MonitorJsonMapOutput {
	return o
}

func (o MonitorJsonMapOutput) ToMonitorJsonMapOutputWithContext(ctx context.Context) MonitorJsonMapOutput {
	return o
}

func (o MonitorJsonMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*MonitorJson] {
	return pulumix.Output[map[string]*MonitorJson]{
		OutputState: o.OutputState,
	}
}

func (o MonitorJsonMapOutput) MapIndex(k pulumi.StringInput) MonitorJsonOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MonitorJson {
		return vs[0].(map[string]*MonitorJson)[vs[1].(string)]
	}).(MonitorJsonOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorJsonInput)(nil)).Elem(), &MonitorJson{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorJsonArrayInput)(nil)).Elem(), MonitorJsonArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorJsonMapInput)(nil)).Elem(), MonitorJsonMap{})
	pulumi.RegisterOutputType(MonitorJsonOutput{})
	pulumi.RegisterOutputType(MonitorJsonArrayOutput{})
	pulumi.RegisterOutputType(MonitorJsonMapOutput{})
}
