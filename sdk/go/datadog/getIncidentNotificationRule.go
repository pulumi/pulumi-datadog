// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve information about an existing incident notification rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.LookupIncidentNotificationRule(ctx, &datadog.LookupIncidentNotificationRuleArgs{
//				Id: "00000000-0000-0000-0000-000000000000",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupIncidentNotificationRule(ctx *pulumi.Context, args *LookupIncidentNotificationRuleArgs, opts ...pulumi.InvokeOption) (*LookupIncidentNotificationRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIncidentNotificationRuleResult
	err := ctx.Invoke("datadog:index/getIncidentNotificationRule:getIncidentNotificationRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIncidentNotificationRule.
type LookupIncidentNotificationRuleArgs struct {
	// The conditions that trigger this notification rule.
	Conditions []GetIncidentNotificationRuleCondition `pulumi:"conditions"`
	// The ID of the incident notification rule.
	Id string `pulumi:"id"`
}

// A collection of values returned by getIncidentNotificationRule.
type LookupIncidentNotificationRuleResult struct {
	// The conditions that trigger this notification rule.
	Conditions []GetIncidentNotificationRuleCondition `pulumi:"conditions"`
	// Timestamp when the notification rule was created.
	Created string `pulumi:"created"`
	// Whether the notification rule is enabled.
	Enabled bool `pulumi:"enabled"`
	// The notification handles (targets) for this rule.
	Handles []string `pulumi:"handles"`
	// The ID of the incident notification rule.
	Id string `pulumi:"id"`
	// The ID of the incident type this notification rule is associated with.
	IncidentType string `pulumi:"incidentType"`
	// Timestamp when the notification rule was last modified.
	Modified string `pulumi:"modified"`
	// The ID of the notification template used by this rule.
	NotificationTemplate string `pulumi:"notificationTemplate"`
	// List of incident fields that trigger re-notification when changed.
	RenotifyOns []string `pulumi:"renotifyOns"`
	// The trigger event for this notification rule.
	Trigger string `pulumi:"trigger"`
	// The visibility of the notification rule. Valid values are: all, organization, private.
	Visibility string `pulumi:"visibility"`
}

func LookupIncidentNotificationRuleOutput(ctx *pulumi.Context, args LookupIncidentNotificationRuleOutputArgs, opts ...pulumi.InvokeOption) LookupIncidentNotificationRuleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupIncidentNotificationRuleResultOutput, error) {
			args := v.(LookupIncidentNotificationRuleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("datadog:index/getIncidentNotificationRule:getIncidentNotificationRule", args, LookupIncidentNotificationRuleResultOutput{}, options).(LookupIncidentNotificationRuleResultOutput), nil
		}).(LookupIncidentNotificationRuleResultOutput)
}

// A collection of arguments for invoking getIncidentNotificationRule.
type LookupIncidentNotificationRuleOutputArgs struct {
	// The conditions that trigger this notification rule.
	Conditions GetIncidentNotificationRuleConditionArrayInput `pulumi:"conditions"`
	// The ID of the incident notification rule.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupIncidentNotificationRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIncidentNotificationRuleArgs)(nil)).Elem()
}

// A collection of values returned by getIncidentNotificationRule.
type LookupIncidentNotificationRuleResultOutput struct{ *pulumi.OutputState }

func (LookupIncidentNotificationRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIncidentNotificationRuleResult)(nil)).Elem()
}

func (o LookupIncidentNotificationRuleResultOutput) ToLookupIncidentNotificationRuleResultOutput() LookupIncidentNotificationRuleResultOutput {
	return o
}

func (o LookupIncidentNotificationRuleResultOutput) ToLookupIncidentNotificationRuleResultOutputWithContext(ctx context.Context) LookupIncidentNotificationRuleResultOutput {
	return o
}

// The conditions that trigger this notification rule.
func (o LookupIncidentNotificationRuleResultOutput) Conditions() GetIncidentNotificationRuleConditionArrayOutput {
	return o.ApplyT(func(v LookupIncidentNotificationRuleResult) []GetIncidentNotificationRuleCondition {
		return v.Conditions
	}).(GetIncidentNotificationRuleConditionArrayOutput)
}

// Timestamp when the notification rule was created.
func (o LookupIncidentNotificationRuleResultOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIncidentNotificationRuleResult) string { return v.Created }).(pulumi.StringOutput)
}

// Whether the notification rule is enabled.
func (o LookupIncidentNotificationRuleResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIncidentNotificationRuleResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The notification handles (targets) for this rule.
func (o LookupIncidentNotificationRuleResultOutput) Handles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupIncidentNotificationRuleResult) []string { return v.Handles }).(pulumi.StringArrayOutput)
}

// The ID of the incident notification rule.
func (o LookupIncidentNotificationRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIncidentNotificationRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the incident type this notification rule is associated with.
func (o LookupIncidentNotificationRuleResultOutput) IncidentType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIncidentNotificationRuleResult) string { return v.IncidentType }).(pulumi.StringOutput)
}

// Timestamp when the notification rule was last modified.
func (o LookupIncidentNotificationRuleResultOutput) Modified() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIncidentNotificationRuleResult) string { return v.Modified }).(pulumi.StringOutput)
}

// The ID of the notification template used by this rule.
func (o LookupIncidentNotificationRuleResultOutput) NotificationTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIncidentNotificationRuleResult) string { return v.NotificationTemplate }).(pulumi.StringOutput)
}

// List of incident fields that trigger re-notification when changed.
func (o LookupIncidentNotificationRuleResultOutput) RenotifyOns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupIncidentNotificationRuleResult) []string { return v.RenotifyOns }).(pulumi.StringArrayOutput)
}

// The trigger event for this notification rule.
func (o LookupIncidentNotificationRuleResultOutput) Trigger() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIncidentNotificationRuleResult) string { return v.Trigger }).(pulumi.StringOutput)
}

// The visibility of the notification rule. Valid values are: all, organization, private.
func (o LookupIncidentNotificationRuleResultOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIncidentNotificationRuleResult) string { return v.Visibility }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIncidentNotificationRuleResultOutput{})
}
