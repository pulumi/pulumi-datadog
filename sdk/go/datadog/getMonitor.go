// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve information about an existing monitor for use in other resources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v3/go/datadog"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "My awesome monitor"
// 		_, err := datadog.LookupMonitor(ctx, &datadog.LookupMonitorArgs{
// 			MonitorTagsFilters: []string{
// 				"foo:bar",
// 			},
// 			NameFilter: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// <!-- schema generated by tfplugindocs -->
// ## Schema
//
// ### Optional
//
// - **monitor_tags_filter** (List of String) A list of monitor tags to limit the search. This filters on the tags set on the monitor itself.
// - **name_filter** (String) A monitor name to limit the search.
// - **tags_filter** (List of String) A list of tags to limit the search. This filters on the monitor scope.
//
// ### Read-Only
//
// - **enable_logs_sample** (Boolean) Whether or not a list of log values which triggered the alert is included. This is only used by log monitors.
// - **escalation_message** (String) Message included with a re-notification for this monitor.
// - **evaluation_delay** (Number) Time (in seconds) for which evaluation is delayed. This is only used by metric monitors.
// - **groupby_simple_monitor** (Boolean) Whether or not to trigger one alert if any source breaches a threshold.
// - **id** (String) The ID of this resource.
// - **include_tags** (Boolean) Whether or not notifications from the monitor automatically inserts its triggering tags into the title.
// - **locked** (Boolean) Whether or not changes to the monitor are restricted to the creator or admins.
// - **message** (String) Message included with notifications for this monitor
// - **monitor_threshold_windows** (List of Object) Mapping containing `recoveryWindow` and `triggerWindow` values, e.g. `last15m`. This is only used by anomaly monitors. (see below for nested schema)
// - **monitor_thresholds** (List of Object) Alert thresholds of the monitor. (see below for nested schema)
// - **name** (String) Name of the monitor
// - **new_host_delay** (Number) Time (in seconds) allowing a host to boot and applications to fully start before starting the evaluation of monitor results.
// - **no_data_timeframe** (Number) The number of minutes before the monitor notifies when data stops reporting.
// - **notify_audit** (Boolean) Whether or not tagged users are notified on changes to the monitor.
// - **notify_no_data** (Boolean) Whether or not this monitor notifies when data stops reporting.
// - **query** (String) Query of the monitor.
// - **renotify_interval** (Number) The number of minutes after the last notification before the monitor re-notifies on the current status.
// - **require_full_window** (Boolean) Whether or not the monitor needs a full window of data before it is evaluated.
// - **tags** (Set of String) List of tags associated with the monitor.
// - **threshold_windows** (Map of String, Deprecated) Mapping containing `recoveryWindow` and `triggerWindow` values, e.g. `last15m`. This is only used by anomaly monitors. **Deprecated.** Define `monitorThresholdWindows` list with one element instead.
// - **thresholds** (Map of String, Deprecated) Alert thresholds of the monitor. **Deprecated.** Define `monitorThresholds` list with one element instead.
// - **timeout_h** (Number) Number of hours of the monitor not reporting data before it automatically resolves from a triggered state.
// - **type** (String) Type of the monitor.
//
// <a id="nestedatt--monitor_threshold_windows"></a>
func LookupMonitor(ctx *pulumi.Context, args *LookupMonitorArgs, opts ...pulumi.InvokeOption) (*LookupMonitorResult, error) {
	var rv LookupMonitorResult
	err := ctx.Invoke("datadog:index/getMonitor:getMonitor", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMonitor.
type LookupMonitorArgs struct {
	MonitorTagsFilters []string `pulumi:"monitorTagsFilters"`
	NameFilter         *string  `pulumi:"nameFilter"`
	TagsFilters        []string `pulumi:"tagsFilters"`
}

// A collection of values returned by getMonitor.
type LookupMonitorResult struct {
	EnableLogsSample     bool   `pulumi:"enableLogsSample"`
	EscalationMessage    string `pulumi:"escalationMessage"`
	EvaluationDelay      int    `pulumi:"evaluationDelay"`
	GroupbySimpleMonitor bool   `pulumi:"groupbySimpleMonitor"`
	// The provider-assigned unique ID for this managed resource.
	Id                      string                            `pulumi:"id"`
	IncludeTags             bool                              `pulumi:"includeTags"`
	Locked                  bool                              `pulumi:"locked"`
	Message                 string                            `pulumi:"message"`
	MonitorTagsFilters      []string                          `pulumi:"monitorTagsFilters"`
	MonitorThresholdWindows GetMonitorMonitorThresholdWindows `pulumi:"monitorThresholdWindows"`
	MonitorThresholds       GetMonitorMonitorThresholds       `pulumi:"monitorThresholds"`
	Name                    string                            `pulumi:"name"`
	NameFilter              *string                           `pulumi:"nameFilter"`
	NewHostDelay            int                               `pulumi:"newHostDelay"`
	NoDataTimeframe         int                               `pulumi:"noDataTimeframe"`
	NotifyAudit             bool                              `pulumi:"notifyAudit"`
	NotifyNoData            bool                              `pulumi:"notifyNoData"`
	Query                   string                            `pulumi:"query"`
	RenotifyInterval        int                               `pulumi:"renotifyInterval"`
	RequireFullWindow       bool                              `pulumi:"requireFullWindow"`
	Tags                    []string                          `pulumi:"tags"`
	TagsFilters             []string                          `pulumi:"tagsFilters"`
	// Deprecated: Define `monitor_threshold_windows` list with one element instead.
	ThresholdWindows GetMonitorThresholdWindows `pulumi:"thresholdWindows"`
	// Deprecated: Define `monitor_thresholds` list with one element instead.
	Thresholds GetMonitorThresholds `pulumi:"thresholds"`
	TimeoutH   int                  `pulumi:"timeoutH"`
	Type       string               `pulumi:"type"`
}
