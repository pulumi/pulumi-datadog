// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog TeamPermissionSetting resource. This can be used to manage Datadog team_permission_setting.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := datadog.NewTeam(ctx, "foo", &datadog.TeamArgs{
//				Description: pulumi.String("Example team"),
//				Handle:      pulumi.String("example-team-updated"),
//				Name:        pulumi.String("Example Team-updated"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datadog.NewTeamPermissionSetting(ctx, "foo", &datadog.TeamPermissionSettingArgs{
//				TeamId: foo.ID(),
//				Action: pulumi.String("manage_membership"),
//				Value:  pulumi.String("organization"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type TeamPermissionSetting struct {
	pulumi.CustomResourceState

	// The identifier for the action. Valid values are `manageMembership`, `edit`.
	Action pulumi.StringOutput `pulumi:"action"`
	// ID of the team the team permission setting is associated with.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// The action value. Valid values are `admins`, `members`, `organization`, `userAccessManage`, `teamsManage`.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewTeamPermissionSetting registers a new resource with the given unique name, arguments, and options.
func NewTeamPermissionSetting(ctx *pulumi.Context,
	name string, args *TeamPermissionSettingArgs, opts ...pulumi.ResourceOption) (*TeamPermissionSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TeamPermissionSetting
	err := ctx.RegisterResource("datadog:index/teamPermissionSetting:TeamPermissionSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamPermissionSetting gets an existing TeamPermissionSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamPermissionSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamPermissionSettingState, opts ...pulumi.ResourceOption) (*TeamPermissionSetting, error) {
	var resource TeamPermissionSetting
	err := ctx.ReadResource("datadog:index/teamPermissionSetting:TeamPermissionSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamPermissionSetting resources.
type teamPermissionSettingState struct {
	// The identifier for the action. Valid values are `manageMembership`, `edit`.
	Action *string `pulumi:"action"`
	// ID of the team the team permission setting is associated with.
	TeamId *string `pulumi:"teamId"`
	// The action value. Valid values are `admins`, `members`, `organization`, `userAccessManage`, `teamsManage`.
	Value *string `pulumi:"value"`
}

type TeamPermissionSettingState struct {
	// The identifier for the action. Valid values are `manageMembership`, `edit`.
	Action pulumi.StringPtrInput
	// ID of the team the team permission setting is associated with.
	TeamId pulumi.StringPtrInput
	// The action value. Valid values are `admins`, `members`, `organization`, `userAccessManage`, `teamsManage`.
	Value pulumi.StringPtrInput
}

func (TeamPermissionSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamPermissionSettingState)(nil)).Elem()
}

type teamPermissionSettingArgs struct {
	// The identifier for the action. Valid values are `manageMembership`, `edit`.
	Action string `pulumi:"action"`
	// ID of the team the team permission setting is associated with.
	TeamId string `pulumi:"teamId"`
	// The action value. Valid values are `admins`, `members`, `organization`, `userAccessManage`, `teamsManage`.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a TeamPermissionSetting resource.
type TeamPermissionSettingArgs struct {
	// The identifier for the action. Valid values are `manageMembership`, `edit`.
	Action pulumi.StringInput
	// ID of the team the team permission setting is associated with.
	TeamId pulumi.StringInput
	// The action value. Valid values are `admins`, `members`, `organization`, `userAccessManage`, `teamsManage`.
	Value pulumi.StringInput
}

func (TeamPermissionSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamPermissionSettingArgs)(nil)).Elem()
}

type TeamPermissionSettingInput interface {
	pulumi.Input

	ToTeamPermissionSettingOutput() TeamPermissionSettingOutput
	ToTeamPermissionSettingOutputWithContext(ctx context.Context) TeamPermissionSettingOutput
}

func (*TeamPermissionSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamPermissionSetting)(nil)).Elem()
}

func (i *TeamPermissionSetting) ToTeamPermissionSettingOutput() TeamPermissionSettingOutput {
	return i.ToTeamPermissionSettingOutputWithContext(context.Background())
}

func (i *TeamPermissionSetting) ToTeamPermissionSettingOutputWithContext(ctx context.Context) TeamPermissionSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamPermissionSettingOutput)
}

// TeamPermissionSettingArrayInput is an input type that accepts TeamPermissionSettingArray and TeamPermissionSettingArrayOutput values.
// You can construct a concrete instance of `TeamPermissionSettingArrayInput` via:
//
//	TeamPermissionSettingArray{ TeamPermissionSettingArgs{...} }
type TeamPermissionSettingArrayInput interface {
	pulumi.Input

	ToTeamPermissionSettingArrayOutput() TeamPermissionSettingArrayOutput
	ToTeamPermissionSettingArrayOutputWithContext(context.Context) TeamPermissionSettingArrayOutput
}

type TeamPermissionSettingArray []TeamPermissionSettingInput

func (TeamPermissionSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamPermissionSetting)(nil)).Elem()
}

func (i TeamPermissionSettingArray) ToTeamPermissionSettingArrayOutput() TeamPermissionSettingArrayOutput {
	return i.ToTeamPermissionSettingArrayOutputWithContext(context.Background())
}

func (i TeamPermissionSettingArray) ToTeamPermissionSettingArrayOutputWithContext(ctx context.Context) TeamPermissionSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamPermissionSettingArrayOutput)
}

// TeamPermissionSettingMapInput is an input type that accepts TeamPermissionSettingMap and TeamPermissionSettingMapOutput values.
// You can construct a concrete instance of `TeamPermissionSettingMapInput` via:
//
//	TeamPermissionSettingMap{ "key": TeamPermissionSettingArgs{...} }
type TeamPermissionSettingMapInput interface {
	pulumi.Input

	ToTeamPermissionSettingMapOutput() TeamPermissionSettingMapOutput
	ToTeamPermissionSettingMapOutputWithContext(context.Context) TeamPermissionSettingMapOutput
}

type TeamPermissionSettingMap map[string]TeamPermissionSettingInput

func (TeamPermissionSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamPermissionSetting)(nil)).Elem()
}

func (i TeamPermissionSettingMap) ToTeamPermissionSettingMapOutput() TeamPermissionSettingMapOutput {
	return i.ToTeamPermissionSettingMapOutputWithContext(context.Background())
}

func (i TeamPermissionSettingMap) ToTeamPermissionSettingMapOutputWithContext(ctx context.Context) TeamPermissionSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamPermissionSettingMapOutput)
}

type TeamPermissionSettingOutput struct{ *pulumi.OutputState }

func (TeamPermissionSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamPermissionSetting)(nil)).Elem()
}

func (o TeamPermissionSettingOutput) ToTeamPermissionSettingOutput() TeamPermissionSettingOutput {
	return o
}

func (o TeamPermissionSettingOutput) ToTeamPermissionSettingOutputWithContext(ctx context.Context) TeamPermissionSettingOutput {
	return o
}

// The identifier for the action. Valid values are `manageMembership`, `edit`.
func (o TeamPermissionSettingOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamPermissionSetting) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// ID of the team the team permission setting is associated with.
func (o TeamPermissionSettingOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamPermissionSetting) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// The action value. Valid values are `admins`, `members`, `organization`, `userAccessManage`, `teamsManage`.
func (o TeamPermissionSettingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamPermissionSetting) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type TeamPermissionSettingArrayOutput struct{ *pulumi.OutputState }

func (TeamPermissionSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamPermissionSetting)(nil)).Elem()
}

func (o TeamPermissionSettingArrayOutput) ToTeamPermissionSettingArrayOutput() TeamPermissionSettingArrayOutput {
	return o
}

func (o TeamPermissionSettingArrayOutput) ToTeamPermissionSettingArrayOutputWithContext(ctx context.Context) TeamPermissionSettingArrayOutput {
	return o
}

func (o TeamPermissionSettingArrayOutput) Index(i pulumi.IntInput) TeamPermissionSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamPermissionSetting {
		return vs[0].([]*TeamPermissionSetting)[vs[1].(int)]
	}).(TeamPermissionSettingOutput)
}

type TeamPermissionSettingMapOutput struct{ *pulumi.OutputState }

func (TeamPermissionSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamPermissionSetting)(nil)).Elem()
}

func (o TeamPermissionSettingMapOutput) ToTeamPermissionSettingMapOutput() TeamPermissionSettingMapOutput {
	return o
}

func (o TeamPermissionSettingMapOutput) ToTeamPermissionSettingMapOutputWithContext(ctx context.Context) TeamPermissionSettingMapOutput {
	return o
}

func (o TeamPermissionSettingMapOutput) MapIndex(k pulumi.StringInput) TeamPermissionSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamPermissionSetting {
		return vs[0].(map[string]*TeamPermissionSetting)[vs[1].(string)]
	}).(TeamPermissionSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamPermissionSettingInput)(nil)).Elem(), &TeamPermissionSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamPermissionSettingArrayInput)(nil)).Elem(), TeamPermissionSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamPermissionSettingMapInput)(nil)).Elem(), TeamPermissionSettingMap{})
	pulumi.RegisterOutputType(TeamPermissionSettingOutput{})
	pulumi.RegisterOutputType(TeamPermissionSettingArrayOutput{})
	pulumi.RegisterOutputType(TeamPermissionSettingMapOutput{})
}
