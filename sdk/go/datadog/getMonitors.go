// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to list several existing monitors for use in other resources.
func GetMonitors(ctx *pulumi.Context, args *GetMonitorsArgs, opts ...pulumi.InvokeOption) (*GetMonitorsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMonitorsResult
	err := ctx.Invoke("datadog:index/getMonitors:getMonitors", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMonitors.
type GetMonitorsArgs struct {
	// A list of monitor tags to limit the search. This filters on the tags set on the monitor itself.
	MonitorTagsFilters []string `pulumi:"monitorTagsFilters"`
	// A monitor name to limit the search.
	NameFilter *string `pulumi:"nameFilter"`
	// A list of tags to limit the search. This filters on the monitor scope.
	TagsFilters []string `pulumi:"tagsFilters"`
}

// A collection of values returned by getMonitors.
type GetMonitorsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A list of monitor tags to limit the search. This filters on the tags set on the monitor itself.
	MonitorTagsFilters []string `pulumi:"monitorTagsFilters"`
	// List of monitors
	Monitors []GetMonitorsMonitor `pulumi:"monitors"`
	// A monitor name to limit the search.
	NameFilter *string `pulumi:"nameFilter"`
	// A list of tags to limit the search. This filters on the monitor scope.
	TagsFilters []string `pulumi:"tagsFilters"`
}

func GetMonitorsOutput(ctx *pulumi.Context, args GetMonitorsOutputArgs, opts ...pulumi.InvokeOption) GetMonitorsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetMonitorsResultOutput, error) {
			args := v.(GetMonitorsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetMonitorsResult
			secret, err := ctx.InvokePackageRaw("datadog:index/getMonitors:getMonitors", args, &rv, "", opts...)
			if err != nil {
				return GetMonitorsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetMonitorsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetMonitorsResultOutput), nil
			}
			return output, nil
		}).(GetMonitorsResultOutput)
}

// A collection of arguments for invoking getMonitors.
type GetMonitorsOutputArgs struct {
	// A list of monitor tags to limit the search. This filters on the tags set on the monitor itself.
	MonitorTagsFilters pulumi.StringArrayInput `pulumi:"monitorTagsFilters"`
	// A monitor name to limit the search.
	NameFilter pulumi.StringPtrInput `pulumi:"nameFilter"`
	// A list of tags to limit the search. This filters on the monitor scope.
	TagsFilters pulumi.StringArrayInput `pulumi:"tagsFilters"`
}

func (GetMonitorsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorsArgs)(nil)).Elem()
}

// A collection of values returned by getMonitors.
type GetMonitorsResultOutput struct{ *pulumi.OutputState }

func (GetMonitorsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorsResult)(nil)).Elem()
}

func (o GetMonitorsResultOutput) ToGetMonitorsResultOutput() GetMonitorsResultOutput {
	return o
}

func (o GetMonitorsResultOutput) ToGetMonitorsResultOutputWithContext(ctx context.Context) GetMonitorsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetMonitorsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorsResult) string { return v.Id }).(pulumi.StringOutput)
}

// A list of monitor tags to limit the search. This filters on the tags set on the monitor itself.
func (o GetMonitorsResultOutput) MonitorTagsFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMonitorsResult) []string { return v.MonitorTagsFilters }).(pulumi.StringArrayOutput)
}

// List of monitors
func (o GetMonitorsResultOutput) Monitors() GetMonitorsMonitorArrayOutput {
	return o.ApplyT(func(v GetMonitorsResult) []GetMonitorsMonitor { return v.Monitors }).(GetMonitorsMonitorArrayOutput)
}

// A monitor name to limit the search.
func (o GetMonitorsResultOutput) NameFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *string { return v.NameFilter }).(pulumi.StringPtrOutput)
}

// A list of tags to limit the search. This filters on the monitor scope.
func (o GetMonitorsResultOutput) TagsFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMonitorsResult) []string { return v.TagsFilters }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMonitorsResultOutput{})
}
