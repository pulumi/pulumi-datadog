// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Datadog RUM application resource. This can be used to create and manage Datadog RUM applications.
//
// ## Import
//
// ```sh
//
//	$ pulumi import datadog:index/rumApplication:RumApplication rum_application a1b2c3d4-a1b2-a1b2-a1b2-a1b2c3d4e5f6
//
// ```
type RumApplication struct {
	pulumi.CustomResourceState

	// The client token
	ClientToken pulumi.StringOutput `pulumi:"clientToken"`
	// The name of the RUM application
	Name pulumi.StringOutput `pulumi:"name"`
	// The RUM application type. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewRumApplication registers a new resource with the given unique name, arguments, and options.
func NewRumApplication(ctx *pulumi.Context,
	name string, args *RumApplicationArgs, opts ...pulumi.ResourceOption) (*RumApplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RumApplication
	err := ctx.RegisterResource("datadog:index/rumApplication:RumApplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRumApplication gets an existing RumApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRumApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RumApplicationState, opts ...pulumi.ResourceOption) (*RumApplication, error) {
	var resource RumApplication
	err := ctx.ReadResource("datadog:index/rumApplication:RumApplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RumApplication resources.
type rumApplicationState struct {
	// The client token
	ClientToken *string `pulumi:"clientToken"`
	// The name of the RUM application
	Name *string `pulumi:"name"`
	// The RUM application type. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`
	Type *string `pulumi:"type"`
}

type RumApplicationState struct {
	// The client token
	ClientToken pulumi.StringPtrInput
	// The name of the RUM application
	Name pulumi.StringPtrInput
	// The RUM application type. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`
	Type pulumi.StringPtrInput
}

func (RumApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*rumApplicationState)(nil)).Elem()
}

type rumApplicationArgs struct {
	// The name of the RUM application
	Name string `pulumi:"name"`
	// The RUM application type. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a RumApplication resource.
type RumApplicationArgs struct {
	// The name of the RUM application
	Name pulumi.StringInput
	// The RUM application type. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`
	Type pulumi.StringPtrInput
}

func (RumApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rumApplicationArgs)(nil)).Elem()
}

type RumApplicationInput interface {
	pulumi.Input

	ToRumApplicationOutput() RumApplicationOutput
	ToRumApplicationOutputWithContext(ctx context.Context) RumApplicationOutput
}

func (*RumApplication) ElementType() reflect.Type {
	return reflect.TypeOf((**RumApplication)(nil)).Elem()
}

func (i *RumApplication) ToRumApplicationOutput() RumApplicationOutput {
	return i.ToRumApplicationOutputWithContext(context.Background())
}

func (i *RumApplication) ToRumApplicationOutputWithContext(ctx context.Context) RumApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumApplicationOutput)
}

func (i *RumApplication) ToOutput(ctx context.Context) pulumix.Output[*RumApplication] {
	return pulumix.Output[*RumApplication]{
		OutputState: i.ToRumApplicationOutputWithContext(ctx).OutputState,
	}
}

// RumApplicationArrayInput is an input type that accepts RumApplicationArray and RumApplicationArrayOutput values.
// You can construct a concrete instance of `RumApplicationArrayInput` via:
//
//	RumApplicationArray{ RumApplicationArgs{...} }
type RumApplicationArrayInput interface {
	pulumi.Input

	ToRumApplicationArrayOutput() RumApplicationArrayOutput
	ToRumApplicationArrayOutputWithContext(context.Context) RumApplicationArrayOutput
}

type RumApplicationArray []RumApplicationInput

func (RumApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RumApplication)(nil)).Elem()
}

func (i RumApplicationArray) ToRumApplicationArrayOutput() RumApplicationArrayOutput {
	return i.ToRumApplicationArrayOutputWithContext(context.Background())
}

func (i RumApplicationArray) ToRumApplicationArrayOutputWithContext(ctx context.Context) RumApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumApplicationArrayOutput)
}

func (i RumApplicationArray) ToOutput(ctx context.Context) pulumix.Output[[]*RumApplication] {
	return pulumix.Output[[]*RumApplication]{
		OutputState: i.ToRumApplicationArrayOutputWithContext(ctx).OutputState,
	}
}

// RumApplicationMapInput is an input type that accepts RumApplicationMap and RumApplicationMapOutput values.
// You can construct a concrete instance of `RumApplicationMapInput` via:
//
//	RumApplicationMap{ "key": RumApplicationArgs{...} }
type RumApplicationMapInput interface {
	pulumi.Input

	ToRumApplicationMapOutput() RumApplicationMapOutput
	ToRumApplicationMapOutputWithContext(context.Context) RumApplicationMapOutput
}

type RumApplicationMap map[string]RumApplicationInput

func (RumApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RumApplication)(nil)).Elem()
}

func (i RumApplicationMap) ToRumApplicationMapOutput() RumApplicationMapOutput {
	return i.ToRumApplicationMapOutputWithContext(context.Background())
}

func (i RumApplicationMap) ToRumApplicationMapOutputWithContext(ctx context.Context) RumApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumApplicationMapOutput)
}

func (i RumApplicationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*RumApplication] {
	return pulumix.Output[map[string]*RumApplication]{
		OutputState: i.ToRumApplicationMapOutputWithContext(ctx).OutputState,
	}
}

type RumApplicationOutput struct{ *pulumi.OutputState }

func (RumApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RumApplication)(nil)).Elem()
}

func (o RumApplicationOutput) ToRumApplicationOutput() RumApplicationOutput {
	return o
}

func (o RumApplicationOutput) ToRumApplicationOutputWithContext(ctx context.Context) RumApplicationOutput {
	return o
}

func (o RumApplicationOutput) ToOutput(ctx context.Context) pulumix.Output[*RumApplication] {
	return pulumix.Output[*RumApplication]{
		OutputState: o.OutputState,
	}
}

// The client token
func (o RumApplicationOutput) ClientToken() pulumi.StringOutput {
	return o.ApplyT(func(v *RumApplication) pulumi.StringOutput { return v.ClientToken }).(pulumi.StringOutput)
}

// The name of the RUM application
func (o RumApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RumApplication) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The RUM application type. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`
func (o RumApplicationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RumApplication) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type RumApplicationArrayOutput struct{ *pulumi.OutputState }

func (RumApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RumApplication)(nil)).Elem()
}

func (o RumApplicationArrayOutput) ToRumApplicationArrayOutput() RumApplicationArrayOutput {
	return o
}

func (o RumApplicationArrayOutput) ToRumApplicationArrayOutputWithContext(ctx context.Context) RumApplicationArrayOutput {
	return o
}

func (o RumApplicationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*RumApplication] {
	return pulumix.Output[[]*RumApplication]{
		OutputState: o.OutputState,
	}
}

func (o RumApplicationArrayOutput) Index(i pulumi.IntInput) RumApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RumApplication {
		return vs[0].([]*RumApplication)[vs[1].(int)]
	}).(RumApplicationOutput)
}

type RumApplicationMapOutput struct{ *pulumi.OutputState }

func (RumApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RumApplication)(nil)).Elem()
}

func (o RumApplicationMapOutput) ToRumApplicationMapOutput() RumApplicationMapOutput {
	return o
}

func (o RumApplicationMapOutput) ToRumApplicationMapOutputWithContext(ctx context.Context) RumApplicationMapOutput {
	return o
}

func (o RumApplicationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*RumApplication] {
	return pulumix.Output[map[string]*RumApplication]{
		OutputState: o.OutputState,
	}
}

func (o RumApplicationMapOutput) MapIndex(k pulumi.StringInput) RumApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RumApplication {
		return vs[0].(map[string]*RumApplication)[vs[1].(string)]
	}).(RumApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RumApplicationInput)(nil)).Elem(), &RumApplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*RumApplicationArrayInput)(nil)).Elem(), RumApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RumApplicationMapInput)(nil)).Elem(), RumApplicationMap{})
	pulumi.RegisterOutputType(RumApplicationOutput{})
	pulumi.RegisterOutputType(RumApplicationArrayOutput{})
	pulumi.RegisterOutputType(RumApplicationMapOutput{})
}
