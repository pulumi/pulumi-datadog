// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Datadog service definition resource. This can be used to create and manage Datadog service definitions in the service catalog using the YAML/JSON definition.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datadog.NewServiceDefinitionYaml(ctx, "serviceDefinitionV21", &datadog.ServiceDefinitionYamlArgs{
//				ServiceDefinition: pulumi.String(`schema-version: v2.1
//
// dd-service: shopping-cart
// team: e-commerce-team
// contacts:
//   - name: Support Email
//     type: email
//     contact: team@shopping.com
//   - name: Support Slack
//     type: slack
//     contact: https://www.slack.com/archives/shopping-cart
//
// description: shopping cart service responsible for managing shopping carts
// tier: high
// lifecycle: production
// application: e-commerce
// links:
//   - name: shopping-cart runbook
//     type: runbook
//     url: https://runbook/shopping-cart
//   - name: shopping-cart architecture
//     type: doc
//     provider: gdoc
//     url: https://google.drive/shopping-cart-architecture
//   - name: shopping-cart service Wiki
//     type: doc
//     provider: wiki
//     url: https://wiki/shopping-cart
//   - name: shopping-cart source code
//     type: repo
//     provider: github
//     url: http://github/shopping-cart
//
// tags:
//   - business-unit:retail
//   - cost-center:engineering
//
// integrations:
//
//	pagerduty:
//	  service-url: https://www.pagerduty.com/service-directory/Pshopping-cart
//
// extensions:
//
//	mycompany.com/shopping-cart:
//	  customField: customValue
//
// `),
//
//	})
//	if err != nil {
//		return err
//	}
//	_, err = datadog.NewServiceDefinitionYaml(ctx, "serviceDefinitionV2", &datadog.ServiceDefinitionYamlArgs{
//		ServiceDefinition: pulumi.String(`schema-version: v2
//
// dd-service: shopping-cart
// team: E Commerce
// contacts:
//   - name: Support Email
//     type: email
//     contact: team@shopping.com
//   - name: Support Slack
//     type: slack
//     contact: https://www.slack.com/archives/shopping-cart
//
// repos:
//   - name: shopping-cart source code
//     provider: github
//     url: http://github/shopping-cart
//
// docs:
//   - name: shopping-cart architecture
//     provider: gdoc
//     url: https://google.drive/shopping-cart-architecture
//   - name: shopping-cart service Wiki
//     provider: wiki
//     url: https://wiki/shopping-cart
//
// links:
//   - name: shopping-cart runbook
//     type: runbook
//     url: https://runbook/shopping-cart
//
// tags:
//   - business-unit:retail
//   - cost-center:engineering
//
// integrations:
//
//	pagerduty: https://www.pagerduty.com/service-directory/Pshopping-cart
//
// extensions:
//
//	datadoghq.com/shopping-cart:
//	  customField: customValue
//
// `),
//
//	})
//	if err != nil {
//		return err
//	}
//	_, err = datadog.NewServiceDefinitionYaml(ctx, "serviceDefinitionBackstage", &datadog.ServiceDefinitionYamlArgs{
//		ServiceDefinition: pulumi.String(`apiVersion: backstage.io/v1alpha1
//
// kind: Component
// metadata:
//
//	annotations:
//	  backstage.io/techdocs-ref: http://a/b/c
//	  some.annotation: value
//	namespace: default
//	name: shopping-cart
//	title: Shopping Cart
//	description: A shopping cart service
//	tags: ["taga:valuea", "tagb:valueb"]
//	links:
//	  - title: Wiki
//	    url: https://wiki/shopping-cart
//	    icon: help
//	ignore-attribute:
//	  id: 1
//	  value: "value"
//
// spec:
//
//	type: service
//	lifecycle: production
//	owner: e-commerce
//	system: retail
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import datadog:index/serviceDefinitionYaml:ServiceDefinitionYaml service_definition "<dd-service>"
//
// ```
type ServiceDefinitionYaml struct {
	pulumi.CustomResourceState

	// The YAML/JSON formatted definition of the service
	ServiceDefinition pulumi.StringOutput `pulumi:"serviceDefinition"`
}

// NewServiceDefinitionYaml registers a new resource with the given unique name, arguments, and options.
func NewServiceDefinitionYaml(ctx *pulumi.Context,
	name string, args *ServiceDefinitionYamlArgs, opts ...pulumi.ResourceOption) (*ServiceDefinitionYaml, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceDefinition == nil {
		return nil, errors.New("invalid value for required argument 'ServiceDefinition'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceDefinitionYaml
	err := ctx.RegisterResource("datadog:index/serviceDefinitionYaml:ServiceDefinitionYaml", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceDefinitionYaml gets an existing ServiceDefinitionYaml resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceDefinitionYaml(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceDefinitionYamlState, opts ...pulumi.ResourceOption) (*ServiceDefinitionYaml, error) {
	var resource ServiceDefinitionYaml
	err := ctx.ReadResource("datadog:index/serviceDefinitionYaml:ServiceDefinitionYaml", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceDefinitionYaml resources.
type serviceDefinitionYamlState struct {
	// The YAML/JSON formatted definition of the service
	ServiceDefinition *string `pulumi:"serviceDefinition"`
}

type ServiceDefinitionYamlState struct {
	// The YAML/JSON formatted definition of the service
	ServiceDefinition pulumi.StringPtrInput
}

func (ServiceDefinitionYamlState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceDefinitionYamlState)(nil)).Elem()
}

type serviceDefinitionYamlArgs struct {
	// The YAML/JSON formatted definition of the service
	ServiceDefinition string `pulumi:"serviceDefinition"`
}

// The set of arguments for constructing a ServiceDefinitionYaml resource.
type ServiceDefinitionYamlArgs struct {
	// The YAML/JSON formatted definition of the service
	ServiceDefinition pulumi.StringInput
}

func (ServiceDefinitionYamlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceDefinitionYamlArgs)(nil)).Elem()
}

type ServiceDefinitionYamlInput interface {
	pulumi.Input

	ToServiceDefinitionYamlOutput() ServiceDefinitionYamlOutput
	ToServiceDefinitionYamlOutputWithContext(ctx context.Context) ServiceDefinitionYamlOutput
}

func (*ServiceDefinitionYaml) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDefinitionYaml)(nil)).Elem()
}

func (i *ServiceDefinitionYaml) ToServiceDefinitionYamlOutput() ServiceDefinitionYamlOutput {
	return i.ToServiceDefinitionYamlOutputWithContext(context.Background())
}

func (i *ServiceDefinitionYaml) ToServiceDefinitionYamlOutputWithContext(ctx context.Context) ServiceDefinitionYamlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDefinitionYamlOutput)
}

func (i *ServiceDefinitionYaml) ToOutput(ctx context.Context) pulumix.Output[*ServiceDefinitionYaml] {
	return pulumix.Output[*ServiceDefinitionYaml]{
		OutputState: i.ToServiceDefinitionYamlOutputWithContext(ctx).OutputState,
	}
}

// ServiceDefinitionYamlArrayInput is an input type that accepts ServiceDefinitionYamlArray and ServiceDefinitionYamlArrayOutput values.
// You can construct a concrete instance of `ServiceDefinitionYamlArrayInput` via:
//
//	ServiceDefinitionYamlArray{ ServiceDefinitionYamlArgs{...} }
type ServiceDefinitionYamlArrayInput interface {
	pulumi.Input

	ToServiceDefinitionYamlArrayOutput() ServiceDefinitionYamlArrayOutput
	ToServiceDefinitionYamlArrayOutputWithContext(context.Context) ServiceDefinitionYamlArrayOutput
}

type ServiceDefinitionYamlArray []ServiceDefinitionYamlInput

func (ServiceDefinitionYamlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceDefinitionYaml)(nil)).Elem()
}

func (i ServiceDefinitionYamlArray) ToServiceDefinitionYamlArrayOutput() ServiceDefinitionYamlArrayOutput {
	return i.ToServiceDefinitionYamlArrayOutputWithContext(context.Background())
}

func (i ServiceDefinitionYamlArray) ToServiceDefinitionYamlArrayOutputWithContext(ctx context.Context) ServiceDefinitionYamlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDefinitionYamlArrayOutput)
}

func (i ServiceDefinitionYamlArray) ToOutput(ctx context.Context) pulumix.Output[[]*ServiceDefinitionYaml] {
	return pulumix.Output[[]*ServiceDefinitionYaml]{
		OutputState: i.ToServiceDefinitionYamlArrayOutputWithContext(ctx).OutputState,
	}
}

// ServiceDefinitionYamlMapInput is an input type that accepts ServiceDefinitionYamlMap and ServiceDefinitionYamlMapOutput values.
// You can construct a concrete instance of `ServiceDefinitionYamlMapInput` via:
//
//	ServiceDefinitionYamlMap{ "key": ServiceDefinitionYamlArgs{...} }
type ServiceDefinitionYamlMapInput interface {
	pulumi.Input

	ToServiceDefinitionYamlMapOutput() ServiceDefinitionYamlMapOutput
	ToServiceDefinitionYamlMapOutputWithContext(context.Context) ServiceDefinitionYamlMapOutput
}

type ServiceDefinitionYamlMap map[string]ServiceDefinitionYamlInput

func (ServiceDefinitionYamlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceDefinitionYaml)(nil)).Elem()
}

func (i ServiceDefinitionYamlMap) ToServiceDefinitionYamlMapOutput() ServiceDefinitionYamlMapOutput {
	return i.ToServiceDefinitionYamlMapOutputWithContext(context.Background())
}

func (i ServiceDefinitionYamlMap) ToServiceDefinitionYamlMapOutputWithContext(ctx context.Context) ServiceDefinitionYamlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDefinitionYamlMapOutput)
}

func (i ServiceDefinitionYamlMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServiceDefinitionYaml] {
	return pulumix.Output[map[string]*ServiceDefinitionYaml]{
		OutputState: i.ToServiceDefinitionYamlMapOutputWithContext(ctx).OutputState,
	}
}

type ServiceDefinitionYamlOutput struct{ *pulumi.OutputState }

func (ServiceDefinitionYamlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDefinitionYaml)(nil)).Elem()
}

func (o ServiceDefinitionYamlOutput) ToServiceDefinitionYamlOutput() ServiceDefinitionYamlOutput {
	return o
}

func (o ServiceDefinitionYamlOutput) ToServiceDefinitionYamlOutputWithContext(ctx context.Context) ServiceDefinitionYamlOutput {
	return o
}

func (o ServiceDefinitionYamlOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceDefinitionYaml] {
	return pulumix.Output[*ServiceDefinitionYaml]{
		OutputState: o.OutputState,
	}
}

// The YAML/JSON formatted definition of the service
func (o ServiceDefinitionYamlOutput) ServiceDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceDefinitionYaml) pulumi.StringOutput { return v.ServiceDefinition }).(pulumi.StringOutput)
}

type ServiceDefinitionYamlArrayOutput struct{ *pulumi.OutputState }

func (ServiceDefinitionYamlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceDefinitionYaml)(nil)).Elem()
}

func (o ServiceDefinitionYamlArrayOutput) ToServiceDefinitionYamlArrayOutput() ServiceDefinitionYamlArrayOutput {
	return o
}

func (o ServiceDefinitionYamlArrayOutput) ToServiceDefinitionYamlArrayOutputWithContext(ctx context.Context) ServiceDefinitionYamlArrayOutput {
	return o
}

func (o ServiceDefinitionYamlArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ServiceDefinitionYaml] {
	return pulumix.Output[[]*ServiceDefinitionYaml]{
		OutputState: o.OutputState,
	}
}

func (o ServiceDefinitionYamlArrayOutput) Index(i pulumi.IntInput) ServiceDefinitionYamlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceDefinitionYaml {
		return vs[0].([]*ServiceDefinitionYaml)[vs[1].(int)]
	}).(ServiceDefinitionYamlOutput)
}

type ServiceDefinitionYamlMapOutput struct{ *pulumi.OutputState }

func (ServiceDefinitionYamlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceDefinitionYaml)(nil)).Elem()
}

func (o ServiceDefinitionYamlMapOutput) ToServiceDefinitionYamlMapOutput() ServiceDefinitionYamlMapOutput {
	return o
}

func (o ServiceDefinitionYamlMapOutput) ToServiceDefinitionYamlMapOutputWithContext(ctx context.Context) ServiceDefinitionYamlMapOutput {
	return o
}

func (o ServiceDefinitionYamlMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServiceDefinitionYaml] {
	return pulumix.Output[map[string]*ServiceDefinitionYaml]{
		OutputState: o.OutputState,
	}
}

func (o ServiceDefinitionYamlMapOutput) MapIndex(k pulumi.StringInput) ServiceDefinitionYamlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceDefinitionYaml {
		return vs[0].(map[string]*ServiceDefinitionYaml)[vs[1].(string)]
	}).(ServiceDefinitionYamlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDefinitionYamlInput)(nil)).Elem(), &ServiceDefinitionYaml{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDefinitionYamlArrayInput)(nil)).Elem(), ServiceDefinitionYamlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDefinitionYamlMapInput)(nil)).Elem(), ServiceDefinitionYamlMap{})
	pulumi.RegisterOutputType(ServiceDefinitionYamlOutput{})
	pulumi.RegisterOutputType(ServiceDefinitionYamlArrayOutput{})
	pulumi.RegisterOutputType(ServiceDefinitionYamlMapOutput{})
}
