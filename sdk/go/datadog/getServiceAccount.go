// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve information about an existing Datadog service account.
func LookupServiceAccount(ctx *pulumi.Context, args *LookupServiceAccountArgs, opts ...pulumi.InvokeOption) (*LookupServiceAccountResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServiceAccountResult
	err := ctx.Invoke("datadog:index/getServiceAccount:getServiceAccount", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServiceAccount.
type LookupServiceAccountArgs struct {
	// Filter all users and service accounts by name, email, or role.
	Filter *string `pulumi:"filter"`
	// Filter on status attribute. Comma separated list, with possible values `Active`, `Pending`, and `Disabled`.
	FilterStatus *string `pulumi:"filterStatus"`
	// The service account's ID.
	Id *string `pulumi:"id"`
}

// A collection of values returned by getServiceAccount.
type LookupServiceAccountResult struct {
	// Whether the user is disabled.
	Disabled bool `pulumi:"disabled"`
	// Email of the user.
	Email string `pulumi:"email"`
	// Filter all users and service accounts by name, email, or role.
	Filter *string `pulumi:"filter"`
	// Filter on status attribute. Comma separated list, with possible values `Active`, `Pending`, and `Disabled`.
	FilterStatus *string `pulumi:"filterStatus"`
	// Handle of the user.
	Handle string `pulumi:"handle"`
	// URL of the user's icon.
	Icon string `pulumi:"icon"`
	// The service account's ID.
	Id string `pulumi:"id"`
	// Name of the user.
	Name string `pulumi:"name"`
	// Roles assigned to this service account.
	Roles []string `pulumi:"roles"`
	// Status of the user.
	Status string `pulumi:"status"`
	// Title of the user.
	Title string `pulumi:"title"`
	// Whether the user is verified.
	Verified bool `pulumi:"verified"`
}

func LookupServiceAccountOutput(ctx *pulumi.Context, args LookupServiceAccountOutputArgs, opts ...pulumi.InvokeOption) LookupServiceAccountResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServiceAccountResult, error) {
			args := v.(LookupServiceAccountArgs)
			r, err := LookupServiceAccount(ctx, &args, opts...)
			var s LookupServiceAccountResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServiceAccountResultOutput)
}

// A collection of arguments for invoking getServiceAccount.
type LookupServiceAccountOutputArgs struct {
	// Filter all users and service accounts by name, email, or role.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// Filter on status attribute. Comma separated list, with possible values `Active`, `Pending`, and `Disabled`.
	FilterStatus pulumi.StringPtrInput `pulumi:"filterStatus"`
	// The service account's ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (LookupServiceAccountOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceAccountArgs)(nil)).Elem()
}

// A collection of values returned by getServiceAccount.
type LookupServiceAccountResultOutput struct{ *pulumi.OutputState }

func (LookupServiceAccountResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceAccountResult)(nil)).Elem()
}

func (o LookupServiceAccountResultOutput) ToLookupServiceAccountResultOutput() LookupServiceAccountResultOutput {
	return o
}

func (o LookupServiceAccountResultOutput) ToLookupServiceAccountResultOutputWithContext(ctx context.Context) LookupServiceAccountResultOutput {
	return o
}

// Whether the user is disabled.
func (o LookupServiceAccountResultOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceAccountResult) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// Email of the user.
func (o LookupServiceAccountResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceAccountResult) string { return v.Email }).(pulumi.StringOutput)
}

// Filter all users and service accounts by name, email, or role.
func (o LookupServiceAccountResultOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceAccountResult) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// Filter on status attribute. Comma separated list, with possible values `Active`, `Pending`, and `Disabled`.
func (o LookupServiceAccountResultOutput) FilterStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceAccountResult) *string { return v.FilterStatus }).(pulumi.StringPtrOutput)
}

// Handle of the user.
func (o LookupServiceAccountResultOutput) Handle() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceAccountResult) string { return v.Handle }).(pulumi.StringOutput)
}

// URL of the user's icon.
func (o LookupServiceAccountResultOutput) Icon() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceAccountResult) string { return v.Icon }).(pulumi.StringOutput)
}

// The service account's ID.
func (o LookupServiceAccountResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceAccountResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the user.
func (o LookupServiceAccountResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceAccountResult) string { return v.Name }).(pulumi.StringOutput)
}

// Roles assigned to this service account.
func (o LookupServiceAccountResultOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupServiceAccountResult) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// Status of the user.
func (o LookupServiceAccountResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceAccountResult) string { return v.Status }).(pulumi.StringOutput)
}

// Title of the user.
func (o LookupServiceAccountResultOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceAccountResult) string { return v.Title }).(pulumi.StringOutput)
}

// Whether the user is verified.
func (o LookupServiceAccountResultOutput) Verified() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceAccountResult) bool { return v.Verified }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServiceAccountResultOutput{})
}
