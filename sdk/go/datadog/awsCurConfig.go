// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog AWS CUR (Cost and Usage Report) configuration resource. This enables Datadog Cloud Cost Management to access your AWS billing data by configuring the connection to your AWS Cost and Usage Report. **Prerequisites**: An active Datadog AWS integration, existing AWS Cost and Usage Report, and proper S3 bucket permissions.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-datadog/sdk/v4/go/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create new aws_cur_config resource
//			_, err := datadog.NewAwsCurConfig(ctx, "foo", &datadog.AwsCurConfigArgs{
//				AccountId:    pulumi.String("123456789123"),
//				BucketName:   pulumi.String("dd-cost-bucket"),
//				BucketRegion: pulumi.String("us-east-1"),
//				ReportName:   pulumi.String("dd-report-name"),
//				ReportPrefix: pulumi.String("dd-report-prefix"),
//				AccountFilters: datadog.AwsCurConfigAccountFiltersArgs{
//					map[string]interface{}{
//						"includeNewAccounts": true,
//						"excludedAccounts": []string{
//							"123456789123",
//							"123456789143",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import datadog:index/awsCurConfig:AwsCurConfig aws_cur_report <cloud_account_id>
// ```
type AwsCurConfig struct {
	pulumi.CustomResourceState

	AccountFilters AwsCurConfigAccountFiltersPtrOutput `pulumi:"accountFilters"`
	// The AWS account ID of your billing/payer account. For AWS Organizations, this is typically the management account ID.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The S3 bucket name where your AWS Cost and Usage Report files are stored. This bucket must have appropriate IAM permissions for Datadog access and should be in the same AWS account as the CUR report.
	BucketName pulumi.StringOutput `pulumi:"bucketName"`
	// The AWS region where the S3 bucket containing your Cost and Usage Report is located (e.g., us-east-1, eu-west-1).
	BucketRegion pulumi.StringPtrOutput `pulumi:"bucketRegion"`
	// The exact name of your AWS Cost and Usage Report as configured in AWS Billing preferences. This must match the report name exactly as it appears in your AWS billing settings.
	ReportName pulumi.StringOutput `pulumi:"reportName"`
	// The S3 key prefix where your Cost and Usage Report files are stored within the bucket (e.g., 'cur-reports/', 'billing/cur/').
	ReportPrefix pulumi.StringOutput `pulumi:"reportPrefix"`
}

// NewAwsCurConfig registers a new resource with the given unique name, arguments, and options.
func NewAwsCurConfig(ctx *pulumi.Context,
	name string, args *AwsCurConfigArgs, opts ...pulumi.ResourceOption) (*AwsCurConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	if args.ReportName == nil {
		return nil, errors.New("invalid value for required argument 'ReportName'")
	}
	if args.ReportPrefix == nil {
		return nil, errors.New("invalid value for required argument 'ReportPrefix'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsCurConfig
	err := ctx.RegisterResource("datadog:index/awsCurConfig:AwsCurConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsCurConfig gets an existing AwsCurConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsCurConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsCurConfigState, opts ...pulumi.ResourceOption) (*AwsCurConfig, error) {
	var resource AwsCurConfig
	err := ctx.ReadResource("datadog:index/awsCurConfig:AwsCurConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsCurConfig resources.
type awsCurConfigState struct {
	AccountFilters *AwsCurConfigAccountFilters `pulumi:"accountFilters"`
	// The AWS account ID of your billing/payer account. For AWS Organizations, this is typically the management account ID.
	AccountId *string `pulumi:"accountId"`
	// The S3 bucket name where your AWS Cost and Usage Report files are stored. This bucket must have appropriate IAM permissions for Datadog access and should be in the same AWS account as the CUR report.
	BucketName *string `pulumi:"bucketName"`
	// The AWS region where the S3 bucket containing your Cost and Usage Report is located (e.g., us-east-1, eu-west-1).
	BucketRegion *string `pulumi:"bucketRegion"`
	// The exact name of your AWS Cost and Usage Report as configured in AWS Billing preferences. This must match the report name exactly as it appears in your AWS billing settings.
	ReportName *string `pulumi:"reportName"`
	// The S3 key prefix where your Cost and Usage Report files are stored within the bucket (e.g., 'cur-reports/', 'billing/cur/').
	ReportPrefix *string `pulumi:"reportPrefix"`
}

type AwsCurConfigState struct {
	AccountFilters AwsCurConfigAccountFiltersPtrInput
	// The AWS account ID of your billing/payer account. For AWS Organizations, this is typically the management account ID.
	AccountId pulumi.StringPtrInput
	// The S3 bucket name where your AWS Cost and Usage Report files are stored. This bucket must have appropriate IAM permissions for Datadog access and should be in the same AWS account as the CUR report.
	BucketName pulumi.StringPtrInput
	// The AWS region where the S3 bucket containing your Cost and Usage Report is located (e.g., us-east-1, eu-west-1).
	BucketRegion pulumi.StringPtrInput
	// The exact name of your AWS Cost and Usage Report as configured in AWS Billing preferences. This must match the report name exactly as it appears in your AWS billing settings.
	ReportName pulumi.StringPtrInput
	// The S3 key prefix where your Cost and Usage Report files are stored within the bucket (e.g., 'cur-reports/', 'billing/cur/').
	ReportPrefix pulumi.StringPtrInput
}

func (AwsCurConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsCurConfigState)(nil)).Elem()
}

type awsCurConfigArgs struct {
	AccountFilters *AwsCurConfigAccountFilters `pulumi:"accountFilters"`
	// The AWS account ID of your billing/payer account. For AWS Organizations, this is typically the management account ID.
	AccountId string `pulumi:"accountId"`
	// The S3 bucket name where your AWS Cost and Usage Report files are stored. This bucket must have appropriate IAM permissions for Datadog access and should be in the same AWS account as the CUR report.
	BucketName string `pulumi:"bucketName"`
	// The AWS region where the S3 bucket containing your Cost and Usage Report is located (e.g., us-east-1, eu-west-1).
	BucketRegion *string `pulumi:"bucketRegion"`
	// The exact name of your AWS Cost and Usage Report as configured in AWS Billing preferences. This must match the report name exactly as it appears in your AWS billing settings.
	ReportName string `pulumi:"reportName"`
	// The S3 key prefix where your Cost and Usage Report files are stored within the bucket (e.g., 'cur-reports/', 'billing/cur/').
	ReportPrefix string `pulumi:"reportPrefix"`
}

// The set of arguments for constructing a AwsCurConfig resource.
type AwsCurConfigArgs struct {
	AccountFilters AwsCurConfigAccountFiltersPtrInput
	// The AWS account ID of your billing/payer account. For AWS Organizations, this is typically the management account ID.
	AccountId pulumi.StringInput
	// The S3 bucket name where your AWS Cost and Usage Report files are stored. This bucket must have appropriate IAM permissions for Datadog access and should be in the same AWS account as the CUR report.
	BucketName pulumi.StringInput
	// The AWS region where the S3 bucket containing your Cost and Usage Report is located (e.g., us-east-1, eu-west-1).
	BucketRegion pulumi.StringPtrInput
	// The exact name of your AWS Cost and Usage Report as configured in AWS Billing preferences. This must match the report name exactly as it appears in your AWS billing settings.
	ReportName pulumi.StringInput
	// The S3 key prefix where your Cost and Usage Report files are stored within the bucket (e.g., 'cur-reports/', 'billing/cur/').
	ReportPrefix pulumi.StringInput
}

func (AwsCurConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsCurConfigArgs)(nil)).Elem()
}

type AwsCurConfigInput interface {
	pulumi.Input

	ToAwsCurConfigOutput() AwsCurConfigOutput
	ToAwsCurConfigOutputWithContext(ctx context.Context) AwsCurConfigOutput
}

func (*AwsCurConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsCurConfig)(nil)).Elem()
}

func (i *AwsCurConfig) ToAwsCurConfigOutput() AwsCurConfigOutput {
	return i.ToAwsCurConfigOutputWithContext(context.Background())
}

func (i *AwsCurConfig) ToAwsCurConfigOutputWithContext(ctx context.Context) AwsCurConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCurConfigOutput)
}

// AwsCurConfigArrayInput is an input type that accepts AwsCurConfigArray and AwsCurConfigArrayOutput values.
// You can construct a concrete instance of `AwsCurConfigArrayInput` via:
//
//	AwsCurConfigArray{ AwsCurConfigArgs{...} }
type AwsCurConfigArrayInput interface {
	pulumi.Input

	ToAwsCurConfigArrayOutput() AwsCurConfigArrayOutput
	ToAwsCurConfigArrayOutputWithContext(context.Context) AwsCurConfigArrayOutput
}

type AwsCurConfigArray []AwsCurConfigInput

func (AwsCurConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsCurConfig)(nil)).Elem()
}

func (i AwsCurConfigArray) ToAwsCurConfigArrayOutput() AwsCurConfigArrayOutput {
	return i.ToAwsCurConfigArrayOutputWithContext(context.Background())
}

func (i AwsCurConfigArray) ToAwsCurConfigArrayOutputWithContext(ctx context.Context) AwsCurConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCurConfigArrayOutput)
}

// AwsCurConfigMapInput is an input type that accepts AwsCurConfigMap and AwsCurConfigMapOutput values.
// You can construct a concrete instance of `AwsCurConfigMapInput` via:
//
//	AwsCurConfigMap{ "key": AwsCurConfigArgs{...} }
type AwsCurConfigMapInput interface {
	pulumi.Input

	ToAwsCurConfigMapOutput() AwsCurConfigMapOutput
	ToAwsCurConfigMapOutputWithContext(context.Context) AwsCurConfigMapOutput
}

type AwsCurConfigMap map[string]AwsCurConfigInput

func (AwsCurConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsCurConfig)(nil)).Elem()
}

func (i AwsCurConfigMap) ToAwsCurConfigMapOutput() AwsCurConfigMapOutput {
	return i.ToAwsCurConfigMapOutputWithContext(context.Background())
}

func (i AwsCurConfigMap) ToAwsCurConfigMapOutputWithContext(ctx context.Context) AwsCurConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCurConfigMapOutput)
}

type AwsCurConfigOutput struct{ *pulumi.OutputState }

func (AwsCurConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsCurConfig)(nil)).Elem()
}

func (o AwsCurConfigOutput) ToAwsCurConfigOutput() AwsCurConfigOutput {
	return o
}

func (o AwsCurConfigOutput) ToAwsCurConfigOutputWithContext(ctx context.Context) AwsCurConfigOutput {
	return o
}

func (o AwsCurConfigOutput) AccountFilters() AwsCurConfigAccountFiltersPtrOutput {
	return o.ApplyT(func(v *AwsCurConfig) AwsCurConfigAccountFiltersPtrOutput { return v.AccountFilters }).(AwsCurConfigAccountFiltersPtrOutput)
}

// The AWS account ID of your billing/payer account. For AWS Organizations, this is typically the management account ID.
func (o AwsCurConfigOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCurConfig) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The S3 bucket name where your AWS Cost and Usage Report files are stored. This bucket must have appropriate IAM permissions for Datadog access and should be in the same AWS account as the CUR report.
func (o AwsCurConfigOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCurConfig) pulumi.StringOutput { return v.BucketName }).(pulumi.StringOutput)
}

// The AWS region where the S3 bucket containing your Cost and Usage Report is located (e.g., us-east-1, eu-west-1).
func (o AwsCurConfigOutput) BucketRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsCurConfig) pulumi.StringPtrOutput { return v.BucketRegion }).(pulumi.StringPtrOutput)
}

// The exact name of your AWS Cost and Usage Report as configured in AWS Billing preferences. This must match the report name exactly as it appears in your AWS billing settings.
func (o AwsCurConfigOutput) ReportName() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCurConfig) pulumi.StringOutput { return v.ReportName }).(pulumi.StringOutput)
}

// The S3 key prefix where your Cost and Usage Report files are stored within the bucket (e.g., 'cur-reports/', 'billing/cur/').
func (o AwsCurConfigOutput) ReportPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCurConfig) pulumi.StringOutput { return v.ReportPrefix }).(pulumi.StringOutput)
}

type AwsCurConfigArrayOutput struct{ *pulumi.OutputState }

func (AwsCurConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsCurConfig)(nil)).Elem()
}

func (o AwsCurConfigArrayOutput) ToAwsCurConfigArrayOutput() AwsCurConfigArrayOutput {
	return o
}

func (o AwsCurConfigArrayOutput) ToAwsCurConfigArrayOutputWithContext(ctx context.Context) AwsCurConfigArrayOutput {
	return o
}

func (o AwsCurConfigArrayOutput) Index(i pulumi.IntInput) AwsCurConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsCurConfig {
		return vs[0].([]*AwsCurConfig)[vs[1].(int)]
	}).(AwsCurConfigOutput)
}

type AwsCurConfigMapOutput struct{ *pulumi.OutputState }

func (AwsCurConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsCurConfig)(nil)).Elem()
}

func (o AwsCurConfigMapOutput) ToAwsCurConfigMapOutput() AwsCurConfigMapOutput {
	return o
}

func (o AwsCurConfigMapOutput) ToAwsCurConfigMapOutputWithContext(ctx context.Context) AwsCurConfigMapOutput {
	return o
}

func (o AwsCurConfigMapOutput) MapIndex(k pulumi.StringInput) AwsCurConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsCurConfig {
		return vs[0].(map[string]*AwsCurConfig)[vs[1].(string)]
	}).(AwsCurConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsCurConfigInput)(nil)).Elem(), &AwsCurConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsCurConfigArrayInput)(nil)).Elem(), AwsCurConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsCurConfigMapInput)(nil)).Elem(), AwsCurConfigMap{})
	pulumi.RegisterOutputType(AwsCurConfigOutput{})
	pulumi.RegisterOutputType(AwsCurConfigArrayOutput{})
	pulumi.RegisterOutputType(AwsCurConfigMapOutput{})
}
