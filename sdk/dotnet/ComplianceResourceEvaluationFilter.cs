// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog ComplianceResourceEvaluationFilter resource. This can be used to create and manage a compliance resource evaluation filter.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Manage Datadog compliance resource evaluation filters
    ///     var basicFilter = new Datadog.ComplianceResourceEvaluationFilter("basic_filter", new()
    ///     {
    ///         Tags = new[]
    ///         {
    ///             "tag1:val1",
    ///         },
    ///         CloudProvider = "aws",
    ///         ResourceId = "000000000000",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/complianceResourceEvaluationFilter:ComplianceResourceEvaluationFilter test_filter aws:00000000000000
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/complianceResourceEvaluationFilter:ComplianceResourceEvaluationFilter")]
    public partial class ComplianceResourceEvaluationFilter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The cloud provider of the filter's targeted resource. Only `Aws`, `Gcp`, or `Azure` are considered valid cloud providers.
        /// </summary>
        [Output("cloudProvider")]
        public Output<string> CloudProvider { get; private set; } = null!;

        /// <summary>
        /// The ID of the of the filter's targeted resource. Different cloud providers target different resource IDs:
        ///   - `Aws`: account ID
        ///   - `Gcp`: project ID
        ///   - `Azure`: subscription ID
        /// </summary>
        [Output("resourceId")]
        public Output<string> ResourceId { get; private set; } = null!;

        /// <summary>
        /// List of tags to filter misconfiguration detections. Each entry should follow the format: "key":"value".
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a ComplianceResourceEvaluationFilter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ComplianceResourceEvaluationFilter(string name, ComplianceResourceEvaluationFilterArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/complianceResourceEvaluationFilter:ComplianceResourceEvaluationFilter", name, args ?? new ComplianceResourceEvaluationFilterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ComplianceResourceEvaluationFilter(string name, Input<string> id, ComplianceResourceEvaluationFilterState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/complianceResourceEvaluationFilter:ComplianceResourceEvaluationFilter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ComplianceResourceEvaluationFilter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ComplianceResourceEvaluationFilter Get(string name, Input<string> id, ComplianceResourceEvaluationFilterState? state = null, CustomResourceOptions? options = null)
        {
            return new ComplianceResourceEvaluationFilter(name, id, state, options);
        }
    }

    public sealed class ComplianceResourceEvaluationFilterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cloud provider of the filter's targeted resource. Only `Aws`, `Gcp`, or `Azure` are considered valid cloud providers.
        /// </summary>
        [Input("cloudProvider", required: true)]
        public Input<string> CloudProvider { get; set; } = null!;

        /// <summary>
        /// The ID of the of the filter's targeted resource. Different cloud providers target different resource IDs:
        ///   - `Aws`: account ID
        ///   - `Gcp`: project ID
        ///   - `Azure`: subscription ID
        /// </summary>
        [Input("resourceId", required: true)]
        public Input<string> ResourceId { get; set; } = null!;

        [Input("tags", required: true)]
        private InputList<string>? _tags;

        /// <summary>
        /// List of tags to filter misconfiguration detections. Each entry should follow the format: "key":"value".
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public ComplianceResourceEvaluationFilterArgs()
        {
        }
        public static new ComplianceResourceEvaluationFilterArgs Empty => new ComplianceResourceEvaluationFilterArgs();
    }

    public sealed class ComplianceResourceEvaluationFilterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cloud provider of the filter's targeted resource. Only `Aws`, `Gcp`, or `Azure` are considered valid cloud providers.
        /// </summary>
        [Input("cloudProvider")]
        public Input<string>? CloudProvider { get; set; }

        /// <summary>
        /// The ID of the of the filter's targeted resource. Different cloud providers target different resource IDs:
        ///   - `Aws`: account ID
        ///   - `Gcp`: project ID
        ///   - `Azure`: subscription ID
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// List of tags to filter misconfiguration detections. Each entry should follow the format: "key":"value".
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public ComplianceResourceEvaluationFilterState()
        {
        }
        public static new ComplianceResourceEvaluationFilterState Empty => new ComplianceResourceEvaluationFilterState();
    }
}
