// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog dashboard resource. This can be used to create and manage Datadog dashboards.
    /// 
    /// &gt; **Note:** This resource uses the new [Dashboard API](https://docs.datadoghq.com/api/#dashboards) which adds new features like better validation and support for the [Group widget](https://docs.datadoghq.com/graphing/widgets/group/). Additionally, this resource unifies `datadog..TimeBoard` and `datadog..ScreenBoard` resources to allow you to manage all of your dashboards using a single format.
    /// </summary>
    public partial class Dashboard : Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the dashboard.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether this dashboard is read-only.
        /// </summary>
        [Output("isReadOnly")]
        public Output<bool?> IsReadOnly { get; private set; } = null!;

        /// <summary>
        /// The layout type of the dashboard, either 'free' or 'ordered'.
        /// </summary>
        [Output("layoutType")]
        public Output<string> LayoutType { get; private set; } = null!;

        /// <summary>
        /// The list of handles of users to notify when changes are made to this dashboard.
        /// </summary>
        [Output("notifyLists")]
        public Output<ImmutableArray<string>> NotifyLists { get; private set; } = null!;

        /// <summary>
        /// The list of selectable template variable presets for this dashboard.
        /// </summary>
        [Output("templateVariablePresets")]
        public Output<ImmutableArray<Outputs.DashboardTemplateVariablePreset>> TemplateVariablePresets { get; private set; } = null!;

        /// <summary>
        /// The list of template variables for this dashboard.
        /// </summary>
        [Output("templateVariables")]
        public Output<ImmutableArray<Outputs.DashboardTemplateVariable>> TemplateVariables { get; private set; } = null!;

        /// <summary>
        /// The title of the dashboard.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// The list of widgets to display on the dashboard.
        /// </summary>
        [Output("widgets")]
        public Output<ImmutableArray<Outputs.DashboardWidget>> Widgets { get; private set; } = null!;


        /// <summary>
        /// Create a Dashboard resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Dashboard(string name, DashboardArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/dashboard:Dashboard", name, args ?? new DashboardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Dashboard(string name, Input<string> id, DashboardState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/dashboard:Dashboard", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Dashboard resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Dashboard Get(string name, Input<string> id, DashboardState? state = null, CustomResourceOptions? options = null)
        {
            return new Dashboard(name, id, state, options);
        }
    }

    public sealed class DashboardArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the dashboard.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether this dashboard is read-only.
        /// </summary>
        [Input("isReadOnly")]
        public Input<bool>? IsReadOnly { get; set; }

        /// <summary>
        /// The layout type of the dashboard, either 'free' or 'ordered'.
        /// </summary>
        [Input("layoutType", required: true)]
        public Input<string> LayoutType { get; set; } = null!;

        [Input("notifyLists")]
        private InputList<string>? _notifyLists;

        /// <summary>
        /// The list of handles of users to notify when changes are made to this dashboard.
        /// </summary>
        public InputList<string> NotifyLists
        {
            get => _notifyLists ?? (_notifyLists = new InputList<string>());
            set => _notifyLists = value;
        }

        [Input("templateVariablePresets")]
        private InputList<Inputs.DashboardTemplateVariablePresetArgs>? _templateVariablePresets;

        /// <summary>
        /// The list of selectable template variable presets for this dashboard.
        /// </summary>
        public InputList<Inputs.DashboardTemplateVariablePresetArgs> TemplateVariablePresets
        {
            get => _templateVariablePresets ?? (_templateVariablePresets = new InputList<Inputs.DashboardTemplateVariablePresetArgs>());
            set => _templateVariablePresets = value;
        }

        [Input("templateVariables")]
        private InputList<Inputs.DashboardTemplateVariableArgs>? _templateVariables;

        /// <summary>
        /// The list of template variables for this dashboard.
        /// </summary>
        public InputList<Inputs.DashboardTemplateVariableArgs> TemplateVariables
        {
            get => _templateVariables ?? (_templateVariables = new InputList<Inputs.DashboardTemplateVariableArgs>());
            set => _templateVariables = value;
        }

        /// <summary>
        /// The title of the dashboard.
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        [Input("widgets", required: true)]
        private InputList<Inputs.DashboardWidgetArgs>? _widgets;

        /// <summary>
        /// The list of widgets to display on the dashboard.
        /// </summary>
        public InputList<Inputs.DashboardWidgetArgs> Widgets
        {
            get => _widgets ?? (_widgets = new InputList<Inputs.DashboardWidgetArgs>());
            set => _widgets = value;
        }

        public DashboardArgs()
        {
        }
    }

    public sealed class DashboardState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the dashboard.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether this dashboard is read-only.
        /// </summary>
        [Input("isReadOnly")]
        public Input<bool>? IsReadOnly { get; set; }

        /// <summary>
        /// The layout type of the dashboard, either 'free' or 'ordered'.
        /// </summary>
        [Input("layoutType")]
        public Input<string>? LayoutType { get; set; }

        [Input("notifyLists")]
        private InputList<string>? _notifyLists;

        /// <summary>
        /// The list of handles of users to notify when changes are made to this dashboard.
        /// </summary>
        public InputList<string> NotifyLists
        {
            get => _notifyLists ?? (_notifyLists = new InputList<string>());
            set => _notifyLists = value;
        }

        [Input("templateVariablePresets")]
        private InputList<Inputs.DashboardTemplateVariablePresetGetArgs>? _templateVariablePresets;

        /// <summary>
        /// The list of selectable template variable presets for this dashboard.
        /// </summary>
        public InputList<Inputs.DashboardTemplateVariablePresetGetArgs> TemplateVariablePresets
        {
            get => _templateVariablePresets ?? (_templateVariablePresets = new InputList<Inputs.DashboardTemplateVariablePresetGetArgs>());
            set => _templateVariablePresets = value;
        }

        [Input("templateVariables")]
        private InputList<Inputs.DashboardTemplateVariableGetArgs>? _templateVariables;

        /// <summary>
        /// The list of template variables for this dashboard.
        /// </summary>
        public InputList<Inputs.DashboardTemplateVariableGetArgs> TemplateVariables
        {
            get => _templateVariables ?? (_templateVariables = new InputList<Inputs.DashboardTemplateVariableGetArgs>());
            set => _templateVariables = value;
        }

        /// <summary>
        /// The title of the dashboard.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("widgets")]
        private InputList<Inputs.DashboardWidgetGetArgs>? _widgets;

        /// <summary>
        /// The list of widgets to display on the dashboard.
        /// </summary>
        public InputList<Inputs.DashboardWidgetGetArgs> Widgets
        {
            get => _widgets ?? (_widgets = new InputList<Inputs.DashboardWidgetGetArgs>());
            set => _widgets = value;
        }

        public DashboardState()
        {
        }
    }
}
