// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog dashboard resource. This can be used to create and manage Datadog dashboards.
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/dashboard:Dashboard my_service_dashboard sv7-gyh-kas
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/dashboard:Dashboard")]
    public partial class Dashboard : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
        /// dashboard lists using Terraform as it causes inconsistent behavior.
        /// </summary>
        [Output("dashboardLists")]
        public Output<ImmutableArray<int>> DashboardLists { get; private set; } = null!;

        /// <summary>
        /// A list of dashboard lists this dashboard should be removed from. Internal only.
        /// </summary>
        [Output("dashboardListsRemoveds")]
        public Output<ImmutableArray<int>> DashboardListsRemoveds { get; private set; } = null!;

        /// <summary>
        /// The description of the dashboard.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether this dashboard is read-only. **Deprecated.** Prefer using `restricted_roles` to define which roles are required to edit the dashboard. Defaults to `false`.
        /// </summary>
        [Output("isReadOnly")]
        public Output<bool?> IsReadOnly { get; private set; } = null!;

        /// <summary>
        /// The layout type of the group. Valid values are `ordered`.
        /// </summary>
        [Output("layoutType")]
        public Output<string> LayoutType { get; private set; } = null!;

        /// <summary>
        /// The list of handles for the users to notify when changes are made to this dashboard.
        /// </summary>
        [Output("notifyLists")]
        public Output<ImmutableArray<string>> NotifyLists { get; private set; } = null!;

        /// <summary>
        /// The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it's set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
        /// </summary>
        [Output("reflowType")]
        public Output<string?> ReflowType { get; private set; } = null!;

        /// <summary>
        /// UUIDs of roles whose associated users are authorized to edit the dashboard.
        /// </summary>
        [Output("restrictedRoles")]
        public Output<ImmutableArray<string>> RestrictedRoles { get; private set; } = null!;

        /// <summary>
        /// A list of tags to use in the widget.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The list of selectable template variable presets for this dashboard.
        /// </summary>
        [Output("templateVariablePresets")]
        public Output<ImmutableArray<Outputs.DashboardTemplateVariablePreset>> TemplateVariablePresets { get; private set; } = null!;

        /// <summary>
        /// The template variable names and assumed values under the given preset
        /// </summary>
        [Output("templateVariables")]
        public Output<ImmutableArray<Outputs.DashboardTemplateVariable>> TemplateVariables { get; private set; } = null!;

        /// <summary>
        /// The title of the widget.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// The URL to use as a data source for the widget.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// The list of widgets in this group.
        /// </summary>
        [Output("widgets")]
        public Output<ImmutableArray<Outputs.DashboardWidget>> Widgets { get; private set; } = null!;


        /// <summary>
        /// Create a Dashboard resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Dashboard(string name, DashboardArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/dashboard:Dashboard", name, args ?? new DashboardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Dashboard(string name, Input<string> id, DashboardState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/dashboard:Dashboard", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Dashboard resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Dashboard Get(string name, Input<string> id, DashboardState? state = null, CustomResourceOptions? options = null)
        {
            return new Dashboard(name, id, state, options);
        }
    }

    public sealed class DashboardArgs : global::Pulumi.ResourceArgs
    {
        [Input("dashboardLists")]
        private InputList<int>? _dashboardLists;

        /// <summary>
        /// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
        /// dashboard lists using Terraform as it causes inconsistent behavior.
        /// </summary>
        public InputList<int> DashboardLists
        {
            get => _dashboardLists ?? (_dashboardLists = new InputList<int>());
            set => _dashboardLists = value;
        }

        /// <summary>
        /// The description of the dashboard.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether this dashboard is read-only. **Deprecated.** Prefer using `restricted_roles` to define which roles are required to edit the dashboard. Defaults to `false`.
        /// </summary>
        [Input("isReadOnly")]
        public Input<bool>? IsReadOnly { get; set; }

        /// <summary>
        /// The layout type of the group. Valid values are `ordered`.
        /// </summary>
        [Input("layoutType", required: true)]
        public Input<string> LayoutType { get; set; } = null!;

        [Input("notifyLists")]
        private InputList<string>? _notifyLists;

        /// <summary>
        /// The list of handles for the users to notify when changes are made to this dashboard.
        /// </summary>
        public InputList<string> NotifyLists
        {
            get => _notifyLists ?? (_notifyLists = new InputList<string>());
            set => _notifyLists = value;
        }

        /// <summary>
        /// The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it's set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
        /// </summary>
        [Input("reflowType")]
        public Input<string>? ReflowType { get; set; }

        [Input("restrictedRoles")]
        private InputList<string>? _restrictedRoles;

        /// <summary>
        /// UUIDs of roles whose associated users are authorized to edit the dashboard.
        /// </summary>
        public InputList<string> RestrictedRoles
        {
            get => _restrictedRoles ?? (_restrictedRoles = new InputList<string>());
            set => _restrictedRoles = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to use in the widget.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("templateVariablePresets")]
        private InputList<Inputs.DashboardTemplateVariablePresetArgs>? _templateVariablePresets;

        /// <summary>
        /// The list of selectable template variable presets for this dashboard.
        /// </summary>
        public InputList<Inputs.DashboardTemplateVariablePresetArgs> TemplateVariablePresets
        {
            get => _templateVariablePresets ?? (_templateVariablePresets = new InputList<Inputs.DashboardTemplateVariablePresetArgs>());
            set => _templateVariablePresets = value;
        }

        [Input("templateVariables")]
        private InputList<Inputs.DashboardTemplateVariableArgs>? _templateVariables;

        /// <summary>
        /// The template variable names and assumed values under the given preset
        /// </summary>
        public InputList<Inputs.DashboardTemplateVariableArgs> TemplateVariables
        {
            get => _templateVariables ?? (_templateVariables = new InputList<Inputs.DashboardTemplateVariableArgs>());
            set => _templateVariables = value;
        }

        /// <summary>
        /// The title of the widget.
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        /// <summary>
        /// The URL to use as a data source for the widget.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("widgets")]
        private InputList<Inputs.DashboardWidgetArgs>? _widgets;

        /// <summary>
        /// The list of widgets in this group.
        /// </summary>
        public InputList<Inputs.DashboardWidgetArgs> Widgets
        {
            get => _widgets ?? (_widgets = new InputList<Inputs.DashboardWidgetArgs>());
            set => _widgets = value;
        }

        public DashboardArgs()
        {
        }
        public static new DashboardArgs Empty => new DashboardArgs();
    }

    public sealed class DashboardState : global::Pulumi.ResourceArgs
    {
        [Input("dashboardLists")]
        private InputList<int>? _dashboardLists;

        /// <summary>
        /// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
        /// dashboard lists using Terraform as it causes inconsistent behavior.
        /// </summary>
        public InputList<int> DashboardLists
        {
            get => _dashboardLists ?? (_dashboardLists = new InputList<int>());
            set => _dashboardLists = value;
        }

        [Input("dashboardListsRemoveds")]
        private InputList<int>? _dashboardListsRemoveds;

        /// <summary>
        /// A list of dashboard lists this dashboard should be removed from. Internal only.
        /// </summary>
        public InputList<int> DashboardListsRemoveds
        {
            get => _dashboardListsRemoveds ?? (_dashboardListsRemoveds = new InputList<int>());
            set => _dashboardListsRemoveds = value;
        }

        /// <summary>
        /// The description of the dashboard.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether this dashboard is read-only. **Deprecated.** Prefer using `restricted_roles` to define which roles are required to edit the dashboard. Defaults to `false`.
        /// </summary>
        [Input("isReadOnly")]
        public Input<bool>? IsReadOnly { get; set; }

        /// <summary>
        /// The layout type of the group. Valid values are `ordered`.
        /// </summary>
        [Input("layoutType")]
        public Input<string>? LayoutType { get; set; }

        [Input("notifyLists")]
        private InputList<string>? _notifyLists;

        /// <summary>
        /// The list of handles for the users to notify when changes are made to this dashboard.
        /// </summary>
        public InputList<string> NotifyLists
        {
            get => _notifyLists ?? (_notifyLists = new InputList<string>());
            set => _notifyLists = value;
        }

        /// <summary>
        /// The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it's set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
        /// </summary>
        [Input("reflowType")]
        public Input<string>? ReflowType { get; set; }

        [Input("restrictedRoles")]
        private InputList<string>? _restrictedRoles;

        /// <summary>
        /// UUIDs of roles whose associated users are authorized to edit the dashboard.
        /// </summary>
        public InputList<string> RestrictedRoles
        {
            get => _restrictedRoles ?? (_restrictedRoles = new InputList<string>());
            set => _restrictedRoles = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to use in the widget.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("templateVariablePresets")]
        private InputList<Inputs.DashboardTemplateVariablePresetGetArgs>? _templateVariablePresets;

        /// <summary>
        /// The list of selectable template variable presets for this dashboard.
        /// </summary>
        public InputList<Inputs.DashboardTemplateVariablePresetGetArgs> TemplateVariablePresets
        {
            get => _templateVariablePresets ?? (_templateVariablePresets = new InputList<Inputs.DashboardTemplateVariablePresetGetArgs>());
            set => _templateVariablePresets = value;
        }

        [Input("templateVariables")]
        private InputList<Inputs.DashboardTemplateVariableGetArgs>? _templateVariables;

        /// <summary>
        /// The template variable names and assumed values under the given preset
        /// </summary>
        public InputList<Inputs.DashboardTemplateVariableGetArgs> TemplateVariables
        {
            get => _templateVariables ?? (_templateVariables = new InputList<Inputs.DashboardTemplateVariableGetArgs>());
            set => _templateVariables = value;
        }

        /// <summary>
        /// The title of the widget.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// The URL to use as a data source for the widget.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("widgets")]
        private InputList<Inputs.DashboardWidgetGetArgs>? _widgets;

        /// <summary>
        /// The list of widgets in this group.
        /// </summary>
        public InputList<Inputs.DashboardWidgetGetArgs> Widgets
        {
            get => _widgets ?? (_widgets = new InputList<Inputs.DashboardWidgetGetArgs>());
            set => _widgets = value;
        }

        public DashboardState()
        {
        }
        public static new DashboardState Empty => new DashboardState();
    }
}
