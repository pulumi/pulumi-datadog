// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog Observability Pipeline resource. Observability Pipelines allows you to collect and process logs within your own infrastructure, and then route them to downstream integrations.
    /// </summary>
    [DatadogResourceType("datadog:index/observabilityPipeline:ObservabilityPipeline")]
    public partial class ObservabilityPipeline : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration for the pipeline.
        /// </summary>
        [Output("config")]
        public Output<Outputs.ObservabilityPipelineConfig?> Config { get; private set; } = null!;

        /// <summary>
        /// The pipeline name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a ObservabilityPipeline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ObservabilityPipeline(string name, ObservabilityPipelineArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/observabilityPipeline:ObservabilityPipeline", name, args ?? new ObservabilityPipelineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ObservabilityPipeline(string name, Input<string> id, ObservabilityPipelineState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/observabilityPipeline:ObservabilityPipeline", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ObservabilityPipeline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ObservabilityPipeline Get(string name, Input<string> id, ObservabilityPipelineState? state = null, CustomResourceOptions? options = null)
        {
            return new ObservabilityPipeline(name, id, state, options);
        }
    }

    public sealed class ObservabilityPipelineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for the pipeline.
        /// </summary>
        [Input("config")]
        public Input<Inputs.ObservabilityPipelineConfigArgs>? Config { get; set; }

        /// <summary>
        /// The pipeline name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public ObservabilityPipelineArgs()
        {
        }
        public static new ObservabilityPipelineArgs Empty => new ObservabilityPipelineArgs();
    }

    public sealed class ObservabilityPipelineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for the pipeline.
        /// </summary>
        [Input("config")]
        public Input<Inputs.ObservabilityPipelineConfigGetArgs>? Config { get; set; }

        /// <summary>
        /// The pipeline name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ObservabilityPipelineState()
        {
        }
        public static new ObservabilityPipelineState Empty => new ObservabilityPipelineState();
    }
}
