// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog incident notification rule resource. This can be used to create and manage Datadog incident notification rules.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Datadog.IncidentType("example", new()
    ///     {
    ///         Name = "My Incident Type",
    ///         Description = "Incident type for critical production issues",
    ///     });
    /// 
    ///     var exampleIncidentNotificationTemplate = new Datadog.IncidentNotificationTemplate("example", new()
    ///     {
    ///         Name = "My Notification Template",
    ///         Subject = "SEV-1 Incident: {{incident.title}}",
    ///         Content = @"An incident has been declared.
    /// 
    /// Title: {{incident.title}}
    /// Severity: {{incident.severity}}
    /// Status: {{incident.status}}
    /// 
    /// Please join the incident channel for updates.
    /// ",
    ///         Category = "alert",
    ///         IncidentType = example.Id,
    ///     });
    /// 
    ///     var exampleIncidentNotificationRule = new Datadog.IncidentNotificationRule("example", new()
    ///     {
    ///         Enabled = true,
    ///         Trigger = "incident_created_trigger",
    ///         Visibility = "organization",
    ///         Handles = new[]
    ///         {
    ///             "@team-email@company.com",
    ///             "@slack-channel-alerts",
    ///             "@pagerduty-service",
    ///         },
    ///         Conditions = new[]
    ///         {
    ///             new Datadog.Inputs.IncidentNotificationRuleConditionArgs
    ///             {
    ///                 Field = "severity",
    ///                 Values = new[]
    ///                 {
    ///                     "SEV-1",
    ///                     "SEV-2",
    ///                 },
    ///             },
    ///             new Datadog.Inputs.IncidentNotificationRuleConditionArgs
    ///             {
    ///                 Field = "services",
    ///                 Values = new[]
    ///                 {
    ///                     "web-service",
    ///                     "api-service",
    ///                     "database-service",
    ///                 },
    ///             },
    ///         },
    ///         RenotifyOns = new[]
    ///         {
    ///             "status",
    ///             "severity",
    ///         },
    ///         IncidentType = example.Id,
    ///         NotificationTemplate = exampleIncidentNotificationTemplate.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/incidentNotificationRule:IncidentNotificationRule example "00000000-0000-0000-0000-000000000000"
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/incidentNotificationRule:IncidentNotificationRule")]
    public partial class IncidentNotificationRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The conditions that trigger this notification rule. At least one condition is required.
        /// </summary>
        [Output("conditions")]
        public Output<ImmutableArray<Outputs.IncidentNotificationRuleCondition>> Conditions { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the notification rule was created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// Whether the notification rule is enabled. Defaults to `false`.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The notification handles (targets) for this rule. Examples: @team-email@company.com, @slack-channel.
        /// </summary>
        [Output("handles")]
        public Output<ImmutableArray<string>> Handles { get; private set; } = null!;

        /// <summary>
        /// The ID of the incident type this notification rule is associated with.
        /// </summary>
        [Output("incidentType")]
        public Output<string> IncidentType { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the notification rule was last modified.
        /// </summary>
        [Output("modified")]
        public Output<string> Modified { get; private set; } = null!;

        /// <summary>
        /// The ID of the notification template to use for this rule.
        /// </summary>
        [Output("notificationTemplate")]
        public Output<string?> NotificationTemplate { get; private set; } = null!;

        /// <summary>
        /// List of incident fields that trigger re-notification when changed. Valid values are: status, severity, customer*impact, title, description, detected, root*cause, services, state.
        /// </summary>
        [Output("renotifyOns")]
        public Output<ImmutableArray<string>> RenotifyOns { get; private set; } = null!;

        /// <summary>
        /// The trigger event for this notification rule. Valid values are: incident*created*trigger, incident*saved*trigger.
        /// </summary>
        [Output("trigger")]
        public Output<string> Trigger { get; private set; } = null!;

        /// <summary>
        /// The visibility of the notification rule. Valid values are: all, organization, private. Defaults to organization.
        /// </summary>
        [Output("visibility")]
        public Output<string> Visibility { get; private set; } = null!;


        /// <summary>
        /// Create a IncidentNotificationRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IncidentNotificationRule(string name, IncidentNotificationRuleArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/incidentNotificationRule:IncidentNotificationRule", name, args ?? new IncidentNotificationRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IncidentNotificationRule(string name, Input<string> id, IncidentNotificationRuleState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/incidentNotificationRule:IncidentNotificationRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IncidentNotificationRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IncidentNotificationRule Get(string name, Input<string> id, IncidentNotificationRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new IncidentNotificationRule(name, id, state, options);
        }
    }

    public sealed class IncidentNotificationRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("conditions")]
        private InputList<Inputs.IncidentNotificationRuleConditionArgs>? _conditions;

        /// <summary>
        /// The conditions that trigger this notification rule. At least one condition is required.
        /// </summary>
        public InputList<Inputs.IncidentNotificationRuleConditionArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.IncidentNotificationRuleConditionArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// Whether the notification rule is enabled. Defaults to `false`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("handles", required: true)]
        private InputList<string>? _handles;

        /// <summary>
        /// The notification handles (targets) for this rule. Examples: @team-email@company.com, @slack-channel.
        /// </summary>
        public InputList<string> Handles
        {
            get => _handles ?? (_handles = new InputList<string>());
            set => _handles = value;
        }

        /// <summary>
        /// The ID of the incident type this notification rule is associated with.
        /// </summary>
        [Input("incidentType", required: true)]
        public Input<string> IncidentType { get; set; } = null!;

        /// <summary>
        /// The ID of the notification template to use for this rule.
        /// </summary>
        [Input("notificationTemplate")]
        public Input<string>? NotificationTemplate { get; set; }

        [Input("renotifyOns")]
        private InputList<string>? _renotifyOns;

        /// <summary>
        /// List of incident fields that trigger re-notification when changed. Valid values are: status, severity, customer*impact, title, description, detected, root*cause, services, state.
        /// </summary>
        public InputList<string> RenotifyOns
        {
            get => _renotifyOns ?? (_renotifyOns = new InputList<string>());
            set => _renotifyOns = value;
        }

        /// <summary>
        /// The trigger event for this notification rule. Valid values are: incident*created*trigger, incident*saved*trigger.
        /// </summary>
        [Input("trigger", required: true)]
        public Input<string> Trigger { get; set; } = null!;

        /// <summary>
        /// The visibility of the notification rule. Valid values are: all, organization, private. Defaults to organization.
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        public IncidentNotificationRuleArgs()
        {
        }
        public static new IncidentNotificationRuleArgs Empty => new IncidentNotificationRuleArgs();
    }

    public sealed class IncidentNotificationRuleState : global::Pulumi.ResourceArgs
    {
        [Input("conditions")]
        private InputList<Inputs.IncidentNotificationRuleConditionGetArgs>? _conditions;

        /// <summary>
        /// The conditions that trigger this notification rule. At least one condition is required.
        /// </summary>
        public InputList<Inputs.IncidentNotificationRuleConditionGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.IncidentNotificationRuleConditionGetArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// Timestamp when the notification rule was created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// Whether the notification rule is enabled. Defaults to `false`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("handles")]
        private InputList<string>? _handles;

        /// <summary>
        /// The notification handles (targets) for this rule. Examples: @team-email@company.com, @slack-channel.
        /// </summary>
        public InputList<string> Handles
        {
            get => _handles ?? (_handles = new InputList<string>());
            set => _handles = value;
        }

        /// <summary>
        /// The ID of the incident type this notification rule is associated with.
        /// </summary>
        [Input("incidentType")]
        public Input<string>? IncidentType { get; set; }

        /// <summary>
        /// Timestamp when the notification rule was last modified.
        /// </summary>
        [Input("modified")]
        public Input<string>? Modified { get; set; }

        /// <summary>
        /// The ID of the notification template to use for this rule.
        /// </summary>
        [Input("notificationTemplate")]
        public Input<string>? NotificationTemplate { get; set; }

        [Input("renotifyOns")]
        private InputList<string>? _renotifyOns;

        /// <summary>
        /// List of incident fields that trigger re-notification when changed. Valid values are: status, severity, customer*impact, title, description, detected, root*cause, services, state.
        /// </summary>
        public InputList<string> RenotifyOns
        {
            get => _renotifyOns ?? (_renotifyOns = new InputList<string>());
            set => _renotifyOns = value;
        }

        /// <summary>
        /// The trigger event for this notification rule. Valid values are: incident*created*trigger, incident*saved*trigger.
        /// </summary>
        [Input("trigger")]
        public Input<string>? Trigger { get; set; }

        /// <summary>
        /// The visibility of the notification rule. Valid values are: all, organization, private. Defaults to organization.
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        public IncidentNotificationRuleState()
        {
        }
        public static new IncidentNotificationRuleState Empty => new IncidentNotificationRuleState();
    }
}
