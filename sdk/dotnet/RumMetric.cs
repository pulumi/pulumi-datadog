// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog RumMetric resource. This can be used to create and manage Datadog rum_metric.
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/rumMetric:RumMetric testing_rum_metric "testing.rum.metric"
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/rumMetric:RumMetric")]
    public partial class RumMetric : global::Pulumi.CustomResource
    {
        [Output("compute")]
        public Output<Outputs.RumMetricCompute?> Compute { get; private set; } = null!;

        /// <summary>
        /// The type of RUM events to filter on.
        /// </summary>
        [Output("eventType")]
        public Output<string> EventType { get; private set; } = null!;

        [Output("filter")]
        public Output<Outputs.RumMetricFilter?> Filter { get; private set; } = null!;

        [Output("groupBies")]
        public Output<ImmutableArray<Outputs.RumMetricGroupBy>> GroupBies { get; private set; } = null!;

        /// <summary>
        /// The name of the RUM-based metric. This field can't be updated after creation.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("uniqueness")]
        public Output<Outputs.RumMetricUniqueness?> Uniqueness { get; private set; } = null!;


        /// <summary>
        /// Create a RumMetric resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RumMetric(string name, RumMetricArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/rumMetric:RumMetric", name, args ?? new RumMetricArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RumMetric(string name, Input<string> id, RumMetricState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/rumMetric:RumMetric", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RumMetric resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RumMetric Get(string name, Input<string> id, RumMetricState? state = null, CustomResourceOptions? options = null)
        {
            return new RumMetric(name, id, state, options);
        }
    }

    public sealed class RumMetricArgs : global::Pulumi.ResourceArgs
    {
        [Input("compute")]
        public Input<Inputs.RumMetricComputeArgs>? Compute { get; set; }

        /// <summary>
        /// The type of RUM events to filter on.
        /// </summary>
        [Input("eventType", required: true)]
        public Input<string> EventType { get; set; } = null!;

        [Input("filter")]
        public Input<Inputs.RumMetricFilterArgs>? Filter { get; set; }

        [Input("groupBies")]
        private InputList<Inputs.RumMetricGroupByArgs>? _groupBies;
        public InputList<Inputs.RumMetricGroupByArgs> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<Inputs.RumMetricGroupByArgs>());
            set => _groupBies = value;
        }

        /// <summary>
        /// The name of the RUM-based metric. This field can't be updated after creation.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("uniqueness")]
        public Input<Inputs.RumMetricUniquenessArgs>? Uniqueness { get; set; }

        public RumMetricArgs()
        {
        }
        public static new RumMetricArgs Empty => new RumMetricArgs();
    }

    public sealed class RumMetricState : global::Pulumi.ResourceArgs
    {
        [Input("compute")]
        public Input<Inputs.RumMetricComputeGetArgs>? Compute { get; set; }

        /// <summary>
        /// The type of RUM events to filter on.
        /// </summary>
        [Input("eventType")]
        public Input<string>? EventType { get; set; }

        [Input("filter")]
        public Input<Inputs.RumMetricFilterGetArgs>? Filter { get; set; }

        [Input("groupBies")]
        private InputList<Inputs.RumMetricGroupByGetArgs>? _groupBies;
        public InputList<Inputs.RumMetricGroupByGetArgs> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<Inputs.RumMetricGroupByGetArgs>());
            set => _groupBies = value;
        }

        /// <summary>
        /// The name of the RUM-based metric. This field can't be updated after creation.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("uniqueness")]
        public Input<Inputs.RumMetricUniquenessGetArgs>? Uniqueness { get; set; }

        public RumMetricState()
        {
        }
        public static new RumMetricState Empty => new RumMetricState();
    }
}
