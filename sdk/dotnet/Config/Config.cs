// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Datadog
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("datadog");

        private static readonly __Value<string?> _apiKey = new __Value<string?>(() => __config.Get("apiKey"));
        /// <summary>
        /// (Required unless validate is false) Datadog API key. This can also be set via the DD_API_KEY environment variable.
        /// </summary>
        public static string? ApiKey
        {
            get => _apiKey.Get();
            set => _apiKey.Set(value);
        }

        private static readonly __Value<string?> _apiUrl = new __Value<string?>(() => __config.Get("apiUrl"));
        /// <summary>
        /// The API URL. This can also be set via the DD_HOST environment variable, and defaults to `https://api.datadoghq.com`. Note that this URL must not end with the `/api/` path. For example, `https://api.datadoghq.com/` is a correct value, while `https://api.datadoghq.com/api/` is not. And if you're working with "EU" version of Datadog, use `https://api.datadoghq.eu/`. Other Datadog region examples: `https://api.us5.datadoghq.com/`, `https://api.us3.datadoghq.com/` and `https://api.ddog-gov.com/`. See https://docs.datadoghq.com/getting_started/site/ for all available regions.
        /// </summary>
        public static string? ApiUrl
        {
            get => _apiUrl.Get();
            set => _apiUrl.Set(value);
        }

        private static readonly __Value<string?> _appKey = new __Value<string?>(() => __config.Get("appKey"));
        /// <summary>
        /// (Required unless validate is false) Datadog APP key. This can also be set via the DD_APP_KEY environment variable.
        /// </summary>
        public static string? AppKey
        {
            get => _appKey.Get();
            set => _appKey.Set(value);
        }

        private static readonly __Value<string?> _awsAccessKeyId = new __Value<string?>(() => __config.Get("awsAccessKeyId"));
        /// <summary>
        /// The AWS access key ID; used for cloud-provider-based authentication. This can also be set using the `AWS_ACCESS_KEY_ID` environment variable. Required when using `cloud_provider_type` set to `aws`.
        /// </summary>
        public static string? AwsAccessKeyId
        {
            get => _awsAccessKeyId.Get();
            set => _awsAccessKeyId.Set(value);
        }

        private static readonly __Value<string?> _awsSecretAccessKey = new __Value<string?>(() => __config.Get("awsSecretAccessKey"));
        /// <summary>
        /// The AWS secret access key; used for cloud-provider-based authentication. This can also be set using the `AWS_SECRET_ACCESS_KEY` environment variable. Required when using `cloud_provider_type` set to `aws`.
        /// </summary>
        public static string? AwsSecretAccessKey
        {
            get => _awsSecretAccessKey.Get();
            set => _awsSecretAccessKey.Set(value);
        }

        private static readonly __Value<string?> _awsSessionToken = new __Value<string?>(() => __config.Get("awsSessionToken"));
        /// <summary>
        /// The AWS session token; used for cloud-provider-based authentication. This can also be set using the `AWS_SESSION_TOKEN` environment variable. Required when using `cloud_provider_type` set to `aws` and using temporary credentials.
        /// </summary>
        public static string? AwsSessionToken
        {
            get => _awsSessionToken.Get();
            set => _awsSessionToken.Set(value);
        }

        private static readonly __Value<string?> _cloudProviderRegion = new __Value<string?>(() => __config.Get("cloudProviderRegion"));
        /// <summary>
        /// The cloud provider region specifier; used for cloud-provider-based authentication. For example, `us-east-1` for AWS.
        /// </summary>
        public static string? CloudProviderRegion
        {
            get => _cloudProviderRegion.Get();
            set => _cloudProviderRegion.Set(value);
        }

        private static readonly __Value<string?> _cloudProviderType = new __Value<string?>(() => __config.Get("cloudProviderType"));
        /// <summary>
        /// Specifies the cloud provider used for cloud-provider-based authentication, enabling keyless access without API or app keys. Only [`aws`] is supported. This feature is in Preview. If you'd like to enable it for your organization, contact [support](https://docs.datadoghq.com/help/).
        /// </summary>
        public static string? CloudProviderType
        {
            get => _cloudProviderType.Get();
            set => _cloudProviderType.Set(value);
        }

        private static readonly __Value<Pulumi.Datadog.Config.Types.DefaultTags?> _defaultTags = new __Value<Pulumi.Datadog.Config.Types.DefaultTags?>(() => __config.GetObject<Pulumi.Datadog.Config.Types.DefaultTags>("defaultTags"));
        /// <summary>
        /// [Experimental - Logs Pipelines, Monitors Security Monitoring Rules, and Service Level Objectives only] Configuration block containing settings to apply default resource tags across all resources.
        /// </summary>
        public static Pulumi.Datadog.Config.Types.DefaultTags? DefaultTags
        {
            get => _defaultTags.Get();
            set => _defaultTags.Set(value);
        }

        private static readonly __Value<int?> _httpClientRetryBackoffBase = new __Value<int?>(() => __config.GetInt32("httpClientRetryBackoffBase"));
        /// <summary>
        /// The HTTP request retry back off base. Defaults to 2.
        /// </summary>
        public static int? HttpClientRetryBackoffBase
        {
            get => _httpClientRetryBackoffBase.Get();
            set => _httpClientRetryBackoffBase.Set(value);
        }

        private static readonly __Value<int?> _httpClientRetryBackoffMultiplier = new __Value<int?>(() => __config.GetInt32("httpClientRetryBackoffMultiplier"));
        /// <summary>
        /// The HTTP request retry back off multiplier. Defaults to 2.
        /// </summary>
        public static int? HttpClientRetryBackoffMultiplier
        {
            get => _httpClientRetryBackoffMultiplier.Get();
            set => _httpClientRetryBackoffMultiplier.Set(value);
        }

        private static readonly __Value<string?> _httpClientRetryEnabled = new __Value<string?>(() => __config.Get("httpClientRetryEnabled"));
        /// <summary>
        /// Enables request retries on HTTP status codes 429 and 5xx. Valid values are [`true`, `false`]. Defaults to `true`.
        /// </summary>
        public static string? HttpClientRetryEnabled
        {
            get => _httpClientRetryEnabled.Get();
            set => _httpClientRetryEnabled.Set(value);
        }

        private static readonly __Value<int?> _httpClientRetryMaxRetries = new __Value<int?>(() => __config.GetInt32("httpClientRetryMaxRetries"));
        /// <summary>
        /// The HTTP request maximum retry number. Defaults to 3.
        /// </summary>
        public static int? HttpClientRetryMaxRetries
        {
            get => _httpClientRetryMaxRetries.Get();
            set => _httpClientRetryMaxRetries.Set(value);
        }

        private static readonly __Value<int?> _httpClientRetryTimeout = new __Value<int?>(() => __config.GetInt32("httpClientRetryTimeout"));
        /// <summary>
        /// The HTTP request retry timeout period. Defaults to 60 seconds.
        /// </summary>
        public static int? HttpClientRetryTimeout
        {
            get => _httpClientRetryTimeout.Get();
            set => _httpClientRetryTimeout.Set(value);
        }

        private static readonly __Value<string?> _orgUuid = new __Value<string?>(() => __config.Get("orgUuid"));
        /// <summary>
        /// The organization UUID; used for cloud-provider-based authentication. See the [Datadog API documentation](https://docs.datadoghq.com/api/v1/organizations/) for more information.
        /// </summary>
        public static string? OrgUuid
        {
            get => _orgUuid.Get();
            set => _orgUuid.Set(value);
        }

        private static readonly __Value<string?> _validate = new __Value<string?>(() => __config.Get("validate"));
        /// <summary>
        /// Enables validation of the provided API key during provider initialization. Valid values are [`true`, `false`]. Default is true. When false, api_key won't be checked.
        /// </summary>
        public static string? Validate
        {
            get => _validate.Get();
            set => _validate.Set(value);
        }

        public static class Types
        {

             public class DefaultTags
             {
            /// <summary>
            /// [Experimental - Logs Pipelines, Monitors Security Monitoring Rules, and Service Level Objectives only] Resource tags to be applied by default across all resources.
            /// </summary>
                public ImmutableDictionary<string, string>? Tags { get; set; } = null!;
            }
        }
    }
}
