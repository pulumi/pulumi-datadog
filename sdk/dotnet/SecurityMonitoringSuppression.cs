// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog Security Monitoring Suppression API resource. It can be used to create and manage Datadog security monitoring suppression rules.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mySuppression = new Datadog.SecurityMonitoringSuppression("my_suppression", new()
    ///     {
    ///         Name = "My suppression",
    ///         Description = "Suppression for low severity CloudTrail signals from test environments limited to 2024",
    ///         Enabled = true,
    ///         RuleQuery = "severity:low source:cloudtrail",
    ///         SuppressionQuery = "env:test",
    ///         ExpirationDate = "2024-12-31T12:00:00Z",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Security monitoring suppressions can be imported using ID, for example:
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/securityMonitoringSuppression:SecurityMonitoringSuppression my_suppression m0o-hto-lkb
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/securityMonitoringSuppression:SecurityMonitoringSuppression")]
    public partial class SecurityMonitoringSuppression : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A description for the suppression rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the suppression rule is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
        /// </summary>
        [Output("expirationDate")]
        public Output<string?> ExpirationDate { get; private set; } = null!;

        /// <summary>
        /// The name of the suppression rule.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
        /// </summary>
        [Output("ruleQuery")]
        public Output<string> RuleQuery { get; private set; } = null!;

        /// <summary>
        /// The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
        /// </summary>
        [Output("suppressionQuery")]
        public Output<string> SuppressionQuery { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityMonitoringSuppression resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityMonitoringSuppression(string name, SecurityMonitoringSuppressionArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/securityMonitoringSuppression:SecurityMonitoringSuppression", name, args ?? new SecurityMonitoringSuppressionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecurityMonitoringSuppression(string name, Input<string> id, SecurityMonitoringSuppressionState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/securityMonitoringSuppression:SecurityMonitoringSuppression", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityMonitoringSuppression resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityMonitoringSuppression Get(string name, Input<string> id, SecurityMonitoringSuppressionState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityMonitoringSuppression(name, id, state, options);
        }
    }

    public sealed class SecurityMonitoringSuppressionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description for the suppression rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the suppression rule is enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
        /// </summary>
        [Input("expirationDate")]
        public Input<string>? ExpirationDate { get; set; }

        /// <summary>
        /// The name of the suppression rule.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
        /// </summary>
        [Input("ruleQuery", required: true)]
        public Input<string> RuleQuery { get; set; } = null!;

        /// <summary>
        /// The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
        /// </summary>
        [Input("suppressionQuery", required: true)]
        public Input<string> SuppressionQuery { get; set; } = null!;

        public SecurityMonitoringSuppressionArgs()
        {
        }
        public static new SecurityMonitoringSuppressionArgs Empty => new SecurityMonitoringSuppressionArgs();
    }

    public sealed class SecurityMonitoringSuppressionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description for the suppression rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the suppression rule is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
        /// </summary>
        [Input("expirationDate")]
        public Input<string>? ExpirationDate { get; set; }

        /// <summary>
        /// The name of the suppression rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
        /// </summary>
        [Input("ruleQuery")]
        public Input<string>? RuleQuery { get; set; }

        /// <summary>
        /// The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
        /// </summary>
        [Input("suppressionQuery")]
        public Input<string>? SuppressionQuery { get; set; }

        public SecurityMonitoringSuppressionState()
        {
        }
        public static new SecurityMonitoringSuppressionState Empty => new SecurityMonitoringSuppressionState();
    }
}
