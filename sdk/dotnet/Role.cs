// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog role resource. This can be used to create and manage Datadog roles.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var bar = Datadog.GetPermissions.Invoke();
    /// 
    ///     // Create a new Datadog role
    ///     var foo = new Datadog.Role("foo", new()
    ///     {
    ///         Name = "foo",
    ///         Permissions = new[]
    ///         {
    ///             new Datadog.Inputs.RolePermissionArgs
    ///             {
    ///                 Id = bar.Apply(getPermissionsResult =&gt; getPermissionsResult.Permissions?.MonitorsDowntime),
    ///             },
    ///             new Datadog.Inputs.RolePermissionArgs
    ///             {
    ///                 Id = bar.Apply(getPermissionsResult =&gt; getPermissionsResult.Permissions?.MonitorsWrite),
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Roles can be imported using their ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import datadog:index/role:Role example_role 000000-0000-0000-0000-000000000000
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/role:Role")]
    public partial class Role : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the role.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Set of objects containing the permission ID and the name of the permissions granted to this role.
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<Outputs.RolePermission>> Permissions { get; private set; } = null!;

        /// <summary>
        /// Number of users that have this role.
        /// </summary>
        [Output("userCount")]
        public Output<int> UserCount { get; private set; } = null!;

        /// <summary>
        /// If set to `false`, skip the validation call done during plan.
        /// </summary>
        [Output("validate")]
        public Output<bool?> Validate { get; private set; } = null!;


        /// <summary>
        /// Create a Role resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Role(string name, RoleArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/role:Role", name, args ?? new RoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Role(string name, Input<string> id, RoleState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/role:Role", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Role resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Role Get(string name, Input<string> id, RoleState? state = null, CustomResourceOptions? options = null)
        {
            return new Role(name, id, state, options);
        }
    }

    public sealed class RoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the role.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("permissions")]
        private InputList<Inputs.RolePermissionArgs>? _permissions;

        /// <summary>
        /// Set of objects containing the permission ID and the name of the permissions granted to this role.
        /// </summary>
        public InputList<Inputs.RolePermissionArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.RolePermissionArgs>());
            set => _permissions = value;
        }

        /// <summary>
        /// If set to `false`, skip the validation call done during plan.
        /// </summary>
        [Input("validate")]
        public Input<bool>? Validate { get; set; }

        public RoleArgs()
        {
        }
        public static new RoleArgs Empty => new RoleArgs();
    }

    public sealed class RoleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the role.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions")]
        private InputList<Inputs.RolePermissionGetArgs>? _permissions;

        /// <summary>
        /// Set of objects containing the permission ID and the name of the permissions granted to this role.
        /// </summary>
        public InputList<Inputs.RolePermissionGetArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.RolePermissionGetArgs>());
            set => _permissions = value;
        }

        /// <summary>
        /// Number of users that have this role.
        /// </summary>
        [Input("userCount")]
        public Input<int>? UserCount { get; set; }

        /// <summary>
        /// If set to `false`, skip the validation call done during plan.
        /// </summary>
        [Input("validate")]
        public Input<bool>? Validate { get; set; }

        public RoleState()
        {
        }
        public static new RoleState Empty => new RoleState();
    }
}
