// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Outputs
{

    [OutputType]
    public sealed class PowerpackWidgetTreemapDefinitionRequestQueryProcessQuery
    {
        /// <summary>
        /// The aggregation methods available for cloud cost queries. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
        /// </summary>
        public readonly string? Aggregator;
        /// <summary>
        /// The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        /// </summary>
        public readonly string DataSource;
        /// <summary>
        /// Whether to normalize the CPU percentages.
        /// </summary>
        public readonly bool? IsNormalizedCpu;
        /// <summary>
        /// The maximum number of items in the group.
        /// </summary>
        public readonly int? Limit;
        /// <summary>
        /// The metric from the request to correlate with this conditional format.
        /// </summary>
        public readonly string Metric;
        /// <summary>
        /// The name of the powerpack template variable.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The options for sorting group by results.
        /// </summary>
        public readonly string? Sort;
        /// <summary>
        /// An array of tags to filter by.
        /// </summary>
        public readonly ImmutableArray<string> TagFilters;
        /// <summary>
        /// The text to use as a filter.
        /// </summary>
        public readonly string? TextFilter;

        [OutputConstructor]
        private PowerpackWidgetTreemapDefinitionRequestQueryProcessQuery(
            string? aggregator,

            string dataSource,

            bool? isNormalizedCpu,

            int? limit,

            string metric,

            string name,

            string? sort,

            ImmutableArray<string> tagFilters,

            string? textFilter)
        {
            Aggregator = aggregator;
            DataSource = dataSource;
            IsNormalizedCpu = isNormalizedCpu;
            Limit = limit;
            Metric = metric;
            Name = name;
            Sort = sort;
            TagFilters = tagFilters;
            TextFilter = textFilter;
        }
    }
}
