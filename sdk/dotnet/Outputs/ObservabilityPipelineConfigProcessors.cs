// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Outputs
{

    [OutputType]
    public sealed class ObservabilityPipelineConfigProcessors
    {
        /// <summary>
        /// The `add_env_vars` processor adds environment variable values to log events.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsAddEnvVar> AddEnvVars;
        /// <summary>
        /// The `add_fields` processor adds static key-value fields to logs.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsAddField> AddFields;
        /// <summary>
        /// The `dedupe` processor removes duplicate fields in log events.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsDedupe> Dedupes;
        /// <summary>
        /// The `enrichment_table` processor enriches logs using a static CSV file or GeoIP database.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsEnrichmentTable> EnrichmentTables;
        /// <summary>
        /// The `filter` processor allows conditional processing of logs based on a Datadog search query. Logs that match the `include` query are passed through; others are discarded.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsFilter> Filters;
        /// <summary>
        /// The `generate_datadog_metrics` processor creates custom metrics from logs. Metrics can be counters, gauges, or distributions and optionally grouped by log fields.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsGenerateDatadogMetric> GenerateDatadogMetrics;
        /// <summary>
        /// The `ocsf_mapper` processor transforms logs into the OCSF schema using predefined library mappings.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsOcsfMapper> OcsfMappers;
        /// <summary>
        /// The `parse_grok` processor extracts structured fields from unstructured log messages using Grok patterns.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsParseGrok> ParseGroks;
        /// <summary>
        /// The `parse_json` processor extracts JSON from a specified field and flattens it into the event. This is useful when logs contain embedded JSON as a string.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsParseJson> ParseJsons;
        /// <summary>
        /// The `quota` measures logging traffic for logs that match a specified filter. When the configured daily quota is met, the processor can drop or alert.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsQuota> Quotas;
        /// <summary>
        /// The `reduce` processor aggregates and merges logs based on matching keys and merge strategies.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsReduce> Reduces;
        /// <summary>
        /// The `remove_fields` processor deletes specified fields from logs.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsRemoveField> RemoveFields;
        /// <summary>
        /// The `rename_fields` processor changes field names.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsRenameField> RenameFields;
        /// <summary>
        /// The `sample` processor allows probabilistic sampling of logs at a fixed rate.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsSample> Samples;
        /// <summary>
        /// The `sensitive_data_scanner` processor detects and optionally redacts sensitive data in log events.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsSensitiveDataScanner> SensitiveDataScanners;
        /// <summary>
        /// The `throttle` processor limits the number of events that pass through over a given time window.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsThrottle> Throttles;

        [OutputConstructor]
        private ObservabilityPipelineConfigProcessors(
            ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsAddEnvVar> addEnvVars,

            ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsAddField> addFields,

            ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsDedupe> dedupes,

            ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsEnrichmentTable> enrichmentTables,

            ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsFilter> filters,

            ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsGenerateDatadogMetric> generateDatadogMetrics,

            ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsOcsfMapper> ocsfMappers,

            ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsParseGrok> parseGroks,

            ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsParseJson> parseJsons,

            ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsQuota> quotas,

            ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsReduce> reduces,

            ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsRemoveField> removeFields,

            ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsRenameField> renameFields,

            ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsSample> samples,

            ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsSensitiveDataScanner> sensitiveDataScanners,

            ImmutableArray<Outputs.ObservabilityPipelineConfigProcessorsThrottle> throttles)
        {
            AddEnvVars = addEnvVars;
            AddFields = addFields;
            Dedupes = dedupes;
            EnrichmentTables = enrichmentTables;
            Filters = filters;
            GenerateDatadogMetrics = generateDatadogMetrics;
            OcsfMappers = ocsfMappers;
            ParseGroks = parseGroks;
            ParseJsons = parseJsons;
            Quotas = quotas;
            Reduces = reduces;
            RemoveFields = removeFields;
            RenameFields = renameFields;
            Samples = samples;
            SensitiveDataScanners = sensitiveDataScanners;
            Throttles = throttles;
        }
    }
}
