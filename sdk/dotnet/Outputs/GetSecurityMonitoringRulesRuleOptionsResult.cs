// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Outputs
{

    [OutputType]
    public sealed class GetSecurityMonitoringRulesRuleOptionsResult
    {
        /// <summary>
        /// If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `log_detection`.
        /// </summary>
        public readonly bool? DecreaseCriticalityBasedOnEnv;
        /// <summary>
        /// The detection method.
        /// </summary>
        public readonly string? DetectionMethod;
        /// <summary>
        /// A time window is specified to match when at least one of the cases matches true. This is a sliding window and evaluates in real time.
        /// </summary>
        public readonly int? EvaluationWindow;
        /// <summary>
        /// Options for rules using the impossible travel detection method.
        /// </summary>
        public readonly Outputs.GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsResult? ImpossibleTravelOptions;
        /// <summary>
        /// Once a signal is generated, the signal will remain “open” if a case is matched at least once within this keep alive window (in seconds).
        /// </summary>
        public readonly int? KeepAlive;
        /// <summary>
        /// A signal will “close” regardless of the query being matched once the time exceeds the maximum duration (in seconds). This time is calculated from the first seen timestamp.
        /// </summary>
        public readonly int? MaxSignalDuration;
        /// <summary>
        /// New value rules specific options.
        /// </summary>
        public readonly Outputs.GetSecurityMonitoringRulesRuleOptionsNewValueOptionsResult? NewValueOptions;
        /// <summary>
        /// Options for rules using the third-party detection method.
        /// </summary>
        public readonly Outputs.GetSecurityMonitoringRulesRuleOptionsThirdPartyRuleOptionsResult? ThirdPartyRuleOptions;

        [OutputConstructor]
        private GetSecurityMonitoringRulesRuleOptionsResult(
            bool? decreaseCriticalityBasedOnEnv,

            string? detectionMethod,

            int? evaluationWindow,

            Outputs.GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptionsResult? impossibleTravelOptions,

            int? keepAlive,

            int? maxSignalDuration,

            Outputs.GetSecurityMonitoringRulesRuleOptionsNewValueOptionsResult? newValueOptions,

            Outputs.GetSecurityMonitoringRulesRuleOptionsThirdPartyRuleOptionsResult? thirdPartyRuleOptions)
        {
            DecreaseCriticalityBasedOnEnv = decreaseCriticalityBasedOnEnv;
            DetectionMethod = detectionMethod;
            EvaluationWindow = evaluationWindow;
            ImpossibleTravelOptions = impossibleTravelOptions;
            KeepAlive = keepAlive;
            MaxSignalDuration = maxSignalDuration;
            NewValueOptions = newValueOptions;
            ThirdPartyRuleOptions = thirdPartyRuleOptions;
        }
    }
}
