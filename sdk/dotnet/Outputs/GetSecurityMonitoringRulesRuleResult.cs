// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Outputs
{

    [OutputType]
    public sealed class GetSecurityMonitoringRulesRuleResult
    {
        /// <summary>
        /// Cases for generating signals.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityMonitoringRulesRuleCaseResult> Cases;
        /// <summary>
        /// Whether the rule is enabled.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// Additional queries to filter matched events before they are processed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityMonitoringRulesRuleFilterResult> Filters;
        /// <summary>
        /// Whether the notifications include the triggering group-by values in their title.
        /// </summary>
        public readonly bool? HasExtendedTitle;
        /// <summary>
        /// Message for generated signals.
        /// </summary>
        public readonly string Message;
        /// <summary>
        /// The name of the rule.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Options on rules.
        /// </summary>
        public readonly Outputs.GetSecurityMonitoringRulesRuleOptionsResult? Options;
        /// <summary>
        /// Queries for selecting logs which are part of the rule.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityMonitoringRulesRuleQueryResult> Queries;
        /// <summary>
        /// Queries for selecting logs which are part of the rule.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityMonitoringRulesRuleSignalQueryResult> SignalQueries;
        /// <summary>
        /// Tags for generated signals.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Cases for generating signals for third-party rules. Only required and accepted for third-party rules
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityMonitoringRulesRuleThirdPartyCaseResult> ThirdPartyCases;
        /// <summary>
        /// The rule type.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetSecurityMonitoringRulesRuleResult(
            ImmutableArray<Outputs.GetSecurityMonitoringRulesRuleCaseResult> cases,

            bool? enabled,

            ImmutableArray<Outputs.GetSecurityMonitoringRulesRuleFilterResult> filters,

            bool? hasExtendedTitle,

            string message,

            string name,

            Outputs.GetSecurityMonitoringRulesRuleOptionsResult? options,

            ImmutableArray<Outputs.GetSecurityMonitoringRulesRuleQueryResult> queries,

            ImmutableArray<Outputs.GetSecurityMonitoringRulesRuleSignalQueryResult> signalQueries,

            ImmutableArray<string> tags,

            ImmutableArray<Outputs.GetSecurityMonitoringRulesRuleThirdPartyCaseResult> thirdPartyCases,

            string? type)
        {
            Cases = cases;
            Enabled = enabled;
            Filters = filters;
            HasExtendedTitle = hasExtendedTitle;
            Message = message;
            Name = name;
            Options = options;
            Queries = queries;
            SignalQueries = signalQueries;
            Tags = tags;
            ThirdPartyCases = thirdPartyCases;
            Type = type;
        }
    }
}
