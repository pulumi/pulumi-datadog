// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Outputs
{

    [OutputType]
    public sealed class ObservabilityPipelineConfigSources
    {
        /// <summary>
        /// The `amazon_data_firehose` source ingests logs from AWS Data Firehose.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesAmazonDataFirehose> AmazonDataFirehoses;
        /// <summary>
        /// The `amazon_s3` source ingests logs from an Amazon S3 bucket. It supports AWS authentication and TLS encryption.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesAmazonS3> AmazonS3s;
        /// <summary>
        /// The `datadog_agent` source collects logs from the Datadog Agent.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesDatadogAgent> DatadogAgents;
        /// <summary>
        /// The `fluent` source ingests logs from Fluent Bit.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesFluentBit> FluentBits;
        /// <summary>
        /// The `fluent` source ingests logs from a Fluentd-compatible service.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesFluentd> Fluentds;
        /// <summary>
        /// The `google_pubsub` source ingests logs from a Google Cloud Pub/Sub subscription.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesGooglePubsub> GooglePubsubs;
        /// <summary>
        /// The `http_client` source scrapes logs from HTTP endpoints at regular intervals.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesHttpClient> HttpClients;
        /// <summary>
        /// The `http_server` source collects logs over HTTP POST from external services.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesHttpServer> HttpServers;
        /// <summary>
        /// The `kafka` source ingests data from Apache Kafka topics.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesKafka> Kafkas;
        /// <summary>
        /// The `logstash` source ingests logs from a Logstash forwarder.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesLogstash> Logstashes;
        /// <summary>
        /// The `rsyslog` source listens for logs over TCP or UDP from an `rsyslog` server using the syslog protocol.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesRsyslog> Rsyslogs;
        /// <summary>
        /// The `socket` source ingests logs over TCP or UDP.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesSocket> Sockets;
        /// <summary>
        /// The `splunk_hec` source implements the Splunk HTTP Event Collector (HEC) API.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesSplunkHec> SplunkHecs;
        /// <summary>
        /// The `splunk_tcp` source receives logs from a Splunk Universal Forwarder over TCP. TLS is supported for secure transmission.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesSplunkTcp> SplunkTcps;
        /// <summary>
        /// The `sumo_logic` source receives logs from Sumo Logic collectors.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesSumoLogic> SumoLogics;
        /// <summary>
        /// The `syslog_ng` source listens for logs over TCP or UDP from a `syslog-ng` server using the syslog protocol.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesSyslogNg> SyslogNgs;

        [OutputConstructor]
        private ObservabilityPipelineConfigSources(
            ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesAmazonDataFirehose> amazonDataFirehoses,

            ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesAmazonS3> amazonS3s,

            ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesDatadogAgent> datadogAgents,

            ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesFluentBit> fluentBits,

            ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesFluentd> fluentds,

            ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesGooglePubsub> googlePubsubs,

            ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesHttpClient> httpClients,

            ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesHttpServer> httpServers,

            ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesKafka> kafkas,

            ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesLogstash> logstashes,

            ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesRsyslog> rsyslogs,

            ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesSocket> sockets,

            ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesSplunkHec> splunkHecs,

            ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesSplunkTcp> splunkTcps,

            ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesSumoLogic> sumoLogics,

            ImmutableArray<Outputs.ObservabilityPipelineConfigSourcesSyslogNg> syslogNgs)
        {
            AmazonDataFirehoses = amazonDataFirehoses;
            AmazonS3s = amazonS3s;
            DatadogAgents = datadogAgents;
            FluentBits = fluentBits;
            Fluentds = fluentds;
            GooglePubsubs = googlePubsubs;
            HttpClients = httpClients;
            HttpServers = httpServers;
            Kafkas = kafkas;
            Logstashes = logstashes;
            Rsyslogs = rsyslogs;
            Sockets = sockets;
            SplunkHecs = splunkHecs;
            SplunkTcps = splunkTcps;
            SumoLogics = sumoLogics;
            SyslogNgs = syslogNgs;
        }
    }
}
