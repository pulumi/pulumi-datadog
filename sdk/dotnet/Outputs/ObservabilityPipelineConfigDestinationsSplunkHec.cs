// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Outputs
{

    [OutputType]
    public sealed class ObservabilityPipelineConfigDestinationsSplunkHec
    {
        /// <summary>
        /// If `true`, Splunk tries to extract timestamps from incoming log events.
        /// </summary>
        public readonly bool? AutoExtractTimestamp;
        /// <summary>
        /// Encoding format for log events. Valid values: `json`, `raw_message`.
        /// </summary>
        public readonly string? Encoding;
        /// <summary>
        /// The unique identifier for this component. Used to reference this component in other parts of the pipeline (e.g., as input to downstream components).
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Optional name of the Splunk index where logs are written.
        /// </summary>
        public readonly string? Index;
        /// <summary>
        /// A list of component IDs whose output is used as the `input` for this component.
        /// </summary>
        public readonly ImmutableArray<string> Inputs;
        /// <summary>
        /// The Splunk sourcetype to assign to log events.
        /// </summary>
        public readonly string? Sourcetype;

        [OutputConstructor]
        private ObservabilityPipelineConfigDestinationsSplunkHec(
            bool? autoExtractTimestamp,

            string? encoding,

            string id,

            string? index,

            ImmutableArray<string> inputs,

            string? sourcetype)
        {
            AutoExtractTimestamp = autoExtractTimestamp;
            Encoding = encoding;
            Id = id;
            Index = index;
            Inputs = inputs;
            Sourcetype = sourcetype;
        }
    }
}
