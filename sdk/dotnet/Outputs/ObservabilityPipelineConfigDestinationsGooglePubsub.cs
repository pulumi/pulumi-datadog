// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Outputs
{

    [OutputType]
    public sealed class ObservabilityPipelineConfigDestinationsGooglePubsub
    {
        /// <summary>
        /// GCP credentials used to authenticate with Google Cloud Pub/Sub.
        /// </summary>
        public readonly Outputs.ObservabilityPipelineConfigDestinationsGooglePubsubAuth? Auth;
        /// <summary>
        /// Encoding format for log events. Valid values: `Json`, `RawMessage`.
        /// </summary>
        public readonly string? Encoding;
        /// <summary>
        /// The unique identifier for this component.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of component IDs whose output is used as the `Input` for this component.
        /// </summary>
        public readonly ImmutableArray<string> Inputs;
        /// <summary>
        /// The GCP project ID that owns the Pub/Sub topic.
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// Configuration for enabling TLS encryption between the pipeline component and external services.
        /// </summary>
        public readonly Outputs.ObservabilityPipelineConfigDestinationsGooglePubsubTls? Tls;
        /// <summary>
        /// The Pub/Sub topic name to publish logs to.
        /// </summary>
        public readonly string Topic;

        [OutputConstructor]
        private ObservabilityPipelineConfigDestinationsGooglePubsub(
            Outputs.ObservabilityPipelineConfigDestinationsGooglePubsubAuth? auth,

            string? encoding,

            string id,

            ImmutableArray<string> inputs,

            string project,

            Outputs.ObservabilityPipelineConfigDestinationsGooglePubsubTls? tls,

            string topic)
        {
            Auth = auth;
            Encoding = encoding;
            Id = id;
            Inputs = inputs;
            Project = project;
            Tls = tls;
            Topic = topic;
        }
    }
}
