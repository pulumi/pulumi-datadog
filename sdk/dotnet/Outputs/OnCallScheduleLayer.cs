// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Outputs
{

    [OutputType]
    public sealed class OnCallScheduleLayer
    {
        /// <summary>
        /// The date/time when this layer should become active (in ISO 8601).
        /// </summary>
        public readonly string EffectiveDate;
        /// <summary>
        /// The date/time after which this layer no longer applies (in ISO 8601).
        /// </summary>
        public readonly string? EndDate;
        /// <summary>
        /// The ID of this layer.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Rotation interval for this layer.
        /// </summary>
        public readonly Outputs.OnCallScheduleLayerInterval? Interval;
        /// <summary>
        /// The name of this layer. Should be unique within the schedule.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of restrictions for the layer.
        /// </summary>
        public readonly ImmutableArray<Outputs.OnCallScheduleLayerRestriction> Restrictions;
        /// <summary>
        /// The date/time when the rotation for this layer starts (in ISO 8601).
        /// </summary>
        public readonly string RotationStart;
        /// <summary>
        /// List of user IDs for the layer. Can either be a valid user id or null
        /// </summary>
        public readonly ImmutableArray<string> Users;

        [OutputConstructor]
        private OnCallScheduleLayer(
            string effectiveDate,

            string? endDate,

            string? id,

            Outputs.OnCallScheduleLayerInterval? interval,

            string name,

            ImmutableArray<Outputs.OnCallScheduleLayerRestriction> restrictions,

            string rotationStart,

            ImmutableArray<string> users)
        {
            EffectiveDate = effectiveDate;
            EndDate = endDate;
            Id = id;
            Interval = interval;
            Name = name;
            Restrictions = restrictions;
            RotationStart = rotationStart;
            Users = users;
        }
    }
}
