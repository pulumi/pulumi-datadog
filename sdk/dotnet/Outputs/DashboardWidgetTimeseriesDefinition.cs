// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Outputs
{

    [OutputType]
    public sealed class DashboardWidgetTimeseriesDefinition
    {
        /// <summary>
        /// A nested block describing a custom link. Multiple `CustomLink` blocks are allowed using the structure below.
        /// </summary>
        public readonly ImmutableArray<Outputs.DashboardWidgetTimeseriesDefinitionCustomLink> CustomLinks;
        /// <summary>
        /// The definition of the event to overlay on the graph. Multiple `Event` blocks are allowed using the structure below.
        /// </summary>
        public readonly ImmutableArray<Outputs.DashboardWidgetTimeseriesDefinitionEvent> Events;
        /// <summary>
        /// A list of columns to display in the legend. Valid values are `Value`, `Avg`, `Sum`, `Min`, `Max`.
        /// </summary>
        public readonly ImmutableArray<string> LegendColumns;
        /// <summary>
        /// The layout of the legend displayed in the widget. Valid values are `Auto`, `Horizontal`, `Vertical`.
        /// </summary>
        public readonly string? LegendLayout;
        /// <summary>
        /// The size of the legend displayed in the widget.
        /// </summary>
        public readonly string? LegendSize;
        /// <summary>
        /// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `WeekToDate`, `MonthToDate`, `1y`, `Alert`.
        /// </summary>
        public readonly string? LiveSpan;
        /// <summary>
        /// A nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple `Marker` blocks are allowed within a given `TileDef` block.
        /// </summary>
        public readonly ImmutableArray<Outputs.DashboardWidgetTimeseriesDefinitionMarker> Markers;
        /// <summary>
        /// A nested block describing the request to use when displaying the widget. Multiple `Request` blocks are allowed using the structure below (exactly one of `Q`, `ApmQuery`, `LogQuery`, `RumQuery`, `NetworkQuery`, `SecurityQuery` or `ProcessQuery` is required within the `Request` block).
        /// </summary>
        public readonly ImmutableArray<Outputs.DashboardWidgetTimeseriesDefinitionRequest> Requests;
        /// <summary>
        /// A nested block describing the right Y-Axis Controls. See the `OnRightYaxis` property for which request will use this axis. The structure of this block is described below.
        /// </summary>
        public readonly Outputs.DashboardWidgetTimeseriesDefinitionRightYaxis? RightYaxis;
        /// <summary>
        /// Whether or not to show the legend on this widget.
        /// </summary>
        public readonly bool? ShowLegend;
        /// <summary>
        /// The title of the widget.
        /// </summary>
        public readonly string? Title;
        /// <summary>
        /// The alignment of the widget's title. Valid values are `Center`, `Left`, `Right`.
        /// </summary>
        public readonly string? TitleAlign;
        /// <summary>
        /// The size of the widget's title (defaults to 16).
        /// </summary>
        public readonly string? TitleSize;
        /// <summary>
        /// A nested block describing the Y-Axis Controls. The structure of this block is described below.
        /// </summary>
        public readonly Outputs.DashboardWidgetTimeseriesDefinitionYaxis? Yaxis;

        [OutputConstructor]
        private DashboardWidgetTimeseriesDefinition(
            ImmutableArray<Outputs.DashboardWidgetTimeseriesDefinitionCustomLink> customLinks,

            ImmutableArray<Outputs.DashboardWidgetTimeseriesDefinitionEvent> events,

            ImmutableArray<string> legendColumns,

            string? legendLayout,

            string? legendSize,

            string? liveSpan,

            ImmutableArray<Outputs.DashboardWidgetTimeseriesDefinitionMarker> markers,

            ImmutableArray<Outputs.DashboardWidgetTimeseriesDefinitionRequest> requests,

            Outputs.DashboardWidgetTimeseriesDefinitionRightYaxis? rightYaxis,

            bool? showLegend,

            string? title,

            string? titleAlign,

            string? titleSize,

            Outputs.DashboardWidgetTimeseriesDefinitionYaxis? yaxis)
        {
            CustomLinks = customLinks;
            Events = events;
            LegendColumns = legendColumns;
            LegendLayout = legendLayout;
            LegendSize = legendSize;
            LiveSpan = liveSpan;
            Markers = markers;
            Requests = requests;
            RightYaxis = rightYaxis;
            ShowLegend = showLegend;
            Title = title;
            TitleAlign = titleAlign;
            TitleSize = titleSize;
            Yaxis = yaxis;
        }
    }
}
