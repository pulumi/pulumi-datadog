// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Outputs
{

    [OutputType]
    public sealed class ObservabilityPipelineConfigProcessorsSensitiveDataScannerRule
    {
        /// <summary>
        /// Keyword-based proximity matching for sensitive data.
        /// </summary>
        public readonly Outputs.ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleKeywordOptions? KeywordOptions;
        /// <summary>
        /// A name identifying the rule.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The action to take when a sensitive value is found.
        /// </summary>
        public readonly Outputs.ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleOnMatch? OnMatch;
        /// <summary>
        /// Pattern detection configuration for identifying sensitive data using either a custom regex or a library reference.
        /// </summary>
        public readonly Outputs.ObservabilityPipelineConfigProcessorsSensitiveDataScannerRulePattern? Pattern;
        /// <summary>
        /// Field-level targeting options that determine where the scanner should operate.
        /// </summary>
        public readonly Outputs.ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleScope? Scope;
        /// <summary>
        /// Tags assigned to this rule for filtering and classification.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private ObservabilityPipelineConfigProcessorsSensitiveDataScannerRule(
            Outputs.ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleKeywordOptions? keywordOptions,

            string? name,

            Outputs.ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleOnMatch? onMatch,

            Outputs.ObservabilityPipelineConfigProcessorsSensitiveDataScannerRulePattern? pattern,

            Outputs.ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleScope? scope,

            ImmutableArray<string> tags)
        {
            KeywordOptions = keywordOptions;
            Name = name;
            OnMatch = onMatch;
            Pattern = pattern;
            Scope = scope;
            Tags = tags;
        }
    }
}
