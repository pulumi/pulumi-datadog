// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog synthetics test resource. This can be used to create and manage Datadog synthetics test.
    /// 
    /// #### *Warning*
    /// Starting from version 3.1.0+, the direct usage of global variables in the configuration is deprecated, in favor of
    /// local variables of type `global`. As an example, if you were previously using `{{ GLOBAL_VAR }}` directly in your
    /// configuration, add a `config_variable` of type `global` with the `id` matching the `id` of the global variable `GLOBAL_VAR`, which can be found in the Synthetics UI or from the output of the `datadog.SyntheticsGlobalVariable` resource. The name can be chosen freely.
    /// 
    /// In practice, it means going from (simplified configuration):
    /// 
    /// to
    /// 
    /// which you can now use in your request definition:
    /// 
    /// ## Import
    /// 
    /// Synthetics tests can be imported using their public string ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/syntheticsTest:SyntheticsTest fizz abc-123-xyz
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/syntheticsTest:SyntheticsTest")]
    public partial class SyntheticsTest : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Steps for multi-step api tests
        /// </summary>
        [Output("apiSteps")]
        public Output<ImmutableArray<Outputs.SyntheticsTestApiStep>> ApiSteps { get; private set; } = null!;

        /// <summary>
        /// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
        /// </summary>
        [Output("assertions")]
        public Output<ImmutableArray<Outputs.SyntheticsTestAssertion>> Assertions { get; private set; } = null!;

        /// <summary>
        /// Steps for browser tests.
        /// </summary>
        [Output("browserSteps")]
        public Output<ImmutableArray<Outputs.SyntheticsTestBrowserStep>> BrowserSteps { get; private set; } = null!;

        /// <summary>
        /// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
        /// </summary>
        [Output("browserVariables")]
        public Output<ImmutableArray<Outputs.SyntheticsTestBrowserVariable>> BrowserVariables { get; private set; } = null!;

        /// <summary>
        /// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
        /// </summary>
        [Output("configVariables")]
        public Output<ImmutableArray<Outputs.SyntheticsTestConfigVariable>> ConfigVariables { get; private set; } = null!;

        /// <summary>
        /// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
        /// </summary>
        [Output("deviceIds")]
        public Output<ImmutableArray<string>> DeviceIds { get; private set; } = null!;

        /// <summary>
        /// A boolean indicating whether this synthetics test can be deleted even if it's referenced by other resources (for example, SLOs and composite monitors).
        /// </summary>
        [Output("forceDeleteDependencies")]
        public Output<bool?> ForceDeleteDependencies { get; private set; } = null!;

        /// <summary>
        /// Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
        /// </summary>
        [Output("locations")]
        public Output<ImmutableArray<string>> Locations { get; private set; } = null!;

        /// <summary>
        /// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events. Defaults to `""`.
        /// </summary>
        [Output("message")]
        public Output<string?> Message { get; private set; } = null!;

        /// <summary>
        /// ID of the monitor associated with the Datadog synthetics test.
        /// </summary>
        [Output("monitorId")]
        public Output<int> MonitorId { get; private set; } = null!;

        /// <summary>
        /// Name of Datadog synthetics test.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("optionsList")]
        public Output<Outputs.SyntheticsTestOptionsList?> OptionsList { get; private set; } = null!;

        /// <summary>
        /// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
        /// </summary>
        [Output("requestBasicauth")]
        public Output<Outputs.SyntheticsTestRequestBasicauth?> RequestBasicauth { get; private set; } = null!;

        /// <summary>
        /// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
        /// </summary>
        [Output("requestClientCertificate")]
        public Output<Outputs.SyntheticsTestRequestClientCertificate?> RequestClientCertificate { get; private set; } = null!;

        /// <summary>
        /// Required if `type = "api"`. The synthetics test request.
        /// </summary>
        [Output("requestDefinition")]
        public Output<Outputs.SyntheticsTestRequestDefinition?> RequestDefinition { get; private set; } = null!;

        /// <summary>
        /// Files to be used as part of the request in the test.
        /// </summary>
        [Output("requestFiles")]
        public Output<ImmutableArray<Outputs.SyntheticsTestRequestFile>> RequestFiles { get; private set; } = null!;

        /// <summary>
        /// Header name and value map.
        /// </summary>
        [Output("requestHeaders")]
        public Output<ImmutableDictionary<string, object>?> RequestHeaders { get; private set; } = null!;

        /// <summary>
        /// Metadata to include when performing the gRPC test.
        /// </summary>
        [Output("requestMetadata")]
        public Output<ImmutableDictionary<string, object>?> RequestMetadata { get; private set; } = null!;

        /// <summary>
        /// The proxy to perform the test.
        /// </summary>
        [Output("requestProxy")]
        public Output<Outputs.SyntheticsTestRequestProxy?> RequestProxy { get; private set; } = null!;

        /// <summary>
        /// Query arguments name and value map.
        /// </summary>
        [Output("requestQuery")]
        public Output<ImmutableDictionary<string, object>?> RequestQuery { get; private set; } = null!;

        /// <summary>
        /// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
        /// </summary>
        [Output("setCookie")]
        public Output<string?> SetCookie { get; private set; } = null!;

        /// <summary>
        /// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
        /// </summary>
        [Output("subtype")]
        public Output<string?> Subtype { get; private set; } = null!;

        /// <summary>
        /// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Synthetics test type. Valid values are `api`, `browser`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Variables defined from JavaScript code for API HTTP tests.
        /// </summary>
        [Output("variablesFromScript")]
        public Output<string?> VariablesFromScript { get; private set; } = null!;


        /// <summary>
        /// Create a SyntheticsTest resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SyntheticsTest(string name, SyntheticsTestArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/syntheticsTest:SyntheticsTest", name, args ?? new SyntheticsTestArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SyntheticsTest(string name, Input<string> id, SyntheticsTestState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/syntheticsTest:SyntheticsTest", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SyntheticsTest resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SyntheticsTest Get(string name, Input<string> id, SyntheticsTestState? state = null, CustomResourceOptions? options = null)
        {
            return new SyntheticsTest(name, id, state, options);
        }
    }

    public sealed class SyntheticsTestArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiSteps")]
        private InputList<Inputs.SyntheticsTestApiStepArgs>? _apiSteps;

        /// <summary>
        /// Steps for multi-step api tests
        /// </summary>
        public InputList<Inputs.SyntheticsTestApiStepArgs> ApiSteps
        {
            get => _apiSteps ?? (_apiSteps = new InputList<Inputs.SyntheticsTestApiStepArgs>());
            set => _apiSteps = value;
        }

        [Input("assertions")]
        private InputList<Inputs.SyntheticsTestAssertionArgs>? _assertions;

        /// <summary>
        /// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
        /// </summary>
        public InputList<Inputs.SyntheticsTestAssertionArgs> Assertions
        {
            get => _assertions ?? (_assertions = new InputList<Inputs.SyntheticsTestAssertionArgs>());
            set => _assertions = value;
        }

        [Input("browserSteps")]
        private InputList<Inputs.SyntheticsTestBrowserStepArgs>? _browserSteps;

        /// <summary>
        /// Steps for browser tests.
        /// </summary>
        public InputList<Inputs.SyntheticsTestBrowserStepArgs> BrowserSteps
        {
            get => _browserSteps ?? (_browserSteps = new InputList<Inputs.SyntheticsTestBrowserStepArgs>());
            set => _browserSteps = value;
        }

        [Input("browserVariables")]
        private InputList<Inputs.SyntheticsTestBrowserVariableArgs>? _browserVariables;

        /// <summary>
        /// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
        /// </summary>
        public InputList<Inputs.SyntheticsTestBrowserVariableArgs> BrowserVariables
        {
            get => _browserVariables ?? (_browserVariables = new InputList<Inputs.SyntheticsTestBrowserVariableArgs>());
            set => _browserVariables = value;
        }

        [Input("configVariables")]
        private InputList<Inputs.SyntheticsTestConfigVariableArgs>? _configVariables;

        /// <summary>
        /// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
        /// </summary>
        public InputList<Inputs.SyntheticsTestConfigVariableArgs> ConfigVariables
        {
            get => _configVariables ?? (_configVariables = new InputList<Inputs.SyntheticsTestConfigVariableArgs>());
            set => _configVariables = value;
        }

        [Input("deviceIds")]
        private InputList<string>? _deviceIds;

        /// <summary>
        /// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
        /// </summary>
        public InputList<string> DeviceIds
        {
            get => _deviceIds ?? (_deviceIds = new InputList<string>());
            set => _deviceIds = value;
        }

        /// <summary>
        /// A boolean indicating whether this synthetics test can be deleted even if it's referenced by other resources (for example, SLOs and composite monitors).
        /// </summary>
        [Input("forceDeleteDependencies")]
        public Input<bool>? ForceDeleteDependencies { get; set; }

        [Input("locations", required: true)]
        private InputList<string>? _locations;

        /// <summary>
        /// Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        /// <summary>
        /// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events. Defaults to `""`.
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// Name of Datadog synthetics test.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("optionsList")]
        public Input<Inputs.SyntheticsTestOptionsListArgs>? OptionsList { get; set; }

        /// <summary>
        /// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
        /// </summary>
        [Input("requestBasicauth")]
        public Input<Inputs.SyntheticsTestRequestBasicauthArgs>? RequestBasicauth { get; set; }

        /// <summary>
        /// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
        /// </summary>
        [Input("requestClientCertificate")]
        public Input<Inputs.SyntheticsTestRequestClientCertificateArgs>? RequestClientCertificate { get; set; }

        /// <summary>
        /// Required if `type = "api"`. The synthetics test request.
        /// </summary>
        [Input("requestDefinition")]
        public Input<Inputs.SyntheticsTestRequestDefinitionArgs>? RequestDefinition { get; set; }

        [Input("requestFiles")]
        private InputList<Inputs.SyntheticsTestRequestFileArgs>? _requestFiles;

        /// <summary>
        /// Files to be used as part of the request in the test.
        /// </summary>
        public InputList<Inputs.SyntheticsTestRequestFileArgs> RequestFiles
        {
            get => _requestFiles ?? (_requestFiles = new InputList<Inputs.SyntheticsTestRequestFileArgs>());
            set => _requestFiles = value;
        }

        [Input("requestHeaders")]
        private InputMap<object>? _requestHeaders;

        /// <summary>
        /// Header name and value map.
        /// </summary>
        public InputMap<object> RequestHeaders
        {
            get => _requestHeaders ?? (_requestHeaders = new InputMap<object>());
            set => _requestHeaders = value;
        }

        [Input("requestMetadata")]
        private InputMap<object>? _requestMetadata;

        /// <summary>
        /// Metadata to include when performing the gRPC test.
        /// </summary>
        public InputMap<object> RequestMetadata
        {
            get => _requestMetadata ?? (_requestMetadata = new InputMap<object>());
            set => _requestMetadata = value;
        }

        /// <summary>
        /// The proxy to perform the test.
        /// </summary>
        [Input("requestProxy")]
        public Input<Inputs.SyntheticsTestRequestProxyArgs>? RequestProxy { get; set; }

        [Input("requestQuery")]
        private InputMap<object>? _requestQuery;

        /// <summary>
        /// Query arguments name and value map.
        /// </summary>
        public InputMap<object> RequestQuery
        {
            get => _requestQuery ?? (_requestQuery = new InputMap<object>());
            set => _requestQuery = value;
        }

        /// <summary>
        /// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
        /// </summary>
        [Input("setCookie")]
        public Input<string>? SetCookie { get; set; }

        /// <summary>
        /// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
        /// </summary>
        [Input("status", required: true)]
        public Input<string> Status { get; set; } = null!;

        /// <summary>
        /// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
        /// </summary>
        [Input("subtype")]
        public Input<string>? Subtype { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Synthetics test type. Valid values are `api`, `browser`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Variables defined from JavaScript code for API HTTP tests.
        /// </summary>
        [Input("variablesFromScript")]
        public Input<string>? VariablesFromScript { get; set; }

        public SyntheticsTestArgs()
        {
        }
        public static new SyntheticsTestArgs Empty => new SyntheticsTestArgs();
    }

    public sealed class SyntheticsTestState : global::Pulumi.ResourceArgs
    {
        [Input("apiSteps")]
        private InputList<Inputs.SyntheticsTestApiStepGetArgs>? _apiSteps;

        /// <summary>
        /// Steps for multi-step api tests
        /// </summary>
        public InputList<Inputs.SyntheticsTestApiStepGetArgs> ApiSteps
        {
            get => _apiSteps ?? (_apiSteps = new InputList<Inputs.SyntheticsTestApiStepGetArgs>());
            set => _apiSteps = value;
        }

        [Input("assertions")]
        private InputList<Inputs.SyntheticsTestAssertionGetArgs>? _assertions;

        /// <summary>
        /// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
        /// </summary>
        public InputList<Inputs.SyntheticsTestAssertionGetArgs> Assertions
        {
            get => _assertions ?? (_assertions = new InputList<Inputs.SyntheticsTestAssertionGetArgs>());
            set => _assertions = value;
        }

        [Input("browserSteps")]
        private InputList<Inputs.SyntheticsTestBrowserStepGetArgs>? _browserSteps;

        /// <summary>
        /// Steps for browser tests.
        /// </summary>
        public InputList<Inputs.SyntheticsTestBrowserStepGetArgs> BrowserSteps
        {
            get => _browserSteps ?? (_browserSteps = new InputList<Inputs.SyntheticsTestBrowserStepGetArgs>());
            set => _browserSteps = value;
        }

        [Input("browserVariables")]
        private InputList<Inputs.SyntheticsTestBrowserVariableGetArgs>? _browserVariables;

        /// <summary>
        /// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
        /// </summary>
        public InputList<Inputs.SyntheticsTestBrowserVariableGetArgs> BrowserVariables
        {
            get => _browserVariables ?? (_browserVariables = new InputList<Inputs.SyntheticsTestBrowserVariableGetArgs>());
            set => _browserVariables = value;
        }

        [Input("configVariables")]
        private InputList<Inputs.SyntheticsTestConfigVariableGetArgs>? _configVariables;

        /// <summary>
        /// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
        /// </summary>
        public InputList<Inputs.SyntheticsTestConfigVariableGetArgs> ConfigVariables
        {
            get => _configVariables ?? (_configVariables = new InputList<Inputs.SyntheticsTestConfigVariableGetArgs>());
            set => _configVariables = value;
        }

        [Input("deviceIds")]
        private InputList<string>? _deviceIds;

        /// <summary>
        /// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
        /// </summary>
        public InputList<string> DeviceIds
        {
            get => _deviceIds ?? (_deviceIds = new InputList<string>());
            set => _deviceIds = value;
        }

        /// <summary>
        /// A boolean indicating whether this synthetics test can be deleted even if it's referenced by other resources (for example, SLOs and composite monitors).
        /// </summary>
        [Input("forceDeleteDependencies")]
        public Input<bool>? ForceDeleteDependencies { get; set; }

        [Input("locations")]
        private InputList<string>? _locations;

        /// <summary>
        /// Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        /// <summary>
        /// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events. Defaults to `""`.
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// ID of the monitor associated with the Datadog synthetics test.
        /// </summary>
        [Input("monitorId")]
        public Input<int>? MonitorId { get; set; }

        /// <summary>
        /// Name of Datadog synthetics test.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("optionsList")]
        public Input<Inputs.SyntheticsTestOptionsListGetArgs>? OptionsList { get; set; }

        /// <summary>
        /// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
        /// </summary>
        [Input("requestBasicauth")]
        public Input<Inputs.SyntheticsTestRequestBasicauthGetArgs>? RequestBasicauth { get; set; }

        /// <summary>
        /// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
        /// </summary>
        [Input("requestClientCertificate")]
        public Input<Inputs.SyntheticsTestRequestClientCertificateGetArgs>? RequestClientCertificate { get; set; }

        /// <summary>
        /// Required if `type = "api"`. The synthetics test request.
        /// </summary>
        [Input("requestDefinition")]
        public Input<Inputs.SyntheticsTestRequestDefinitionGetArgs>? RequestDefinition { get; set; }

        [Input("requestFiles")]
        private InputList<Inputs.SyntheticsTestRequestFileGetArgs>? _requestFiles;

        /// <summary>
        /// Files to be used as part of the request in the test.
        /// </summary>
        public InputList<Inputs.SyntheticsTestRequestFileGetArgs> RequestFiles
        {
            get => _requestFiles ?? (_requestFiles = new InputList<Inputs.SyntheticsTestRequestFileGetArgs>());
            set => _requestFiles = value;
        }

        [Input("requestHeaders")]
        private InputMap<object>? _requestHeaders;

        /// <summary>
        /// Header name and value map.
        /// </summary>
        public InputMap<object> RequestHeaders
        {
            get => _requestHeaders ?? (_requestHeaders = new InputMap<object>());
            set => _requestHeaders = value;
        }

        [Input("requestMetadata")]
        private InputMap<object>? _requestMetadata;

        /// <summary>
        /// Metadata to include when performing the gRPC test.
        /// </summary>
        public InputMap<object> RequestMetadata
        {
            get => _requestMetadata ?? (_requestMetadata = new InputMap<object>());
            set => _requestMetadata = value;
        }

        /// <summary>
        /// The proxy to perform the test.
        /// </summary>
        [Input("requestProxy")]
        public Input<Inputs.SyntheticsTestRequestProxyGetArgs>? RequestProxy { get; set; }

        [Input("requestQuery")]
        private InputMap<object>? _requestQuery;

        /// <summary>
        /// Query arguments name and value map.
        /// </summary>
        public InputMap<object> RequestQuery
        {
            get => _requestQuery ?? (_requestQuery = new InputMap<object>());
            set => _requestQuery = value;
        }

        /// <summary>
        /// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
        /// </summary>
        [Input("setCookie")]
        public Input<string>? SetCookie { get; set; }

        /// <summary>
        /// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
        /// </summary>
        [Input("subtype")]
        public Input<string>? Subtype { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Synthetics test type. Valid values are `api`, `browser`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Variables defined from JavaScript code for API HTTP tests.
        /// </summary>
        [Input("variablesFromScript")]
        public Input<string>? VariablesFromScript { get; set; }

        public SyntheticsTestState()
        {
        }
        public static new SyntheticsTestState Empty => new SyntheticsTestState();
    }
}
