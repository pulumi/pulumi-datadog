// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    public partial class SyntheticsTest : Pulumi.CustomResource
    {
        [Output("assertions")]
        public Output<ImmutableArray<ImmutableDictionary<string, object>>> Assertions { get; private set; } = null!;

        [Output("deviceIds")]
        public Output<ImmutableArray<string>> DeviceIds { get; private set; } = null!;

        [Output("locations")]
        public Output<ImmutableArray<string>> Locations { get; private set; } = null!;

        [Output("message")]
        public Output<string?> Message { get; private set; } = null!;

        [Output("monitorId")]
        public Output<int> MonitorId { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("options")]
        public Output<Outputs.SyntheticsTestOptions?> Options { get; private set; } = null!;

        [Output("request")]
        public Output<Outputs.SyntheticsTestRequest> Request { get; private set; } = null!;

        [Output("requestHeaders")]
        public Output<ImmutableDictionary<string, object>?> RequestHeaders { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("subtype")]
        public Output<string?> Subtype { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a SyntheticsTest resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SyntheticsTest(string name, SyntheticsTestArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/syntheticsTest:SyntheticsTest", name, args ?? new SyntheticsTestArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SyntheticsTest(string name, Input<string> id, SyntheticsTestState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/syntheticsTest:SyntheticsTest", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SyntheticsTest resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SyntheticsTest Get(string name, Input<string> id, SyntheticsTestState? state = null, CustomResourceOptions? options = null)
        {
            return new SyntheticsTest(name, id, state, options);
        }
    }

    public sealed class SyntheticsTestArgs : Pulumi.ResourceArgs
    {
        [Input("assertions")]
        private InputList<ImmutableDictionary<string, object>>? _assertions;
        public InputList<ImmutableDictionary<string, object>> Assertions
        {
            get => _assertions ?? (_assertions = new InputList<ImmutableDictionary<string, object>>());
            set => _assertions = value;
        }

        [Input("deviceIds")]
        private InputList<string>? _deviceIds;
        public InputList<string> DeviceIds
        {
            get => _deviceIds ?? (_deviceIds = new InputList<string>());
            set => _deviceIds = value;
        }

        [Input("locations", required: true)]
        private InputList<string>? _locations;
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        [Input("message")]
        public Input<string>? Message { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("options")]
        public Input<Inputs.SyntheticsTestOptionsArgs>? Options { get; set; }

        [Input("request", required: true)]
        public Input<Inputs.SyntheticsTestRequestArgs> Request { get; set; } = null!;

        [Input("requestHeaders")]
        private InputMap<object>? _requestHeaders;
        public InputMap<object> RequestHeaders
        {
            get => _requestHeaders ?? (_requestHeaders = new InputMap<object>());
            set => _requestHeaders = value;
        }

        [Input("status", required: true)]
        public Input<string> Status { get; set; } = null!;

        [Input("subtype")]
        public Input<string>? Subtype { get; set; }

        [Input("tags", required: true)]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public SyntheticsTestArgs()
        {
        }
    }

    public sealed class SyntheticsTestState : Pulumi.ResourceArgs
    {
        [Input("assertions")]
        private InputList<ImmutableDictionary<string, object>>? _assertions;
        public InputList<ImmutableDictionary<string, object>> Assertions
        {
            get => _assertions ?? (_assertions = new InputList<ImmutableDictionary<string, object>>());
            set => _assertions = value;
        }

        [Input("deviceIds")]
        private InputList<string>? _deviceIds;
        public InputList<string> DeviceIds
        {
            get => _deviceIds ?? (_deviceIds = new InputList<string>());
            set => _deviceIds = value;
        }

        [Input("locations")]
        private InputList<string>? _locations;
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        [Input("message")]
        public Input<string>? Message { get; set; }

        [Input("monitorId")]
        public Input<int>? MonitorId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("options")]
        public Input<Inputs.SyntheticsTestOptionsGetArgs>? Options { get; set; }

        [Input("request")]
        public Input<Inputs.SyntheticsTestRequestGetArgs>? Request { get; set; }

        [Input("requestHeaders")]
        private InputMap<object>? _requestHeaders;
        public InputMap<object> RequestHeaders
        {
            get => _requestHeaders ?? (_requestHeaders = new InputMap<object>());
            set => _requestHeaders = value;
        }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("subtype")]
        public Input<string>? Subtype { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public SyntheticsTestState()
        {
        }
    }
}
