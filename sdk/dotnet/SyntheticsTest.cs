// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog synthetics test resource. This can be used to create and manage Datadog synthetics test.
    /// 
    /// #### *Warning*
    /// Starting from version 3.1.0+, the direct usage of global variables in the configuration is deprecated, in favor of
    /// local variables of type `global`. As an example, if you were previously using `{{ GLOBAL_VAR }}` directly in your
    /// configuration, add a `config_variable` of type `global` with the `id` matching the `id` of the global variable `GLOBAL_VAR`, which can be found in the Synthetics UI or from the output of the `datadog.SyntheticsGlobalVariable` resource. The name can be chosen freely.
    /// 
    /// In practice, it means going from (simplified configuration):
    /// 
    /// to
    /// 
    /// which you can now use in your request definition:
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Example Usage (Synthetics API test)
    ///     // Create a new Datadog Synthetics API/HTTP test on https://www.example.org
    ///     var testUptime = new Datadog.SyntheticsTest("test_uptime", new()
    ///     {
    ///         Name = "An Uptime test on example.org",
    ///         Type = "api",
    ///         Subtype = "http",
    ///         Status = "live",
    ///         Message = "Notify @pagerduty",
    ///         Locations = new[]
    ///         {
    ///             "aws:eu-central-1",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///             "foo",
    ///             "env:test",
    ///         },
    ///         RequestDefinition = new Datadog.Inputs.SyntheticsTestRequestDefinitionArgs
    ///         {
    ///             Method = "GET",
    ///             Url = "https://www.example.org",
    ///         },
    ///         RequestHeaders = 
    ///         {
    ///             { "Content-Type", "application/json" },
    ///         },
    ///         Assertions = new[]
    ///         {
    ///             new Datadog.Inputs.SyntheticsTestAssertionArgs
    ///             {
    ///                 Type = "statusCode",
    ///                 Operator = "is",
    ///                 Target = "200",
    ///             },
    ///         },
    ///         OptionsList = new Datadog.Inputs.SyntheticsTestOptionsListArgs
    ///         {
    ///             TickEvery = 900,
    ///             Retry = new Datadog.Inputs.SyntheticsTestOptionsListRetryArgs
    ///             {
    ///                 Count = 2,
    ///                 Interval = 300,
    ///             },
    ///             MonitorOptions = new Datadog.Inputs.SyntheticsTestOptionsListMonitorOptionsArgs
    ///             {
    ///                 RenotifyInterval = 120,
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Example Usage (Authenticated API test)
    ///     // Create a new Datadog Synthetics API/HTTP test on https://www.example.org
    ///     var testApi = new Datadog.SyntheticsTest("test_api", new()
    ///     {
    ///         Name = "An API test on example.org",
    ///         Type = "api",
    ///         Subtype = "http",
    ///         Status = "live",
    ///         Message = "Notify @pagerduty",
    ///         Locations = new[]
    ///         {
    ///             "aws:eu-central-1",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///             "foo",
    ///             "env:test",
    ///         },
    ///         RequestDefinition = new Datadog.Inputs.SyntheticsTestRequestDefinitionArgs
    ///         {
    ///             Method = "GET",
    ///             Url = "https://www.example.org",
    ///         },
    ///         RequestHeaders = 
    ///         {
    ///             { "Content-Type", "application/json" },
    ///             { "Authentication", "Token: 1234566789" },
    ///         },
    ///         Assertions = new[]
    ///         {
    ///             new Datadog.Inputs.SyntheticsTestAssertionArgs
    ///             {
    ///                 Type = "statusCode",
    ///                 Operator = "is",
    ///                 Target = "200",
    ///             },
    ///         },
    ///         OptionsList = new Datadog.Inputs.SyntheticsTestOptionsListArgs
    ///         {
    ///             TickEvery = 900,
    ///             Retry = new Datadog.Inputs.SyntheticsTestOptionsListRetryArgs
    ///             {
    ///                 Count = 2,
    ///                 Interval = 300,
    ///             },
    ///             MonitorOptions = new Datadog.Inputs.SyntheticsTestOptionsListMonitorOptionsArgs
    ///             {
    ///                 RenotifyInterval = 120,
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Example Usage (Synthetics SSL test)
    ///     // Create a new Datadog Synthetics API/SSL test on example.org
    ///     var testSsl = new Datadog.SyntheticsTest("test_ssl", new()
    ///     {
    ///         Name = "An API test on example.org",
    ///         Type = "api",
    ///         Subtype = "ssl",
    ///         Status = "live",
    ///         Message = "Notify @pagerduty",
    ///         Locations = new[]
    ///         {
    ///             "aws:eu-central-1",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///             "foo",
    ///             "env:test",
    ///         },
    ///         RequestDefinition = new Datadog.Inputs.SyntheticsTestRequestDefinitionArgs
    ///         {
    ///             Host = "example.org",
    ///             Port = "443",
    ///         },
    ///         Assertions = new[]
    ///         {
    ///             new Datadog.Inputs.SyntheticsTestAssertionArgs
    ///             {
    ///                 Type = "certificate",
    ///                 Operator = "isInMoreThan",
    ///                 Target = "30",
    ///             },
    ///         },
    ///         OptionsList = new Datadog.Inputs.SyntheticsTestOptionsListArgs
    ///         {
    ///             TickEvery = 900,
    ///             AcceptSelfSigned = true,
    ///         },
    ///     });
    /// 
    ///     // Example Usage (Synthetics TCP test)
    ///     // Create a new Datadog Synthetics API/TCP test on example.org
    ///     var testTcp = new Datadog.SyntheticsTest("test_tcp", new()
    ///     {
    ///         Name = "An API test on example.org",
    ///         Type = "api",
    ///         Subtype = "tcp",
    ///         Status = "live",
    ///         Message = "Notify @pagerduty",
    ///         Locations = new[]
    ///         {
    ///             "aws:eu-central-1",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///             "foo",
    ///             "env:test",
    ///         },
    ///         RequestDefinition = new Datadog.Inputs.SyntheticsTestRequestDefinitionArgs
    ///         {
    ///             Host = "example.org",
    ///             Port = "443",
    ///         },
    ///         Assertions = new[]
    ///         {
    ///             new Datadog.Inputs.SyntheticsTestAssertionArgs
    ///             {
    ///                 Type = "responseTime",
    ///                 Operator = "lessThan",
    ///                 Target = "2000",
    ///             },
    ///         },
    ///         ConfigVariables = new[]
    ///         {
    ///             new Datadog.Inputs.SyntheticsTestConfigVariableArgs
    ///             {
    ///                 Type = "global",
    ///                 Name = "MY_GLOBAL_VAR",
    ///                 Id = "76636cd1-82e2-4aeb-9cfe-51366a8198a2",
    ///             },
    ///         },
    ///         OptionsList = new Datadog.Inputs.SyntheticsTestOptionsListArgs
    ///         {
    ///             TickEvery = 900,
    ///         },
    ///     });
    /// 
    ///     // Example Usage (Synthetics DNS test)
    ///     // Create a new Datadog Synthetics API/DNS test on example.org
    ///     var testDns = new Datadog.SyntheticsTest("test_dns", new()
    ///     {
    ///         Name = "An API test on example.org",
    ///         Type = "api",
    ///         Subtype = "dns",
    ///         Status = "live",
    ///         Message = "Notify @pagerduty",
    ///         Locations = new[]
    ///         {
    ///             "aws:eu-central-1",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///             "foo",
    ///             "env:test",
    ///         },
    ///         RequestDefinition = new Datadog.Inputs.SyntheticsTestRequestDefinitionArgs
    ///         {
    ///             Host = "example.org",
    ///         },
    ///         Assertions = new[]
    ///         {
    ///             new Datadog.Inputs.SyntheticsTestAssertionArgs
    ///             {
    ///                 Type = "recordSome",
    ///                 Operator = "is",
    ///                 Property = "A",
    ///                 Target = "0.0.0.0",
    ///             },
    ///         },
    ///         OptionsList = new Datadog.Inputs.SyntheticsTestOptionsListArgs
    ///         {
    ///             TickEvery = 900,
    ///         },
    ///     });
    /// 
    ///     // Example Usage (Synthetics Multistep API test)
    ///     // Create a new Datadog Synthetics Multistep API test
    ///     var testMultiStep = new Datadog.SyntheticsTest("test_multi_step", new()
    ///     {
    ///         Name = "Multistep API test",
    ///         Type = "api",
    ///         Subtype = "multi",
    ///         Status = "live",
    ///         Locations = new[]
    ///         {
    ///             "aws:eu-central-1",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///             "foo",
    ///             "env:test",
    ///         },
    ///         ApiSteps = new[]
    ///         {
    ///             new Datadog.Inputs.SyntheticsTestApiStepArgs
    ///             {
    ///                 Name = "An API test on example.org",
    ///                 Subtype = "http",
    ///                 Assertions = new[]
    ///                 {
    ///                     new Datadog.Inputs.SyntheticsTestApiStepAssertionArgs
    ///                     {
    ///                         Type = "statusCode",
    ///                         Operator = "is",
    ///                         Target = "200",
    ///                     },
    ///                 },
    ///                 RequestDefinition = new Datadog.Inputs.SyntheticsTestApiStepRequestDefinitionArgs
    ///                 {
    ///                     Method = "GET",
    ///                     Url = "https://www.example.org",
    ///                 },
    ///                 RequestHeaders = 
    ///                 {
    ///                     { "Content-Type", "application/json" },
    ///                     { "Authentication", "Token: 1234566789" },
    ///                 },
    ///             },
    ///             new Datadog.Inputs.SyntheticsTestApiStepArgs
    ///             {
    ///                 Name = "An API test on example.org",
    ///                 Subtype = "http",
    ///                 Assertions = new[]
    ///                 {
    ///                     new Datadog.Inputs.SyntheticsTestApiStepAssertionArgs
    ///                     {
    ///                         Type = "statusCode",
    ///                         Operator = "is",
    ///                         Target = "200",
    ///                     },
    ///                 },
    ///                 RequestDefinition = new Datadog.Inputs.SyntheticsTestApiStepRequestDefinitionArgs
    ///                 {
    ///                     Method = "GET",
    ///                     Url = "http://example.org",
    ///                 },
    ///             },
    ///             new Datadog.Inputs.SyntheticsTestApiStepArgs
    ///             {
    ///                 Name = "A gRPC health check on example.org",
    ///                 Subtype = "grpc",
    ///                 Assertions = new[]
    ///                 {
    ///                     new Datadog.Inputs.SyntheticsTestApiStepAssertionArgs
    ///                     {
    ///                         Type = "statusCode",
    ///                         Operator = "is",
    ///                         Target = "200",
    ///                     },
    ///                 },
    ///                 RequestDefinition = new Datadog.Inputs.SyntheticsTestApiStepRequestDefinitionArgs
    ///                 {
    ///                     Host = "example.org",
    ///                     Port = "443",
    ///                     CallType = "healthcheck",
    ///                     Service = "greeter.Greeter",
    ///                 },
    ///             },
    ///             new Datadog.Inputs.SyntheticsTestApiStepArgs
    ///             {
    ///                 Name = "A gRPC behavior check on example.org",
    ///                 Subtype = "grpc",
    ///                 Assertions = new[]
    ///                 {
    ///                     new Datadog.Inputs.SyntheticsTestApiStepAssertionArgs
    ///                     {
    ///                         Type = "statusCode",
    ///                         Operator = "is",
    ///                         Target = "200",
    ///                     },
    ///                 },
    ///                 RequestDefinition = new Datadog.Inputs.SyntheticsTestApiStepRequestDefinitionArgs
    ///                 {
    ///                     Host = "example.org",
    ///                     Port = "443",
    ///                     CallType = "unary",
    ///                     Service = "greeter.Greeter",
    ///                     Method = "SayHello",
    ///                     Message = "{\"name\": \"John\"}",
    ///                     PlainProtoFile = @"syntax = ""proto3"";
    /// 
    /// package greeter;
    /// 
    /// // The greeting service definition.
    /// service Greeter {
    ///   // Sends a greeting
    ///   rpc SayHello (HelloRequest) returns (HelloReply) {}
    /// }
    /// 
    /// // The request message containing the user's name.
    /// message HelloRequest {
    ///   string name = 1;
    /// }
    /// 
    /// // The response message containing the greetings
    /// message HelloReply {
    ///   string message = 1;
    /// }
    /// ",
    ///                 },
    ///             },
    ///         },
    ///         OptionsList = new Datadog.Inputs.SyntheticsTestOptionsListArgs
    ///         {
    ///             TickEvery = 900,
    ///             AcceptSelfSigned = true,
    ///         },
    ///     });
    /// 
    ///     // Example Usage (Synthetics Browser test)
    ///     // Create a new Datadog Synthetics Browser test starting on https://www.example.org
    ///     var testBrowser = new Datadog.SyntheticsTest("test_browser", new()
    ///     {
    ///         Name = "A Browser test on example.org",
    ///         Type = "browser",
    ///         Status = "paused",
    ///         Message = "Notify @qa",
    ///         DeviceIds = new[]
    ///         {
    ///             "laptop_large",
    ///         },
    ///         Locations = new[]
    ///         {
    ///             "aws:eu-central-1",
    ///         },
    ///         Tags = new[] {},
    ///         RequestDefinition = new Datadog.Inputs.SyntheticsTestRequestDefinitionArgs
    ///         {
    ///             Method = "GET",
    ///             Url = "https://www.example.org",
    ///         },
    ///         BrowserSteps = new[]
    ///         {
    ///             new Datadog.Inputs.SyntheticsTestBrowserStepArgs
    ///             {
    ///                 Name = "Check current url",
    ///                 Type = "assertCurrentUrl",
    ///                 Params = new Datadog.Inputs.SyntheticsTestBrowserStepParamsArgs
    ///                 {
    ///                     Check = "contains",
    ///                     Value = "datadoghq",
    ///                 },
    ///             },
    ///             new Datadog.Inputs.SyntheticsTestBrowserStepArgs
    ///             {
    ///                 Name = "Test a downloaded file",
    ///                 Type = "assertFileDownload",
    ///                 Params = new Datadog.Inputs.SyntheticsTestBrowserStepParamsArgs
    ///                 {
    ///                     File = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["md5"] = "abcdef1234567890",
    ///                         ["sizeCheck"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["type"] = "equals",
    ///                             ["value"] = 1,
    ///                         },
    ///                         ["nameCheck"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["type"] = "contains",
    ///                             ["value"] = ".xls",
    ///                         },
    ///                     }),
    ///                 },
    ///             },
    ///         },
    ///         BrowserVariables = new[]
    ///         {
    ///             new Datadog.Inputs.SyntheticsTestBrowserVariableArgs
    ///             {
    ///                 Type = "text",
    ///                 Name = "MY_PATTERN_VAR",
    ///                 Pattern = "{{numeric(3)}}",
    ///                 Example = "597",
    ///             },
    ///             new Datadog.Inputs.SyntheticsTestBrowserVariableArgs
    ///             {
    ///                 Type = "email",
    ///                 Name = "MY_EMAIL_VAR",
    ///                 Pattern = "jd8-afe-ydv.{{ numeric(10) }}@synthetics.dtdg.co",
    ///                 Example = "jd8-afe-ydv.4546132139@synthetics.dtdg.co",
    ///             },
    ///             new Datadog.Inputs.SyntheticsTestBrowserVariableArgs
    ///             {
    ///                 Type = "global",
    ///                 Name = "MY_GLOBAL_VAR",
    ///                 Id = "76636cd1-82e2-4aeb-9cfe-51366a8198a2",
    ///             },
    ///         },
    ///         OptionsList = new Datadog.Inputs.SyntheticsTestOptionsListArgs
    ///         {
    ///             TickEvery = 3600,
    ///         },
    ///     });
    /// 
    ///     // Example Usage (GRPC API behavior check test)
    ///     // Create a new Datadog GRPC API test calling host example.org on port 443
    ///     // targeting service `greeter.Greeter` with the method `SayHello`
    ///     // and the message {"name": "John"}
    ///     var testGrpcUnary = new Datadog.SyntheticsTest("test_grpc_unary", new()
    ///     {
    ///         Name = "GRPC API behavior check test",
    ///         Type = "api",
    ///         Subtype = "grpc",
    ///         Status = "live",
    ///         Locations = new[]
    ///         {
    ///             "aws:eu-central-1",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///             "foo",
    ///             "env:test",
    ///         },
    ///         RequestDefinition = new Datadog.Inputs.SyntheticsTestRequestDefinitionArgs
    ///         {
    ///             Host = "example.org",
    ///             Port = "443",
    ///             CallType = "unary",
    ///             Service = "greeter.Greeter",
    ///             Method = "SayHello",
    ///             Message = "{\"name\": \"John\"}",
    ///             PlainProtoFile = @"syntax = ""proto3"";
    /// 
    /// package greeter;
    /// 
    /// // The greeting service definition.
    /// service Greeter {
    ///   // Sends a greeting
    ///   rpc SayHello (HelloRequest) returns (HelloReply) {}
    /// }
    /// 
    /// // The request message containing the user's name.
    /// message HelloRequest {
    ///   string name = 1;
    /// }
    /// 
    /// // The response message containing the greetings
    /// message HelloReply {
    ///   string message = 1;
    /// }
    /// ",
    ///         },
    ///         RequestMetadata = 
    ///         {
    ///             { "header", "value" },
    ///         },
    ///         Assertions = new[]
    ///         {
    ///             new Datadog.Inputs.SyntheticsTestAssertionArgs
    ///             {
    ///                 Type = "responseTime",
    ///                 Operator = "lessThan",
    ///                 Target = "2000",
    ///             },
    ///             new Datadog.Inputs.SyntheticsTestAssertionArgs
    ///             {
    ///                 Operator = "is",
    ///                 Type = "grpcHealthcheckStatus",
    ///                 Target = "1",
    ///             },
    ///             new Datadog.Inputs.SyntheticsTestAssertionArgs
    ///             {
    ///                 Operator = "is",
    ///                 Type = "grpcProto",
    ///                 Target = "proto target",
    ///             },
    ///             new Datadog.Inputs.SyntheticsTestAssertionArgs
    ///             {
    ///                 Operator = "is",
    ///                 Property = "property",
    ///                 Type = "grpcMetadata",
    ///                 Target = "123",
    ///             },
    ///         },
    ///         OptionsList = new Datadog.Inputs.SyntheticsTestOptionsListArgs
    ///         {
    ///             TickEvery = 900,
    ///         },
    ///     });
    /// 
    ///     // Example Usage (GRPC API health check test)
    ///     // Create a new Datadog GRPC API test calling host example.org on port 443
    ///     // testing the overall health of the service
    ///     var testGrpcHealth = new Datadog.SyntheticsTest("test_grpc_health", new()
    ///     {
    ///         Name = "GRPC API health check test",
    ///         Type = "api",
    ///         Subtype = "grpc",
    ///         Status = "live",
    ///         Locations = new[]
    ///         {
    ///             "aws:eu-central-1",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "foo:bar",
    ///             "foo",
    ///             "env:test",
    ///         },
    ///         RequestDefinition = new Datadog.Inputs.SyntheticsTestRequestDefinitionArgs
    ///         {
    ///             Host = "example.org",
    ///             Port = "443",
    ///             CallType = "healthcheck",
    ///             Service = "greeter.Greeter",
    ///         },
    ///         Assertions = new[]
    ///         {
    ///             new Datadog.Inputs.SyntheticsTestAssertionArgs
    ///             {
    ///                 Type = "responseTime",
    ///                 Operator = "lessThan",
    ///                 Target = "2000",
    ///             },
    ///             new Datadog.Inputs.SyntheticsTestAssertionArgs
    ///             {
    ///                 Operator = "is",
    ///                 Type = "grpcHealthcheckStatus",
    ///                 Target = "1",
    ///             },
    ///         },
    ///         OptionsList = new Datadog.Inputs.SyntheticsTestOptionsListArgs
    ///         {
    ///             TickEvery = 900,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Synthetics tests can be imported using their public string ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/syntheticsTest:SyntheticsTest fizz abc-123-xyz
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/syntheticsTest:SyntheticsTest")]
    public partial class SyntheticsTest : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Steps for multi-step api tests
        /// </summary>
        [Output("apiSteps")]
        public Output<ImmutableArray<Outputs.SyntheticsTestApiStep>> ApiSteps { get; private set; } = null!;

        /// <summary>
        /// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
        /// </summary>
        [Output("assertions")]
        public Output<ImmutableArray<Outputs.SyntheticsTestAssertion>> Assertions { get; private set; } = null!;

        /// <summary>
        /// Steps for browser tests.
        /// </summary>
        [Output("browserSteps")]
        public Output<ImmutableArray<Outputs.SyntheticsTestBrowserStep>> BrowserSteps { get; private set; } = null!;

        /// <summary>
        /// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
        /// </summary>
        [Output("browserVariables")]
        public Output<ImmutableArray<Outputs.SyntheticsTestBrowserVariable>> BrowserVariables { get; private set; } = null!;

        /// <summary>
        /// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
        /// </summary>
        [Output("configVariables")]
        public Output<ImmutableArray<Outputs.SyntheticsTestConfigVariable>> ConfigVariables { get; private set; } = null!;

        /// <summary>
        /// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
        /// </summary>
        [Output("deviceIds")]
        public Output<ImmutableArray<string>> DeviceIds { get; private set; } = null!;

        /// <summary>
        /// A boolean indicating whether this synthetics test can be deleted even if it's referenced by other resources (for example, SLOs and composite monitors).
        /// </summary>
        [Output("forceDeleteDependencies")]
        public Output<bool?> ForceDeleteDependencies { get; private set; } = null!;

        /// <summary>
        /// Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
        /// </summary>
        [Output("locations")]
        public Output<ImmutableArray<string>> Locations { get; private set; } = null!;

        /// <summary>
        /// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events. Defaults to `""`.
        /// </summary>
        [Output("message")]
        public Output<string?> Message { get; private set; } = null!;

        /// <summary>
        /// ID of the monitor associated with the Datadog synthetics test.
        /// </summary>
        [Output("monitorId")]
        public Output<int> MonitorId { get; private set; } = null!;

        /// <summary>
        /// Name of Datadog synthetics test.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("optionsList")]
        public Output<Outputs.SyntheticsTestOptionsList?> OptionsList { get; private set; } = null!;

        /// <summary>
        /// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
        /// </summary>
        [Output("requestBasicauth")]
        public Output<Outputs.SyntheticsTestRequestBasicauth?> RequestBasicauth { get; private set; } = null!;

        /// <summary>
        /// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
        /// </summary>
        [Output("requestClientCertificate")]
        public Output<Outputs.SyntheticsTestRequestClientCertificate?> RequestClientCertificate { get; private set; } = null!;

        /// <summary>
        /// Required if `type = "api"`. The synthetics test request.
        /// </summary>
        [Output("requestDefinition")]
        public Output<Outputs.SyntheticsTestRequestDefinition?> RequestDefinition { get; private set; } = null!;

        /// <summary>
        /// Files to be used as part of the request in the test.
        /// </summary>
        [Output("requestFiles")]
        public Output<ImmutableArray<Outputs.SyntheticsTestRequestFile>> RequestFiles { get; private set; } = null!;

        /// <summary>
        /// Header name and value map.
        /// </summary>
        [Output("requestHeaders")]
        public Output<ImmutableDictionary<string, string>?> RequestHeaders { get; private set; } = null!;

        /// <summary>
        /// Metadata to include when performing the gRPC request.
        /// </summary>
        [Output("requestMetadata")]
        public Output<ImmutableDictionary<string, string>?> RequestMetadata { get; private set; } = null!;

        /// <summary>
        /// The proxy to perform the test.
        /// </summary>
        [Output("requestProxy")]
        public Output<Outputs.SyntheticsTestRequestProxy?> RequestProxy { get; private set; } = null!;

        /// <summary>
        /// Query arguments name and value map.
        /// </summary>
        [Output("requestQuery")]
        public Output<ImmutableDictionary<string, string>?> RequestQuery { get; private set; } = null!;

        /// <summary>
        /// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
        /// </summary>
        [Output("setCookie")]
        public Output<string?> SetCookie { get; private set; } = null!;

        /// <summary>
        /// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
        /// </summary>
        [Output("subtype")]
        public Output<string?> Subtype { get; private set; } = null!;

        /// <summary>
        /// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Synthetics test type. Valid values are `api`, `browser`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Variables defined from JavaScript code for API HTTP tests.
        /// </summary>
        [Output("variablesFromScript")]
        public Output<string?> VariablesFromScript { get; private set; } = null!;


        /// <summary>
        /// Create a SyntheticsTest resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SyntheticsTest(string name, SyntheticsTestArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/syntheticsTest:SyntheticsTest", name, args ?? new SyntheticsTestArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SyntheticsTest(string name, Input<string> id, SyntheticsTestState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/syntheticsTest:SyntheticsTest", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SyntheticsTest resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SyntheticsTest Get(string name, Input<string> id, SyntheticsTestState? state = null, CustomResourceOptions? options = null)
        {
            return new SyntheticsTest(name, id, state, options);
        }
    }

    public sealed class SyntheticsTestArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiSteps")]
        private InputList<Inputs.SyntheticsTestApiStepArgs>? _apiSteps;

        /// <summary>
        /// Steps for multi-step api tests
        /// </summary>
        public InputList<Inputs.SyntheticsTestApiStepArgs> ApiSteps
        {
            get => _apiSteps ?? (_apiSteps = new InputList<Inputs.SyntheticsTestApiStepArgs>());
            set => _apiSteps = value;
        }

        [Input("assertions")]
        private InputList<Inputs.SyntheticsTestAssertionArgs>? _assertions;

        /// <summary>
        /// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
        /// </summary>
        public InputList<Inputs.SyntheticsTestAssertionArgs> Assertions
        {
            get => _assertions ?? (_assertions = new InputList<Inputs.SyntheticsTestAssertionArgs>());
            set => _assertions = value;
        }

        [Input("browserSteps")]
        private InputList<Inputs.SyntheticsTestBrowserStepArgs>? _browserSteps;

        /// <summary>
        /// Steps for browser tests.
        /// </summary>
        public InputList<Inputs.SyntheticsTestBrowserStepArgs> BrowserSteps
        {
            get => _browserSteps ?? (_browserSteps = new InputList<Inputs.SyntheticsTestBrowserStepArgs>());
            set => _browserSteps = value;
        }

        [Input("browserVariables")]
        private InputList<Inputs.SyntheticsTestBrowserVariableArgs>? _browserVariables;

        /// <summary>
        /// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
        /// </summary>
        public InputList<Inputs.SyntheticsTestBrowserVariableArgs> BrowserVariables
        {
            get => _browserVariables ?? (_browserVariables = new InputList<Inputs.SyntheticsTestBrowserVariableArgs>());
            set => _browserVariables = value;
        }

        [Input("configVariables")]
        private InputList<Inputs.SyntheticsTestConfigVariableArgs>? _configVariables;

        /// <summary>
        /// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
        /// </summary>
        public InputList<Inputs.SyntheticsTestConfigVariableArgs> ConfigVariables
        {
            get => _configVariables ?? (_configVariables = new InputList<Inputs.SyntheticsTestConfigVariableArgs>());
            set => _configVariables = value;
        }

        [Input("deviceIds")]
        private InputList<string>? _deviceIds;

        /// <summary>
        /// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
        /// </summary>
        public InputList<string> DeviceIds
        {
            get => _deviceIds ?? (_deviceIds = new InputList<string>());
            set => _deviceIds = value;
        }

        /// <summary>
        /// A boolean indicating whether this synthetics test can be deleted even if it's referenced by other resources (for example, SLOs and composite monitors).
        /// </summary>
        [Input("forceDeleteDependencies")]
        public Input<bool>? ForceDeleteDependencies { get; set; }

        [Input("locations", required: true)]
        private InputList<string>? _locations;

        /// <summary>
        /// Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        /// <summary>
        /// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events. Defaults to `""`.
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// Name of Datadog synthetics test.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("optionsList")]
        public Input<Inputs.SyntheticsTestOptionsListArgs>? OptionsList { get; set; }

        /// <summary>
        /// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
        /// </summary>
        [Input("requestBasicauth")]
        public Input<Inputs.SyntheticsTestRequestBasicauthArgs>? RequestBasicauth { get; set; }

        /// <summary>
        /// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
        /// </summary>
        [Input("requestClientCertificate")]
        public Input<Inputs.SyntheticsTestRequestClientCertificateArgs>? RequestClientCertificate { get; set; }

        /// <summary>
        /// Required if `type = "api"`. The synthetics test request.
        /// </summary>
        [Input("requestDefinition")]
        public Input<Inputs.SyntheticsTestRequestDefinitionArgs>? RequestDefinition { get; set; }

        [Input("requestFiles")]
        private InputList<Inputs.SyntheticsTestRequestFileArgs>? _requestFiles;

        /// <summary>
        /// Files to be used as part of the request in the test.
        /// </summary>
        public InputList<Inputs.SyntheticsTestRequestFileArgs> RequestFiles
        {
            get => _requestFiles ?? (_requestFiles = new InputList<Inputs.SyntheticsTestRequestFileArgs>());
            set => _requestFiles = value;
        }

        [Input("requestHeaders")]
        private InputMap<string>? _requestHeaders;

        /// <summary>
        /// Header name and value map.
        /// </summary>
        public InputMap<string> RequestHeaders
        {
            get => _requestHeaders ?? (_requestHeaders = new InputMap<string>());
            set => _requestHeaders = value;
        }

        [Input("requestMetadata")]
        private InputMap<string>? _requestMetadata;

        /// <summary>
        /// Metadata to include when performing the gRPC request.
        /// </summary>
        public InputMap<string> RequestMetadata
        {
            get => _requestMetadata ?? (_requestMetadata = new InputMap<string>());
            set => _requestMetadata = value;
        }

        /// <summary>
        /// The proxy to perform the test.
        /// </summary>
        [Input("requestProxy")]
        public Input<Inputs.SyntheticsTestRequestProxyArgs>? RequestProxy { get; set; }

        [Input("requestQuery")]
        private InputMap<string>? _requestQuery;

        /// <summary>
        /// Query arguments name and value map.
        /// </summary>
        public InputMap<string> RequestQuery
        {
            get => _requestQuery ?? (_requestQuery = new InputMap<string>());
            set => _requestQuery = value;
        }

        /// <summary>
        /// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
        /// </summary>
        [Input("setCookie")]
        public Input<string>? SetCookie { get; set; }

        /// <summary>
        /// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
        /// </summary>
        [Input("status", required: true)]
        public Input<string> Status { get; set; } = null!;

        /// <summary>
        /// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
        /// </summary>
        [Input("subtype")]
        public Input<string>? Subtype { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Synthetics test type. Valid values are `api`, `browser`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Variables defined from JavaScript code for API HTTP tests.
        /// </summary>
        [Input("variablesFromScript")]
        public Input<string>? VariablesFromScript { get; set; }

        public SyntheticsTestArgs()
        {
        }
        public static new SyntheticsTestArgs Empty => new SyntheticsTestArgs();
    }

    public sealed class SyntheticsTestState : global::Pulumi.ResourceArgs
    {
        [Input("apiSteps")]
        private InputList<Inputs.SyntheticsTestApiStepGetArgs>? _apiSteps;

        /// <summary>
        /// Steps for multi-step api tests
        /// </summary>
        public InputList<Inputs.SyntheticsTestApiStepGetArgs> ApiSteps
        {
            get => _apiSteps ?? (_apiSteps = new InputList<Inputs.SyntheticsTestApiStepGetArgs>());
            set => _apiSteps = value;
        }

        [Input("assertions")]
        private InputList<Inputs.SyntheticsTestAssertionGetArgs>? _assertions;

        /// <summary>
        /// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
        /// </summary>
        public InputList<Inputs.SyntheticsTestAssertionGetArgs> Assertions
        {
            get => _assertions ?? (_assertions = new InputList<Inputs.SyntheticsTestAssertionGetArgs>());
            set => _assertions = value;
        }

        [Input("browserSteps")]
        private InputList<Inputs.SyntheticsTestBrowserStepGetArgs>? _browserSteps;

        /// <summary>
        /// Steps for browser tests.
        /// </summary>
        public InputList<Inputs.SyntheticsTestBrowserStepGetArgs> BrowserSteps
        {
            get => _browserSteps ?? (_browserSteps = new InputList<Inputs.SyntheticsTestBrowserStepGetArgs>());
            set => _browserSteps = value;
        }

        [Input("browserVariables")]
        private InputList<Inputs.SyntheticsTestBrowserVariableGetArgs>? _browserVariables;

        /// <summary>
        /// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
        /// </summary>
        public InputList<Inputs.SyntheticsTestBrowserVariableGetArgs> BrowserVariables
        {
            get => _browserVariables ?? (_browserVariables = new InputList<Inputs.SyntheticsTestBrowserVariableGetArgs>());
            set => _browserVariables = value;
        }

        [Input("configVariables")]
        private InputList<Inputs.SyntheticsTestConfigVariableGetArgs>? _configVariables;

        /// <summary>
        /// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
        /// </summary>
        public InputList<Inputs.SyntheticsTestConfigVariableGetArgs> ConfigVariables
        {
            get => _configVariables ?? (_configVariables = new InputList<Inputs.SyntheticsTestConfigVariableGetArgs>());
            set => _configVariables = value;
        }

        [Input("deviceIds")]
        private InputList<string>? _deviceIds;

        /// <summary>
        /// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
        /// </summary>
        public InputList<string> DeviceIds
        {
            get => _deviceIds ?? (_deviceIds = new InputList<string>());
            set => _deviceIds = value;
        }

        /// <summary>
        /// A boolean indicating whether this synthetics test can be deleted even if it's referenced by other resources (for example, SLOs and composite monitors).
        /// </summary>
        [Input("forceDeleteDependencies")]
        public Input<bool>? ForceDeleteDependencies { get; set; }

        [Input("locations")]
        private InputList<string>? _locations;

        /// <summary>
        /// Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        /// <summary>
        /// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events. Defaults to `""`.
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// ID of the monitor associated with the Datadog synthetics test.
        /// </summary>
        [Input("monitorId")]
        public Input<int>? MonitorId { get; set; }

        /// <summary>
        /// Name of Datadog synthetics test.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("optionsList")]
        public Input<Inputs.SyntheticsTestOptionsListGetArgs>? OptionsList { get; set; }

        /// <summary>
        /// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
        /// </summary>
        [Input("requestBasicauth")]
        public Input<Inputs.SyntheticsTestRequestBasicauthGetArgs>? RequestBasicauth { get; set; }

        /// <summary>
        /// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
        /// </summary>
        [Input("requestClientCertificate")]
        public Input<Inputs.SyntheticsTestRequestClientCertificateGetArgs>? RequestClientCertificate { get; set; }

        /// <summary>
        /// Required if `type = "api"`. The synthetics test request.
        /// </summary>
        [Input("requestDefinition")]
        public Input<Inputs.SyntheticsTestRequestDefinitionGetArgs>? RequestDefinition { get; set; }

        [Input("requestFiles")]
        private InputList<Inputs.SyntheticsTestRequestFileGetArgs>? _requestFiles;

        /// <summary>
        /// Files to be used as part of the request in the test.
        /// </summary>
        public InputList<Inputs.SyntheticsTestRequestFileGetArgs> RequestFiles
        {
            get => _requestFiles ?? (_requestFiles = new InputList<Inputs.SyntheticsTestRequestFileGetArgs>());
            set => _requestFiles = value;
        }

        [Input("requestHeaders")]
        private InputMap<string>? _requestHeaders;

        /// <summary>
        /// Header name and value map.
        /// </summary>
        public InputMap<string> RequestHeaders
        {
            get => _requestHeaders ?? (_requestHeaders = new InputMap<string>());
            set => _requestHeaders = value;
        }

        [Input("requestMetadata")]
        private InputMap<string>? _requestMetadata;

        /// <summary>
        /// Metadata to include when performing the gRPC request.
        /// </summary>
        public InputMap<string> RequestMetadata
        {
            get => _requestMetadata ?? (_requestMetadata = new InputMap<string>());
            set => _requestMetadata = value;
        }

        /// <summary>
        /// The proxy to perform the test.
        /// </summary>
        [Input("requestProxy")]
        public Input<Inputs.SyntheticsTestRequestProxyGetArgs>? RequestProxy { get; set; }

        [Input("requestQuery")]
        private InputMap<string>? _requestQuery;

        /// <summary>
        /// Query arguments name and value map.
        /// </summary>
        public InputMap<string> RequestQuery
        {
            get => _requestQuery ?? (_requestQuery = new InputMap<string>());
            set => _requestQuery = value;
        }

        /// <summary>
        /// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
        /// </summary>
        [Input("setCookie")]
        public Input<string>? SetCookie { get; set; }

        /// <summary>
        /// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
        /// </summary>
        [Input("subtype")]
        public Input<string>? Subtype { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Synthetics test type. Valid values are `api`, `browser`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Variables defined from JavaScript code for API HTTP tests.
        /// </summary>
        [Input("variablesFromScript")]
        public Input<string>? VariablesFromScript { get; set; }

        public SyntheticsTestState()
        {
        }
        public static new SyntheticsTestState Empty => new SyntheticsTestState();
    }
}
