// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog metric_metadata resource. This can be used to manage a metric's metadata.
    /// </summary>
    public partial class MetricMetadata : Pulumi.CustomResource
    {
        /// <summary>
        /// A description of the metric.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the metric.
        /// </summary>
        [Output("metric")]
        public Output<string> Metric { get; private set; } = null!;

        /// <summary>
        /// 'Per' unit of the metric such as 'second' in 'bytes per second'.
        /// </summary>
        [Output("perUnit")]
        public Output<string?> PerUnit { get; private set; } = null!;

        /// <summary>
        /// A short name of the metric.
        /// </summary>
        [Output("shortName")]
        public Output<string?> ShortName { get; private set; } = null!;

        /// <summary>
        /// If applicable, stasd flush interval in seconds for the metric.
        /// </summary>
        [Output("statsdInterval")]
        public Output<int?> StatsdInterval { get; private set; } = null!;

        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// Primary unit of the metric such as 'byte' or 'operation'.
        /// </summary>
        [Output("unit")]
        public Output<string?> Unit { get; private set; } = null!;


        /// <summary>
        /// Create a MetricMetadata resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MetricMetadata(string name, MetricMetadataArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/metricMetadata:MetricMetadata", name, args ?? new MetricMetadataArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MetricMetadata(string name, Input<string> id, MetricMetadataState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/metricMetadata:MetricMetadata", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MetricMetadata resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MetricMetadata Get(string name, Input<string> id, MetricMetadataState? state = null, CustomResourceOptions? options = null)
        {
            return new MetricMetadata(name, id, state, options);
        }
    }

    public sealed class MetricMetadataArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of the metric.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the metric.
        /// </summary>
        [Input("metric", required: true)]
        public Input<string> Metric { get; set; } = null!;

        /// <summary>
        /// 'Per' unit of the metric such as 'second' in 'bytes per second'.
        /// </summary>
        [Input("perUnit")]
        public Input<string>? PerUnit { get; set; }

        /// <summary>
        /// A short name of the metric.
        /// </summary>
        [Input("shortName")]
        public Input<string>? ShortName { get; set; }

        /// <summary>
        /// If applicable, stasd flush interval in seconds for the metric.
        /// </summary>
        [Input("statsdInterval")]
        public Input<int>? StatsdInterval { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Primary unit of the metric such as 'byte' or 'operation'.
        /// </summary>
        [Input("unit")]
        public Input<string>? Unit { get; set; }

        public MetricMetadataArgs()
        {
        }
    }

    public sealed class MetricMetadataState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of the metric.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the metric.
        /// </summary>
        [Input("metric")]
        public Input<string>? Metric { get; set; }

        /// <summary>
        /// 'Per' unit of the metric such as 'second' in 'bytes per second'.
        /// </summary>
        [Input("perUnit")]
        public Input<string>? PerUnit { get; set; }

        /// <summary>
        /// A short name of the metric.
        /// </summary>
        [Input("shortName")]
        public Input<string>? ShortName { get; set; }

        /// <summary>
        /// If applicable, stasd flush interval in seconds for the metric.
        /// </summary>
        [Input("statsdInterval")]
        public Input<int>? StatsdInterval { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Primary unit of the metric such as 'byte' or 'operation'.
        /// </summary>
        [Input("unit")]
        public Input<string>? Unit { get; set; }

        public MetricMetadataState()
        {
        }
    }
}
