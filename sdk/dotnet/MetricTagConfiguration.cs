// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog metric tag configuration resource. This can be used to modify tag configurations for metrics.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Manage a tag configuration for a Datadog distribution metric with/without percentiles
    ///     var exampleDistMetric = new Datadog.MetricTagConfiguration("exampleDistMetric", new()
    ///     {
    ///         IncludePercentiles = false,
    ///         MetricName = "example.terraform.dist.metric",
    ///         MetricType = "distribution",
    ///         Tags = new[]
    ///         {
    ///             "sport",
    ///             "datacenter",
    ///         },
    ///     });
    /// 
    ///     // Manage tag configurations for a Datadog count or gauge metric
    ///     var exampleCountMetric = new Datadog.MetricTagConfiguration("exampleCountMetric", new()
    ///     {
    ///         Aggregations = new[]
    ///         {
    ///             new Datadog.Inputs.MetricTagConfigurationAggregationArgs
    ///             {
    ///                 Space = "min",
    ///                 Time = "avg",
    ///             },
    ///             new Datadog.Inputs.MetricTagConfigurationAggregationArgs
    ///             {
    ///                 Space = "max",
    ///                 Time = "avg",
    ///             },
    ///         },
    ///         ExcludeTagsMode = false,
    ///         MetricName = "example.terraform.count.metric",
    ///         MetricType = "count",
    ///         Tags = new[]
    ///         {
    ///             "sport",
    ///             "datacenter",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import datadog:index/metricTagConfiguration:MetricTagConfiguration example_dist_metric example.terraform.dist.metric
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/metricTagConfiguration:MetricTagConfiguration")]
    public partial class MetricTagConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metric_type` of count, rate, or gauge.
        /// </summary>
        [Output("aggregations")]
        public Output<ImmutableArray<Outputs.MetricTagConfigurationAggregation>> Aggregations { get; private set; } = null!;

        /// <summary>
        /// Toggle to include/exclude tags as queryable for your metric. Can only be applied to metrics that have one or more tags configured. Defaults to `false`.
        /// </summary>
        [Output("excludeTagsMode")]
        public Output<bool?> ExcludeTagsMode { get; private set; } = null!;

        /// <summary>
        /// Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metric_type` of distribution.
        /// </summary>
        [Output("includePercentiles")]
        public Output<bool?> IncludePercentiles { get; private set; } = null!;

        /// <summary>
        /// The metric name for this resource.
        /// </summary>
        [Output("metricName")]
        public Output<string> MetricName { get; private set; } = null!;

        /// <summary>
        /// The metric's type. This field can't be updated after creation. Valid values are `gauge`, `count`, `rate`, `distribution`.
        /// </summary>
        [Output("metricType")]
        public Output<string> MetricType { get; private set; } = null!;

        /// <summary>
        /// A list of tag keys that will be queryable for your metric.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a MetricTagConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MetricTagConfiguration(string name, MetricTagConfigurationArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/metricTagConfiguration:MetricTagConfiguration", name, args ?? new MetricTagConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MetricTagConfiguration(string name, Input<string> id, MetricTagConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/metricTagConfiguration:MetricTagConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MetricTagConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MetricTagConfiguration Get(string name, Input<string> id, MetricTagConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new MetricTagConfiguration(name, id, state, options);
        }
    }

    public sealed class MetricTagConfigurationArgs : global::Pulumi.ResourceArgs
    {
        [Input("aggregations")]
        private InputList<Inputs.MetricTagConfigurationAggregationArgs>? _aggregations;

        /// <summary>
        /// A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metric_type` of count, rate, or gauge.
        /// </summary>
        public InputList<Inputs.MetricTagConfigurationAggregationArgs> Aggregations
        {
            get => _aggregations ?? (_aggregations = new InputList<Inputs.MetricTagConfigurationAggregationArgs>());
            set => _aggregations = value;
        }

        /// <summary>
        /// Toggle to include/exclude tags as queryable for your metric. Can only be applied to metrics that have one or more tags configured. Defaults to `false`.
        /// </summary>
        [Input("excludeTagsMode")]
        public Input<bool>? ExcludeTagsMode { get; set; }

        /// <summary>
        /// Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metric_type` of distribution.
        /// </summary>
        [Input("includePercentiles")]
        public Input<bool>? IncludePercentiles { get; set; }

        /// <summary>
        /// The metric name for this resource.
        /// </summary>
        [Input("metricName", required: true)]
        public Input<string> MetricName { get; set; } = null!;

        /// <summary>
        /// The metric's type. This field can't be updated after creation. Valid values are `gauge`, `count`, `rate`, `distribution`.
        /// </summary>
        [Input("metricType", required: true)]
        public Input<string> MetricType { get; set; } = null!;

        [Input("tags", required: true)]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tag keys that will be queryable for your metric.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public MetricTagConfigurationArgs()
        {
        }
        public static new MetricTagConfigurationArgs Empty => new MetricTagConfigurationArgs();
    }

    public sealed class MetricTagConfigurationState : global::Pulumi.ResourceArgs
    {
        [Input("aggregations")]
        private InputList<Inputs.MetricTagConfigurationAggregationGetArgs>? _aggregations;

        /// <summary>
        /// A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metric_type` of count, rate, or gauge.
        /// </summary>
        public InputList<Inputs.MetricTagConfigurationAggregationGetArgs> Aggregations
        {
            get => _aggregations ?? (_aggregations = new InputList<Inputs.MetricTagConfigurationAggregationGetArgs>());
            set => _aggregations = value;
        }

        /// <summary>
        /// Toggle to include/exclude tags as queryable for your metric. Can only be applied to metrics that have one or more tags configured. Defaults to `false`.
        /// </summary>
        [Input("excludeTagsMode")]
        public Input<bool>? ExcludeTagsMode { get; set; }

        /// <summary>
        /// Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metric_type` of distribution.
        /// </summary>
        [Input("includePercentiles")]
        public Input<bool>? IncludePercentiles { get; set; }

        /// <summary>
        /// The metric name for this resource.
        /// </summary>
        [Input("metricName")]
        public Input<string>? MetricName { get; set; }

        /// <summary>
        /// The metric's type. This field can't be updated after creation. Valid values are `gauge`, `count`, `rate`, `distribution`.
        /// </summary>
        [Input("metricType")]
        public Input<string>? MetricType { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tag keys that will be queryable for your metric.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public MetricTagConfigurationState()
        {
        }
        public static new MetricTagConfigurationState Empty => new MetricTagConfigurationState();
    }
}
