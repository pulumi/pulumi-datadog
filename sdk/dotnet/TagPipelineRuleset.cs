// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog Tag Pipeline Ruleset resource.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/tagPipelineRuleset:TagPipelineRuleset example "your-ruleset-id-here"
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/tagPipelineRuleset:TagPipelineRuleset")]
    public partial class TagPipelineRuleset : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the ruleset is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The name of the ruleset.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The position of the ruleset in the pipeline.
        /// </summary>
        [Output("position")]
        public Output<int> Position { get; private set; } = null!;

        /// <summary>
        /// The rules in the ruleset.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.TagPipelineRulesetRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// The version of the ruleset.
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a TagPipelineRuleset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TagPipelineRuleset(string name, TagPipelineRulesetArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/tagPipelineRuleset:TagPipelineRuleset", name, args ?? new TagPipelineRulesetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TagPipelineRuleset(string name, Input<string> id, TagPipelineRulesetState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/tagPipelineRuleset:TagPipelineRuleset", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TagPipelineRuleset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TagPipelineRuleset Get(string name, Input<string> id, TagPipelineRulesetState? state = null, CustomResourceOptions? options = null)
        {
            return new TagPipelineRuleset(name, id, state, options);
        }
    }

    public sealed class TagPipelineRulesetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the ruleset is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name of the ruleset.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("rules")]
        private InputList<Inputs.TagPipelineRulesetRuleArgs>? _rules;

        /// <summary>
        /// The rules in the ruleset.
        /// </summary>
        public InputList<Inputs.TagPipelineRulesetRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.TagPipelineRulesetRuleArgs>());
            set => _rules = value;
        }

        public TagPipelineRulesetArgs()
        {
        }
        public static new TagPipelineRulesetArgs Empty => new TagPipelineRulesetArgs();
    }

    public sealed class TagPipelineRulesetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the ruleset is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name of the ruleset.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The position of the ruleset in the pipeline.
        /// </summary>
        [Input("position")]
        public Input<int>? Position { get; set; }

        [Input("rules")]
        private InputList<Inputs.TagPipelineRulesetRuleGetArgs>? _rules;

        /// <summary>
        /// The rules in the ruleset.
        /// </summary>
        public InputList<Inputs.TagPipelineRulesetRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.TagPipelineRulesetRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// The version of the ruleset.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public TagPipelineRulesetState()
        {
        }
        public static new TagPipelineRulesetState Empty => new TagPipelineRulesetState();
    }
}
