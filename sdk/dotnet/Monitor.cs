// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog monitor resource. This can be used to create and manage Datadog monitors.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var foo = new Datadog.Monitor("foo", new Datadog.MonitorArgs
    ///         {
    ///             EscalationMessage = "Escalation message @pagerduty",
    ///             IncludeTags = true,
    ///             Message = "Monitor triggered. Notify: @hipchat-channel",
    ///             MonitorThresholds = new Datadog.Inputs.MonitorMonitorThresholdsArgs
    ///             {
    ///                 Critical = "4",
    ///                 Warning = "2",
    ///             },
    ///             Name = "Name for monitor foo",
    ///             Query = "avg(last_1h):avg:aws.ec2.cpu{environment:foo,host:foo} by {host} &gt; 4",
    ///             Tags = 
    ///             {
    ///                 "foo:bar",
    ///                 "team:fooBar",
    ///             },
    ///             Type = "metric alert",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import datadog:index/monitor:Monitor bytes_received_localhost 2081
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/monitor:Monitor")]
    public partial class Monitor : Pulumi.CustomResource
    {
        /// <summary>
        /// A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log
        /// monitors. Defaults to `false`.
        /// </summary>
        [Output("enableLogsSample")]
        public Output<bool?> EnableLogsSample { get; private set; } = null!;

        /// <summary>
        /// A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
        /// </summary>
        [Output("escalationMessage")]
        public Output<string?> EscalationMessage { get; private set; } = null!;

        /// <summary>
        /// (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer. For example, if the
        /// value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data
        /// from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have
        /// data during evaluation.
        /// </summary>
        [Output("evaluationDelay")]
        public Output<int> EvaluationDelay { get; private set; } = null!;

        /// <summary>
        /// A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. SLO,
        /// composite monitor).
        /// </summary>
        [Output("forceDelete")]
        public Output<bool?> ForceDelete { get; private set; } = null!;

        /// <summary>
        /// The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour,
        /// and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace
        /// Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
        /// </summary>
        [Output("groupRetentionDuration")]
        public Output<string?> GroupRetentionDuration { get; private set; } = null!;

        /// <summary>
        /// Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to
        /// `false`.
        /// </summary>
        [Output("groupbySimpleMonitor")]
        public Output<bool?> GroupbySimpleMonitor { get; private set; } = null!;

        /// <summary>
        /// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title.
        /// Defaults to `true`.
        /// </summary>
        [Output("includeTags")]
        public Output<bool?> IncludeTags { get; private set; } = null!;

        /// <summary>
        /// A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`.
        /// </summary>
        [Output("locked")]
        public Output<bool?> Locked { get; private set; } = null!;

        /// <summary>
        /// A message to include with notifications for this monitor. Email notifications can be sent to specific users by using the
        /// same `@username` notation as events.
        /// </summary>
        [Output("message")]
        public Output<string> Message { get; private set; } = null!;

        /// <summary>
        /// A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are
        /// required for, anomaly monitors.
        /// </summary>
        [Output("monitorThresholdWindows")]
        public Output<Outputs.MonitorMonitorThresholdWindows?> MonitorThresholdWindows { get; private set; } = null!;

        /// <summary>
        /// Alert thresholds of the monitor.
        /// </summary>
        [Output("monitorThresholds")]
        public Output<Outputs.MonitorMonitorThresholds?> MonitorThresholds { get; private set; } = null!;

        /// <summary>
        /// Name of Datadog monitor.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The time (in seconds) to skip evaluations for new groups. `new_group_delay` overrides `new_host_delay` if it is set to a
        /// nonzero value.
        /// </summary>
        [Output("newGroupDelay")]
        public Output<int?> NewGroupDelay { get; private set; } = null!;

        /// <summary>
        /// **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before
        /// starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors
        /// and monitors not grouped by host. Defaults to `300`. The only case when this should be used is to override the default
        /// and set `new_host_delay` to zero for monitors grouped by host.
        /// </summary>
        [Output("newHostDelay")]
        public Output<int?> NewHostDelay { get; private set; } = null!;

        /// <summary>
        /// The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes. We
        /// recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
        /// </summary>
        [Output("noDataTimeframe")]
        public Output<int?> NoDataTimeframe { get; private set; } = null!;

        /// <summary>
        /// A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
        /// </summary>
        [Output("notifyAudit")]
        public Output<bool?> NotifyAudit { get; private set; } = null!;

        /// <summary>
        /// A boolean indicating whether this monitor will notify when data stops reporting. Defaults to `false`.
        /// </summary>
        [Output("notifyNoData")]
        public Output<bool?> NotifyNoData { get; private set; } = null!;

        /// <summary>
        /// Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results
        /// in different behavior depending on the monitor query type. For monitors using `Count` queries, an empty monitor
        /// evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than
        /// `Count`, for example `Gauge`, `Measure`, or `Rate`, the monitor shows the last known status. This option is only
        /// available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors. Valid values are:
        /// `show_no_data`, `show_and_notify_no_data`, `resolve`, and `default`.
        /// </summary>
        [Output("onMissingData")]
        public Output<string?> OnMissingData { get; private set; } = null!;

        /// <summary>
        /// Integer from 1 (high) to 5 (low) indicating alert severity.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending
        /// on the monitor type, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for
        /// details. `terraform plan` will validate query contents unless `validate` is set to `false`. **Note:** APM latency data
        /// is now available as Distribution Metrics. Existing monitors have been migrated automatically but all terraformed
        /// monitors can still use the existing metrics. We strongly recommend updating monitor definitions to query the new
        /// metrics. To learn more, or to see examples of how to update your terraform definitions to utilize the new distribution
        /// metrics, see the [detailed doc](https://docs.datadoghq.com/tracing/guide/ddsketch_trace_metrics/).
        /// </summary>
        [Output("query")]
        public Output<string> Query { get; private set; } = null!;

        /// <summary>
        /// The number of minutes after the last notification before a monitor will re-notify on the current status. It will only
        /// re-notify if it's not resolved.
        /// </summary>
        [Output("renotifyInterval")]
        public Output<int?> RenotifyInterval { get; private set; } = null!;

        /// <summary>
        /// The number of re-notification messages that should be sent on the current status.
        /// </summary>
        [Output("renotifyOccurrences")]
        public Output<int?> RenotifyOccurrences { get; private set; } = null!;

        /// <summary>
        /// The types of statuses for which re-notification messages should be sent.
        /// </summary>
        [Output("renotifyStatuses")]
        public Output<ImmutableArray<string>> RenotifyStatuses { get; private set; } = null!;

        /// <summary>
        /// A boolean indicating whether this monitor needs a full window of data before it's evaluated. We highly recommend you set
        /// this to `false` for sparse metrics, otherwise some evaluations will be skipped. Default: `true` for `on average`, `at
        /// all times` and `in total` aggregation. `false` otherwise.
        /// </summary>
        [Output("requireFullWindow")]
        public Output<bool?> RequireFullWindow { get; private set; } = null!;

        /// <summary>
        /// A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any
        /// updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique
        /// identifiers can be pulled from the [Roles API](https://docs.datadoghq.com/api/latest/roles/#list-roles) in the `data.id`
        /// field.
        /// </summary>
        [Output("restrictedRoles")]
        public Output<ImmutableArray<string>> RestrictedRoles { get; private set; } = null!;

        /// <summary>
        /// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors
        /// page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The
        /// minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
        /// </summary>
        [Output("timeoutH")]
        public Output<int?> TimeoutH { get; private set; } = null!;

        /// <summary>
        /// The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the
        /// Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type
        /// cannot be changed after a monitor is created.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// If set to `false`, skip the validation call done during plan.
        /// </summary>
        [Output("validate")]
        public Output<bool?> Validate { get; private set; } = null!;

        [Output("variables")]
        public Output<Outputs.MonitorVariables?> Variables { get; private set; } = null!;


        /// <summary>
        /// Create a Monitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Monitor(string name, MonitorArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/monitor:Monitor", name, args ?? new MonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Monitor(string name, Input<string> id, MonitorState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/monitor:Monitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Monitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Monitor Get(string name, Input<string> id, MonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new Monitor(name, id, state, options);
        }
    }

    public sealed class MonitorArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log
        /// monitors. Defaults to `false`.
        /// </summary>
        [Input("enableLogsSample")]
        public Input<bool>? EnableLogsSample { get; set; }

        /// <summary>
        /// A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
        /// </summary>
        [Input("escalationMessage")]
        public Input<string>? EscalationMessage { get; set; }

        /// <summary>
        /// (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer. For example, if the
        /// value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data
        /// from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have
        /// data during evaluation.
        /// </summary>
        [Input("evaluationDelay")]
        public Input<int>? EvaluationDelay { get; set; }

        /// <summary>
        /// A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. SLO,
        /// composite monitor).
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour,
        /// and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace
        /// Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
        /// </summary>
        [Input("groupRetentionDuration")]
        public Input<string>? GroupRetentionDuration { get; set; }

        /// <summary>
        /// Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to
        /// `false`.
        /// </summary>
        [Input("groupbySimpleMonitor")]
        public Input<bool>? GroupbySimpleMonitor { get; set; }

        /// <summary>
        /// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title.
        /// Defaults to `true`.
        /// </summary>
        [Input("includeTags")]
        public Input<bool>? IncludeTags { get; set; }

        /// <summary>
        /// A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`.
        /// </summary>
        [Input("locked")]
        public Input<bool>? Locked { get; set; }

        /// <summary>
        /// A message to include with notifications for this monitor. Email notifications can be sent to specific users by using the
        /// same `@username` notation as events.
        /// </summary>
        [Input("message", required: true)]
        public Input<string> Message { get; set; } = null!;

        /// <summary>
        /// A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are
        /// required for, anomaly monitors.
        /// </summary>
        [Input("monitorThresholdWindows")]
        public Input<Inputs.MonitorMonitorThresholdWindowsArgs>? MonitorThresholdWindows { get; set; }

        /// <summary>
        /// Alert thresholds of the monitor.
        /// </summary>
        [Input("monitorThresholds")]
        public Input<Inputs.MonitorMonitorThresholdsArgs>? MonitorThresholds { get; set; }

        /// <summary>
        /// Name of Datadog monitor.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The time (in seconds) to skip evaluations for new groups. `new_group_delay` overrides `new_host_delay` if it is set to a
        /// nonzero value.
        /// </summary>
        [Input("newGroupDelay")]
        public Input<int>? NewGroupDelay { get; set; }

        /// <summary>
        /// **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before
        /// starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors
        /// and monitors not grouped by host. Defaults to `300`. The only case when this should be used is to override the default
        /// and set `new_host_delay` to zero for monitors grouped by host.
        /// </summary>
        [Input("newHostDelay")]
        public Input<int>? NewHostDelay { get; set; }

        /// <summary>
        /// The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes. We
        /// recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
        /// </summary>
        [Input("noDataTimeframe")]
        public Input<int>? NoDataTimeframe { get; set; }

        /// <summary>
        /// A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
        /// </summary>
        [Input("notifyAudit")]
        public Input<bool>? NotifyAudit { get; set; }

        /// <summary>
        /// A boolean indicating whether this monitor will notify when data stops reporting. Defaults to `false`.
        /// </summary>
        [Input("notifyNoData")]
        public Input<bool>? NotifyNoData { get; set; }

        /// <summary>
        /// Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results
        /// in different behavior depending on the monitor query type. For monitors using `Count` queries, an empty monitor
        /// evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than
        /// `Count`, for example `Gauge`, `Measure`, or `Rate`, the monitor shows the last known status. This option is only
        /// available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors. Valid values are:
        /// `show_no_data`, `show_and_notify_no_data`, `resolve`, and `default`.
        /// </summary>
        [Input("onMissingData")]
        public Input<string>? OnMissingData { get; set; }

        /// <summary>
        /// Integer from 1 (high) to 5 (low) indicating alert severity.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending
        /// on the monitor type, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for
        /// details. `terraform plan` will validate query contents unless `validate` is set to `false`. **Note:** APM latency data
        /// is now available as Distribution Metrics. Existing monitors have been migrated automatically but all terraformed
        /// monitors can still use the existing metrics. We strongly recommend updating monitor definitions to query the new
        /// metrics. To learn more, or to see examples of how to update your terraform definitions to utilize the new distribution
        /// metrics, see the [detailed doc](https://docs.datadoghq.com/tracing/guide/ddsketch_trace_metrics/).
        /// </summary>
        [Input("query", required: true)]
        public Input<string> Query { get; set; } = null!;

        /// <summary>
        /// The number of minutes after the last notification before a monitor will re-notify on the current status. It will only
        /// re-notify if it's not resolved.
        /// </summary>
        [Input("renotifyInterval")]
        public Input<int>? RenotifyInterval { get; set; }

        /// <summary>
        /// The number of re-notification messages that should be sent on the current status.
        /// </summary>
        [Input("renotifyOccurrences")]
        public Input<int>? RenotifyOccurrences { get; set; }

        [Input("renotifyStatuses")]
        private InputList<string>? _renotifyStatuses;

        /// <summary>
        /// The types of statuses for which re-notification messages should be sent.
        /// </summary>
        public InputList<string> RenotifyStatuses
        {
            get => _renotifyStatuses ?? (_renotifyStatuses = new InputList<string>());
            set => _renotifyStatuses = value;
        }

        /// <summary>
        /// A boolean indicating whether this monitor needs a full window of data before it's evaluated. We highly recommend you set
        /// this to `false` for sparse metrics, otherwise some evaluations will be skipped. Default: `true` for `on average`, `at
        /// all times` and `in total` aggregation. `false` otherwise.
        /// </summary>
        [Input("requireFullWindow")]
        public Input<bool>? RequireFullWindow { get; set; }

        [Input("restrictedRoles")]
        private InputList<string>? _restrictedRoles;

        /// <summary>
        /// A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any
        /// updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique
        /// identifiers can be pulled from the [Roles API](https://docs.datadoghq.com/api/latest/roles/#list-roles) in the `data.id`
        /// field.
        /// </summary>
        public InputList<string> RestrictedRoles
        {
            get => _restrictedRoles ?? (_restrictedRoles = new InputList<string>());
            set => _restrictedRoles = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors
        /// page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The
        /// minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
        /// </summary>
        [Input("timeoutH")]
        public Input<int>? TimeoutH { get; set; }

        /// <summary>
        /// The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the
        /// Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type
        /// cannot be changed after a monitor is created.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// If set to `false`, skip the validation call done during plan.
        /// </summary>
        [Input("validate")]
        public Input<bool>? Validate { get; set; }

        [Input("variables")]
        public Input<Inputs.MonitorVariablesArgs>? Variables { get; set; }

        public MonitorArgs()
        {
        }
    }

    public sealed class MonitorState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log
        /// monitors. Defaults to `false`.
        /// </summary>
        [Input("enableLogsSample")]
        public Input<bool>? EnableLogsSample { get; set; }

        /// <summary>
        /// A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
        /// </summary>
        [Input("escalationMessage")]
        public Input<string>? EscalationMessage { get; set; }

        /// <summary>
        /// (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer. For example, if the
        /// value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data
        /// from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have
        /// data during evaluation.
        /// </summary>
        [Input("evaluationDelay")]
        public Input<int>? EvaluationDelay { get; set; }

        /// <summary>
        /// A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. SLO,
        /// composite monitor).
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour,
        /// and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace
        /// Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
        /// </summary>
        [Input("groupRetentionDuration")]
        public Input<string>? GroupRetentionDuration { get; set; }

        /// <summary>
        /// Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to
        /// `false`.
        /// </summary>
        [Input("groupbySimpleMonitor")]
        public Input<bool>? GroupbySimpleMonitor { get; set; }

        /// <summary>
        /// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title.
        /// Defaults to `true`.
        /// </summary>
        [Input("includeTags")]
        public Input<bool>? IncludeTags { get; set; }

        /// <summary>
        /// A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`.
        /// </summary>
        [Input("locked")]
        public Input<bool>? Locked { get; set; }

        /// <summary>
        /// A message to include with notifications for this monitor. Email notifications can be sent to specific users by using the
        /// same `@username` notation as events.
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are
        /// required for, anomaly monitors.
        /// </summary>
        [Input("monitorThresholdWindows")]
        public Input<Inputs.MonitorMonitorThresholdWindowsGetArgs>? MonitorThresholdWindows { get; set; }

        /// <summary>
        /// Alert thresholds of the monitor.
        /// </summary>
        [Input("monitorThresholds")]
        public Input<Inputs.MonitorMonitorThresholdsGetArgs>? MonitorThresholds { get; set; }

        /// <summary>
        /// Name of Datadog monitor.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The time (in seconds) to skip evaluations for new groups. `new_group_delay` overrides `new_host_delay` if it is set to a
        /// nonzero value.
        /// </summary>
        [Input("newGroupDelay")]
        public Input<int>? NewGroupDelay { get; set; }

        /// <summary>
        /// **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before
        /// starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors
        /// and monitors not grouped by host. Defaults to `300`. The only case when this should be used is to override the default
        /// and set `new_host_delay` to zero for monitors grouped by host.
        /// </summary>
        [Input("newHostDelay")]
        public Input<int>? NewHostDelay { get; set; }

        /// <summary>
        /// The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes. We
        /// recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
        /// </summary>
        [Input("noDataTimeframe")]
        public Input<int>? NoDataTimeframe { get; set; }

        /// <summary>
        /// A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
        /// </summary>
        [Input("notifyAudit")]
        public Input<bool>? NotifyAudit { get; set; }

        /// <summary>
        /// A boolean indicating whether this monitor will notify when data stops reporting. Defaults to `false`.
        /// </summary>
        [Input("notifyNoData")]
        public Input<bool>? NotifyNoData { get; set; }

        /// <summary>
        /// Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results
        /// in different behavior depending on the monitor query type. For monitors using `Count` queries, an empty monitor
        /// evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than
        /// `Count`, for example `Gauge`, `Measure`, or `Rate`, the monitor shows the last known status. This option is only
        /// available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors. Valid values are:
        /// `show_no_data`, `show_and_notify_no_data`, `resolve`, and `default`.
        /// </summary>
        [Input("onMissingData")]
        public Input<string>? OnMissingData { get; set; }

        /// <summary>
        /// Integer from 1 (high) to 5 (low) indicating alert severity.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending
        /// on the monitor type, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for
        /// details. `terraform plan` will validate query contents unless `validate` is set to `false`. **Note:** APM latency data
        /// is now available as Distribution Metrics. Existing monitors have been migrated automatically but all terraformed
        /// monitors can still use the existing metrics. We strongly recommend updating monitor definitions to query the new
        /// metrics. To learn more, or to see examples of how to update your terraform definitions to utilize the new distribution
        /// metrics, see the [detailed doc](https://docs.datadoghq.com/tracing/guide/ddsketch_trace_metrics/).
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        /// <summary>
        /// The number of minutes after the last notification before a monitor will re-notify on the current status. It will only
        /// re-notify if it's not resolved.
        /// </summary>
        [Input("renotifyInterval")]
        public Input<int>? RenotifyInterval { get; set; }

        /// <summary>
        /// The number of re-notification messages that should be sent on the current status.
        /// </summary>
        [Input("renotifyOccurrences")]
        public Input<int>? RenotifyOccurrences { get; set; }

        [Input("renotifyStatuses")]
        private InputList<string>? _renotifyStatuses;

        /// <summary>
        /// The types of statuses for which re-notification messages should be sent.
        /// </summary>
        public InputList<string> RenotifyStatuses
        {
            get => _renotifyStatuses ?? (_renotifyStatuses = new InputList<string>());
            set => _renotifyStatuses = value;
        }

        /// <summary>
        /// A boolean indicating whether this monitor needs a full window of data before it's evaluated. We highly recommend you set
        /// this to `false` for sparse metrics, otherwise some evaluations will be skipped. Default: `true` for `on average`, `at
        /// all times` and `in total` aggregation. `false` otherwise.
        /// </summary>
        [Input("requireFullWindow")]
        public Input<bool>? RequireFullWindow { get; set; }

        [Input("restrictedRoles")]
        private InputList<string>? _restrictedRoles;

        /// <summary>
        /// A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any
        /// updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique
        /// identifiers can be pulled from the [Roles API](https://docs.datadoghq.com/api/latest/roles/#list-roles) in the `data.id`
        /// field.
        /// </summary>
        public InputList<string> RestrictedRoles
        {
            get => _restrictedRoles ?? (_restrictedRoles = new InputList<string>());
            set => _restrictedRoles = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors
        /// page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The
        /// minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
        /// </summary>
        [Input("timeoutH")]
        public Input<int>? TimeoutH { get; set; }

        /// <summary>
        /// The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the
        /// Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type
        /// cannot be changed after a monitor is created.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// If set to `false`, skip the validation call done during plan.
        /// </summary>
        [Input("validate")]
        public Input<bool>? Validate { get; set; }

        [Input("variables")]
        public Input<Inputs.MonitorVariablesGetArgs>? Variables { get; set; }

        public MonitorState()
        {
        }
    }
}
