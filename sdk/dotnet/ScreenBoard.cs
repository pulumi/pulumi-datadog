// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog screenboard resource. This can be used to create and manage Datadog screenboards.
    /// 
    /// &gt; **Note:** This resource is outdated. Use the new `datadog.Dashboard` resource instead.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // Create a new Datadog screenboard
    ///         var acceptanceTest = new Datadog.ScreenBoard("acceptanceTest", new Datadog.ScreenBoardArgs
    ///         {
    ///             Title = "Test Screenboard",
    ///             ReadOnly = true,
    ///             TemplateVariables = 
    ///             {
    ///                 new Datadog.Inputs.ScreenBoardTemplateVariableArgs
    ///                 {
    ///                     Name = "varname 1",
    ///                     Prefix = "pod_name",
    ///                     Default = "*",
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardTemplateVariableArgs
    ///                 {
    ///                     Name = "varname 2",
    ///                     Prefix = "service_name",
    ///                     Default = "autoscaling",
    ///                 },
    ///             },
    ///             Widgets = 
    ///             {
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "free_text",
    ///                     X = 5,
    ///                     Y = 5,
    ///                     Text = "test text",
    ///                     TextAlign = "right",
    ///                     FontSize = "36",
    ///                     Color = "#ffc0cb",
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "timeseries",
    ///                     X = 25,
    ///                     Y = 5,
    ///                     Title = "graph title terraform",
    ///                     TitleSize = 16,
    ///                     TitleAlign = "right",
    ///                     Legend = true,
    ///                     LegendSize = "16",
    ///                     Time = 
    ///                     {
    ///                         { "live_span", "1d" },
    ///                     },
    ///                     TileDeves = 
    ///                     {
    ///                         new Datadog.Inputs.ScreenBoardWidgetTileDefArgs
    ///                         {
    ///                             Viz = "timeseries",
    ///                             Requests = 
    ///                             {
    ///                                 new Datadog.Inputs.ScreenBoardWidgetTileDefRequestArgs
    ///                                 {
    ///                                     Q = "avg:system.cpu.user{*}",
    ///                                     Type = "line",
    ///                                     Style = 
    ///                                     {
    ///                                         { "palette", "purple" },
    ///                                         { "type", "dashed" },
    ///                                         { "width", "thin" },
    ///                                     },
    ///                                     MetadataJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                                     {
    ///                                         { "avg:system.cpu.user{*}", new Dictionary&lt;string, object?&gt;
    ///                                         {
    ///                                             { "alias", "CPU Usage" },
    ///                                         } },
    ///                                     }),
    ///                                 },
    ///                                 new Datadog.Inputs.ScreenBoardWidgetTileDefRequestArgs
    ///                                 {
    ///                                     LogQuery = new Datadog.Inputs.ScreenBoardWidgetTileDefRequestLogQueryArgs
    ///                                     {
    ///                                         Index = "mcnulty",
    ///                                         Compute = new Datadog.Inputs.ScreenBoardWidgetTileDefRequestLogQueryComputeArgs
    ///                                         {
    ///                                             Aggregation = "avg",
    ///                                             Facet = "@duration",
    ///                                             Interval = "5000",
    ///                                         },
    ///                                         Search = new Datadog.Inputs.ScreenBoardWidgetTileDefRequestLogQuerySearchArgs
    ///                                         {
    ///                                             Query = "status:info",
    ///                                         },
    ///                                         GroupBies = 
    ///                                         {
    ///                                             new Datadog.Inputs.ScreenBoardWidgetTileDefRequestLogQueryGroupByArgs
    ///                                             {
    ///                                                 Facet = "host",
    ///                                                 Limit = 10,
    ///                                                 Sort = new Datadog.Inputs.ScreenBoardWidgetTileDefRequestLogQueryGroupBySortArgs
    ///                                                 {
    ///                                                     Aggregation = "avg",
    ///                                                     Order = "desc",
    ///                                                     Facet = "@duration",
    ///                                                 },
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                     Type = "area",
    ///                                 },
    ///                                 new Datadog.Inputs.ScreenBoardWidgetTileDefRequestArgs
    ///                                 {
    ///                                     ApmQuery = new Datadog.Inputs.ScreenBoardWidgetTileDefRequestApmQueryArgs
    ///                                     {
    ///                                         Index = "apm-search",
    ///                                         Compute = new Datadog.Inputs.ScreenBoardWidgetTileDefRequestApmQueryComputeArgs
    ///                                         {
    ///                                             Aggregation = "avg",
    ///                                             Facet = "@duration",
    ///                                             Interval = "5000",
    ///                                         },
    ///                                         Search = new Datadog.Inputs.ScreenBoardWidgetTileDefRequestApmQuerySearchArgs
    ///                                         {
    ///                                             Query = "type:web",
    ///                                         },
    ///                                         GroupBies = 
    ///                                         {
    ///                                             new Datadog.Inputs.ScreenBoardWidgetTileDefRequestApmQueryGroupByArgs
    ///                                             {
    ///                                                 Facet = "resource_name",
    ///                                                 Limit = 50,
    ///                                                 Sort = new Datadog.Inputs.ScreenBoardWidgetTileDefRequestApmQueryGroupBySortArgs
    ///                                                 {
    ///                                                     Aggregation = "avg",
    ///                                                     Order = "desc",
    ///                                                     Facet = "@string_query.interval",
    ///                                                 },
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                     Type = "bars",
    ///                                 },
    ///                                 new Datadog.Inputs.ScreenBoardWidgetTileDefRequestArgs
    ///                                 {
    ///                                     ProcessQuery = new Datadog.Inputs.ScreenBoardWidgetTileDefRequestProcessQueryArgs
    ///                                     {
    ///                                         Metric = "process.stat.cpu.total_pct",
    ///                                         SearchBy = "error",
    ///                                         FilterBies = 
    ///                                         {
    ///                                             "active",
    ///                                         },
    ///                                         Limit = 50,
    ///                                     },
    ///                                     Type = "area",
    ///                                 },
    ///                             },
    ///                             Markers = 
    ///                             {
    ///                                 new Datadog.Inputs.ScreenBoardWidgetTileDefMarkerArgs
    ///                                 {
    ///                                     Label = "test marker",
    ///                                     Type = "error dashed",
    ///                                     Value = "y &lt; 6",
    ///                                 },
    ///                             },
    ///                             Events = 
    ///                             {
    ///                                 new Datadog.Inputs.ScreenBoardWidgetTileDefEventArgs
    ///                                 {
    ///                                     Q = "test event",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "query_value",
    ///                     X = 45,
    ///                     Y = 25,
    ///                     Title = "query value title terraform",
    ///                     TitleSize = 20,
    ///                     TitleAlign = "center",
    ///                     Legend = true,
    ///                     LegendSize = "16",
    ///                     TileDeves = 
    ///                     {
    ///                         new Datadog.Inputs.ScreenBoardWidgetTileDefArgs
    ///                         {
    ///                             Viz = "query_value",
    ///                             Requests = 
    ///                             {
    ///                                 new Datadog.Inputs.ScreenBoardWidgetTileDefRequestArgs
    ///                                 {
    ///                                     Q = "avg:system.cpu.user{*}",
    ///                                     Type = "line",
    ///                                     Style = 
    ///                                     {
    ///                                         { "palette", "purple" },
    ///                                         { "type", "dashed" },
    ///                                         { "width", "thin" },
    ///                                     },
    ///                                     ConditionalFormats = 
    ///                                     {
    ///                                         new Datadog.Inputs.ScreenBoardWidgetTileDefRequestConditionalFormatArgs
    ///                                         {
    ///                                             Comparator = "&gt;",
    ///                                             Value = "1",
    ///                                             Palette = "white_on_red",
    ///                                         },
    ///                                         new Datadog.Inputs.ScreenBoardWidgetTileDefRequestConditionalFormatArgs
    ///                                         {
    ///                                             Comparator = "&gt;=",
    ///                                             Value = "2",
    ///                                             Palette = "white_on_yellow",
    ///                                         },
    ///                                     },
    ///                                     Aggregator = "max",
    ///                                 },
    ///                             },
    ///                             CustomUnit = "%",
    ///                             Autoscale = false,
    ///                             Precision = "6",
    ///                             TextAlign = "right",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "toplist",
    ///                     X = 65,
    ///                     Y = 5,
    ///                     Title = "toplist title terraform",
    ///                     Legend = true,
    ///                     LegendSize = "auto",
    ///                     Time = 
    ///                     {
    ///                         { "live_span", "1d" },
    ///                     },
    ///                     TileDeves = 
    ///                     {
    ///                         new Datadog.Inputs.ScreenBoardWidgetTileDefArgs
    ///                         {
    ///                             Viz = "toplist",
    ///                             Requests = 
    ///                             {
    ///                                 new Datadog.Inputs.ScreenBoardWidgetTileDefRequestArgs
    ///                                 {
    ///                                     Q = "top(avg:system.load.1{*} by {host}, 10, 'mean', 'desc')",
    ///                                     Style = 
    ///                                     {
    ///                                         { "palette", "purple" },
    ///                                         { "type", "dashed" },
    ///                                         { "width", "thin" },
    ///                                     },
    ///                                     ConditionalFormats = 
    ///                                     {
    ///                                         new Datadog.Inputs.ScreenBoardWidgetTileDefRequestConditionalFormatArgs
    ///                                         {
    ///                                             Comparator = "&gt;",
    ///                                             Value = "4",
    ///                                             Palette = "white_on_green",
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "change",
    ///                     X = 85,
    ///                     Y = 5,
    ///                     Title = "change title terraform",
    ///                     TileDeves = 
    ///                     {
    ///                         new Datadog.Inputs.ScreenBoardWidgetTileDefArgs
    ///                         {
    ///                             Viz = "change",
    ///                             Requests = 
    ///                             {
    ///                                 new Datadog.Inputs.ScreenBoardWidgetTileDefRequestArgs
    ///                                 {
    ///                                     Q = "min:system.load.1{*} by {host}",
    ///                                     CompareTo = "week_before",
    ///                                     ChangeType = "relative",
    ///                                     OrderBy = "present",
    ///                                     OrderDir = "asc",
    ///                                     ExtraCol = "",
    ///                                     IncreaseGood = false,
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "event_timeline",
    ///                     X = 105,
    ///                     Y = 5,
    ///                     Title = "event_timeline title terraform",
    ///                     Query = "status:error",
    ///                     Time = 
    ///                     {
    ///                         { "live_span", "1d" },
    ///                     },
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "event_stream",
    ///                     X = 115,
    ///                     Y = 5,
    ///                     Title = "event_stream title terraform",
    ///                     Query = "*",
    ///                     EventSize = "l",
    ///                     Time = 
    ///                     {
    ///                         { "live_span", "4h" },
    ///                     },
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "image",
    ///                     X = 145,
    ///                     Y = 5,
    ///                     Title = "image title terraform",
    ///                     Sizing = "fit",
    ///                     Margin = "large",
    ///                     Url = "https://datadog-prod.imgix.net/img/dd_logo_70x75.png",
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "note",
    ///                     X = 165,
    ///                     Y = 5,
    ///                     Bgcolor = "pink",
    ///                     TextAlign = "right",
    ///                     FontSize = "36",
    ///                     Tick = true,
    ///                     TickEdge = "bottom",
    ///                     TickPos = "50%",
    ///                     Html = "&lt;b&gt;test note&lt;/b&gt;",
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "alert_graph",
    ///                     X = 185,
    ///                     Y = 5,
    ///                     Title = "alert graph title terraform",
    ///                     AlertId = 123456,
    ///                     VizType = "toplist",
    ///                     Time = 
    ///                     {
    ///                         { "live_span", "15m" },
    ///                     },
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "alert_value",
    ///                     X = 205,
    ///                     Y = 5,
    ///                     Title = "alert value title terraform",
    ///                     AlertId = 123456,
    ///                     TextSize = "fill_height",
    ///                     TextAlign = "right",
    ///                     Precision = "*",
    ///                     Unit = "b",
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "iframe",
    ///                     X = 225,
    ///                     Y = 5,
    ///                     Url = "https://www.datadoghq.org",
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "check_status",
    ///                     X = 245,
    ///                     Y = 5,
    ///                     Title = "test title",
    ///                     TitleAlign = "left",
    ///                     Grouping = "check",
    ///                     Check = "aws.ecs.agent_connected",
    ///                     Tags = 
    ///                     {
    ///                         "*",
    ///                     },
    ///                     Group = "cluster:test",
    ///                     Time = 
    ///                     {
    ///                         { "live_span", "30m" },
    ///                     },
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "trace_service",
    ///                     X = 265,
    ///                     Y = 5,
    ///                     Env = "testEnv",
    ///                     ServiceService = "",
    ///                     ServiceName = "",
    ///                     SizeVersion = "large",
    ///                     LayoutVersion = "three_column",
    ///                     MustShowHits = true,
    ///                     MustShowErrors = true,
    ///                     MustShowLatency = true,
    ///                     MustShowBreakdown = true,
    ///                     MustShowDistribution = true,
    ///                     MustShowResourceList = true,
    ///                     Time = 
    ///                     {
    ///                         { "live_span", "30m" },
    ///                     },
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "hostmap",
    ///                     X = 285,
    ///                     Y = 5,
    ///                     Query = "avg:system.load.1{*} by {host}",
    ///                     TileDeves = 
    ///                     {
    ///                         new Datadog.Inputs.ScreenBoardWidgetTileDefArgs
    ///                         {
    ///                             Viz = "hostmap",
    ///                             NodeType = "container",
    ///                             Scopes = 
    ///                             {
    ///                                 "datacenter:test",
    ///                             },
    ///                             Groups = 
    ///                             {
    ///                                 "pod_name",
    ///                             },
    ///                             NoGroupHosts = false,
    ///                             NoMetricHosts = false,
    ///                             Requests = 
    ///                             {
    ///                                 new Datadog.Inputs.ScreenBoardWidgetTileDefRequestArgs
    ///                                 {
    ///                                     Q = "max:process.stat.container.io.wbps{datacenter:test} by {host}",
    ///                                     Type = "fill",
    ///                                 },
    ///                             },
    ///                             Style = 
    ///                             {
    ///                                 { "palette", "hostmap_blues" },
    ///                                 { "palette_flip", true },
    ///                                 { "fill_min", 20 },
    ///                                 { "fill_max", 300 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "manage_status",
    ///                     X = 305,
    ///                     Y = 5,
    ///                     SummaryType = "monitors",
    ///                     DisplayFormat = "countsAndList",
    ///                     ColorPreference = "background",
    ///                     HideZeroCounts = true,
    ///                     ShowLastTriggered = false,
    ///                     ManageStatusShowTitle = false,
    ///                     ManageStatusTitleText = "test title",
    ///                     ManageStatusTitleSize = "20",
    ///                     ManageStatusTitleAlign = "right",
    ///                     Params = 
    ///                     {
    ///                         { "sort", "status,asc" },
    ///                         { "text", "status:alert" },
    ///                     },
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "log_stream",
    ///                     X = 325,
    ///                     Y = 5,
    ///                     Query = "source:kubernetes",
    ///                     Columns = "[\"column1\",\"column2\",\"column3\"]",
    ///                     Logset = "1234",
    ///                     Time = 
    ///                     {
    ///                         { "live_span", "1h" },
    ///                     },
    ///                 },
    ///                 new Datadog.Inputs.ScreenBoardWidgetArgs
    ///                 {
    ///                     Type = "process",
    ///                     X = 365,
    ///                     Y = 5,
    ///                     TileDeves = 
    ///                     {
    ///                         new Datadog.Inputs.ScreenBoardWidgetTileDefArgs
    ///                         {
    ///                             Viz = "process",
    ///                             Requests = 
    ///                             {
    ///                                 new Datadog.Inputs.ScreenBoardWidgetTileDefRequestArgs
    ///                                 {
    ///                                     QueryType = "process",
    ///                                     Metric = "process.stat.cpu.total_pct",
    ///                                     TextFilter = "",
    ///                                     TagFilters = {},
    ///                                     Limit = 200,
    ///                                     Style = 
    ///                                     {
    ///                                         { "palette", "dog_classic_area" },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// screenboards can be imported using their numeric ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import datadog:index/screenBoard:ScreenBoard my_service_screenboard 2081
    /// ```
    /// </summary>
    public partial class ScreenBoard : Pulumi.CustomResource
    {
        /// <summary>
        /// Height of the screenboard
        /// </summary>
        [Output("height")]
        public Output<string?> Height { get; private set; } = null!;

        [Output("readOnly")]
        public Output<bool?> ReadOnly { get; private set; } = null!;

        /// <summary>
        /// Whether the screenboard is shared or not
        /// </summary>
        [Output("shared")]
        public Output<bool?> Shared { get; private set; } = null!;

        /// <summary>
        /// A list of template variables for using Dashboard templating.
        /// </summary>
        [Output("templateVariables")]
        public Output<ImmutableArray<Outputs.ScreenBoardTemplateVariable>> TemplateVariables { get; private set; } = null!;

        /// <summary>
        /// Name of the screenboard
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// A list of widget definitions.
        /// </summary>
        [Output("widgets")]
        public Output<ImmutableArray<Outputs.ScreenBoardWidget>> Widgets { get; private set; } = null!;

        /// <summary>
        /// Width of the screenboard
        /// </summary>
        [Output("width")]
        public Output<string?> Width { get; private set; } = null!;


        /// <summary>
        /// Create a ScreenBoard resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScreenBoard(string name, ScreenBoardArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/screenBoard:ScreenBoard", name, args ?? new ScreenBoardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScreenBoard(string name, Input<string> id, ScreenBoardState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/screenBoard:ScreenBoard", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScreenBoard resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScreenBoard Get(string name, Input<string> id, ScreenBoardState? state = null, CustomResourceOptions? options = null)
        {
            return new ScreenBoard(name, id, state, options);
        }
    }

    public sealed class ScreenBoardArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Height of the screenboard
        /// </summary>
        [Input("height")]
        public Input<string>? Height { get; set; }

        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        /// <summary>
        /// Whether the screenboard is shared or not
        /// </summary>
        [Input("shared")]
        public Input<bool>? Shared { get; set; }

        [Input("templateVariables")]
        private InputList<Inputs.ScreenBoardTemplateVariableArgs>? _templateVariables;

        /// <summary>
        /// A list of template variables for using Dashboard templating.
        /// </summary>
        public InputList<Inputs.ScreenBoardTemplateVariableArgs> TemplateVariables
        {
            get => _templateVariables ?? (_templateVariables = new InputList<Inputs.ScreenBoardTemplateVariableArgs>());
            set => _templateVariables = value;
        }

        /// <summary>
        /// Name of the screenboard
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        [Input("widgets", required: true)]
        private InputList<Inputs.ScreenBoardWidgetArgs>? _widgets;

        /// <summary>
        /// A list of widget definitions.
        /// </summary>
        public InputList<Inputs.ScreenBoardWidgetArgs> Widgets
        {
            get => _widgets ?? (_widgets = new InputList<Inputs.ScreenBoardWidgetArgs>());
            set => _widgets = value;
        }

        /// <summary>
        /// Width of the screenboard
        /// </summary>
        [Input("width")]
        public Input<string>? Width { get; set; }

        public ScreenBoardArgs()
        {
        }
    }

    public sealed class ScreenBoardState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Height of the screenboard
        /// </summary>
        [Input("height")]
        public Input<string>? Height { get; set; }

        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        /// <summary>
        /// Whether the screenboard is shared or not
        /// </summary>
        [Input("shared")]
        public Input<bool>? Shared { get; set; }

        [Input("templateVariables")]
        private InputList<Inputs.ScreenBoardTemplateVariableGetArgs>? _templateVariables;

        /// <summary>
        /// A list of template variables for using Dashboard templating.
        /// </summary>
        public InputList<Inputs.ScreenBoardTemplateVariableGetArgs> TemplateVariables
        {
            get => _templateVariables ?? (_templateVariables = new InputList<Inputs.ScreenBoardTemplateVariableGetArgs>());
            set => _templateVariables = value;
        }

        /// <summary>
        /// Name of the screenboard
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("widgets")]
        private InputList<Inputs.ScreenBoardWidgetGetArgs>? _widgets;

        /// <summary>
        /// A list of widget definitions.
        /// </summary>
        public InputList<Inputs.ScreenBoardWidgetGetArgs> Widgets
        {
            get => _widgets ?? (_widgets = new InputList<Inputs.ScreenBoardWidgetGetArgs>());
            set => _widgets = value;
        }

        /// <summary>
        /// Width of the screenboard
        /// </summary>
        [Input("width")]
        public Input<string>? Width { get; set; }

        public ScreenBoardState()
        {
        }
    }
}
