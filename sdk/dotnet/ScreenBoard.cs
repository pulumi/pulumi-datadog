// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog screenboard resource. This can be used to create and manage Datadog screenboards.
    /// 
    /// &gt; **Note:** This resource is outdated. Use the new `datadog..Dashboard` resource instead.
    /// </summary>
    public partial class ScreenBoard : Pulumi.CustomResource
    {
        /// <summary>
        /// Height of the screenboard
        /// </summary>
        [Output("height")]
        public Output<string?> Height { get; private set; } = null!;

        [Output("readOnly")]
        public Output<bool?> ReadOnly { get; private set; } = null!;

        /// <summary>
        /// Whether the screenboard is shared or not
        /// </summary>
        [Output("shared")]
        public Output<bool?> Shared { get; private set; } = null!;

        /// <summary>
        /// A list of template variables for using Dashboard templating.
        /// </summary>
        [Output("templateVariables")]
        public Output<ImmutableArray<Outputs.ScreenBoardTemplateVariable>> TemplateVariables { get; private set; } = null!;

        /// <summary>
        /// Name of the screenboard
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// A list of widget definitions.
        /// </summary>
        [Output("widgets")]
        public Output<ImmutableArray<Outputs.ScreenBoardWidget>> Widgets { get; private set; } = null!;

        /// <summary>
        /// Width of the screenboard
        /// </summary>
        [Output("width")]
        public Output<string?> Width { get; private set; } = null!;


        /// <summary>
        /// Create a ScreenBoard resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScreenBoard(string name, ScreenBoardArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/screenBoard:ScreenBoard", name, args ?? new ScreenBoardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScreenBoard(string name, Input<string> id, ScreenBoardState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/screenBoard:ScreenBoard", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScreenBoard resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScreenBoard Get(string name, Input<string> id, ScreenBoardState? state = null, CustomResourceOptions? options = null)
        {
            return new ScreenBoard(name, id, state, options);
        }
    }

    public sealed class ScreenBoardArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Height of the screenboard
        /// </summary>
        [Input("height")]
        public Input<string>? Height { get; set; }

        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        /// <summary>
        /// Whether the screenboard is shared or not
        /// </summary>
        [Input("shared")]
        public Input<bool>? Shared { get; set; }

        [Input("templateVariables")]
        private InputList<Inputs.ScreenBoardTemplateVariableArgs>? _templateVariables;

        /// <summary>
        /// A list of template variables for using Dashboard templating.
        /// </summary>
        public InputList<Inputs.ScreenBoardTemplateVariableArgs> TemplateVariables
        {
            get => _templateVariables ?? (_templateVariables = new InputList<Inputs.ScreenBoardTemplateVariableArgs>());
            set => _templateVariables = value;
        }

        /// <summary>
        /// Name of the screenboard
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        [Input("widgets", required: true)]
        private InputList<Inputs.ScreenBoardWidgetArgs>? _widgets;

        /// <summary>
        /// A list of widget definitions.
        /// </summary>
        public InputList<Inputs.ScreenBoardWidgetArgs> Widgets
        {
            get => _widgets ?? (_widgets = new InputList<Inputs.ScreenBoardWidgetArgs>());
            set => _widgets = value;
        }

        /// <summary>
        /// Width of the screenboard
        /// </summary>
        [Input("width")]
        public Input<string>? Width { get; set; }

        public ScreenBoardArgs()
        {
        }
    }

    public sealed class ScreenBoardState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Height of the screenboard
        /// </summary>
        [Input("height")]
        public Input<string>? Height { get; set; }

        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        /// <summary>
        /// Whether the screenboard is shared or not
        /// </summary>
        [Input("shared")]
        public Input<bool>? Shared { get; set; }

        [Input("templateVariables")]
        private InputList<Inputs.ScreenBoardTemplateVariableGetArgs>? _templateVariables;

        /// <summary>
        /// A list of template variables for using Dashboard templating.
        /// </summary>
        public InputList<Inputs.ScreenBoardTemplateVariableGetArgs> TemplateVariables
        {
            get => _templateVariables ?? (_templateVariables = new InputList<Inputs.ScreenBoardTemplateVariableGetArgs>());
            set => _templateVariables = value;
        }

        /// <summary>
        /// Name of the screenboard
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("widgets")]
        private InputList<Inputs.ScreenBoardWidgetGetArgs>? _widgets;

        /// <summary>
        /// A list of widget definitions.
        /// </summary>
        public InputList<Inputs.ScreenBoardWidgetGetArgs> Widgets
        {
            get => _widgets ?? (_widgets = new InputList<Inputs.ScreenBoardWidgetGetArgs>());
            set => _widgets = value;
        }

        /// <summary>
        /// Width of the screenboard
        /// </summary>
        [Input("width")]
        public Input<string>? Width { get; set; }

        public ScreenBoardState()
        {
        }
    }
}
