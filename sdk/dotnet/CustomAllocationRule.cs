// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog Custom Allocation Rule resource. Custom allocation rules allow you to allocate cloud costs based on tags and filters.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/customAllocationRule:CustomAllocationRule new_list &lt;rule_id&gt;
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/customAllocationRule:CustomAllocationRule")]
    public partial class CustomAllocationRule : global::Pulumi.CustomResource
    {
        [Output("costsToAllocates")]
        public Output<ImmutableArray<Outputs.CustomAllocationRuleCostsToAllocate>> CostsToAllocates { get; private set; } = null!;

        /// <summary>
        /// The timestamp (in ISO 8601 format) when the rule was created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// Whether the custom allocation rule is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The UUID of the user who last modified the rule.
        /// </summary>
        [Output("lastModifiedUserUuid")]
        public Output<string> LastModifiedUserUuid { get; private set; } = null!;

        /// <summary>
        /// The order of the rule in the list of custom allocation rules. This field is read-only. Use the `datadog.CustomAllocationRules` resource to manage rule order.
        /// </summary>
        [Output("orderId")]
        public Output<int> OrderId { get; private set; } = null!;

        /// <summary>
        /// List of cloud providers the rule applies to. Valid values include `Aws`, `Azure`, and `Gcp`.
        /// </summary>
        [Output("providernames")]
        public Output<ImmutableArray<string>> Providernames { get; private set; } = null!;

        /// <summary>
        /// Whether the rule was rejected by the API during creation due to validation errors. This field is read-only.
        /// </summary>
        [Output("rejected")]
        public Output<bool> Rejected { get; private set; } = null!;

        /// <summary>
        /// The name of the custom allocation rule. This field is immutable - changing it will force replacement of the resource.
        /// </summary>
        [Output("ruleName")]
        public Output<string> RuleName { get; private set; } = null!;

        [Output("strategy")]
        public Output<Outputs.CustomAllocationRuleStrategy?> Strategy { get; private set; } = null!;

        /// <summary>
        /// The timestamp (in ISO 8601 format) when the rule was last updated.
        /// </summary>
        [Output("updated")]
        public Output<string> Updated { get; private set; } = null!;

        /// <summary>
        /// The version number of the rule. This increments each time the rule is updated.
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a CustomAllocationRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomAllocationRule(string name, CustomAllocationRuleArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/customAllocationRule:CustomAllocationRule", name, args ?? new CustomAllocationRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomAllocationRule(string name, Input<string> id, CustomAllocationRuleState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/customAllocationRule:CustomAllocationRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomAllocationRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomAllocationRule Get(string name, Input<string> id, CustomAllocationRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomAllocationRule(name, id, state, options);
        }
    }

    public sealed class CustomAllocationRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("costsToAllocates")]
        private InputList<Inputs.CustomAllocationRuleCostsToAllocateArgs>? _costsToAllocates;
        public InputList<Inputs.CustomAllocationRuleCostsToAllocateArgs> CostsToAllocates
        {
            get => _costsToAllocates ?? (_costsToAllocates = new InputList<Inputs.CustomAllocationRuleCostsToAllocateArgs>());
            set => _costsToAllocates = value;
        }

        /// <summary>
        /// Whether the custom allocation rule is enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("providernames", required: true)]
        private InputList<string>? _providernames;

        /// <summary>
        /// List of cloud providers the rule applies to. Valid values include `Aws`, `Azure`, and `Gcp`.
        /// </summary>
        public InputList<string> Providernames
        {
            get => _providernames ?? (_providernames = new InputList<string>());
            set => _providernames = value;
        }

        /// <summary>
        /// The name of the custom allocation rule. This field is immutable - changing it will force replacement of the resource.
        /// </summary>
        [Input("ruleName", required: true)]
        public Input<string> RuleName { get; set; } = null!;

        [Input("strategy")]
        public Input<Inputs.CustomAllocationRuleStrategyArgs>? Strategy { get; set; }

        public CustomAllocationRuleArgs()
        {
        }
        public static new CustomAllocationRuleArgs Empty => new CustomAllocationRuleArgs();
    }

    public sealed class CustomAllocationRuleState : global::Pulumi.ResourceArgs
    {
        [Input("costsToAllocates")]
        private InputList<Inputs.CustomAllocationRuleCostsToAllocateGetArgs>? _costsToAllocates;
        public InputList<Inputs.CustomAllocationRuleCostsToAllocateGetArgs> CostsToAllocates
        {
            get => _costsToAllocates ?? (_costsToAllocates = new InputList<Inputs.CustomAllocationRuleCostsToAllocateGetArgs>());
            set => _costsToAllocates = value;
        }

        /// <summary>
        /// The timestamp (in ISO 8601 format) when the rule was created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// Whether the custom allocation rule is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The UUID of the user who last modified the rule.
        /// </summary>
        [Input("lastModifiedUserUuid")]
        public Input<string>? LastModifiedUserUuid { get; set; }

        /// <summary>
        /// The order of the rule in the list of custom allocation rules. This field is read-only. Use the `datadog.CustomAllocationRules` resource to manage rule order.
        /// </summary>
        [Input("orderId")]
        public Input<int>? OrderId { get; set; }

        [Input("providernames")]
        private InputList<string>? _providernames;

        /// <summary>
        /// List of cloud providers the rule applies to. Valid values include `Aws`, `Azure`, and `Gcp`.
        /// </summary>
        public InputList<string> Providernames
        {
            get => _providernames ?? (_providernames = new InputList<string>());
            set => _providernames = value;
        }

        /// <summary>
        /// Whether the rule was rejected by the API during creation due to validation errors. This field is read-only.
        /// </summary>
        [Input("rejected")]
        public Input<bool>? Rejected { get; set; }

        /// <summary>
        /// The name of the custom allocation rule. This field is immutable - changing it will force replacement of the resource.
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        [Input("strategy")]
        public Input<Inputs.CustomAllocationRuleStrategyGetArgs>? Strategy { get; set; }

        /// <summary>
        /// The timestamp (in ISO 8601 format) when the rule was last updated.
        /// </summary>
        [Input("updated")]
        public Input<string>? Updated { get; set; }

        /// <summary>
        /// The version number of the rule. This increments each time the rule is updated.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public CustomAllocationRuleState()
        {
        }
        public static new CustomAllocationRuleState Empty => new CustomAllocationRuleState();
    }
}
