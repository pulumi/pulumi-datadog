// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog Dataset resource. This can be used to create and manage Datadog datasets.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create new dataset resource
    ///     var foo = new Datadog.Dataset("foo", new()
    ///     {
    ///         Name = "HR Dataset",
    ///         Principals = new[]
    ///         {
    ///             "role:00000000-0000-1111-0000-000000000000",
    ///         },
    ///         ProductFilters = new[]
    ///         {
    ///             new Datadog.Inputs.DatasetProductFilterArgs
    ///             {
    ///                 Product = "rum",
    ///                 Filters = new[]
    ///                 {
    ///                     "@application.id:123",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/dataset:Dataset foo "&lt;dataset_id&gt;"
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/dataset:Dataset")]
    public partial class Dataset : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates when the dataset was created (in ISO 8601).
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Indicates who created the dataset.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// The name of the dataset.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `Role` and `Team`.
        /// </summary>
        [Output("principals")]
        public Output<ImmutableArray<string>> Principals { get; private set; } = null!;

        [Output("productFilters")]
        public Output<ImmutableArray<Outputs.DatasetProductFilter>> ProductFilters { get; private set; } = null!;


        /// <summary>
        /// Create a Dataset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Dataset(string name, DatasetArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/dataset:Dataset", name, args ?? new DatasetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Dataset(string name, Input<string> id, DatasetState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/dataset:Dataset", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Dataset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Dataset Get(string name, Input<string> id, DatasetState? state = null, CustomResourceOptions? options = null)
        {
            return new Dataset(name, id, state, options);
        }
    }

    public sealed class DatasetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the dataset.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("principals", required: true)]
        private InputList<string>? _principals;

        /// <summary>
        /// An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `Role` and `Team`.
        /// </summary>
        public InputList<string> Principals
        {
            get => _principals ?? (_principals = new InputList<string>());
            set => _principals = value;
        }

        [Input("productFilters")]
        private InputList<Inputs.DatasetProductFilterArgs>? _productFilters;
        public InputList<Inputs.DatasetProductFilterArgs> ProductFilters
        {
            get => _productFilters ?? (_productFilters = new InputList<Inputs.DatasetProductFilterArgs>());
            set => _productFilters = value;
        }

        public DatasetArgs()
        {
        }
        public static new DatasetArgs Empty => new DatasetArgs();
    }

    public sealed class DatasetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates when the dataset was created (in ISO 8601).
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Indicates who created the dataset.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// The name of the dataset.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("principals")]
        private InputList<string>? _principals;

        /// <summary>
        /// An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `Role` and `Team`.
        /// </summary>
        public InputList<string> Principals
        {
            get => _principals ?? (_principals = new InputList<string>());
            set => _principals = value;
        }

        [Input("productFilters")]
        private InputList<Inputs.DatasetProductFilterGetArgs>? _productFilters;
        public InputList<Inputs.DatasetProductFilterGetArgs> ProductFilters
        {
            get => _productFilters ?? (_productFilters = new InputList<Inputs.DatasetProductFilterGetArgs>());
            set => _productFilters = value;
        }

        public DatasetState()
        {
        }
        public static new DatasetState Empty => new DatasetState();
    }
}
