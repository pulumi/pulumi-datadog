// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog DowntimeSchedule resource. This can be used to create and manage Datadog downtimes. **NOTE:** Currently in private beta. To request access, contact Support at support@datadoghq.com.
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import datadog:index/downtimeSchedule:DowntimeSchedule new_list "00e000000-0000-1234-0000-000000000000"
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/downtimeSchedule:DowntimeSchedule")]
    public partial class DowntimeSchedule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The timezone in which to display the downtime's start and end times in Datadog applications. This is not used as an offset for scheduling.
        /// </summary>
        [Output("displayTimezone")]
        public Output<string> DisplayTimezone { get; private set; } = null!;

        /// <summary>
        /// A message to include with notifications for this downtime. Email notifications can be sent to specific users by using the same `@username` notation as events.
        /// </summary>
        [Output("message")]
        public Output<string?> Message { get; private set; } = null!;

        [Output("monitorIdentifier")]
        public Output<Outputs.DowntimeScheduleMonitorIdentifier?> MonitorIdentifier { get; private set; } = null!;

        /// <summary>
        /// If the first recovery notification during a downtime should be muted.
        /// </summary>
        [Output("muteFirstRecoveryNotification")]
        public Output<bool> MuteFirstRecoveryNotification { get; private set; } = null!;

        /// <summary>
        /// States that will trigger a monitor notification when the `notify_end_types` action occurs.
        /// </summary>
        [Output("notifyEndStates")]
        public Output<ImmutableArray<string>> NotifyEndStates { get; private set; } = null!;

        /// <summary>
        /// Actions that will trigger a monitor notification if the downtime is in the `notify_end_types` state.
        /// </summary>
        [Output("notifyEndTypes")]
        public Output<ImmutableArray<string>> NotifyEndTypes { get; private set; } = null!;

        [Output("oneTimeSchedule")]
        public Output<Outputs.DowntimeScheduleOneTimeSchedule?> OneTimeSchedule { get; private set; } = null!;

        [Output("recurringSchedule")]
        public Output<Outputs.DowntimeScheduleRecurringSchedule?> RecurringSchedule { get; private set; } = null!;

        /// <summary>
        /// The scope to which the downtime applies. Must follow the [common search syntax](https://docs.datadoghq.com/logs/explorer/search_syntax/).
        /// </summary>
        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;


        /// <summary>
        /// Create a DowntimeSchedule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DowntimeSchedule(string name, DowntimeScheduleArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/downtimeSchedule:DowntimeSchedule", name, args ?? new DowntimeScheduleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DowntimeSchedule(string name, Input<string> id, DowntimeScheduleState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/downtimeSchedule:DowntimeSchedule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DowntimeSchedule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DowntimeSchedule Get(string name, Input<string> id, DowntimeScheduleState? state = null, CustomResourceOptions? options = null)
        {
            return new DowntimeSchedule(name, id, state, options);
        }
    }

    public sealed class DowntimeScheduleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The timezone in which to display the downtime's start and end times in Datadog applications. This is not used as an offset for scheduling.
        /// </summary>
        [Input("displayTimezone")]
        public Input<string>? DisplayTimezone { get; set; }

        /// <summary>
        /// A message to include with notifications for this downtime. Email notifications can be sent to specific users by using the same `@username` notation as events.
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        [Input("monitorIdentifier")]
        public Input<Inputs.DowntimeScheduleMonitorIdentifierArgs>? MonitorIdentifier { get; set; }

        /// <summary>
        /// If the first recovery notification during a downtime should be muted.
        /// </summary>
        [Input("muteFirstRecoveryNotification")]
        public Input<bool>? MuteFirstRecoveryNotification { get; set; }

        [Input("notifyEndStates")]
        private InputList<string>? _notifyEndStates;

        /// <summary>
        /// States that will trigger a monitor notification when the `notify_end_types` action occurs.
        /// </summary>
        public InputList<string> NotifyEndStates
        {
            get => _notifyEndStates ?? (_notifyEndStates = new InputList<string>());
            set => _notifyEndStates = value;
        }

        [Input("notifyEndTypes")]
        private InputList<string>? _notifyEndTypes;

        /// <summary>
        /// Actions that will trigger a monitor notification if the downtime is in the `notify_end_types` state.
        /// </summary>
        public InputList<string> NotifyEndTypes
        {
            get => _notifyEndTypes ?? (_notifyEndTypes = new InputList<string>());
            set => _notifyEndTypes = value;
        }

        [Input("oneTimeSchedule")]
        public Input<Inputs.DowntimeScheduleOneTimeScheduleArgs>? OneTimeSchedule { get; set; }

        [Input("recurringSchedule")]
        public Input<Inputs.DowntimeScheduleRecurringScheduleArgs>? RecurringSchedule { get; set; }

        /// <summary>
        /// The scope to which the downtime applies. Must follow the [common search syntax](https://docs.datadoghq.com/logs/explorer/search_syntax/).
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public DowntimeScheduleArgs()
        {
        }
        public static new DowntimeScheduleArgs Empty => new DowntimeScheduleArgs();
    }

    public sealed class DowntimeScheduleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The timezone in which to display the downtime's start and end times in Datadog applications. This is not used as an offset for scheduling.
        /// </summary>
        [Input("displayTimezone")]
        public Input<string>? DisplayTimezone { get; set; }

        /// <summary>
        /// A message to include with notifications for this downtime. Email notifications can be sent to specific users by using the same `@username` notation as events.
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        [Input("monitorIdentifier")]
        public Input<Inputs.DowntimeScheduleMonitorIdentifierGetArgs>? MonitorIdentifier { get; set; }

        /// <summary>
        /// If the first recovery notification during a downtime should be muted.
        /// </summary>
        [Input("muteFirstRecoveryNotification")]
        public Input<bool>? MuteFirstRecoveryNotification { get; set; }

        [Input("notifyEndStates")]
        private InputList<string>? _notifyEndStates;

        /// <summary>
        /// States that will trigger a monitor notification when the `notify_end_types` action occurs.
        /// </summary>
        public InputList<string> NotifyEndStates
        {
            get => _notifyEndStates ?? (_notifyEndStates = new InputList<string>());
            set => _notifyEndStates = value;
        }

        [Input("notifyEndTypes")]
        private InputList<string>? _notifyEndTypes;

        /// <summary>
        /// Actions that will trigger a monitor notification if the downtime is in the `notify_end_types` state.
        /// </summary>
        public InputList<string> NotifyEndTypes
        {
            get => _notifyEndTypes ?? (_notifyEndTypes = new InputList<string>());
            set => _notifyEndTypes = value;
        }

        [Input("oneTimeSchedule")]
        public Input<Inputs.DowntimeScheduleOneTimeScheduleGetArgs>? OneTimeSchedule { get; set; }

        [Input("recurringSchedule")]
        public Input<Inputs.DowntimeScheduleRecurringScheduleGetArgs>? RecurringSchedule { get; set; }

        /// <summary>
        /// The scope to which the downtime applies. Must follow the [common search syntax](https://docs.datadoghq.com/logs/explorer/search_syntax/).
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public DowntimeScheduleState()
        {
        }
        public static new DowntimeScheduleState Empty => new DowntimeScheduleState();
    }
}
