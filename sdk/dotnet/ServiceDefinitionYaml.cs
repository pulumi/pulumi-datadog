// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog service definition resource. This can be used to create and manage Datadog service definitions in the service catalog using the YAML/JSON definition.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Service Definition with v2.2 Schema Definition
    ///     var serviceDefinitionV22 = new Datadog.ServiceDefinitionYaml("serviceDefinitionV22", new()
    ///     {
    ///         ServiceDefinition = @"schema-version: v2.2
    /// dd-service: shopping-cart
    /// team: e-commerce-team
    /// contacts:
    ///   - name: Support Email
    ///     type: email
    ///     contact: team@shopping.com
    ///   - name: Support Slack
    ///     type: slack
    ///     contact: https://www.slack.com/archives/shopping-cart
    /// description: shopping cart service responsible for managing shopping carts
    /// tier: high
    /// lifecycle: production
    /// application: e-commerce
    /// languages: 
    ///   - go
    ///   - python
    /// type: web 
    /// ci-pipeline-fingerprints:
    ///   - fp1 
    ///   - fp2 
    /// links:
    ///   - name: shopping-cart runbook
    ///     type: runbook
    ///     url: https://runbook/shopping-cart
    ///   - name: shopping-cart architecture
    ///     type: doc
    ///     provider: gdoc
    ///     url: https://google.drive/shopping-cart-architecture
    ///   - name: shopping-cart service Wiki
    ///     type: doc
    ///     provider: wiki
    ///     url: https://wiki/shopping-cart
    ///   - name: shopping-cart source code
    ///     type: repo
    ///     provider: github
    ///     url: http://github/shopping-cart
    /// tags:
    ///   - business-unit:retail
    ///   - cost-center:engineering
    /// integrations:
    ///   pagerduty: 
    ///     service-url: https://www.pagerduty.com/service-directory/Pshopping-cart
    /// extensions:
    ///   mycompany.com/shopping-cart:
    ///     customField: customValue
    /// 
    /// ",
    ///     });
    /// 
    ///     // Service Definition with v2.1 Schema Definition
    ///     var serviceDefinitionV21 = new Datadog.ServiceDefinitionYaml("serviceDefinitionV21", new()
    ///     {
    ///         ServiceDefinition = @"schema-version: v2.1
    /// dd-service: shopping-cart
    /// team: e-commerce-team
    /// contacts:
    ///   - name: Support Email
    ///     type: email
    ///     contact: team@shopping.com
    ///   - name: Support Slack
    ///     type: slack
    ///     contact: https://www.slack.com/archives/shopping-cart
    /// description: shopping cart service responsible for managing shopping carts
    /// tier: high
    /// lifecycle: production
    /// application: e-commerce
    /// links:
    ///   - name: shopping-cart runbook
    ///     type: runbook
    ///     url: https://runbook/shopping-cart
    ///   - name: shopping-cart architecture
    ///     type: doc
    ///     provider: gdoc
    ///     url: https://google.drive/shopping-cart-architecture
    ///   - name: shopping-cart service Wiki
    ///     type: doc
    ///     provider: wiki
    ///     url: https://wiki/shopping-cart
    ///   - name: shopping-cart source code
    ///     type: repo
    ///     provider: github
    ///     url: http://github/shopping-cart
    /// tags:
    ///   - business-unit:retail
    ///   - cost-center:engineering
    /// integrations:
    ///   pagerduty: 
    ///     service-url: https://www.pagerduty.com/service-directory/Pshopping-cart
    /// extensions:
    ///   mycompany.com/shopping-cart:
    ///     customField: customValue
    /// 
    /// ",
    ///     });
    /// 
    ///     // Service Definition with v2 Schema Definition
    ///     var serviceDefinitionV2 = new Datadog.ServiceDefinitionYaml("serviceDefinitionV2", new()
    ///     {
    ///         ServiceDefinition = @"schema-version: v2
    /// dd-service: shopping-cart
    /// team: E Commerce
    /// contacts:
    ///   - name: Support Email
    ///     type: email
    ///     contact: team@shopping.com
    ///   - name: Support Slack
    ///     type: slack
    ///     contact: https://www.slack.com/archives/shopping-cart
    /// repos:
    ///   - name: shopping-cart source code
    ///     provider: github
    ///     url: http://github/shopping-cart
    /// docs:
    ///   - name: shopping-cart architecture
    ///     provider: gdoc
    ///     url: https://google.drive/shopping-cart-architecture
    ///   - name: shopping-cart service Wiki
    ///     provider: wiki
    ///     url: https://wiki/shopping-cart
    /// links:
    ///   - name: shopping-cart runbook
    ///     type: runbook
    ///     url: https://runbook/shopping-cart
    /// tags:
    ///   - business-unit:retail
    ///   - cost-center:engineering
    /// integrations:
    ///   pagerduty: https://www.pagerduty.com/service-directory/Pshopping-cart
    /// extensions:
    ///   datadoghq.com/shopping-cart:
    ///     customField: customValue
    /// 
    /// ",
    ///     });
    /// 
    ///     // Service Definition with backstage.io Schema
    ///     var serviceDefinitionBackstage = new Datadog.ServiceDefinitionYaml("serviceDefinitionBackstage", new()
    ///     {
    ///         ServiceDefinition = @"apiVersion: backstage.io/v1alpha1
    /// kind: Component
    /// metadata:
    ///   annotations:
    ///     backstage.io/techdocs-ref: http://a/b/c
    ///     some.annotation: value
    ///   namespace: default
    ///   name: shopping-cart
    ///   title: Shopping Cart
    ///   description: A shopping cart service
    ///   tags: [""taga:valuea"", ""tagb:valueb""]
    ///   links:
    ///     - title: Wiki
    ///       url: https://wiki/shopping-cart
    ///       icon: help
    ///   ignore-attribute:
    ///     id: 1
    ///     value: ""value""
    /// spec:
    ///   type: service
    ///   lifecycle: production
    ///   owner: e-commerce
    ///   system: retail
    /// 
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import datadog:index/serviceDefinitionYaml:ServiceDefinitionYaml service_definition "&lt;dd-service&gt;"
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/serviceDefinitionYaml:ServiceDefinitionYaml")]
    public partial class ServiceDefinitionYaml : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The YAML/JSON formatted definition of the service
        /// </summary>
        [Output("serviceDefinition")]
        public Output<string> ServiceDefinition { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceDefinitionYaml resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceDefinitionYaml(string name, ServiceDefinitionYamlArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/serviceDefinitionYaml:ServiceDefinitionYaml", name, args ?? new ServiceDefinitionYamlArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceDefinitionYaml(string name, Input<string> id, ServiceDefinitionYamlState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/serviceDefinitionYaml:ServiceDefinitionYaml", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceDefinitionYaml resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceDefinitionYaml Get(string name, Input<string> id, ServiceDefinitionYamlState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceDefinitionYaml(name, id, state, options);
        }
    }

    public sealed class ServiceDefinitionYamlArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The YAML/JSON formatted definition of the service
        /// </summary>
        [Input("serviceDefinition", required: true)]
        public Input<string> ServiceDefinition { get; set; } = null!;

        public ServiceDefinitionYamlArgs()
        {
        }
        public static new ServiceDefinitionYamlArgs Empty => new ServiceDefinitionYamlArgs();
    }

    public sealed class ServiceDefinitionYamlState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The YAML/JSON formatted definition of the service
        /// </summary>
        [Input("serviceDefinition")]
        public Input<string>? ServiceDefinition { get; set; }

        public ServiceDefinitionYamlState()
        {
        }
        public static new ServiceDefinitionYamlState Empty => new ServiceDefinitionYamlState();
    }
}
