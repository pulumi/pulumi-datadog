// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    public static class GetUser
    {
        /// <summary>
        /// Use this data source to retrieve information about an existing user to use it in an other resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Datadog = Pulumi.Datadog;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Datadog.GetUser.Invoke(new()
        ///     {
        ///         Filter = "user.name@company.com",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(GetUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("datadog:index/getUser:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about an existing user to use it in an other resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Datadog = Pulumi.Datadog;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Datadog.GetUser.Invoke(new()
        ///     {
        ///         Filter = "user.name@company.com",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("datadog:index/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about an existing user to use it in an other resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Datadog = Pulumi.Datadog;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Datadog.GetUser.Invoke(new()
        ///     {
        ///         Filter = "user.name@company.com",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("datadog:index/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// When true, `filter` string is exact matched against the user's `email`, followed by `name` attribute. Defaults to `false`.
        /// </summary>
        [Input("exactMatch")]
        public bool? ExactMatch { get; set; }

        /// <summary>
        /// Filter all users by the given string.
        /// </summary>
        [Input("filter", required: true)]
        public string Filter { get; set; } = null!;

        public GetUserArgs()
        {
        }
        public static new GetUserArgs Empty => new GetUserArgs();
    }

    public sealed class GetUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// When true, `filter` string is exact matched against the user's `email`, followed by `name` attribute. Defaults to `false`.
        /// </summary>
        [Input("exactMatch")]
        public Input<bool>? ExactMatch { get; set; }

        /// <summary>
        /// Filter all users by the given string.
        /// </summary>
        [Input("filter", required: true)]
        public Input<string> Filter { get; set; } = null!;

        public GetUserInvokeArgs()
        {
        }
        public static new GetUserInvokeArgs Empty => new GetUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserResult
    {
        /// <summary>
        /// The time when the user was created (RFC3339 format).
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Indicates whether the user is disabled.
        /// </summary>
        public readonly bool Disabled;
        /// <summary>
        /// Email of the user.
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// When true, `filter` string is exact matched against the user's `email`, followed by `name` attribute. Defaults to `false`.
        /// </summary>
        public readonly bool? ExactMatch;
        /// <summary>
        /// Filter all users by the given string.
        /// </summary>
        public readonly string Filter;
        /// <summary>
        /// The user's handle.
        /// </summary>
        public readonly string Handle;
        /// <summary>
        /// The URL where the user's icon is located.
        /// </summary>
        public readonly string Icon;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether the user has enabled MFA.
        /// </summary>
        public readonly bool MfaEnabled;
        /// <summary>
        /// The time at which the user was last updated (RFC3339 format).
        /// </summary>
        public readonly string ModifiedAt;
        /// <summary>
        /// Name of the user.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Indicates whether the user is a service account.
        /// </summary>
        public readonly bool ServiceAccount;
        /// <summary>
        /// The user's status.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The user's title.
        /// </summary>
        public readonly string Title;
        /// <summary>
        /// Indicates whether the user is verified.
        /// </summary>
        public readonly bool Verified;

        [OutputConstructor]
        private GetUserResult(
            string createdAt,

            bool disabled,

            string email,

            bool? exactMatch,

            string filter,

            string handle,

            string icon,

            string id,

            bool mfaEnabled,

            string modifiedAt,

            string name,

            bool serviceAccount,

            string status,

            string title,

            bool verified)
        {
            CreatedAt = createdAt;
            Disabled = disabled;
            Email = email;
            ExactMatch = exactMatch;
            Filter = filter;
            Handle = handle;
            Icon = icon;
            Id = id;
            MfaEnabled = mfaEnabled;
            ModifiedAt = modifiedAt;
            Name = name;
            ServiceAccount = serviceAccount;
            Status = status;
            Title = title;
            Verified = verified;
        }
    }
}
