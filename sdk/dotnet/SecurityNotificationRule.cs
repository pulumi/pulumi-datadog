// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog Security Monitoring Notification Rule API resource for creating and managing Datadog security notification rules.
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/securityNotificationRule:SecurityNotificationRule signal_rule yq9-t9l-bso
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/securityNotificationRule:SecurityNotificationRule")]
    public partial class SecurityNotificationRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates when this rule was created.
        /// </summary>
        [Output("createdAt")]
        public Output<int> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The handle of the rule creator.
        /// </summary>
        [Output("createdByHandle")]
        public Output<string> CreatedByHandle { get; private set; } = null!;

        /// <summary>
        /// The name of the rule creator.
        /// </summary>
        [Output("createdByName")]
        public Output<string> CreatedByName { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the rule is enabled. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Indicates when this rule was last modified.
        /// </summary>
        [Output("modifiedAt")]
        public Output<int> ModifiedAt { get; private set; } = null!;

        /// <summary>
        /// The handle of the rule last modifier.
        /// </summary>
        [Output("modifiedByHandle")]
        public Output<string> ModifiedByHandle { get; private set; } = null!;

        /// <summary>
        /// The name of the rule last modifier.
        /// </summary>
        [Output("modifiedByName")]
        public Output<string> ModifiedByName { get; private set; } = null!;

        /// <summary>
        /// The name of the rule (must be unique).
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Defines selectors to filter security issues that generate notifications.
        /// </summary>
        [Output("selectors")]
        public Output<Outputs.SecurityNotificationRuleSelectors?> Selectors { get; private set; } = null!;

        /// <summary>
        /// The list of handle targets for the notifications. A target must be prefixed with an @. It can be an email address (@bob@email.com), or any installed integration. For example, a Slack recipient (@slack-ops), or a Teams recipient (@teams-ops).
        /// </summary>
        [Output("targets")]
        public Output<ImmutableArray<string>> Targets { get; private set; } = null!;

        /// <summary>
        /// Specifies the time period, in seconds, used to aggregate the notification. Defaults to `0`.
        /// </summary>
        [Output("timeAggregation")]
        public Output<int> TimeAggregation { get; private set; } = null!;

        /// <summary>
        /// The rule version (incremented at each update).
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityNotificationRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityNotificationRule(string name, SecurityNotificationRuleArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/securityNotificationRule:SecurityNotificationRule", name, args ?? new SecurityNotificationRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecurityNotificationRule(string name, Input<string> id, SecurityNotificationRuleState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/securityNotificationRule:SecurityNotificationRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityNotificationRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityNotificationRule Get(string name, Input<string> id, SecurityNotificationRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityNotificationRule(name, id, state, options);
        }
    }

    public sealed class SecurityNotificationRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether the rule is enabled. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name of the rule (must be unique).
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Defines selectors to filter security issues that generate notifications.
        /// </summary>
        [Input("selectors")]
        public Input<Inputs.SecurityNotificationRuleSelectorsArgs>? Selectors { get; set; }

        [Input("targets", required: true)]
        private InputList<string>? _targets;

        /// <summary>
        /// The list of handle targets for the notifications. A target must be prefixed with an @. It can be an email address (@bob@email.com), or any installed integration. For example, a Slack recipient (@slack-ops), or a Teams recipient (@teams-ops).
        /// </summary>
        public InputList<string> Targets
        {
            get => _targets ?? (_targets = new InputList<string>());
            set => _targets = value;
        }

        /// <summary>
        /// Specifies the time period, in seconds, used to aggregate the notification. Defaults to `0`.
        /// </summary>
        [Input("timeAggregation")]
        public Input<int>? TimeAggregation { get; set; }

        public SecurityNotificationRuleArgs()
        {
        }
        public static new SecurityNotificationRuleArgs Empty => new SecurityNotificationRuleArgs();
    }

    public sealed class SecurityNotificationRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates when this rule was created.
        /// </summary>
        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        /// <summary>
        /// The handle of the rule creator.
        /// </summary>
        [Input("createdByHandle")]
        public Input<string>? CreatedByHandle { get; set; }

        /// <summary>
        /// The name of the rule creator.
        /// </summary>
        [Input("createdByName")]
        public Input<string>? CreatedByName { get; set; }

        /// <summary>
        /// Indicates whether the rule is enabled. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Indicates when this rule was last modified.
        /// </summary>
        [Input("modifiedAt")]
        public Input<int>? ModifiedAt { get; set; }

        /// <summary>
        /// The handle of the rule last modifier.
        /// </summary>
        [Input("modifiedByHandle")]
        public Input<string>? ModifiedByHandle { get; set; }

        /// <summary>
        /// The name of the rule last modifier.
        /// </summary>
        [Input("modifiedByName")]
        public Input<string>? ModifiedByName { get; set; }

        /// <summary>
        /// The name of the rule (must be unique).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Defines selectors to filter security issues that generate notifications.
        /// </summary>
        [Input("selectors")]
        public Input<Inputs.SecurityNotificationRuleSelectorsGetArgs>? Selectors { get; set; }

        [Input("targets")]
        private InputList<string>? _targets;

        /// <summary>
        /// The list of handle targets for the notifications. A target must be prefixed with an @. It can be an email address (@bob@email.com), or any installed integration. For example, a Slack recipient (@slack-ops), or a Teams recipient (@teams-ops).
        /// </summary>
        public InputList<string> Targets
        {
            get => _targets ?? (_targets = new InputList<string>());
            set => _targets = value;
        }

        /// <summary>
        /// Specifies the time period, in seconds, used to aggregate the notification. Defaults to `0`.
        /// </summary>
        [Input("timeAggregation")]
        public Input<int>? TimeAggregation { get; set; }

        /// <summary>
        /// The rule version (incremented at each update).
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public SecurityNotificationRuleState()
        {
        }
        public static new SecurityNotificationRuleState Empty => new SecurityNotificationRuleState();
    }
}
