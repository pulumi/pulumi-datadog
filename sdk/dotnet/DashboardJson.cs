// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog dashboard JSON resource. This can be used to create and manage Datadog dashboards using the JSON definition.
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import datadog:index/dashboardJson:DashboardJson my_service_dashboard sv7-gyh-kas
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/dashboardJson:DashboardJson")]
    public partial class DashboardJson : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The JSON formatted definition of the Dashboard.
        /// </summary>
        [Output("dashboard")]
        public Output<string> Dashboard { get; private set; } = null!;

        /// <summary>
        /// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
        /// dashboard lists using Terraform as it causes inconsistent behavior.
        /// </summary>
        [Output("dashboardLists")]
        public Output<ImmutableArray<int>> DashboardLists { get; private set; } = null!;

        /// <summary>
        /// The list of dashboard lists this dashboard should be removed from. Internal only.
        /// </summary>
        [Output("dashboardListsRemoveds")]
        public Output<ImmutableArray<int>> DashboardListsRemoveds { get; private set; } = null!;

        /// <summary>
        /// The URL of the dashboard.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a DashboardJson resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DashboardJson(string name, DashboardJsonArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/dashboardJson:DashboardJson", name, args ?? new DashboardJsonArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DashboardJson(string name, Input<string> id, DashboardJsonState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/dashboardJson:DashboardJson", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DashboardJson resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DashboardJson Get(string name, Input<string> id, DashboardJsonState? state = null, CustomResourceOptions? options = null)
        {
            return new DashboardJson(name, id, state, options);
        }
    }

    public sealed class DashboardJsonArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The JSON formatted definition of the Dashboard.
        /// </summary>
        [Input("dashboard", required: true)]
        public Input<string> Dashboard { get; set; } = null!;

        [Input("dashboardLists")]
        private InputList<int>? _dashboardLists;

        /// <summary>
        /// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
        /// dashboard lists using Terraform as it causes inconsistent behavior.
        /// </summary>
        public InputList<int> DashboardLists
        {
            get => _dashboardLists ?? (_dashboardLists = new InputList<int>());
            set => _dashboardLists = value;
        }

        /// <summary>
        /// The URL of the dashboard.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public DashboardJsonArgs()
        {
        }
        public static new DashboardJsonArgs Empty => new DashboardJsonArgs();
    }

    public sealed class DashboardJsonState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The JSON formatted definition of the Dashboard.
        /// </summary>
        [Input("dashboard")]
        public Input<string>? Dashboard { get; set; }

        [Input("dashboardLists")]
        private InputList<int>? _dashboardLists;

        /// <summary>
        /// A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
        /// dashboard lists using Terraform as it causes inconsistent behavior.
        /// </summary>
        public InputList<int> DashboardLists
        {
            get => _dashboardLists ?? (_dashboardLists = new InputList<int>());
            set => _dashboardLists = value;
        }

        [Input("dashboardListsRemoveds")]
        private InputList<int>? _dashboardListsRemoveds;

        /// <summary>
        /// The list of dashboard lists this dashboard should be removed from. Internal only.
        /// </summary>
        public InputList<int> DashboardListsRemoveds
        {
            get => _dashboardListsRemoveds ?? (_dashboardListsRemoveds = new InputList<int>());
            set => _dashboardListsRemoveds = value;
        }

        /// <summary>
        /// The URL of the dashboard.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public DashboardJsonState()
        {
        }
        public static new DashboardJsonState Empty => new DashboardJsonState();
    }
}
