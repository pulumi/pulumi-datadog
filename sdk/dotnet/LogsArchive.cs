// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog [Logs Archive API](https://docs.datadoghq.com/api/v2/logs-archives/) resource, which is used to create and manage Datadog logs archives.
    /// 
    /// ## Example Usage
    /// 
    /// Create a Datadog logs archive:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var myS3Archive = new Datadog.LogsArchive("myS3Archive", new Datadog.LogsArchiveArgs
    ///         {
    ///             Name = "my s3 archive",
    ///             Query = "service:myservice",
    ///             S3 = new Datadog.Inputs.LogsArchiveS3Args
    ///             {
    ///                 Account_id = "001234567888",
    ///                 Bucket = "my-bucket",
    ///                 Path = "/path/foo",
    ///                 Role_name = "my-role-name",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class LogsArchive : Pulumi.CustomResource
    {
        /// <summary>
        /// Definition of an azure archive.
        /// </summary>
        [Output("azure")]
        public Output<Outputs.LogsArchiveAzure?> Azure { get; private set; } = null!;

        /// <summary>
        /// Definition of an gcs archive.
        /// </summary>
        [Output("gcs")]
        public Output<Outputs.LogsArchiveGcs?> Gcs { get; private set; } = null!;

        /// <summary>
        /// Your archive name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The archive query/filter. Logs matching this query are included in the archive.
        /// </summary>
        [Output("query")]
        public Output<string> Query { get; private set; } = null!;

        /// <summary>
        /// Definition of an s3 archive.
        /// </summary>
        [Output("s3")]
        public Output<Outputs.LogsArchiveS3?> S3 { get; private set; } = null!;


        /// <summary>
        /// Create a LogsArchive resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogsArchive(string name, LogsArchiveArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/logsArchive:LogsArchive", name, args ?? new LogsArchiveArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogsArchive(string name, Input<string> id, LogsArchiveState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/logsArchive:LogsArchive", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogsArchive resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogsArchive Get(string name, Input<string> id, LogsArchiveState? state = null, CustomResourceOptions? options = null)
        {
            return new LogsArchive(name, id, state, options);
        }
    }

    public sealed class LogsArchiveArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Definition of an azure archive.
        /// </summary>
        [Input("azure")]
        public Input<Inputs.LogsArchiveAzureArgs>? Azure { get; set; }

        /// <summary>
        /// Definition of an gcs archive.
        /// </summary>
        [Input("gcs")]
        public Input<Inputs.LogsArchiveGcsArgs>? Gcs { get; set; }

        /// <summary>
        /// Your archive name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The archive query/filter. Logs matching this query are included in the archive.
        /// </summary>
        [Input("query", required: true)]
        public Input<string> Query { get; set; } = null!;

        /// <summary>
        /// Definition of an s3 archive.
        /// </summary>
        [Input("s3")]
        public Input<Inputs.LogsArchiveS3Args>? S3 { get; set; }

        public LogsArchiveArgs()
        {
        }
    }

    public sealed class LogsArchiveState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Definition of an azure archive.
        /// </summary>
        [Input("azure")]
        public Input<Inputs.LogsArchiveAzureGetArgs>? Azure { get; set; }

        /// <summary>
        /// Definition of an gcs archive.
        /// </summary>
        [Input("gcs")]
        public Input<Inputs.LogsArchiveGcsGetArgs>? Gcs { get; set; }

        /// <summary>
        /// Your archive name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The archive query/filter. Logs matching this query are included in the archive.
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        /// <summary>
        /// Definition of an s3 archive.
        /// </summary>
        [Input("s3")]
        public Input<Inputs.LogsArchiveS3GetArgs>? S3 { get; set; }

        public LogsArchiveState()
        {
        }
    }
}
