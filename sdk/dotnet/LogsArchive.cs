// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog Logs Archive API resource, which is used to create and manage Datadog logs archives.
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import datadog:index/logsArchive:LogsArchive my_s3_archive 1Aabc2_dfQPLnXy3HlfK4hi
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/logsArchive:LogsArchive")]
    public partial class LogsArchive : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Definition of an azure archive.
        /// </summary>
        [Output("azureArchive")]
        public Output<Outputs.LogsArchiveAzureArchive?> AzureArchive { get; private set; } = null!;

        /// <summary>
        /// Definition of a GCS archive.
        /// </summary>
        [Output("gcsArchive")]
        public Output<Outputs.LogsArchiveGcsArchive?> GcsArchive { get; private set; } = null!;

        /// <summary>
        /// To store the tags in the archive, set the value `true`. If it is set to `false`, the tags will be dropped when the logs are sent to the archive.
        /// </summary>
        [Output("includeTags")]
        public Output<bool?> IncludeTags { get; private set; } = null!;

        /// <summary>
        /// Your archive name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The archive query/filter. Logs matching this query are included in the archive.
        /// </summary>
        [Output("query")]
        public Output<string> Query { get; private set; } = null!;

        /// <summary>
        /// To limit the rehydration scan size for the archive, set a value in GB.
        /// </summary>
        [Output("rehydrationMaxScanSizeInGb")]
        public Output<int?> RehydrationMaxScanSizeInGb { get; private set; } = null!;

        /// <summary>
        /// An array of tags to add to rehydrated logs from an archive.
        /// </summary>
        [Output("rehydrationTags")]
        public Output<ImmutableArray<string>> RehydrationTags { get; private set; } = null!;

        /// <summary>
        /// Definition of an s3 archive.
        /// </summary>
        [Output("s3Archive")]
        public Output<Outputs.LogsArchiveS3Archive?> S3Archive { get; private set; } = null!;


        /// <summary>
        /// Create a LogsArchive resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogsArchive(string name, LogsArchiveArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/logsArchive:LogsArchive", name, args ?? new LogsArchiveArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogsArchive(string name, Input<string> id, LogsArchiveState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/logsArchive:LogsArchive", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogsArchive resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogsArchive Get(string name, Input<string> id, LogsArchiveState? state = null, CustomResourceOptions? options = null)
        {
            return new LogsArchive(name, id, state, options);
        }
    }

    public sealed class LogsArchiveArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Definition of an azure archive.
        /// </summary>
        [Input("azureArchive")]
        public Input<Inputs.LogsArchiveAzureArchiveArgs>? AzureArchive { get; set; }

        /// <summary>
        /// Definition of a GCS archive.
        /// </summary>
        [Input("gcsArchive")]
        public Input<Inputs.LogsArchiveGcsArchiveArgs>? GcsArchive { get; set; }

        /// <summary>
        /// To store the tags in the archive, set the value `true`. If it is set to `false`, the tags will be dropped when the logs are sent to the archive.
        /// </summary>
        [Input("includeTags")]
        public Input<bool>? IncludeTags { get; set; }

        /// <summary>
        /// Your archive name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The archive query/filter. Logs matching this query are included in the archive.
        /// </summary>
        [Input("query", required: true)]
        public Input<string> Query { get; set; } = null!;

        /// <summary>
        /// To limit the rehydration scan size for the archive, set a value in GB.
        /// </summary>
        [Input("rehydrationMaxScanSizeInGb")]
        public Input<int>? RehydrationMaxScanSizeInGb { get; set; }

        [Input("rehydrationTags")]
        private InputList<string>? _rehydrationTags;

        /// <summary>
        /// An array of tags to add to rehydrated logs from an archive.
        /// </summary>
        public InputList<string> RehydrationTags
        {
            get => _rehydrationTags ?? (_rehydrationTags = new InputList<string>());
            set => _rehydrationTags = value;
        }

        /// <summary>
        /// Definition of an s3 archive.
        /// </summary>
        [Input("s3Archive")]
        public Input<Inputs.LogsArchiveS3ArchiveArgs>? S3Archive { get; set; }

        public LogsArchiveArgs()
        {
        }
        public static new LogsArchiveArgs Empty => new LogsArchiveArgs();
    }

    public sealed class LogsArchiveState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Definition of an azure archive.
        /// </summary>
        [Input("azureArchive")]
        public Input<Inputs.LogsArchiveAzureArchiveGetArgs>? AzureArchive { get; set; }

        /// <summary>
        /// Definition of a GCS archive.
        /// </summary>
        [Input("gcsArchive")]
        public Input<Inputs.LogsArchiveGcsArchiveGetArgs>? GcsArchive { get; set; }

        /// <summary>
        /// To store the tags in the archive, set the value `true`. If it is set to `false`, the tags will be dropped when the logs are sent to the archive.
        /// </summary>
        [Input("includeTags")]
        public Input<bool>? IncludeTags { get; set; }

        /// <summary>
        /// Your archive name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The archive query/filter. Logs matching this query are included in the archive.
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        /// <summary>
        /// To limit the rehydration scan size for the archive, set a value in GB.
        /// </summary>
        [Input("rehydrationMaxScanSizeInGb")]
        public Input<int>? RehydrationMaxScanSizeInGb { get; set; }

        [Input("rehydrationTags")]
        private InputList<string>? _rehydrationTags;

        /// <summary>
        /// An array of tags to add to rehydrated logs from an archive.
        /// </summary>
        public InputList<string> RehydrationTags
        {
            get => _rehydrationTags ?? (_rehydrationTags = new InputList<string>());
            set => _rehydrationTags = value;
        }

        /// <summary>
        /// Definition of an s3 archive.
        /// </summary>
        [Input("s3Archive")]
        public Input<Inputs.LogsArchiveS3ArchiveGetArgs>? S3Archive { get; set; }

        public LogsArchiveState()
        {
        }
        public static new LogsArchiveState Empty => new LogsArchiveState();
    }
}
