// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    public static class GetDashboardList
    {
        /// <summary>
        /// Use this data source to retrieve information about an existing dashboard list, for use in other resources. In particular, it can be used in a dashboard to register it in the list.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Datadog = Pulumi.Datadog;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Datadog.GetDashboardList.Invoke(new()
        ///     {
        ///         Name = "My super list",
        ///     });
        /// 
        ///     // Create a dashboard and register it in the list above.
        ///     var time = new Datadog.Dashboard("time", new()
        ///     {
        ///         Title = "TF Test Layout Dashboard",
        ///         Description = "Created using the Datadog provider in Pulumi",
        ///         DashboardLists = new[]
        ///         {
        ///             test.Apply(getDashboardListResult =&gt; getDashboardListResult.Id),
        ///         },
        ///         LayoutType = "ordered",
        ///         IsReadOnly = true,
        ///         Widgets = new[]
        ///         {
        ///             new Datadog.Inputs.DashboardWidgetArgs
        ///             {
        ///                 AlertGraphDefinition = new Datadog.Inputs.DashboardWidgetAlertGraphDefinitionArgs
        ///                 {
        ///                     AlertId = "1234",
        ///                     VizType = "timeseries",
        ///                     Title = "Widget Title",
        ///                     LiveSpan = "1h",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetDashboardListResult> InvokeAsync(GetDashboardListArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDashboardListResult>("datadog:index/getDashboardList:getDashboardList", args ?? new GetDashboardListArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about an existing dashboard list, for use in other resources. In particular, it can be used in a dashboard to register it in the list.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Datadog = Pulumi.Datadog;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Datadog.GetDashboardList.Invoke(new()
        ///     {
        ///         Name = "My super list",
        ///     });
        /// 
        ///     // Create a dashboard and register it in the list above.
        ///     var time = new Datadog.Dashboard("time", new()
        ///     {
        ///         Title = "TF Test Layout Dashboard",
        ///         Description = "Created using the Datadog provider in Pulumi",
        ///         DashboardLists = new[]
        ///         {
        ///             test.Apply(getDashboardListResult =&gt; getDashboardListResult.Id),
        ///         },
        ///         LayoutType = "ordered",
        ///         IsReadOnly = true,
        ///         Widgets = new[]
        ///         {
        ///             new Datadog.Inputs.DashboardWidgetArgs
        ///             {
        ///                 AlertGraphDefinition = new Datadog.Inputs.DashboardWidgetAlertGraphDefinitionArgs
        ///                 {
        ///                     AlertId = "1234",
        ///                     VizType = "timeseries",
        ///                     Title = "Widget Title",
        ///                     LiveSpan = "1h",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetDashboardListResult> Invoke(GetDashboardListInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDashboardListResult>("datadog:index/getDashboardList:getDashboardList", args ?? new GetDashboardListInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDashboardListArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A dashboard list name to limit the search.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetDashboardListArgs()
        {
        }
        public static new GetDashboardListArgs Empty => new GetDashboardListArgs();
    }

    public sealed class GetDashboardListInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A dashboard list name to limit the search.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetDashboardListInvokeArgs()
        {
        }
        public static new GetDashboardListInvokeArgs Empty => new GetDashboardListInvokeArgs();
    }


    [OutputType]
    public sealed class GetDashboardListResult
    {
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A dashboard list name to limit the search.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetDashboardListResult(
            string id,

            string name)
        {
            Id = id;
            Name = name;
        }
    }
}
