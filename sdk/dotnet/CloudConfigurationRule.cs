// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog Cloud Configuration Rule resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myrule = new Datadog.CloudConfigurationRule("myrule", new()
    ///     {
    ///         Enabled = true,
    ///         GroupBies = new[]
    ///         {
    ///             "@resource",
    ///         },
    ///         Message = "Rule has triggered",
    ///         Name = "My cloud configuration rule",
    ///         Notifications = new[]
    ///         {
    ///             "@channel",
    ///         },
    ///         Policy = @"        package datadog
    /// 
    ///         import data.datadog.output as dd_output
    /// 
    ///         import future.keywords.contains
    ///         import future.keywords.if
    ///         import future.keywords.in
    /// 
    ///         eval(resource) = ""skip"" if {
    ///             # Logic that evaluates to true if the resource should be skipped
    ///             true
    ///         } else = ""pass"" {
    ///             # Logic that evaluates to true if the resource is compliant
    ///             true
    ///         } else = ""fail"" {
    ///             # Logic that evaluates to true if the resource is not compliant
    ///             true
    ///         }
    /// 
    ///         # This part remains unchanged for all rules
    ///         results contains result if {
    ///             some resource in input.resources[input.main_resource_type]
    ///             result := dd_output.format(resource, eval(resource))
    ///         }
    /// 
    /// ",
    ///         RelatedResourceTypes = new[] {},
    ///         ResourceType = "aws_s3_bucket",
    ///         Severity = "high",
    ///         Tags = new[]
    ///         {
    ///             "some:tag",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Security monitoring rules can be imported using ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import datadog:index/cloudConfigurationRule:CloudConfigurationRule my_rule m0o-hto-lkb
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/cloudConfigurationRule:CloudConfigurationRule")]
    public partial class CloudConfigurationRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the cloud configuration rule is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Additional queries to filter matched events before they are processed. Defaults to empty list
        /// </summary>
        [Output("filters")]
        public Output<ImmutableArray<Outputs.CloudConfigurationRuleFilter>> Filters { get; private set; } = null!;

        /// <summary>
        /// Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
        /// </summary>
        [Output("groupBies")]
        public Output<ImmutableArray<string>> GroupBies { get; private set; } = null!;

        /// <summary>
        /// The message associated to the rule that will be shown in findings and signals.
        /// </summary>
        [Output("message")]
        public Output<string> Message { get; private set; } = null!;

        /// <summary>
        /// The name of the cloud configuration rule.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Notification targets for signals. Defaults to empty list.
        /// </summary>
        [Output("notifications")]
        public Output<ImmutableArray<string>> Notifications { get; private set; } = null!;

        /// <summary>
        /// Policy written in Rego format.
        /// </summary>
        [Output("policy")]
        public Output<string> Policy { get; private set; } = null!;

        /// <summary>
        /// Related resource types to be checked by the rule. Defaults to empty list.
        /// </summary>
        [Output("relatedResourceTypes")]
        public Output<ImmutableArray<string>> RelatedResourceTypes { get; private set; } = null!;

        /// <summary>
        /// Main resource type to be checked by the rule.
        /// </summary>
        [Output("resourceType")]
        public Output<string> ResourceType { get; private set; } = null!;

        /// <summary>
        /// Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
        /// </summary>
        [Output("severity")]
        public Output<string> Severity { get; private set; } = null!;

        /// <summary>
        /// Tags of the rule, propagated to findings and signals. Defaults to empty list.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a CloudConfigurationRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CloudConfigurationRule(string name, CloudConfigurationRuleArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/cloudConfigurationRule:CloudConfigurationRule", name, args ?? new CloudConfigurationRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CloudConfigurationRule(string name, Input<string> id, CloudConfigurationRuleState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/cloudConfigurationRule:CloudConfigurationRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CloudConfigurationRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CloudConfigurationRule Get(string name, Input<string> id, CloudConfigurationRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new CloudConfigurationRule(name, id, state, options);
        }
    }

    public sealed class CloudConfigurationRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the cloud configuration rule is enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.CloudConfigurationRuleFilterArgs>? _filters;

        /// <summary>
        /// Additional queries to filter matched events before they are processed. Defaults to empty list
        /// </summary>
        public InputList<Inputs.CloudConfigurationRuleFilterArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.CloudConfigurationRuleFilterArgs>());
            set => _filters = value;
        }

        [Input("groupBies")]
        private InputList<string>? _groupBies;

        /// <summary>
        /// Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
        /// </summary>
        public InputList<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<string>());
            set => _groupBies = value;
        }

        /// <summary>
        /// The message associated to the rule that will be shown in findings and signals.
        /// </summary>
        [Input("message", required: true)]
        public Input<string> Message { get; set; } = null!;

        /// <summary>
        /// The name of the cloud configuration rule.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("notifications")]
        private InputList<string>? _notifications;

        /// <summary>
        /// Notification targets for signals. Defaults to empty list.
        /// </summary>
        public InputList<string> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<string>());
            set => _notifications = value;
        }

        /// <summary>
        /// Policy written in Rego format.
        /// </summary>
        [Input("policy", required: true)]
        public Input<string> Policy { get; set; } = null!;

        [Input("relatedResourceTypes")]
        private InputList<string>? _relatedResourceTypes;

        /// <summary>
        /// Related resource types to be checked by the rule. Defaults to empty list.
        /// </summary>
        public InputList<string> RelatedResourceTypes
        {
            get => _relatedResourceTypes ?? (_relatedResourceTypes = new InputList<string>());
            set => _relatedResourceTypes = value;
        }

        /// <summary>
        /// Main resource type to be checked by the rule.
        /// </summary>
        [Input("resourceType", required: true)]
        public Input<string> ResourceType { get; set; } = null!;

        /// <summary>
        /// Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
        /// </summary>
        [Input("severity", required: true)]
        public Input<string> Severity { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags of the rule, propagated to findings and signals. Defaults to empty list.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public CloudConfigurationRuleArgs()
        {
        }
        public static new CloudConfigurationRuleArgs Empty => new CloudConfigurationRuleArgs();
    }

    public sealed class CloudConfigurationRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the cloud configuration rule is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("filters")]
        private InputList<Inputs.CloudConfigurationRuleFilterGetArgs>? _filters;

        /// <summary>
        /// Additional queries to filter matched events before they are processed. Defaults to empty list
        /// </summary>
        public InputList<Inputs.CloudConfigurationRuleFilterGetArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.CloudConfigurationRuleFilterGetArgs>());
            set => _filters = value;
        }

        [Input("groupBies")]
        private InputList<string>? _groupBies;

        /// <summary>
        /// Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
        /// </summary>
        public InputList<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<string>());
            set => _groupBies = value;
        }

        /// <summary>
        /// The message associated to the rule that will be shown in findings and signals.
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// The name of the cloud configuration rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications")]
        private InputList<string>? _notifications;

        /// <summary>
        /// Notification targets for signals. Defaults to empty list.
        /// </summary>
        public InputList<string> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<string>());
            set => _notifications = value;
        }

        /// <summary>
        /// Policy written in Rego format.
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        [Input("relatedResourceTypes")]
        private InputList<string>? _relatedResourceTypes;

        /// <summary>
        /// Related resource types to be checked by the rule. Defaults to empty list.
        /// </summary>
        public InputList<string> RelatedResourceTypes
        {
            get => _relatedResourceTypes ?? (_relatedResourceTypes = new InputList<string>());
            set => _relatedResourceTypes = value;
        }

        /// <summary>
        /// Main resource type to be checked by the rule.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        /// <summary>
        /// Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
        /// </summary>
        [Input("severity")]
        public Input<string>? Severity { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags of the rule, propagated to findings and signals. Defaults to empty list.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public CloudConfigurationRuleState()
        {
        }
        public static new CloudConfigurationRuleState Empty => new CloudConfigurationRuleState();
    }
}
