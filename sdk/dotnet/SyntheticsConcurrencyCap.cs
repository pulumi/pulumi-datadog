// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog Synthetics On Demand Concurrency Cap API resource. This can be used to manage the Concurrency Cap for Synthetic tests.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Example Usage (Synthetics Concurrency Cap Configuration)
    ///     var @this = new Datadog.SyntheticsConcurrencyCap("this", new()
    ///     {
    ///         OnDemandConcurrencyCap = 1,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The Synthetics concurrency cap can be imported. &lt;name&gt; can be whatever you specify in your code. Datadog does not store the name on the server.
    /// 
    /// ```sh
    ///  $ pulumi import datadog:index/syntheticsConcurrencyCap:SyntheticsConcurrencyCap this &lt;name&gt;
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/syntheticsConcurrencyCap:SyntheticsConcurrencyCap")]
    public partial class SyntheticsConcurrencyCap : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Value of the on-demand concurrency cap, customizing the number of Synthetic tests run in parallel.
        /// </summary>
        [Output("onDemandConcurrencyCap")]
        public Output<int> OnDemandConcurrencyCap { get; private set; } = null!;


        /// <summary>
        /// Create a SyntheticsConcurrencyCap resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SyntheticsConcurrencyCap(string name, SyntheticsConcurrencyCapArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/syntheticsConcurrencyCap:SyntheticsConcurrencyCap", name, args ?? new SyntheticsConcurrencyCapArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SyntheticsConcurrencyCap(string name, Input<string> id, SyntheticsConcurrencyCapState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/syntheticsConcurrencyCap:SyntheticsConcurrencyCap", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SyntheticsConcurrencyCap resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SyntheticsConcurrencyCap Get(string name, Input<string> id, SyntheticsConcurrencyCapState? state = null, CustomResourceOptions? options = null)
        {
            return new SyntheticsConcurrencyCap(name, id, state, options);
        }
    }

    public sealed class SyntheticsConcurrencyCapArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Value of the on-demand concurrency cap, customizing the number of Synthetic tests run in parallel.
        /// </summary>
        [Input("onDemandConcurrencyCap", required: true)]
        public Input<int> OnDemandConcurrencyCap { get; set; } = null!;

        public SyntheticsConcurrencyCapArgs()
        {
        }
        public static new SyntheticsConcurrencyCapArgs Empty => new SyntheticsConcurrencyCapArgs();
    }

    public sealed class SyntheticsConcurrencyCapState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Value of the on-demand concurrency cap, customizing the number of Synthetic tests run in parallel.
        /// </summary>
        [Input("onDemandConcurrencyCap")]
        public Input<int>? OnDemandConcurrencyCap { get; set; }

        public SyntheticsConcurrencyCapState()
        {
        }
        public static new SyntheticsConcurrencyCapState Empty => new SyntheticsConcurrencyCapState();
    }
}
