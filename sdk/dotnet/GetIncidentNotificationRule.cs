// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    public static class GetIncidentNotificationRule
    {
        /// <summary>
        /// Use this data source to retrieve information about an existing incident notification rule.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Datadog = Pulumi.Datadog;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Datadog.GetIncidentNotificationRule.Invoke(new()
        ///     {
        ///         Id = "00000000-0000-0000-0000-000000000000",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetIncidentNotificationRuleResult> InvokeAsync(GetIncidentNotificationRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIncidentNotificationRuleResult>("datadog:index/getIncidentNotificationRule:getIncidentNotificationRule", args ?? new GetIncidentNotificationRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about an existing incident notification rule.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Datadog = Pulumi.Datadog;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Datadog.GetIncidentNotificationRule.Invoke(new()
        ///     {
        ///         Id = "00000000-0000-0000-0000-000000000000",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetIncidentNotificationRuleResult> Invoke(GetIncidentNotificationRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIncidentNotificationRuleResult>("datadog:index/getIncidentNotificationRule:getIncidentNotificationRule", args ?? new GetIncidentNotificationRuleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about an existing incident notification rule.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Datadog = Pulumi.Datadog;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Datadog.GetIncidentNotificationRule.Invoke(new()
        ///     {
        ///         Id = "00000000-0000-0000-0000-000000000000",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetIncidentNotificationRuleResult> Invoke(GetIncidentNotificationRuleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetIncidentNotificationRuleResult>("datadog:index/getIncidentNotificationRule:getIncidentNotificationRule", args ?? new GetIncidentNotificationRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIncidentNotificationRuleArgs : global::Pulumi.InvokeArgs
    {
        [Input("conditions")]
        private List<Inputs.GetIncidentNotificationRuleConditionArgs>? _conditions;

        /// <summary>
        /// The conditions that trigger this notification rule.
        /// </summary>
        public List<Inputs.GetIncidentNotificationRuleConditionArgs> Conditions
        {
            get => _conditions ?? (_conditions = new List<Inputs.GetIncidentNotificationRuleConditionArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// The ID of the incident notification rule.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetIncidentNotificationRuleArgs()
        {
        }
        public static new GetIncidentNotificationRuleArgs Empty => new GetIncidentNotificationRuleArgs();
    }

    public sealed class GetIncidentNotificationRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("conditions")]
        private InputList<Inputs.GetIncidentNotificationRuleConditionInputArgs>? _conditions;

        /// <summary>
        /// The conditions that trigger this notification rule.
        /// </summary>
        public InputList<Inputs.GetIncidentNotificationRuleConditionInputArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.GetIncidentNotificationRuleConditionInputArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// The ID of the incident notification rule.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetIncidentNotificationRuleInvokeArgs()
        {
        }
        public static new GetIncidentNotificationRuleInvokeArgs Empty => new GetIncidentNotificationRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetIncidentNotificationRuleResult
    {
        /// <summary>
        /// The conditions that trigger this notification rule.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIncidentNotificationRuleConditionResult> Conditions;
        /// <summary>
        /// Timestamp when the notification rule was created.
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// Whether the notification rule is enabled.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The notification handles (targets) for this rule.
        /// </summary>
        public readonly ImmutableArray<string> Handles;
        /// <summary>
        /// The ID of the incident notification rule.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the incident type this notification rule is associated with.
        /// </summary>
        public readonly string IncidentType;
        /// <summary>
        /// Timestamp when the notification rule was last modified.
        /// </summary>
        public readonly string Modified;
        /// <summary>
        /// The ID of the notification template used by this rule.
        /// </summary>
        public readonly string NotificationTemplate;
        /// <summary>
        /// List of incident fields that trigger re-notification when changed.
        /// </summary>
        public readonly ImmutableArray<string> RenotifyOns;
        /// <summary>
        /// The trigger event for this notification rule.
        /// </summary>
        public readonly string Trigger;
        /// <summary>
        /// The visibility of the notification rule. Valid values are: all, organization, private.
        /// </summary>
        public readonly string Visibility;

        [OutputConstructor]
        private GetIncidentNotificationRuleResult(
            ImmutableArray<Outputs.GetIncidentNotificationRuleConditionResult> conditions,

            string created,

            bool enabled,

            ImmutableArray<string> handles,

            string id,

            string incidentType,

            string modified,

            string notificationTemplate,

            ImmutableArray<string> renotifyOns,

            string trigger,

            string visibility)
        {
            Conditions = conditions;
            Created = created;
            Enabled = enabled;
            Handles = handles;
            Id = id;
            IncidentType = incidentType;
            Modified = modified;
            NotificationTemplate = notificationTemplate;
            RenotifyOns = renotifyOns;
            Trigger = trigger;
            Visibility = visibility;
        }
    }
}
