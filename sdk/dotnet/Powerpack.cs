// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog powerpack resource. This can be used to create and manage Datadog powerpacks.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Manage Datadog Powerpacks
    ///     var organization = new Datadog.OrganizationSettings("organization", new()
    ///     {
    ///         Name = "foo-organization",
    ///     });
    /// 
    ///     var foo = new Datadog.Powerpack("foo", new()
    ///     {
    ///         Description = "Created using the Datadog provider in terraform",
    ///         Layout = new Datadog.Inputs.PowerpackLayoutArgs
    ///         {
    ///             Height = 10,
    ///             Width = 3,
    ///             X = 1,
    ///             Y = 0,
    ///         },
    ///         LiveSpan = "4h",
    ///         TemplateVariables = new[]
    ///         {
    ///             new Datadog.Inputs.PowerpackTemplateVariableArgs
    ///             {
    ///                 Defaults = new[]
    ///                 {
    ///                     "defaults",
    ///                 },
    ///                 Name = "datacenter",
    ///             },
    ///         },
    ///         Widgets = new[]
    ///         {
    ///             new Datadog.Inputs.PowerpackWidgetArgs
    ///             {
    ///                 EventStreamDefinition = new Datadog.Inputs.PowerpackWidgetEventStreamDefinitionArgs
    ///                 {
    ///                     EventSize = "l",
    ///                     Query = "*",
    ///                     Title = "Widget Title",
    ///                     TitleAlign = "right",
    ///                     TitleSize = "16",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import datadog:index/powerpack:Powerpack foo 11111111-2222-3333-4444-555555555555
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/powerpack:Powerpack")]
    public partial class Powerpack : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the powerpack.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The layout of the powerpack on a free-form dashboard.
        /// </summary>
        [Output("layout")]
        public Output<Outputs.PowerpackLayout> Layout { get; private set; } = null!;

        /// <summary>
        /// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
        /// </summary>
        [Output("liveSpan")]
        public Output<string?> LiveSpan { get; private set; } = null!;

        /// <summary>
        /// The name of the powerpack template variable.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// Whether or not title should be displayed in the powerpack.
        /// </summary>
        [Output("showTitle")]
        public Output<bool?> ShowTitle { get; private set; } = null!;

        /// <summary>
        /// A list of tags to use in the widget.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The list of template variables for this powerpack.
        /// </summary>
        [Output("templateVariables")]
        public Output<ImmutableArray<Outputs.PowerpackTemplateVariable>> TemplateVariables { get; private set; } = null!;

        /// <summary>
        /// The list of widgets to display in the powerpack.
        /// </summary>
        [Output("widgets")]
        public Output<ImmutableArray<Outputs.PowerpackWidget>> Widgets { get; private set; } = null!;


        /// <summary>
        /// Create a Powerpack resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Powerpack(string name, PowerpackArgs? args = null, CustomResourceOptions? options = null)
            : base("datadog:index/powerpack:Powerpack", name, args ?? new PowerpackArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Powerpack(string name, Input<string> id, PowerpackState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/powerpack:Powerpack", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Powerpack resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Powerpack Get(string name, Input<string> id, PowerpackState? state = null, CustomResourceOptions? options = null)
        {
            return new Powerpack(name, id, state, options);
        }
    }

    public sealed class PowerpackArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the powerpack.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The layout of the powerpack on a free-form dashboard.
        /// </summary>
        [Input("layout")]
        public Input<Inputs.PowerpackLayoutArgs>? Layout { get; set; }

        /// <summary>
        /// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
        /// </summary>
        [Input("liveSpan")]
        public Input<string>? LiveSpan { get; set; }

        /// <summary>
        /// The name of the powerpack template variable.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether or not title should be displayed in the powerpack.
        /// </summary>
        [Input("showTitle")]
        public Input<bool>? ShowTitle { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to use in the widget.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("templateVariables")]
        private InputList<Inputs.PowerpackTemplateVariableArgs>? _templateVariables;

        /// <summary>
        /// The list of template variables for this powerpack.
        /// </summary>
        public InputList<Inputs.PowerpackTemplateVariableArgs> TemplateVariables
        {
            get => _templateVariables ?? (_templateVariables = new InputList<Inputs.PowerpackTemplateVariableArgs>());
            set => _templateVariables = value;
        }

        [Input("widgets")]
        private InputList<Inputs.PowerpackWidgetArgs>? _widgets;

        /// <summary>
        /// The list of widgets to display in the powerpack.
        /// </summary>
        public InputList<Inputs.PowerpackWidgetArgs> Widgets
        {
            get => _widgets ?? (_widgets = new InputList<Inputs.PowerpackWidgetArgs>());
            set => _widgets = value;
        }

        public PowerpackArgs()
        {
        }
        public static new PowerpackArgs Empty => new PowerpackArgs();
    }

    public sealed class PowerpackState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the powerpack.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The layout of the powerpack on a free-form dashboard.
        /// </summary>
        [Input("layout")]
        public Input<Inputs.PowerpackLayoutGetArgs>? Layout { get; set; }

        /// <summary>
        /// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
        /// </summary>
        [Input("liveSpan")]
        public Input<string>? LiveSpan { get; set; }

        /// <summary>
        /// The name of the powerpack template variable.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether or not title should be displayed in the powerpack.
        /// </summary>
        [Input("showTitle")]
        public Input<bool>? ShowTitle { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to use in the widget.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("templateVariables")]
        private InputList<Inputs.PowerpackTemplateVariableGetArgs>? _templateVariables;

        /// <summary>
        /// The list of template variables for this powerpack.
        /// </summary>
        public InputList<Inputs.PowerpackTemplateVariableGetArgs> TemplateVariables
        {
            get => _templateVariables ?? (_templateVariables = new InputList<Inputs.PowerpackTemplateVariableGetArgs>());
            set => _templateVariables = value;
        }

        [Input("widgets")]
        private InputList<Inputs.PowerpackWidgetGetArgs>? _widgets;

        /// <summary>
        /// The list of widgets to display in the powerpack.
        /// </summary>
        public InputList<Inputs.PowerpackWidgetGetArgs> Widgets
        {
            get => _widgets ?? (_widgets = new InputList<Inputs.PowerpackWidgetGetArgs>());
            set => _widgets = value;
        }

        public PowerpackState()
        {
        }
        public static new PowerpackState Empty => new PowerpackState();
    }
}
