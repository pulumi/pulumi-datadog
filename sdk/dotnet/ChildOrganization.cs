// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog Child Organization resource. This can be used to create Datadog Child Organizations. To manage created organization use `datadog.OrganizationSettings`.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a new Datadog Child Organization
    ///     var organization = new Datadog.ChildOrganization("organization", new()
    ///     {
    ///         Name = "foo-organization",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/childOrganization:ChildOrganization")]
    public partial class ChildOrganization : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Datadog API key.
        /// </summary>
        [Output("apiKeys")]
        public Output<ImmutableArray<Outputs.ChildOrganizationApiKey>> ApiKeys { get; private set; } = null!;

        /// <summary>
        /// An application key with its associated metadata.
        /// </summary>
        [Output("applicationKeys")]
        public Output<ImmutableArray<Outputs.ChildOrganizationApplicationKey>> ApplicationKeys { get; private set; } = null!;

        /// <summary>
        /// Description of the organization.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Name for Child Organization after creation.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The `public_id` of the organization you are operating within.
        /// </summary>
        [Output("publicId")]
        public Output<string> PublicId { get; private set; } = null!;

        /// <summary>
        /// Organization settings
        /// </summary>
        [Output("settings")]
        public Output<ImmutableArray<Outputs.ChildOrganizationSetting>> Settings { get; private set; } = null!;

        /// <summary>
        /// Information about a user
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<Outputs.ChildOrganizationUser>> Users { get; private set; } = null!;


        /// <summary>
        /// Create a ChildOrganization resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ChildOrganization(string name, ChildOrganizationArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/childOrganization:ChildOrganization", name, args ?? new ChildOrganizationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ChildOrganization(string name, Input<string> id, ChildOrganizationState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/childOrganization:ChildOrganization", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ChildOrganization resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ChildOrganization Get(string name, Input<string> id, ChildOrganizationState? state = null, CustomResourceOptions? options = null)
        {
            return new ChildOrganization(name, id, state, options);
        }
    }

    public sealed class ChildOrganizationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name for Child Organization after creation.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public ChildOrganizationArgs()
        {
        }
        public static new ChildOrganizationArgs Empty => new ChildOrganizationArgs();
    }

    public sealed class ChildOrganizationState : global::Pulumi.ResourceArgs
    {
        [Input("apiKeys")]
        private InputList<Inputs.ChildOrganizationApiKeyGetArgs>? _apiKeys;

        /// <summary>
        /// Datadog API key.
        /// </summary>
        public InputList<Inputs.ChildOrganizationApiKeyGetArgs> ApiKeys
        {
            get => _apiKeys ?? (_apiKeys = new InputList<Inputs.ChildOrganizationApiKeyGetArgs>());
            set => _apiKeys = value;
        }

        [Input("applicationKeys")]
        private InputList<Inputs.ChildOrganizationApplicationKeyGetArgs>? _applicationKeys;

        /// <summary>
        /// An application key with its associated metadata.
        /// </summary>
        public InputList<Inputs.ChildOrganizationApplicationKeyGetArgs> ApplicationKeys
        {
            get => _applicationKeys ?? (_applicationKeys = new InputList<Inputs.ChildOrganizationApplicationKeyGetArgs>());
            set => _applicationKeys = value;
        }

        /// <summary>
        /// Description of the organization.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name for Child Organization after creation.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The `public_id` of the organization you are operating within.
        /// </summary>
        [Input("publicId")]
        public Input<string>? PublicId { get; set; }

        [Input("settings")]
        private InputList<Inputs.ChildOrganizationSettingGetArgs>? _settings;

        /// <summary>
        /// Organization settings
        /// </summary>
        public InputList<Inputs.ChildOrganizationSettingGetArgs> Settings
        {
            get => _settings ?? (_settings = new InputList<Inputs.ChildOrganizationSettingGetArgs>());
            set => _settings = value;
        }

        [Input("users")]
        private InputList<Inputs.ChildOrganizationUserGetArgs>? _users;

        /// <summary>
        /// Information about a user
        /// </summary>
        public InputList<Inputs.ChildOrganizationUserGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.ChildOrganizationUserGetArgs>());
            set => _users = value;
        }

        public ChildOrganizationState()
        {
        }
        public static new ChildOrganizationState Empty => new ChildOrganizationState();
    }
}
