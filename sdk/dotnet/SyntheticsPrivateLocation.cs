// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog synthetics private location resource. This can be used to create and manage Datadog synthetics private locations.
    /// 
    /// ## Import
    /// 
    /// Synthetics private locations can be imported using their string ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import datadog:index/syntheticsPrivateLocation:SyntheticsPrivateLocation bar pl:private-location-name-abcdef123456
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/syntheticsPrivateLocation:SyntheticsPrivateLocation")]
    public partial class SyntheticsPrivateLocation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration skeleton for the private location. See installation instructions of the private location on how to use this configuration.
        /// </summary>
        [Output("config")]
        public Output<string> Config { get; private set; } = null!;

        /// <summary>
        /// Description of the private location.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The private location metadata
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.SyntheticsPrivateLocationMetadata?> Metadata { get; private set; } = null!;

        /// <summary>
        /// Synthetics private location name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of tags to associate with your synthetics private location.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a SyntheticsPrivateLocation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SyntheticsPrivateLocation(string name, SyntheticsPrivateLocationArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/syntheticsPrivateLocation:SyntheticsPrivateLocation", name, args ?? new SyntheticsPrivateLocationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SyntheticsPrivateLocation(string name, Input<string> id, SyntheticsPrivateLocationState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/syntheticsPrivateLocation:SyntheticsPrivateLocation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "config",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SyntheticsPrivateLocation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SyntheticsPrivateLocation Get(string name, Input<string> id, SyntheticsPrivateLocationState? state = null, CustomResourceOptions? options = null)
        {
            return new SyntheticsPrivateLocation(name, id, state, options);
        }
    }

    public sealed class SyntheticsPrivateLocationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the private location.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The private location metadata
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.SyntheticsPrivateLocationMetadataArgs>? Metadata { get; set; }

        /// <summary>
        /// Synthetics private location name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to associate with your synthetics private location.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public SyntheticsPrivateLocationArgs()
        {
        }
        public static new SyntheticsPrivateLocationArgs Empty => new SyntheticsPrivateLocationArgs();
    }

    public sealed class SyntheticsPrivateLocationState : global::Pulumi.ResourceArgs
    {
        [Input("config")]
        private Input<string>? _config;

        /// <summary>
        /// Configuration skeleton for the private location. See installation instructions of the private location on how to use this configuration.
        /// </summary>
        public Input<string>? Config
        {
            get => _config;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _config = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Description of the private location.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The private location metadata
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.SyntheticsPrivateLocationMetadataGetArgs>? Metadata { get; set; }

        /// <summary>
        /// Synthetics private location name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to associate with your synthetics private location.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public SyntheticsPrivateLocationState()
        {
        }
        public static new SyntheticsPrivateLocationState Empty => new SyntheticsPrivateLocationState();
    }
}
