// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog Cost Budget resource.
    /// </summary>
    [DatadogResourceType("datadog:index/costBudget:CostBudget")]
    public partial class CostBudget : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the budget.
        /// </summary>
        [Output("budgetId")]
        public Output<string> BudgetId { get; private set; } = null!;

        /// <summary>
        /// The month when the budget ends (YYYYMM).
        /// </summary>
        [Output("endMonth")]
        public Output<int> EndMonth { get; private set; } = null!;

        /// <summary>
        /// The entries of the budget.
        /// </summary>
        [Output("entries")]
        public Output<ImmutableArray<Outputs.CostBudgetEntry>> Entries { get; private set; } = null!;

        /// <summary>
        /// The cost query used to track against the budget.
        /// </summary>
        [Output("metricsQuery")]
        public Output<string> MetricsQuery { get; private set; } = null!;

        /// <summary>
        /// The name of the budget.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The month when the budget starts (YYYYMM).
        /// </summary>
        [Output("startMonth")]
        public Output<int> StartMonth { get; private set; } = null!;

        /// <summary>
        /// The sum of all budget entries' amounts.
        /// </summary>
        [Output("totalAmount")]
        public Output<double> TotalAmount { get; private set; } = null!;


        /// <summary>
        /// Create a CostBudget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CostBudget(string name, CostBudgetArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/costBudget:CostBudget", name, args ?? new CostBudgetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CostBudget(string name, Input<string> id, CostBudgetState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/costBudget:CostBudget", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CostBudget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CostBudget Get(string name, Input<string> id, CostBudgetState? state = null, CustomResourceOptions? options = null)
        {
            return new CostBudget(name, id, state, options);
        }
    }

    public sealed class CostBudgetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the budget.
        /// </summary>
        [Input("budgetId")]
        public Input<string>? BudgetId { get; set; }

        /// <summary>
        /// The month when the budget ends (YYYYMM).
        /// </summary>
        [Input("endMonth", required: true)]
        public Input<int> EndMonth { get; set; } = null!;

        [Input("entries")]
        private InputList<Inputs.CostBudgetEntryArgs>? _entries;

        /// <summary>
        /// The entries of the budget.
        /// </summary>
        public InputList<Inputs.CostBudgetEntryArgs> Entries
        {
            get => _entries ?? (_entries = new InputList<Inputs.CostBudgetEntryArgs>());
            set => _entries = value;
        }

        /// <summary>
        /// The cost query used to track against the budget.
        /// </summary>
        [Input("metricsQuery", required: true)]
        public Input<string> MetricsQuery { get; set; } = null!;

        /// <summary>
        /// The name of the budget.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The month when the budget starts (YYYYMM).
        /// </summary>
        [Input("startMonth", required: true)]
        public Input<int> StartMonth { get; set; } = null!;

        public CostBudgetArgs()
        {
        }
        public static new CostBudgetArgs Empty => new CostBudgetArgs();
    }

    public sealed class CostBudgetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the budget.
        /// </summary>
        [Input("budgetId")]
        public Input<string>? BudgetId { get; set; }

        /// <summary>
        /// The month when the budget ends (YYYYMM).
        /// </summary>
        [Input("endMonth")]
        public Input<int>? EndMonth { get; set; }

        [Input("entries")]
        private InputList<Inputs.CostBudgetEntryGetArgs>? _entries;

        /// <summary>
        /// The entries of the budget.
        /// </summary>
        public InputList<Inputs.CostBudgetEntryGetArgs> Entries
        {
            get => _entries ?? (_entries = new InputList<Inputs.CostBudgetEntryGetArgs>());
            set => _entries = value;
        }

        /// <summary>
        /// The cost query used to track against the budget.
        /// </summary>
        [Input("metricsQuery")]
        public Input<string>? MetricsQuery { get; set; }

        /// <summary>
        /// The name of the budget.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The month when the budget starts (YYYYMM).
        /// </summary>
        [Input("startMonth")]
        public Input<int>? StartMonth { get; set; }

        /// <summary>
        /// The sum of all budget entries' amounts.
        /// </summary>
        [Input("totalAmount")]
        public Input<double>? TotalAmount { get; set; }

        public CostBudgetState()
        {
        }
        public static new CostBudgetState Empty => new CostBudgetState();
    }
}
