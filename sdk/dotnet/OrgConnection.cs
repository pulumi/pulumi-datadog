// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog Org Connection resource. Org Connections make data from a source org available in the destination org for selected connection data types (for example, logs or metrics). Org Connections can only be created from a source org to a specified destination org
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create new org connection resource
    ///     var foo = new Datadog.OrgConnection("foo", new()
    ///     {
    ///         ConnectionTypes = new[]
    ///         {
    ///             "metrics",
    ///             "logs",
    ///         },
    ///         SinkOrgId = "00000000-0000-0000-0000-000000000000",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/orgConnection:OrgConnection foo "&lt;org_connection_id&gt;"
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/orgConnection:OrgConnection")]
    public partial class OrgConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set of connection types to enable for this connection (., metrics, logs).
        /// </summary>
        [Output("connectionTypes")]
        public Output<ImmutableArray<string>> ConnectionTypes { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the connection was created (RFC 3339).
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Creator user ID (UUID).
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// UUID of the sink (destination) organization. Must be a valid UUID.
        /// </summary>
        [Output("sinkOrgId")]
        public Output<string> SinkOrgId { get; private set; } = null!;

        /// <summary>
        /// Name of the sink (destination) organization.
        /// </summary>
        [Output("sinkOrgName")]
        public Output<string> SinkOrgName { get; private set; } = null!;

        /// <summary>
        /// UUID of the source (current) organization.
        /// </summary>
        [Output("sourceOrgId")]
        public Output<string> SourceOrgId { get; private set; } = null!;

        /// <summary>
        /// Name of the source organization.
        /// </summary>
        [Output("sourceOrgName")]
        public Output<string> SourceOrgName { get; private set; } = null!;


        /// <summary>
        /// Create a OrgConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrgConnection(string name, OrgConnectionArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/orgConnection:OrgConnection", name, args ?? new OrgConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrgConnection(string name, Input<string> id, OrgConnectionState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/orgConnection:OrgConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrgConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrgConnection Get(string name, Input<string> id, OrgConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new OrgConnection(name, id, state, options);
        }
    }

    public sealed class OrgConnectionArgs : global::Pulumi.ResourceArgs
    {
        [Input("connectionTypes", required: true)]
        private InputList<string>? _connectionTypes;

        /// <summary>
        /// Set of connection types to enable for this connection (., metrics, logs).
        /// </summary>
        public InputList<string> ConnectionTypes
        {
            get => _connectionTypes ?? (_connectionTypes = new InputList<string>());
            set => _connectionTypes = value;
        }

        /// <summary>
        /// UUID of the sink (destination) organization. Must be a valid UUID.
        /// </summary>
        [Input("sinkOrgId", required: true)]
        public Input<string> SinkOrgId { get; set; } = null!;

        public OrgConnectionArgs()
        {
        }
        public static new OrgConnectionArgs Empty => new OrgConnectionArgs();
    }

    public sealed class OrgConnectionState : global::Pulumi.ResourceArgs
    {
        [Input("connectionTypes")]
        private InputList<string>? _connectionTypes;

        /// <summary>
        /// Set of connection types to enable for this connection (., metrics, logs).
        /// </summary>
        public InputList<string> ConnectionTypes
        {
            get => _connectionTypes ?? (_connectionTypes = new InputList<string>());
            set => _connectionTypes = value;
        }

        /// <summary>
        /// Timestamp when the connection was created (RFC 3339).
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Creator user ID (UUID).
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// UUID of the sink (destination) organization. Must be a valid UUID.
        /// </summary>
        [Input("sinkOrgId")]
        public Input<string>? SinkOrgId { get; set; }

        /// <summary>
        /// Name of the sink (destination) organization.
        /// </summary>
        [Input("sinkOrgName")]
        public Input<string>? SinkOrgName { get; set; }

        /// <summary>
        /// UUID of the source (current) organization.
        /// </summary>
        [Input("sourceOrgId")]
        public Input<string>? SourceOrgId { get; set; }

        /// <summary>
        /// Name of the source organization.
        /// </summary>
        [Input("sourceOrgName")]
        public Input<string>? SourceOrgName { get; set; }

        public OrgConnectionState()
        {
        }
        public static new OrgConnectionState Empty => new OrgConnectionState();
    }
}
