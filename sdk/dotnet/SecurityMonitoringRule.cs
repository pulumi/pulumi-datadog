// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog Security Monitoring Rule API resource. This can be used to create and manage Datadog security monitoring rules. To change settings for a default rule use `datadog_security_default_rule` instead.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myrule = new Datadog.SecurityMonitoringRule("myrule", new()
    ///     {
    ///         Cases = new[]
    ///         {
    ///             new Datadog.Inputs.SecurityMonitoringRuleCaseArgs
    ///             {
    ///                 Condition = "errors &gt; 3 &amp;&amp; warnings &gt; 10",
    ///                 Notifications = new[]
    ///                 {
    ///                     "@user",
    ///                 },
    ///                 Status = "high",
    ///             },
    ///         },
    ///         Enabled = true,
    ///         Message = "The rule has triggered.",
    ///         Name = "My rule",
    ///         Options = new Datadog.Inputs.SecurityMonitoringRuleOptionsArgs
    ///         {
    ///             EvaluationWindow = 300,
    ///             KeepAlive = 600,
    ///             MaxSignalDuration = 900,
    ///         },
    ///         Queries = new[]
    ///         {
    ///             new Datadog.Inputs.SecurityMonitoringRuleQueryArgs
    ///             {
    ///                 Aggregation = "count",
    ///                 GroupByFields = new[]
    ///                 {
    ///                     "host",
    ///                 },
    ///                 Name = "errors",
    ///                 Query = "status:error",
    ///             },
    ///             new Datadog.Inputs.SecurityMonitoringRuleQueryArgs
    ///             {
    ///                 Aggregation = "count",
    ///                 GroupByFields = new[]
    ///                 {
    ///                     "host",
    ///                 },
    ///                 Name = "warnings",
    ///                 Query = "status:warning",
    ///             },
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "type:dos",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Security monitoring rules can be imported using ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/securityMonitoringRule:SecurityMonitoringRule my_rule m0o-hto-lkb
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/securityMonitoringRule:SecurityMonitoringRule")]
    public partial class SecurityMonitoringRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cases for generating signals.
        /// </summary>
        [Output("cases")]
        public Output<ImmutableArray<Outputs.SecurityMonitoringRuleCase>> Cases { get; private set; } = null!;

        /// <summary>
        /// Whether the rule is enabled. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Additional queries to filter matched events before they are processed.
        /// </summary>
        [Output("filters")]
        public Output<ImmutableArray<Outputs.SecurityMonitoringRuleFilter>> Filters { get; private set; } = null!;

        /// <summary>
        /// Whether the notifications include the triggering group-by values in their title. Defaults to `false`.
        /// </summary>
        [Output("hasExtendedTitle")]
        public Output<bool?> HasExtendedTitle { get; private set; } = null!;

        /// <summary>
        /// Message for generated signals.
        /// </summary>
        [Output("message")]
        public Output<string> Message { get; private set; } = null!;

        /// <summary>
        /// Name of the case.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Options on rules.
        /// </summary>
        [Output("options")]
        public Output<Outputs.SecurityMonitoringRuleOptions?> Options { get; private set; } = null!;

        /// <summary>
        /// Query for selecting logs to apply the filtering action.
        /// </summary>
        [Output("queries")]
        public Output<ImmutableArray<Outputs.SecurityMonitoringRuleQuery>> Queries { get; private set; } = null!;

        /// <summary>
        /// Queries for selecting logs which are part of the rule.
        /// </summary>
        [Output("signalQueries")]
        public Output<ImmutableArray<Outputs.SecurityMonitoringRuleSignalQuery>> SignalQueries { get; private set; } = null!;

        /// <summary>
        /// Tags for generated signals.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Cases for generating signals for third-party rules. Only required and accepted for third-party rules
        /// </summary>
        [Output("thirdPartyCases")]
        public Output<ImmutableArray<Outputs.SecurityMonitoringRuleThirdPartyCase>> ThirdPartyCases { get; private set; } = null!;

        /// <summary>
        /// The rule type. Valid values are `application_security`, `log_detection`, `workload_security`, `signal_correlation`. Defaults to `"log_detection"`.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityMonitoringRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityMonitoringRule(string name, SecurityMonitoringRuleArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/securityMonitoringRule:SecurityMonitoringRule", name, args ?? new SecurityMonitoringRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecurityMonitoringRule(string name, Input<string> id, SecurityMonitoringRuleState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/securityMonitoringRule:SecurityMonitoringRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityMonitoringRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityMonitoringRule Get(string name, Input<string> id, SecurityMonitoringRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityMonitoringRule(name, id, state, options);
        }
    }

    public sealed class SecurityMonitoringRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("cases")]
        private InputList<Inputs.SecurityMonitoringRuleCaseArgs>? _cases;

        /// <summary>
        /// Cases for generating signals.
        /// </summary>
        public InputList<Inputs.SecurityMonitoringRuleCaseArgs> Cases
        {
            get => _cases ?? (_cases = new InputList<Inputs.SecurityMonitoringRuleCaseArgs>());
            set => _cases = value;
        }

        /// <summary>
        /// Whether the rule is enabled. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("filters")]
        private InputList<Inputs.SecurityMonitoringRuleFilterArgs>? _filters;

        /// <summary>
        /// Additional queries to filter matched events before they are processed.
        /// </summary>
        public InputList<Inputs.SecurityMonitoringRuleFilterArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.SecurityMonitoringRuleFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Whether the notifications include the triggering group-by values in their title. Defaults to `false`.
        /// </summary>
        [Input("hasExtendedTitle")]
        public Input<bool>? HasExtendedTitle { get; set; }

        /// <summary>
        /// Message for generated signals.
        /// </summary>
        [Input("message", required: true)]
        public Input<string> Message { get; set; } = null!;

        /// <summary>
        /// Name of the case.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Options on rules.
        /// </summary>
        [Input("options")]
        public Input<Inputs.SecurityMonitoringRuleOptionsArgs>? Options { get; set; }

        [Input("queries")]
        private InputList<Inputs.SecurityMonitoringRuleQueryArgs>? _queries;

        /// <summary>
        /// Query for selecting logs to apply the filtering action.
        /// </summary>
        public InputList<Inputs.SecurityMonitoringRuleQueryArgs> Queries
        {
            get => _queries ?? (_queries = new InputList<Inputs.SecurityMonitoringRuleQueryArgs>());
            set => _queries = value;
        }

        [Input("signalQueries")]
        private InputList<Inputs.SecurityMonitoringRuleSignalQueryArgs>? _signalQueries;

        /// <summary>
        /// Queries for selecting logs which are part of the rule.
        /// </summary>
        public InputList<Inputs.SecurityMonitoringRuleSignalQueryArgs> SignalQueries
        {
            get => _signalQueries ?? (_signalQueries = new InputList<Inputs.SecurityMonitoringRuleSignalQueryArgs>());
            set => _signalQueries = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags for generated signals.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("thirdPartyCases")]
        private InputList<Inputs.SecurityMonitoringRuleThirdPartyCaseArgs>? _thirdPartyCases;

        /// <summary>
        /// Cases for generating signals for third-party rules. Only required and accepted for third-party rules
        /// </summary>
        public InputList<Inputs.SecurityMonitoringRuleThirdPartyCaseArgs> ThirdPartyCases
        {
            get => _thirdPartyCases ?? (_thirdPartyCases = new InputList<Inputs.SecurityMonitoringRuleThirdPartyCaseArgs>());
            set => _thirdPartyCases = value;
        }

        /// <summary>
        /// The rule type. Valid values are `application_security`, `log_detection`, `workload_security`, `signal_correlation`. Defaults to `"log_detection"`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public SecurityMonitoringRuleArgs()
        {
        }
        public static new SecurityMonitoringRuleArgs Empty => new SecurityMonitoringRuleArgs();
    }

    public sealed class SecurityMonitoringRuleState : global::Pulumi.ResourceArgs
    {
        [Input("cases")]
        private InputList<Inputs.SecurityMonitoringRuleCaseGetArgs>? _cases;

        /// <summary>
        /// Cases for generating signals.
        /// </summary>
        public InputList<Inputs.SecurityMonitoringRuleCaseGetArgs> Cases
        {
            get => _cases ?? (_cases = new InputList<Inputs.SecurityMonitoringRuleCaseGetArgs>());
            set => _cases = value;
        }

        /// <summary>
        /// Whether the rule is enabled. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("filters")]
        private InputList<Inputs.SecurityMonitoringRuleFilterGetArgs>? _filters;

        /// <summary>
        /// Additional queries to filter matched events before they are processed.
        /// </summary>
        public InputList<Inputs.SecurityMonitoringRuleFilterGetArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.SecurityMonitoringRuleFilterGetArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Whether the notifications include the triggering group-by values in their title. Defaults to `false`.
        /// </summary>
        [Input("hasExtendedTitle")]
        public Input<bool>? HasExtendedTitle { get; set; }

        /// <summary>
        /// Message for generated signals.
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// Name of the case.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Options on rules.
        /// </summary>
        [Input("options")]
        public Input<Inputs.SecurityMonitoringRuleOptionsGetArgs>? Options { get; set; }

        [Input("queries")]
        private InputList<Inputs.SecurityMonitoringRuleQueryGetArgs>? _queries;

        /// <summary>
        /// Query for selecting logs to apply the filtering action.
        /// </summary>
        public InputList<Inputs.SecurityMonitoringRuleQueryGetArgs> Queries
        {
            get => _queries ?? (_queries = new InputList<Inputs.SecurityMonitoringRuleQueryGetArgs>());
            set => _queries = value;
        }

        [Input("signalQueries")]
        private InputList<Inputs.SecurityMonitoringRuleSignalQueryGetArgs>? _signalQueries;

        /// <summary>
        /// Queries for selecting logs which are part of the rule.
        /// </summary>
        public InputList<Inputs.SecurityMonitoringRuleSignalQueryGetArgs> SignalQueries
        {
            get => _signalQueries ?? (_signalQueries = new InputList<Inputs.SecurityMonitoringRuleSignalQueryGetArgs>());
            set => _signalQueries = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags for generated signals.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("thirdPartyCases")]
        private InputList<Inputs.SecurityMonitoringRuleThirdPartyCaseGetArgs>? _thirdPartyCases;

        /// <summary>
        /// Cases for generating signals for third-party rules. Only required and accepted for third-party rules
        /// </summary>
        public InputList<Inputs.SecurityMonitoringRuleThirdPartyCaseGetArgs> ThirdPartyCases
        {
            get => _thirdPartyCases ?? (_thirdPartyCases = new InputList<Inputs.SecurityMonitoringRuleThirdPartyCaseGetArgs>());
            set => _thirdPartyCases = value;
        }

        /// <summary>
        /// The rule type. Valid values are `application_security`, `log_detection`, `workload_security`, `signal_correlation`. Defaults to `"log_detection"`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public SecurityMonitoringRuleState()
        {
        }
        public static new SecurityMonitoringRuleState Empty => new SecurityMonitoringRuleState();
    }
}
