// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog Logs Custom Destination API resource, which is used to create and manage Datadog log forwarding.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sampleDestination = new Datadog.LogsCustomDestination("sample_destination", new()
    ///     {
    ///         Name = "sample destination",
    ///         Query = "service:my-service",
    ///         Enabled = true,
    ///         HttpDestination = new Datadog.Inputs.LogsCustomDestinationHttpDestinationArgs
    ///         {
    ///             Endpoint = "https://example.org",
    ///             BasicAuth = new Datadog.Inputs.LogsCustomDestinationHttpDestinationBasicAuthArgs
    ///             {
    ///                 Username = "my-username",
    ///                 Password = "my-password",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Custom destinations can be imported using the destination ID. Caution: auth credentials can not be imported.
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/logsCustomDestination:LogsCustomDestination sample_destination "destination-id"
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/logsCustomDestination:LogsCustomDestination")]
    public partial class LogsCustomDestination : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Elasticsearch destination.
        /// </summary>
        [Output("elasticsearchDestination")]
        public Output<Outputs.LogsCustomDestinationElasticsearchDestination?> ElasticsearchDestination { get; private set; } = null!;

        /// <summary>
        /// Whether logs matching this custom destination should be forwarded or not.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Whether tags from the forwarded logs should be forwarded or not.
        /// </summary>
        [Output("forwardTags")]
        public Output<bool> ForwardTags { get; private set; } = null!;

        /// <summary>
        /// How the `forward_tags_restriction_list` parameter should be interpreted.
        /// 			If `ALLOW_LIST`, then only tags whose keys on the forwarded logs match the ones on the restriction list
        /// 			are forwarded.
        /// 			`BLOCK_LIST` works the opposite way. It does not forward the tags matching the ones on the list. Valid values are `ALLOW_LIST`, `BLOCK_LIST`.
        /// </summary>
        [Output("forwardTagsRestrictionListType")]
        public Output<string> ForwardTagsRestrictionListType { get; private set; } = null!;

        /// <summary>
        /// List of [tag keys](https://docs.datadoghq.com/getting_started/tagging/#define-tags) to be filtered.
        /// 			An empty list represents no restriction is in place and either all or no tags will be
        /// 			forwarded depending on `forward_tags_restriction_list_type` parameter.
        /// </summary>
        [Output("forwardTagsRestrictionLists")]
        public Output<ImmutableArray<string>> ForwardTagsRestrictionLists { get; private set; } = null!;

        /// <summary>
        /// The HTTP destination.
        /// </summary>
        [Output("httpDestination")]
        public Output<Outputs.LogsCustomDestinationHttpDestination?> HttpDestination { get; private set; } = null!;

        /// <summary>
        /// The custom destination name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The custom destination query filter. Logs matching this query are forwarded to the destination.
        /// </summary>
        [Output("query")]
        public Output<string> Query { get; private set; } = null!;

        /// <summary>
        /// The Splunk HTTP Event Collector (HEC) destination.
        /// </summary>
        [Output("splunkDestination")]
        public Output<Outputs.LogsCustomDestinationSplunkDestination?> SplunkDestination { get; private set; } = null!;


        /// <summary>
        /// Create a LogsCustomDestination resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogsCustomDestination(string name, LogsCustomDestinationArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/logsCustomDestination:LogsCustomDestination", name, args ?? new LogsCustomDestinationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogsCustomDestination(string name, Input<string> id, LogsCustomDestinationState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/logsCustomDestination:LogsCustomDestination", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogsCustomDestination resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogsCustomDestination Get(string name, Input<string> id, LogsCustomDestinationState? state = null, CustomResourceOptions? options = null)
        {
            return new LogsCustomDestination(name, id, state, options);
        }
    }

    public sealed class LogsCustomDestinationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Elasticsearch destination.
        /// </summary>
        [Input("elasticsearchDestination")]
        public Input<Inputs.LogsCustomDestinationElasticsearchDestinationArgs>? ElasticsearchDestination { get; set; }

        /// <summary>
        /// Whether logs matching this custom destination should be forwarded or not.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Whether tags from the forwarded logs should be forwarded or not.
        /// </summary>
        [Input("forwardTags")]
        public Input<bool>? ForwardTags { get; set; }

        /// <summary>
        /// How the `forward_tags_restriction_list` parameter should be interpreted.
        /// 			If `ALLOW_LIST`, then only tags whose keys on the forwarded logs match the ones on the restriction list
        /// 			are forwarded.
        /// 			`BLOCK_LIST` works the opposite way. It does not forward the tags matching the ones on the list. Valid values are `ALLOW_LIST`, `BLOCK_LIST`.
        /// </summary>
        [Input("forwardTagsRestrictionListType")]
        public Input<string>? ForwardTagsRestrictionListType { get; set; }

        [Input("forwardTagsRestrictionLists")]
        private InputList<string>? _forwardTagsRestrictionLists;

        /// <summary>
        /// List of [tag keys](https://docs.datadoghq.com/getting_started/tagging/#define-tags) to be filtered.
        /// 			An empty list represents no restriction is in place and either all or no tags will be
        /// 			forwarded depending on `forward_tags_restriction_list_type` parameter.
        /// </summary>
        public InputList<string> ForwardTagsRestrictionLists
        {
            get => _forwardTagsRestrictionLists ?? (_forwardTagsRestrictionLists = new InputList<string>());
            set => _forwardTagsRestrictionLists = value;
        }

        /// <summary>
        /// The HTTP destination.
        /// </summary>
        [Input("httpDestination")]
        public Input<Inputs.LogsCustomDestinationHttpDestinationArgs>? HttpDestination { get; set; }

        /// <summary>
        /// The custom destination name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The custom destination query filter. Logs matching this query are forwarded to the destination.
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        /// <summary>
        /// The Splunk HTTP Event Collector (HEC) destination.
        /// </summary>
        [Input("splunkDestination")]
        public Input<Inputs.LogsCustomDestinationSplunkDestinationArgs>? SplunkDestination { get; set; }

        public LogsCustomDestinationArgs()
        {
        }
        public static new LogsCustomDestinationArgs Empty => new LogsCustomDestinationArgs();
    }

    public sealed class LogsCustomDestinationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Elasticsearch destination.
        /// </summary>
        [Input("elasticsearchDestination")]
        public Input<Inputs.LogsCustomDestinationElasticsearchDestinationGetArgs>? ElasticsearchDestination { get; set; }

        /// <summary>
        /// Whether logs matching this custom destination should be forwarded or not.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Whether tags from the forwarded logs should be forwarded or not.
        /// </summary>
        [Input("forwardTags")]
        public Input<bool>? ForwardTags { get; set; }

        /// <summary>
        /// How the `forward_tags_restriction_list` parameter should be interpreted.
        /// 			If `ALLOW_LIST`, then only tags whose keys on the forwarded logs match the ones on the restriction list
        /// 			are forwarded.
        /// 			`BLOCK_LIST` works the opposite way. It does not forward the tags matching the ones on the list. Valid values are `ALLOW_LIST`, `BLOCK_LIST`.
        /// </summary>
        [Input("forwardTagsRestrictionListType")]
        public Input<string>? ForwardTagsRestrictionListType { get; set; }

        [Input("forwardTagsRestrictionLists")]
        private InputList<string>? _forwardTagsRestrictionLists;

        /// <summary>
        /// List of [tag keys](https://docs.datadoghq.com/getting_started/tagging/#define-tags) to be filtered.
        /// 			An empty list represents no restriction is in place and either all or no tags will be
        /// 			forwarded depending on `forward_tags_restriction_list_type` parameter.
        /// </summary>
        public InputList<string> ForwardTagsRestrictionLists
        {
            get => _forwardTagsRestrictionLists ?? (_forwardTagsRestrictionLists = new InputList<string>());
            set => _forwardTagsRestrictionLists = value;
        }

        /// <summary>
        /// The HTTP destination.
        /// </summary>
        [Input("httpDestination")]
        public Input<Inputs.LogsCustomDestinationHttpDestinationGetArgs>? HttpDestination { get; set; }

        /// <summary>
        /// The custom destination name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The custom destination query filter. Logs matching this query are forwarded to the destination.
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        /// <summary>
        /// The Splunk HTTP Event Collector (HEC) destination.
        /// </summary>
        [Input("splunkDestination")]
        public Input<Inputs.LogsCustomDestinationSplunkDestinationGetArgs>? SplunkDestination { get; set; }

        public LogsCustomDestinationState()
        {
        }
        public static new LogsCustomDestinationState Empty => new LogsCustomDestinationState();
    }
}
