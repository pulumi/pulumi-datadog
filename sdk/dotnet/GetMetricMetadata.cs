// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    public static class GetMetricMetadata
    {
        /// <summary>
        /// Use this data source to retrieve metadata associated with a metric to use in other resources.
        /// </summary>
        public static Task<GetMetricMetadataResult> InvokeAsync(GetMetricMetadataArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetricMetadataResult>("datadog:index/getMetricMetadata:getMetricMetadata", args ?? new GetMetricMetadataArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve metadata associated with a metric to use in other resources.
        /// </summary>
        public static Output<GetMetricMetadataResult> Invoke(GetMetricMetadataInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetricMetadataResult>("datadog:index/getMetricMetadata:getMetricMetadata", args ?? new GetMetricMetadataInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve metadata associated with a metric to use in other resources.
        /// </summary>
        public static Output<GetMetricMetadataResult> Invoke(GetMetricMetadataInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetricMetadataResult>("datadog:index/getMetricMetadata:getMetricMetadata", args ?? new GetMetricMetadataInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetricMetadataArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The metric for which to fetch metadata.
        /// </summary>
        [Input("metricName", required: true)]
        public string MetricName { get; set; } = null!;

        public GetMetricMetadataArgs()
        {
        }
        public static new GetMetricMetadataArgs Empty => new GetMetricMetadataArgs();
    }

    public sealed class GetMetricMetadataInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The metric for which to fetch metadata.
        /// </summary>
        [Input("metricName", required: true)]
        public Input<string> MetricName { get; set; } = null!;

        public GetMetricMetadataInvokeArgs()
        {
        }
        public static new GetMetricMetadataInvokeArgs Empty => new GetMetricMetadataInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetricMetadataResult
    {
        /// <summary>
        /// The metric description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The metric integration.
        /// </summary>
        public readonly string Integration;
        /// <summary>
        /// The metric for which to fetch metadata.
        /// </summary>
        public readonly string MetricName;
        /// <summary>
        /// The per unit of the metric.
        /// </summary>
        public readonly string PerUnit;
        /// <summary>
        /// The metric short name.
        /// </summary>
        public readonly string ShortName;
        /// <summary>
        /// The metric statsd interval.
        /// </summary>
        public readonly int StatsdInterval;
        /// <summary>
        /// The metric type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The metric unit.
        /// </summary>
        public readonly string Unit;

        [OutputConstructor]
        private GetMetricMetadataResult(
            string description,

            string id,

            string integration,

            string metricName,

            string perUnit,

            string shortName,

            int statsdInterval,

            string type,

            string unit)
        {
            Description = description;
            Id = id;
            Integration = integration;
            MetricName = metricName;
            PerUnit = perUnit;
            ShortName = shortName;
            StatsdInterval = statsdInterval;
            Type = type;
            Unit = unit;
        }
    }
}
