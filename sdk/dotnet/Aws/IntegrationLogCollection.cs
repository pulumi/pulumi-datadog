// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Aws
{
    /// <summary>
    /// Provides a Datadog - Amazon Web Services integration log collection resource. This can be used to manage which
    /// AWS services logs are collected from for an account.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // Create a new Datadog - Amazon Web Services integration lambda arn
    ///         var main = new Datadog.Aws.IntegrationLogCollection("main", new Datadog.Aws.IntegrationLogCollectionArgs
    ///         {
    ///             AccountId = "1234567890",
    ///             Services = 
    ///             {
    ///                 "lambda",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class IntegrationLogCollection : Pulumi.CustomResource
    {
        /// <summary>
        /// Your AWS Account ID without dashes.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// A list of services to collect logs from. See the
        /// [api docs](https://docs.datadoghq.com/api/v1/aws-logs-integration/#get-list-of-aws-log-ready-services) for more details on which
        /// services are supported.
        /// </summary>
        [Output("services")]
        public Output<ImmutableArray<string>> Services { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationLogCollection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationLogCollection(string name, IntegrationLogCollectionArgs args, CustomResourceOptions? options = null)
            : base("datadog:aws/integrationLogCollection:IntegrationLogCollection", name, args ?? new IntegrationLogCollectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationLogCollection(string name, Input<string> id, IntegrationLogCollectionState? state = null, CustomResourceOptions? options = null)
            : base("datadog:aws/integrationLogCollection:IntegrationLogCollection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationLogCollection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationLogCollection Get(string name, Input<string> id, IntegrationLogCollectionState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationLogCollection(name, id, state, options);
        }
    }

    public sealed class IntegrationLogCollectionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Your AWS Account ID without dashes.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("services", required: true)]
        private InputList<string>? _services;

        /// <summary>
        /// A list of services to collect logs from. See the
        /// [api docs](https://docs.datadoghq.com/api/v1/aws-logs-integration/#get-list-of-aws-log-ready-services) for more details on which
        /// services are supported.
        /// </summary>
        public InputList<string> Services
        {
            get => _services ?? (_services = new InputList<string>());
            set => _services = value;
        }

        public IntegrationLogCollectionArgs()
        {
        }
    }

    public sealed class IntegrationLogCollectionState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Your AWS Account ID without dashes.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("services")]
        private InputList<string>? _services;

        /// <summary>
        /// A list of services to collect logs from. See the
        /// [api docs](https://docs.datadoghq.com/api/v1/aws-logs-integration/#get-list-of-aws-log-ready-services) for more details on which
        /// services are supported.
        /// </summary>
        public InputList<string> Services
        {
            get => _services ?? (_services = new InputList<string>());
            set => _services = value;
        }

        public IntegrationLogCollectionState()
        {
        }
    }
}
