// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Aws
{
    /// <summary>
    /// Provides a Datadog AWS tag filter resource. This can be used to create and manage Datadog AWS tag filters.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a new Datadog - Amazon Web Services integration tag filter
    ///     var foo = new Datadog.Aws.IntegrationTagFilter("foo", new()
    ///     {
    ///         AccountId = "123456789010",
    ///         Namespace = "sqs",
    ///         TagFilterStr = "key:value",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Amazon Web Services log filter resource can be imported using their account ID and namespace separated with a colon (:).
    /// 
    /// ```sh
    /// $ pulumi import datadog:aws/integrationTagFilter:IntegrationTagFilter foo ${account_id}:${namespace}
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:aws/integrationTagFilter:IntegrationTagFilter")]
    public partial class IntegrationTagFilter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Your AWS Account ID without dashes.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The namespace associated with the tag filter entry. Valid values are `elb`, `application_elb`, `sqs`, `rds`, `custom`, `network_elb`, `lambda`.
        /// </summary>
        [Output("namespace")]
        public Output<string> Namespace { get; private set; } = null!;

        /// <summary>
        /// The tag filter string.
        /// </summary>
        [Output("tagFilterStr")]
        public Output<string> TagFilterStr { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationTagFilter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationTagFilter(string name, IntegrationTagFilterArgs args, CustomResourceOptions? options = null)
            : base("datadog:aws/integrationTagFilter:IntegrationTagFilter", name, args ?? new IntegrationTagFilterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationTagFilter(string name, Input<string> id, IntegrationTagFilterState? state = null, CustomResourceOptions? options = null)
            : base("datadog:aws/integrationTagFilter:IntegrationTagFilter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationTagFilter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationTagFilter Get(string name, Input<string> id, IntegrationTagFilterState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationTagFilter(name, id, state, options);
        }
    }

    public sealed class IntegrationTagFilterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Your AWS Account ID without dashes.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The namespace associated with the tag filter entry. Valid values are `elb`, `application_elb`, `sqs`, `rds`, `custom`, `network_elb`, `lambda`.
        /// </summary>
        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        /// <summary>
        /// The tag filter string.
        /// </summary>
        [Input("tagFilterStr", required: true)]
        public Input<string> TagFilterStr { get; set; } = null!;

        public IntegrationTagFilterArgs()
        {
        }
        public static new IntegrationTagFilterArgs Empty => new IntegrationTagFilterArgs();
    }

    public sealed class IntegrationTagFilterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Your AWS Account ID without dashes.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The namespace associated with the tag filter entry. Valid values are `elb`, `application_elb`, `sqs`, `rds`, `custom`, `network_elb`, `lambda`.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The tag filter string.
        /// </summary>
        [Input("tagFilterStr")]
        public Input<string>? TagFilterStr { get; set; }

        public IntegrationTagFilterState()
        {
        }
        public static new IntegrationTagFilterState Empty => new IntegrationTagFilterState();
    }
}
