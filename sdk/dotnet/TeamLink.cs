// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog TeamLink resource. This can be used to create and manage Datadog team_link.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Datadog.Team("foo", new()
    ///     {
    ///         Description = "Example team",
    ///         Handle = "example-team-updated",
    ///         Name = "Example Team-updated",
    ///     });
    /// 
    ///     // Create new team_link resource
    ///     var fooTeamLink = new Datadog.TeamLink("foo", new()
    ///     {
    ///         TeamId = foo.Id,
    ///         Label = "Link label",
    ///         Position = 0,
    ///         Url = "https://example.com",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/teamLink:TeamLink new_list "${team_id}:${resource_id}"
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/teamLink:TeamLink")]
    public partial class TeamLink : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The link's label.
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// The link's position, used to sort links for the team.
        /// </summary>
        [Output("position")]
        public Output<int> Position { get; private set; } = null!;

        /// <summary>
        /// ID of the team the link is associated with.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;

        /// <summary>
        /// The URL for the link.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a TeamLink resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TeamLink(string name, TeamLinkArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/teamLink:TeamLink", name, args ?? new TeamLinkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TeamLink(string name, Input<string> id, TeamLinkState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/teamLink:TeamLink", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TeamLink resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TeamLink Get(string name, Input<string> id, TeamLinkState? state = null, CustomResourceOptions? options = null)
        {
            return new TeamLink(name, id, state, options);
        }
    }

    public sealed class TeamLinkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The link's label.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        /// <summary>
        /// The link's position, used to sort links for the team.
        /// </summary>
        [Input("position")]
        public Input<int>? Position { get; set; }

        /// <summary>
        /// ID of the team the link is associated with.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        /// <summary>
        /// The URL for the link.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public TeamLinkArgs()
        {
        }
        public static new TeamLinkArgs Empty => new TeamLinkArgs();
    }

    public sealed class TeamLinkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The link's label.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// The link's position, used to sort links for the team.
        /// </summary>
        [Input("position")]
        public Input<int>? Position { get; set; }

        /// <summary>
        /// ID of the team the link is associated with.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        /// <summary>
        /// The URL for the link.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public TeamLinkState()
        {
        }
        public static new TeamLinkState Empty => new TeamLinkState();
    }
}
