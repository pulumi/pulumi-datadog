// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Resource for interacting with the slo_correction API.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleSlo = new Datadog.ServiceLevelObjective("exampleSlo", new Datadog.ServiceLevelObjectiveArgs
    ///         {
    ///             Description = "some updated description about example_slo SLO",
    ///             Name = "example slo",
    ///             Query = new Datadog.Inputs.ServiceLevelObjectiveQueryArgs
    ///             {
    ///                 Denominator = "sum:my.metric{type:good}.as_count() + sum:my.metric{type:bad}.as_count()",
    ///                 Numerator = "sum:my.metric{type:good}.as_count()",
    ///             },
    ///             Tags = 
    ///             {
    ///                 "foo:bar",
    ///             },
    ///             Thresholds = 
    ///             {
    ///                 new Datadog.Inputs.ServiceLevelObjectiveThresholdArgs
    ///                 {
    ///                     Target = 99.5,
    ///                     Timeframe = "7d",
    ///                     Warning = 99.8,
    ///                 },
    ///             },
    ///             Type = "metric",
    ///         });
    ///         var exampleSloCorrection = new Datadog.SloCorrection("exampleSloCorrection", new Datadog.SloCorrectionArgs
    ///         {
    ///             Category = "Scheduled Maintenance",
    ///             Description = "correction example",
    ///             End = 1735718600,
    ///             SloId = "datadog_service_level_objective.example_slo.id",
    ///             Start = 1735707000,
    ///             Timezone = "UTC",
    ///         });
    ///         var exampleSloCorrectionWithRecurrence = new Datadog.SloCorrection("exampleSloCorrectionWithRecurrence", new Datadog.SloCorrectionArgs
    ///         {
    ///             Category = "Scheduled Maintenance",
    ///             Description = "correction example with recurrence",
    ///             Duration = 3600,
    ///             Rrule = "FREQ=DAILY;INTERVAL=3;",
    ///             SloId = "datadog_service_level_objective.example_slo.id",
    ///             Start = 1735707000,
    ///             Timezone = "UTC",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import datadog:index/sloCorrection:SloCorrection testing_slo_correction 11111111-3fee-11eb-8a13-77cd9f15119e
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/sloCorrection:SloCorrection")]
    public partial class SloCorrection : Pulumi.CustomResource
    {
        /// <summary>
        /// Category the SLO correction belongs to. Valid values are `Scheduled Maintenance`, `Outside Business Hours`, `Deployment`, `Other`.
        /// </summary>
        [Output("category")]
        public Output<string> Category { get; private set; } = null!;

        /// <summary>
        /// Description of the correction being made.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Length of time in seconds for a specified `rrule` recurring SLO correction (required if specifying `rrule`)
        /// </summary>
        [Output("duration")]
        public Output<int?> Duration { get; private set; } = null!;

        /// <summary>
        /// Ending time of the correction in epoch seconds. Required for one time corrections, but optional if `rrule` is specified
        /// </summary>
        [Output("end")]
        public Output<int?> End { get; private set; } = null!;

        /// <summary>
        /// Recurrence rules as defined in the iCalendar RFC 5545.
        /// </summary>
        [Output("rrule")]
        public Output<string?> Rrule { get; private set; } = null!;

        /// <summary>
        /// ID of the SLO that this correction will be applied to.
        /// </summary>
        [Output("sloId")]
        public Output<string> SloId { get; private set; } = null!;

        /// <summary>
        /// Starting time of the correction in epoch seconds.
        /// </summary>
        [Output("start")]
        public Output<int> Start { get; private set; } = null!;

        /// <summary>
        /// The timezone to display in the UI for the correction times (defaults to "UTC")
        /// </summary>
        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;


        /// <summary>
        /// Create a SloCorrection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SloCorrection(string name, SloCorrectionArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/sloCorrection:SloCorrection", name, args ?? new SloCorrectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SloCorrection(string name, Input<string> id, SloCorrectionState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/sloCorrection:SloCorrection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SloCorrection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SloCorrection Get(string name, Input<string> id, SloCorrectionState? state = null, CustomResourceOptions? options = null)
        {
            return new SloCorrection(name, id, state, options);
        }
    }

    public sealed class SloCorrectionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Category the SLO correction belongs to. Valid values are `Scheduled Maintenance`, `Outside Business Hours`, `Deployment`, `Other`.
        /// </summary>
        [Input("category", required: true)]
        public Input<string> Category { get; set; } = null!;

        /// <summary>
        /// Description of the correction being made.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Length of time in seconds for a specified `rrule` recurring SLO correction (required if specifying `rrule`)
        /// </summary>
        [Input("duration")]
        public Input<int>? Duration { get; set; }

        /// <summary>
        /// Ending time of the correction in epoch seconds. Required for one time corrections, but optional if `rrule` is specified
        /// </summary>
        [Input("end")]
        public Input<int>? End { get; set; }

        /// <summary>
        /// Recurrence rules as defined in the iCalendar RFC 5545.
        /// </summary>
        [Input("rrule")]
        public Input<string>? Rrule { get; set; }

        /// <summary>
        /// ID of the SLO that this correction will be applied to.
        /// </summary>
        [Input("sloId", required: true)]
        public Input<string> SloId { get; set; } = null!;

        /// <summary>
        /// Starting time of the correction in epoch seconds.
        /// </summary>
        [Input("start", required: true)]
        public Input<int> Start { get; set; } = null!;

        /// <summary>
        /// The timezone to display in the UI for the correction times (defaults to "UTC")
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public SloCorrectionArgs()
        {
        }
    }

    public sealed class SloCorrectionState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Category the SLO correction belongs to. Valid values are `Scheduled Maintenance`, `Outside Business Hours`, `Deployment`, `Other`.
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// Description of the correction being made.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Length of time in seconds for a specified `rrule` recurring SLO correction (required if specifying `rrule`)
        /// </summary>
        [Input("duration")]
        public Input<int>? Duration { get; set; }

        /// <summary>
        /// Ending time of the correction in epoch seconds. Required for one time corrections, but optional if `rrule` is specified
        /// </summary>
        [Input("end")]
        public Input<int>? End { get; set; }

        /// <summary>
        /// Recurrence rules as defined in the iCalendar RFC 5545.
        /// </summary>
        [Input("rrule")]
        public Input<string>? Rrule { get; set; }

        /// <summary>
        /// ID of the SLO that this correction will be applied to.
        /// </summary>
        [Input("sloId")]
        public Input<string>? SloId { get; set; }

        /// <summary>
        /// Starting time of the correction in epoch seconds.
        /// </summary>
        [Input("start")]
        public Input<int>? Start { get; set; }

        /// <summary>
        /// The timezone to display in the UI for the correction times (defaults to "UTC")
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public SloCorrectionState()
        {
        }
    }
}
