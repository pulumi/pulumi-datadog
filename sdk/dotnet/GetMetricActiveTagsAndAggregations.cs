// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    public static class GetMetricActiveTagsAndAggregations
    {
        /// <summary>
        /// Use this data source to retrieve active tags and aggregations associated with a metric to use in other resources.
        /// </summary>
        public static Task<GetMetricActiveTagsAndAggregationsResult> InvokeAsync(GetMetricActiveTagsAndAggregationsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetricActiveTagsAndAggregationsResult>("datadog:index/getMetricActiveTagsAndAggregations:getMetricActiveTagsAndAggregations", args ?? new GetMetricActiveTagsAndAggregationsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve active tags and aggregations associated with a metric to use in other resources.
        /// </summary>
        public static Output<GetMetricActiveTagsAndAggregationsResult> Invoke(GetMetricActiveTagsAndAggregationsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetricActiveTagsAndAggregationsResult>("datadog:index/getMetricActiveTagsAndAggregations:getMetricActiveTagsAndAggregations", args ?? new GetMetricActiveTagsAndAggregationsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve active tags and aggregations associated with a metric to use in other resources.
        /// </summary>
        public static Output<GetMetricActiveTagsAndAggregationsResult> Invoke(GetMetricActiveTagsAndAggregationsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetricActiveTagsAndAggregationsResult>("datadog:index/getMetricActiveTagsAndAggregations:getMetricActiveTagsAndAggregations", args ?? new GetMetricActiveTagsAndAggregationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetricActiveTagsAndAggregationsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The metric for which to fetch tags.
        /// </summary>
        [Input("metric", required: true)]
        public string Metric { get; set; } = null!;

        /// <summary>
        /// The number of seconds to look back from now.
        /// </summary>
        [Input("window")]
        public int? Window { get; set; }

        public GetMetricActiveTagsAndAggregationsArgs()
        {
        }
        public static new GetMetricActiveTagsAndAggregationsArgs Empty => new GetMetricActiveTagsAndAggregationsArgs();
    }

    public sealed class GetMetricActiveTagsAndAggregationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The metric for which to fetch tags.
        /// </summary>
        [Input("metric", required: true)]
        public Input<string> Metric { get; set; } = null!;

        /// <summary>
        /// The number of seconds to look back from now.
        /// </summary>
        [Input("window")]
        public Input<int>? Window { get; set; }

        public GetMetricActiveTagsAndAggregationsInvokeArgs()
        {
        }
        public static new GetMetricActiveTagsAndAggregationsInvokeArgs Empty => new GetMetricActiveTagsAndAggregationsInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetricActiveTagsAndAggregationsResult
    {
        /// <summary>
        /// The active aggregations associated with the metric.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMetricActiveTagsAndAggregationsActiveAggregationResult> ActiveAggregations;
        /// <summary>
        /// The active tags associated with the metric.
        /// </summary>
        public readonly ImmutableArray<string> ActiveTags;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The metric for which to fetch tags.
        /// </summary>
        public readonly string Metric;
        /// <summary>
        /// The number of seconds to look back from now.
        /// </summary>
        public readonly int? Window;

        [OutputConstructor]
        private GetMetricActiveTagsAndAggregationsResult(
            ImmutableArray<Outputs.GetMetricActiveTagsAndAggregationsActiveAggregationResult> activeAggregations,

            ImmutableArray<string> activeTags,

            string id,

            string metric,

            int? window)
        {
            ActiveAggregations = activeAggregations;
            ActiveTags = activeTags;
            Id = id;
            Metric = metric;
            Window = window;
        }
    }
}
