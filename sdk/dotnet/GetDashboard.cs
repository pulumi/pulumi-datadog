// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    public static class GetDashboard
    {
        /// <summary>
        /// Use this data source to retrieve information about an existing dashboard, for use in other resources. In particular, it can be used in a monitor message to link to a specific dashboard.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Datadog = Pulumi.Datadog;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Datadog.GetDashboard.InvokeAsync(new Datadog.GetDashboardArgs
        ///         {
        ///             Name = "My super dashboard",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDashboardResult> InvokeAsync(GetDashboardArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDashboardResult>("datadog:index/getDashboard:getDashboard", args ?? new GetDashboardArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about an existing dashboard, for use in other resources. In particular, it can be used in a monitor message to link to a specific dashboard.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Datadog = Pulumi.Datadog;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Datadog.GetDashboard.InvokeAsync(new Datadog.GetDashboardArgs
        ///         {
        ///             Name = "My super dashboard",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDashboardResult> Invoke(GetDashboardInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDashboardResult>("datadog:index/getDashboard:getDashboard", args ?? new GetDashboardInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDashboardArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The dashboard name to search for. Must only match one dashboard.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetDashboardArgs()
        {
        }
    }

    public sealed class GetDashboardInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The dashboard name to search for. Must only match one dashboard.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetDashboardInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDashboardResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The dashboard name to search for. Must only match one dashboard.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The name of the dashboard.
        /// </summary>
        public readonly string Title;
        /// <summary>
        /// The URL to a specific dashboard.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetDashboardResult(
            string id,

            string name,

            string title,

            string url)
        {
            Id = id;
            Name = name;
            Title = title;
            Url = url;
        }
    }
}
