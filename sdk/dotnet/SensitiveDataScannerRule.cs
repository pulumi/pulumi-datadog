// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog SensitiveDataScannerRule resource. This can be used to create and manage Datadog sensitive_data_scanner_rule. Setting the `create_before_destroy` lifecycle Meta-argument to `true` is highly recommended if modifying the `included_keyword_configuration` field to avoid unexpectedly disabling Sensitive Data Scanner groups.
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/sensitiveDataScannerRule:SensitiveDataScannerRule new_list "&lt;rule_id&gt;"
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/sensitiveDataScannerRule:SensitiveDataScannerRule")]
    public partial class SensitiveDataScannerRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Attributes excluded from the scan. If namespaces is provided, it has to be a sub-path of the namespaces array.
        /// </summary>
        [Output("excludedNamespaces")]
        public Output<ImmutableArray<string>> ExcludedNamespaces { get; private set; } = null!;

        /// <summary>
        /// Id of the scanning group the rule belongs to.
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        /// <summary>
        /// Object defining a set of keywords and a number of characters that help reduce noise. You can provide a list of keywords you would like to check within a defined proximity of the matching pattern. If any of the keywords are found within the proximity check then the match is kept. If none are found, the match is discarded. Setting the `create_before_destroy` lifecycle Meta-argument to `true` is highly recommended if modifying this field to avoid unexpectedly disabling Sensitive Data Scanner groups.
        /// </summary>
        [Output("includedKeywordConfiguration")]
        public Output<Outputs.SensitiveDataScannerRuleIncludedKeywordConfiguration?> IncludedKeywordConfiguration { get; private set; } = null!;

        /// <summary>
        /// Whether or not the rule is enabled.
        /// </summary>
        [Output("isEnabled")]
        public Output<bool?> IsEnabled { get; private set; } = null!;

        /// <summary>
        /// Name of the rule.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// Attributes included in the scan. If namespaces is empty or missing, all attributes except excluded_namespaces are scanned. If both are missing the whole event is scanned.
        /// </summary>
        [Output("namespaces")]
        public Output<ImmutableArray<string>> Namespaces { get; private set; } = null!;

        /// <summary>
        /// Not included if there is a relationship to a standard pattern.
        /// </summary>
        [Output("pattern")]
        public Output<string?> Pattern { get; private set; } = null!;

        /// <summary>
        /// Priority level of the rule (optional). Used to order sensitive data discovered in the sds summary page. It must be between 1 and 5 (1 being the most important).
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;

        /// <summary>
        /// Id of the standard pattern the rule refers to. If provided, then pattern must not be provided.
        /// </summary>
        [Output("standardPatternId")]
        public Output<string?> StandardPatternId { get; private set; } = null!;

        /// <summary>
        /// List of tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Object describing how the scanned event will be replaced. Defaults to `type: none`
        /// </summary>
        [Output("textReplacement")]
        public Output<Outputs.SensitiveDataScannerRuleTextReplacement?> TextReplacement { get; private set; } = null!;


        /// <summary>
        /// Create a SensitiveDataScannerRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SensitiveDataScannerRule(string name, SensitiveDataScannerRuleArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/sensitiveDataScannerRule:SensitiveDataScannerRule", name, args ?? new SensitiveDataScannerRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SensitiveDataScannerRule(string name, Input<string> id, SensitiveDataScannerRuleState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/sensitiveDataScannerRule:SensitiveDataScannerRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SensitiveDataScannerRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SensitiveDataScannerRule Get(string name, Input<string> id, SensitiveDataScannerRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new SensitiveDataScannerRule(name, id, state, options);
        }
    }

    public sealed class SensitiveDataScannerRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("excludedNamespaces")]
        private InputList<string>? _excludedNamespaces;

        /// <summary>
        /// Attributes excluded from the scan. If namespaces is provided, it has to be a sub-path of the namespaces array.
        /// </summary>
        public InputList<string> ExcludedNamespaces
        {
            get => _excludedNamespaces ?? (_excludedNamespaces = new InputList<string>());
            set => _excludedNamespaces = value;
        }

        /// <summary>
        /// Id of the scanning group the rule belongs to.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        /// <summary>
        /// Object defining a set of keywords and a number of characters that help reduce noise. You can provide a list of keywords you would like to check within a defined proximity of the matching pattern. If any of the keywords are found within the proximity check then the match is kept. If none are found, the match is discarded. Setting the `create_before_destroy` lifecycle Meta-argument to `true` is highly recommended if modifying this field to avoid unexpectedly disabling Sensitive Data Scanner groups.
        /// </summary>
        [Input("includedKeywordConfiguration")]
        public Input<Inputs.SensitiveDataScannerRuleIncludedKeywordConfigurationArgs>? IncludedKeywordConfiguration { get; set; }

        /// <summary>
        /// Whether or not the rule is enabled.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// Name of the rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namespaces")]
        private InputList<string>? _namespaces;

        /// <summary>
        /// Attributes included in the scan. If namespaces is empty or missing, all attributes except excluded_namespaces are scanned. If both are missing the whole event is scanned.
        /// </summary>
        public InputList<string> Namespaces
        {
            get => _namespaces ?? (_namespaces = new InputList<string>());
            set => _namespaces = value;
        }

        /// <summary>
        /// Not included if there is a relationship to a standard pattern.
        /// </summary>
        [Input("pattern")]
        public Input<string>? Pattern { get; set; }

        /// <summary>
        /// Priority level of the rule (optional). Used to order sensitive data discovered in the sds summary page. It must be between 1 and 5 (1 being the most important).
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Id of the standard pattern the rule refers to. If provided, then pattern must not be provided.
        /// </summary>
        [Input("standardPatternId")]
        public Input<string>? StandardPatternId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// List of tags.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Object describing how the scanned event will be replaced. Defaults to `type: none`
        /// </summary>
        [Input("textReplacement")]
        public Input<Inputs.SensitiveDataScannerRuleTextReplacementArgs>? TextReplacement { get; set; }

        public SensitiveDataScannerRuleArgs()
        {
        }
        public static new SensitiveDataScannerRuleArgs Empty => new SensitiveDataScannerRuleArgs();
    }

    public sealed class SensitiveDataScannerRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("excludedNamespaces")]
        private InputList<string>? _excludedNamespaces;

        /// <summary>
        /// Attributes excluded from the scan. If namespaces is provided, it has to be a sub-path of the namespaces array.
        /// </summary>
        public InputList<string> ExcludedNamespaces
        {
            get => _excludedNamespaces ?? (_excludedNamespaces = new InputList<string>());
            set => _excludedNamespaces = value;
        }

        /// <summary>
        /// Id of the scanning group the rule belongs to.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// Object defining a set of keywords and a number of characters that help reduce noise. You can provide a list of keywords you would like to check within a defined proximity of the matching pattern. If any of the keywords are found within the proximity check then the match is kept. If none are found, the match is discarded. Setting the `create_before_destroy` lifecycle Meta-argument to `true` is highly recommended if modifying this field to avoid unexpectedly disabling Sensitive Data Scanner groups.
        /// </summary>
        [Input("includedKeywordConfiguration")]
        public Input<Inputs.SensitiveDataScannerRuleIncludedKeywordConfigurationGetArgs>? IncludedKeywordConfiguration { get; set; }

        /// <summary>
        /// Whether or not the rule is enabled.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// Name of the rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namespaces")]
        private InputList<string>? _namespaces;

        /// <summary>
        /// Attributes included in the scan. If namespaces is empty or missing, all attributes except excluded_namespaces are scanned. If both are missing the whole event is scanned.
        /// </summary>
        public InputList<string> Namespaces
        {
            get => _namespaces ?? (_namespaces = new InputList<string>());
            set => _namespaces = value;
        }

        /// <summary>
        /// Not included if there is a relationship to a standard pattern.
        /// </summary>
        [Input("pattern")]
        public Input<string>? Pattern { get; set; }

        /// <summary>
        /// Priority level of the rule (optional). Used to order sensitive data discovered in the sds summary page. It must be between 1 and 5 (1 being the most important).
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Id of the standard pattern the rule refers to. If provided, then pattern must not be provided.
        /// </summary>
        [Input("standardPatternId")]
        public Input<string>? StandardPatternId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// List of tags.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Object describing how the scanned event will be replaced. Defaults to `type: none`
        /// </summary>
        [Input("textReplacement")]
        public Input<Inputs.SensitiveDataScannerRuleTextReplacementGetArgs>? TextReplacement { get; set; }

        public SensitiveDataScannerRuleState()
        {
        }
        public static new SensitiveDataScannerRuleState Empty => new SensitiveDataScannerRuleState();
    }
}
