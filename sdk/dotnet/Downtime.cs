// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog downtime resource. This can be used to create and manage Datadog downtimes.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Example: downtime for all monitors
    ///     // Create a new daily 1700-0900 Datadog downtime for all monitors
    ///     var foo = new Datadog.Downtime("foo", new()
    ///     {
    ///         End = 1483365600,
    ///         Recurrence = new Datadog.Inputs.DowntimeRecurrenceArgs
    ///         {
    ///             Period = 1,
    ///             Type = "days",
    ///         },
    ///         Scopes = new[]
    ///         {
    ///             "*",
    ///         },
    ///         Start = 1483308000,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import datadog:index/downtime:Downtime bytes_received_localhost 2081
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/downtime:Downtime")]
    public partial class Downtime : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When true indicates this downtime is being actively applied
        /// </summary>
        [Output("active")]
        public Output<bool> Active { get; private set; } = null!;

        /// <summary>
        /// The id corresponding to the downtime object definition of the active child for the original parent recurring downtime. This field will only exist on recurring downtimes.
        /// </summary>
        [Output("activeChildId")]
        public Output<int> ActiveChildId { get; private set; } = null!;

        /// <summary>
        /// When true indicates this downtime is not being applied
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        /// <summary>
        /// Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
        /// </summary>
        [Output("end")]
        public Output<int?> End { get; private set; } = null!;

        /// <summary>
        /// String representing date and time to end the downtime in RFC3339 format.
        /// </summary>
        [Output("endDate")]
        public Output<string?> EndDate { get; private set; } = null!;

        /// <summary>
        /// An optional message to provide when creating the downtime, can include notification handles
        /// </summary>
        [Output("message")]
        public Output<string?> Message { get; private set; } = null!;

        /// <summary>
        /// When specified, this downtime will only apply to this monitor
        /// </summary>
        [Output("monitorId")]
        public Output<int?> MonitorId { get; private set; } = null!;

        /// <summary>
        /// A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
        /// </summary>
        [Output("monitorTags")]
        public Output<ImmutableArray<string>> MonitorTags { get; private set; } = null!;

        /// <summary>
        /// When true the first recovery notification during the downtime will be muted
        /// </summary>
        [Output("muteFirstRecoveryNotification")]
        public Output<bool?> MuteFirstRecoveryNotification { get; private set; } = null!;

        /// <summary>
        /// Optional recurring schedule for this downtime
        /// </summary>
        [Output("recurrence")]
        public Output<Outputs.DowntimeRecurrence?> Recurrence { get; private set; } = null!;

        /// <summary>
        /// specify the group scope to which this downtime applies. For everything use '*'
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// Specify when this downtime should start. Accepts a Unix timestamp in UTC.
        /// </summary>
        [Output("start")]
        public Output<int?> Start { get; private set; } = null!;

        /// <summary>
        /// String representing date and time to start the downtime in RFC3339 format.
        /// </summary>
        [Output("startDate")]
        public Output<string?> StartDate { get; private set; } = null!;

        /// <summary>
        /// The timezone for the downtime, default UTC. Follows IANA timezone database identifiers.
        /// </summary>
        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;


        /// <summary>
        /// Create a Downtime resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Downtime(string name, DowntimeArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/downtime:Downtime", name, args ?? new DowntimeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Downtime(string name, Input<string> id, DowntimeState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/downtime:Downtime", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Downtime resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Downtime Get(string name, Input<string> id, DowntimeState? state = null, CustomResourceOptions? options = null)
        {
            return new Downtime(name, id, state, options);
        }
    }

    public sealed class DowntimeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
        /// </summary>
        [Input("end")]
        public Input<int>? End { get; set; }

        /// <summary>
        /// String representing date and time to end the downtime in RFC3339 format.
        /// </summary>
        [Input("endDate")]
        public Input<string>? EndDate { get; set; }

        /// <summary>
        /// An optional message to provide when creating the downtime, can include notification handles
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// When specified, this downtime will only apply to this monitor
        /// </summary>
        [Input("monitorId")]
        public Input<int>? MonitorId { get; set; }

        [Input("monitorTags")]
        private InputList<string>? _monitorTags;

        /// <summary>
        /// A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
        /// </summary>
        public InputList<string> MonitorTags
        {
            get => _monitorTags ?? (_monitorTags = new InputList<string>());
            set => _monitorTags = value;
        }

        /// <summary>
        /// When true the first recovery notification during the downtime will be muted
        /// </summary>
        [Input("muteFirstRecoveryNotification")]
        public Input<bool>? MuteFirstRecoveryNotification { get; set; }

        /// <summary>
        /// Optional recurring schedule for this downtime
        /// </summary>
        [Input("recurrence")]
        public Input<Inputs.DowntimeRecurrenceArgs>? Recurrence { get; set; }

        [Input("scopes", required: true)]
        private InputList<string>? _scopes;

        /// <summary>
        /// specify the group scope to which this downtime applies. For everything use '*'
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Specify when this downtime should start. Accepts a Unix timestamp in UTC.
        /// </summary>
        [Input("start")]
        public Input<int>? Start { get; set; }

        /// <summary>
        /// String representing date and time to start the downtime in RFC3339 format.
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        /// <summary>
        /// The timezone for the downtime, default UTC. Follows IANA timezone database identifiers.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public DowntimeArgs()
        {
        }
        public static new DowntimeArgs Empty => new DowntimeArgs();
    }

    public sealed class DowntimeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When true indicates this downtime is being actively applied
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// The id corresponding to the downtime object definition of the active child for the original parent recurring downtime. This field will only exist on recurring downtimes.
        /// </summary>
        [Input("activeChildId")]
        public Input<int>? ActiveChildId { get; set; }

        /// <summary>
        /// When true indicates this downtime is not being applied
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
        /// </summary>
        [Input("end")]
        public Input<int>? End { get; set; }

        /// <summary>
        /// String representing date and time to end the downtime in RFC3339 format.
        /// </summary>
        [Input("endDate")]
        public Input<string>? EndDate { get; set; }

        /// <summary>
        /// An optional message to provide when creating the downtime, can include notification handles
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// When specified, this downtime will only apply to this monitor
        /// </summary>
        [Input("monitorId")]
        public Input<int>? MonitorId { get; set; }

        [Input("monitorTags")]
        private InputList<string>? _monitorTags;

        /// <summary>
        /// A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
        /// </summary>
        public InputList<string> MonitorTags
        {
            get => _monitorTags ?? (_monitorTags = new InputList<string>());
            set => _monitorTags = value;
        }

        /// <summary>
        /// When true the first recovery notification during the downtime will be muted
        /// </summary>
        [Input("muteFirstRecoveryNotification")]
        public Input<bool>? MuteFirstRecoveryNotification { get; set; }

        /// <summary>
        /// Optional recurring schedule for this downtime
        /// </summary>
        [Input("recurrence")]
        public Input<Inputs.DowntimeRecurrenceGetArgs>? Recurrence { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// specify the group scope to which this downtime applies. For everything use '*'
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Specify when this downtime should start. Accepts a Unix timestamp in UTC.
        /// </summary>
        [Input("start")]
        public Input<int>? Start { get; set; }

        /// <summary>
        /// String representing date and time to start the downtime in RFC3339 format.
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        /// <summary>
        /// The timezone for the downtime, default UTC. Follows IANA timezone database identifiers.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public DowntimeState()
        {
        }
        public static new DowntimeState Empty => new DowntimeState();
    }
}
