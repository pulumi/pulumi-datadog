// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog Logs Index API resource. This can be used to manage the order of Datadog logs indexes.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var sampleIndexOrder = new Datadog.LogsIndexOrder("sampleIndexOrder", new Datadog.LogsIndexOrderArgs
    ///         {
    ///             Name = "sample_index_order",
    ///             Indexes = 
    ///             {
    ///                 datadog_logs_index.Sample_index.Id,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// # The Datadog Terraform Provider does not support the creation and deletion of index orders. There must be at most one `datadog_logs_index_order` resource
    /// 
    /// ```sh
    ///  $ pulumi import datadog:index/logsIndexOrder:LogsIndexOrder name&gt; &lt;name&gt;
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/logsIndexOrder:LogsIndexOrder")]
    public partial class LogsIndexOrder : Pulumi.CustomResource
    {
        /// <summary>
        /// The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
        /// </summary>
        [Output("indexes")]
        public Output<ImmutableArray<string>> Indexes { get; private set; } = null!;

        /// <summary>
        /// The unique name of the index order resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a LogsIndexOrder resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogsIndexOrder(string name, LogsIndexOrderArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/logsIndexOrder:LogsIndexOrder", name, args ?? new LogsIndexOrderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogsIndexOrder(string name, Input<string> id, LogsIndexOrderState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/logsIndexOrder:LogsIndexOrder", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogsIndexOrder resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogsIndexOrder Get(string name, Input<string> id, LogsIndexOrderState? state = null, CustomResourceOptions? options = null)
        {
            return new LogsIndexOrder(name, id, state, options);
        }
    }

    public sealed class LogsIndexOrderArgs : Pulumi.ResourceArgs
    {
        [Input("indexes", required: true)]
        private InputList<string>? _indexes;

        /// <summary>
        /// The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
        /// </summary>
        public InputList<string> Indexes
        {
            get => _indexes ?? (_indexes = new InputList<string>());
            set => _indexes = value;
        }

        /// <summary>
        /// The unique name of the index order resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public LogsIndexOrderArgs()
        {
        }
    }

    public sealed class LogsIndexOrderState : Pulumi.ResourceArgs
    {
        [Input("indexes")]
        private InputList<string>? _indexes;

        /// <summary>
        /// The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
        /// </summary>
        public InputList<string> Indexes
        {
            get => _indexes ?? (_indexes = new InputList<string>());
            set => _indexes = value;
        }

        /// <summary>
        /// The unique name of the index order resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public LogsIndexOrderState()
        {
        }
    }
}
