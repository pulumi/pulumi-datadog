// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog Software Catalog Entity resource. This can be used to create and manage entities in Datadog Software Catalog using the YAML/JSON definition.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // v3 service entity 
    ///     var serviceV3 = new Datadog.SoftwareCatalog("service_v3", new()
    ///     {
    ///         Entity = @"apiVersion: v3
    /// kind: service
    /// metadata:
    ///   name: shopping-cart
    ///   displayName: Shopping Cart
    ///   inheritFrom: service:otherService
    ///   tags:
    ///     - tag:value
    ///   links:
    ///     - name: shopping-cart runbook
    ///       type: runbook
    ///       url: https://runbook/shopping-cart
    ///     - name: shopping-cart architecture
    ///       provider: gdoc
    ///       url: https://google.drive/shopping-cart-architecture
    ///       type: doc
    ///     - name: shopping-cart Wiki
    ///       provider: wiki
    ///       url: https://wiki/shopping-cart
    ///       type: doc
    ///     - name: shopping-cart source code
    ///       provider: github
    ///       url: http://github/shopping-cart
    ///       type: repo
    ///   contacts:
    ///     - name: Support Email
    ///       type: email
    ///       contact: team@shopping.com
    ///     - name: Support Slack
    ///       type: slack
    ///       contact: https://www.slack.com/archives/shopping-cart
    ///   owner: myteam
    ///   additionalOwners:
    ///     - name: opsTeam
    ///       type: operator
    /// integrations:
    ///   pagerduty:
    ///     serviceURL: https://www.pagerduty.com/service-directory/Pshopping-cart
    ///   opsgenie:
    ///     serviceURL: https://www.opsgenie.com/service/shopping-cart
    ///     region: US
    /// extensions:
    ///   datadoghq.com/shopping-cart:
    ///     customField: customValue
    /// spec:
    ///   lifecycle: production
    ///   tier: ""1""
    ///   type: web
    ///   languages:
    ///     - go
    ///     - python
    ///   dependsOn:
    ///     - service:serviceA
    ///     - service:serviceB
    /// datadog:
    ///   performanceData:
    ///     tags:
    ///       - 'service:shopping-cart'
    ///       - 'hostname:shopping-cart'
    ///   events:
    ///     - name: ""deployment events""
    ///       query: ""app:myapp AND type:github""
    ///     - name: ""event type B""
    ///       query: ""app:myapp AND type:github""
    ///   logs:
    ///     - name: ""critical logs""
    ///       query: ""app:myapp AND type:github""
    ///     - name: ""ops logs""
    ///       query: ""app:myapp AND type:github""
    ///   pipelines:
    ///     fingerprints:
    ///       - fp1
    ///       - fp2
    ///   codeLocations:
    ///     - repositoryURL: http://github/shopping-cart.git
    ///       paths:
    ///         - baz/*.c
    ///         - bat/**/*
    ///         - ../plop/*.java
    ///     - repositoryURL: http://github/shopping-cart-2.git
    ///       paths:
    ///         - baz/*.c
    ///         - bat/**/*
    ///         - ../plop/*.java
    /// ",
    ///     });
    /// 
    ///     // v3 datastore entity 
    ///     var datastoreV3 = new Datadog.SoftwareCatalog("datastore_v3", new()
    ///     {
    ///         Entity = @"apiVersion: v3
    /// kind: datastore
    /// metadata:
    ///   name: shopping-cart-db
    ///   tags:
    ///     - tag:value
    ///   links:
    ///     - name: shopping-cart-db runbook
    ///       type: runbook
    ///       url: https://runbook/shopping-cart
    ///   contacts:
    ///     - name: Support Email
    ///       type: email
    ///       contact: team@shopping.com
    ///     - name: Support Slack
    ///       type: slack
    ///       contact: https://www.slack.com/archives/shopping-cart
    ///   owner: myteam
    ///   additionalOwners:
    ///     - name: opsTeam
    ///       type: operator
    /// integrations:
    ///   pagerduty:
    ///     serviceURL: https://www.pagerduty.com/service-directory/Pshopping-cart
    ///   opsgenie:
    ///     serviceURL: https://www.opsgenie.com/service/shopping-cart
    ///     region: US
    /// extensions:
    ///   datadoghq.com/shopping-cart-db:
    ///     customField: customValue
    /// spec:
    ///   lifecycle: production
    ///   tier: ""1""
    ///   type: ""postgres""
    /// datadog:
    ///   performanceData:
    ///     tags: ['tag:random']
    /// ",
    ///     });
    /// 
    ///     // v3 queue entity 
    ///     var queueV3 = new Datadog.SoftwareCatalog("queue_v3", new()
    ///     {
    ///         Entity = @"apiVersion: v3
    /// kind: queue
    /// metadata:
    ///   name: order-queue
    ///   tags:
    ///     - tag:value
    ///   links:
    ///     - name: order-queue runbook
    ///       type: runbook
    ///       url: https://runbook/order-queue
    ///   contacts:
    ///     - name: Support Email
    ///       type: email
    ///       contact: team@shopping.com
    ///     - name: Support Slack
    ///       type: slack
    ///       contact: https://www.slack.com/archives/shopping-cart
    ///   owner: myteam
    ///   additionalOwners:
    ///     - name: opsTeam
    ///       type: operator
    /// integrations:
    ///   pagerduty:
    ///     serviceURL: https://www.pagerduty.com/service-directory/Pshopping-cart
    ///   opsgenie:
    ///     serviceURL: https://www.opsgenie.com/service/shopping-cart
    ///     region: US
    /// extensions:
    ///   datadoghq.com/order-queue:
    ///     customField: customValue
    /// spec:
    ///   lifecycle: production
    ///   tier: ""1""
    ///   type: kafka
    /// datadog:
    ///   performanceData:
    ///     tags: ['tag:random']
    /// ",
    ///     });
    /// 
    ///     // v3 system entity 
    ///     var systemV3 = new Datadog.SoftwareCatalog("system_v3", new()
    ///     {
    ///         Entity = @"apiVersion: v3
    /// kind: system
    /// metadata:
    ///   name: shopping-system
    ///   displayName: Shopping System
    ///   tags:
    ///     - tag:value
    ///   links:
    ///     - name: shopping-system runbook
    ///       type: runbook
    ///       url: https://runbook/shopping-system
    ///   contacts:
    ///     - name: Support Email
    ///       type: email
    ///       contact: team@shopping.com
    ///     - name: Support Slack
    ///       type: slack
    ///       contact: https://www.slack.com/archives/shopping-cart
    ///   owner: myteam
    ///   additionalOwners:
    ///     - name: opsTeam
    ///       type: operator
    /// integrations:
    ///   pagerduty:
    ///     serviceURL: https://www.pagerduty.com/service-directory/Pshopping-cart
    ///   opsgenie:
    ///     serviceURL: https://www.opsgenie.com/service/shopping-cart
    ///     region: US
    /// spec:
    ///   components:
    ///     - service:shopping-cart
    ///     - queue:order-queue
    ///     - database:shopping-cart-db
    /// extensions:
    ///   datadoghq.com/shopping-system:
    ///     customField: customValue
    /// datadog:
    ///   events:
    ///     - name: ""deployment events""
    ///       query: ""app:myapp AND type:github""
    ///     - name: ""event type B""
    ///       query: ""app:myapp AND type:github""
    ///   logs:
    ///     - name: ""critical logs""
    ///       query: ""app:myapp AND type:github""
    ///     - name: ""ops logs""
    ///       query: ""app:myapp AND type:github""
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/softwareCatalog:SoftwareCatalog this &lt;name&gt;
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/softwareCatalog:SoftwareCatalog")]
    public partial class SoftwareCatalog : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The catalog entity definition.
        /// </summary>
        [Output("entity")]
        public Output<string> Entity { get; private set; } = null!;


        /// <summary>
        /// Create a SoftwareCatalog resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SoftwareCatalog(string name, SoftwareCatalogArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/softwareCatalog:SoftwareCatalog", name, args ?? new SoftwareCatalogArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SoftwareCatalog(string name, Input<string> id, SoftwareCatalogState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/softwareCatalog:SoftwareCatalog", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SoftwareCatalog resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SoftwareCatalog Get(string name, Input<string> id, SoftwareCatalogState? state = null, CustomResourceOptions? options = null)
        {
            return new SoftwareCatalog(name, id, state, options);
        }
    }

    public sealed class SoftwareCatalogArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The catalog entity definition.
        /// </summary>
        [Input("entity", required: true)]
        public Input<string> Entity { get; set; } = null!;

        public SoftwareCatalogArgs()
        {
        }
        public static new SoftwareCatalogArgs Empty => new SoftwareCatalogArgs();
    }

    public sealed class SoftwareCatalogState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The catalog entity definition.
        /// </summary>
        [Input("entity")]
        public Input<string>? Entity { get; set; }

        public SoftwareCatalogState()
        {
        }
        public static new SoftwareCatalogState Empty => new SoftwareCatalogState();
    }
}
