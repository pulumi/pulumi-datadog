// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var workflow = new Datadog.WorkflowAutomation("workflow", new()
    ///     {
    ///         Name = "Send Email when Monitor Alerts",
    ///         Description = "This workflow alerts me by email when my monitor goes off. ",
    ///         Tags = new[]
    ///         {
    ///             "service:foo",
    ///             "source:alert",
    ///             "team:bar",
    ///         },
    ///         Published = true,
    ///         SpecJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["triggers"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["startStepNames"] = new[]
    ///                     {
    ///                         "Send_Email",
    ///                     },
    ///                     ["monitorTrigger"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                     },
    ///                 },
    ///             },
    ///             ["steps"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["name"] = "Send_Email",
    ///                     ["actionId"] = "com.datadoghq.email.send",
    ///                     ["parameters"] = new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["name"] = "to",
    ///                             ["value"] = "REPLACE_ME",
    ///                         },
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["name"] = "subject",
    ///                             ["value"] = "Monitor \"{{ Source.monitor.name }}\" alerted",
    ///                         },
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["name"] = "message",
    ///                             ["value"] = @"This message is from {{ WorkflowName }}. 
    /// 
    /// You can find a link to the monitor here: {{ Source.url }}.",
    ///                         },
    ///                     },
    ///                     ["display"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["bounds"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["x"] = 0,
    ///                             ["y"] = 216,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             ["handle"] = "my-handle",
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import datadog:index/workflowAutomation:WorkflowAutomation my_workflow 11111111-2222-3333-4444-555555555555
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/workflowAutomation:WorkflowAutomation")]
    public partial class WorkflowAutomation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the workflow.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Name of the workflow.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Set the workflow to published or unpublished. Workflows in an unpublished state are only executable through manual runs. Automatic triggers such as Schedule do not execute the workflow until it is published.
        /// </summary>
        [Output("published")]
        public Output<bool> Published { get; private set; } = null!;

        /// <summary>
        /// The spec defines what the workflow does.
        /// </summary>
        [Output("specJson")]
        public Output<string> SpecJson { get; private set; } = null!;

        /// <summary>
        /// Tags of the workflow.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// If a webhook trigger is defined on this workflow, a webhookSecret is required and should be provided here.
        /// </summary>
        [Output("webhookSecret")]
        public Output<string?> WebhookSecret { get; private set; } = null!;


        /// <summary>
        /// Create a WorkflowAutomation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkflowAutomation(string name, WorkflowAutomationArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/workflowAutomation:WorkflowAutomation", name, args ?? new WorkflowAutomationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkflowAutomation(string name, Input<string> id, WorkflowAutomationState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/workflowAutomation:WorkflowAutomation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "webhookSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkflowAutomation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkflowAutomation Get(string name, Input<string> id, WorkflowAutomationState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkflowAutomation(name, id, state, options);
        }
    }

    public sealed class WorkflowAutomationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the workflow.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Name of the workflow.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Set the workflow to published or unpublished. Workflows in an unpublished state are only executable through manual runs. Automatic triggers such as Schedule do not execute the workflow until it is published.
        /// </summary>
        [Input("published", required: true)]
        public Input<bool> Published { get; set; } = null!;

        /// <summary>
        /// The spec defines what the workflow does.
        /// </summary>
        [Input("specJson", required: true)]
        public Input<string> SpecJson { get; set; } = null!;

        [Input("tags", required: true)]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags of the workflow.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("webhookSecret")]
        private Input<string>? _webhookSecret;

        /// <summary>
        /// If a webhook trigger is defined on this workflow, a webhookSecret is required and should be provided here.
        /// </summary>
        public Input<string>? WebhookSecret
        {
            get => _webhookSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _webhookSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public WorkflowAutomationArgs()
        {
        }
        public static new WorkflowAutomationArgs Empty => new WorkflowAutomationArgs();
    }

    public sealed class WorkflowAutomationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the workflow.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the workflow.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Set the workflow to published or unpublished. Workflows in an unpublished state are only executable through manual runs. Automatic triggers such as Schedule do not execute the workflow until it is published.
        /// </summary>
        [Input("published")]
        public Input<bool>? Published { get; set; }

        /// <summary>
        /// The spec defines what the workflow does.
        /// </summary>
        [Input("specJson")]
        public Input<string>? SpecJson { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags of the workflow.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("webhookSecret")]
        private Input<string>? _webhookSecret;

        /// <summary>
        /// If a webhook trigger is defined on this workflow, a webhookSecret is required and should be provided here.
        /// </summary>
        public Input<string>? WebhookSecret
        {
            get => _webhookSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _webhookSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public WorkflowAutomationState()
        {
        }
        public static new WorkflowAutomationState Empty => new WorkflowAutomationState();
    }
}
