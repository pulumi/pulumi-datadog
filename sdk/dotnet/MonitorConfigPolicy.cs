// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog monitor config policy resource. This can be used to create and manage Datadog monitor config policies.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Datadog = Pulumi.Datadog;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Datadog.MonitorConfigPolicy("test", new()
    ///     {
    ///         PolicyType = "tag",
    ///         TagPolicy = new Datadog.Inputs.MonitorConfigPolicyTagPolicyArgs
    ///         {
    ///             TagKey = "env",
    ///             TagKeyRequired = false,
    ///             ValidTagValues = new[]
    ///             {
    ///                 "staging",
    ///                 "prod",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DatadogResourceType("datadog:index/monitorConfigPolicy:MonitorConfigPolicy")]
    public partial class MonitorConfigPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The monitor config policy type Valid values are `tag`.
        /// </summary>
        [Output("policyType")]
        public Output<string> PolicyType { get; private set; } = null!;

        /// <summary>
        /// Config for a tag policy. Only set if `policy_type` is `tag`.
        /// </summary>
        [Output("tagPolicy")]
        public Output<Outputs.MonitorConfigPolicyTagPolicy?> TagPolicy { get; private set; } = null!;


        /// <summary>
        /// Create a MonitorConfigPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MonitorConfigPolicy(string name, MonitorConfigPolicyArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/monitorConfigPolicy:MonitorConfigPolicy", name, args ?? new MonitorConfigPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MonitorConfigPolicy(string name, Input<string> id, MonitorConfigPolicyState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/monitorConfigPolicy:MonitorConfigPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MonitorConfigPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MonitorConfigPolicy Get(string name, Input<string> id, MonitorConfigPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new MonitorConfigPolicy(name, id, state, options);
        }
    }

    public sealed class MonitorConfigPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The monitor config policy type Valid values are `tag`.
        /// </summary>
        [Input("policyType", required: true)]
        public Input<string> PolicyType { get; set; } = null!;

        /// <summary>
        /// Config for a tag policy. Only set if `policy_type` is `tag`.
        /// </summary>
        [Input("tagPolicy")]
        public Input<Inputs.MonitorConfigPolicyTagPolicyArgs>? TagPolicy { get; set; }

        public MonitorConfigPolicyArgs()
        {
        }
        public static new MonitorConfigPolicyArgs Empty => new MonitorConfigPolicyArgs();
    }

    public sealed class MonitorConfigPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The monitor config policy type Valid values are `tag`.
        /// </summary>
        [Input("policyType")]
        public Input<string>? PolicyType { get; set; }

        /// <summary>
        /// Config for a tag policy. Only set if `policy_type` is `tag`.
        /// </summary>
        [Input("tagPolicy")]
        public Input<Inputs.MonitorConfigPolicyTagPolicyGetArgs>? TagPolicy { get; set; }

        public MonitorConfigPolicyState()
        {
        }
        public static new MonitorConfigPolicyState Empty => new MonitorConfigPolicyState();
    }
}
