// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Inputs
{

    public sealed class ObservabilityPipelineConfigDestinationsSplunkHecGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If `True`, Splunk tries to extract timestamps from incoming log events.
        /// </summary>
        [Input("autoExtractTimestamp")]
        public Input<bool>? AutoExtractTimestamp { get; set; }

        /// <summary>
        /// Encoding format for log events. Valid values: `Json`, `RawMessage`.
        /// </summary>
        [Input("encoding")]
        public Input<string>? Encoding { get; set; }

        /// <summary>
        /// The unique identifier for this component. Used to reference this component in other parts of the pipeline (e.g., as input to downstream components).
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Optional name of the Splunk index where logs are written.
        /// </summary>
        [Input("index")]
        public Input<string>? Index { get; set; }

        [Input("inputs", required: true)]
        private InputList<string>? _inputs;

        /// <summary>
        /// A list of component IDs whose output is used as the `Input` for this component.
        /// </summary>
        public InputList<string> Inputs
        {
            get => _inputs ?? (_inputs = new InputList<string>());
            set => _inputs = value;
        }

        /// <summary>
        /// The Splunk sourcetype to assign to log events.
        /// </summary>
        [Input("sourcetype")]
        public Input<string>? Sourcetype { get; set; }

        public ObservabilityPipelineConfigDestinationsSplunkHecGetArgs()
        {
        }
        public static new ObservabilityPipelineConfigDestinationsSplunkHecGetArgs Empty => new ObservabilityPipelineConfigDestinationsSplunkHecGetArgs();
    }
}
