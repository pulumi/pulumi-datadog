// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Inputs
{

    public sealed class SyntheticsTestApiStepRequestDefinitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
        /// </summary>
        [Input("allowInsecure")]
        public Input<bool>? AllowInsecure { get; set; }

        /// <summary>
        /// The request body.
        /// </summary>
        [Input("body")]
        public Input<string>? Body { get; set; }

        /// <summary>
        /// Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.
        /// </summary>
        [Input("bodyType")]
        public Input<string>? BodyType { get; set; }

        /// <summary>
        /// The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
        /// </summary>
        [Input("callType")]
        public Input<string>? CallType { get; set; }

        [Input("certificateDomains")]
        private InputList<string>? _certificateDomains;

        /// <summary>
        /// By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.
        /// </summary>
        public InputList<string> CertificateDomains
        {
            get => _certificateDomains ?? (_certificateDomains = new InputList<string>());
            set => _certificateDomains = value;
        }

        /// <summary>
        /// DNS server to use for DNS tests (`subtype = "dns"`).
        /// </summary>
        [Input("dnsServer")]
        public Input<string>? DnsServer { get; set; }

        /// <summary>
        /// DNS server port to use for DNS tests.
        /// </summary>
        [Input("dnsServerPort")]
        public Input<int>? DnsServerPort { get; set; }

        /// <summary>
        /// Determines whether or not the API HTTP test should follow redirects.
        /// </summary>
        [Input("followRedirects")]
        public Input<bool>? FollowRedirects { get; set; }

        /// <summary>
        /// Host name to perform the test with.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// For UDP and websocket tests, message to send with the request.
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// Determines whether or not to save the response body.
        /// </summary>
        [Input("noSavingResponseBody")]
        public Input<bool>? NoSavingResponseBody { get; set; }

        /// <summary>
        /// Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
        /// </summary>
        [Input("numberOfPackets")]
        public Input<int>? NumberOfPackets { get; set; }

        /// <summary>
        /// Persist cookies across redirects.
        /// </summary>
        [Input("persistCookies")]
        public Input<bool>? PersistCookies { get; set; }

        /// <summary>
        /// Port to use when performing the test.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
        /// </summary>
        [Input("servername")]
        public Input<string>? Servername { get; set; }

        /// <summary>
        /// The gRPC service on which you want to perform the gRPC call.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
        /// </summary>
        [Input("shouldTrackHops")]
        public Input<bool>? ShouldTrackHops { get; set; }

        /// <summary>
        /// Timeout in seconds for the test. Defaults to `60`.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// The URL to send the request to.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public SyntheticsTestApiStepRequestDefinitionArgs()
        {
        }
        public static new SyntheticsTestApiStepRequestDefinitionArgs Empty => new SyntheticsTestApiStepRequestDefinitionArgs();
    }
}
