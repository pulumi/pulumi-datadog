// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Inputs
{

    public sealed class DashboardWidgetTimeseriesDefinitionArgs : global::Pulumi.ResourceArgs
    {
        [Input("customLinks")]
        private InputList<Inputs.DashboardWidgetTimeseriesDefinitionCustomLinkArgs>? _customLinks;

        /// <summary>
        /// A nested block describing a custom link. Multiple `CustomLink` blocks are allowed using the structure below.
        /// </summary>
        public InputList<Inputs.DashboardWidgetTimeseriesDefinitionCustomLinkArgs> CustomLinks
        {
            get => _customLinks ?? (_customLinks = new InputList<Inputs.DashboardWidgetTimeseriesDefinitionCustomLinkArgs>());
            set => _customLinks = value;
        }

        [Input("events")]
        private InputList<Inputs.DashboardWidgetTimeseriesDefinitionEventArgs>? _events;

        /// <summary>
        /// The definition of the event to overlay on the graph. Multiple `Event` blocks are allowed using the structure below.
        /// </summary>
        public InputList<Inputs.DashboardWidgetTimeseriesDefinitionEventArgs> Events
        {
            get => _events ?? (_events = new InputList<Inputs.DashboardWidgetTimeseriesDefinitionEventArgs>());
            set => _events = value;
        }

        [Input("legendColumns")]
        private InputList<string>? _legendColumns;

        /// <summary>
        /// A list of columns to display in the legend. Valid values are `Value`, `Avg`, `Sum`, `Min`, `Max`.
        /// </summary>
        public InputList<string> LegendColumns
        {
            get => _legendColumns ?? (_legendColumns = new InputList<string>());
            set => _legendColumns = value;
        }

        /// <summary>
        /// The layout of the legend displayed in the widget. Valid values are `Auto`, `Horizontal`, `Vertical`.
        /// </summary>
        [Input("legendLayout")]
        public Input<string>? LegendLayout { get; set; }

        /// <summary>
        /// The size of the legend displayed in the widget.
        /// </summary>
        [Input("legendSize")]
        public Input<string>? LegendSize { get; set; }

        /// <summary>
        /// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `WeekToDate`, `MonthToDate`, `1y`, `Alert`.
        /// </summary>
        [Input("liveSpan")]
        public Input<string>? LiveSpan { get; set; }

        [Input("markers")]
        private InputList<Inputs.DashboardWidgetTimeseriesDefinitionMarkerArgs>? _markers;

        /// <summary>
        /// A nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple `Marker` blocks are allowed within a given `TileDef` block.
        /// </summary>
        public InputList<Inputs.DashboardWidgetTimeseriesDefinitionMarkerArgs> Markers
        {
            get => _markers ?? (_markers = new InputList<Inputs.DashboardWidgetTimeseriesDefinitionMarkerArgs>());
            set => _markers = value;
        }

        [Input("requests")]
        private InputList<Inputs.DashboardWidgetTimeseriesDefinitionRequestArgs>? _requests;

        /// <summary>
        /// A nested block describing the request to use when displaying the widget. Multiple `Request` blocks are allowed using the structure below (exactly one of `Q`, `ApmQuery`, `LogQuery`, `RumQuery`, `NetworkQuery`, `SecurityQuery` or `ProcessQuery` is required within the `Request` block).
        /// </summary>
        public InputList<Inputs.DashboardWidgetTimeseriesDefinitionRequestArgs> Requests
        {
            get => _requests ?? (_requests = new InputList<Inputs.DashboardWidgetTimeseriesDefinitionRequestArgs>());
            set => _requests = value;
        }

        /// <summary>
        /// A nested block describing the right Y-Axis Controls. See the `OnRightYaxis` property for which request will use this axis. The structure of this block is described below.
        /// </summary>
        [Input("rightYaxis")]
        public Input<Inputs.DashboardWidgetTimeseriesDefinitionRightYaxisArgs>? RightYaxis { get; set; }

        /// <summary>
        /// Whether or not to show the legend on this widget.
        /// </summary>
        [Input("showLegend")]
        public Input<bool>? ShowLegend { get; set; }

        /// <summary>
        /// The title of the widget.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// The alignment of the widget's title. Valid values are `Center`, `Left`, `Right`.
        /// </summary>
        [Input("titleAlign")]
        public Input<string>? TitleAlign { get; set; }

        /// <summary>
        /// The size of the widget's title (defaults to 16).
        /// </summary>
        [Input("titleSize")]
        public Input<string>? TitleSize { get; set; }

        /// <summary>
        /// A nested block describing the Y-Axis Controls. The structure of this block is described below.
        /// </summary>
        [Input("yaxis")]
        public Input<Inputs.DashboardWidgetTimeseriesDefinitionYaxisArgs>? Yaxis { get; set; }

        public DashboardWidgetTimeseriesDefinitionArgs()
        {
        }
        public static new DashboardWidgetTimeseriesDefinitionArgs Empty => new DashboardWidgetTimeseriesDefinitionArgs();
    }
}
