// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Inputs
{

    public sealed class ObservabilityPipelineConfigDestinationsSocketArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Encoding format for log events. Valid values are `Json`, `RawMessage`.
        /// </summary>
        [Input("encoding", required: true)]
        public Input<string> Encoding { get; set; } = null!;

        /// <summary>
        /// Defines the framing method for outgoing messages.
        /// </summary>
        [Input("framing")]
        public Input<Inputs.ObservabilityPipelineConfigDestinationsSocketFramingArgs>? Framing { get; set; }

        /// <summary>
        /// The unique identifier for this destination.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("inputs", required: true)]
        private InputList<string>? _inputs;

        /// <summary>
        /// A list of component IDs whose output is used as the `Input` for this destination.
        /// </summary>
        public InputList<string> Inputs
        {
            get => _inputs ?? (_inputs = new InputList<string>());
            set => _inputs = value;
        }

        /// <summary>
        /// The protocol used to send logs. Valid values are `Tcp`, `Udp`.
        /// </summary>
        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        /// <summary>
        /// Configuration for enabling TLS encryption between the pipeline component and external services.
        /// </summary>
        [Input("tls")]
        public Input<Inputs.ObservabilityPipelineConfigDestinationsSocketTlsArgs>? Tls { get; set; }

        public ObservabilityPipelineConfigDestinationsSocketArgs()
        {
        }
        public static new ObservabilityPipelineConfigDestinationsSocketArgs Empty => new ObservabilityPipelineConfigDestinationsSocketArgs();
    }
}
