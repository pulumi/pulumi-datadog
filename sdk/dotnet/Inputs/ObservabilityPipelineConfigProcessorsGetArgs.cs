// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Inputs
{

    public sealed class ObservabilityPipelineConfigProcessorsGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("addFields")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsAddFieldGetArgs>? _addFields;

        /// <summary>
        /// The `add_fields` processor adds static key-value fields to logs.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsAddFieldGetArgs> AddFields
        {
            get => _addFields ?? (_addFields = new InputList<Inputs.ObservabilityPipelineConfigProcessorsAddFieldGetArgs>());
            set => _addFields = value;
        }

        [Input("filters")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsFilterGetArgs>? _filters;

        /// <summary>
        /// The `filter` processor allows conditional processing of logs based on a Datadog search query. Logs that match the `include` query are passed through; others are discarded.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsFilterGetArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.ObservabilityPipelineConfigProcessorsFilterGetArgs>());
            set => _filters = value;
        }

        [Input("parseJsons")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsParseJsonGetArgs>? _parseJsons;

        /// <summary>
        /// The `parse_json` processor extracts JSON from a specified field and flattens it into the event. This is useful when logs contain embedded JSON as a string.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsParseJsonGetArgs> ParseJsons
        {
            get => _parseJsons ?? (_parseJsons = new InputList<Inputs.ObservabilityPipelineConfigProcessorsParseJsonGetArgs>());
            set => _parseJsons = value;
        }

        [Input("quotas")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsQuotaGetArgs>? _quotas;

        /// <summary>
        /// The `quota` measures logging traffic for logs that match a specified filter. When the configured daily quota is met, the processor can drop or alert.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsQuotaGetArgs> Quotas
        {
            get => _quotas ?? (_quotas = new InputList<Inputs.ObservabilityPipelineConfigProcessorsQuotaGetArgs>());
            set => _quotas = value;
        }

        [Input("removeFields")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsRemoveFieldGetArgs>? _removeFields;

        /// <summary>
        /// The `remove_fields` processor deletes specified fields from logs.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsRemoveFieldGetArgs> RemoveFields
        {
            get => _removeFields ?? (_removeFields = new InputList<Inputs.ObservabilityPipelineConfigProcessorsRemoveFieldGetArgs>());
            set => _removeFields = value;
        }

        [Input("renameFields")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsRenameFieldGetArgs>? _renameFields;

        /// <summary>
        /// The `rename_fields` processor changes field names.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsRenameFieldGetArgs> RenameFields
        {
            get => _renameFields ?? (_renameFields = new InputList<Inputs.ObservabilityPipelineConfigProcessorsRenameFieldGetArgs>());
            set => _renameFields = value;
        }

        public ObservabilityPipelineConfigProcessorsGetArgs()
        {
        }
        public static new ObservabilityPipelineConfigProcessorsGetArgs Empty => new ObservabilityPipelineConfigProcessorsGetArgs();
    }
}
