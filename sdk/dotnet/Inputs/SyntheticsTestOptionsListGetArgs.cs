// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Inputs
{

    public sealed class SyntheticsTestOptionsListGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// For SSL test, whether or not the test should allow self signed certificates.
        /// </summary>
        [Input("acceptSelfSigned")]
        public Input<bool>? AcceptSelfSigned { get; set; }

        /// <summary>
        /// Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
        /// </summary>
        [Input("allowInsecure")]
        public Input<bool>? AllowInsecure { get; set; }

        /// <summary>
        /// For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
        /// </summary>
        [Input("checkCertificateRevocation")]
        public Input<bool>? CheckCertificateRevocation { get; set; }

        /// <summary>
        /// CI/CD options for a Synthetic test.
        /// </summary>
        [Input("ci")]
        public Input<Inputs.SyntheticsTestOptionsListCiGetArgs>? Ci { get; set; }

        /// <summary>
        /// Disable Cross-Origin Resource Sharing for browser tests.
        /// </summary>
        [Input("disableCors")]
        public Input<bool>? DisableCors { get; set; }

        /// <summary>
        /// Disable Content Security Policy for browser tests.
        /// </summary>
        [Input("disableCsp")]
        public Input<bool>? DisableCsp { get; set; }

        /// <summary>
        /// Determines whether or not the API HTTP test should follow redirects.
        /// </summary>
        [Input("followRedirects")]
        public Input<bool>? FollowRedirects { get; set; }

        /// <summary>
        /// HTTP version to use for a Synthetics API test. Valid values are `http1`, `http2`, `any`.
        /// </summary>
        [Input("httpVersion")]
        public Input<string>? HttpVersion { get; set; }

        /// <summary>
        /// Ignore server certificate error for browser tests.
        /// </summary>
        [Input("ignoreServerCertificateError")]
        public Input<bool>? IgnoreServerCertificateError { get; set; }

        /// <summary>
        /// Timeout before declaring the initial step as failed (in seconds) for browser tests.
        /// </summary>
        [Input("initialNavigationTimeout")]
        public Input<int>? InitialNavigationTimeout { get; set; }

        /// <summary>
        /// Minimum amount of time in failure required to trigger an alert (in seconds). Default is `0`.
        /// </summary>
        [Input("minFailureDuration")]
        public Input<int>? MinFailureDuration { get; set; }

        /// <summary>
        /// Minimum number of locations in failure required to trigger an alert. Default is `1`.
        /// </summary>
        [Input("minLocationFailed")]
        public Input<int>? MinLocationFailed { get; set; }

        /// <summary>
        /// The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
        /// </summary>
        [Input("monitorName")]
        public Input<string>? MonitorName { get; set; }

        [Input("monitorOptions")]
        public Input<Inputs.SyntheticsTestOptionsListMonitorOptionsGetArgs>? MonitorOptions { get; set; }

        [Input("monitorPriority")]
        public Input<int>? MonitorPriority { get; set; }

        /// <summary>
        /// Prevents saving screenshots of the steps.
        /// </summary>
        [Input("noScreenshot")]
        public Input<bool>? NoScreenshot { get; set; }

        [Input("restrictedRoles")]
        private InputList<string>? _restrictedRoles;

        /// <summary>
        /// A list of role identifiers pulled from the Roles API to restrict read and write access.
        /// </summary>
        public InputList<string> RestrictedRoles
        {
            get => _restrictedRoles ?? (_restrictedRoles = new InputList<string>());
            set => _restrictedRoles = value;
        }

        [Input("retry")]
        public Input<Inputs.SyntheticsTestOptionsListRetryGetArgs>? Retry { get; set; }

        /// <summary>
        /// The RUM data collection settings for the Synthetic browser test.
        /// </summary>
        [Input("rumSettings")]
        public Input<Inputs.SyntheticsTestOptionsListRumSettingsGetArgs>? RumSettings { get; set; }

        /// <summary>
        /// Object containing timeframes and timezone used for advanced scheduling.
        /// </summary>
        [Input("scheduling")]
        public Input<Inputs.SyntheticsTestOptionsListSchedulingGetArgs>? Scheduling { get; set; }

        /// <summary>
        /// How often the test should run (in seconds).
        /// </summary>
        [Input("tickEvery", required: true)]
        public Input<int> TickEvery { get; set; } = null!;

        public SyntheticsTestOptionsListGetArgs()
        {
        }
        public static new SyntheticsTestOptionsListGetArgs Empty => new SyntheticsTestOptionsListGetArgs();
    }
}
