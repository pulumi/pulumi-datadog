// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Inputs
{

    public sealed class ObservabilityPipelineConfigSourcesKafkaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Kafka consumer group ID.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        /// <summary>
        /// The unique ID of the source.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("librdkafkaOptions")]
        private InputList<Inputs.ObservabilityPipelineConfigSourcesKafkaLibrdkafkaOptionArgs>? _librdkafkaOptions;

        /// <summary>
        /// Advanced librdkafka client configuration options.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigSourcesKafkaLibrdkafkaOptionArgs> LibrdkafkaOptions
        {
            get => _librdkafkaOptions ?? (_librdkafkaOptions = new InputList<Inputs.ObservabilityPipelineConfigSourcesKafkaLibrdkafkaOptionArgs>());
            set => _librdkafkaOptions = value;
        }

        /// <summary>
        /// SASL authentication settings.
        /// </summary>
        [Input("sasl")]
        public Input<Inputs.ObservabilityPipelineConfigSourcesKafkaSaslArgs>? Sasl { get; set; }

        /// <summary>
        /// Configuration for enabling TLS encryption between the pipeline component and external services.
        /// </summary>
        [Input("tls")]
        public Input<Inputs.ObservabilityPipelineConfigSourcesKafkaTlsArgs>? Tls { get; set; }

        [Input("topics", required: true)]
        private InputList<string>? _topics;

        /// <summary>
        /// A list of Kafka topic names to subscribe to. The source ingests messages from each topic specified.
        /// </summary>
        public InputList<string> Topics
        {
            get => _topics ?? (_topics = new InputList<string>());
            set => _topics = value;
        }

        public ObservabilityPipelineConfigSourcesKafkaArgs()
        {
        }
        public static new ObservabilityPipelineConfigSourcesKafkaArgs Empty => new ObservabilityPipelineConfigSourcesKafkaArgs();
    }
}
