// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Inputs
{

    public sealed class DowntimeRecurrenceGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// How often to repeat as an integer. For example to repeat every 3 days, select a `type` of `days` and a `period` of `3`.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// The RRULE standard for defining recurring events. For example, to have a recurring event on the first day of each month, use `FREQ=MONTHLY;INTERVAL=1`. Most common rrule options from the iCalendar Spec are supported. Attributes specifying the duration in RRULE are not supported (for example, `DTSTART`, `DTEND`, `DURATION`).
        /// </summary>
        [Input("rrule")]
        public Input<string>? Rrule { get; set; }

        /// <summary>
        /// One of `days`, `weeks`, `months`, or `years`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The date at which the recurrence should end as a POSIX timestamp. `until_occurrences` and `until_date` are mutually exclusive.
        /// </summary>
        [Input("untilDate")]
        public Input<int>? UntilDate { get; set; }

        /// <summary>
        /// How many times the downtime will be rescheduled. `until_occurrences` and `until_date` are mutually exclusive.
        /// </summary>
        [Input("untilOccurrences")]
        public Input<int>? UntilOccurrences { get; set; }

        [Input("weekDays")]
        private InputList<string>? _weekDays;

        /// <summary>
        /// A list of week days to repeat on. Choose from: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat` or `Sun`. Only applicable when `type` is `weeks`. First letter must be capitalized.
        /// </summary>
        public InputList<string> WeekDays
        {
            get => _weekDays ?? (_weekDays = new InputList<string>());
            set => _weekDays = value;
        }

        public DowntimeRecurrenceGetArgs()
        {
        }
    }
}
