// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Inputs
{

    public sealed class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuerySloQueryGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Additional filters applied to the SLO query.
        /// </summary>
        [Input("additionalQueryFilters")]
        public Input<string>? AdditionalQueryFilters { get; set; }

        /// <summary>
        /// The source organization UUID for cross organization queries. Feature in Private Beta.
        /// </summary>
        [Input("crossOrgUuids")]
        public Input<string>? CrossOrgUuids { get; set; }

        /// <summary>
        /// The data source for SLO queries. Valid values are `Slo`.
        /// </summary>
        [Input("dataSource", required: true)]
        public Input<string> DataSource { get; set; } = null!;

        /// <summary>
        /// Group mode to query measures. Valid values are `Overall`, `Components`. Defaults to `"overall"`.
        /// </summary>
        [Input("groupMode")]
        public Input<string>? GroupMode { get; set; }

        /// <summary>
        /// SLO measures queries. Valid values are `GoodEvents`, `BadEvents`, `GoodMinutes`, `BadMinutes`, `SloStatus`, `ErrorBudgetRemaining`, `BurnRate`, `ErrorBudgetBurndown`.
        /// </summary>
        [Input("measure", required: true)]
        public Input<string> Measure { get; set; } = null!;

        /// <summary>
        /// The name of query for use in formulas.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of an SLO to query.
        /// </summary>
        [Input("sloId", required: true)]
        public Input<string> SloId { get; set; } = null!;

        /// <summary>
        /// type of the SLO to query. Valid values are `Metric`, `Monitor`, `TimeSlice`. Defaults to `"metric"`.
        /// </summary>
        [Input("sloQueryType")]
        public Input<string>? SloQueryType { get; set; }

        public DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuerySloQueryGetArgs()
        {
        }
        public static new DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuerySloQueryGetArgs Empty => new DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuerySloQueryGetArgs();
    }
}
