// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Inputs
{

    public sealed class ObservabilityPipelineConfigProcessorsArgs : global::Pulumi.ResourceArgs
    {
        [Input("addEnvVars")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsAddEnvVarArgs>? _addEnvVars;

        /// <summary>
        /// The `AddEnvVars` processor adds environment variable values to log events.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsAddEnvVarArgs> AddEnvVars
        {
            get => _addEnvVars ?? (_addEnvVars = new InputList<Inputs.ObservabilityPipelineConfigProcessorsAddEnvVarArgs>());
            set => _addEnvVars = value;
        }

        [Input("addFields")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsAddFieldArgs>? _addFields;

        /// <summary>
        /// The `AddFields` processor adds static key-value fields to logs.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsAddFieldArgs> AddFields
        {
            get => _addFields ?? (_addFields = new InputList<Inputs.ObservabilityPipelineConfigProcessorsAddFieldArgs>());
            set => _addFields = value;
        }

        [Input("customProcessors")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsCustomProcessorArgs>? _customProcessors;

        /// <summary>
        /// The `CustomProcessor` processor transforms events using Vector Remap Language (VRL) scripts with advanced filtering capabilities.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsCustomProcessorArgs> CustomProcessors
        {
            get => _customProcessors ?? (_customProcessors = new InputList<Inputs.ObservabilityPipelineConfigProcessorsCustomProcessorArgs>());
            set => _customProcessors = value;
        }

        [Input("datadogTags")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsDatadogTagArgs>? _datadogTags;
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsDatadogTagArgs> DatadogTags
        {
            get => _datadogTags ?? (_datadogTags = new InputList<Inputs.ObservabilityPipelineConfigProcessorsDatadogTagArgs>());
            set => _datadogTags = value;
        }

        [Input("dedupes")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsDedupeArgs>? _dedupes;

        /// <summary>
        /// The `Dedupe` processor removes duplicate fields in log events.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsDedupeArgs> Dedupes
        {
            get => _dedupes ?? (_dedupes = new InputList<Inputs.ObservabilityPipelineConfigProcessorsDedupeArgs>());
            set => _dedupes = value;
        }

        [Input("enrichmentTables")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsEnrichmentTableArgs>? _enrichmentTables;

        /// <summary>
        /// The `EnrichmentTable` processor enriches logs using a static CSV file or GeoIP database.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsEnrichmentTableArgs> EnrichmentTables
        {
            get => _enrichmentTables ?? (_enrichmentTables = new InputList<Inputs.ObservabilityPipelineConfigProcessorsEnrichmentTableArgs>());
            set => _enrichmentTables = value;
        }

        [Input("filters")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsFilterArgs>? _filters;

        /// <summary>
        /// The `Filter` processor allows conditional processing of logs based on a Datadog search query. Logs that match the `Include` query are passed through; others are discarded.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.ObservabilityPipelineConfigProcessorsFilterArgs>());
            set => _filters = value;
        }

        [Input("generateDatadogMetrics")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsGenerateDatadogMetricArgs>? _generateDatadogMetrics;

        /// <summary>
        /// The `GenerateDatadogMetrics` processor creates custom metrics from logs. Metrics can be counters, gauges, or distributions and optionally grouped by log fields.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsGenerateDatadogMetricArgs> GenerateDatadogMetrics
        {
            get => _generateDatadogMetrics ?? (_generateDatadogMetrics = new InputList<Inputs.ObservabilityPipelineConfigProcessorsGenerateDatadogMetricArgs>());
            set => _generateDatadogMetrics = value;
        }

        [Input("ocsfMappers")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsOcsfMapperArgs>? _ocsfMappers;

        /// <summary>
        /// The `OcsfMapper` processor transforms logs into the OCSF schema using predefined library mappings.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsOcsfMapperArgs> OcsfMappers
        {
            get => _ocsfMappers ?? (_ocsfMappers = new InputList<Inputs.ObservabilityPipelineConfigProcessorsOcsfMapperArgs>());
            set => _ocsfMappers = value;
        }

        [Input("parseGroks")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsParseGrokArgs>? _parseGroks;

        /// <summary>
        /// The `ParseGrok` processor extracts structured fields from unstructured log messages using Grok patterns.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsParseGrokArgs> ParseGroks
        {
            get => _parseGroks ?? (_parseGroks = new InputList<Inputs.ObservabilityPipelineConfigProcessorsParseGrokArgs>());
            set => _parseGroks = value;
        }

        [Input("parseJsons")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsParseJsonArgs>? _parseJsons;

        /// <summary>
        /// The `ParseJson` processor extracts JSON from a specified field and flattens it into the event. This is useful when logs contain embedded JSON as a string.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsParseJsonArgs> ParseJsons
        {
            get => _parseJsons ?? (_parseJsons = new InputList<Inputs.ObservabilityPipelineConfigProcessorsParseJsonArgs>());
            set => _parseJsons = value;
        }

        [Input("quotas")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsQuotaArgs>? _quotas;

        /// <summary>
        /// The `Quota` measures logging traffic for logs that match a specified filter. When the configured daily quota is met, the processor can drop or alert.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsQuotaArgs> Quotas
        {
            get => _quotas ?? (_quotas = new InputList<Inputs.ObservabilityPipelineConfigProcessorsQuotaArgs>());
            set => _quotas = value;
        }

        [Input("reduces")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsReduceArgs>? _reduces;

        /// <summary>
        /// The `Reduce` processor aggregates and merges logs based on matching keys and merge strategies.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsReduceArgs> Reduces
        {
            get => _reduces ?? (_reduces = new InputList<Inputs.ObservabilityPipelineConfigProcessorsReduceArgs>());
            set => _reduces = value;
        }

        [Input("removeFields")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsRemoveFieldArgs>? _removeFields;

        /// <summary>
        /// The `RemoveFields` processor deletes specified fields from logs.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsRemoveFieldArgs> RemoveFields
        {
            get => _removeFields ?? (_removeFields = new InputList<Inputs.ObservabilityPipelineConfigProcessorsRemoveFieldArgs>());
            set => _removeFields = value;
        }

        [Input("renameFields")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsRenameFieldArgs>? _renameFields;

        /// <summary>
        /// The `RenameFields` processor changes field names.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsRenameFieldArgs> RenameFields
        {
            get => _renameFields ?? (_renameFields = new InputList<Inputs.ObservabilityPipelineConfigProcessorsRenameFieldArgs>());
            set => _renameFields = value;
        }

        [Input("samples")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsSampleArgs>? _samples;

        /// <summary>
        /// The `Sample` processor allows probabilistic sampling of logs at a fixed rate.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsSampleArgs> Samples
        {
            get => _samples ?? (_samples = new InputList<Inputs.ObservabilityPipelineConfigProcessorsSampleArgs>());
            set => _samples = value;
        }

        [Input("sensitiveDataScanners")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsSensitiveDataScannerArgs>? _sensitiveDataScanners;

        /// <summary>
        /// The `SensitiveDataScanner` processor detects and optionally redacts sensitive data in log events.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsSensitiveDataScannerArgs> SensitiveDataScanners
        {
            get => _sensitiveDataScanners ?? (_sensitiveDataScanners = new InputList<Inputs.ObservabilityPipelineConfigProcessorsSensitiveDataScannerArgs>());
            set => _sensitiveDataScanners = value;
        }

        [Input("throttles")]
        private InputList<Inputs.ObservabilityPipelineConfigProcessorsThrottleArgs>? _throttles;

        /// <summary>
        /// The `Throttle` processor limits the number of events that pass through over a given time window.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigProcessorsThrottleArgs> Throttles
        {
            get => _throttles ?? (_throttles = new InputList<Inputs.ObservabilityPipelineConfigProcessorsThrottleArgs>());
            set => _throttles = value;
        }

        public ObservabilityPipelineConfigProcessorsArgs()
        {
        }
        public static new ObservabilityPipelineConfigProcessorsArgs Empty => new ObservabilityPipelineConfigProcessorsArgs();
    }
}
