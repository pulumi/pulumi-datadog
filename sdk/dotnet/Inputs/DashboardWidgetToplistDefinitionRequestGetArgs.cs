// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Inputs
{

    public sealed class DashboardWidgetToplistDefinitionRequestGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The query to use for this widget.
        /// </summary>
        [Input("apmQuery")]
        public Input<Inputs.DashboardWidgetToplistDefinitionRequestApmQueryGetArgs>? ApmQuery { get; set; }

        /// <summary>
        /// The query to use for this widget.
        /// </summary>
        [Input("auditQuery")]
        public Input<Inputs.DashboardWidgetToplistDefinitionRequestAuditQueryGetArgs>? AuditQuery { get; set; }

        [Input("conditionalFormats")]
        private InputList<Inputs.DashboardWidgetToplistDefinitionRequestConditionalFormatGetArgs>? _conditionalFormats;

        /// <summary>
        /// Conditional formats allow you to set the color of your widget content or background, depending on a rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        /// </summary>
        public InputList<Inputs.DashboardWidgetToplistDefinitionRequestConditionalFormatGetArgs> ConditionalFormats
        {
            get => _conditionalFormats ?? (_conditionalFormats = new InputList<Inputs.DashboardWidgetToplistDefinitionRequestConditionalFormatGetArgs>());
            set => _conditionalFormats = value;
        }

        [Input("formulas")]
        private InputList<Inputs.DashboardWidgetToplistDefinitionRequestFormulaGetArgs>? _formulas;
        public InputList<Inputs.DashboardWidgetToplistDefinitionRequestFormulaGetArgs> Formulas
        {
            get => _formulas ?? (_formulas = new InputList<Inputs.DashboardWidgetToplistDefinitionRequestFormulaGetArgs>());
            set => _formulas = value;
        }

        /// <summary>
        /// The query to use for this widget.
        /// </summary>
        [Input("logQuery")]
        public Input<Inputs.DashboardWidgetToplistDefinitionRequestLogQueryGetArgs>? LogQuery { get; set; }

        /// <summary>
        /// The process query to use in the widget. The structure of this block is described below.
        /// </summary>
        [Input("processQuery")]
        public Input<Inputs.DashboardWidgetToplistDefinitionRequestProcessQueryGetArgs>? ProcessQuery { get; set; }

        /// <summary>
        /// The metric query to use for this widget.
        /// </summary>
        [Input("q")]
        public Input<string>? Q { get; set; }

        [Input("queries")]
        private InputList<Inputs.DashboardWidgetToplistDefinitionRequestQueryGetArgs>? _queries;
        public InputList<Inputs.DashboardWidgetToplistDefinitionRequestQueryGetArgs> Queries
        {
            get => _queries ?? (_queries = new InputList<Inputs.DashboardWidgetToplistDefinitionRequestQueryGetArgs>());
            set => _queries = value;
        }

        /// <summary>
        /// The query to use for this widget.
        /// </summary>
        [Input("rumQuery")]
        public Input<Inputs.DashboardWidgetToplistDefinitionRequestRumQueryGetArgs>? RumQuery { get; set; }

        /// <summary>
        /// The query to use for this widget.
        /// </summary>
        [Input("securityQuery")]
        public Input<Inputs.DashboardWidgetToplistDefinitionRequestSecurityQueryGetArgs>? SecurityQuery { get; set; }

        /// <summary>
        /// Define request for the widget's style.
        /// </summary>
        [Input("style")]
        public Input<Inputs.DashboardWidgetToplistDefinitionRequestStyleGetArgs>? Style { get; set; }

        public DashboardWidgetToplistDefinitionRequestGetArgs()
        {
        }
        public static new DashboardWidgetToplistDefinitionRequestGetArgs Empty => new DashboardWidgetToplistDefinitionRequestGetArgs();
    }
}
