// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Inputs
{

    public sealed class SecurityMonitoringRuleQueryGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("agentRules")]
        private InputList<Inputs.SecurityMonitoringRuleQueryAgentRuleGetArgs>? _agentRules;

        /// <summary>
        /// **Deprecated**. It won't be applied anymore. **Deprecated.** `AgentRule` has been deprecated in favor of new Agent Rule resource.
        /// </summary>
        [Obsolete(@"`AgentRule` has been deprecated in favor of new Agent Rule resource.")]
        public InputList<Inputs.SecurityMonitoringRuleQueryAgentRuleGetArgs> AgentRules
        {
            get => _agentRules ?? (_agentRules = new InputList<Inputs.SecurityMonitoringRuleQueryAgentRuleGetArgs>());
            set => _agentRules = value;
        }

        /// <summary>
        /// The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are `Count`, `Cardinality`, `Sum`, `Max`, `NewValue`, `GeoData`, `EventCount`, `None`. Defaults to `"count"`.
        /// </summary>
        [Input("aggregation")]
        public Input<string>? Aggregation { get; set; }

        /// <summary>
        /// Source of events. Valid values are `Logs`, `Audit`, `AppSecSpans`, `Spans`, `SecurityRuntime`, `Network`, `Events`. Defaults to `"logs"`.
        /// </summary>
        [Input("dataSource")]
        public Input<string>? DataSource { get; set; }

        [Input("distinctFields")]
        private InputList<string>? _distinctFields;

        /// <summary>
        /// Field for which the cardinality is measured. Sent as an array.
        /// </summary>
        public InputList<string> DistinctFields
        {
            get => _distinctFields ?? (_distinctFields = new InputList<string>());
            set => _distinctFields = value;
        }

        [Input("groupByFields")]
        private InputList<string>? _groupByFields;

        /// <summary>
        /// Fields to group by.
        /// </summary>
        public InputList<string> GroupByFields
        {
            get => _groupByFields ?? (_groupByFields = new InputList<string>());
            set => _groupByFields = value;
        }

        /// <summary>
        /// When false, events without a group-by value are ignored by the rule. When true, events with missing group-by fields are processed with `N/A`, replacing the missing values. Defaults to `False`.
        /// </summary>
        [Input("hasOptionalGroupByFields")]
        public Input<bool>? HasOptionalGroupByFields { get; set; }

        [Input("indexes")]
        private InputList<string>? _indexes;

        /// <summary>
        /// List of indexes to run the query on when the data source is `Logs`. Supports only one element. Used only for scheduled rules (in other words, when `SchedulingOptions` is defined).
        /// </summary>
        public InputList<string> Indexes
        {
            get => _indexes ?? (_indexes = new InputList<string>());
            set => _indexes = value;
        }

        /// <summary>
        /// The target field to aggregate over when using the `Sum`, `Max`, or `GeoData` aggregations. **Deprecated.** Configure `Metrics` instead. This attribute will be removed in the next major version of the provider.
        /// </summary>
        [Input("metric")]
        public Input<string>? Metric { get; set; }

        [Input("metrics")]
        private InputList<string>? _metrics;

        /// <summary>
        /// Group of target fields to aggregate over when using the `Sum`, `Max`, `GeoData`, or `NewValue` aggregations. The `Sum`, `Max`, and `GeoData` aggregations only accept one value in this list, whereas the `NewValue` aggregation accepts up to five values.
        /// </summary>
        public InputList<string> Metrics
        {
            get => _metrics ?? (_metrics = new InputList<string>());
            set => _metrics = value;
        }

        /// <summary>
        /// Name of the query. Not compatible with `NewValue` aggregations.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Query to run on logs.
        /// </summary>
        [Input("query", required: true)]
        public Input<string> Query { get; set; } = null!;

        public SecurityMonitoringRuleQueryGetArgs()
        {
        }
        public static new SecurityMonitoringRuleQueryGetArgs Empty => new SecurityMonitoringRuleQueryGetArgs();
    }
}
