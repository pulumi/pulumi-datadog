// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Inputs
{

    public sealed class ObservabilityPipelineConfigSourcesGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("amazonDataFirehoses")]
        private InputList<Inputs.ObservabilityPipelineConfigSourcesAmazonDataFirehoseGetArgs>? _amazonDataFirehoses;

        /// <summary>
        /// The `AmazonDataFirehose` source ingests logs from AWS Data Firehose.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigSourcesAmazonDataFirehoseGetArgs> AmazonDataFirehoses
        {
            get => _amazonDataFirehoses ?? (_amazonDataFirehoses = new InputList<Inputs.ObservabilityPipelineConfigSourcesAmazonDataFirehoseGetArgs>());
            set => _amazonDataFirehoses = value;
        }

        [Input("amazonS3s")]
        private InputList<Inputs.ObservabilityPipelineConfigSourcesAmazonS3GetArgs>? _amazonS3s;

        /// <summary>
        /// The `AmazonS3` source ingests logs from an Amazon S3 bucket. It supports AWS authentication and TLS encryption.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigSourcesAmazonS3GetArgs> AmazonS3s
        {
            get => _amazonS3s ?? (_amazonS3s = new InputList<Inputs.ObservabilityPipelineConfigSourcesAmazonS3GetArgs>());
            set => _amazonS3s = value;
        }

        [Input("datadogAgents")]
        private InputList<Inputs.ObservabilityPipelineConfigSourcesDatadogAgentGetArgs>? _datadogAgents;

        /// <summary>
        /// The `DatadogAgent` source collects logs from the Datadog Agent.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigSourcesDatadogAgentGetArgs> DatadogAgents
        {
            get => _datadogAgents ?? (_datadogAgents = new InputList<Inputs.ObservabilityPipelineConfigSourcesDatadogAgentGetArgs>());
            set => _datadogAgents = value;
        }

        [Input("fluentBits")]
        private InputList<Inputs.ObservabilityPipelineConfigSourcesFluentBitGetArgs>? _fluentBits;

        /// <summary>
        /// The `Fluent` source ingests logs from Fluent Bit.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigSourcesFluentBitGetArgs> FluentBits
        {
            get => _fluentBits ?? (_fluentBits = new InputList<Inputs.ObservabilityPipelineConfigSourcesFluentBitGetArgs>());
            set => _fluentBits = value;
        }

        [Input("fluentds")]
        private InputList<Inputs.ObservabilityPipelineConfigSourcesFluentdGetArgs>? _fluentds;

        /// <summary>
        /// The `Fluent` source ingests logs from a Fluentd-compatible service.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigSourcesFluentdGetArgs> Fluentds
        {
            get => _fluentds ?? (_fluentds = new InputList<Inputs.ObservabilityPipelineConfigSourcesFluentdGetArgs>());
            set => _fluentds = value;
        }

        [Input("googlePubsubs")]
        private InputList<Inputs.ObservabilityPipelineConfigSourcesGooglePubsubGetArgs>? _googlePubsubs;

        /// <summary>
        /// The `GooglePubsub` source ingests logs from a Google Cloud Pub/Sub subscription.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigSourcesGooglePubsubGetArgs> GooglePubsubs
        {
            get => _googlePubsubs ?? (_googlePubsubs = new InputList<Inputs.ObservabilityPipelineConfigSourcesGooglePubsubGetArgs>());
            set => _googlePubsubs = value;
        }

        [Input("httpClients")]
        private InputList<Inputs.ObservabilityPipelineConfigSourcesHttpClientGetArgs>? _httpClients;

        /// <summary>
        /// The `HttpClient` source scrapes logs from HTTP endpoints at regular intervals.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigSourcesHttpClientGetArgs> HttpClients
        {
            get => _httpClients ?? (_httpClients = new InputList<Inputs.ObservabilityPipelineConfigSourcesHttpClientGetArgs>());
            set => _httpClients = value;
        }

        [Input("httpServers")]
        private InputList<Inputs.ObservabilityPipelineConfigSourcesHttpServerGetArgs>? _httpServers;

        /// <summary>
        /// The `HttpServer` source collects logs over HTTP POST from external services.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigSourcesHttpServerGetArgs> HttpServers
        {
            get => _httpServers ?? (_httpServers = new InputList<Inputs.ObservabilityPipelineConfigSourcesHttpServerGetArgs>());
            set => _httpServers = value;
        }

        [Input("kafkas")]
        private InputList<Inputs.ObservabilityPipelineConfigSourcesKafkaGetArgs>? _kafkas;

        /// <summary>
        /// The `Kafka` source ingests data from Apache Kafka topics.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigSourcesKafkaGetArgs> Kafkas
        {
            get => _kafkas ?? (_kafkas = new InputList<Inputs.ObservabilityPipelineConfigSourcesKafkaGetArgs>());
            set => _kafkas = value;
        }

        [Input("logstashes")]
        private InputList<Inputs.ObservabilityPipelineConfigSourcesLogstashGetArgs>? _logstashes;

        /// <summary>
        /// The `Logstash` source ingests logs from a Logstash forwarder.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigSourcesLogstashGetArgs> Logstashes
        {
            get => _logstashes ?? (_logstashes = new InputList<Inputs.ObservabilityPipelineConfigSourcesLogstashGetArgs>());
            set => _logstashes = value;
        }

        [Input("rsyslogs")]
        private InputList<Inputs.ObservabilityPipelineConfigSourcesRsyslogGetArgs>? _rsyslogs;

        /// <summary>
        /// The `Rsyslog` source listens for logs over TCP or UDP from an `Rsyslog` server using the syslog protocol.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigSourcesRsyslogGetArgs> Rsyslogs
        {
            get => _rsyslogs ?? (_rsyslogs = new InputList<Inputs.ObservabilityPipelineConfigSourcesRsyslogGetArgs>());
            set => _rsyslogs = value;
        }

        [Input("sockets")]
        private InputList<Inputs.ObservabilityPipelineConfigSourcesSocketGetArgs>? _sockets;

        /// <summary>
        /// The `Socket` source ingests logs over TCP or UDP.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigSourcesSocketGetArgs> Sockets
        {
            get => _sockets ?? (_sockets = new InputList<Inputs.ObservabilityPipelineConfigSourcesSocketGetArgs>());
            set => _sockets = value;
        }

        [Input("splunkHecs")]
        private InputList<Inputs.ObservabilityPipelineConfigSourcesSplunkHecGetArgs>? _splunkHecs;

        /// <summary>
        /// The `SplunkHec` source implements the Splunk HTTP Event Collector (HEC) API.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigSourcesSplunkHecGetArgs> SplunkHecs
        {
            get => _splunkHecs ?? (_splunkHecs = new InputList<Inputs.ObservabilityPipelineConfigSourcesSplunkHecGetArgs>());
            set => _splunkHecs = value;
        }

        [Input("splunkTcps")]
        private InputList<Inputs.ObservabilityPipelineConfigSourcesSplunkTcpGetArgs>? _splunkTcps;

        /// <summary>
        /// The `SplunkTcp` source receives logs from a Splunk Universal Forwarder over TCP. TLS is supported for secure transmission.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigSourcesSplunkTcpGetArgs> SplunkTcps
        {
            get => _splunkTcps ?? (_splunkTcps = new InputList<Inputs.ObservabilityPipelineConfigSourcesSplunkTcpGetArgs>());
            set => _splunkTcps = value;
        }

        [Input("sumoLogics")]
        private InputList<Inputs.ObservabilityPipelineConfigSourcesSumoLogicGetArgs>? _sumoLogics;

        /// <summary>
        /// The `SumoLogic` source receives logs from Sumo Logic collectors.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigSourcesSumoLogicGetArgs> SumoLogics
        {
            get => _sumoLogics ?? (_sumoLogics = new InputList<Inputs.ObservabilityPipelineConfigSourcesSumoLogicGetArgs>());
            set => _sumoLogics = value;
        }

        [Input("syslogNgs")]
        private InputList<Inputs.ObservabilityPipelineConfigSourcesSyslogNgGetArgs>? _syslogNgs;

        /// <summary>
        /// The `SyslogNg` source listens for logs over TCP or UDP from a `syslog-ng` server using the syslog protocol.
        /// </summary>
        public InputList<Inputs.ObservabilityPipelineConfigSourcesSyslogNgGetArgs> SyslogNgs
        {
            get => _syslogNgs ?? (_syslogNgs = new InputList<Inputs.ObservabilityPipelineConfigSourcesSyslogNgGetArgs>());
            set => _syslogNgs = value;
        }

        public ObservabilityPipelineConfigSourcesGetArgs()
        {
        }
        public static new ObservabilityPipelineConfigSourcesGetArgs Empty => new ObservabilityPipelineConfigSourcesGetArgs();
    }
}
