// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Inputs
{

    public sealed class ObservabilityPipelineConfigProcessorsThrottleGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("groupBies")]
        private InputList<string>? _groupBies;

        /// <summary>
        /// Optional list of fields used to group events before applying throttling.
        /// </summary>
        public InputList<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<string>());
            set => _groupBies = value;
        }

        /// <summary>
        /// The unique identifier for this processor.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// A Datadog search query used to determine which logs this processor targets.
        /// </summary>
        [Input("include", required: true)]
        public Input<string> Include { get; set; } = null!;

        [Input("inputs", required: true)]
        private InputList<string>? _inputs;

        /// <summary>
        /// A list of component IDs whose output is used as the input for this processor.
        /// </summary>
        public InputList<string> Inputs
        {
            get => _inputs ?? (_inputs = new InputList<string>());
            set => _inputs = value;
        }

        /// <summary>
        /// The number of events to allow before throttling is applied.
        /// </summary>
        [Input("threshold", required: true)]
        public Input<int> Threshold { get; set; } = null!;

        /// <summary>
        /// The time window in seconds over which the threshold applies.
        /// </summary>
        [Input("window", required: true)]
        public Input<double> Window { get; set; } = null!;

        public ObservabilityPipelineConfigProcessorsThrottleGetArgs()
        {
        }
        public static new ObservabilityPipelineConfigProcessorsThrottleGetArgs Empty => new ObservabilityPipelineConfigProcessorsThrottleGetArgs();
    }
}
