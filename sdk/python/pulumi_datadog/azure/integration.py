# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities, _tables

__all__ = ['IntegrationArgs', 'Integration']

@pulumi.input_type
class IntegrationArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 tenant_name: pulumi.Input[str],
                 host_filters: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Integration resource.
        :param pulumi.Input[str] client_id: Your Azure web application ID.
        :param pulumi.Input[str] client_secret: (Required for Initial Creation) Your Azure web application secret key.
        :param pulumi.Input[str] tenant_name: Your Azure Active Directory ID.
        :param pulumi.Input[str] host_filters: String of host tag(s) (in the form `key:value,key:value`) defines a filter that Datadog will use when collecting metrics
               from Azure. Limit the Azure instances that are pulled into Datadog by using tags. Only hosts that match one of the
               defined tags are imported into Datadog. e.x. `env:production,deploymentgroup:red`
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "tenant_name", tenant_name)
        if host_filters is not None:
            pulumi.set(__self__, "host_filters", host_filters)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        Your Azure web application ID.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        (Required for Initial Creation) Your Azure web application secret key.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> pulumi.Input[str]:
        """
        Your Azure Active Directory ID.
        """
        return pulumi.get(self, "tenant_name")

    @tenant_name.setter
    def tenant_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_name", value)

    @property
    @pulumi.getter(name="hostFilters")
    def host_filters(self) -> Optional[pulumi.Input[str]]:
        """
        String of host tag(s) (in the form `key:value,key:value`) defines a filter that Datadog will use when collecting metrics
        from Azure. Limit the Azure instances that are pulled into Datadog by using tags. Only hosts that match one of the
        defined tags are imported into Datadog. e.x. `env:production,deploymentgroup:red`
        """
        return pulumi.get(self, "host_filters")

    @host_filters.setter
    def host_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_filters", value)


class Integration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 host_filters: Optional[pulumi.Input[str]] = None,
                 tenant_name: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Provides a Datadog - Microsoft Azure integration resource. This can be used to create and manage the integrations.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        # Create a new Datadog - Microsoft Azure integration
        sandbox = datadog.azure.Integration("sandbox",
            client_id="<azure_client_id>",
            client_secret="<azure_client_secret_key>",
            host_filters="examplefilter:true,example:true",
            tenant_name="<azure_tenant_name>")
        ```

        ## Import

        Microsoft Azure integrations can be imported using their `tenant name` and `client id` separated with a colon (`:`).

        ```sh
         $ pulumi import datadog:azure/integration:Integration sandbox ${tenant_name}:${client_id}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_id: Your Azure web application ID.
        :param pulumi.Input[str] client_secret: (Required for Initial Creation) Your Azure web application secret key.
        :param pulumi.Input[str] host_filters: String of host tag(s) (in the form `key:value,key:value`) defines a filter that Datadog will use when collecting metrics
               from Azure. Limit the Azure instances that are pulled into Datadog by using tags. Only hosts that match one of the
               defined tags are imported into Datadog. e.x. `env:production,deploymentgroup:red`
        :param pulumi.Input[str] tenant_name: Your Azure Active Directory ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IntegrationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Datadog - Microsoft Azure integration resource. This can be used to create and manage the integrations.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        # Create a new Datadog - Microsoft Azure integration
        sandbox = datadog.azure.Integration("sandbox",
            client_id="<azure_client_id>",
            client_secret="<azure_client_secret_key>",
            host_filters="examplefilter:true,example:true",
            tenant_name="<azure_tenant_name>")
        ```

        ## Import

        Microsoft Azure integrations can be imported using their `tenant name` and `client id` separated with a colon (`:`).

        ```sh
         $ pulumi import datadog:azure/integration:Integration sandbox ${tenant_name}:${client_id}
        ```

        :param str resource_name: The name of the resource.
        :param IntegrationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IntegrationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 host_filters: Optional[pulumi.Input[str]] = None,
                 tenant_name: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if client_id is None and not opts.urn:
                raise TypeError("Missing required property 'client_id'")
            __props__['client_id'] = client_id
            if client_secret is None and not opts.urn:
                raise TypeError("Missing required property 'client_secret'")
            __props__['client_secret'] = client_secret
            __props__['host_filters'] = host_filters
            if tenant_name is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_name'")
            __props__['tenant_name'] = tenant_name
        super(Integration, __self__).__init__(
            'datadog:azure/integration:Integration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            client_id: Optional[pulumi.Input[str]] = None,
            client_secret: Optional[pulumi.Input[str]] = None,
            host_filters: Optional[pulumi.Input[str]] = None,
            tenant_name: Optional[pulumi.Input[str]] = None) -> 'Integration':
        """
        Get an existing Integration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_id: Your Azure web application ID.
        :param pulumi.Input[str] client_secret: (Required for Initial Creation) Your Azure web application secret key.
        :param pulumi.Input[str] host_filters: String of host tag(s) (in the form `key:value,key:value`) defines a filter that Datadog will use when collecting metrics
               from Azure. Limit the Azure instances that are pulled into Datadog by using tags. Only hosts that match one of the
               defined tags are imported into Datadog. e.x. `env:production,deploymentgroup:red`
        :param pulumi.Input[str] tenant_name: Your Azure Active Directory ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["client_id"] = client_id
        __props__["client_secret"] = client_secret
        __props__["host_filters"] = host_filters
        __props__["tenant_name"] = tenant_name
        return Integration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[str]:
        """
        Your Azure web application ID.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Output[str]:
        """
        (Required for Initial Creation) Your Azure web application secret key.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="hostFilters")
    def host_filters(self) -> pulumi.Output[Optional[str]]:
        """
        String of host tag(s) (in the form `key:value,key:value`) defines a filter that Datadog will use when collecting metrics
        from Azure. Limit the Azure instances that are pulled into Datadog by using tags. Only hosts that match one of the
        defined tags are imported into Datadog. e.x. `env:production,deploymentgroup:red`
        """
        return pulumi.get(self, "host_filters")

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> pulumi.Output[str]:
        """
        Your Azure Active Directory ID.
        """
        return pulumi.get(self, "tenant_name")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

