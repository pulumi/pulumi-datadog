# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSensitiveDataScannerStandardPatternResult',
    'AwaitableGetSensitiveDataScannerStandardPatternResult',
    'get_sensitive_data_scanner_standard_pattern',
    'get_sensitive_data_scanner_standard_pattern_output',
]

@pulumi.output_type
class GetSensitiveDataScannerStandardPatternResult:
    """
    A collection of values returned by getSensitiveDataScannerStandardPattern.
    """
    def __init__(__self__, filter=None, id=None, name=None, pattern=None, tags=None):
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pattern and not isinstance(pattern, str):
            raise TypeError("Expected argument 'pattern' to be a str")
        pulumi.set(__self__, "pattern", pattern)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def filter(self) -> str:
        """
        Filter all the Datadog standard patterns by name.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the standard pattern.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pattern(self) -> str:
        """
        Regex that the standard pattern applies.
        """
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        List of tags.
        """
        return pulumi.get(self, "tags")


class AwaitableGetSensitiveDataScannerStandardPatternResult(GetSensitiveDataScannerStandardPatternResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSensitiveDataScannerStandardPatternResult(
            filter=self.filter,
            id=self.id,
            name=self.name,
            pattern=self.pattern,
            tags=self.tags)


def get_sensitive_data_scanner_standard_pattern(filter: Optional[str] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSensitiveDataScannerStandardPatternResult:
    """
    Use this data source to retrieve information about an existing sensitive data scanner standard pattern.


    :param str filter: Filter all the Datadog standard patterns by name.
    """
    __args__ = dict()
    __args__['filter'] = filter
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('datadog:index/getSensitiveDataScannerStandardPattern:getSensitiveDataScannerStandardPattern', __args__, opts=opts, typ=GetSensitiveDataScannerStandardPatternResult).value

    return AwaitableGetSensitiveDataScannerStandardPatternResult(
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        pattern=pulumi.get(__ret__, 'pattern'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_sensitive_data_scanner_standard_pattern)
def get_sensitive_data_scanner_standard_pattern_output(filter: Optional[pulumi.Input[str]] = None,
                                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSensitiveDataScannerStandardPatternResult]:
    """
    Use this data source to retrieve information about an existing sensitive data scanner standard pattern.


    :param str filter: Filter all the Datadog standard patterns by name.
    """
    ...
