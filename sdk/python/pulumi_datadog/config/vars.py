# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

import types

__config__ = pulumi.Config('datadog')


class _ExportableConfig(types.ModuleType):
    @_builtins.property
    def api_key(self) -> Optional[str]:
        """
        (Required unless validate is false) Datadog API key. This can also be set via the DD_API_KEY environment variable.
        """
        return __config__.get('apiKey')

    @_builtins.property
    def api_url(self) -> Optional[str]:
        """
        The API URL. This can also be set via the DD_HOST environment variable, and defaults to `https://api.datadoghq.com`.
        Note that this URL must not end with the `/api/` path. For example, `https://api.datadoghq.com/` is a correct value,
        while `https://api.datadoghq.com/api/` is not. And if you're working with "EU" version of Datadog, use
        `https://api.datadoghq.eu/`. Other Datadog region examples: `https://api.us5.datadoghq.com/`,
        `https://api.us3.datadoghq.com/` and `https://api.ddog-gov.com/`. See https://docs.datadoghq.com/getting_started/site/
        for all available regions.
        """
        return __config__.get('apiUrl')

    @_builtins.property
    def app_key(self) -> Optional[str]:
        """
        (Required unless validate is false) Datadog APP key. This can also be set via the DD_APP_KEY environment variable.
        """
        return __config__.get('appKey')

    @_builtins.property
    def aws_access_key_id(self) -> Optional[str]:
        """
        The AWS access key ID; used for cloud-provider-based authentication. This can also be set using the `AWS_ACCESS_KEY_ID`
        environment variable. Required when using `cloud_provider_type` set to `aws`.
        """
        return __config__.get('awsAccessKeyId')

    @_builtins.property
    def aws_secret_access_key(self) -> Optional[str]:
        """
        The AWS secret access key; used for cloud-provider-based authentication. This can also be set using the
        `AWS_SECRET_ACCESS_KEY` environment variable. Required when using `cloud_provider_type` set to `aws`.
        """
        return __config__.get('awsSecretAccessKey')

    @_builtins.property
    def aws_session_token(self) -> Optional[str]:
        """
        The AWS session token; used for cloud-provider-based authentication. This can also be set using the `AWS_SESSION_TOKEN`
        environment variable. Required when using `cloud_provider_type` set to `aws` and using temporary credentials.
        """
        return __config__.get('awsSessionToken')

    @_builtins.property
    def cloud_provider_region(self) -> Optional[str]:
        """
        The cloud provider region specifier; used for cloud-provider-based authentication. For example, `us-east-1` for AWS.
        """
        return __config__.get('cloudProviderRegion')

    @_builtins.property
    def cloud_provider_type(self) -> Optional[str]:
        """
        Specifies the cloud provider used for cloud-provider-based authentication, enabling keyless access without API or app
        keys. Only [`aws`] is supported. This feature is in Preview. If you'd like to enable it for your organization, contact
        [support](https://docs.datadoghq.com/help/).
        """
        return __config__.get('cloudProviderType')

    @_builtins.property
    def default_tags(self) -> Optional[str]:
        """
        [Experimental - Logs Pipelines, Monitors Security Monitoring Rules, and Service Level Objectives only] Configuration
        block containing settings to apply default resource tags across all resources.
        """
        return __config__.get('defaultTags')

    @_builtins.property
    def http_client_retry_backoff_base(self) -> Optional[int]:
        """
        The HTTP request retry back off base. Defaults to 2.
        """
        return __config__.get_int('httpClientRetryBackoffBase')

    @_builtins.property
    def http_client_retry_backoff_multiplier(self) -> Optional[int]:
        """
        The HTTP request retry back off multiplier. Defaults to 2.
        """
        return __config__.get_int('httpClientRetryBackoffMultiplier')

    @_builtins.property
    def http_client_retry_enabled(self) -> Optional[str]:
        """
        Enables request retries on HTTP status codes 429 and 5xx. Valid values are [`true`, `false`]. Defaults to `true`.
        """
        return __config__.get('httpClientRetryEnabled')

    @_builtins.property
    def http_client_retry_max_retries(self) -> Optional[int]:
        """
        The HTTP request maximum retry number. Defaults to 3.
        """
        return __config__.get_int('httpClientRetryMaxRetries')

    @_builtins.property
    def http_client_retry_timeout(self) -> Optional[int]:
        """
        The HTTP request retry timeout period. Defaults to 60 seconds.
        """
        return __config__.get_int('httpClientRetryTimeout')

    @_builtins.property
    def org_uuid(self) -> Optional[str]:
        """
        The organization UUID; used for cloud-provider-based authentication. See the [Datadog API
        documentation](https://docs.datadoghq.com/api/v1/organizations/) for more information.
        """
        return __config__.get('orgUuid')

    @_builtins.property
    def validate(self) -> Optional[str]:
        """
        Enables validation of the provided API key during provider initialization. Valid values are [`true`, `false`]. Default
        is true. When false, api_key won't be checked.
        """
        return __config__.get('validate')

