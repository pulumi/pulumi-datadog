# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCsmThreatsPoliciesResult',
    'AwaitableGetCsmThreatsPoliciesResult',
    'get_csm_threats_policies',
    'get_csm_threats_policies_output',
]

@pulumi.output_type
class GetCsmThreatsPoliciesResult:
    """
    A collection of values returned by getCsmThreatsPolicies.
    """
    def __init__(__self__, id=None, policies=None, policy_ids=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if policy_ids and not isinstance(policy_ids, list):
            raise TypeError("Expected argument 'policy_ids' to be a list")
        pulumi.set(__self__, "policy_ids", policy_ids)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetCsmThreatsPoliciesPolicyResult']:
        """
        List of policies
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="policyIds")
    def policy_ids(self) -> Sequence[builtins.str]:
        """
        List of IDs for the policies.
        """
        return pulumi.get(self, "policy_ids")


class AwaitableGetCsmThreatsPoliciesResult(GetCsmThreatsPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCsmThreatsPoliciesResult(
            id=self.id,
            policies=self.policies,
            policy_ids=self.policy_ids)


def get_csm_threats_policies(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCsmThreatsPoliciesResult:
    """
    Use this data source to retrieve information about existing policies.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('datadog:index/getCsmThreatsPolicies:getCsmThreatsPolicies', __args__, opts=opts, typ=GetCsmThreatsPoliciesResult).value

    return AwaitableGetCsmThreatsPoliciesResult(
        id=pulumi.get(__ret__, 'id'),
        policies=pulumi.get(__ret__, 'policies'),
        policy_ids=pulumi.get(__ret__, 'policy_ids'))
def get_csm_threats_policies_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCsmThreatsPoliciesResult]:
    """
    Use this data source to retrieve information about existing policies.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('datadog:index/getCsmThreatsPolicies:getCsmThreatsPolicies', __args__, opts=opts, typ=GetCsmThreatsPoliciesResult)
    return __ret__.apply(lambda __response__: GetCsmThreatsPoliciesResult(
        id=pulumi.get(__response__, 'id'),
        policies=pulumi.get(__response__, 'policies'),
        policy_ids=pulumi.get(__response__, 'policy_ids')))
