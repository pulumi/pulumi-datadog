# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSoftwareCatalogResult',
    'AwaitableGetSoftwareCatalogResult',
    'get_software_catalog',
    'get_software_catalog_output',
]

@pulumi.output_type
class GetSoftwareCatalogResult:
    """
    A collection of values returned by getSoftwareCatalog.
    """
    def __init__(__self__, entities=None, filter_exclude_snapshot=None, filter_id=None, filter_kind=None, filter_name=None, filter_owner=None, filter_ref=None, filter_relation_type=None, id=None):
        if entities and not isinstance(entities, list):
            raise TypeError("Expected argument 'entities' to be a list")
        pulumi.set(__self__, "entities", entities)
        if filter_exclude_snapshot and not isinstance(filter_exclude_snapshot, str):
            raise TypeError("Expected argument 'filter_exclude_snapshot' to be a str")
        pulumi.set(__self__, "filter_exclude_snapshot", filter_exclude_snapshot)
        if filter_id and not isinstance(filter_id, str):
            raise TypeError("Expected argument 'filter_id' to be a str")
        pulumi.set(__self__, "filter_id", filter_id)
        if filter_kind and not isinstance(filter_kind, str):
            raise TypeError("Expected argument 'filter_kind' to be a str")
        pulumi.set(__self__, "filter_kind", filter_kind)
        if filter_name and not isinstance(filter_name, str):
            raise TypeError("Expected argument 'filter_name' to be a str")
        pulumi.set(__self__, "filter_name", filter_name)
        if filter_owner and not isinstance(filter_owner, str):
            raise TypeError("Expected argument 'filter_owner' to be a str")
        pulumi.set(__self__, "filter_owner", filter_owner)
        if filter_ref and not isinstance(filter_ref, str):
            raise TypeError("Expected argument 'filter_ref' to be a str")
        pulumi.set(__self__, "filter_ref", filter_ref)
        if filter_relation_type and not isinstance(filter_relation_type, str):
            raise TypeError("Expected argument 'filter_relation_type' to be a str")
        pulumi.set(__self__, "filter_relation_type", filter_relation_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def entities(self) -> Sequence['outputs.GetSoftwareCatalogEntityResult']:
        """
        List of entities
        """
        return pulumi.get(self, "entities")

    @property
    @pulumi.getter(name="filterExcludeSnapshot")
    def filter_exclude_snapshot(self) -> Optional[builtins.str]:
        """
        Filter entities by excluding snapshotted entities.
        """
        return pulumi.get(self, "filter_exclude_snapshot")

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> Optional[builtins.str]:
        """
        Filter entities by UUID.
        """
        return pulumi.get(self, "filter_id")

    @property
    @pulumi.getter(name="filterKind")
    def filter_kind(self) -> Optional[builtins.str]:
        """
        Filter entities by kind.
        """
        return pulumi.get(self, "filter_kind")

    @property
    @pulumi.getter(name="filterName")
    def filter_name(self) -> Optional[builtins.str]:
        """
        Filter entities by name.
        """
        return pulumi.get(self, "filter_name")

    @property
    @pulumi.getter(name="filterOwner")
    def filter_owner(self) -> Optional[builtins.str]:
        """
        Filter entities by owner.
        """
        return pulumi.get(self, "filter_owner")

    @property
    @pulumi.getter(name="filterRef")
    def filter_ref(self) -> Optional[builtins.str]:
        """
        Filter entities by reference.
        """
        return pulumi.get(self, "filter_ref")

    @property
    @pulumi.getter(name="filterRelationType")
    def filter_relation_type(self) -> Optional[builtins.str]:
        """
        Filter entities by relation type.
        """
        return pulumi.get(self, "filter_relation_type")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetSoftwareCatalogResult(GetSoftwareCatalogResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSoftwareCatalogResult(
            entities=self.entities,
            filter_exclude_snapshot=self.filter_exclude_snapshot,
            filter_id=self.filter_id,
            filter_kind=self.filter_kind,
            filter_name=self.filter_name,
            filter_owner=self.filter_owner,
            filter_ref=self.filter_ref,
            filter_relation_type=self.filter_relation_type,
            id=self.id)


def get_software_catalog(filter_exclude_snapshot: Optional[builtins.str] = None,
                         filter_id: Optional[builtins.str] = None,
                         filter_kind: Optional[builtins.str] = None,
                         filter_name: Optional[builtins.str] = None,
                         filter_owner: Optional[builtins.str] = None,
                         filter_ref: Optional[builtins.str] = None,
                         filter_relation_type: Optional[builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSoftwareCatalogResult:
    """
    Use this data source to list software catalog entities to use in other resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_datadog as datadog

    test = datadog.get_software_catalog()
    ```


    :param builtins.str filter_exclude_snapshot: Filter entities by excluding snapshotted entities.
    :param builtins.str filter_id: Filter entities by UUID.
    :param builtins.str filter_kind: Filter entities by kind.
    :param builtins.str filter_name: Filter entities by name.
    :param builtins.str filter_owner: Filter entities by owner.
    :param builtins.str filter_ref: Filter entities by reference.
    :param builtins.str filter_relation_type: Filter entities by relation type.
    """
    __args__ = dict()
    __args__['filterExcludeSnapshot'] = filter_exclude_snapshot
    __args__['filterId'] = filter_id
    __args__['filterKind'] = filter_kind
    __args__['filterName'] = filter_name
    __args__['filterOwner'] = filter_owner
    __args__['filterRef'] = filter_ref
    __args__['filterRelationType'] = filter_relation_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('datadog:index/getSoftwareCatalog:getSoftwareCatalog', __args__, opts=opts, typ=GetSoftwareCatalogResult).value

    return AwaitableGetSoftwareCatalogResult(
        entities=pulumi.get(__ret__, 'entities'),
        filter_exclude_snapshot=pulumi.get(__ret__, 'filter_exclude_snapshot'),
        filter_id=pulumi.get(__ret__, 'filter_id'),
        filter_kind=pulumi.get(__ret__, 'filter_kind'),
        filter_name=pulumi.get(__ret__, 'filter_name'),
        filter_owner=pulumi.get(__ret__, 'filter_owner'),
        filter_ref=pulumi.get(__ret__, 'filter_ref'),
        filter_relation_type=pulumi.get(__ret__, 'filter_relation_type'),
        id=pulumi.get(__ret__, 'id'))
def get_software_catalog_output(filter_exclude_snapshot: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                filter_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                filter_kind: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                filter_name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                filter_owner: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                filter_ref: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                filter_relation_type: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSoftwareCatalogResult]:
    """
    Use this data source to list software catalog entities to use in other resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_datadog as datadog

    test = datadog.get_software_catalog()
    ```


    :param builtins.str filter_exclude_snapshot: Filter entities by excluding snapshotted entities.
    :param builtins.str filter_id: Filter entities by UUID.
    :param builtins.str filter_kind: Filter entities by kind.
    :param builtins.str filter_name: Filter entities by name.
    :param builtins.str filter_owner: Filter entities by owner.
    :param builtins.str filter_ref: Filter entities by reference.
    :param builtins.str filter_relation_type: Filter entities by relation type.
    """
    __args__ = dict()
    __args__['filterExcludeSnapshot'] = filter_exclude_snapshot
    __args__['filterId'] = filter_id
    __args__['filterKind'] = filter_kind
    __args__['filterName'] = filter_name
    __args__['filterOwner'] = filter_owner
    __args__['filterRef'] = filter_ref
    __args__['filterRelationType'] = filter_relation_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('datadog:index/getSoftwareCatalog:getSoftwareCatalog', __args__, opts=opts, typ=GetSoftwareCatalogResult)
    return __ret__.apply(lambda __response__: GetSoftwareCatalogResult(
        entities=pulumi.get(__response__, 'entities'),
        filter_exclude_snapshot=pulumi.get(__response__, 'filter_exclude_snapshot'),
        filter_id=pulumi.get(__response__, 'filter_id'),
        filter_kind=pulumi.get(__response__, 'filter_kind'),
        filter_name=pulumi.get(__response__, 'filter_name'),
        filter_owner=pulumi.get(__response__, 'filter_owner'),
        filter_ref=pulumi.get(__response__, 'filter_ref'),
        filter_relation_type=pulumi.get(__response__, 'filter_relation_type'),
        id=pulumi.get(__response__, 'id')))
