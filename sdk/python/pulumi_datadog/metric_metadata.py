# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class MetricMetadata(pulumi.CustomResource):
    description: pulumi.Output[str]
    """
    A description of the metric.
    """
    metric: pulumi.Output[str]
    """
    The name of the metric.
    """
    per_unit: pulumi.Output[str]
    """
    'Per' unit of the metric such as 'second' in 'bytes per second'.
    """
    short_name: pulumi.Output[str]
    """
    A short name of the metric.
    """
    statsd_interval: pulumi.Output[float]
    """
    If applicable, stasd flush interval in seconds for the metric.
    """
    type: pulumi.Output[str]
    unit: pulumi.Output[str]
    """
    Primary unit of the metric such as 'byte' or 'operation'.
    """
    def __init__(__self__, resource_name, opts=None, description=None, metric=None, per_unit=None, short_name=None, statsd_interval=None, type=None, unit=None, __name__=None, __opts__=None):
        """
        Provides a Datadog metric_metadata resource. This can be used to manage a metric's metadata.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A description of the metric.
        :param pulumi.Input[str] metric: The name of the metric.
        :param pulumi.Input[str] per_unit: 'Per' unit of the metric such as 'second' in 'bytes per second'.
        :param pulumi.Input[str] short_name: A short name of the metric.
        :param pulumi.Input[float] statsd_interval: If applicable, stasd flush interval in seconds for the metric.
        :param pulumi.Input[str] unit: Primary unit of the metric such as 'byte' or 'operation'.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['description'] = description

        if metric is None:
            raise TypeError("Missing required property 'metric'")
        __props__['metric'] = metric

        __props__['per_unit'] = per_unit

        __props__['short_name'] = short_name

        __props__['statsd_interval'] = statsd_interval

        __props__['type'] = type

        __props__['unit'] = unit

        super(MetricMetadata, __self__).__init__(
            'index:index/metricMetadata:MetricMetadata',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

