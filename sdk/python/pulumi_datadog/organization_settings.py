# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OrganizationSettingsArgs', 'OrganizationSettings']

@pulumi.input_type
class OrganizationSettingsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input['OrganizationSettingsSettingsArgs']] = None):
        """
        The set of arguments for constructing a OrganizationSettings resource.
        :param pulumi.Input[str] name: Name for Organization.
        :param pulumi.Input['OrganizationSettingsSettingsArgs'] settings: Organization settings
        """
        OrganizationSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            settings=settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             settings: Optional[pulumi.Input['OrganizationSettingsSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if settings is not None:
            _setter("settings", settings)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name for Organization.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['OrganizationSettingsSettingsArgs']]:
        """
        Organization settings
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['OrganizationSettingsSettingsArgs']]):
        pulumi.set(self, "settings", value)


@pulumi.input_type
class _OrganizationSettingsState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public_id: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input['OrganizationSettingsSettingsArgs']] = None):
        """
        Input properties used for looking up and filtering OrganizationSettings resources.
        :param pulumi.Input[str] description: Description of the organization.
        :param pulumi.Input[str] name: Name for Organization.
        :param pulumi.Input[str] public_id: The `public_id` of the organization you are operating within.
        :param pulumi.Input['OrganizationSettingsSettingsArgs'] settings: Organization settings
        """
        _OrganizationSettingsState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            name=name,
            public_id=public_id,
            settings=settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             public_id: Optional[pulumi.Input[str]] = None,
             settings: Optional[pulumi.Input['OrganizationSettingsSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if description is not None:
            _setter("description", description)
        if name is not None:
            _setter("name", name)
        if public_id is not None:
            _setter("public_id", public_id)
        if settings is not None:
            _setter("settings", settings)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the organization.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name for Organization.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicId")
    def public_id(self) -> Optional[pulumi.Input[str]]:
        """
        The `public_id` of the organization you are operating within.
        """
        return pulumi.get(self, "public_id")

    @public_id.setter
    def public_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_id", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['OrganizationSettingsSettingsArgs']]:
        """
        Organization settings
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['OrganizationSettingsSettingsArgs']]):
        pulumi.set(self, "settings", value)


class OrganizationSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[pulumi.InputType['OrganizationSettingsSettingsArgs']]] = None,
                 __props__=None):
        """
        Provides a Datadog Organization resource. This can be used to manage your Datadog organization's settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        # Manage Datadog Organization
        organization = datadog.OrganizationSettings("organization", name="foo-organization")
        ```

        ## Import

        ```sh
         $ pulumi import datadog:index/organizationSettings:OrganizationSettings organization 11111111-2222-3333-4444-555555555555
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Name for Organization.
        :param pulumi.Input[pulumi.InputType['OrganizationSettingsSettingsArgs']] settings: Organization settings
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[OrganizationSettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Datadog Organization resource. This can be used to manage your Datadog organization's settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        # Manage Datadog Organization
        organization = datadog.OrganizationSettings("organization", name="foo-organization")
        ```

        ## Import

        ```sh
         $ pulumi import datadog:index/organizationSettings:OrganizationSettings organization 11111111-2222-3333-4444-555555555555
        ```

        :param str resource_name: The name of the resource.
        :param OrganizationSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrganizationSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            OrganizationSettingsArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[pulumi.InputType['OrganizationSettingsSettingsArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrganizationSettingsArgs.__new__(OrganizationSettingsArgs)

            __props__.__dict__["name"] = name
            if settings is not None and not isinstance(settings, OrganizationSettingsSettingsArgs):
                settings = settings or {}
                def _setter(key, value):
                    settings[key] = value
                OrganizationSettingsSettingsArgs._configure(_setter, **settings)
            __props__.__dict__["settings"] = settings
            __props__.__dict__["description"] = None
            __props__.__dict__["public_id"] = None
        super(OrganizationSettings, __self__).__init__(
            'datadog:index/organizationSettings:OrganizationSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            public_id: Optional[pulumi.Input[str]] = None,
            settings: Optional[pulumi.Input[pulumi.InputType['OrganizationSettingsSettingsArgs']]] = None) -> 'OrganizationSettings':
        """
        Get an existing OrganizationSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the organization.
        :param pulumi.Input[str] name: Name for Organization.
        :param pulumi.Input[str] public_id: The `public_id` of the organization you are operating within.
        :param pulumi.Input[pulumi.InputType['OrganizationSettingsSettingsArgs']] settings: Organization settings
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrganizationSettingsState.__new__(_OrganizationSettingsState)

        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["public_id"] = public_id
        __props__.__dict__["settings"] = settings
        return OrganizationSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description of the organization.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        """
        Name for Organization.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicId")
    def public_id(self) -> pulumi.Output[str]:
        """
        The `public_id` of the organization you are operating within.
        """
        return pulumi.get(self, "public_id")

    @property
    @pulumi.getter
    def settings(self) -> pulumi.Output['outputs.OrganizationSettingsSettings']:
        """
        Organization settings
        """
        return pulumi.get(self, "settings")

