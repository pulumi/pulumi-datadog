# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AppKeyRegistrationArgs', 'AppKeyRegistration']

@pulumi.input_type
class AppKeyRegistrationArgs:
    def __init__(__self__, *,
                 app_key_id: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a AppKeyRegistration resource.
        :param pulumi.Input[_builtins.str] app_key_id: The Application Key ID to register.
        """
        pulumi.set(__self__, "app_key_id", app_key_id)

    @_builtins.property
    @pulumi.getter(name="appKeyId")
    def app_key_id(self) -> pulumi.Input[_builtins.str]:
        """
        The Application Key ID to register.
        """
        return pulumi.get(self, "app_key_id")

    @app_key_id.setter
    def app_key_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "app_key_id", value)


@pulumi.input_type
class _AppKeyRegistrationState:
    def __init__(__self__, *,
                 app_key_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppKeyRegistration resources.
        :param pulumi.Input[_builtins.str] app_key_id: The Application Key ID to register.
        """
        if app_key_id is not None:
            pulumi.set(__self__, "app_key_id", app_key_id)

    @_builtins.property
    @pulumi.getter(name="appKeyId")
    def app_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Application Key ID to register.
        """
        return pulumi.get(self, "app_key_id")

    @app_key_id.setter
    def app_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_key_id", value)


@pulumi.type_token("datadog:index/appKeyRegistration:AppKeyRegistration")
class AppKeyRegistration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        app_key_registration = datadog.AppKeyRegistration("app_key_registration", app_key_id="11111111-2222-3333-4444-555555555555")
        ```

        ## Import

        The `pulumi import` command can be used, for example:

        ```sh
        $ pulumi import datadog:index/appKeyRegistration:AppKeyRegistration my_app_key_registration 11111111-2222-3333-4444-555555555555
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_key_id: The Application Key ID to register.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppKeyRegistrationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        app_key_registration = datadog.AppKeyRegistration("app_key_registration", app_key_id="11111111-2222-3333-4444-555555555555")
        ```

        ## Import

        The `pulumi import` command can be used, for example:

        ```sh
        $ pulumi import datadog:index/appKeyRegistration:AppKeyRegistration my_app_key_registration 11111111-2222-3333-4444-555555555555
        ```

        :param str resource_name: The name of the resource.
        :param AppKeyRegistrationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppKeyRegistrationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppKeyRegistrationArgs.__new__(AppKeyRegistrationArgs)

            if app_key_id is None and not opts.urn:
                raise TypeError("Missing required property 'app_key_id'")
            __props__.__dict__["app_key_id"] = app_key_id
        super(AppKeyRegistration, __self__).__init__(
            'datadog:index/appKeyRegistration:AppKeyRegistration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_key_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppKeyRegistration':
        """
        Get an existing AppKeyRegistration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_key_id: The Application Key ID to register.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppKeyRegistrationState.__new__(_AppKeyRegistrationState)

        __props__.__dict__["app_key_id"] = app_key_id
        return AppKeyRegistration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appKeyId")
    def app_key_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Application Key ID to register.
        """
        return pulumi.get(self, "app_key_id")

