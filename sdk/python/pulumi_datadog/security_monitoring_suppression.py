# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SecurityMonitoringSuppressionArgs', 'SecurityMonitoringSuppression']

@pulumi.input_type
class SecurityMonitoringSuppressionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 name: pulumi.Input[str],
                 rule_query: pulumi.Input[str],
                 suppression_query: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 expiration_date: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SecurityMonitoringSuppression resource.
        :param pulumi.Input[bool] enabled: Whether the suppression rule is enabled.
        :param pulumi.Input[str] name: The name of the suppression rule.
        :param pulumi.Input[str] rule_query: The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
        :param pulumi.Input[str] suppression_query: The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
        :param pulumi.Input[str] description: A description for the suppression rule.
        :param pulumi.Input[str] expiration_date: A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rule_query", rule_query)
        pulumi.set(__self__, "suppression_query", suppression_query)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Whether the suppression rule is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the suppression rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ruleQuery")
    def rule_query(self) -> pulumi.Input[str]:
        """
        The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
        """
        return pulumi.get(self, "rule_query")

    @rule_query.setter
    def rule_query(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_query", value)

    @property
    @pulumi.getter(name="suppressionQuery")
    def suppression_query(self) -> pulumi.Input[str]:
        """
        The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
        """
        return pulumi.get(self, "suppression_query")

    @suppression_query.setter
    def suppression_query(self, value: pulumi.Input[str]):
        pulumi.set(self, "suppression_query", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description for the suppression rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[pulumi.Input[str]]:
        """
        A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
        """
        return pulumi.get(self, "expiration_date")

    @expiration_date.setter
    def expiration_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_date", value)


@pulumi.input_type
class _SecurityMonitoringSuppressionState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 expiration_date: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rule_query: Optional[pulumi.Input[str]] = None,
                 suppression_query: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SecurityMonitoringSuppression resources.
        :param pulumi.Input[str] description: A description for the suppression rule.
        :param pulumi.Input[bool] enabled: Whether the suppression rule is enabled.
        :param pulumi.Input[str] expiration_date: A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
        :param pulumi.Input[str] name: The name of the suppression rule.
        :param pulumi.Input[str] rule_query: The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
        :param pulumi.Input[str] suppression_query: The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rule_query is not None:
            pulumi.set(__self__, "rule_query", rule_query)
        if suppression_query is not None:
            pulumi.set(__self__, "suppression_query", suppression_query)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description for the suppression rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the suppression rule is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[pulumi.Input[str]]:
        """
        A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
        """
        return pulumi.get(self, "expiration_date")

    @expiration_date.setter
    def expiration_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_date", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the suppression rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ruleQuery")
    def rule_query(self) -> Optional[pulumi.Input[str]]:
        """
        The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
        """
        return pulumi.get(self, "rule_query")

    @rule_query.setter
    def rule_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_query", value)

    @property
    @pulumi.getter(name="suppressionQuery")
    def suppression_query(self) -> Optional[pulumi.Input[str]]:
        """
        The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
        """
        return pulumi.get(self, "suppression_query")

    @suppression_query.setter
    def suppression_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suppression_query", value)


class SecurityMonitoringSuppression(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 expiration_date: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rule_query: Optional[pulumi.Input[str]] = None,
                 suppression_query: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Datadog Security Monitoring Suppression API resource. It can be used to create and manage Datadog security monitoring suppression rules.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A description for the suppression rule.
        :param pulumi.Input[bool] enabled: Whether the suppression rule is enabled.
        :param pulumi.Input[str] expiration_date: A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
        :param pulumi.Input[str] name: The name of the suppression rule.
        :param pulumi.Input[str] rule_query: The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
        :param pulumi.Input[str] suppression_query: The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecurityMonitoringSuppressionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Datadog Security Monitoring Suppression API resource. It can be used to create and manage Datadog security monitoring suppression rules.

        :param str resource_name: The name of the resource.
        :param SecurityMonitoringSuppressionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityMonitoringSuppressionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 expiration_date: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rule_query: Optional[pulumi.Input[str]] = None,
                 suppression_query: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityMonitoringSuppressionArgs.__new__(SecurityMonitoringSuppressionArgs)

            __props__.__dict__["description"] = description
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["expiration_date"] = expiration_date
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if rule_query is None and not opts.urn:
                raise TypeError("Missing required property 'rule_query'")
            __props__.__dict__["rule_query"] = rule_query
            if suppression_query is None and not opts.urn:
                raise TypeError("Missing required property 'suppression_query'")
            __props__.__dict__["suppression_query"] = suppression_query
        super(SecurityMonitoringSuppression, __self__).__init__(
            'datadog:index/securityMonitoringSuppression:SecurityMonitoringSuppression',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            expiration_date: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            rule_query: Optional[pulumi.Input[str]] = None,
            suppression_query: Optional[pulumi.Input[str]] = None) -> 'SecurityMonitoringSuppression':
        """
        Get an existing SecurityMonitoringSuppression resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A description for the suppression rule.
        :param pulumi.Input[bool] enabled: Whether the suppression rule is enabled.
        :param pulumi.Input[str] expiration_date: A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
        :param pulumi.Input[str] name: The name of the suppression rule.
        :param pulumi.Input[str] rule_query: The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
        :param pulumi.Input[str] suppression_query: The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecurityMonitoringSuppressionState.__new__(_SecurityMonitoringSuppressionState)

        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["expiration_date"] = expiration_date
        __props__.__dict__["name"] = name
        __props__.__dict__["rule_query"] = rule_query
        __props__.__dict__["suppression_query"] = suppression_query
        return SecurityMonitoringSuppression(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A description for the suppression rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Whether the suppression rule is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> pulumi.Output[Optional[str]]:
        """
        A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
        """
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the suppression rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ruleQuery")
    def rule_query(self) -> pulumi.Output[str]:
        """
        The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
        """
        return pulumi.get(self, "rule_query")

    @property
    @pulumi.getter(name="suppressionQuery")
    def suppression_query(self) -> pulumi.Output[str]:
        """
        The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
        """
        return pulumi.get(self, "suppression_query")

