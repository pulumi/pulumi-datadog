# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApmRetentionFilterArgs', 'ApmRetentionFilter']

@pulumi.input_type
class ApmRetentionFilterArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 filter_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 rate: pulumi.Input[str],
                 filter: Optional[pulumi.Input['ApmRetentionFilterFilterArgs']] = None):
        """
        The set of arguments for constructing a ApmRetentionFilter resource.
        :param pulumi.Input[bool] enabled: the status of the retention filter.
        :param pulumi.Input[str] filter_type: The type of the retention filter, currently only spans-processing-sampling is available. Valid values are `spans-sampling-processor`.
        :param pulumi.Input[str] name: The name of the retention filter.
        :param pulumi.Input[str] rate: Sample rate to apply to spans going through this retention filter as a string, a value of 1.0 keeps all spans matching the query.
        :param pulumi.Input['ApmRetentionFilterFilterArgs'] filter: The spans filter. Spans matching this filter will be indexed and stored.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rate", rate)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        the status of the retention filter.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        """
        The type of the retention filter, currently only spans-processing-sampling is available. Valid values are `spans-sampling-processor`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the retention filter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rate(self) -> pulumi.Input[str]:
        """
        Sample rate to apply to spans going through this retention filter as a string, a value of 1.0 keeps all spans matching the query.
        """
        return pulumi.get(self, "rate")

    @rate.setter
    def rate(self, value: pulumi.Input[str]):
        pulumi.set(self, "rate", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['ApmRetentionFilterFilterArgs']]:
        """
        The spans filter. Spans matching this filter will be indexed and stored.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['ApmRetentionFilterFilterArgs']]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class _ApmRetentionFilterState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 filter: Optional[pulumi.Input['ApmRetentionFilterFilterArgs']] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rate: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ApmRetentionFilter resources.
        :param pulumi.Input[bool] enabled: the status of the retention filter.
        :param pulumi.Input['ApmRetentionFilterFilterArgs'] filter: The spans filter. Spans matching this filter will be indexed and stored.
        :param pulumi.Input[str] filter_type: The type of the retention filter, currently only spans-processing-sampling is available. Valid values are `spans-sampling-processor`.
        :param pulumi.Input[str] name: The name of the retention filter.
        :param pulumi.Input[str] rate: Sample rate to apply to spans going through this retention filter as a string, a value of 1.0 keeps all spans matching the query.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rate is not None:
            pulumi.set(__self__, "rate", rate)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        the status of the retention filter.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['ApmRetentionFilterFilterArgs']]:
        """
        The spans filter. Spans matching this filter will be indexed and stored.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['ApmRetentionFilterFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the retention filter, currently only spans-processing-sampling is available. Valid values are `spans-sampling-processor`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the retention filter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rate(self) -> Optional[pulumi.Input[str]]:
        """
        Sample rate to apply to spans going through this retention filter as a string, a value of 1.0 keeps all spans matching the query.
        """
        return pulumi.get(self, "rate")

    @rate.setter
    def rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate", value)


class ApmRetentionFilter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['ApmRetentionFilterFilterArgs']]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rate: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The object describing the configuration of the retention filter to create/update.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        # Create APM retention filter
        foo = datadog.ApmRetentionFilter("foo",
            enabled=False,
            filter=datadog.ApmRetentionFilterFilterArgs(
                query="*",
            ),
            filter_type="spans-sampling-processor",
            name="Sample order",
            rate="1.0")
        ```

        ## Import

        Import existing APM retention filter

        ```sh
        $ pulumi import datadog:index/apmRetentionFilter:ApmRetentionFilter foo <filter_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: the status of the retention filter.
        :param pulumi.Input[pulumi.InputType['ApmRetentionFilterFilterArgs']] filter: The spans filter. Spans matching this filter will be indexed and stored.
        :param pulumi.Input[str] filter_type: The type of the retention filter, currently only spans-processing-sampling is available. Valid values are `spans-sampling-processor`.
        :param pulumi.Input[str] name: The name of the retention filter.
        :param pulumi.Input[str] rate: Sample rate to apply to spans going through this retention filter as a string, a value of 1.0 keeps all spans matching the query.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApmRetentionFilterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The object describing the configuration of the retention filter to create/update.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        # Create APM retention filter
        foo = datadog.ApmRetentionFilter("foo",
            enabled=False,
            filter=datadog.ApmRetentionFilterFilterArgs(
                query="*",
            ),
            filter_type="spans-sampling-processor",
            name="Sample order",
            rate="1.0")
        ```

        ## Import

        Import existing APM retention filter

        ```sh
        $ pulumi import datadog:index/apmRetentionFilter:ApmRetentionFilter foo <filter_id>
        ```

        :param str resource_name: The name of the resource.
        :param ApmRetentionFilterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApmRetentionFilterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['ApmRetentionFilterFilterArgs']]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rate: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApmRetentionFilterArgs.__new__(ApmRetentionFilterArgs)

            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["filter"] = filter
            if filter_type is None and not opts.urn:
                raise TypeError("Missing required property 'filter_type'")
            __props__.__dict__["filter_type"] = filter_type
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if rate is None and not opts.urn:
                raise TypeError("Missing required property 'rate'")
            __props__.__dict__["rate"] = rate
        super(ApmRetentionFilter, __self__).__init__(
            'datadog:index/apmRetentionFilter:ApmRetentionFilter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            filter: Optional[pulumi.Input[pulumi.InputType['ApmRetentionFilterFilterArgs']]] = None,
            filter_type: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            rate: Optional[pulumi.Input[str]] = None) -> 'ApmRetentionFilter':
        """
        Get an existing ApmRetentionFilter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: the status of the retention filter.
        :param pulumi.Input[pulumi.InputType['ApmRetentionFilterFilterArgs']] filter: The spans filter. Spans matching this filter will be indexed and stored.
        :param pulumi.Input[str] filter_type: The type of the retention filter, currently only spans-processing-sampling is available. Valid values are `spans-sampling-processor`.
        :param pulumi.Input[str] name: The name of the retention filter.
        :param pulumi.Input[str] rate: Sample rate to apply to spans going through this retention filter as a string, a value of 1.0 keeps all spans matching the query.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApmRetentionFilterState.__new__(_ApmRetentionFilterState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["filter"] = filter
        __props__.__dict__["filter_type"] = filter_type
        __props__.__dict__["name"] = name
        __props__.__dict__["rate"] = rate
        return ApmRetentionFilter(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        the status of the retention filter.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Output[Optional['outputs.ApmRetentionFilterFilter']]:
        """
        The spans filter. Spans matching this filter will be indexed and stored.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Output[str]:
        """
        The type of the retention filter, currently only spans-processing-sampling is available. Valid values are `spans-sampling-processor`.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the retention filter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rate(self) -> pulumi.Output[str]:
        """
        Sample rate to apply to spans going through this retention filter as a string, a value of 1.0 keeps all spans matching the query.
        """
        return pulumi.get(self, "rate")

