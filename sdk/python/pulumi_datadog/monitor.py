# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Monitor']


class Monitor(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_logs_sample: Optional[pulumi.Input[bool]] = None,
                 escalation_message: Optional[pulumi.Input[str]] = None,
                 evaluation_delay: Optional[pulumi.Input[int]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 include_tags: Optional[pulumi.Input[bool]] = None,
                 locked: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 new_host_delay: Optional[pulumi.Input[int]] = None,
                 no_data_timeframe: Optional[pulumi.Input[int]] = None,
                 notify_audit: Optional[pulumi.Input[bool]] = None,
                 notify_no_data: Optional[pulumi.Input[bool]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 renotify_interval: Optional[pulumi.Input[int]] = None,
                 require_full_window: Optional[pulumi.Input[bool]] = None,
                 silenced: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 threshold_windows: Optional[pulumi.Input[pulumi.InputType['MonitorThresholdWindowsArgs']]] = None,
                 thresholds: Optional[pulumi.Input[pulumi.InputType['MonitorThresholdsArgs']]] = None,
                 timeout_h: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 validate: Optional[pulumi.Input[bool]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Provides a Datadog monitor resource. This can be used to create and manage Datadog monitors.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        # Create a new Datadog monitor
        foo = datadog.Monitor("foo",
            name="Name for monitor foo",
            type="metric alert",
            message="Monitor triggered. Notify: @hipchat-channel",
            escalation_message="Escalation message @pagerduty",
            query="avg(last_1h):avg:aws.ec2.cpu{environment:foo,host:foo} by {host} > 4",
            thresholds=datadog.MonitorThresholdsArgs(
                ok=0,
                warning=2,
                warning_recovery=1,
                critical=4,
                critical_recovery=3,
            ),
            notify_no_data=False,
            renotify_interval=60,
            notify_audit=False,
            timeout_h=60,
            include_tags=True,
            tags=[
                "foo:bar",
                "baz",
            ])
        ```
        ## Silencing by Hand and by Downtimes

        There are two ways how to silence a single monitor:

        -   Mute it by hand
        -   Create a Downtime

        Both of these actions add a new value to the `silenced` map. This can be problematic if the `silenced` attribute doesn't contain them in your application, as they would be removed on next `pulumi up` invocation. In order to prevent that from happening, you can add following to your monitor:

        ```python
        import pulumi
        ```

        The above will make sure that any changes to the `silenced` attribute are ignored.

        This issue doesn't apply to multi-monitor downtimes (those that don't contain `monitor_id` ), as these don't influence contents of the `silenced` attribute.

        ## Composite Monitors

        You can compose monitors of all types in order to define more specific alert conditions (see the [doc](https://docs.datadoghq.com/monitors/monitor_types/composite/)). You just need to reuse the ID of your `Monitor` resources. You can also compose any monitor with a `SyntheticsTest` by passing the computed `monitor_id` attribute in the query.

        ```python
        import pulumi
        import pulumi_datadog as datadog

        bar = datadog.Monitor("bar",
            message="This is a message",
            name="Composite Monitor",
            query=f"{datadog_monitor['foo']['id']} || {datadog_synthetics_test['foo']['monitor_id']}",
            type="composite")
        ```

        ## Import

        Monitors can be imported using their numeric ID, e.g. console

        ```sh
         $ pulumi import datadog:index/monitor:Monitor bytes_received_localhost 2081
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_logs_sample: A boolean indicating whether or not to include a list of log values which triggered the alert. Defaults to false. This is only used by log monitors.
        :param pulumi.Input[int] evaluation_delay: Time (in seconds) to delay evaluation, as a non-negative integer.
        :param pulumi.Input[bool] force_delete: A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. SLO, composite monitor).
        :param pulumi.Input[bool] include_tags: A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to true.
        :param pulumi.Input[bool] locked: A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
        :param pulumi.Input[int] new_host_delay: Time (in seconds) to allow a host to boot and
        :param pulumi.Input[int] no_data_timeframe: The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes.
        :param pulumi.Input[bool] notify_audit: A boolean indicating whether tagged users will be notified on changes to this monitor.
        :param pulumi.Input[bool] notify_no_data: A boolean indicating whether this monitor will notify when data stops reporting. Defaults
        :param pulumi.Input[int] renotify_interval: The number of minutes after the last notification before a monitor will re-notify
        :param pulumi.Input[bool] require_full_window: A boolean indicating whether this monitor needs a full window of data before it's evaluated.
        :param pulumi.Input[Mapping[str, Any]] silenced: Each scope will be muted until the given POSIX timestamp or forever if the value is 0. Use `-1` if you want to unmute the scope. **Deprecated** The `silenced` parameter is being deprecated in favor of the downtime resource. This will be removed in the next major version of the provider Provider.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
        :param pulumi.Input[pulumi.InputType['MonitorThresholdWindowsArgs']] threshold_windows: A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are required for, anomaly monitors.
        :param pulumi.Input[int] timeout_h: The number of hours of the monitor not reporting data before it will automatically resolve
        :param pulumi.Input[bool] validate: If set to false, skip the validation call done during `plan` .
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['enable_logs_sample'] = enable_logs_sample
            __props__['escalation_message'] = escalation_message
            __props__['evaluation_delay'] = evaluation_delay
            __props__['force_delete'] = force_delete
            __props__['include_tags'] = include_tags
            __props__['locked'] = locked
            if message is None:
                raise TypeError("Missing required property 'message'")
            __props__['message'] = message
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['new_host_delay'] = new_host_delay
            __props__['no_data_timeframe'] = no_data_timeframe
            __props__['notify_audit'] = notify_audit
            __props__['notify_no_data'] = notify_no_data
            __props__['priority'] = priority
            if query is None:
                raise TypeError("Missing required property 'query'")
            __props__['query'] = query
            __props__['renotify_interval'] = renotify_interval
            __props__['require_full_window'] = require_full_window
            if silenced is not None:
                warnings.warn("""use Downtime Resource instead""", DeprecationWarning)
                pulumi.log.warn("silenced is deprecated: use Downtime Resource instead")
            __props__['silenced'] = silenced
            __props__['tags'] = tags
            __props__['threshold_windows'] = threshold_windows
            __props__['thresholds'] = thresholds
            __props__['timeout_h'] = timeout_h
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
            __props__['validate'] = validate
        super(Monitor, __self__).__init__(
            'datadog:index/monitor:Monitor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_logs_sample: Optional[pulumi.Input[bool]] = None,
            escalation_message: Optional[pulumi.Input[str]] = None,
            evaluation_delay: Optional[pulumi.Input[int]] = None,
            force_delete: Optional[pulumi.Input[bool]] = None,
            include_tags: Optional[pulumi.Input[bool]] = None,
            locked: Optional[pulumi.Input[bool]] = None,
            message: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            new_host_delay: Optional[pulumi.Input[int]] = None,
            no_data_timeframe: Optional[pulumi.Input[int]] = None,
            notify_audit: Optional[pulumi.Input[bool]] = None,
            notify_no_data: Optional[pulumi.Input[bool]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            query: Optional[pulumi.Input[str]] = None,
            renotify_interval: Optional[pulumi.Input[int]] = None,
            require_full_window: Optional[pulumi.Input[bool]] = None,
            silenced: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            threshold_windows: Optional[pulumi.Input[pulumi.InputType['MonitorThresholdWindowsArgs']]] = None,
            thresholds: Optional[pulumi.Input[pulumi.InputType['MonitorThresholdsArgs']]] = None,
            timeout_h: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            validate: Optional[pulumi.Input[bool]] = None) -> 'Monitor':
        """
        Get an existing Monitor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_logs_sample: A boolean indicating whether or not to include a list of log values which triggered the alert. Defaults to false. This is only used by log monitors.
        :param pulumi.Input[int] evaluation_delay: Time (in seconds) to delay evaluation, as a non-negative integer.
        :param pulumi.Input[bool] force_delete: A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. SLO, composite monitor).
        :param pulumi.Input[bool] include_tags: A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to true.
        :param pulumi.Input[bool] locked: A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
        :param pulumi.Input[int] new_host_delay: Time (in seconds) to allow a host to boot and
        :param pulumi.Input[int] no_data_timeframe: The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes.
        :param pulumi.Input[bool] notify_audit: A boolean indicating whether tagged users will be notified on changes to this monitor.
        :param pulumi.Input[bool] notify_no_data: A boolean indicating whether this monitor will notify when data stops reporting. Defaults
        :param pulumi.Input[int] renotify_interval: The number of minutes after the last notification before a monitor will re-notify
        :param pulumi.Input[bool] require_full_window: A boolean indicating whether this monitor needs a full window of data before it's evaluated.
        :param pulumi.Input[Mapping[str, Any]] silenced: Each scope will be muted until the given POSIX timestamp or forever if the value is 0. Use `-1` if you want to unmute the scope. **Deprecated** The `silenced` parameter is being deprecated in favor of the downtime resource. This will be removed in the next major version of the provider Provider.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
        :param pulumi.Input[pulumi.InputType['MonitorThresholdWindowsArgs']] threshold_windows: A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are required for, anomaly monitors.
        :param pulumi.Input[int] timeout_h: The number of hours of the monitor not reporting data before it will automatically resolve
        :param pulumi.Input[bool] validate: If set to false, skip the validation call done during `plan` .
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["enable_logs_sample"] = enable_logs_sample
        __props__["escalation_message"] = escalation_message
        __props__["evaluation_delay"] = evaluation_delay
        __props__["force_delete"] = force_delete
        __props__["include_tags"] = include_tags
        __props__["locked"] = locked
        __props__["message"] = message
        __props__["name"] = name
        __props__["new_host_delay"] = new_host_delay
        __props__["no_data_timeframe"] = no_data_timeframe
        __props__["notify_audit"] = notify_audit
        __props__["notify_no_data"] = notify_no_data
        __props__["priority"] = priority
        __props__["query"] = query
        __props__["renotify_interval"] = renotify_interval
        __props__["require_full_window"] = require_full_window
        __props__["silenced"] = silenced
        __props__["tags"] = tags
        __props__["threshold_windows"] = threshold_windows
        __props__["thresholds"] = thresholds
        __props__["timeout_h"] = timeout_h
        __props__["type"] = type
        __props__["validate"] = validate
        return Monitor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="enableLogsSample")
    def enable_logs_sample(self) -> pulumi.Output[Optional[bool]]:
        """
        A boolean indicating whether or not to include a list of log values which triggered the alert. Defaults to false. This is only used by log monitors.
        """
        return pulumi.get(self, "enable_logs_sample")

    @property
    @pulumi.getter(name="escalationMessage")
    def escalation_message(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "escalation_message")

    @property
    @pulumi.getter(name="evaluationDelay")
    def evaluation_delay(self) -> pulumi.Output[int]:
        """
        Time (in seconds) to delay evaluation, as a non-negative integer.
        """
        return pulumi.get(self, "evaluation_delay")

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> pulumi.Output[Optional[bool]]:
        """
        A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. SLO, composite monitor).
        """
        return pulumi.get(self, "force_delete")

    @property
    @pulumi.getter(name="includeTags")
    def include_tags(self) -> pulumi.Output[Optional[bool]]:
        """
        A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to true.
        """
        return pulumi.get(self, "include_tags")

    @property
    @pulumi.getter
    def locked(self) -> pulumi.Output[Optional[bool]]:
        """
        A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
        """
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def message(self) -> pulumi.Output[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="newHostDelay")
    def new_host_delay(self) -> pulumi.Output[Optional[int]]:
        """
        Time (in seconds) to allow a host to boot and
        """
        return pulumi.get(self, "new_host_delay")

    @property
    @pulumi.getter(name="noDataTimeframe")
    def no_data_timeframe(self) -> pulumi.Output[Optional[int]]:
        """
        The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes.
        """
        return pulumi.get(self, "no_data_timeframe")

    @property
    @pulumi.getter(name="notifyAudit")
    def notify_audit(self) -> pulumi.Output[Optional[bool]]:
        """
        A boolean indicating whether tagged users will be notified on changes to this monitor.
        """
        return pulumi.get(self, "notify_audit")

    @property
    @pulumi.getter(name="notifyNoData")
    def notify_no_data(self) -> pulumi.Output[Optional[bool]]:
        """
        A boolean indicating whether this monitor will notify when data stops reporting. Defaults
        """
        return pulumi.get(self, "notify_no_data")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def query(self) -> pulumi.Output[str]:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="renotifyInterval")
    def renotify_interval(self) -> pulumi.Output[Optional[int]]:
        """
        The number of minutes after the last notification before a monitor will re-notify
        """
        return pulumi.get(self, "renotify_interval")

    @property
    @pulumi.getter(name="requireFullWindow")
    def require_full_window(self) -> pulumi.Output[Optional[bool]]:
        """
        A boolean indicating whether this monitor needs a full window of data before it's evaluated.
        """
        return pulumi.get(self, "require_full_window")

    @property
    @pulumi.getter
    def silenced(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Each scope will be muted until the given POSIX timestamp or forever if the value is 0. Use `-1` if you want to unmute the scope. **Deprecated** The `silenced` parameter is being deprecated in favor of the downtime resource. This will be removed in the next major version of the provider Provider.
        """
        return pulumi.get(self, "silenced")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="thresholdWindows")
    def threshold_windows(self) -> pulumi.Output[Optional['outputs.MonitorThresholdWindows']]:
        """
        A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are required for, anomaly monitors.
        """
        return pulumi.get(self, "threshold_windows")

    @property
    @pulumi.getter
    def thresholds(self) -> pulumi.Output[Optional['outputs.MonitorThresholds']]:
        return pulumi.get(self, "thresholds")

    @property
    @pulumi.getter(name="timeoutH")
    def timeout_h(self) -> pulumi.Output[Optional[int]]:
        """
        The number of hours of the monitor not reporting data before it will automatically resolve
        """
        return pulumi.get(self, "timeout_h")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def validate(self) -> pulumi.Output[Optional[bool]]:
        """
        If set to false, skip the validation call done during `plan` .
        """
        return pulumi.get(self, "validate")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

