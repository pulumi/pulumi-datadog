# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetIntegrationIamPermissionsStandardResult',
    'AwaitableGetIntegrationIamPermissionsStandardResult',
    'get_integration_iam_permissions_standard',
    'get_integration_iam_permissions_standard_output',
]

@pulumi.output_type
class GetIntegrationIamPermissionsStandardResult:
    """
    A collection of values returned by getIntegrationIamPermissionsStandard.
    """
    def __init__(__self__, iam_permissions=None, id=None):
        if iam_permissions and not isinstance(iam_permissions, list):
            raise TypeError("Expected argument 'iam_permissions' to be a list")
        pulumi.set(__self__, "iam_permissions", iam_permissions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="iamPermissions")
    def iam_permissions(self) -> Sequence[_builtins.str]:
        """
        The list of standard IAM actions required for the AWS integration.
        """
        return pulumi.get(self, "iam_permissions")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetIntegrationIamPermissionsStandardResult(GetIntegrationIamPermissionsStandardResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIntegrationIamPermissionsStandardResult(
            iam_permissions=self.iam_permissions,
            id=self.id)


def get_integration_iam_permissions_standard(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIntegrationIamPermissionsStandardResult:
    """
    Use this data source to retrieve the standard IAM permissions required for the AWS integration. This provides the minimum list of IAM actions that should be included in the AWS role policy for Datadog integration.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('datadog:aws/getIntegrationIamPermissionsStandard:getIntegrationIamPermissionsStandard', __args__, opts=opts, typ=GetIntegrationIamPermissionsStandardResult).value

    return AwaitableGetIntegrationIamPermissionsStandardResult(
        iam_permissions=pulumi.get(__ret__, 'iam_permissions'),
        id=pulumi.get(__ret__, 'id'))
def get_integration_iam_permissions_standard_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIntegrationIamPermissionsStandardResult]:
    """
    Use this data source to retrieve the standard IAM permissions required for the AWS integration. This provides the minimum list of IAM actions that should be included in the AWS role policy for Datadog integration.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('datadog:aws/getIntegrationIamPermissionsStandard:getIntegrationIamPermissionsStandard', __args__, opts=opts, typ=GetIntegrationIamPermissionsStandardResult)
    return __ret__.apply(lambda __response__: GetIntegrationIamPermissionsStandardResult(
        iam_permissions=pulumi.get(__response__, 'iam_permissions'),
        id=pulumi.get(__response__, 'id')))
