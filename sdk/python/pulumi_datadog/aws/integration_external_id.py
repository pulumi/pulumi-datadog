# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['IntegrationExternalIdArgs', 'IntegrationExternalId']

@pulumi.input_type
class IntegrationExternalIdArgs:
    def __init__(__self__):
        """
        The set of arguments for constructing a IntegrationExternalId resource.
        """
        pass


class IntegrationExternalId(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        # Create new integration_aws_external_id resource
        foo = datadog.aws.IntegrationExternalId("foo")
        ```

        ## Import

        Amazon Web Services external IDs can be imported using the ID value.

        ```sh
        $ pulumi import datadog:aws/integrationExternalId:IntegrationExternalId foo ${id}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IntegrationExternalIdArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        # Create new integration_aws_external_id resource
        foo = datadog.aws.IntegrationExternalId("foo")
        ```

        ## Import

        Amazon Web Services external IDs can be imported using the ID value.

        ```sh
        $ pulumi import datadog:aws/integrationExternalId:IntegrationExternalId foo ${id}
        ```

        :param str resource_name: The name of the resource.
        :param IntegrationExternalIdArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IntegrationExternalIdArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IntegrationExternalIdArgs.__new__(IntegrationExternalIdArgs)

        super(IntegrationExternalId, __self__).__init__(
            'datadog:aws/integrationExternalId:IntegrationExternalId',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'IntegrationExternalId':
        """
        Get an existing IntegrationExternalId resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = IntegrationExternalIdArgs.__new__(IntegrationExternalIdArgs)

        return IntegrationExternalId(resource_name, opts=opts, __props__=__props__)

