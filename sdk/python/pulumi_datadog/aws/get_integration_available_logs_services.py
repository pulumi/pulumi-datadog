# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetIntegrationAvailableLogsServicesResult',
    'AwaitableGetIntegrationAvailableLogsServicesResult',
    'get_integration_available_logs_services',
    'get_integration_available_logs_services_output',
]

@pulumi.output_type
class GetIntegrationAvailableLogsServicesResult:
    """
    A collection of values returned by getIntegrationAvailableLogsServices.
    """
    def __init__(__self__, aws_logs_services=None, id=None):
        if aws_logs_services and not isinstance(aws_logs_services, list):
            raise TypeError("Expected argument 'aws_logs_services' to be a list")
        pulumi.set(__self__, "aws_logs_services", aws_logs_services)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="awsLogsServices")
    def aws_logs_services(self) -> Sequence[str]:
        """
        List of AWS log ready services.
        """
        return pulumi.get(self, "aws_logs_services")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetIntegrationAvailableLogsServicesResult(GetIntegrationAvailableLogsServicesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIntegrationAvailableLogsServicesResult(
            aws_logs_services=self.aws_logs_services,
            id=self.id)


def get_integration_available_logs_services(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIntegrationAvailableLogsServicesResult:
    """
    Use this data source to retrieve all AWS log ready services. This is the list of allowed values for `logs_config.lambda_forwarder.sources` in `aws.IntegrationAccount` resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('datadog:aws/getIntegrationAvailableLogsServices:getIntegrationAvailableLogsServices', __args__, opts=opts, typ=GetIntegrationAvailableLogsServicesResult).value

    return AwaitableGetIntegrationAvailableLogsServicesResult(
        aws_logs_services=pulumi.get(__ret__, 'aws_logs_services'),
        id=pulumi.get(__ret__, 'id'))
def get_integration_available_logs_services_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIntegrationAvailableLogsServicesResult]:
    """
    Use this data source to retrieve all AWS log ready services. This is the list of allowed values for `logs_config.lambda_forwarder.sources` in `aws.IntegrationAccount` resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('datadog:aws/getIntegrationAvailableLogsServices:getIntegrationAvailableLogsServices', __args__, opts=opts, typ=GetIntegrationAvailableLogsServicesResult)
    return __ret__.apply(lambda __response__: GetIntegrationAvailableLogsServicesResult(
        aws_logs_services=pulumi.get(__response__, 'aws_logs_services'),
        id=pulumi.get(__response__, 'id')))
