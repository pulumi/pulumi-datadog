# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RumApplicationArgs', 'RumApplication']

@pulumi.input_type
class RumApplicationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RumApplication resource.
        :param pulumi.Input[str] name: The name of the RUM application
        :param pulumi.Input[str] type: The RUM application type. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`
        """
        pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the RUM application
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The RUM application type. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _RumApplicationState:
    def __init__(__self__, *,
                 client_token: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RumApplication resources.
        :param pulumi.Input[str] client_token: The client token
        :param pulumi.Input[str] name: The name of the RUM application
        :param pulumi.Input[str] type: The RUM application type. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`
        """
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[pulumi.Input[str]]:
        """
        The client token
        """
        return pulumi.get(self, "client_token")

    @client_token.setter
    def client_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_token", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the RUM application
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The RUM application type. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class RumApplication(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Datadog RUM application resource. This can be used to create and manage Datadog RUM applications.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        rum_application = datadog.RumApplication("rumApplication",
            name="my-application",
            type="browser")
        ```

        ## Import

        ```sh
         $ pulumi import datadog:index/rumApplication:RumApplication rum_application a1b2c3d4-a1b2-a1b2-a1b2-a1b2c3d4e5f6
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the RUM application
        :param pulumi.Input[str] type: The RUM application type. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RumApplicationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Datadog RUM application resource. This can be used to create and manage Datadog RUM applications.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        rum_application = datadog.RumApplication("rumApplication",
            name="my-application",
            type="browser")
        ```

        ## Import

        ```sh
         $ pulumi import datadog:index/rumApplication:RumApplication rum_application a1b2c3d4-a1b2-a1b2-a1b2-a1b2c3d4e5f6
        ```

        :param str resource_name: The name of the resource.
        :param RumApplicationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RumApplicationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RumApplicationArgs.__new__(RumApplicationArgs)

            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["type"] = type
            __props__.__dict__["client_token"] = None
        super(RumApplication, __self__).__init__(
            'datadog:index/rumApplication:RumApplication',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            client_token: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'RumApplication':
        """
        Get an existing RumApplication resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_token: The client token
        :param pulumi.Input[str] name: The name of the RUM application
        :param pulumi.Input[str] type: The RUM application type. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RumApplicationState.__new__(_RumApplicationState)

        __props__.__dict__["client_token"] = client_token
        __props__.__dict__["name"] = name
        __props__.__dict__["type"] = type
        return RumApplication(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> pulumi.Output[str]:
        """
        The client token
        """
        return pulumi.get(self, "client_token")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the RUM application
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        The RUM application type. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`
        """
        return pulumi.get(self, "type")

