# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class SyntheticsTest(pulumi.CustomResource):
    assertions: pulumi.Output[list]
    device_ids: pulumi.Output[list]
    locations: pulumi.Output[list]
    message: pulumi.Output[str]
    monitor_id: pulumi.Output[float]
    name: pulumi.Output[str]
    options: pulumi.Output[dict]
    request: pulumi.Output[dict]
    request_headers: pulumi.Output[dict]
    status: pulumi.Output[str]
    subtype: pulumi.Output[str]
    tags: pulumi.Output[list]
    type: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, assertions=None, device_ids=None, locations=None, message=None, name=None, options=None, request=None, request_headers=None, status=None, subtype=None, tags=None, type=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a Datadog synthetics test resource. This can be used to create and manage Datadog synthetics test.

        ## Example Usage
        ### Synthetics API Test)

        Create a new Datadog Synthetics API/HTTP test on https://www.example.org

        ```python
        import pulumi
        import pulumi_datadog as datadog

        test_api = datadog.SyntheticsTest("testApi",
            assertions=[{
                "operator": "is",
                "target": "200",
                "type": "statusCode",
            }],
            locations=["aws:eu-central-1"],
            message="Notify @pagerduty",
            name="An API test on example.org",
            options={
                "tick_every": 900,
            },
            request={
                "method": "GET",
                "url": "https://www.example.org",
            },
            request_headers={
                "Authentication": "Token: 1234566789",
                "Content-Type": "application/json",
            },
            status="live",
            subtype="http",
            tags=[
                "foo:bar",
                "foo",
                "env:test",
            ],
            type="api")
        ```
        ### Synthetics SSL Test)

        Create a new Datadog Synthetics API/SSL test on example.org

        ```python
        import pulumi
        import pulumi_datadog as datadog

        test_ssl = datadog.SyntheticsTest("testSsl",
            assertions=[{
                "operator": "isInMoreThan",
                "target": 30,
                "type": "certificate",
            }],
            locations=["aws:eu-central-1"],
            message="Notify @pagerduty",
            name="An API test on example.org",
            options={
                "accept_self_signed": True,
                "tick_every": 900,
            },
            request={
                "host": "example.org",
                "port": 443,
            },
            status="live",
            subtype="ssl",
            tags=[
                "foo:bar",
                "foo",
                "env:test",
            ],
            type="api")
        ```
        ### Synthetics Browser Test)

        Support for Synthetics Browser test is limited (see below)

        ```python
        import pulumi
        import pulumi_datadog as datadog

        # Create a new Datadog Synthetics Browser test starting on https://www.example.org
        test_browser = datadog.SyntheticsTest("testBrowser",
            device_ids=["laptop_large"],
            locations=["aws:eu-central-1"],
            message="Notify @qa",
            name="A Browser test on example.org",
            options={
                "tick_every": 3600,
            },
            request={
                "method": "GET",
                "url": "https://app.datadoghq.com",
            },
            status="paused",
            tags=[],
            type="browser")
        ```
        ## Synthetics Browser test

        Support for Synthetics Browser test is limited to creating shallow Synthetics Browser test (cf. example usage below)

        You cannot create/edit/delete steps or assertions via this provider unless you use [Datadog WebUI](https://app.datadoghq.com/synthetics/list) in conjunction with the provider.

        We are considering adding support for Synthetics Browser test steps and assertions in the future but can't share any release date on that matter.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **options** object supports the following:

          * `accept_self_signed` (`pulumi.Input[bool]`)
          * `allow_insecure` (`pulumi.Input[bool]`)
          * `follow_redirects` (`pulumi.Input[bool]`)
          * `min_failure_duration` (`pulumi.Input[float]`)
          * `min_location_failed` (`pulumi.Input[float]`)
          * `tick_every` (`pulumi.Input[float]`)

        The **request** object supports the following:

          * `body` (`pulumi.Input[str]`)
          * `host` (`pulumi.Input[str]`)
          * `method` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)
          * `timeout` (`pulumi.Input[float]`)
          * `url` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['assertions'] = assertions
            __props__['device_ids'] = device_ids
            if locations is None:
                raise TypeError("Missing required property 'locations'")
            __props__['locations'] = locations
            __props__['message'] = message
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['options'] = options
            if request is None:
                raise TypeError("Missing required property 'request'")
            __props__['request'] = request
            __props__['request_headers'] = request_headers
            if status is None:
                raise TypeError("Missing required property 'status'")
            __props__['status'] = status
            __props__['subtype'] = subtype
            if tags is None:
                raise TypeError("Missing required property 'tags'")
            __props__['tags'] = tags
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
            __props__['monitor_id'] = None
        super(SyntheticsTest, __self__).__init__(
            'datadog:index/syntheticsTest:SyntheticsTest',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, assertions=None, device_ids=None, locations=None, message=None, monitor_id=None, name=None, options=None, request=None, request_headers=None, status=None, subtype=None, tags=None, type=None):
        """
        Get an existing SyntheticsTest resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **options** object supports the following:

          * `accept_self_signed` (`pulumi.Input[bool]`)
          * `allow_insecure` (`pulumi.Input[bool]`)
          * `follow_redirects` (`pulumi.Input[bool]`)
          * `min_failure_duration` (`pulumi.Input[float]`)
          * `min_location_failed` (`pulumi.Input[float]`)
          * `tick_every` (`pulumi.Input[float]`)

        The **request** object supports the following:

          * `body` (`pulumi.Input[str]`)
          * `host` (`pulumi.Input[str]`)
          * `method` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)
          * `timeout` (`pulumi.Input[float]`)
          * `url` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["assertions"] = assertions
        __props__["device_ids"] = device_ids
        __props__["locations"] = locations
        __props__["message"] = message
        __props__["monitor_id"] = monitor_id
        __props__["name"] = name
        __props__["options"] = options
        __props__["request"] = request
        __props__["request_headers"] = request_headers
        __props__["status"] = status
        __props__["subtype"] = subtype
        __props__["tags"] = tags
        __props__["type"] = type
        return SyntheticsTest(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
