# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class SyntheticsTest(pulumi.CustomResource):
    assertions: pulumi.Output[list]
    device_ids: pulumi.Output[list]
    locations: pulumi.Output[list]
    message: pulumi.Output[str]
    monitor_id: pulumi.Output[float]
    name: pulumi.Output[str]
    options: pulumi.Output[dict]
    request: pulumi.Output[dict]
    request_headers: pulumi.Output[dict]
    status: pulumi.Output[str]
    tags: pulumi.Output[list]
    type: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, assertions=None, device_ids=None, locations=None, message=None, name=None, options=None, request=None, request_headers=None, status=None, tags=None, type=None, __name__=None, __opts__=None):
        """
        Create a SyntheticsTest resource with the given unique name, props, and options.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['assertions'] = assertions

        __props__['device_ids'] = device_ids

        if locations is None:
            raise TypeError("Missing required property 'locations'")
        __props__['locations'] = locations

        __props__['message'] = message

        if name is None:
            raise TypeError("Missing required property 'name'")
        __props__['name'] = name

        __props__['options'] = options

        if request is None:
            raise TypeError("Missing required property 'request'")
        __props__['request'] = request

        __props__['request_headers'] = request_headers

        if status is None:
            raise TypeError("Missing required property 'status'")
        __props__['status'] = status

        if tags is None:
            raise TypeError("Missing required property 'tags'")
        __props__['tags'] = tags

        if type is None:
            raise TypeError("Missing required property 'type'")
        __props__['type'] = type

        __props__['monitor_id'] = None

        super(SyntheticsTest, __self__).__init__(
            'datadog:index/syntheticsTest:SyntheticsTest',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

