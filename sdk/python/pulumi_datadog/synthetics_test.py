# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SyntheticsTestArgs', 'SyntheticsTest']

@pulumi.input_type
class SyntheticsTestArgs:
    def __init__(__self__, *,
                 locations: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 api_steps: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestApiStepArgs']]]] = None,
                 assertions: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 browser_steps: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestBrowserStepArgs']]]] = None,
                 browser_variables: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestBrowserVariableArgs']]]] = None,
                 config_variables: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestConfigVariableArgs']]]] = None,
                 device_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input['SyntheticsTestOptionsArgs']] = None,
                 options_list: Optional[pulumi.Input['SyntheticsTestOptionsListArgs']] = None,
                 request: Optional[pulumi.Input['SyntheticsTestRequestArgs']] = None,
                 request_basicauth: Optional[pulumi.Input['SyntheticsTestRequestBasicauthArgs']] = None,
                 request_client_certificate: Optional[pulumi.Input['SyntheticsTestRequestClientCertificateArgs']] = None,
                 request_definition: Optional[pulumi.Input['SyntheticsTestRequestDefinitionArgs']] = None,
                 request_headers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 request_query: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestStepArgs']]]] = None,
                 subtype: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestVariableArgs']]]] = None):
        """
        The set of arguments for constructing a SyntheticsTest resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] locations: Array of locations used to run the test. Refer to [Datadog
               documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
               `aws:eu-central-1`).
        :param pulumi.Input[str] name: Name of Datadog synthetics test.
        :param pulumi.Input[str] status: Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
        :param pulumi.Input[str] type: Synthetics test type (`api` or `browser`).
        :param pulumi.Input[Sequence[pulumi.Input['SyntheticsTestApiStepArgs']]] api_steps: Steps for multistep api tests
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]] assertions: List of assertions.
        :param pulumi.Input[Sequence[pulumi.Input['SyntheticsTestBrowserStepArgs']]] browser_steps: Steps for browser tests.
        :param pulumi.Input[Sequence[pulumi.Input['SyntheticsTestBrowserVariableArgs']]] browser_variables: Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['SyntheticsTestConfigVariableArgs']]] config_variables: Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] device_ids: Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
               (only available for `browser` tests).
        :param pulumi.Input[str] message: A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
               using the same `@username` notation as events.
        :param pulumi.Input['SyntheticsTestRequestArgs'] request: The synthetics test request. Required if `type = "api"`.
        :param pulumi.Input['SyntheticsTestRequestBasicauthArgs'] request_basicauth: The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
        :param pulumi.Input['SyntheticsTestRequestClientCertificateArgs'] request_client_certificate: Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
               below.
        :param pulumi.Input['SyntheticsTestRequestDefinitionArgs'] request_definition: The synthetics test request. Required if `type = "api"`.
        :param pulumi.Input[Mapping[str, Any]] request_headers: Header name and value map.
        :param pulumi.Input[Mapping[str, Any]] request_query: Query arguments name and value map.
        :param pulumi.Input[Sequence[pulumi.Input['SyntheticsTestStepArgs']]] steps: Steps for browser tests.
        :param pulumi.Input[str] subtype: When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
               synthetics page of the UI. Default is an empty list (`[]`).
        :param pulumi.Input[Sequence[pulumi.Input['SyntheticsTestVariableArgs']]] variables: Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
        """
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if api_steps is not None:
            pulumi.set(__self__, "api_steps", api_steps)
        if assertions is not None:
            warnings.warn("""Define `assertion` blocks instead.""", DeprecationWarning)
            pulumi.log.warn("""assertions is deprecated: Define `assertion` blocks instead.""")
        if assertions is not None:
            pulumi.set(__self__, "assertions", assertions)
        if browser_steps is not None:
            pulumi.set(__self__, "browser_steps", browser_steps)
        if browser_variables is not None:
            pulumi.set(__self__, "browser_variables", browser_variables)
        if config_variables is not None:
            pulumi.set(__self__, "config_variables", config_variables)
        if device_ids is not None:
            pulumi.set(__self__, "device_ids", device_ids)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if options is not None:
            warnings.warn("""Define `options_list` blocks instead.""", DeprecationWarning)
            pulumi.log.warn("""options is deprecated: Define `options_list` blocks instead.""")
        if options is not None:
            pulumi.set(__self__, "options", options)
        if options_list is not None:
            pulumi.set(__self__, "options_list", options_list)
        if request is not None:
            warnings.warn("""Define `request_definition` list with one element instead.""", DeprecationWarning)
            pulumi.log.warn("""request is deprecated: Define `request_definition` list with one element instead.""")
        if request is not None:
            pulumi.set(__self__, "request", request)
        if request_basicauth is not None:
            pulumi.set(__self__, "request_basicauth", request_basicauth)
        if request_client_certificate is not None:
            pulumi.set(__self__, "request_client_certificate", request_client_certificate)
        if request_definition is not None:
            pulumi.set(__self__, "request_definition", request_definition)
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if request_query is not None:
            pulumi.set(__self__, "request_query", request_query)
        if steps is not None:
            warnings.warn("""Define `browser_step` blocks instead.""", DeprecationWarning)
            pulumi.log.warn("""steps is deprecated: Define `browser_step` blocks instead.""")
        if steps is not None:
            pulumi.set(__self__, "steps", steps)
        if subtype is not None:
            pulumi.set(__self__, "subtype", subtype)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if variables is not None:
            warnings.warn("""Define `browser_variable` blocks instead.""", DeprecationWarning)
            pulumi.log.warn("""variables is deprecated: Define `browser_variable` blocks instead.""")
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def locations(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Array of locations used to run the test. Refer to [Datadog
        documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
        `aws:eu-central-1`).
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of Datadog synthetics test.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Synthetics test type (`api` or `browser`).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="apiSteps")
    def api_steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestApiStepArgs']]]]:
        """
        Steps for multistep api tests
        """
        return pulumi.get(self, "api_steps")

    @api_steps.setter
    def api_steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestApiStepArgs']]]]):
        pulumi.set(self, "api_steps", value)

    @property
    @pulumi.getter
    def assertions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        """
        List of assertions.
        """
        return pulumi.get(self, "assertions")

    @assertions.setter
    def assertions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "assertions", value)

    @property
    @pulumi.getter(name="browserSteps")
    def browser_steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestBrowserStepArgs']]]]:
        """
        Steps for browser tests.
        """
        return pulumi.get(self, "browser_steps")

    @browser_steps.setter
    def browser_steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestBrowserStepArgs']]]]):
        pulumi.set(self, "browser_steps", value)

    @property
    @pulumi.getter(name="browserVariables")
    def browser_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestBrowserVariableArgs']]]]:
        """
        Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
        """
        return pulumi.get(self, "browser_variables")

    @browser_variables.setter
    def browser_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestBrowserVariableArgs']]]]):
        pulumi.set(self, "browser_variables", value)

    @property
    @pulumi.getter(name="configVariables")
    def config_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestConfigVariableArgs']]]]:
        """
        Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
        """
        return pulumi.get(self, "config_variables")

    @config_variables.setter
    def config_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestConfigVariableArgs']]]]):
        pulumi.set(self, "config_variables", value)

    @property
    @pulumi.getter(name="deviceIds")
    def device_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
        (only available for `browser` tests).
        """
        return pulumi.get(self, "device_ids")

    @device_ids.setter
    def device_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "device_ids", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
        using the same `@username` notation as events.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input['SyntheticsTestOptionsArgs']]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input['SyntheticsTestOptionsArgs']]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="optionsList")
    def options_list(self) -> Optional[pulumi.Input['SyntheticsTestOptionsListArgs']]:
        return pulumi.get(self, "options_list")

    @options_list.setter
    def options_list(self, value: Optional[pulumi.Input['SyntheticsTestOptionsListArgs']]):
        pulumi.set(self, "options_list", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['SyntheticsTestRequestArgs']]:
        """
        The synthetics test request. Required if `type = "api"`.
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['SyntheticsTestRequestArgs']]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter(name="requestBasicauth")
    def request_basicauth(self) -> Optional[pulumi.Input['SyntheticsTestRequestBasicauthArgs']]:
        """
        The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
        """
        return pulumi.get(self, "request_basicauth")

    @request_basicauth.setter
    def request_basicauth(self, value: Optional[pulumi.Input['SyntheticsTestRequestBasicauthArgs']]):
        pulumi.set(self, "request_basicauth", value)

    @property
    @pulumi.getter(name="requestClientCertificate")
    def request_client_certificate(self) -> Optional[pulumi.Input['SyntheticsTestRequestClientCertificateArgs']]:
        """
        Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
        below.
        """
        return pulumi.get(self, "request_client_certificate")

    @request_client_certificate.setter
    def request_client_certificate(self, value: Optional[pulumi.Input['SyntheticsTestRequestClientCertificateArgs']]):
        pulumi.set(self, "request_client_certificate", value)

    @property
    @pulumi.getter(name="requestDefinition")
    def request_definition(self) -> Optional[pulumi.Input['SyntheticsTestRequestDefinitionArgs']]:
        """
        The synthetics test request. Required if `type = "api"`.
        """
        return pulumi.get(self, "request_definition")

    @request_definition.setter
    def request_definition(self, value: Optional[pulumi.Input['SyntheticsTestRequestDefinitionArgs']]):
        pulumi.set(self, "request_definition", value)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Header name and value map.
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "request_headers", value)

    @property
    @pulumi.getter(name="requestQuery")
    def request_query(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Query arguments name and value map.
        """
        return pulumi.get(self, "request_query")

    @request_query.setter
    def request_query(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "request_query", value)

    @property
    @pulumi.getter
    def steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestStepArgs']]]]:
        """
        Steps for browser tests.
        """
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestStepArgs']]]]):
        pulumi.set(self, "steps", value)

    @property
    @pulumi.getter
    def subtype(self) -> Optional[pulumi.Input[str]]:
        """
        When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
        """
        return pulumi.get(self, "subtype")

    @subtype.setter
    def subtype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtype", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
        synthetics page of the UI. Default is an empty list (`[]`).
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestVariableArgs']]]]:
        """
        Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class _SyntheticsTestState:
    def __init__(__self__, *,
                 api_steps: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestApiStepArgs']]]] = None,
                 assertions: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 browser_steps: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestBrowserStepArgs']]]] = None,
                 browser_variables: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestBrowserVariableArgs']]]] = None,
                 config_variables: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestConfigVariableArgs']]]] = None,
                 device_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 monitor_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input['SyntheticsTestOptionsArgs']] = None,
                 options_list: Optional[pulumi.Input['SyntheticsTestOptionsListArgs']] = None,
                 request: Optional[pulumi.Input['SyntheticsTestRequestArgs']] = None,
                 request_basicauth: Optional[pulumi.Input['SyntheticsTestRequestBasicauthArgs']] = None,
                 request_client_certificate: Optional[pulumi.Input['SyntheticsTestRequestClientCertificateArgs']] = None,
                 request_definition: Optional[pulumi.Input['SyntheticsTestRequestDefinitionArgs']] = None,
                 request_headers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 request_query: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestStepArgs']]]] = None,
                 subtype: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestVariableArgs']]]] = None):
        """
        Input properties used for looking up and filtering SyntheticsTest resources.
        :param pulumi.Input[Sequence[pulumi.Input['SyntheticsTestApiStepArgs']]] api_steps: Steps for multistep api tests
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]] assertions: List of assertions.
        :param pulumi.Input[Sequence[pulumi.Input['SyntheticsTestBrowserStepArgs']]] browser_steps: Steps for browser tests.
        :param pulumi.Input[Sequence[pulumi.Input['SyntheticsTestBrowserVariableArgs']]] browser_variables: Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['SyntheticsTestConfigVariableArgs']]] config_variables: Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] device_ids: Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
               (only available for `browser` tests).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] locations: Array of locations used to run the test. Refer to [Datadog
               documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
               `aws:eu-central-1`).
        :param pulumi.Input[str] message: A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
               using the same `@username` notation as events.
        :param pulumi.Input[int] monitor_id: ID of the monitor associated with the Datadog synthetics test.
        :param pulumi.Input[str] name: Name of Datadog synthetics test.
        :param pulumi.Input['SyntheticsTestRequestArgs'] request: The synthetics test request. Required if `type = "api"`.
        :param pulumi.Input['SyntheticsTestRequestBasicauthArgs'] request_basicauth: The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
        :param pulumi.Input['SyntheticsTestRequestClientCertificateArgs'] request_client_certificate: Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
               below.
        :param pulumi.Input['SyntheticsTestRequestDefinitionArgs'] request_definition: The synthetics test request. Required if `type = "api"`.
        :param pulumi.Input[Mapping[str, Any]] request_headers: Header name and value map.
        :param pulumi.Input[Mapping[str, Any]] request_query: Query arguments name and value map.
        :param pulumi.Input[str] status: Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
        :param pulumi.Input[Sequence[pulumi.Input['SyntheticsTestStepArgs']]] steps: Steps for browser tests.
        :param pulumi.Input[str] subtype: When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
               synthetics page of the UI. Default is an empty list (`[]`).
        :param pulumi.Input[str] type: Synthetics test type (`api` or `browser`).
        :param pulumi.Input[Sequence[pulumi.Input['SyntheticsTestVariableArgs']]] variables: Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
        """
        if api_steps is not None:
            pulumi.set(__self__, "api_steps", api_steps)
        if assertions is not None:
            warnings.warn("""Define `assertion` blocks instead.""", DeprecationWarning)
            pulumi.log.warn("""assertions is deprecated: Define `assertion` blocks instead.""")
        if assertions is not None:
            pulumi.set(__self__, "assertions", assertions)
        if browser_steps is not None:
            pulumi.set(__self__, "browser_steps", browser_steps)
        if browser_variables is not None:
            pulumi.set(__self__, "browser_variables", browser_variables)
        if config_variables is not None:
            pulumi.set(__self__, "config_variables", config_variables)
        if device_ids is not None:
            pulumi.set(__self__, "device_ids", device_ids)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if monitor_id is not None:
            pulumi.set(__self__, "monitor_id", monitor_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            warnings.warn("""Define `options_list` blocks instead.""", DeprecationWarning)
            pulumi.log.warn("""options is deprecated: Define `options_list` blocks instead.""")
        if options is not None:
            pulumi.set(__self__, "options", options)
        if options_list is not None:
            pulumi.set(__self__, "options_list", options_list)
        if request is not None:
            warnings.warn("""Define `request_definition` list with one element instead.""", DeprecationWarning)
            pulumi.log.warn("""request is deprecated: Define `request_definition` list with one element instead.""")
        if request is not None:
            pulumi.set(__self__, "request", request)
        if request_basicauth is not None:
            pulumi.set(__self__, "request_basicauth", request_basicauth)
        if request_client_certificate is not None:
            pulumi.set(__self__, "request_client_certificate", request_client_certificate)
        if request_definition is not None:
            pulumi.set(__self__, "request_definition", request_definition)
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if request_query is not None:
            pulumi.set(__self__, "request_query", request_query)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if steps is not None:
            warnings.warn("""Define `browser_step` blocks instead.""", DeprecationWarning)
            pulumi.log.warn("""steps is deprecated: Define `browser_step` blocks instead.""")
        if steps is not None:
            pulumi.set(__self__, "steps", steps)
        if subtype is not None:
            pulumi.set(__self__, "subtype", subtype)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if variables is not None:
            warnings.warn("""Define `browser_variable` blocks instead.""", DeprecationWarning)
            pulumi.log.warn("""variables is deprecated: Define `browser_variable` blocks instead.""")
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="apiSteps")
    def api_steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestApiStepArgs']]]]:
        """
        Steps for multistep api tests
        """
        return pulumi.get(self, "api_steps")

    @api_steps.setter
    def api_steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestApiStepArgs']]]]):
        pulumi.set(self, "api_steps", value)

    @property
    @pulumi.getter
    def assertions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        """
        List of assertions.
        """
        return pulumi.get(self, "assertions")

    @assertions.setter
    def assertions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "assertions", value)

    @property
    @pulumi.getter(name="browserSteps")
    def browser_steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestBrowserStepArgs']]]]:
        """
        Steps for browser tests.
        """
        return pulumi.get(self, "browser_steps")

    @browser_steps.setter
    def browser_steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestBrowserStepArgs']]]]):
        pulumi.set(self, "browser_steps", value)

    @property
    @pulumi.getter(name="browserVariables")
    def browser_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestBrowserVariableArgs']]]]:
        """
        Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
        """
        return pulumi.get(self, "browser_variables")

    @browser_variables.setter
    def browser_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestBrowserVariableArgs']]]]):
        pulumi.set(self, "browser_variables", value)

    @property
    @pulumi.getter(name="configVariables")
    def config_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestConfigVariableArgs']]]]:
        """
        Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
        """
        return pulumi.get(self, "config_variables")

    @config_variables.setter
    def config_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestConfigVariableArgs']]]]):
        pulumi.set(self, "config_variables", value)

    @property
    @pulumi.getter(name="deviceIds")
    def device_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
        (only available for `browser` tests).
        """
        return pulumi.get(self, "device_ids")

    @device_ids.setter
    def device_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "device_ids", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of locations used to run the test. Refer to [Datadog
        documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
        `aws:eu-central-1`).
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
        using the same `@username` notation as events.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the monitor associated with the Datadog synthetics test.
        """
        return pulumi.get(self, "monitor_id")

    @monitor_id.setter
    def monitor_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitor_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of Datadog synthetics test.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input['SyntheticsTestOptionsArgs']]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input['SyntheticsTestOptionsArgs']]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="optionsList")
    def options_list(self) -> Optional[pulumi.Input['SyntheticsTestOptionsListArgs']]:
        return pulumi.get(self, "options_list")

    @options_list.setter
    def options_list(self, value: Optional[pulumi.Input['SyntheticsTestOptionsListArgs']]):
        pulumi.set(self, "options_list", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['SyntheticsTestRequestArgs']]:
        """
        The synthetics test request. Required if `type = "api"`.
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['SyntheticsTestRequestArgs']]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter(name="requestBasicauth")
    def request_basicauth(self) -> Optional[pulumi.Input['SyntheticsTestRequestBasicauthArgs']]:
        """
        The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
        """
        return pulumi.get(self, "request_basicauth")

    @request_basicauth.setter
    def request_basicauth(self, value: Optional[pulumi.Input['SyntheticsTestRequestBasicauthArgs']]):
        pulumi.set(self, "request_basicauth", value)

    @property
    @pulumi.getter(name="requestClientCertificate")
    def request_client_certificate(self) -> Optional[pulumi.Input['SyntheticsTestRequestClientCertificateArgs']]:
        """
        Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
        below.
        """
        return pulumi.get(self, "request_client_certificate")

    @request_client_certificate.setter
    def request_client_certificate(self, value: Optional[pulumi.Input['SyntheticsTestRequestClientCertificateArgs']]):
        pulumi.set(self, "request_client_certificate", value)

    @property
    @pulumi.getter(name="requestDefinition")
    def request_definition(self) -> Optional[pulumi.Input['SyntheticsTestRequestDefinitionArgs']]:
        """
        The synthetics test request. Required if `type = "api"`.
        """
        return pulumi.get(self, "request_definition")

    @request_definition.setter
    def request_definition(self, value: Optional[pulumi.Input['SyntheticsTestRequestDefinitionArgs']]):
        pulumi.set(self, "request_definition", value)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Header name and value map.
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "request_headers", value)

    @property
    @pulumi.getter(name="requestQuery")
    def request_query(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Query arguments name and value map.
        """
        return pulumi.get(self, "request_query")

    @request_query.setter
    def request_query(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "request_query", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestStepArgs']]]]:
        """
        Steps for browser tests.
        """
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestStepArgs']]]]):
        pulumi.set(self, "steps", value)

    @property
    @pulumi.getter
    def subtype(self) -> Optional[pulumi.Input[str]]:
        """
        When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
        """
        return pulumi.get(self, "subtype")

    @subtype.setter
    def subtype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtype", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
        synthetics page of the UI. Default is an empty list (`[]`).
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Synthetics test type (`api` or `browser`).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestVariableArgs']]]]:
        """
        Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestVariableArgs']]]]):
        pulumi.set(self, "variables", value)


class SyntheticsTest(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_steps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestApiStepArgs']]]]] = None,
                 assertions: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 browser_steps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestBrowserStepArgs']]]]] = None,
                 browser_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestBrowserVariableArgs']]]]] = None,
                 config_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestConfigVariableArgs']]]]] = None,
                 device_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestOptionsArgs']]] = None,
                 options_list: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestOptionsListArgs']]] = None,
                 request: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestRequestArgs']]] = None,
                 request_basicauth: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestRequestBasicauthArgs']]] = None,
                 request_client_certificate: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestRequestClientCertificateArgs']]] = None,
                 request_definition: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestRequestDefinitionArgs']]] = None,
                 request_headers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 request_query: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestStepArgs']]]]] = None,
                 subtype: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestVariableArgs']]]]] = None,
                 __props__=None):
        """
        Provides a Datadog synthetics test resource. This can be used to create and manage Datadog synthetics test.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_datadog as datadog

        # Example Usage (Synthetics API test)
        # Create a new Datadog Synthetics API/HTTP test on https://www.example.org
        test_api = datadog.SyntheticsTest("testApi",
            type="api",
            subtype="http",
            request_definition=datadog.SyntheticsTestRequestDefinitionArgs(
                method="GET",
                url="https://www.example.org",
            ),
            request_headers={
                "Content-Type": "application/json",
                "Authentication": "Token: 1234566789",
            },
            assertions=[{
                "type": "statusCode",
                "operator": "is",
                "target": "200",
            }],
            locations=["aws:eu-central-1"],
            options_list=datadog.SyntheticsTestOptionsListArgs(
                tick_every=900,
                retry=datadog.SyntheticsTestOptionsListRetryArgs(
                    count=2,
                    interval=300,
                ),
                monitor_options=datadog.SyntheticsTestOptionsListMonitorOptionsArgs(
                    renotify_interval=100,
                ),
            ),
            name="An API test on example.org",
            message="Notify @pagerduty",
            tags=[
                "foo:bar",
                "foo",
                "env:test",
            ],
            status="live")
        # Example Usage (Synthetics SSL test)
        # Create a new Datadog Synthetics API/SSL test on example.org
        test_ssl = datadog.SyntheticsTest("testSsl",
            type="api",
            subtype="ssl",
            request_definition=datadog.SyntheticsTestRequestDefinitionArgs(
                host="example.org",
                port=443,
            ),
            assertions=[{
                "type": "certificate",
                "operator": "isInMoreThan",
                "target": 30,
            }],
            locations=["aws:eu-central-1"],
            options_list=datadog.SyntheticsTestOptionsListArgs(
                tick_every=900,
                accept_self_signed=True,
            ),
            name="An API test on example.org",
            message="Notify @pagerduty",
            tags=[
                "foo:bar",
                "foo",
                "env:test",
            ],
            status="live")
        # Example Usage (Synthetics TCP test)
        # Create a new Datadog Synthetics API/TCP test on example.org
        test_tcp = datadog.SyntheticsTest("testTcp",
            type="api",
            subtype="tcp",
            request_definition=datadog.SyntheticsTestRequestDefinitionArgs(
                host="example.org",
                port=443,
            ),
            assertions=[{
                "type": "responseTime",
                "operator": "lessThan",
                "target": 2000,
            }],
            locations=["aws:eu-central-1"],
            options_list=datadog.SyntheticsTestOptionsListArgs(
                tick_every=900,
            ),
            name="An API test on example.org",
            message="Notify @pagerduty",
            tags=[
                "foo:bar",
                "foo",
                "env:test",
            ],
            status="live")
        # Example Usage (Synthetics DNS test)
        # Create a new Datadog Synthetics API/DNS test on example.org
        test_dns = datadog.SyntheticsTest("testDns",
            type="api",
            subtype="dns",
            request_definition=datadog.SyntheticsTestRequestDefinitionArgs(
                host="example.org",
            ),
            assertions=[{
                "type": "recordSome",
                "operator": "is",
                "property": "A",
                "target": "0.0.0.0",
            }],
            locations=["aws:eu-central-1"],
            options_list=datadog.SyntheticsTestOptionsListArgs(
                tick_every=900,
            ),
            name="An API test on example.org",
            message="Notify @pagerduty",
            tags=[
                "foo:bar",
                "foo",
                "env:test",
            ],
            status="live")
        # Example Usage (Synthetics Browser test)
        # Support for Synthetics Browser test steps is limited (see below)
        # Create a new Datadog Synthetics Browser test starting on https://www.example.org
        test_browser = datadog.SyntheticsTest("testBrowser",
            type="browser",
            request_definition=datadog.SyntheticsTestRequestDefinitionArgs(
                method="GET",
                url="https://app.datadoghq.com",
            ),
            device_ids=["laptop_large"],
            locations=["aws:eu-central-1"],
            options_list=datadog.SyntheticsTestOptionsListArgs(
                tick_every=3600,
            ),
            name="A Browser test on example.org",
            message="Notify @qa",
            tags=[],
            status="paused",
            steps=[datadog.SyntheticsTestStepArgs(
                name="Check current url",
                type="assertCurrentUrl",
                params=json.dumps({
                    "check": "contains",
                    "value": "datadoghq",
                }),
            )],
            variables=[
                datadog.SyntheticsTestVariableArgs(
                    type="text",
                    name="MY_PATTERN_VAR",
                    pattern="{{numeric(3)}}",
                    example="597",
                ),
                datadog.SyntheticsTestVariableArgs(
                    type="email",
                    name="MY_EMAIL_VAR",
                    pattern="jd8-afe-ydv.{{ numeric(10) }}@synthetics.dtdg.co",
                    example="jd8-afe-ydv.4546132139@synthetics.dtdg.co",
                ),
                datadog.SyntheticsTestVariableArgs(
                    type="global",
                    name="MY_GLOBAL_VAR",
                    id="76636cd1-82e2-4aeb-9cfe-51366a8198a2",
                ),
            ])
        ```

        <!-- schema generated by tfplugindocs -->
        ## Schema

        ### Required

        - **locations** (Set of String) Array of locations used to run the test. Refer to [Datadog documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g. `aws:eu-central-1`).
        - **name** (String) Name of Datadog synthetics test.
        - **status** (String) Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
        - **type** (String) Synthetics test type (`api` or `browser`).

        ### Optional

        - **api_step** (Block List) Steps for multistep api tests (see below for nested schema)
        - **assertion** (Block List) Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below. (see below for nested schema)
        - **assertions** (List of Map of String, Deprecated) List of assertions. **Deprecated.** Define `assertion` blocks instead.
        - **browser_step** (Block List) Steps for browser tests. (see below for nested schema)
        - **browser_variable** (Block List) Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below. (see below for nested schema)
        - **config_variable** (Block List) Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below. (see below for nested schema)
        - **device_ids** (List of String) Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small` (only available for `browser` tests).
        - **message** (String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events.
        - **options** (Map of String, Deprecated) **Deprecated.** Define `options_list` blocks instead.
        - **options_list** (Block List, Max: 1) (see below for nested schema)
        - **request** (Map of String, Deprecated) The synthetics test request. Required if `type = "api"`. **Deprecated.** Define `request_definition` list with one element instead.
        - **request_basicauth** (Block List, Max: 1) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below. (see below for nested schema)
        - **request_client_certificate** (Block List, Max: 1) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below. (see below for nested schema)
        - **request_definition** (Block List, Max: 1) The synthetics test request. Required if `type = "api"`. (see below for nested schema)
        - **request_headers** (Map of String) Header name and value map.
        - **request_query** (Map of String) Query arguments name and value map.
        - **step** (Block List, Deprecated) Steps for browser tests. **Deprecated.** Define `browser_step` blocks instead. (see below for nested schema)
        - **subtype** (String) When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
        - **tags** (List of String) A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
        - **variable** (Block List, Deprecated) Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below. **Deprecated.** Define `browser_variable` blocks instead. (see below for nested schema)

        ### Read-Only

        - **id** (String) The ID of this resource.
        - **monitor_id** (Number) ID of the monitor associated with the Datadog synthetics test.

        <a id="nestedblock--api_step"></a>

        ## Import

        Import is supported using the following syntax# Synthetics tests can be imported using their public string ID, e.g.

        ```sh
         $ pulumi import datadog:index/syntheticsTest:SyntheticsTest fizz abc-123-xyz
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestApiStepArgs']]]] api_steps: Steps for multistep api tests
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]] assertions: List of assertions.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestBrowserStepArgs']]]] browser_steps: Steps for browser tests.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestBrowserVariableArgs']]]] browser_variables: Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestConfigVariableArgs']]]] config_variables: Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] device_ids: Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
               (only available for `browser` tests).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] locations: Array of locations used to run the test. Refer to [Datadog
               documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
               `aws:eu-central-1`).
        :param pulumi.Input[str] message: A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
               using the same `@username` notation as events.
        :param pulumi.Input[str] name: Name of Datadog synthetics test.
        :param pulumi.Input[pulumi.InputType['SyntheticsTestRequestArgs']] request: The synthetics test request. Required if `type = "api"`.
        :param pulumi.Input[pulumi.InputType['SyntheticsTestRequestBasicauthArgs']] request_basicauth: The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
        :param pulumi.Input[pulumi.InputType['SyntheticsTestRequestClientCertificateArgs']] request_client_certificate: Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
               below.
        :param pulumi.Input[pulumi.InputType['SyntheticsTestRequestDefinitionArgs']] request_definition: The synthetics test request. Required if `type = "api"`.
        :param pulumi.Input[Mapping[str, Any]] request_headers: Header name and value map.
        :param pulumi.Input[Mapping[str, Any]] request_query: Query arguments name and value map.
        :param pulumi.Input[str] status: Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestStepArgs']]]] steps: Steps for browser tests.
        :param pulumi.Input[str] subtype: When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
               synthetics page of the UI. Default is an empty list (`[]`).
        :param pulumi.Input[str] type: Synthetics test type (`api` or `browser`).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestVariableArgs']]]] variables: Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SyntheticsTestArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Datadog synthetics test resource. This can be used to create and manage Datadog synthetics test.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_datadog as datadog

        # Example Usage (Synthetics API test)
        # Create a new Datadog Synthetics API/HTTP test on https://www.example.org
        test_api = datadog.SyntheticsTest("testApi",
            type="api",
            subtype="http",
            request_definition=datadog.SyntheticsTestRequestDefinitionArgs(
                method="GET",
                url="https://www.example.org",
            ),
            request_headers={
                "Content-Type": "application/json",
                "Authentication": "Token: 1234566789",
            },
            assertions=[{
                "type": "statusCode",
                "operator": "is",
                "target": "200",
            }],
            locations=["aws:eu-central-1"],
            options_list=datadog.SyntheticsTestOptionsListArgs(
                tick_every=900,
                retry=datadog.SyntheticsTestOptionsListRetryArgs(
                    count=2,
                    interval=300,
                ),
                monitor_options=datadog.SyntheticsTestOptionsListMonitorOptionsArgs(
                    renotify_interval=100,
                ),
            ),
            name="An API test on example.org",
            message="Notify @pagerduty",
            tags=[
                "foo:bar",
                "foo",
                "env:test",
            ],
            status="live")
        # Example Usage (Synthetics SSL test)
        # Create a new Datadog Synthetics API/SSL test on example.org
        test_ssl = datadog.SyntheticsTest("testSsl",
            type="api",
            subtype="ssl",
            request_definition=datadog.SyntheticsTestRequestDefinitionArgs(
                host="example.org",
                port=443,
            ),
            assertions=[{
                "type": "certificate",
                "operator": "isInMoreThan",
                "target": 30,
            }],
            locations=["aws:eu-central-1"],
            options_list=datadog.SyntheticsTestOptionsListArgs(
                tick_every=900,
                accept_self_signed=True,
            ),
            name="An API test on example.org",
            message="Notify @pagerduty",
            tags=[
                "foo:bar",
                "foo",
                "env:test",
            ],
            status="live")
        # Example Usage (Synthetics TCP test)
        # Create a new Datadog Synthetics API/TCP test on example.org
        test_tcp = datadog.SyntheticsTest("testTcp",
            type="api",
            subtype="tcp",
            request_definition=datadog.SyntheticsTestRequestDefinitionArgs(
                host="example.org",
                port=443,
            ),
            assertions=[{
                "type": "responseTime",
                "operator": "lessThan",
                "target": 2000,
            }],
            locations=["aws:eu-central-1"],
            options_list=datadog.SyntheticsTestOptionsListArgs(
                tick_every=900,
            ),
            name="An API test on example.org",
            message="Notify @pagerduty",
            tags=[
                "foo:bar",
                "foo",
                "env:test",
            ],
            status="live")
        # Example Usage (Synthetics DNS test)
        # Create a new Datadog Synthetics API/DNS test on example.org
        test_dns = datadog.SyntheticsTest("testDns",
            type="api",
            subtype="dns",
            request_definition=datadog.SyntheticsTestRequestDefinitionArgs(
                host="example.org",
            ),
            assertions=[{
                "type": "recordSome",
                "operator": "is",
                "property": "A",
                "target": "0.0.0.0",
            }],
            locations=["aws:eu-central-1"],
            options_list=datadog.SyntheticsTestOptionsListArgs(
                tick_every=900,
            ),
            name="An API test on example.org",
            message="Notify @pagerduty",
            tags=[
                "foo:bar",
                "foo",
                "env:test",
            ],
            status="live")
        # Example Usage (Synthetics Browser test)
        # Support for Synthetics Browser test steps is limited (see below)
        # Create a new Datadog Synthetics Browser test starting on https://www.example.org
        test_browser = datadog.SyntheticsTest("testBrowser",
            type="browser",
            request_definition=datadog.SyntheticsTestRequestDefinitionArgs(
                method="GET",
                url="https://app.datadoghq.com",
            ),
            device_ids=["laptop_large"],
            locations=["aws:eu-central-1"],
            options_list=datadog.SyntheticsTestOptionsListArgs(
                tick_every=3600,
            ),
            name="A Browser test on example.org",
            message="Notify @qa",
            tags=[],
            status="paused",
            steps=[datadog.SyntheticsTestStepArgs(
                name="Check current url",
                type="assertCurrentUrl",
                params=json.dumps({
                    "check": "contains",
                    "value": "datadoghq",
                }),
            )],
            variables=[
                datadog.SyntheticsTestVariableArgs(
                    type="text",
                    name="MY_PATTERN_VAR",
                    pattern="{{numeric(3)}}",
                    example="597",
                ),
                datadog.SyntheticsTestVariableArgs(
                    type="email",
                    name="MY_EMAIL_VAR",
                    pattern="jd8-afe-ydv.{{ numeric(10) }}@synthetics.dtdg.co",
                    example="jd8-afe-ydv.4546132139@synthetics.dtdg.co",
                ),
                datadog.SyntheticsTestVariableArgs(
                    type="global",
                    name="MY_GLOBAL_VAR",
                    id="76636cd1-82e2-4aeb-9cfe-51366a8198a2",
                ),
            ])
        ```

        <!-- schema generated by tfplugindocs -->
        ## Schema

        ### Required

        - **locations** (Set of String) Array of locations used to run the test. Refer to [Datadog documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g. `aws:eu-central-1`).
        - **name** (String) Name of Datadog synthetics test.
        - **status** (String) Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
        - **type** (String) Synthetics test type (`api` or `browser`).

        ### Optional

        - **api_step** (Block List) Steps for multistep api tests (see below for nested schema)
        - **assertion** (Block List) Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below. (see below for nested schema)
        - **assertions** (List of Map of String, Deprecated) List of assertions. **Deprecated.** Define `assertion` blocks instead.
        - **browser_step** (Block List) Steps for browser tests. (see below for nested schema)
        - **browser_variable** (Block List) Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below. (see below for nested schema)
        - **config_variable** (Block List) Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below. (see below for nested schema)
        - **device_ids** (List of String) Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small` (only available for `browser` tests).
        - **message** (String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events.
        - **options** (Map of String, Deprecated) **Deprecated.** Define `options_list` blocks instead.
        - **options_list** (Block List, Max: 1) (see below for nested schema)
        - **request** (Map of String, Deprecated) The synthetics test request. Required if `type = "api"`. **Deprecated.** Define `request_definition` list with one element instead.
        - **request_basicauth** (Block List, Max: 1) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below. (see below for nested schema)
        - **request_client_certificate** (Block List, Max: 1) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below. (see below for nested schema)
        - **request_definition** (Block List, Max: 1) The synthetics test request. Required if `type = "api"`. (see below for nested schema)
        - **request_headers** (Map of String) Header name and value map.
        - **request_query** (Map of String) Query arguments name and value map.
        - **step** (Block List, Deprecated) Steps for browser tests. **Deprecated.** Define `browser_step` blocks instead. (see below for nested schema)
        - **subtype** (String) When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
        - **tags** (List of String) A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
        - **variable** (Block List, Deprecated) Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below. **Deprecated.** Define `browser_variable` blocks instead. (see below for nested schema)

        ### Read-Only

        - **id** (String) The ID of this resource.
        - **monitor_id** (Number) ID of the monitor associated with the Datadog synthetics test.

        <a id="nestedblock--api_step"></a>

        ## Import

        Import is supported using the following syntax# Synthetics tests can be imported using their public string ID, e.g.

        ```sh
         $ pulumi import datadog:index/syntheticsTest:SyntheticsTest fizz abc-123-xyz
        ```

        :param str resource_name: The name of the resource.
        :param SyntheticsTestArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SyntheticsTestArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_steps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestApiStepArgs']]]]] = None,
                 assertions: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 browser_steps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestBrowserStepArgs']]]]] = None,
                 browser_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestBrowserVariableArgs']]]]] = None,
                 config_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestConfigVariableArgs']]]]] = None,
                 device_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestOptionsArgs']]] = None,
                 options_list: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestOptionsListArgs']]] = None,
                 request: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestRequestArgs']]] = None,
                 request_basicauth: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestRequestBasicauthArgs']]] = None,
                 request_client_certificate: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestRequestClientCertificateArgs']]] = None,
                 request_definition: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestRequestDefinitionArgs']]] = None,
                 request_headers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 request_query: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestStepArgs']]]]] = None,
                 subtype: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestVariableArgs']]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SyntheticsTestArgs.__new__(SyntheticsTestArgs)

            __props__.__dict__["api_steps"] = api_steps
            if assertions is not None and not opts.urn:
                warnings.warn("""Define `assertion` blocks instead.""", DeprecationWarning)
                pulumi.log.warn("""assertions is deprecated: Define `assertion` blocks instead.""")
            __props__.__dict__["assertions"] = assertions
            __props__.__dict__["browser_steps"] = browser_steps
            __props__.__dict__["browser_variables"] = browser_variables
            __props__.__dict__["config_variables"] = config_variables
            __props__.__dict__["device_ids"] = device_ids
            if locations is None and not opts.urn:
                raise TypeError("Missing required property 'locations'")
            __props__.__dict__["locations"] = locations
            __props__.__dict__["message"] = message
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if options is not None and not opts.urn:
                warnings.warn("""Define `options_list` blocks instead.""", DeprecationWarning)
                pulumi.log.warn("""options is deprecated: Define `options_list` blocks instead.""")
            __props__.__dict__["options"] = options
            __props__.__dict__["options_list"] = options_list
            if request is not None and not opts.urn:
                warnings.warn("""Define `request_definition` list with one element instead.""", DeprecationWarning)
                pulumi.log.warn("""request is deprecated: Define `request_definition` list with one element instead.""")
            __props__.__dict__["request"] = request
            __props__.__dict__["request_basicauth"] = request_basicauth
            __props__.__dict__["request_client_certificate"] = request_client_certificate
            __props__.__dict__["request_definition"] = request_definition
            __props__.__dict__["request_headers"] = request_headers
            __props__.__dict__["request_query"] = request_query
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            if steps is not None and not opts.urn:
                warnings.warn("""Define `browser_step` blocks instead.""", DeprecationWarning)
                pulumi.log.warn("""steps is deprecated: Define `browser_step` blocks instead.""")
            __props__.__dict__["steps"] = steps
            __props__.__dict__["subtype"] = subtype
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if variables is not None and not opts.urn:
                warnings.warn("""Define `browser_variable` blocks instead.""", DeprecationWarning)
                pulumi.log.warn("""variables is deprecated: Define `browser_variable` blocks instead.""")
            __props__.__dict__["variables"] = variables
            __props__.__dict__["monitor_id"] = None
        super(SyntheticsTest, __self__).__init__(
            'datadog:index/syntheticsTest:SyntheticsTest',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_steps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestApiStepArgs']]]]] = None,
            assertions: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
            browser_steps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestBrowserStepArgs']]]]] = None,
            browser_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestBrowserVariableArgs']]]]] = None,
            config_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestConfigVariableArgs']]]]] = None,
            device_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            message: Optional[pulumi.Input[str]] = None,
            monitor_id: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            options: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestOptionsArgs']]] = None,
            options_list: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestOptionsListArgs']]] = None,
            request: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestRequestArgs']]] = None,
            request_basicauth: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestRequestBasicauthArgs']]] = None,
            request_client_certificate: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestRequestClientCertificateArgs']]] = None,
            request_definition: Optional[pulumi.Input[pulumi.InputType['SyntheticsTestRequestDefinitionArgs']]] = None,
            request_headers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            request_query: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            steps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestStepArgs']]]]] = None,
            subtype: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestVariableArgs']]]]] = None) -> 'SyntheticsTest':
        """
        Get an existing SyntheticsTest resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestApiStepArgs']]]] api_steps: Steps for multistep api tests
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]] assertions: List of assertions.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestBrowserStepArgs']]]] browser_steps: Steps for browser tests.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestBrowserVariableArgs']]]] browser_variables: Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestConfigVariableArgs']]]] config_variables: Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] device_ids: Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
               (only available for `browser` tests).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] locations: Array of locations used to run the test. Refer to [Datadog
               documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
               `aws:eu-central-1`).
        :param pulumi.Input[str] message: A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
               using the same `@username` notation as events.
        :param pulumi.Input[int] monitor_id: ID of the monitor associated with the Datadog synthetics test.
        :param pulumi.Input[str] name: Name of Datadog synthetics test.
        :param pulumi.Input[pulumi.InputType['SyntheticsTestRequestArgs']] request: The synthetics test request. Required if `type = "api"`.
        :param pulumi.Input[pulumi.InputType['SyntheticsTestRequestBasicauthArgs']] request_basicauth: The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
        :param pulumi.Input[pulumi.InputType['SyntheticsTestRequestClientCertificateArgs']] request_client_certificate: Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
               below.
        :param pulumi.Input[pulumi.InputType['SyntheticsTestRequestDefinitionArgs']] request_definition: The synthetics test request. Required if `type = "api"`.
        :param pulumi.Input[Mapping[str, Any]] request_headers: Header name and value map.
        :param pulumi.Input[Mapping[str, Any]] request_query: Query arguments name and value map.
        :param pulumi.Input[str] status: Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestStepArgs']]]] steps: Steps for browser tests.
        :param pulumi.Input[str] subtype: When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
               synthetics page of the UI. Default is an empty list (`[]`).
        :param pulumi.Input[str] type: Synthetics test type (`api` or `browser`).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsTestVariableArgs']]]] variables: Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SyntheticsTestState.__new__(_SyntheticsTestState)

        __props__.__dict__["api_steps"] = api_steps
        __props__.__dict__["assertions"] = assertions
        __props__.__dict__["browser_steps"] = browser_steps
        __props__.__dict__["browser_variables"] = browser_variables
        __props__.__dict__["config_variables"] = config_variables
        __props__.__dict__["device_ids"] = device_ids
        __props__.__dict__["locations"] = locations
        __props__.__dict__["message"] = message
        __props__.__dict__["monitor_id"] = monitor_id
        __props__.__dict__["name"] = name
        __props__.__dict__["options"] = options
        __props__.__dict__["options_list"] = options_list
        __props__.__dict__["request"] = request
        __props__.__dict__["request_basicauth"] = request_basicauth
        __props__.__dict__["request_client_certificate"] = request_client_certificate
        __props__.__dict__["request_definition"] = request_definition
        __props__.__dict__["request_headers"] = request_headers
        __props__.__dict__["request_query"] = request_query
        __props__.__dict__["status"] = status
        __props__.__dict__["steps"] = steps
        __props__.__dict__["subtype"] = subtype
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["variables"] = variables
        return SyntheticsTest(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiSteps")
    def api_steps(self) -> pulumi.Output[Optional[Sequence['outputs.SyntheticsTestApiStep']]]:
        """
        Steps for multistep api tests
        """
        return pulumi.get(self, "api_steps")

    @property
    @pulumi.getter
    def assertions(self) -> pulumi.Output[Optional[Sequence[Mapping[str, Any]]]]:
        """
        List of assertions.
        """
        return pulumi.get(self, "assertions")

    @property
    @pulumi.getter(name="browserSteps")
    def browser_steps(self) -> pulumi.Output[Optional[Sequence['outputs.SyntheticsTestBrowserStep']]]:
        """
        Steps for browser tests.
        """
        return pulumi.get(self, "browser_steps")

    @property
    @pulumi.getter(name="browserVariables")
    def browser_variables(self) -> pulumi.Output[Optional[Sequence['outputs.SyntheticsTestBrowserVariable']]]:
        """
        Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
        """
        return pulumi.get(self, "browser_variables")

    @property
    @pulumi.getter(name="configVariables")
    def config_variables(self) -> pulumi.Output[Optional[Sequence['outputs.SyntheticsTestConfigVariable']]]:
        """
        Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
        """
        return pulumi.get(self, "config_variables")

    @property
    @pulumi.getter(name="deviceIds")
    def device_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
        (only available for `browser` tests).
        """
        return pulumi.get(self, "device_ids")

    @property
    @pulumi.getter
    def locations(self) -> pulumi.Output[Sequence[str]]:
        """
        Array of locations used to run the test. Refer to [Datadog
        documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
        `aws:eu-central-1`).
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def message(self) -> pulumi.Output[Optional[str]]:
        """
        A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
        using the same `@username` notation as events.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> pulumi.Output[int]:
        """
        ID of the monitor associated with the Datadog synthetics test.
        """
        return pulumi.get(self, "monitor_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of Datadog synthetics test.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output[Optional['outputs.SyntheticsTestOptions']]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="optionsList")
    def options_list(self) -> pulumi.Output[Optional['outputs.SyntheticsTestOptionsList']]:
        return pulumi.get(self, "options_list")

    @property
    @pulumi.getter
    def request(self) -> pulumi.Output[Optional['outputs.SyntheticsTestRequest']]:
        """
        The synthetics test request. Required if `type = "api"`.
        """
        return pulumi.get(self, "request")

    @property
    @pulumi.getter(name="requestBasicauth")
    def request_basicauth(self) -> pulumi.Output[Optional['outputs.SyntheticsTestRequestBasicauth']]:
        """
        The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
        """
        return pulumi.get(self, "request_basicauth")

    @property
    @pulumi.getter(name="requestClientCertificate")
    def request_client_certificate(self) -> pulumi.Output[Optional['outputs.SyntheticsTestRequestClientCertificate']]:
        """
        Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
        below.
        """
        return pulumi.get(self, "request_client_certificate")

    @property
    @pulumi.getter(name="requestDefinition")
    def request_definition(self) -> pulumi.Output[Optional['outputs.SyntheticsTestRequestDefinition']]:
        """
        The synthetics test request. Required if `type = "api"`.
        """
        return pulumi.get(self, "request_definition")

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Header name and value map.
        """
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="requestQuery")
    def request_query(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Query arguments name and value map.
        """
        return pulumi.get(self, "request_query")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def steps(self) -> pulumi.Output[Optional[Sequence['outputs.SyntheticsTestStep']]]:
        """
        Steps for browser tests.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def subtype(self) -> pulumi.Output[Optional[str]]:
        """
        When `type` is `api`, choose from `http`, `ssl`, `tcp`, `dns` or `multi`. Defaults to `http`.
        """
        return pulumi.get(self, "subtype")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
        synthetics page of the UI. Default is an empty list (`[]`).
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Synthetics test type (`api` or `browser`).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def variables(self) -> pulumi.Output[Optional[Sequence['outputs.SyntheticsTestVariable']]]:
        """
        Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
        """
        return pulumi.get(self, "variables")

