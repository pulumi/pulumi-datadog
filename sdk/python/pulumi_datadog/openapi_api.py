# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['OpenapiApiArgs', 'OpenapiApi']

@pulumi.input_type
class OpenapiApiArgs:
    def __init__(__self__, *,
                 spec: pulumi.Input[str]):
        """
        The set of arguments for constructing a OpenapiApi resource.
        :param pulumi.Input[str] spec: The OpenAPI spec.
        """
        pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input[str]:
        """
        The OpenAPI spec.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input[str]):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class _OpenapiApiState:
    def __init__(__self__, *,
                 spec: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OpenapiApi resources.
        :param pulumi.Input[str] spec: The OpenAPI spec.
        """
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        """
        The OpenAPI spec.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)


class OpenapiApi(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Datadog OpenapiApi resource. This can be used to create and manage Datadog openapi_api.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        # Create new openapi_api resource
        my_api = datadog.OpenapiApi("my-api", spec=(lambda path: open(path).read())("./path/my-api.yaml"))
        ```

        ## Import

        ```sh
         $ pulumi import datadog:index/openapiApi:OpenapiApi new_list "90646597-5fdb-4a17-a240-647003f8c028"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] spec: The OpenAPI spec.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OpenapiApiArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Datadog OpenapiApi resource. This can be used to create and manage Datadog openapi_api.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        # Create new openapi_api resource
        my_api = datadog.OpenapiApi("my-api", spec=(lambda path: open(path).read())("./path/my-api.yaml"))
        ```

        ## Import

        ```sh
         $ pulumi import datadog:index/openapiApi:OpenapiApi new_list "90646597-5fdb-4a17-a240-647003f8c028"
        ```

        :param str resource_name: The name of the resource.
        :param OpenapiApiArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OpenapiApiArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OpenapiApiArgs.__new__(OpenapiApiArgs)

            if spec is None and not opts.urn:
                raise TypeError("Missing required property 'spec'")
            __props__.__dict__["spec"] = spec
        super(OpenapiApi, __self__).__init__(
            'datadog:index/openapiApi:OpenapiApi',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            spec: Optional[pulumi.Input[str]] = None) -> 'OpenapiApi':
        """
        Get an existing OpenapiApi resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] spec: The OpenAPI spec.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OpenapiApiState.__new__(_OpenapiApiState)

        __props__.__dict__["spec"] = spec
        return OpenapiApi(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Output[str]:
        """
        The OpenAPI spec.
        """
        return pulumi.get(self, "spec")

