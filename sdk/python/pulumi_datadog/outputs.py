# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ChildOrganizationApiKey',
    'ChildOrganizationApplicationKey',
    'ChildOrganizationSetting',
    'ChildOrganizationSettingSaml',
    'ChildOrganizationSettingSamlAutocreateUsersDomain',
    'ChildOrganizationSettingSamlIdpInitiatedLogin',
    'ChildOrganizationSettingSamlStrictMode',
    'ChildOrganizationUser',
    'DashboardListDashItem',
    'DashboardTemplateVariable',
    'DashboardTemplateVariablePreset',
    'DashboardTemplateVariablePresetTemplateVariable',
    'DashboardWidget',
    'DashboardWidgetAlertGraphDefinition',
    'DashboardWidgetAlertValueDefinition',
    'DashboardWidgetChangeDefinition',
    'DashboardWidgetChangeDefinitionCustomLink',
    'DashboardWidgetChangeDefinitionRequest',
    'DashboardWidgetChangeDefinitionRequestApmQuery',
    'DashboardWidgetChangeDefinitionRequestApmQueryComputeQuery',
    'DashboardWidgetChangeDefinitionRequestApmQueryGroupBy',
    'DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortQuery',
    'DashboardWidgetChangeDefinitionRequestApmQueryMultiCompute',
    'DashboardWidgetChangeDefinitionRequestFormula',
    'DashboardWidgetChangeDefinitionRequestFormulaConditionalFormat',
    'DashboardWidgetChangeDefinitionRequestFormulaLimit',
    'DashboardWidgetChangeDefinitionRequestLogQuery',
    'DashboardWidgetChangeDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetChangeDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetChangeDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetChangeDefinitionRequestProcessQuery',
    'DashboardWidgetChangeDefinitionRequestQuery',
    'DashboardWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery',
    'DashboardWidgetChangeDefinitionRequestQueryApmResourceStatsQuery',
    'DashboardWidgetChangeDefinitionRequestQueryEventQuery',
    'DashboardWidgetChangeDefinitionRequestQueryEventQueryCompute',
    'DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBy',
    'DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBySort',
    'DashboardWidgetChangeDefinitionRequestQueryEventQuerySearch',
    'DashboardWidgetChangeDefinitionRequestQueryMetricQuery',
    'DashboardWidgetChangeDefinitionRequestQueryProcessQuery',
    'DashboardWidgetChangeDefinitionRequestRumQuery',
    'DashboardWidgetChangeDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetChangeDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetChangeDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetChangeDefinitionRequestSecurityQuery',
    'DashboardWidgetChangeDefinitionRequestSecurityQueryComputeQuery',
    'DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBy',
    'DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery',
    'DashboardWidgetChangeDefinitionRequestSecurityQueryMultiCompute',
    'DashboardWidgetCheckStatusDefinition',
    'DashboardWidgetDistributionDefinition',
    'DashboardWidgetDistributionDefinitionRequest',
    'DashboardWidgetDistributionDefinitionRequestApmQuery',
    'DashboardWidgetDistributionDefinitionRequestApmQueryComputeQuery',
    'DashboardWidgetDistributionDefinitionRequestApmQueryGroupBy',
    'DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery',
    'DashboardWidgetDistributionDefinitionRequestApmQueryMultiCompute',
    'DashboardWidgetDistributionDefinitionRequestLogQuery',
    'DashboardWidgetDistributionDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetDistributionDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetDistributionDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetDistributionDefinitionRequestProcessQuery',
    'DashboardWidgetDistributionDefinitionRequestRumQuery',
    'DashboardWidgetDistributionDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetDistributionDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetDistributionDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetDistributionDefinitionRequestSecurityQuery',
    'DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeQuery',
    'DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBy',
    'DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery',
    'DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiCompute',
    'DashboardWidgetDistributionDefinitionRequestStyle',
    'DashboardWidgetEventStreamDefinition',
    'DashboardWidgetEventTimelineDefinition',
    'DashboardWidgetFreeTextDefinition',
    'DashboardWidgetGeomapDefinition',
    'DashboardWidgetGeomapDefinitionCustomLink',
    'DashboardWidgetGeomapDefinitionRequest',
    'DashboardWidgetGeomapDefinitionRequestFormula',
    'DashboardWidgetGeomapDefinitionRequestFormulaConditionalFormat',
    'DashboardWidgetGeomapDefinitionRequestFormulaLimit',
    'DashboardWidgetGeomapDefinitionRequestLogQuery',
    'DashboardWidgetGeomapDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetGeomapDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetGeomapDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetGeomapDefinitionRequestQuery',
    'DashboardWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery',
    'DashboardWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery',
    'DashboardWidgetGeomapDefinitionRequestQueryEventQuery',
    'DashboardWidgetGeomapDefinitionRequestQueryEventQueryCompute',
    'DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBy',
    'DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort',
    'DashboardWidgetGeomapDefinitionRequestQueryEventQuerySearch',
    'DashboardWidgetGeomapDefinitionRequestQueryMetricQuery',
    'DashboardWidgetGeomapDefinitionRequestQueryProcessQuery',
    'DashboardWidgetGeomapDefinitionRequestRumQuery',
    'DashboardWidgetGeomapDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetGeomapDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetGeomapDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetGeomapDefinitionStyle',
    'DashboardWidgetGeomapDefinitionView',
    'DashboardWidgetGroupDefinition',
    'DashboardWidgetGroupDefinitionWidget',
    'DashboardWidgetGroupDefinitionWidgetAlertGraphDefinition',
    'DashboardWidgetGroupDefinitionWidgetAlertValueDefinition',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinition',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLink',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequest',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormula',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaConditionalFormat',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryCompute',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetCheckStatusDefinition',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinition',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequest',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle',
    'DashboardWidgetGroupDefinitionWidgetEventStreamDefinition',
    'DashboardWidgetGroupDefinitionWidgetEventTimelineDefinition',
    'DashboardWidgetGroupDefinitionWidgetFreeTextDefinition',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinition',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionCustomLink',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequest',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormula',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaConditionalFormat',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQuery',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryCompute',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyle',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionView',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinition',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLink',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEvent',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequest',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinition',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLink',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequest',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFill',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSize',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyle',
    'DashboardWidgetGroupDefinitionWidgetIframeDefinition',
    'DashboardWidgetGroupDefinitionWidgetImageDefinition',
    'DashboardWidgetGroupDefinitionWidgetLogStreamDefinition',
    'DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSort',
    'DashboardWidgetGroupDefinitionWidgetManageStatusDefinition',
    'DashboardWidgetGroupDefinitionWidgetNoteDefinition',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinition',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLink',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequest',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumn',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormat',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormula',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaConditionalFormat',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryCompute',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinition',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLink',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequest',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormat',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormula',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaConditionalFormat',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryCompute',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinition',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLink',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequest',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTable',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableFormula',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCompute',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestX',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestY',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis',
    'DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition',
    'DashboardWidgetGroupDefinitionWidgetServicemapDefinition',
    'DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLink',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinition',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionCustomLink',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequest',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormula',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaConditionalFormat',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryCompute',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinition',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLink',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEvent',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarker',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequest',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormula',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaConditionalFormat',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadata',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryCompute',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinition',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLink',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequest',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormat',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormula',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaConditionalFormat',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryCompute',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBy',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiCompute',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle',
    'DashboardWidgetGroupDefinitionWidgetTraceServiceDefinition',
    'DashboardWidgetGroupDefinitionWidgetWidgetLayout',
    'DashboardWidgetHeatmapDefinition',
    'DashboardWidgetHeatmapDefinitionCustomLink',
    'DashboardWidgetHeatmapDefinitionEvent',
    'DashboardWidgetHeatmapDefinitionRequest',
    'DashboardWidgetHeatmapDefinitionRequestApmQuery',
    'DashboardWidgetHeatmapDefinitionRequestApmQueryComputeQuery',
    'DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBy',
    'DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery',
    'DashboardWidgetHeatmapDefinitionRequestApmQueryMultiCompute',
    'DashboardWidgetHeatmapDefinitionRequestLogQuery',
    'DashboardWidgetHeatmapDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetHeatmapDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetHeatmapDefinitionRequestProcessQuery',
    'DashboardWidgetHeatmapDefinitionRequestRumQuery',
    'DashboardWidgetHeatmapDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetHeatmapDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetHeatmapDefinitionRequestSecurityQuery',
    'DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery',
    'DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBy',
    'DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery',
    'DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiCompute',
    'DashboardWidgetHeatmapDefinitionRequestStyle',
    'DashboardWidgetHeatmapDefinitionYaxis',
    'DashboardWidgetHostmapDefinition',
    'DashboardWidgetHostmapDefinitionCustomLink',
    'DashboardWidgetHostmapDefinitionRequest',
    'DashboardWidgetHostmapDefinitionRequestFill',
    'DashboardWidgetHostmapDefinitionRequestFillApmQuery',
    'DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeQuery',
    'DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBy',
    'DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery',
    'DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiCompute',
    'DashboardWidgetHostmapDefinitionRequestFillLogQuery',
    'DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeQuery',
    'DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBy',
    'DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery',
    'DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiCompute',
    'DashboardWidgetHostmapDefinitionRequestFillProcessQuery',
    'DashboardWidgetHostmapDefinitionRequestFillRumQuery',
    'DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeQuery',
    'DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBy',
    'DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery',
    'DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiCompute',
    'DashboardWidgetHostmapDefinitionRequestFillSecurityQuery',
    'DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery',
    'DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy',
    'DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery',
    'DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiCompute',
    'DashboardWidgetHostmapDefinitionRequestSize',
    'DashboardWidgetHostmapDefinitionRequestSizeApmQuery',
    'DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery',
    'DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBy',
    'DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery',
    'DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiCompute',
    'DashboardWidgetHostmapDefinitionRequestSizeLogQuery',
    'DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery',
    'DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBy',
    'DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery',
    'DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiCompute',
    'DashboardWidgetHostmapDefinitionRequestSizeProcessQuery',
    'DashboardWidgetHostmapDefinitionRequestSizeRumQuery',
    'DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery',
    'DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBy',
    'DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery',
    'DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiCompute',
    'DashboardWidgetHostmapDefinitionRequestSizeSecurityQuery',
    'DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery',
    'DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy',
    'DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery',
    'DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiCompute',
    'DashboardWidgetHostmapDefinitionStyle',
    'DashboardWidgetIframeDefinition',
    'DashboardWidgetImageDefinition',
    'DashboardWidgetLogStreamDefinition',
    'DashboardWidgetLogStreamDefinitionSort',
    'DashboardWidgetManageStatusDefinition',
    'DashboardWidgetNoteDefinition',
    'DashboardWidgetQueryTableDefinition',
    'DashboardWidgetQueryTableDefinitionCustomLink',
    'DashboardWidgetQueryTableDefinitionRequest',
    'DashboardWidgetQueryTableDefinitionRequestApmQuery',
    'DashboardWidgetQueryTableDefinitionRequestApmQueryComputeQuery',
    'DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBy',
    'DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery',
    'DashboardWidgetQueryTableDefinitionRequestApmQueryMultiCompute',
    'DashboardWidgetQueryTableDefinitionRequestApmStatsQuery',
    'DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumn',
    'DashboardWidgetQueryTableDefinitionRequestConditionalFormat',
    'DashboardWidgetQueryTableDefinitionRequestFormula',
    'DashboardWidgetQueryTableDefinitionRequestFormulaConditionalFormat',
    'DashboardWidgetQueryTableDefinitionRequestFormulaLimit',
    'DashboardWidgetQueryTableDefinitionRequestLogQuery',
    'DashboardWidgetQueryTableDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetQueryTableDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetQueryTableDefinitionRequestProcessQuery',
    'DashboardWidgetQueryTableDefinitionRequestQuery',
    'DashboardWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery',
    'DashboardWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery',
    'DashboardWidgetQueryTableDefinitionRequestQueryEventQuery',
    'DashboardWidgetQueryTableDefinitionRequestQueryEventQueryCompute',
    'DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBy',
    'DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort',
    'DashboardWidgetQueryTableDefinitionRequestQueryEventQuerySearch',
    'DashboardWidgetQueryTableDefinitionRequestQueryMetricQuery',
    'DashboardWidgetQueryTableDefinitionRequestQueryProcessQuery',
    'DashboardWidgetQueryTableDefinitionRequestRumQuery',
    'DashboardWidgetQueryTableDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetQueryTableDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetQueryTableDefinitionRequestSecurityQuery',
    'DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery',
    'DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBy',
    'DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery',
    'DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiCompute',
    'DashboardWidgetQueryValueDefinition',
    'DashboardWidgetQueryValueDefinitionCustomLink',
    'DashboardWidgetQueryValueDefinitionRequest',
    'DashboardWidgetQueryValueDefinitionRequestApmQuery',
    'DashboardWidgetQueryValueDefinitionRequestApmQueryComputeQuery',
    'DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBy',
    'DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery',
    'DashboardWidgetQueryValueDefinitionRequestApmQueryMultiCompute',
    'DashboardWidgetQueryValueDefinitionRequestAuditQuery',
    'DashboardWidgetQueryValueDefinitionRequestAuditQueryComputeQuery',
    'DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBy',
    'DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery',
    'DashboardWidgetQueryValueDefinitionRequestAuditQueryMultiCompute',
    'DashboardWidgetQueryValueDefinitionRequestConditionalFormat',
    'DashboardWidgetQueryValueDefinitionRequestFormula',
    'DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormat',
    'DashboardWidgetQueryValueDefinitionRequestFormulaLimit',
    'DashboardWidgetQueryValueDefinitionRequestLogQuery',
    'DashboardWidgetQueryValueDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetQueryValueDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetQueryValueDefinitionRequestProcessQuery',
    'DashboardWidgetQueryValueDefinitionRequestQuery',
    'DashboardWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery',
    'DashboardWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery',
    'DashboardWidgetQueryValueDefinitionRequestQueryEventQuery',
    'DashboardWidgetQueryValueDefinitionRequestQueryEventQueryCompute',
    'DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBy',
    'DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort',
    'DashboardWidgetQueryValueDefinitionRequestQueryEventQuerySearch',
    'DashboardWidgetQueryValueDefinitionRequestQueryMetricQuery',
    'DashboardWidgetQueryValueDefinitionRequestQueryProcessQuery',
    'DashboardWidgetQueryValueDefinitionRequestRumQuery',
    'DashboardWidgetQueryValueDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetQueryValueDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetQueryValueDefinitionRequestSecurityQuery',
    'DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery',
    'DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBy',
    'DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery',
    'DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiCompute',
    'DashboardWidgetScatterplotDefinition',
    'DashboardWidgetScatterplotDefinitionCustomLink',
    'DashboardWidgetScatterplotDefinitionRequest',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTable',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableFormula',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuery',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCompute',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBy',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery',
    'DashboardWidgetScatterplotDefinitionRequestX',
    'DashboardWidgetScatterplotDefinitionRequestXApmQuery',
    'DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeQuery',
    'DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBy',
    'DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery',
    'DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiCompute',
    'DashboardWidgetScatterplotDefinitionRequestXLogQuery',
    'DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeQuery',
    'DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBy',
    'DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery',
    'DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiCompute',
    'DashboardWidgetScatterplotDefinitionRequestXProcessQuery',
    'DashboardWidgetScatterplotDefinitionRequestXRumQuery',
    'DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeQuery',
    'DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBy',
    'DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery',
    'DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiCompute',
    'DashboardWidgetScatterplotDefinitionRequestXSecurityQuery',
    'DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery',
    'DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy',
    'DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery',
    'DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiCompute',
    'DashboardWidgetScatterplotDefinitionRequestY',
    'DashboardWidgetScatterplotDefinitionRequestYApmQuery',
    'DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeQuery',
    'DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBy',
    'DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery',
    'DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiCompute',
    'DashboardWidgetScatterplotDefinitionRequestYLogQuery',
    'DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeQuery',
    'DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBy',
    'DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery',
    'DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiCompute',
    'DashboardWidgetScatterplotDefinitionRequestYProcessQuery',
    'DashboardWidgetScatterplotDefinitionRequestYRumQuery',
    'DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeQuery',
    'DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBy',
    'DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery',
    'DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiCompute',
    'DashboardWidgetScatterplotDefinitionRequestYSecurityQuery',
    'DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery',
    'DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy',
    'DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery',
    'DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiCompute',
    'DashboardWidgetScatterplotDefinitionXaxis',
    'DashboardWidgetScatterplotDefinitionYaxis',
    'DashboardWidgetServiceLevelObjectiveDefinition',
    'DashboardWidgetServicemapDefinition',
    'DashboardWidgetServicemapDefinitionCustomLink',
    'DashboardWidgetSunburstDefinition',
    'DashboardWidgetSunburstDefinitionCustomLink',
    'DashboardWidgetSunburstDefinitionLegendInline',
    'DashboardWidgetSunburstDefinitionLegendTable',
    'DashboardWidgetSunburstDefinitionRequest',
    'DashboardWidgetSunburstDefinitionRequestApmQuery',
    'DashboardWidgetSunburstDefinitionRequestApmQueryComputeQuery',
    'DashboardWidgetSunburstDefinitionRequestApmQueryGroupBy',
    'DashboardWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery',
    'DashboardWidgetSunburstDefinitionRequestApmQueryMultiCompute',
    'DashboardWidgetSunburstDefinitionRequestAuditQuery',
    'DashboardWidgetSunburstDefinitionRequestAuditQueryComputeQuery',
    'DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBy',
    'DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery',
    'DashboardWidgetSunburstDefinitionRequestAuditQueryMultiCompute',
    'DashboardWidgetSunburstDefinitionRequestFormula',
    'DashboardWidgetSunburstDefinitionRequestFormulaConditionalFormat',
    'DashboardWidgetSunburstDefinitionRequestFormulaLimit',
    'DashboardWidgetSunburstDefinitionRequestLogQuery',
    'DashboardWidgetSunburstDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetSunburstDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetSunburstDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetSunburstDefinitionRequestNetworkQuery',
    'DashboardWidgetSunburstDefinitionRequestNetworkQueryComputeQuery',
    'DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBy',
    'DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery',
    'DashboardWidgetSunburstDefinitionRequestNetworkQueryMultiCompute',
    'DashboardWidgetSunburstDefinitionRequestProcessQuery',
    'DashboardWidgetSunburstDefinitionRequestQuery',
    'DashboardWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery',
    'DashboardWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery',
    'DashboardWidgetSunburstDefinitionRequestQueryEventQuery',
    'DashboardWidgetSunburstDefinitionRequestQueryEventQueryCompute',
    'DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBy',
    'DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort',
    'DashboardWidgetSunburstDefinitionRequestQueryEventQuerySearch',
    'DashboardWidgetSunburstDefinitionRequestQueryMetricQuery',
    'DashboardWidgetSunburstDefinitionRequestQueryProcessQuery',
    'DashboardWidgetSunburstDefinitionRequestRumQuery',
    'DashboardWidgetSunburstDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetSunburstDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetSunburstDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetSunburstDefinitionRequestSecurityQuery',
    'DashboardWidgetSunburstDefinitionRequestSecurityQueryComputeQuery',
    'DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBy',
    'DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery',
    'DashboardWidgetSunburstDefinitionRequestSecurityQueryMultiCompute',
    'DashboardWidgetTimeseriesDefinition',
    'DashboardWidgetTimeseriesDefinitionCustomLink',
    'DashboardWidgetTimeseriesDefinitionEvent',
    'DashboardWidgetTimeseriesDefinitionMarker',
    'DashboardWidgetTimeseriesDefinitionRequest',
    'DashboardWidgetTimeseriesDefinitionRequestApmQuery',
    'DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeQuery',
    'DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBy',
    'DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery',
    'DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiCompute',
    'DashboardWidgetTimeseriesDefinitionRequestAuditQuery',
    'DashboardWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery',
    'DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBy',
    'DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery',
    'DashboardWidgetTimeseriesDefinitionRequestAuditQueryMultiCompute',
    'DashboardWidgetTimeseriesDefinitionRequestFormula',
    'DashboardWidgetTimeseriesDefinitionRequestFormulaConditionalFormat',
    'DashboardWidgetTimeseriesDefinitionRequestFormulaLimit',
    'DashboardWidgetTimeseriesDefinitionRequestLogQuery',
    'DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetTimeseriesDefinitionRequestMetadata',
    'DashboardWidgetTimeseriesDefinitionRequestNetworkQuery',
    'DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery',
    'DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy',
    'DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery',
    'DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiCompute',
    'DashboardWidgetTimeseriesDefinitionRequestProcessQuery',
    'DashboardWidgetTimeseriesDefinitionRequestQuery',
    'DashboardWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery',
    'DashboardWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery',
    'DashboardWidgetTimeseriesDefinitionRequestQueryEventQuery',
    'DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryCompute',
    'DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBy',
    'DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort',
    'DashboardWidgetTimeseriesDefinitionRequestQueryEventQuerySearch',
    'DashboardWidgetTimeseriesDefinitionRequestQueryMetricQuery',
    'DashboardWidgetTimeseriesDefinitionRequestQueryProcessQuery',
    'DashboardWidgetTimeseriesDefinitionRequestRumQuery',
    'DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetTimeseriesDefinitionRequestSecurityQuery',
    'DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery',
    'DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy',
    'DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery',
    'DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiCompute',
    'DashboardWidgetTimeseriesDefinitionRequestStyle',
    'DashboardWidgetTimeseriesDefinitionRightYaxis',
    'DashboardWidgetTimeseriesDefinitionYaxis',
    'DashboardWidgetToplistDefinition',
    'DashboardWidgetToplistDefinitionCustomLink',
    'DashboardWidgetToplistDefinitionRequest',
    'DashboardWidgetToplistDefinitionRequestApmQuery',
    'DashboardWidgetToplistDefinitionRequestApmQueryComputeQuery',
    'DashboardWidgetToplistDefinitionRequestApmQueryGroupBy',
    'DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortQuery',
    'DashboardWidgetToplistDefinitionRequestApmQueryMultiCompute',
    'DashboardWidgetToplistDefinitionRequestAuditQuery',
    'DashboardWidgetToplistDefinitionRequestAuditQueryComputeQuery',
    'DashboardWidgetToplistDefinitionRequestAuditQueryGroupBy',
    'DashboardWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery',
    'DashboardWidgetToplistDefinitionRequestAuditQueryMultiCompute',
    'DashboardWidgetToplistDefinitionRequestConditionalFormat',
    'DashboardWidgetToplistDefinitionRequestFormula',
    'DashboardWidgetToplistDefinitionRequestFormulaConditionalFormat',
    'DashboardWidgetToplistDefinitionRequestFormulaLimit',
    'DashboardWidgetToplistDefinitionRequestLogQuery',
    'DashboardWidgetToplistDefinitionRequestLogQueryComputeQuery',
    'DashboardWidgetToplistDefinitionRequestLogQueryGroupBy',
    'DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortQuery',
    'DashboardWidgetToplistDefinitionRequestLogQueryMultiCompute',
    'DashboardWidgetToplistDefinitionRequestProcessQuery',
    'DashboardWidgetToplistDefinitionRequestQuery',
    'DashboardWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery',
    'DashboardWidgetToplistDefinitionRequestQueryApmResourceStatsQuery',
    'DashboardWidgetToplistDefinitionRequestQueryEventQuery',
    'DashboardWidgetToplistDefinitionRequestQueryEventQueryCompute',
    'DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBy',
    'DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBySort',
    'DashboardWidgetToplistDefinitionRequestQueryEventQuerySearch',
    'DashboardWidgetToplistDefinitionRequestQueryMetricQuery',
    'DashboardWidgetToplistDefinitionRequestQueryProcessQuery',
    'DashboardWidgetToplistDefinitionRequestRumQuery',
    'DashboardWidgetToplistDefinitionRequestRumQueryComputeQuery',
    'DashboardWidgetToplistDefinitionRequestRumQueryGroupBy',
    'DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortQuery',
    'DashboardWidgetToplistDefinitionRequestRumQueryMultiCompute',
    'DashboardWidgetToplistDefinitionRequestSecurityQuery',
    'DashboardWidgetToplistDefinitionRequestSecurityQueryComputeQuery',
    'DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBy',
    'DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery',
    'DashboardWidgetToplistDefinitionRequestSecurityQueryMultiCompute',
    'DashboardWidgetToplistDefinitionRequestStyle',
    'DashboardWidgetTraceServiceDefinition',
    'DashboardWidgetWidgetLayout',
    'DowntimeRecurrence',
    'LogsArchiveAzureArchive',
    'LogsArchiveGcsArchive',
    'LogsArchiveS3Archive',
    'LogsCustomPipelineFilter',
    'LogsCustomPipelineProcessor',
    'LogsCustomPipelineProcessorArithmeticProcessor',
    'LogsCustomPipelineProcessorAttributeRemapper',
    'LogsCustomPipelineProcessorCategoryProcessor',
    'LogsCustomPipelineProcessorCategoryProcessorCategory',
    'LogsCustomPipelineProcessorCategoryProcessorCategoryFilter',
    'LogsCustomPipelineProcessorDateRemapper',
    'LogsCustomPipelineProcessorGeoIpParser',
    'LogsCustomPipelineProcessorGrokParser',
    'LogsCustomPipelineProcessorGrokParserGrok',
    'LogsCustomPipelineProcessorLookupProcessor',
    'LogsCustomPipelineProcessorMessageRemapper',
    'LogsCustomPipelineProcessorPipeline',
    'LogsCustomPipelineProcessorPipelineFilter',
    'LogsCustomPipelineProcessorPipelineProcessor',
    'LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessor',
    'LogsCustomPipelineProcessorPipelineProcessorAttributeRemapper',
    'LogsCustomPipelineProcessorPipelineProcessorCategoryProcessor',
    'LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategory',
    'LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilter',
    'LogsCustomPipelineProcessorPipelineProcessorDateRemapper',
    'LogsCustomPipelineProcessorPipelineProcessorGeoIpParser',
    'LogsCustomPipelineProcessorPipelineProcessorGrokParser',
    'LogsCustomPipelineProcessorPipelineProcessorGrokParserGrok',
    'LogsCustomPipelineProcessorPipelineProcessorLookupProcessor',
    'LogsCustomPipelineProcessorPipelineProcessorMessageRemapper',
    'LogsCustomPipelineProcessorPipelineProcessorServiceRemapper',
    'LogsCustomPipelineProcessorPipelineProcessorStatusRemapper',
    'LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessor',
    'LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapper',
    'LogsCustomPipelineProcessorPipelineProcessorUrlParser',
    'LogsCustomPipelineProcessorPipelineProcessorUserAgentParser',
    'LogsCustomPipelineProcessorServiceRemapper',
    'LogsCustomPipelineProcessorStatusRemapper',
    'LogsCustomPipelineProcessorStringBuilderProcessor',
    'LogsCustomPipelineProcessorTraceIdRemapper',
    'LogsCustomPipelineProcessorUrlParser',
    'LogsCustomPipelineProcessorUserAgentParser',
    'LogsIndexExclusionFilter',
    'LogsIndexExclusionFilterFilter',
    'LogsIndexFilter',
    'LogsMetricCompute',
    'LogsMetricFilter',
    'LogsMetricGroupBy',
    'MetricTagConfigurationAggregation',
    'MonitorMonitorThresholdWindows',
    'MonitorMonitorThresholds',
    'OrganizationSettingsSettings',
    'OrganizationSettingsSettingsSaml',
    'OrganizationSettingsSettingsSamlAutocreateUsersDomains',
    'OrganizationSettingsSettingsSamlIdpInitiatedLogin',
    'OrganizationSettingsSettingsSamlStrictMode',
    'RolePermission',
    'SecurityMonitoringDefaultRuleCase',
    'SecurityMonitoringDefaultRuleFilter',
    'SecurityMonitoringFilterExclusionFilter',
    'SecurityMonitoringRuleCase',
    'SecurityMonitoringRuleFilter',
    'SecurityMonitoringRuleOptions',
    'SecurityMonitoringRuleOptionsNewValueOptions',
    'SecurityMonitoringRuleQuery',
    'SecurityMonitoringRuleQueryAgentRule',
    'ServiceLevelObjectiveQuery',
    'ServiceLevelObjectiveThreshold',
    'SyntheticsGlobalVariableParseTestOptions',
    'SyntheticsGlobalVariableParseTestOptionsParser',
    'SyntheticsTestApiStep',
    'SyntheticsTestApiStepAssertion',
    'SyntheticsTestApiStepAssertionTargetjsonpath',
    'SyntheticsTestApiStepExtractedValue',
    'SyntheticsTestApiStepExtractedValueParser',
    'SyntheticsTestApiStepRequestBasicauth',
    'SyntheticsTestApiStepRequestClientCertificate',
    'SyntheticsTestApiStepRequestClientCertificateCert',
    'SyntheticsTestApiStepRequestClientCertificateKey',
    'SyntheticsTestApiStepRequestDefinition',
    'SyntheticsTestApiStepRetry',
    'SyntheticsTestAssertion',
    'SyntheticsTestAssertionTargetjsonpath',
    'SyntheticsTestBrowserStep',
    'SyntheticsTestBrowserStepParams',
    'SyntheticsTestBrowserStepParamsVariable',
    'SyntheticsTestBrowserVariable',
    'SyntheticsTestConfigVariable',
    'SyntheticsTestOptionsList',
    'SyntheticsTestOptionsListMonitorOptions',
    'SyntheticsTestOptionsListRetry',
    'SyntheticsTestRequestBasicauth',
    'SyntheticsTestRequestClientCertificate',
    'SyntheticsTestRequestClientCertificateCert',
    'SyntheticsTestRequestClientCertificateKey',
    'SyntheticsTestRequestDefinition',
    'GetMonitorMonitorThresholdResult',
    'GetMonitorMonitorThresholdWindowResult',
    'GetMonitorsMonitorResult',
    'GetRolesRoleResult',
    'GetSecurityMonitoringFiltersFilterResult',
    'GetSecurityMonitoringFiltersFilterExclusionFilterResult',
    'GetSecurityMonitoringRulesRuleResult',
    'GetSecurityMonitoringRulesRuleCaseResult',
    'GetSecurityMonitoringRulesRuleFilterResult',
    'GetSecurityMonitoringRulesRuleOptionsResult',
    'GetSecurityMonitoringRulesRuleOptionsNewValueOptionsResult',
    'GetSecurityMonitoringRulesRuleQueryResult',
    'GetSecurityMonitoringRulesRuleQueryAgentRuleResult',
    'GetServiceLevelObjectivesSloResult',
]

@pulumi.output_type
class ChildOrganizationApiKey(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str name: Name for Child Organization after creation.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name for Child Organization after creation.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChildOrganizationApplicationKey(dict):
    def __init__(__self__, *,
                 hash: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None):
        """
        :param str name: Name for Child Organization after creation.
        """
        if hash is not None:
            pulumi.set(__self__, "hash", hash)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter
    def hash(self) -> Optional[str]:
        return pulumi.get(self, "hash")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name for Child Organization after creation.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")


@pulumi.output_type
class ChildOrganizationSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateWidgetShare":
            suggest = "private_widget_share"
        elif key == "samlAutocreateAccessRole":
            suggest = "saml_autocreate_access_role"
        elif key == "samlAutocreateUsersDomains":
            suggest = "saml_autocreate_users_domains"
        elif key == "samlCanBeEnabled":
            suggest = "saml_can_be_enabled"
        elif key == "samlIdpEndpoint":
            suggest = "saml_idp_endpoint"
        elif key == "samlIdpInitiatedLogins":
            suggest = "saml_idp_initiated_logins"
        elif key == "samlIdpMetadataUploaded":
            suggest = "saml_idp_metadata_uploaded"
        elif key == "samlLoginUrl":
            suggest = "saml_login_url"
        elif key == "samlStrictModes":
            suggest = "saml_strict_modes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChildOrganizationSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChildOrganizationSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChildOrganizationSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 private_widget_share: Optional[bool] = None,
                 saml_autocreate_access_role: Optional[str] = None,
                 saml_autocreate_users_domains: Optional[Sequence['outputs.ChildOrganizationSettingSamlAutocreateUsersDomain']] = None,
                 saml_can_be_enabled: Optional[bool] = None,
                 saml_idp_endpoint: Optional[str] = None,
                 saml_idp_initiated_logins: Optional[Sequence['outputs.ChildOrganizationSettingSamlIdpInitiatedLogin']] = None,
                 saml_idp_metadata_uploaded: Optional[bool] = None,
                 saml_login_url: Optional[str] = None,
                 saml_strict_modes: Optional[Sequence['outputs.ChildOrganizationSettingSamlStrictMode']] = None,
                 samls: Optional[Sequence['outputs.ChildOrganizationSettingSaml']] = None):
        if private_widget_share is not None:
            pulumi.set(__self__, "private_widget_share", private_widget_share)
        if saml_autocreate_access_role is not None:
            pulumi.set(__self__, "saml_autocreate_access_role", saml_autocreate_access_role)
        if saml_autocreate_users_domains is not None:
            pulumi.set(__self__, "saml_autocreate_users_domains", saml_autocreate_users_domains)
        if saml_can_be_enabled is not None:
            pulumi.set(__self__, "saml_can_be_enabled", saml_can_be_enabled)
        if saml_idp_endpoint is not None:
            pulumi.set(__self__, "saml_idp_endpoint", saml_idp_endpoint)
        if saml_idp_initiated_logins is not None:
            pulumi.set(__self__, "saml_idp_initiated_logins", saml_idp_initiated_logins)
        if saml_idp_metadata_uploaded is not None:
            pulumi.set(__self__, "saml_idp_metadata_uploaded", saml_idp_metadata_uploaded)
        if saml_login_url is not None:
            pulumi.set(__self__, "saml_login_url", saml_login_url)
        if saml_strict_modes is not None:
            pulumi.set(__self__, "saml_strict_modes", saml_strict_modes)
        if samls is not None:
            pulumi.set(__self__, "samls", samls)

    @property
    @pulumi.getter(name="privateWidgetShare")
    def private_widget_share(self) -> Optional[bool]:
        return pulumi.get(self, "private_widget_share")

    @property
    @pulumi.getter(name="samlAutocreateAccessRole")
    def saml_autocreate_access_role(self) -> Optional[str]:
        return pulumi.get(self, "saml_autocreate_access_role")

    @property
    @pulumi.getter(name="samlAutocreateUsersDomains")
    def saml_autocreate_users_domains(self) -> Optional[Sequence['outputs.ChildOrganizationSettingSamlAutocreateUsersDomain']]:
        return pulumi.get(self, "saml_autocreate_users_domains")

    @property
    @pulumi.getter(name="samlCanBeEnabled")
    def saml_can_be_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "saml_can_be_enabled")

    @property
    @pulumi.getter(name="samlIdpEndpoint")
    def saml_idp_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "saml_idp_endpoint")

    @property
    @pulumi.getter(name="samlIdpInitiatedLogins")
    def saml_idp_initiated_logins(self) -> Optional[Sequence['outputs.ChildOrganizationSettingSamlIdpInitiatedLogin']]:
        return pulumi.get(self, "saml_idp_initiated_logins")

    @property
    @pulumi.getter(name="samlIdpMetadataUploaded")
    def saml_idp_metadata_uploaded(self) -> Optional[bool]:
        return pulumi.get(self, "saml_idp_metadata_uploaded")

    @property
    @pulumi.getter(name="samlLoginUrl")
    def saml_login_url(self) -> Optional[str]:
        return pulumi.get(self, "saml_login_url")

    @property
    @pulumi.getter(name="samlStrictModes")
    def saml_strict_modes(self) -> Optional[Sequence['outputs.ChildOrganizationSettingSamlStrictMode']]:
        return pulumi.get(self, "saml_strict_modes")

    @property
    @pulumi.getter
    def samls(self) -> Optional[Sequence['outputs.ChildOrganizationSettingSaml']]:
        return pulumi.get(self, "samls")


@pulumi.output_type
class ChildOrganizationSettingSaml(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ChildOrganizationSettingSamlAutocreateUsersDomain(dict):
    def __init__(__self__, *,
                 domains: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None):
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ChildOrganizationSettingSamlIdpInitiatedLogin(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ChildOrganizationSettingSamlStrictMode(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ChildOrganizationUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessRole":
            suggest = "access_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChildOrganizationUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChildOrganizationUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChildOrganizationUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_role: Optional[str] = None,
                 email: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str name: Name for Child Organization after creation.
        """
        if access_role is not None:
            pulumi.set(__self__, "access_role", access_role)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="accessRole")
    def access_role(self) -> Optional[str]:
        return pulumi.get(self, "access_role")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name for Child Organization after creation.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardListDashItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dashId":
            suggest = "dash_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardListDashItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardListDashItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardListDashItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dash_id: str,
                 type: str):
        """
        :param str dash_id: The ID of the dashboard to add
        :param str type: The type of this dashboard. Valid values are `custom_timeboard`, `custom_screenboard`, `integration_screenboard`, `integration_timeboard`, `host_timeboard`.
        """
        pulumi.set(__self__, "dash_id", dash_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="dashId")
    def dash_id(self) -> str:
        """
        The ID of the dashboard to add
        """
        return pulumi.get(self, "dash_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of this dashboard. Valid values are `custom_timeboard`, `custom_screenboard`, `integration_screenboard`, `integration_timeboard`, `host_timeboard`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardTemplateVariable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availableValues":
            suggest = "available_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTemplateVariable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTemplateVariable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTemplateVariable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 available_values: Optional[Sequence[str]] = None,
                 default: Optional[str] = None,
                 prefix: Optional[str] = None):
        """
        :param str name: The name of the variable.
        :param Sequence[str] available_values: The list of values that the template variable drop-down is be limited to
        :param str default: The default value for the template variable on dashboard load.
        :param str prefix: The tag prefix associated with the variable. Only tags with this prefix appear in the variable dropdown.
        """
        pulumi.set(__self__, "name", name)
        if available_values is not None:
            pulumi.set(__self__, "available_values", available_values)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="availableValues")
    def available_values(self) -> Optional[Sequence[str]]:
        """
        The list of values that the template variable drop-down is be limited to
        """
        return pulumi.get(self, "available_values")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        """
        The default value for the template variable on dashboard load.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        The tag prefix associated with the variable. Only tags with this prefix appear in the variable dropdown.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class DashboardTemplateVariablePreset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateVariables":
            suggest = "template_variables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTemplateVariablePreset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTemplateVariablePreset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTemplateVariablePreset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 template_variables: Optional[Sequence['outputs.DashboardTemplateVariablePresetTemplateVariable']] = None):
        """
        :param str name: The name of the preset.
        :param Sequence['DashboardTemplateVariablePresetTemplateVariableArgs'] template_variables: The template variable names and assumed values under the given preset
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if template_variables is not None:
            pulumi.set(__self__, "template_variables", template_variables)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the preset.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="templateVariables")
    def template_variables(self) -> Optional[Sequence['outputs.DashboardTemplateVariablePresetTemplateVariable']]:
        """
        The template variable names and assumed values under the given preset
        """
        return pulumi.get(self, "template_variables")


@pulumi.output_type
class DashboardTemplateVariablePresetTemplateVariable(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: The name of the variable.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardWidget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertGraphDefinition":
            suggest = "alert_graph_definition"
        elif key == "alertValueDefinition":
            suggest = "alert_value_definition"
        elif key == "changeDefinition":
            suggest = "change_definition"
        elif key == "checkStatusDefinition":
            suggest = "check_status_definition"
        elif key == "distributionDefinition":
            suggest = "distribution_definition"
        elif key == "eventStreamDefinition":
            suggest = "event_stream_definition"
        elif key == "eventTimelineDefinition":
            suggest = "event_timeline_definition"
        elif key == "freeTextDefinition":
            suggest = "free_text_definition"
        elif key == "geomapDefinition":
            suggest = "geomap_definition"
        elif key == "groupDefinition":
            suggest = "group_definition"
        elif key == "heatmapDefinition":
            suggest = "heatmap_definition"
        elif key == "hostmapDefinition":
            suggest = "hostmap_definition"
        elif key == "iframeDefinition":
            suggest = "iframe_definition"
        elif key == "imageDefinition":
            suggest = "image_definition"
        elif key == "logStreamDefinition":
            suggest = "log_stream_definition"
        elif key == "manageStatusDefinition":
            suggest = "manage_status_definition"
        elif key == "noteDefinition":
            suggest = "note_definition"
        elif key == "queryTableDefinition":
            suggest = "query_table_definition"
        elif key == "queryValueDefinition":
            suggest = "query_value_definition"
        elif key == "scatterplotDefinition":
            suggest = "scatterplot_definition"
        elif key == "serviceLevelObjectiveDefinition":
            suggest = "service_level_objective_definition"
        elif key == "servicemapDefinition":
            suggest = "servicemap_definition"
        elif key == "sunburstDefinition":
            suggest = "sunburst_definition"
        elif key == "timeseriesDefinition":
            suggest = "timeseries_definition"
        elif key == "toplistDefinition":
            suggest = "toplist_definition"
        elif key == "traceServiceDefinition":
            suggest = "trace_service_definition"
        elif key == "widgetLayout":
            suggest = "widget_layout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_graph_definition: Optional['outputs.DashboardWidgetAlertGraphDefinition'] = None,
                 alert_value_definition: Optional['outputs.DashboardWidgetAlertValueDefinition'] = None,
                 change_definition: Optional['outputs.DashboardWidgetChangeDefinition'] = None,
                 check_status_definition: Optional['outputs.DashboardWidgetCheckStatusDefinition'] = None,
                 distribution_definition: Optional['outputs.DashboardWidgetDistributionDefinition'] = None,
                 event_stream_definition: Optional['outputs.DashboardWidgetEventStreamDefinition'] = None,
                 event_timeline_definition: Optional['outputs.DashboardWidgetEventTimelineDefinition'] = None,
                 free_text_definition: Optional['outputs.DashboardWidgetFreeTextDefinition'] = None,
                 geomap_definition: Optional['outputs.DashboardWidgetGeomapDefinition'] = None,
                 group_definition: Optional['outputs.DashboardWidgetGroupDefinition'] = None,
                 heatmap_definition: Optional['outputs.DashboardWidgetHeatmapDefinition'] = None,
                 hostmap_definition: Optional['outputs.DashboardWidgetHostmapDefinition'] = None,
                 id: Optional[int] = None,
                 iframe_definition: Optional['outputs.DashboardWidgetIframeDefinition'] = None,
                 image_definition: Optional['outputs.DashboardWidgetImageDefinition'] = None,
                 log_stream_definition: Optional['outputs.DashboardWidgetLogStreamDefinition'] = None,
                 manage_status_definition: Optional['outputs.DashboardWidgetManageStatusDefinition'] = None,
                 note_definition: Optional['outputs.DashboardWidgetNoteDefinition'] = None,
                 query_table_definition: Optional['outputs.DashboardWidgetQueryTableDefinition'] = None,
                 query_value_definition: Optional['outputs.DashboardWidgetQueryValueDefinition'] = None,
                 scatterplot_definition: Optional['outputs.DashboardWidgetScatterplotDefinition'] = None,
                 service_level_objective_definition: Optional['outputs.DashboardWidgetServiceLevelObjectiveDefinition'] = None,
                 servicemap_definition: Optional['outputs.DashboardWidgetServicemapDefinition'] = None,
                 sunburst_definition: Optional['outputs.DashboardWidgetSunburstDefinition'] = None,
                 timeseries_definition: Optional['outputs.DashboardWidgetTimeseriesDefinition'] = None,
                 toplist_definition: Optional['outputs.DashboardWidgetToplistDefinition'] = None,
                 trace_service_definition: Optional['outputs.DashboardWidgetTraceServiceDefinition'] = None,
                 widget_layout: Optional['outputs.DashboardWidgetWidgetLayout'] = None):
        """
        :param 'DashboardWidgetAlertGraphDefinitionArgs' alert_graph_definition: The definition for a Alert Graph widget.
        :param 'DashboardWidgetAlertValueDefinitionArgs' alert_value_definition: The definition for a Alert Value widget.
        :param 'DashboardWidgetChangeDefinitionArgs' change_definition: The definition for a Change widget.
        :param 'DashboardWidgetCheckStatusDefinitionArgs' check_status_definition: The definition for a Check Status widget.
        :param 'DashboardWidgetDistributionDefinitionArgs' distribution_definition: The definition for a Distribution widget.
        :param 'DashboardWidgetEventStreamDefinitionArgs' event_stream_definition: The definition for a Event Stream widget.
        :param 'DashboardWidgetEventTimelineDefinitionArgs' event_timeline_definition: The definition for a Event Timeline widget.
        :param 'DashboardWidgetFreeTextDefinitionArgs' free_text_definition: The definition for a Free Text widget.
        :param 'DashboardWidgetGeomapDefinitionArgs' geomap_definition: The definition for a Geomap widget.
        :param 'DashboardWidgetGroupDefinitionArgs' group_definition: The definition for a Group widget.
        :param 'DashboardWidgetHeatmapDefinitionArgs' heatmap_definition: The definition for a Heatmap widget.
        :param 'DashboardWidgetHostmapDefinitionArgs' hostmap_definition: The definition for a Hostmap widget.
        :param int id: The ID of the widget.
        :param 'DashboardWidgetIframeDefinitionArgs' iframe_definition: The definition for an Iframe widget.
        :param 'DashboardWidgetImageDefinitionArgs' image_definition: The definition for an Image widget
        :param 'DashboardWidgetLogStreamDefinitionArgs' log_stream_definition: The definition for an Log Stream widget.
        :param 'DashboardWidgetManageStatusDefinitionArgs' manage_status_definition: The definition for an Manage Status widget.
        :param 'DashboardWidgetNoteDefinitionArgs' note_definition: The definition for a Note widget.
        :param 'DashboardWidgetQueryTableDefinitionArgs' query_table_definition: The definition for a Query Table widget.
        :param 'DashboardWidgetQueryValueDefinitionArgs' query_value_definition: The definition for a Query Value widget.
        :param 'DashboardWidgetScatterplotDefinitionArgs' scatterplot_definition: The definition for a Scatterplot widget.
        :param 'DashboardWidgetServiceLevelObjectiveDefinitionArgs' service_level_objective_definition: The definition for a Service Level Objective widget.
        :param 'DashboardWidgetServicemapDefinitionArgs' servicemap_definition: The definition for a Service Map widget.
        :param 'DashboardWidgetSunburstDefinitionArgs' sunburst_definition: The definition for a Sunburst widget.
        :param 'DashboardWidgetTimeseriesDefinitionArgs' timeseries_definition: The definition for a Timeseries widget.
        :param 'DashboardWidgetToplistDefinitionArgs' toplist_definition: The definition for a Toplist widget.
        :param 'DashboardWidgetTraceServiceDefinitionArgs' trace_service_definition: The definition for a Trace Service widget.
        :param 'DashboardWidgetWidgetLayoutArgs' widget_layout: The layout of the widget on a 'free' dashboard.
        """
        if alert_graph_definition is not None:
            pulumi.set(__self__, "alert_graph_definition", alert_graph_definition)
        if alert_value_definition is not None:
            pulumi.set(__self__, "alert_value_definition", alert_value_definition)
        if change_definition is not None:
            pulumi.set(__self__, "change_definition", change_definition)
        if check_status_definition is not None:
            pulumi.set(__self__, "check_status_definition", check_status_definition)
        if distribution_definition is not None:
            pulumi.set(__self__, "distribution_definition", distribution_definition)
        if event_stream_definition is not None:
            pulumi.set(__self__, "event_stream_definition", event_stream_definition)
        if event_timeline_definition is not None:
            pulumi.set(__self__, "event_timeline_definition", event_timeline_definition)
        if free_text_definition is not None:
            pulumi.set(__self__, "free_text_definition", free_text_definition)
        if geomap_definition is not None:
            pulumi.set(__self__, "geomap_definition", geomap_definition)
        if group_definition is not None:
            pulumi.set(__self__, "group_definition", group_definition)
        if heatmap_definition is not None:
            pulumi.set(__self__, "heatmap_definition", heatmap_definition)
        if hostmap_definition is not None:
            pulumi.set(__self__, "hostmap_definition", hostmap_definition)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if iframe_definition is not None:
            pulumi.set(__self__, "iframe_definition", iframe_definition)
        if image_definition is not None:
            pulumi.set(__self__, "image_definition", image_definition)
        if log_stream_definition is not None:
            pulumi.set(__self__, "log_stream_definition", log_stream_definition)
        if manage_status_definition is not None:
            pulumi.set(__self__, "manage_status_definition", manage_status_definition)
        if note_definition is not None:
            pulumi.set(__self__, "note_definition", note_definition)
        if query_table_definition is not None:
            pulumi.set(__self__, "query_table_definition", query_table_definition)
        if query_value_definition is not None:
            pulumi.set(__self__, "query_value_definition", query_value_definition)
        if scatterplot_definition is not None:
            pulumi.set(__self__, "scatterplot_definition", scatterplot_definition)
        if service_level_objective_definition is not None:
            pulumi.set(__self__, "service_level_objective_definition", service_level_objective_definition)
        if servicemap_definition is not None:
            pulumi.set(__self__, "servicemap_definition", servicemap_definition)
        if sunburst_definition is not None:
            pulumi.set(__self__, "sunburst_definition", sunburst_definition)
        if timeseries_definition is not None:
            pulumi.set(__self__, "timeseries_definition", timeseries_definition)
        if toplist_definition is not None:
            pulumi.set(__self__, "toplist_definition", toplist_definition)
        if trace_service_definition is not None:
            pulumi.set(__self__, "trace_service_definition", trace_service_definition)
        if widget_layout is not None:
            pulumi.set(__self__, "widget_layout", widget_layout)

    @property
    @pulumi.getter(name="alertGraphDefinition")
    def alert_graph_definition(self) -> Optional['outputs.DashboardWidgetAlertGraphDefinition']:
        """
        The definition for a Alert Graph widget.
        """
        return pulumi.get(self, "alert_graph_definition")

    @property
    @pulumi.getter(name="alertValueDefinition")
    def alert_value_definition(self) -> Optional['outputs.DashboardWidgetAlertValueDefinition']:
        """
        The definition for a Alert Value widget.
        """
        return pulumi.get(self, "alert_value_definition")

    @property
    @pulumi.getter(name="changeDefinition")
    def change_definition(self) -> Optional['outputs.DashboardWidgetChangeDefinition']:
        """
        The definition for a Change widget.
        """
        return pulumi.get(self, "change_definition")

    @property
    @pulumi.getter(name="checkStatusDefinition")
    def check_status_definition(self) -> Optional['outputs.DashboardWidgetCheckStatusDefinition']:
        """
        The definition for a Check Status widget.
        """
        return pulumi.get(self, "check_status_definition")

    @property
    @pulumi.getter(name="distributionDefinition")
    def distribution_definition(self) -> Optional['outputs.DashboardWidgetDistributionDefinition']:
        """
        The definition for a Distribution widget.
        """
        return pulumi.get(self, "distribution_definition")

    @property
    @pulumi.getter(name="eventStreamDefinition")
    def event_stream_definition(self) -> Optional['outputs.DashboardWidgetEventStreamDefinition']:
        """
        The definition for a Event Stream widget.
        """
        return pulumi.get(self, "event_stream_definition")

    @property
    @pulumi.getter(name="eventTimelineDefinition")
    def event_timeline_definition(self) -> Optional['outputs.DashboardWidgetEventTimelineDefinition']:
        """
        The definition for a Event Timeline widget.
        """
        return pulumi.get(self, "event_timeline_definition")

    @property
    @pulumi.getter(name="freeTextDefinition")
    def free_text_definition(self) -> Optional['outputs.DashboardWidgetFreeTextDefinition']:
        """
        The definition for a Free Text widget.
        """
        return pulumi.get(self, "free_text_definition")

    @property
    @pulumi.getter(name="geomapDefinition")
    def geomap_definition(self) -> Optional['outputs.DashboardWidgetGeomapDefinition']:
        """
        The definition for a Geomap widget.
        """
        return pulumi.get(self, "geomap_definition")

    @property
    @pulumi.getter(name="groupDefinition")
    def group_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinition']:
        """
        The definition for a Group widget.
        """
        return pulumi.get(self, "group_definition")

    @property
    @pulumi.getter(name="heatmapDefinition")
    def heatmap_definition(self) -> Optional['outputs.DashboardWidgetHeatmapDefinition']:
        """
        The definition for a Heatmap widget.
        """
        return pulumi.get(self, "heatmap_definition")

    @property
    @pulumi.getter(name="hostmapDefinition")
    def hostmap_definition(self) -> Optional['outputs.DashboardWidgetHostmapDefinition']:
        """
        The definition for a Hostmap widget.
        """
        return pulumi.get(self, "hostmap_definition")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="iframeDefinition")
    def iframe_definition(self) -> Optional['outputs.DashboardWidgetIframeDefinition']:
        """
        The definition for an Iframe widget.
        """
        return pulumi.get(self, "iframe_definition")

    @property
    @pulumi.getter(name="imageDefinition")
    def image_definition(self) -> Optional['outputs.DashboardWidgetImageDefinition']:
        """
        The definition for an Image widget
        """
        return pulumi.get(self, "image_definition")

    @property
    @pulumi.getter(name="logStreamDefinition")
    def log_stream_definition(self) -> Optional['outputs.DashboardWidgetLogStreamDefinition']:
        """
        The definition for an Log Stream widget.
        """
        return pulumi.get(self, "log_stream_definition")

    @property
    @pulumi.getter(name="manageStatusDefinition")
    def manage_status_definition(self) -> Optional['outputs.DashboardWidgetManageStatusDefinition']:
        """
        The definition for an Manage Status widget.
        """
        return pulumi.get(self, "manage_status_definition")

    @property
    @pulumi.getter(name="noteDefinition")
    def note_definition(self) -> Optional['outputs.DashboardWidgetNoteDefinition']:
        """
        The definition for a Note widget.
        """
        return pulumi.get(self, "note_definition")

    @property
    @pulumi.getter(name="queryTableDefinition")
    def query_table_definition(self) -> Optional['outputs.DashboardWidgetQueryTableDefinition']:
        """
        The definition for a Query Table widget.
        """
        return pulumi.get(self, "query_table_definition")

    @property
    @pulumi.getter(name="queryValueDefinition")
    def query_value_definition(self) -> Optional['outputs.DashboardWidgetQueryValueDefinition']:
        """
        The definition for a Query Value widget.
        """
        return pulumi.get(self, "query_value_definition")

    @property
    @pulumi.getter(name="scatterplotDefinition")
    def scatterplot_definition(self) -> Optional['outputs.DashboardWidgetScatterplotDefinition']:
        """
        The definition for a Scatterplot widget.
        """
        return pulumi.get(self, "scatterplot_definition")

    @property
    @pulumi.getter(name="serviceLevelObjectiveDefinition")
    def service_level_objective_definition(self) -> Optional['outputs.DashboardWidgetServiceLevelObjectiveDefinition']:
        """
        The definition for a Service Level Objective widget.
        """
        return pulumi.get(self, "service_level_objective_definition")

    @property
    @pulumi.getter(name="servicemapDefinition")
    def servicemap_definition(self) -> Optional['outputs.DashboardWidgetServicemapDefinition']:
        """
        The definition for a Service Map widget.
        """
        return pulumi.get(self, "servicemap_definition")

    @property
    @pulumi.getter(name="sunburstDefinition")
    def sunburst_definition(self) -> Optional['outputs.DashboardWidgetSunburstDefinition']:
        """
        The definition for a Sunburst widget.
        """
        return pulumi.get(self, "sunburst_definition")

    @property
    @pulumi.getter(name="timeseriesDefinition")
    def timeseries_definition(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinition']:
        """
        The definition for a Timeseries widget.
        """
        return pulumi.get(self, "timeseries_definition")

    @property
    @pulumi.getter(name="toplistDefinition")
    def toplist_definition(self) -> Optional['outputs.DashboardWidgetToplistDefinition']:
        """
        The definition for a Toplist widget.
        """
        return pulumi.get(self, "toplist_definition")

    @property
    @pulumi.getter(name="traceServiceDefinition")
    def trace_service_definition(self) -> Optional['outputs.DashboardWidgetTraceServiceDefinition']:
        """
        The definition for a Trace Service widget.
        """
        return pulumi.get(self, "trace_service_definition")

    @property
    @pulumi.getter(name="widgetLayout")
    def widget_layout(self) -> Optional['outputs.DashboardWidgetWidgetLayout']:
        """
        The layout of the widget on a 'free' dashboard.
        """
        return pulumi.get(self, "widget_layout")


@pulumi.output_type
class DashboardWidgetAlertGraphDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertId":
            suggest = "alert_id"
        elif key == "vizType":
            suggest = "viz_type"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetAlertGraphDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetAlertGraphDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetAlertGraphDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_id: str,
                 viz_type: str,
                 live_span: Optional[str] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "alert_id", alert_id)
        pulumi.set(__self__, "viz_type", viz_type)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> str:
        return pulumi.get(self, "alert_id")

    @property
    @pulumi.getter(name="vizType")
    def viz_type(self) -> str:
        return pulumi.get(self, "viz_type")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetAlertValueDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertId":
            suggest = "alert_id"
        elif key == "textAlign":
            suggest = "text_align"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetAlertValueDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetAlertValueDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetAlertValueDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_id: str,
                 precision: Optional[int] = None,
                 text_align: Optional[str] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "alert_id", alert_id)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> str:
        return pulumi.get(self, "alert_id")

    @property
    @pulumi.getter
    def precision(self) -> Optional[int]:
        return pulumi.get(self, "precision")

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[str]:
        return pulumi.get(self, "text_align")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")


@pulumi.output_type
class DashboardWidgetChangeDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetChangeDefinitionCustomLink']] = None,
                 live_span: Optional[str] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequest']] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetChangeDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetChangeDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "changeType":
            suggest = "change_type"
        elif key == "compareTo":
            suggest = "compare_to"
        elif key == "increaseGood":
            suggest = "increase_good"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "orderBy":
            suggest = "order_by"
        elif key == "orderDir":
            suggest = "order_dir"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"
        elif key == "showPresent":
            suggest = "show_present"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestApmQuery'] = None,
                 change_type: Optional[str] = None,
                 compare_to: Optional[str] = None,
                 formulas: Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestFormula']] = None,
                 increase_good: Optional[bool] = None,
                 log_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestLogQuery'] = None,
                 order_by: Optional[str] = None,
                 order_dir: Optional[str] = None,
                 process_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestProcessQuery'] = None,
                 q: Optional[str] = None,
                 queries: Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestQuery']] = None,
                 rum_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestSecurityQuery'] = None,
                 show_present: Optional[bool] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if change_type is not None:
            pulumi.set(__self__, "change_type", change_type)
        if compare_to is not None:
            pulumi.set(__self__, "compare_to", compare_to)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if increase_good is not None:
            pulumi.set(__self__, "increase_good", increase_good)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if order_by is not None:
            pulumi.set(__self__, "order_by", order_by)
        if order_dir is not None:
            pulumi.set(__self__, "order_dir", order_dir)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if show_present is not None:
            pulumi.set(__self__, "show_present", show_present)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="changeType")
    def change_type(self) -> Optional[str]:
        return pulumi.get(self, "change_type")

    @property
    @pulumi.getter(name="compareTo")
    def compare_to(self) -> Optional[str]:
        return pulumi.get(self, "compare_to")

    @property
    @pulumi.getter
    def formulas(self) -> Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestFormula']]:
        return pulumi.get(self, "formulas")

    @property
    @pulumi.getter(name="increaseGood")
    def increase_good(self) -> Optional[bool]:
        return pulumi.get(self, "increase_good")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[str]:
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="orderDir")
    def order_dir(self) -> Optional[str]:
        return pulumi.get(self, "order_dir")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestQuery']]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestSecurityQuery']:
        return pulumi.get(self, "security_query")

    @property
    @pulumi.getter(name="showPresent")
    def show_present(self) -> Optional[bool]:
        return pulumi.get(self, "show_present")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequestApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequestApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequestApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequestApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestFormula(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formulaExpression":
            suggest = "formula_expression"
        elif key == "cellDisplayMode":
            suggest = "cell_display_mode"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequestFormula. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequestFormula.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequestFormula.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 formula_expression: str,
                 alias: Optional[str] = None,
                 cell_display_mode: Optional[str] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestFormulaConditionalFormat']] = None,
                 limit: Optional['outputs.DashboardWidgetChangeDefinitionRequestFormulaLimit'] = None):
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> str:
        return pulumi.get(self, "formula_expression")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[str]:
        return pulumi.get(self, "cell_display_mode")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestFormulaConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestFormulaLimit']:
        return pulumi.get(self, "limit")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestFormulaConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequestFormulaConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestFormulaLimit(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 order: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequestProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequestProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequestProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmDependencyStatsQuery":
            suggest = "apm_dependency_stats_query"
        elif key == "apmResourceStatsQuery":
            suggest = "apm_resource_stats_query"
        elif key == "eventQuery":
            suggest = "event_query"
        elif key == "metricQuery":
            suggest = "metric_query"
        elif key == "processQuery":
            suggest = "process_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequestQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequestQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequestQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery'] = None,
                 apm_resource_stats_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestQueryApmResourceStatsQuery'] = None,
                 event_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestQueryEventQuery'] = None,
                 metric_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestQueryMetricQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestQueryProcessQuery'] = None):
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery']:
        return pulumi.get(self, "apm_dependency_stats_query")

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestQueryApmResourceStatsQuery']:
        return pulumi.get(self, "apm_resource_stats_query")

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestQueryEventQuery']:
        return pulumi.get(self, "event_query")

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestQueryMetricQuery']:
        return pulumi.get(self, "metric_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestQueryProcessQuery']:
        return pulumi.get(self, "process_query")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "isUpstream":
            suggest = "is_upstream"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 operation_name: str,
                 resource_name: str,
                 service: str,
                 stat: str,
                 is_upstream: Optional[bool] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> str:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "is_upstream")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestQueryApmResourceStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequestQueryApmResourceStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 service: str,
                 stat: str,
                 group_bies: Optional[Sequence[str]] = None,
                 operation_name: Optional[str] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None,
                 resource_name: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestQueryEventQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequestQueryEventQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Sequence['outputs.DashboardWidgetChangeDefinitionRequestQueryEventQueryCompute'],
                 data_source: str,
                 name: str,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBy']] = None,
                 indexes: Optional[Sequence[str]] = None,
                 search: Optional['outputs.DashboardWidgetChangeDefinitionRequestQueryEventQuerySearch'] = None):
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def computes(self) -> Sequence['outputs.DashboardWidgetChangeDefinitionRequestQueryEventQueryCompute']:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter
    def search(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestQueryEventQuerySearch']:
        return pulumi.get(self, "search")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestQueryEventQueryCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 interval: Optional[int] = None,
                 metric: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBy(dict):
    def __init__(__self__, *,
                 facet: str,
                 limit: Optional[int] = None,
                 sort: Optional['outputs.DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBySort'] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> str:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBySort']:
        return pulumi.get(self, "sort")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBySort(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 metric: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestQueryEventQuerySearch(dict):
    def __init__(__self__, *,
                 query: str):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestQueryMetricQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequestQueryMetricQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 query: str,
                 aggregator: Optional[str] = None,
                 data_source: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[str]:
        return pulumi.get(self, "data_source")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestQueryProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "isNormalizedCpu":
            suggest = "is_normalized_cpu"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "textFilter":
            suggest = "text_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequestQueryProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 metric: str,
                 name: str,
                 aggregator: Optional[str] = None,
                 is_normalized_cpu: Optional[bool] = None,
                 limit: Optional[int] = None,
                 sort: Optional[str] = None,
                 tag_filters: Optional[Sequence[str]] = None,
                 text_filter: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[bool]:
        return pulumi.get(self, "is_normalized_cpu")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[str]:
        return pulumi.get(self, "text_filter")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequestSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequestSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequestSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetChangeDefinitionRequestSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetChangeDefinitionRequestSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetCheckStatusDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupBies":
            suggest = "group_bies"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetCheckStatusDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetCheckStatusDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetCheckStatusDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check: str,
                 grouping: str,
                 group: Optional[str] = None,
                 group_bies: Optional[Sequence[str]] = None,
                 live_span: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "check", check)
        pulumi.set(__self__, "grouping", grouping)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def check(self) -> str:
        return pulumi.get(self, "check")

    @property
    @pulumi.getter
    def grouping(self) -> str:
        return pulumi.get(self, "grouping")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetDistributionDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "legendSize":
            suggest = "legend_size"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "showLegend":
            suggest = "show_legend"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetDistributionDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetDistributionDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetDistributionDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 legend_size: Optional[str] = None,
                 live_span: Optional[str] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequest']] = None,
                 show_legend: Optional[bool] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[str]:
        return pulumi.get(self, "legend_size")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[bool]:
        return pulumi.get(self, "show_legend")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetDistributionDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetDistributionDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetDistributionDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_query: Optional['outputs.DashboardWidgetDistributionDefinitionRequestApmQuery'] = None,
                 log_query: Optional['outputs.DashboardWidgetDistributionDefinitionRequestLogQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetDistributionDefinitionRequestProcessQuery'] = None,
                 q: Optional[str] = None,
                 rum_query: Optional['outputs.DashboardWidgetDistributionDefinitionRequestRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetDistributionDefinitionRequestSecurityQuery'] = None,
                 style: Optional['outputs.DashboardWidgetDistributionDefinitionRequestStyle'] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetDistributionDefinitionRequestApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetDistributionDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetDistributionDefinitionRequestProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetDistributionDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetDistributionDefinitionRequestSecurityQuery']:
        return pulumi.get(self, "security_query")

    @property
    @pulumi.getter
    def style(self) -> Optional['outputs.DashboardWidgetDistributionDefinitionRequestStyle']:
        return pulumi.get(self, "style")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetDistributionDefinitionRequestApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetDistributionDefinitionRequestApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetDistributionDefinitionRequestApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetDistributionDefinitionRequestApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequestApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequestApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetDistributionDefinitionRequestApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequestApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequestApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetDistributionDefinitionRequestApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetDistributionDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetDistributionDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetDistributionDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetDistributionDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetDistributionDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetDistributionDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetDistributionDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetDistributionDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetDistributionDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetDistributionDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetDistributionDefinitionRequestProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetDistributionDefinitionRequestProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetDistributionDefinitionRequestProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetDistributionDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetDistributionDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetDistributionDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetDistributionDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetDistributionDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetDistributionDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetDistributionDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetDistributionDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetDistributionDefinitionRequestSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetDistributionDefinitionRequestSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetDistributionDefinitionRequestSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetDistributionDefinitionRequestStyle(dict):
    def __init__(__self__, *,
                 palette: Optional[str] = None):
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[str]:
        return pulumi.get(self, "palette")


@pulumi.output_type
class DashboardWidgetEventStreamDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventSize":
            suggest = "event_size"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "tagsExecution":
            suggest = "tags_execution"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetEventStreamDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetEventStreamDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetEventStreamDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query: str,
                 event_size: Optional[str] = None,
                 live_span: Optional[str] = None,
                 tags_execution: Optional[str] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "query", query)
        if event_size is not None:
            pulumi.set(__self__, "event_size", event_size)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="eventSize")
    def event_size(self) -> Optional[str]:
        return pulumi.get(self, "event_size")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[str]:
        return pulumi.get(self, "tags_execution")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetEventTimelineDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "liveSpan":
            suggest = "live_span"
        elif key == "tagsExecution":
            suggest = "tags_execution"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetEventTimelineDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetEventTimelineDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetEventTimelineDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query: str,
                 live_span: Optional[str] = None,
                 tags_execution: Optional[str] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "query", query)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[str]:
        return pulumi.get(self, "tags_execution")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetFreeTextDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontSize":
            suggest = "font_size"
        elif key == "textAlign":
            suggest = "text_align"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetFreeTextDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetFreeTextDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetFreeTextDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 text: str,
                 color: Optional[str] = None,
                 font_size: Optional[str] = None,
                 text_align: Optional[str] = None):
        pulumi.set(__self__, "text", text)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[str]:
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[str]:
        return pulumi.get(self, "text_align")


@pulumi.output_type
class DashboardWidgetGeomapDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGeomapDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGeomapDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGeomapDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 view: 'outputs.DashboardWidgetGeomapDefinitionView',
                 custom_links: Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionCustomLink']] = None,
                 live_span: Optional[str] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequest']] = None,
                 style: Optional['outputs.DashboardWidgetGeomapDefinitionStyle'] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "view", view)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def view(self) -> 'outputs.DashboardWidgetGeomapDefinitionView':
        return pulumi.get(self, "view")

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter
    def style(self) -> Optional['outputs.DashboardWidgetGeomapDefinitionStyle']:
        return pulumi.get(self, "style")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGeomapDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGeomapDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGeomapDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logQuery":
            suggest = "log_query"
        elif key == "rumQuery":
            suggest = "rum_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGeomapDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGeomapDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGeomapDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 formulas: Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequestFormula']] = None,
                 log_query: Optional['outputs.DashboardWidgetGeomapDefinitionRequestLogQuery'] = None,
                 q: Optional[str] = None,
                 queries: Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequestQuery']] = None,
                 rum_query: Optional['outputs.DashboardWidgetGeomapDefinitionRequestRumQuery'] = None):
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequestFormula']]:
        return pulumi.get(self, "formulas")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetGeomapDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequestQuery']]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetGeomapDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestFormula(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formulaExpression":
            suggest = "formula_expression"
        elif key == "cellDisplayMode":
            suggest = "cell_display_mode"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGeomapDefinitionRequestFormula. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGeomapDefinitionRequestFormula.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGeomapDefinitionRequestFormula.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 formula_expression: str,
                 alias: Optional[str] = None,
                 cell_display_mode: Optional[str] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequestFormulaConditionalFormat']] = None,
                 limit: Optional['outputs.DashboardWidgetGeomapDefinitionRequestFormulaLimit'] = None):
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> str:
        return pulumi.get(self, "formula_expression")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[str]:
        return pulumi.get(self, "cell_display_mode")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequestFormulaConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.DashboardWidgetGeomapDefinitionRequestFormulaLimit']:
        return pulumi.get(self, "limit")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestFormulaConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGeomapDefinitionRequestFormulaConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGeomapDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGeomapDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestFormulaLimit(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 order: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGeomapDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGeomapDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGeomapDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGeomapDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGeomapDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGeomapDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGeomapDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGeomapDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmDependencyStatsQuery":
            suggest = "apm_dependency_stats_query"
        elif key == "apmResourceStatsQuery":
            suggest = "apm_resource_stats_query"
        elif key == "eventQuery":
            suggest = "event_query"
        elif key == "metricQuery":
            suggest = "metric_query"
        elif key == "processQuery":
            suggest = "process_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGeomapDefinitionRequestQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGeomapDefinitionRequestQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGeomapDefinitionRequestQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional['outputs.DashboardWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery'] = None,
                 apm_resource_stats_query: Optional['outputs.DashboardWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery'] = None,
                 event_query: Optional['outputs.DashboardWidgetGeomapDefinitionRequestQueryEventQuery'] = None,
                 metric_query: Optional['outputs.DashboardWidgetGeomapDefinitionRequestQueryMetricQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGeomapDefinitionRequestQueryProcessQuery'] = None):
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional['outputs.DashboardWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery']:
        return pulumi.get(self, "apm_dependency_stats_query")

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional['outputs.DashboardWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery']:
        return pulumi.get(self, "apm_resource_stats_query")

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional['outputs.DashboardWidgetGeomapDefinitionRequestQueryEventQuery']:
        return pulumi.get(self, "event_query")

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional['outputs.DashboardWidgetGeomapDefinitionRequestQueryMetricQuery']:
        return pulumi.get(self, "metric_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGeomapDefinitionRequestQueryProcessQuery']:
        return pulumi.get(self, "process_query")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "isUpstream":
            suggest = "is_upstream"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 operation_name: str,
                 resource_name: str,
                 service: str,
                 stat: str,
                 is_upstream: Optional[bool] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> str:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "is_upstream")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 service: str,
                 stat: str,
                 group_bies: Optional[Sequence[str]] = None,
                 operation_name: Optional[str] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None,
                 resource_name: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestQueryEventQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGeomapDefinitionRequestQueryEventQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGeomapDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGeomapDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Sequence['outputs.DashboardWidgetGeomapDefinitionRequestQueryEventQueryCompute'],
                 data_source: str,
                 name: str,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBy']] = None,
                 indexes: Optional[Sequence[str]] = None,
                 search: Optional['outputs.DashboardWidgetGeomapDefinitionRequestQueryEventQuerySearch'] = None):
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def computes(self) -> Sequence['outputs.DashboardWidgetGeomapDefinitionRequestQueryEventQueryCompute']:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter
    def search(self) -> Optional['outputs.DashboardWidgetGeomapDefinitionRequestQueryEventQuerySearch']:
        return pulumi.get(self, "search")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestQueryEventQueryCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 interval: Optional[int] = None,
                 metric: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBy(dict):
    def __init__(__self__, *,
                 facet: str,
                 limit: Optional[int] = None,
                 sort: Optional['outputs.DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort'] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> str:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort']:
        return pulumi.get(self, "sort")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 metric: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestQueryEventQuerySearch(dict):
    def __init__(__self__, *,
                 query: str):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestQueryMetricQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGeomapDefinitionRequestQueryMetricQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGeomapDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGeomapDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 query: str,
                 aggregator: Optional[str] = None,
                 data_source: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[str]:
        return pulumi.get(self, "data_source")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestQueryProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "isNormalizedCpu":
            suggest = "is_normalized_cpu"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "textFilter":
            suggest = "text_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGeomapDefinitionRequestQueryProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGeomapDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGeomapDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 metric: str,
                 name: str,
                 aggregator: Optional[str] = None,
                 is_normalized_cpu: Optional[bool] = None,
                 limit: Optional[int] = None,
                 sort: Optional[str] = None,
                 tag_filters: Optional[Sequence[str]] = None,
                 text_filter: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[bool]:
        return pulumi.get(self, "is_normalized_cpu")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[str]:
        return pulumi.get(self, "text_filter")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGeomapDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGeomapDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGeomapDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGeomapDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGeomapDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGeomapDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGeomapDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGeomapDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGeomapDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paletteFlip":
            suggest = "palette_flip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGeomapDefinitionStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGeomapDefinitionStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGeomapDefinitionStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 palette: str,
                 palette_flip: bool):
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "palette_flip", palette_flip)

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter(name="paletteFlip")
    def palette_flip(self) -> bool:
        return pulumi.get(self, "palette_flip")


@pulumi.output_type
class DashboardWidgetGeomapDefinitionView(dict):
    def __init__(__self__, *,
                 focus: str):
        pulumi.set(__self__, "focus", focus)

    @property
    @pulumi.getter
    def focus(self) -> str:
        return pulumi.get(self, "focus")


@pulumi.output_type
class DashboardWidgetGroupDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "layoutType":
            suggest = "layout_type"
        elif key == "backgroundColor":
            suggest = "background_color"
        elif key == "bannerImg":
            suggest = "banner_img"
        elif key == "showTitle":
            suggest = "show_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 layout_type: str,
                 widgets: Sequence['outputs.DashboardWidgetGroupDefinitionWidget'],
                 background_color: Optional[str] = None,
                 banner_img: Optional[str] = None,
                 show_title: Optional[bool] = None,
                 title: Optional[str] = None):
        """
        :param str layout_type: The layout type of the dashboard. Valid values are `ordered`, `free`.
        :param Sequence['DashboardWidgetGroupDefinitionWidgetArgs'] widgets: The list of widgets to display on the dashboard.
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "layout_type", layout_type)
        pulumi.set(__self__, "widgets", widgets)
        if background_color is not None:
            pulumi.set(__self__, "background_color", background_color)
        if banner_img is not None:
            pulumi.set(__self__, "banner_img", banner_img)
        if show_title is not None:
            pulumi.set(__self__, "show_title", show_title)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="layoutType")
    def layout_type(self) -> str:
        """
        The layout type of the dashboard. Valid values are `ordered`, `free`.
        """
        return pulumi.get(self, "layout_type")

    @property
    @pulumi.getter
    def widgets(self) -> Sequence['outputs.DashboardWidgetGroupDefinitionWidget']:
        """
        The list of widgets to display on the dashboard.
        """
        return pulumi.get(self, "widgets")

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[str]:
        return pulumi.get(self, "background_color")

    @property
    @pulumi.getter(name="bannerImg")
    def banner_img(self) -> Optional[str]:
        return pulumi.get(self, "banner_img")

    @property
    @pulumi.getter(name="showTitle")
    def show_title(self) -> Optional[bool]:
        return pulumi.get(self, "show_title")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertGraphDefinition":
            suggest = "alert_graph_definition"
        elif key == "alertValueDefinition":
            suggest = "alert_value_definition"
        elif key == "changeDefinition":
            suggest = "change_definition"
        elif key == "checkStatusDefinition":
            suggest = "check_status_definition"
        elif key == "distributionDefinition":
            suggest = "distribution_definition"
        elif key == "eventStreamDefinition":
            suggest = "event_stream_definition"
        elif key == "eventTimelineDefinition":
            suggest = "event_timeline_definition"
        elif key == "freeTextDefinition":
            suggest = "free_text_definition"
        elif key == "geomapDefinition":
            suggest = "geomap_definition"
        elif key == "heatmapDefinition":
            suggest = "heatmap_definition"
        elif key == "hostmapDefinition":
            suggest = "hostmap_definition"
        elif key == "iframeDefinition":
            suggest = "iframe_definition"
        elif key == "imageDefinition":
            suggest = "image_definition"
        elif key == "logStreamDefinition":
            suggest = "log_stream_definition"
        elif key == "manageStatusDefinition":
            suggest = "manage_status_definition"
        elif key == "noteDefinition":
            suggest = "note_definition"
        elif key == "queryTableDefinition":
            suggest = "query_table_definition"
        elif key == "queryValueDefinition":
            suggest = "query_value_definition"
        elif key == "scatterplotDefinition":
            suggest = "scatterplot_definition"
        elif key == "serviceLevelObjectiveDefinition":
            suggest = "service_level_objective_definition"
        elif key == "servicemapDefinition":
            suggest = "servicemap_definition"
        elif key == "sunburstDefinition":
            suggest = "sunburst_definition"
        elif key == "timeseriesDefinition":
            suggest = "timeseries_definition"
        elif key == "toplistDefinition":
            suggest = "toplist_definition"
        elif key == "traceServiceDefinition":
            suggest = "trace_service_definition"
        elif key == "widgetLayout":
            suggest = "widget_layout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_graph_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetAlertGraphDefinition'] = None,
                 alert_value_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetAlertValueDefinition'] = None,
                 change_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinition'] = None,
                 check_status_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetCheckStatusDefinition'] = None,
                 distribution_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinition'] = None,
                 event_stream_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetEventStreamDefinition'] = None,
                 event_timeline_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetEventTimelineDefinition'] = None,
                 free_text_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetFreeTextDefinition'] = None,
                 geomap_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinition'] = None,
                 heatmap_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinition'] = None,
                 hostmap_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinition'] = None,
                 id: Optional[int] = None,
                 iframe_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetIframeDefinition'] = None,
                 image_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetImageDefinition'] = None,
                 log_stream_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetLogStreamDefinition'] = None,
                 manage_status_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetManageStatusDefinition'] = None,
                 note_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetNoteDefinition'] = None,
                 query_table_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinition'] = None,
                 query_value_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinition'] = None,
                 scatterplot_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinition'] = None,
                 service_level_objective_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition'] = None,
                 servicemap_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetServicemapDefinition'] = None,
                 sunburst_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinition'] = None,
                 timeseries_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinition'] = None,
                 toplist_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinition'] = None,
                 trace_service_definition: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTraceServiceDefinition'] = None,
                 widget_layout: Optional['outputs.DashboardWidgetGroupDefinitionWidgetWidgetLayout'] = None):
        """
        :param 'DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionArgs' alert_graph_definition: The definition for a Alert Graph widget.
        :param 'DashboardWidgetGroupDefinitionWidgetAlertValueDefinitionArgs' alert_value_definition: The definition for a Alert Value widget.
        :param 'DashboardWidgetGroupDefinitionWidgetChangeDefinitionArgs' change_definition: The definition for a Change widget.
        :param 'DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionArgs' check_status_definition: The definition for a Check Status widget.
        :param 'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionArgs' distribution_definition: The definition for a Distribution widget.
        :param 'DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionArgs' event_stream_definition: The definition for a Event Stream widget.
        :param 'DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionArgs' event_timeline_definition: The definition for a Event Timeline widget.
        :param 'DashboardWidgetGroupDefinitionWidgetFreeTextDefinitionArgs' free_text_definition: The definition for a Free Text widget.
        :param 'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionArgs' geomap_definition: The definition for a Geomap widget.
        :param 'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionArgs' heatmap_definition: The definition for a Heatmap widget.
        :param 'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionArgs' hostmap_definition: The definition for a Hostmap widget.
        :param int id: The ID of the widget.
        :param 'DashboardWidgetGroupDefinitionWidgetIframeDefinitionArgs' iframe_definition: The definition for an Iframe widget.
        :param 'DashboardWidgetGroupDefinitionWidgetImageDefinitionArgs' image_definition: The definition for an Image widget
        :param 'DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionArgs' log_stream_definition: The definition for an Log Stream widget.
        :param 'DashboardWidgetGroupDefinitionWidgetManageStatusDefinitionArgs' manage_status_definition: The definition for an Manage Status widget.
        :param 'DashboardWidgetGroupDefinitionWidgetNoteDefinitionArgs' note_definition: The definition for a Note widget.
        :param 'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionArgs' query_table_definition: The definition for a Query Table widget.
        :param 'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs' query_value_definition: The definition for a Query Value widget.
        :param 'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionArgs' scatterplot_definition: The definition for a Scatterplot widget.
        :param 'DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionArgs' service_level_objective_definition: The definition for a Service Level Objective widget.
        :param 'DashboardWidgetGroupDefinitionWidgetServicemapDefinitionArgs' servicemap_definition: The definition for a Service Map widget.
        :param 'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionArgs' sunburst_definition: The definition for a Sunburst widget.
        :param 'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionArgs' timeseries_definition: The definition for a Timeseries widget.
        :param 'DashboardWidgetGroupDefinitionWidgetToplistDefinitionArgs' toplist_definition: The definition for a Toplist widget.
        :param 'DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionArgs' trace_service_definition: The definition for a Trace Service widget.
        :param 'DashboardWidgetGroupDefinitionWidgetWidgetLayoutArgs' widget_layout: The layout of the widget on a 'free' dashboard.
        """
        if alert_graph_definition is not None:
            pulumi.set(__self__, "alert_graph_definition", alert_graph_definition)
        if alert_value_definition is not None:
            pulumi.set(__self__, "alert_value_definition", alert_value_definition)
        if change_definition is not None:
            pulumi.set(__self__, "change_definition", change_definition)
        if check_status_definition is not None:
            pulumi.set(__self__, "check_status_definition", check_status_definition)
        if distribution_definition is not None:
            pulumi.set(__self__, "distribution_definition", distribution_definition)
        if event_stream_definition is not None:
            pulumi.set(__self__, "event_stream_definition", event_stream_definition)
        if event_timeline_definition is not None:
            pulumi.set(__self__, "event_timeline_definition", event_timeline_definition)
        if free_text_definition is not None:
            pulumi.set(__self__, "free_text_definition", free_text_definition)
        if geomap_definition is not None:
            pulumi.set(__self__, "geomap_definition", geomap_definition)
        if heatmap_definition is not None:
            pulumi.set(__self__, "heatmap_definition", heatmap_definition)
        if hostmap_definition is not None:
            pulumi.set(__self__, "hostmap_definition", hostmap_definition)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if iframe_definition is not None:
            pulumi.set(__self__, "iframe_definition", iframe_definition)
        if image_definition is not None:
            pulumi.set(__self__, "image_definition", image_definition)
        if log_stream_definition is not None:
            pulumi.set(__self__, "log_stream_definition", log_stream_definition)
        if manage_status_definition is not None:
            pulumi.set(__self__, "manage_status_definition", manage_status_definition)
        if note_definition is not None:
            pulumi.set(__self__, "note_definition", note_definition)
        if query_table_definition is not None:
            pulumi.set(__self__, "query_table_definition", query_table_definition)
        if query_value_definition is not None:
            pulumi.set(__self__, "query_value_definition", query_value_definition)
        if scatterplot_definition is not None:
            pulumi.set(__self__, "scatterplot_definition", scatterplot_definition)
        if service_level_objective_definition is not None:
            pulumi.set(__self__, "service_level_objective_definition", service_level_objective_definition)
        if servicemap_definition is not None:
            pulumi.set(__self__, "servicemap_definition", servicemap_definition)
        if sunburst_definition is not None:
            pulumi.set(__self__, "sunburst_definition", sunburst_definition)
        if timeseries_definition is not None:
            pulumi.set(__self__, "timeseries_definition", timeseries_definition)
        if toplist_definition is not None:
            pulumi.set(__self__, "toplist_definition", toplist_definition)
        if trace_service_definition is not None:
            pulumi.set(__self__, "trace_service_definition", trace_service_definition)
        if widget_layout is not None:
            pulumi.set(__self__, "widget_layout", widget_layout)

    @property
    @pulumi.getter(name="alertGraphDefinition")
    def alert_graph_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetAlertGraphDefinition']:
        """
        The definition for a Alert Graph widget.
        """
        return pulumi.get(self, "alert_graph_definition")

    @property
    @pulumi.getter(name="alertValueDefinition")
    def alert_value_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetAlertValueDefinition']:
        """
        The definition for a Alert Value widget.
        """
        return pulumi.get(self, "alert_value_definition")

    @property
    @pulumi.getter(name="changeDefinition")
    def change_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinition']:
        """
        The definition for a Change widget.
        """
        return pulumi.get(self, "change_definition")

    @property
    @pulumi.getter(name="checkStatusDefinition")
    def check_status_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetCheckStatusDefinition']:
        """
        The definition for a Check Status widget.
        """
        return pulumi.get(self, "check_status_definition")

    @property
    @pulumi.getter(name="distributionDefinition")
    def distribution_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinition']:
        """
        The definition for a Distribution widget.
        """
        return pulumi.get(self, "distribution_definition")

    @property
    @pulumi.getter(name="eventStreamDefinition")
    def event_stream_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetEventStreamDefinition']:
        """
        The definition for a Event Stream widget.
        """
        return pulumi.get(self, "event_stream_definition")

    @property
    @pulumi.getter(name="eventTimelineDefinition")
    def event_timeline_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetEventTimelineDefinition']:
        """
        The definition for a Event Timeline widget.
        """
        return pulumi.get(self, "event_timeline_definition")

    @property
    @pulumi.getter(name="freeTextDefinition")
    def free_text_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetFreeTextDefinition']:
        """
        The definition for a Free Text widget.
        """
        return pulumi.get(self, "free_text_definition")

    @property
    @pulumi.getter(name="geomapDefinition")
    def geomap_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinition']:
        """
        The definition for a Geomap widget.
        """
        return pulumi.get(self, "geomap_definition")

    @property
    @pulumi.getter(name="heatmapDefinition")
    def heatmap_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinition']:
        """
        The definition for a Heatmap widget.
        """
        return pulumi.get(self, "heatmap_definition")

    @property
    @pulumi.getter(name="hostmapDefinition")
    def hostmap_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinition']:
        """
        The definition for a Hostmap widget.
        """
        return pulumi.get(self, "hostmap_definition")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="iframeDefinition")
    def iframe_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetIframeDefinition']:
        """
        The definition for an Iframe widget.
        """
        return pulumi.get(self, "iframe_definition")

    @property
    @pulumi.getter(name="imageDefinition")
    def image_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetImageDefinition']:
        """
        The definition for an Image widget
        """
        return pulumi.get(self, "image_definition")

    @property
    @pulumi.getter(name="logStreamDefinition")
    def log_stream_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetLogStreamDefinition']:
        """
        The definition for an Log Stream widget.
        """
        return pulumi.get(self, "log_stream_definition")

    @property
    @pulumi.getter(name="manageStatusDefinition")
    def manage_status_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetManageStatusDefinition']:
        """
        The definition for an Manage Status widget.
        """
        return pulumi.get(self, "manage_status_definition")

    @property
    @pulumi.getter(name="noteDefinition")
    def note_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetNoteDefinition']:
        """
        The definition for a Note widget.
        """
        return pulumi.get(self, "note_definition")

    @property
    @pulumi.getter(name="queryTableDefinition")
    def query_table_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinition']:
        """
        The definition for a Query Table widget.
        """
        return pulumi.get(self, "query_table_definition")

    @property
    @pulumi.getter(name="queryValueDefinition")
    def query_value_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinition']:
        """
        The definition for a Query Value widget.
        """
        return pulumi.get(self, "query_value_definition")

    @property
    @pulumi.getter(name="scatterplotDefinition")
    def scatterplot_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinition']:
        """
        The definition for a Scatterplot widget.
        """
        return pulumi.get(self, "scatterplot_definition")

    @property
    @pulumi.getter(name="serviceLevelObjectiveDefinition")
    def service_level_objective_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition']:
        """
        The definition for a Service Level Objective widget.
        """
        return pulumi.get(self, "service_level_objective_definition")

    @property
    @pulumi.getter(name="servicemapDefinition")
    def servicemap_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetServicemapDefinition']:
        """
        The definition for a Service Map widget.
        """
        return pulumi.get(self, "servicemap_definition")

    @property
    @pulumi.getter(name="sunburstDefinition")
    def sunburst_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinition']:
        """
        The definition for a Sunburst widget.
        """
        return pulumi.get(self, "sunburst_definition")

    @property
    @pulumi.getter(name="timeseriesDefinition")
    def timeseries_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinition']:
        """
        The definition for a Timeseries widget.
        """
        return pulumi.get(self, "timeseries_definition")

    @property
    @pulumi.getter(name="toplistDefinition")
    def toplist_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinition']:
        """
        The definition for a Toplist widget.
        """
        return pulumi.get(self, "toplist_definition")

    @property
    @pulumi.getter(name="traceServiceDefinition")
    def trace_service_definition(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTraceServiceDefinition']:
        """
        The definition for a Trace Service widget.
        """
        return pulumi.get(self, "trace_service_definition")

    @property
    @pulumi.getter(name="widgetLayout")
    def widget_layout(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetWidgetLayout']:
        """
        The layout of the widget on a 'free' dashboard.
        """
        return pulumi.get(self, "widget_layout")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetAlertGraphDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertId":
            suggest = "alert_id"
        elif key == "vizType":
            suggest = "viz_type"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetAlertGraphDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetAlertGraphDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetAlertGraphDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_id: str,
                 viz_type: str,
                 live_span: Optional[str] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "alert_id", alert_id)
        pulumi.set(__self__, "viz_type", viz_type)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> str:
        return pulumi.get(self, "alert_id")

    @property
    @pulumi.getter(name="vizType")
    def viz_type(self) -> str:
        return pulumi.get(self, "viz_type")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetAlertValueDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertId":
            suggest = "alert_id"
        elif key == "textAlign":
            suggest = "text_align"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetAlertValueDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetAlertValueDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetAlertValueDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_id: str,
                 precision: Optional[int] = None,
                 text_align: Optional[str] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "alert_id", alert_id)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> str:
        return pulumi.get(self, "alert_id")

    @property
    @pulumi.getter
    def precision(self) -> Optional[int]:
        return pulumi.get(self, "precision")

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[str]:
        return pulumi.get(self, "text_align")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLink']] = None,
                 live_span: Optional[str] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequest']] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "changeType":
            suggest = "change_type"
        elif key == "compareTo":
            suggest = "compare_to"
        elif key == "increaseGood":
            suggest = "increase_good"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "orderBy":
            suggest = "order_by"
        elif key == "orderDir":
            suggest = "order_dir"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"
        elif key == "showPresent":
            suggest = "show_present"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery'] = None,
                 change_type: Optional[str] = None,
                 compare_to: Optional[str] = None,
                 formulas: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormula']] = None,
                 increase_good: Optional[bool] = None,
                 log_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery'] = None,
                 order_by: Optional[str] = None,
                 order_dir: Optional[str] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery'] = None,
                 q: Optional[str] = None,
                 queries: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQuery']] = None,
                 rum_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery'] = None,
                 show_present: Optional[bool] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if change_type is not None:
            pulumi.set(__self__, "change_type", change_type)
        if compare_to is not None:
            pulumi.set(__self__, "compare_to", compare_to)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if increase_good is not None:
            pulumi.set(__self__, "increase_good", increase_good)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if order_by is not None:
            pulumi.set(__self__, "order_by", order_by)
        if order_dir is not None:
            pulumi.set(__self__, "order_dir", order_dir)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if show_present is not None:
            pulumi.set(__self__, "show_present", show_present)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="changeType")
    def change_type(self) -> Optional[str]:
        return pulumi.get(self, "change_type")

    @property
    @pulumi.getter(name="compareTo")
    def compare_to(self) -> Optional[str]:
        return pulumi.get(self, "compare_to")

    @property
    @pulumi.getter
    def formulas(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormula']]:
        return pulumi.get(self, "formulas")

    @property
    @pulumi.getter(name="increaseGood")
    def increase_good(self) -> Optional[bool]:
        return pulumi.get(self, "increase_good")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[str]:
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="orderDir")
    def order_dir(self) -> Optional[str]:
        return pulumi.get(self, "order_dir")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQuery']]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery']:
        return pulumi.get(self, "security_query")

    @property
    @pulumi.getter(name="showPresent")
    def show_present(self) -> Optional[bool]:
        return pulumi.get(self, "show_present")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormula(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formulaExpression":
            suggest = "formula_expression"
        elif key == "cellDisplayMode":
            suggest = "cell_display_mode"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormula. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormula.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormula.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 formula_expression: str,
                 alias: Optional[str] = None,
                 cell_display_mode: Optional[str] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaConditionalFormat']] = None,
                 limit: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit'] = None):
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> str:
        return pulumi.get(self, "formula_expression")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[str]:
        return pulumi.get(self, "cell_display_mode")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit']:
        return pulumi.get(self, "limit")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimit(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 order: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmDependencyStatsQuery":
            suggest = "apm_dependency_stats_query"
        elif key == "apmResourceStatsQuery":
            suggest = "apm_resource_stats_query"
        elif key == "eventQuery":
            suggest = "event_query"
        elif key == "metricQuery":
            suggest = "metric_query"
        elif key == "processQuery":
            suggest = "process_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery'] = None,
                 apm_resource_stats_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery'] = None,
                 event_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery'] = None,
                 metric_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery'] = None):
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery']:
        return pulumi.get(self, "apm_dependency_stats_query")

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery']:
        return pulumi.get(self, "apm_resource_stats_query")

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery']:
        return pulumi.get(self, "event_query")

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery']:
        return pulumi.get(self, "metric_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery']:
        return pulumi.get(self, "process_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "isUpstream":
            suggest = "is_upstream"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 operation_name: str,
                 resource_name: str,
                 service: str,
                 stat: str,
                 is_upstream: Optional[bool] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> str:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "is_upstream")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 service: str,
                 stat: str,
                 group_bies: Optional[Sequence[str]] = None,
                 operation_name: Optional[str] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None,
                 resource_name: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryCompute'],
                 data_source: str,
                 name: str,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBy']] = None,
                 indexes: Optional[Sequence[str]] = None,
                 search: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch'] = None):
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def computes(self) -> Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryCompute']:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter
    def search(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch']:
        return pulumi.get(self, "search")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 interval: Optional[int] = None,
                 metric: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBy(dict):
    def __init__(__self__, *,
                 facet: str,
                 limit: Optional[int] = None,
                 sort: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort'] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> str:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort']:
        return pulumi.get(self, "sort")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySort(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 metric: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearch(dict):
    def __init__(__self__, *,
                 query: str):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 query: str,
                 aggregator: Optional[str] = None,
                 data_source: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[str]:
        return pulumi.get(self, "data_source")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "isNormalizedCpu":
            suggest = "is_normalized_cpu"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "textFilter":
            suggest = "text_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 metric: str,
                 name: str,
                 aggregator: Optional[str] = None,
                 is_normalized_cpu: Optional[bool] = None,
                 limit: Optional[int] = None,
                 sort: Optional[str] = None,
                 tag_filters: Optional[Sequence[str]] = None,
                 text_filter: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[bool]:
        return pulumi.get(self, "is_normalized_cpu")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[str]:
        return pulumi.get(self, "text_filter")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetCheckStatusDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupBies":
            suggest = "group_bies"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetCheckStatusDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetCheckStatusDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetCheckStatusDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check: str,
                 grouping: str,
                 group: Optional[str] = None,
                 group_bies: Optional[Sequence[str]] = None,
                 live_span: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "check", check)
        pulumi.set(__self__, "grouping", grouping)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def check(self) -> str:
        return pulumi.get(self, "check")

    @property
    @pulumi.getter
    def grouping(self) -> str:
        return pulumi.get(self, "grouping")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "legendSize":
            suggest = "legend_size"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "showLegend":
            suggest = "show_legend"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetDistributionDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 legend_size: Optional[str] = None,
                 live_span: Optional[str] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequest']] = None,
                 show_legend: Optional[bool] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[str]:
        return pulumi.get(self, "legend_size")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[bool]:
        return pulumi.get(self, "show_legend")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery'] = None,
                 log_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery'] = None,
                 q: Optional[str] = None,
                 rum_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery'] = None,
                 style: Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle'] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery']:
        return pulumi.get(self, "security_query")

    @property
    @pulumi.getter
    def style(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle']:
        return pulumi.get(self, "style")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle(dict):
    def __init__(__self__, *,
                 palette: Optional[str] = None):
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[str]:
        return pulumi.get(self, "palette")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetEventStreamDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventSize":
            suggest = "event_size"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "tagsExecution":
            suggest = "tags_execution"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetEventStreamDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetEventStreamDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetEventStreamDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query: str,
                 event_size: Optional[str] = None,
                 live_span: Optional[str] = None,
                 tags_execution: Optional[str] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "query", query)
        if event_size is not None:
            pulumi.set(__self__, "event_size", event_size)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="eventSize")
    def event_size(self) -> Optional[str]:
        return pulumi.get(self, "event_size")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[str]:
        return pulumi.get(self, "tags_execution")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetEventTimelineDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "liveSpan":
            suggest = "live_span"
        elif key == "tagsExecution":
            suggest = "tags_execution"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetEventTimelineDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetEventTimelineDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetEventTimelineDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query: str,
                 live_span: Optional[str] = None,
                 tags_execution: Optional[str] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "query", query)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[str]:
        return pulumi.get(self, "tags_execution")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetFreeTextDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontSize":
            suggest = "font_size"
        elif key == "textAlign":
            suggest = "text_align"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetFreeTextDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetFreeTextDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetFreeTextDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 text: str,
                 color: Optional[str] = None,
                 font_size: Optional[str] = None,
                 text_align: Optional[str] = None):
        pulumi.set(__self__, "text", text)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[str]:
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[str]:
        return pulumi.get(self, "text_align")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetGeomapDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 view: 'outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionView',
                 custom_links: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionCustomLink']] = None,
                 live_span: Optional[str] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequest']] = None,
                 style: Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyle'] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "view", view)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def view(self) -> 'outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionView':
        return pulumi.get(self, "view")

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter
    def style(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyle']:
        return pulumi.get(self, "style")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetGeomapDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logQuery":
            suggest = "log_query"
        elif key == "rumQuery":
            suggest = "rum_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 formulas: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormula']] = None,
                 log_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery'] = None,
                 q: Optional[str] = None,
                 queries: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQuery']] = None,
                 rum_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery'] = None):
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormula']]:
        return pulumi.get(self, "formulas")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQuery']]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormula(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formulaExpression":
            suggest = "formula_expression"
        elif key == "cellDisplayMode":
            suggest = "cell_display_mode"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormula. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormula.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormula.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 formula_expression: str,
                 alias: Optional[str] = None,
                 cell_display_mode: Optional[str] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaConditionalFormat']] = None,
                 limit: Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit'] = None):
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> str:
        return pulumi.get(self, "formula_expression")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[str]:
        return pulumi.get(self, "cell_display_mode")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit']:
        return pulumi.get(self, "limit")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimit(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 order: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmDependencyStatsQuery":
            suggest = "apm_dependency_stats_query"
        elif key == "apmResourceStatsQuery":
            suggest = "apm_resource_stats_query"
        elif key == "eventQuery":
            suggest = "event_query"
        elif key == "metricQuery":
            suggest = "metric_query"
        elif key == "processQuery":
            suggest = "process_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery'] = None,
                 apm_resource_stats_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery'] = None,
                 event_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery'] = None,
                 metric_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery'] = None):
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery']:
        return pulumi.get(self, "apm_dependency_stats_query")

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery']:
        return pulumi.get(self, "apm_resource_stats_query")

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery']:
        return pulumi.get(self, "event_query")

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery']:
        return pulumi.get(self, "metric_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery']:
        return pulumi.get(self, "process_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "isUpstream":
            suggest = "is_upstream"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 operation_name: str,
                 resource_name: str,
                 service: str,
                 stat: str,
                 is_upstream: Optional[bool] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> str:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "is_upstream")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 service: str,
                 stat: str,
                 group_bies: Optional[Sequence[str]] = None,
                 operation_name: Optional[str] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None,
                 resource_name: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryCompute'],
                 data_source: str,
                 name: str,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBy']] = None,
                 indexes: Optional[Sequence[str]] = None,
                 search: Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch'] = None):
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def computes(self) -> Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryCompute']:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter
    def search(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch']:
        return pulumi.get(self, "search")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 interval: Optional[int] = None,
                 metric: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBy(dict):
    def __init__(__self__, *,
                 facet: str,
                 limit: Optional[int] = None,
                 sort: Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort'] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> str:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort']:
        return pulumi.get(self, "sort")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySort(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 metric: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearch(dict):
    def __init__(__self__, *,
                 query: str):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 query: str,
                 aggregator: Optional[str] = None,
                 data_source: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[str]:
        return pulumi.get(self, "data_source")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "isNormalizedCpu":
            suggest = "is_normalized_cpu"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "textFilter":
            suggest = "text_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 metric: str,
                 name: str,
                 aggregator: Optional[str] = None,
                 is_normalized_cpu: Optional[bool] = None,
                 limit: Optional[int] = None,
                 sort: Optional[str] = None,
                 tag_filters: Optional[Sequence[str]] = None,
                 text_filter: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[bool]:
        return pulumi.get(self, "is_normalized_cpu")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[str]:
        return pulumi.get(self, "text_filter")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paletteFlip":
            suggest = "palette_flip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 palette: str,
                 palette_flip: bool):
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "palette_flip", palette_flip)

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter(name="paletteFlip")
    def palette_flip(self) -> bool:
        return pulumi.get(self, "palette_flip")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionView(dict):
    def __init__(__self__, *,
                 focus: str):
        pulumi.set(__self__, "focus", focus)

    @property
    @pulumi.getter
    def focus(self) -> str:
        return pulumi.get(self, "focus")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "legendSize":
            suggest = "legend_size"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "showLegend":
            suggest = "show_legend"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHeatmapDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLink']] = None,
                 events: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEvent']] = None,
                 legend_size: Optional[str] = None,
                 live_span: Optional[str] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequest']] = None,
                 show_legend: Optional[bool] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None,
                 yaxis: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis'] = None):
        """
        :param str title: The title of the dashboard.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEvent']]:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[str]:
        return pulumi.get(self, "legend_size")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[bool]:
        return pulumi.get(self, "show_legend")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")

    @property
    @pulumi.getter
    def yaxis(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis']:
        return pulumi.get(self, "yaxis")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEvent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagsExecution":
            suggest = "tags_execution"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEvent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEvent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEvent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 q: str,
                 tags_execution: Optional[str] = None):
        pulumi.set(__self__, "q", q)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)

    @property
    @pulumi.getter
    def q(self) -> str:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[str]:
        return pulumi.get(self, "tags_execution")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery'] = None,
                 log_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery'] = None,
                 q: Optional[str] = None,
                 rum_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery'] = None,
                 style: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle'] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery']:
        return pulumi.get(self, "security_query")

    @property
    @pulumi.getter
    def style(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle']:
        return pulumi.get(self, "style")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle(dict):
    def __init__(__self__, *,
                 palette: Optional[str] = None):
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[str]:
        return pulumi.get(self, "palette")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeZero":
            suggest = "include_zero"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 include_zero: Optional[bool] = None,
                 label: Optional[str] = None,
                 max: Optional[str] = None,
                 min: Optional[str] = None,
                 scale: Optional[str] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[bool]:
        return pulumi.get(self, "include_zero")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def max(self) -> Optional[str]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[str]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def scale(self) -> Optional[str]:
        return pulumi.get(self, "scale")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "noGroupHosts":
            suggest = "no_group_hosts"
        elif key == "noMetricHosts":
            suggest = "no_metric_hosts"
        elif key == "nodeType":
            suggest = "node_type"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLink']] = None,
                 groups: Optional[Sequence[str]] = None,
                 no_group_hosts: Optional[bool] = None,
                 no_metric_hosts: Optional[bool] = None,
                 node_type: Optional[str] = None,
                 request: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequest'] = None,
                 scopes: Optional[Sequence[str]] = None,
                 style: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyle'] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if no_group_hosts is not None:
            pulumi.set(__self__, "no_group_hosts", no_group_hosts)
        if no_metric_hosts is not None:
            pulumi.set(__self__, "no_metric_hosts", no_metric_hosts)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="noGroupHosts")
    def no_group_hosts(self) -> Optional[bool]:
        return pulumi.get(self, "no_group_hosts")

    @property
    @pulumi.getter(name="noMetricHosts")
    def no_metric_hosts(self) -> Optional[bool]:
        return pulumi.get(self, "no_metric_hosts")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[str]:
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def request(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequest']:
        return pulumi.get(self, "request")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def style(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyle']:
        return pulumi.get(self, "style")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequest(dict):
    def __init__(__self__, *,
                 fills: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFill']] = None,
                 sizes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSize']] = None):
        if fills is not None:
            pulumi.set(__self__, "fills", fills)
        if sizes is not None:
            pulumi.set(__self__, "sizes", sizes)

    @property
    @pulumi.getter
    def fills(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFill']]:
        return pulumi.get(self, "fills")

    @property
    @pulumi.getter
    def sizes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSize']]:
        return pulumi.get(self, "sizes")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFill(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFill. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFill.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFill.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery'] = None,
                 log_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery'] = None,
                 q: Optional[str] = None,
                 rum_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery'] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery']:
        return pulumi.get(self, "security_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery'] = None,
                 log_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery'] = None,
                 q: Optional[str] = None,
                 rum_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery'] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery']:
        return pulumi.get(self, "security_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fillMax":
            suggest = "fill_max"
        elif key == "fillMin":
            suggest = "fill_min"
        elif key == "paletteFlip":
            suggest = "palette_flip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fill_max: Optional[str] = None,
                 fill_min: Optional[str] = None,
                 palette: Optional[str] = None,
                 palette_flip: Optional[bool] = None):
        if fill_max is not None:
            pulumi.set(__self__, "fill_max", fill_max)
        if fill_min is not None:
            pulumi.set(__self__, "fill_min", fill_min)
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_flip is not None:
            pulumi.set(__self__, "palette_flip", palette_flip)

    @property
    @pulumi.getter(name="fillMax")
    def fill_max(self) -> Optional[str]:
        return pulumi.get(self, "fill_max")

    @property
    @pulumi.getter(name="fillMin")
    def fill_min(self) -> Optional[str]:
        return pulumi.get(self, "fill_min")

    @property
    @pulumi.getter
    def palette(self) -> Optional[str]:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter(name="paletteFlip")
    def palette_flip(self) -> Optional[bool]:
        return pulumi.get(self, "palette_flip")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetIframeDefinition(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: The URL of the dashboard.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL of the dashboard.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetImageDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hasBackground":
            suggest = "has_background"
        elif key == "hasBorder":
            suggest = "has_border"
        elif key == "horizontalAlign":
            suggest = "horizontal_align"
        elif key == "urlDarkTheme":
            suggest = "url_dark_theme"
        elif key == "verticalAlign":
            suggest = "vertical_align"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetImageDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetImageDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetImageDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 has_background: Optional[bool] = None,
                 has_border: Optional[bool] = None,
                 horizontal_align: Optional[str] = None,
                 margin: Optional[str] = None,
                 sizing: Optional[str] = None,
                 url_dark_theme: Optional[str] = None,
                 vertical_align: Optional[str] = None):
        """
        :param str url: The URL of the dashboard.
        """
        pulumi.set(__self__, "url", url)
        if has_background is not None:
            pulumi.set(__self__, "has_background", has_background)
        if has_border is not None:
            pulumi.set(__self__, "has_border", has_border)
        if horizontal_align is not None:
            pulumi.set(__self__, "horizontal_align", horizontal_align)
        if margin is not None:
            pulumi.set(__self__, "margin", margin)
        if sizing is not None:
            pulumi.set(__self__, "sizing", sizing)
        if url_dark_theme is not None:
            pulumi.set(__self__, "url_dark_theme", url_dark_theme)
        if vertical_align is not None:
            pulumi.set(__self__, "vertical_align", vertical_align)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL of the dashboard.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="hasBackground")
    def has_background(self) -> Optional[bool]:
        return pulumi.get(self, "has_background")

    @property
    @pulumi.getter(name="hasBorder")
    def has_border(self) -> Optional[bool]:
        return pulumi.get(self, "has_border")

    @property
    @pulumi.getter(name="horizontalAlign")
    def horizontal_align(self) -> Optional[str]:
        return pulumi.get(self, "horizontal_align")

    @property
    @pulumi.getter
    def margin(self) -> Optional[str]:
        return pulumi.get(self, "margin")

    @property
    @pulumi.getter
    def sizing(self) -> Optional[str]:
        return pulumi.get(self, "sizing")

    @property
    @pulumi.getter(name="urlDarkTheme")
    def url_dark_theme(self) -> Optional[str]:
        return pulumi.get(self, "url_dark_theme")

    @property
    @pulumi.getter(name="verticalAlign")
    def vertical_align(self) -> Optional[str]:
        return pulumi.get(self, "vertical_align")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetLogStreamDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "liveSpan":
            suggest = "live_span"
        elif key == "messageDisplay":
            suggest = "message_display"
        elif key == "showDateColumn":
            suggest = "show_date_column"
        elif key == "showMessageColumn":
            suggest = "show_message_column"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetLogStreamDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetLogStreamDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetLogStreamDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 columns: Optional[Sequence[str]] = None,
                 indexes: Optional[Sequence[str]] = None,
                 live_span: Optional[str] = None,
                 message_display: Optional[str] = None,
                 query: Optional[str] = None,
                 show_date_column: Optional[bool] = None,
                 show_message_column: Optional[bool] = None,
                 sort: Optional['outputs.DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSort'] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if message_display is not None:
            pulumi.set(__self__, "message_display", message_display)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if show_date_column is not None:
            pulumi.set(__self__, "show_date_column", show_date_column)
        if show_message_column is not None:
            pulumi.set(__self__, "show_message_column", show_message_column)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def columns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter(name="messageDisplay")
    def message_display(self) -> Optional[str]:
        return pulumi.get(self, "message_display")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="showDateColumn")
    def show_date_column(self) -> Optional[bool]:
        return pulumi.get(self, "show_date_column")

    @property
    @pulumi.getter(name="showMessageColumn")
    def show_message_column(self) -> Optional[bool]:
        return pulumi.get(self, "show_message_column")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSort']:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSort(dict):
    def __init__(__self__, *,
                 column: str,
                 order: str):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def column(self) -> str:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetManageStatusDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "colorPreference":
            suggest = "color_preference"
        elif key == "displayFormat":
            suggest = "display_format"
        elif key == "hideZeroCounts":
            suggest = "hide_zero_counts"
        elif key == "showLastTriggered":
            suggest = "show_last_triggered"
        elif key == "summaryType":
            suggest = "summary_type"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetManageStatusDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetManageStatusDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetManageStatusDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query: str,
                 color_preference: Optional[str] = None,
                 display_format: Optional[str] = None,
                 hide_zero_counts: Optional[bool] = None,
                 show_last_triggered: Optional[bool] = None,
                 sort: Optional[str] = None,
                 summary_type: Optional[str] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "query", query)
        if color_preference is not None:
            pulumi.set(__self__, "color_preference", color_preference)
        if display_format is not None:
            pulumi.set(__self__, "display_format", display_format)
        if hide_zero_counts is not None:
            pulumi.set(__self__, "hide_zero_counts", hide_zero_counts)
        if show_last_triggered is not None:
            pulumi.set(__self__, "show_last_triggered", show_last_triggered)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if summary_type is not None:
            pulumi.set(__self__, "summary_type", summary_type)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="colorPreference")
    def color_preference(self) -> Optional[str]:
        return pulumi.get(self, "color_preference")

    @property
    @pulumi.getter(name="displayFormat")
    def display_format(self) -> Optional[str]:
        return pulumi.get(self, "display_format")

    @property
    @pulumi.getter(name="hideZeroCounts")
    def hide_zero_counts(self) -> Optional[bool]:
        return pulumi.get(self, "hide_zero_counts")

    @property
    @pulumi.getter(name="showLastTriggered")
    def show_last_triggered(self) -> Optional[bool]:
        return pulumi.get(self, "show_last_triggered")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="summaryType")
    def summary_type(self) -> Optional[str]:
        return pulumi.get(self, "summary_type")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetNoteDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backgroundColor":
            suggest = "background_color"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "hasPadding":
            suggest = "has_padding"
        elif key == "showTick":
            suggest = "show_tick"
        elif key == "textAlign":
            suggest = "text_align"
        elif key == "tickEdge":
            suggest = "tick_edge"
        elif key == "tickPos":
            suggest = "tick_pos"
        elif key == "verticalAlign":
            suggest = "vertical_align"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetNoteDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetNoteDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetNoteDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 background_color: Optional[str] = None,
                 font_size: Optional[str] = None,
                 has_padding: Optional[bool] = None,
                 show_tick: Optional[bool] = None,
                 text_align: Optional[str] = None,
                 tick_edge: Optional[str] = None,
                 tick_pos: Optional[str] = None,
                 vertical_align: Optional[str] = None):
        pulumi.set(__self__, "content", content)
        if background_color is not None:
            pulumi.set(__self__, "background_color", background_color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if has_padding is not None:
            pulumi.set(__self__, "has_padding", has_padding)
        if show_tick is not None:
            pulumi.set(__self__, "show_tick", show_tick)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if tick_edge is not None:
            pulumi.set(__self__, "tick_edge", tick_edge)
        if tick_pos is not None:
            pulumi.set(__self__, "tick_pos", tick_pos)
        if vertical_align is not None:
            pulumi.set(__self__, "vertical_align", vertical_align)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[str]:
        return pulumi.get(self, "background_color")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[str]:
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="hasPadding")
    def has_padding(self) -> Optional[bool]:
        return pulumi.get(self, "has_padding")

    @property
    @pulumi.getter(name="showTick")
    def show_tick(self) -> Optional[bool]:
        return pulumi.get(self, "show_tick")

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[str]:
        return pulumi.get(self, "text_align")

    @property
    @pulumi.getter(name="tickEdge")
    def tick_edge(self) -> Optional[str]:
        return pulumi.get(self, "tick_edge")

    @property
    @pulumi.getter(name="tickPos")
    def tick_pos(self) -> Optional[str]:
        return pulumi.get(self, "tick_pos")

    @property
    @pulumi.getter(name="verticalAlign")
    def vertical_align(self) -> Optional[str]:
        return pulumi.get(self, "vertical_align")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "hasSearchBar":
            suggest = "has_search_bar"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLink']] = None,
                 has_search_bar: Optional[str] = None,
                 live_span: Optional[str] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequest']] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if has_search_bar is not None:
            pulumi.set(__self__, "has_search_bar", has_search_bar)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter(name="hasSearchBar")
    def has_search_bar(self) -> Optional[str]:
        return pulumi.get(self, "has_search_bar")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "apmStatsQuery":
            suggest = "apm_stats_query"
        elif key == "cellDisplayModes":
            suggest = "cell_display_modes"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator: Optional[str] = None,
                 alias: Optional[str] = None,
                 apm_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery'] = None,
                 apm_stats_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery'] = None,
                 cell_display_modes: Optional[Sequence[str]] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormat']] = None,
                 formulas: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormula']] = None,
                 limit: Optional[int] = None,
                 log_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery'] = None,
                 order: Optional[str] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery'] = None,
                 q: Optional[str] = None,
                 queries: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQuery']] = None,
                 rum_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery'] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if apm_stats_query is not None:
            pulumi.set(__self__, "apm_stats_query", apm_stats_query)
        if cell_display_modes is not None:
            pulumi.set(__self__, "cell_display_modes", cell_display_modes)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="apmStatsQuery")
    def apm_stats_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery']:
        return pulumi.get(self, "apm_stats_query")

    @property
    @pulumi.getter(name="cellDisplayModes")
    def cell_display_modes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cell_display_modes")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def formulas(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormula']]:
        return pulumi.get(self, "formulas")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQuery']]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery']:
        return pulumi.get(self, "security_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "primaryTag":
            suggest = "primary_tag"
        elif key == "rowType":
            suggest = "row_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 env: str,
                 name: str,
                 primary_tag: str,
                 row_type: str,
                 service: str,
                 columns: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumn']] = None,
                 resource: Optional[str] = None):
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_tag", primary_tag)
        pulumi.set(__self__, "row_type", row_type)
        pulumi.set(__self__, "service", service)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryTag")
    def primary_tag(self) -> str:
        return pulumi.get(self, "primary_tag")

    @property
    @pulumi.getter(name="rowType")
    def row_type(self) -> str:
        return pulumi.get(self, "row_type")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def columns(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumn']]:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def resource(self) -> Optional[str]:
        return pulumi.get(self, "resource")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cellDisplayMode":
            suggest = "cell_display_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 alias: Optional[str] = None,
                 cell_display_mode: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[str]:
        return pulumi.get(self, "cell_display_mode")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormula(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formulaExpression":
            suggest = "formula_expression"
        elif key == "cellDisplayMode":
            suggest = "cell_display_mode"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormula. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormula.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormula.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 formula_expression: str,
                 alias: Optional[str] = None,
                 cell_display_mode: Optional[str] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaConditionalFormat']] = None,
                 limit: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit'] = None):
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> str:
        return pulumi.get(self, "formula_expression")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[str]:
        return pulumi.get(self, "cell_display_mode")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit']:
        return pulumi.get(self, "limit")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimit(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 order: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmDependencyStatsQuery":
            suggest = "apm_dependency_stats_query"
        elif key == "apmResourceStatsQuery":
            suggest = "apm_resource_stats_query"
        elif key == "eventQuery":
            suggest = "event_query"
        elif key == "metricQuery":
            suggest = "metric_query"
        elif key == "processQuery":
            suggest = "process_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery'] = None,
                 apm_resource_stats_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery'] = None,
                 event_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery'] = None,
                 metric_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery'] = None):
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery']:
        return pulumi.get(self, "apm_dependency_stats_query")

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery']:
        return pulumi.get(self, "apm_resource_stats_query")

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery']:
        return pulumi.get(self, "event_query")

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery']:
        return pulumi.get(self, "metric_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery']:
        return pulumi.get(self, "process_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "isUpstream":
            suggest = "is_upstream"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 operation_name: str,
                 resource_name: str,
                 service: str,
                 stat: str,
                 is_upstream: Optional[bool] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> str:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "is_upstream")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 service: str,
                 stat: str,
                 group_bies: Optional[Sequence[str]] = None,
                 operation_name: Optional[str] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None,
                 resource_name: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryCompute'],
                 data_source: str,
                 name: str,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBy']] = None,
                 indexes: Optional[Sequence[str]] = None,
                 search: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch'] = None):
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def computes(self) -> Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryCompute']:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter
    def search(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch']:
        return pulumi.get(self, "search")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 interval: Optional[int] = None,
                 metric: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBy(dict):
    def __init__(__self__, *,
                 facet: str,
                 limit: Optional[int] = None,
                 sort: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort'] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> str:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort']:
        return pulumi.get(self, "sort")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 metric: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearch(dict):
    def __init__(__self__, *,
                 query: str):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 query: str,
                 aggregator: Optional[str] = None,
                 data_source: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[str]:
        return pulumi.get(self, "data_source")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "isNormalizedCpu":
            suggest = "is_normalized_cpu"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "textFilter":
            suggest = "text_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 metric: str,
                 name: str,
                 aggregator: Optional[str] = None,
                 is_normalized_cpu: Optional[bool] = None,
                 limit: Optional[int] = None,
                 sort: Optional[str] = None,
                 tag_filters: Optional[Sequence[str]] = None,
                 text_filter: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[bool]:
        return pulumi.get(self, "is_normalized_cpu")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[str]:
        return pulumi.get(self, "text_filter")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "customUnit":
            suggest = "custom_unit"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "textAlign":
            suggest = "text_align"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autoscale: Optional[bool] = None,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLink']] = None,
                 custom_unit: Optional[str] = None,
                 live_span: Optional[str] = None,
                 precision: Optional[int] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequest']] = None,
                 text_align: Optional[str] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if custom_unit is not None:
            pulumi.set(__self__, "custom_unit", custom_unit)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[bool]:
        return pulumi.get(self, "autoscale")

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter(name="customUnit")
    def custom_unit(self) -> Optional[str]:
        return pulumi.get(self, "custom_unit")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def precision(self) -> Optional[int]:
        return pulumi.get(self, "precision")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[str]:
        return pulumi.get(self, "text_align")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "auditQuery":
            suggest = "audit_query"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator: Optional[str] = None,
                 apm_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery'] = None,
                 audit_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery'] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormat']] = None,
                 formulas: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormula']] = None,
                 log_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery'] = None,
                 q: Optional[str] = None,
                 queries: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQuery']] = None,
                 rum_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery'] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if audit_query is not None:
            pulumi.set(__self__, "audit_query", audit_query)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="auditQuery")
    def audit_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery']:
        return pulumi.get(self, "audit_query")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def formulas(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormula']]:
        return pulumi.get(self, "formulas")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQuery']]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery']:
        return pulumi.get(self, "security_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormula(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formulaExpression":
            suggest = "formula_expression"
        elif key == "cellDisplayMode":
            suggest = "cell_display_mode"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormula. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormula.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormula.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 formula_expression: str,
                 alias: Optional[str] = None,
                 cell_display_mode: Optional[str] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaConditionalFormat']] = None,
                 limit: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit'] = None):
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> str:
        return pulumi.get(self, "formula_expression")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[str]:
        return pulumi.get(self, "cell_display_mode")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit']:
        return pulumi.get(self, "limit")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimit(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 order: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmDependencyStatsQuery":
            suggest = "apm_dependency_stats_query"
        elif key == "apmResourceStatsQuery":
            suggest = "apm_resource_stats_query"
        elif key == "eventQuery":
            suggest = "event_query"
        elif key == "metricQuery":
            suggest = "metric_query"
        elif key == "processQuery":
            suggest = "process_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery'] = None,
                 apm_resource_stats_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery'] = None,
                 event_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery'] = None,
                 metric_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery'] = None):
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery']:
        return pulumi.get(self, "apm_dependency_stats_query")

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery']:
        return pulumi.get(self, "apm_resource_stats_query")

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery']:
        return pulumi.get(self, "event_query")

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery']:
        return pulumi.get(self, "metric_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery']:
        return pulumi.get(self, "process_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "isUpstream":
            suggest = "is_upstream"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 operation_name: str,
                 resource_name: str,
                 service: str,
                 stat: str,
                 is_upstream: Optional[bool] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> str:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "is_upstream")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 service: str,
                 stat: str,
                 group_bies: Optional[Sequence[str]] = None,
                 operation_name: Optional[str] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None,
                 resource_name: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryCompute'],
                 data_source: str,
                 name: str,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBy']] = None,
                 indexes: Optional[Sequence[str]] = None,
                 search: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch'] = None):
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def computes(self) -> Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryCompute']:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter
    def search(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch']:
        return pulumi.get(self, "search")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 interval: Optional[int] = None,
                 metric: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBy(dict):
    def __init__(__self__, *,
                 facet: str,
                 limit: Optional[int] = None,
                 sort: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort'] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> str:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort']:
        return pulumi.get(self, "sort")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 metric: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearch(dict):
    def __init__(__self__, *,
                 query: str):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 query: str,
                 aggregator: Optional[str] = None,
                 data_source: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[str]:
        return pulumi.get(self, "data_source")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "isNormalizedCpu":
            suggest = "is_normalized_cpu"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "textFilter":
            suggest = "text_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 metric: str,
                 name: str,
                 aggregator: Optional[str] = None,
                 is_normalized_cpu: Optional[bool] = None,
                 limit: Optional[int] = None,
                 sort: Optional[str] = None,
                 tag_filters: Optional[Sequence[str]] = None,
                 text_filter: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[bool]:
        return pulumi.get(self, "is_normalized_cpu")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[str]:
        return pulumi.get(self, "text_filter")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "colorByGroups":
            suggest = "color_by_groups"
        elif key == "customLinks":
            suggest = "custom_links"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color_by_groups: Optional[Sequence[str]] = None,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLink']] = None,
                 live_span: Optional[str] = None,
                 request: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequest'] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None,
                 xaxis: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis'] = None,
                 yaxis: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis'] = None):
        """
        :param str title: The title of the dashboard.
        """
        if color_by_groups is not None:
            pulumi.set(__self__, "color_by_groups", color_by_groups)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if xaxis is not None:
            pulumi.set(__self__, "xaxis", xaxis)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="colorByGroups")
    def color_by_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "color_by_groups")

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def request(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequest']:
        return pulumi.get(self, "request")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")

    @property
    @pulumi.getter
    def xaxis(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis']:
        return pulumi.get(self, "xaxis")

    @property
    @pulumi.getter
    def yaxis(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis']:
        return pulumi.get(self, "yaxis")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scatterplotTables":
            suggest = "scatterplot_tables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scatterplot_tables: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTable']] = None,
                 xes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestX']] = None,
                 ys: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestY']] = None):
        if scatterplot_tables is not None:
            pulumi.set(__self__, "scatterplot_tables", scatterplot_tables)
        if xes is not None:
            pulumi.set(__self__, "xes", xes)
        if ys is not None:
            pulumi.set(__self__, "ys", ys)

    @property
    @pulumi.getter(name="scatterplotTables")
    def scatterplot_tables(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTable']]:
        return pulumi.get(self, "scatterplot_tables")

    @property
    @pulumi.getter
    def xes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestX']]:
        return pulumi.get(self, "xes")

    @property
    @pulumi.getter
    def ys(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestY']]:
        return pulumi.get(self, "ys")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTable(dict):
    def __init__(__self__, *,
                 formulas: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableFormula']] = None,
                 queries: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQuery']] = None):
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableFormula']]:
        return pulumi.get(self, "formulas")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQuery']]:
        return pulumi.get(self, "queries")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableFormula(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formulaExpression":
            suggest = "formula_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableFormula. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableFormula.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableFormula.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimension: str,
                 formula_expression: str,
                 alias: Optional[str] = None):
        pulumi.set(__self__, "dimension", dimension)
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)

    @property
    @pulumi.getter
    def dimension(self) -> str:
        return pulumi.get(self, "dimension")

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> str:
        return pulumi.get(self, "formula_expression")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmDependencyStatsQuery":
            suggest = "apm_dependency_stats_query"
        elif key == "apmResourceStatsQuery":
            suggest = "apm_resource_stats_query"
        elif key == "eventQuery":
            suggest = "event_query"
        elif key == "metricQuery":
            suggest = "metric_query"
        elif key == "processQuery":
            suggest = "process_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery'] = None,
                 apm_resource_stats_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery'] = None,
                 event_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery'] = None,
                 metric_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery'] = None):
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery']:
        return pulumi.get(self, "apm_dependency_stats_query")

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery']:
        return pulumi.get(self, "apm_resource_stats_query")

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery']:
        return pulumi.get(self, "event_query")

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery']:
        return pulumi.get(self, "metric_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery']:
        return pulumi.get(self, "process_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "isUpstream":
            suggest = "is_upstream"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 operation_name: str,
                 resource_name: str,
                 service: str,
                 stat: str,
                 is_upstream: Optional[bool] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> str:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "is_upstream")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 service: str,
                 stat: str,
                 group_bies: Optional[Sequence[str]] = None,
                 operation_name: Optional[str] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None,
                 resource_name: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCompute'],
                 data_source: str,
                 name: str,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBy']] = None,
                 indexes: Optional[Sequence[str]] = None,
                 search: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch'] = None):
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def computes(self) -> Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCompute']:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter
    def search(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch']:
        return pulumi.get(self, "search")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 interval: Optional[int] = None,
                 metric: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBy(dict):
    def __init__(__self__, *,
                 facet: str,
                 limit: Optional[int] = None,
                 sort: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort'] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> str:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort']:
        return pulumi.get(self, "sort")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 metric: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch(dict):
    def __init__(__self__, *,
                 query: str):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 query: str,
                 aggregator: Optional[str] = None,
                 data_source: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[str]:
        return pulumi.get(self, "data_source")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "isNormalizedCpu":
            suggest = "is_normalized_cpu"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "textFilter":
            suggest = "text_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 metric: str,
                 name: str,
                 aggregator: Optional[str] = None,
                 is_normalized_cpu: Optional[bool] = None,
                 limit: Optional[int] = None,
                 sort: Optional[str] = None,
                 tag_filters: Optional[Sequence[str]] = None,
                 text_filter: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[bool]:
        return pulumi.get(self, "is_normalized_cpu")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[str]:
        return pulumi.get(self, "text_filter")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestX(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestX. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestX.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestX.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator: Optional[str] = None,
                 apm_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery'] = None,
                 log_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery'] = None,
                 q: Optional[str] = None,
                 rum_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery'] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery']:
        return pulumi.get(self, "security_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestY(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestY. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestY.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestY.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator: Optional[str] = None,
                 apm_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery'] = None,
                 log_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery'] = None,
                 q: Optional[str] = None,
                 rum_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery'] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery']:
        return pulumi.get(self, "security_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeZero":
            suggest = "include_zero"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 include_zero: Optional[bool] = None,
                 label: Optional[str] = None,
                 max: Optional[str] = None,
                 min: Optional[str] = None,
                 scale: Optional[str] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[bool]:
        return pulumi.get(self, "include_zero")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def max(self) -> Optional[str]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[str]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def scale(self) -> Optional[str]:
        return pulumi.get(self, "scale")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeZero":
            suggest = "include_zero"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 include_zero: Optional[bool] = None,
                 label: Optional[str] = None,
                 max: Optional[str] = None,
                 min: Optional[str] = None,
                 scale: Optional[str] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[bool]:
        return pulumi.get(self, "include_zero")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def max(self) -> Optional[str]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[str]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def scale(self) -> Optional[str]:
        return pulumi.get(self, "scale")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sloId":
            suggest = "slo_id"
        elif key == "timeWindows":
            suggest = "time_windows"
        elif key == "viewMode":
            suggest = "view_mode"
        elif key == "viewType":
            suggest = "view_type"
        elif key == "globalTimeTarget":
            suggest = "global_time_target"
        elif key == "showErrorBudget":
            suggest = "show_error_budget"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 slo_id: str,
                 time_windows: Sequence[str],
                 view_mode: str,
                 view_type: str,
                 global_time_target: Optional[str] = None,
                 show_error_budget: Optional[bool] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "slo_id", slo_id)
        pulumi.set(__self__, "time_windows", time_windows)
        pulumi.set(__self__, "view_mode", view_mode)
        pulumi.set(__self__, "view_type", view_type)
        if global_time_target is not None:
            pulumi.set(__self__, "global_time_target", global_time_target)
        if show_error_budget is not None:
            pulumi.set(__self__, "show_error_budget", show_error_budget)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> str:
        return pulumi.get(self, "slo_id")

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Sequence[str]:
        return pulumi.get(self, "time_windows")

    @property
    @pulumi.getter(name="viewMode")
    def view_mode(self) -> str:
        return pulumi.get(self, "view_mode")

    @property
    @pulumi.getter(name="viewType")
    def view_type(self) -> str:
        return pulumi.get(self, "view_type")

    @property
    @pulumi.getter(name="globalTimeTarget")
    def global_time_target(self) -> Optional[str]:
        return pulumi.get(self, "global_time_target")

    @property
    @pulumi.getter(name="showErrorBudget")
    def show_error_budget(self) -> Optional[bool]:
        return pulumi.get(self, "show_error_budget")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetServicemapDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetServicemapDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetServicemapDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetServicemapDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filters: Sequence[str],
                 service: str,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLink']] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "service", service)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def filters(self) -> Sequence[str]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "hideTotal":
            suggest = "hide_total"
        elif key == "legendInline":
            suggest = "legend_inline"
        elif key == "legendTable":
            suggest = "legend_table"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionCustomLink']] = None,
                 hide_total: Optional[bool] = None,
                 legend_inline: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline'] = None,
                 legend_table: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable'] = None,
                 live_span: Optional[str] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequest']] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if hide_total is not None:
            pulumi.set(__self__, "hide_total", hide_total)
        if legend_inline is not None:
            pulumi.set(__self__, "legend_inline", legend_inline)
        if legend_table is not None:
            pulumi.set(__self__, "legend_table", legend_table)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter(name="hideTotal")
    def hide_total(self) -> Optional[bool]:
        return pulumi.get(self, "hide_total")

    @property
    @pulumi.getter(name="legendInline")
    def legend_inline(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline']:
        return pulumi.get(self, "legend_inline")

    @property
    @pulumi.getter(name="legendTable")
    def legend_table(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable']:
        return pulumi.get(self, "legend_table")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hidePercent":
            suggest = "hide_percent"
        elif key == "hideValue":
            suggest = "hide_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendInline.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 hide_percent: Optional[bool] = None,
                 hide_value: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        if hide_percent is not None:
            pulumi.set(__self__, "hide_percent", hide_percent)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="hidePercent")
    def hide_percent(self) -> Optional[bool]:
        return pulumi.get(self, "hide_percent")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendTable(dict):
    def __init__(__self__, *,
                 type: str):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "auditQuery":
            suggest = "audit_query"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "networkQuery":
            suggest = "network_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery'] = None,
                 audit_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery'] = None,
                 formulas: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormula']] = None,
                 log_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery'] = None,
                 network_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery'] = None,
                 q: Optional[str] = None,
                 queries: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQuery']] = None,
                 rum_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery'] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if audit_query is not None:
            pulumi.set(__self__, "audit_query", audit_query)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if network_query is not None:
            pulumi.set(__self__, "network_query", network_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="auditQuery")
    def audit_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery']:
        return pulumi.get(self, "audit_query")

    @property
    @pulumi.getter
    def formulas(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormula']]:
        return pulumi.get(self, "formulas")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="networkQuery")
    def network_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery']:
        return pulumi.get(self, "network_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQuery']]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery']:
        return pulumi.get(self, "security_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormula(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formulaExpression":
            suggest = "formula_expression"
        elif key == "cellDisplayMode":
            suggest = "cell_display_mode"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormula. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormula.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormula.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 formula_expression: str,
                 alias: Optional[str] = None,
                 cell_display_mode: Optional[str] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaConditionalFormat']] = None,
                 limit: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit'] = None):
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> str:
        return pulumi.get(self, "formula_expression")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[str]:
        return pulumi.get(self, "cell_display_mode")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit']:
        return pulumi.get(self, "limit")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimit(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 order: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmDependencyStatsQuery":
            suggest = "apm_dependency_stats_query"
        elif key == "apmResourceStatsQuery":
            suggest = "apm_resource_stats_query"
        elif key == "eventQuery":
            suggest = "event_query"
        elif key == "metricQuery":
            suggest = "metric_query"
        elif key == "processQuery":
            suggest = "process_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery'] = None,
                 apm_resource_stats_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery'] = None,
                 event_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery'] = None,
                 metric_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery'] = None):
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery']:
        return pulumi.get(self, "apm_dependency_stats_query")

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery']:
        return pulumi.get(self, "apm_resource_stats_query")

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery']:
        return pulumi.get(self, "event_query")

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery']:
        return pulumi.get(self, "metric_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery']:
        return pulumi.get(self, "process_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "isUpstream":
            suggest = "is_upstream"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 operation_name: str,
                 resource_name: str,
                 service: str,
                 stat: str,
                 is_upstream: Optional[bool] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> str:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "is_upstream")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 service: str,
                 stat: str,
                 group_bies: Optional[Sequence[str]] = None,
                 operation_name: Optional[str] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None,
                 resource_name: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryCompute'],
                 data_source: str,
                 name: str,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBy']] = None,
                 indexes: Optional[Sequence[str]] = None,
                 search: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch'] = None):
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def computes(self) -> Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryCompute']:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter
    def search(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch']:
        return pulumi.get(self, "search")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 interval: Optional[int] = None,
                 metric: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBy(dict):
    def __init__(__self__, *,
                 facet: str,
                 limit: Optional[int] = None,
                 sort: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort'] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> str:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort']:
        return pulumi.get(self, "sort")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 metric: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearch(dict):
    def __init__(__self__, *,
                 query: str):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 query: str,
                 aggregator: Optional[str] = None,
                 data_source: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[str]:
        return pulumi.get(self, "data_source")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "isNormalizedCpu":
            suggest = "is_normalized_cpu"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "textFilter":
            suggest = "text_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 metric: str,
                 name: str,
                 aggregator: Optional[str] = None,
                 is_normalized_cpu: Optional[bool] = None,
                 limit: Optional[int] = None,
                 sort: Optional[str] = None,
                 tag_filters: Optional[Sequence[str]] = None,
                 text_filter: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[bool]:
        return pulumi.get(self, "is_normalized_cpu")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[str]:
        return pulumi.get(self, "text_filter")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "legendColumns":
            suggest = "legend_columns"
        elif key == "legendLayout":
            suggest = "legend_layout"
        elif key == "legendSize":
            suggest = "legend_size"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "rightYaxis":
            suggest = "right_yaxis"
        elif key == "showLegend":
            suggest = "show_legend"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLink']] = None,
                 events: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEvent']] = None,
                 legend_columns: Optional[Sequence[str]] = None,
                 legend_layout: Optional[str] = None,
                 legend_size: Optional[str] = None,
                 live_span: Optional[str] = None,
                 markers: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarker']] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequest']] = None,
                 right_yaxis: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis'] = None,
                 show_legend: Optional[bool] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None,
                 yaxis: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis'] = None):
        """
        :param str title: The title of the dashboard.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if legend_columns is not None:
            pulumi.set(__self__, "legend_columns", legend_columns)
        if legend_layout is not None:
            pulumi.set(__self__, "legend_layout", legend_layout)
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if markers is not None:
            pulumi.set(__self__, "markers", markers)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if right_yaxis is not None:
            pulumi.set(__self__, "right_yaxis", right_yaxis)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEvent']]:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="legendColumns")
    def legend_columns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "legend_columns")

    @property
    @pulumi.getter(name="legendLayout")
    def legend_layout(self) -> Optional[str]:
        return pulumi.get(self, "legend_layout")

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[str]:
        return pulumi.get(self, "legend_size")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def markers(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarker']]:
        return pulumi.get(self, "markers")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="rightYaxis")
    def right_yaxis(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis']:
        return pulumi.get(self, "right_yaxis")

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[bool]:
        return pulumi.get(self, "show_legend")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")

    @property
    @pulumi.getter
    def yaxis(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis']:
        return pulumi.get(self, "yaxis")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEvent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagsExecution":
            suggest = "tags_execution"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEvent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEvent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEvent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 q: str,
                 tags_execution: Optional[str] = None):
        pulumi.set(__self__, "q", q)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)

    @property
    @pulumi.getter
    def q(self) -> str:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[str]:
        return pulumi.get(self, "tags_execution")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayType":
            suggest = "display_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 display_type: Optional[str] = None,
                 label: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display_type is not None:
            pulumi.set(__self__, "display_type", display_type)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="displayType")
    def display_type(self) -> Optional[str]:
        return pulumi.get(self, "display_type")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "auditQuery":
            suggest = "audit_query"
        elif key == "displayType":
            suggest = "display_type"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "networkQuery":
            suggest = "network_query"
        elif key == "onRightYaxis":
            suggest = "on_right_yaxis"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery'] = None,
                 audit_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery'] = None,
                 display_type: Optional[str] = None,
                 formulas: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormula']] = None,
                 log_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery'] = None,
                 metadatas: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadata']] = None,
                 network_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery'] = None,
                 on_right_yaxis: Optional[bool] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery'] = None,
                 q: Optional[str] = None,
                 queries: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQuery']] = None,
                 rum_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery'] = None,
                 style: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle'] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if audit_query is not None:
            pulumi.set(__self__, "audit_query", audit_query)
        if display_type is not None:
            pulumi.set(__self__, "display_type", display_type)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if network_query is not None:
            pulumi.set(__self__, "network_query", network_query)
        if on_right_yaxis is not None:
            pulumi.set(__self__, "on_right_yaxis", on_right_yaxis)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="auditQuery")
    def audit_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery']:
        return pulumi.get(self, "audit_query")

    @property
    @pulumi.getter(name="displayType")
    def display_type(self) -> Optional[str]:
        return pulumi.get(self, "display_type")

    @property
    @pulumi.getter
    def formulas(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormula']]:
        return pulumi.get(self, "formulas")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadata']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="networkQuery")
    def network_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery']:
        return pulumi.get(self, "network_query")

    @property
    @pulumi.getter(name="onRightYaxis")
    def on_right_yaxis(self) -> Optional[bool]:
        return pulumi.get(self, "on_right_yaxis")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQuery']]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery']:
        return pulumi.get(self, "security_query")

    @property
    @pulumi.getter
    def style(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle']:
        return pulumi.get(self, "style")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormula(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formulaExpression":
            suggest = "formula_expression"
        elif key == "cellDisplayMode":
            suggest = "cell_display_mode"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormula. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormula.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormula.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 formula_expression: str,
                 alias: Optional[str] = None,
                 cell_display_mode: Optional[str] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaConditionalFormat']] = None,
                 limit: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit'] = None):
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> str:
        return pulumi.get(self, "formula_expression")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[str]:
        return pulumi.get(self, "cell_display_mode")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit']:
        return pulumi.get(self, "limit")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimit(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 order: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aliasName":
            suggest = "alias_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 alias_name: Optional[str] = None):
        pulumi.set(__self__, "expression", expression)
        if alias_name is not None:
            pulumi.set(__self__, "alias_name", alias_name)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="aliasName")
    def alias_name(self) -> Optional[str]:
        return pulumi.get(self, "alias_name")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmDependencyStatsQuery":
            suggest = "apm_dependency_stats_query"
        elif key == "apmResourceStatsQuery":
            suggest = "apm_resource_stats_query"
        elif key == "eventQuery":
            suggest = "event_query"
        elif key == "metricQuery":
            suggest = "metric_query"
        elif key == "processQuery":
            suggest = "process_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery'] = None,
                 apm_resource_stats_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery'] = None,
                 event_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery'] = None,
                 metric_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery'] = None):
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery']:
        return pulumi.get(self, "apm_dependency_stats_query")

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery']:
        return pulumi.get(self, "apm_resource_stats_query")

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery']:
        return pulumi.get(self, "event_query")

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery']:
        return pulumi.get(self, "metric_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery']:
        return pulumi.get(self, "process_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "isUpstream":
            suggest = "is_upstream"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 operation_name: str,
                 resource_name: str,
                 service: str,
                 stat: str,
                 is_upstream: Optional[bool] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> str:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "is_upstream")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 service: str,
                 stat: str,
                 group_bies: Optional[Sequence[str]] = None,
                 operation_name: Optional[str] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None,
                 resource_name: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryCompute'],
                 data_source: str,
                 name: str,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBy']] = None,
                 indexes: Optional[Sequence[str]] = None,
                 search: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch'] = None):
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def computes(self) -> Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryCompute']:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter
    def search(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch']:
        return pulumi.get(self, "search")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 interval: Optional[int] = None,
                 metric: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBy(dict):
    def __init__(__self__, *,
                 facet: str,
                 limit: Optional[int] = None,
                 sort: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort'] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> str:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort']:
        return pulumi.get(self, "sort")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 metric: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearch(dict):
    def __init__(__self__, *,
                 query: str):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 query: str,
                 aggregator: Optional[str] = None,
                 data_source: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[str]:
        return pulumi.get(self, "data_source")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "isNormalizedCpu":
            suggest = "is_normalized_cpu"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "textFilter":
            suggest = "text_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 metric: str,
                 name: str,
                 aggregator: Optional[str] = None,
                 is_normalized_cpu: Optional[bool] = None,
                 limit: Optional[int] = None,
                 sort: Optional[str] = None,
                 tag_filters: Optional[Sequence[str]] = None,
                 text_filter: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[bool]:
        return pulumi.get(self, "is_normalized_cpu")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[str]:
        return pulumi.get(self, "text_filter")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lineType":
            suggest = "line_type"
        elif key == "lineWidth":
            suggest = "line_width"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 line_type: Optional[str] = None,
                 line_width: Optional[str] = None,
                 palette: Optional[str] = None):
        if line_type is not None:
            pulumi.set(__self__, "line_type", line_type)
        if line_width is not None:
            pulumi.set(__self__, "line_width", line_width)
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter(name="lineType")
    def line_type(self) -> Optional[str]:
        return pulumi.get(self, "line_type")

    @property
    @pulumi.getter(name="lineWidth")
    def line_width(self) -> Optional[str]:
        return pulumi.get(self, "line_width")

    @property
    @pulumi.getter
    def palette(self) -> Optional[str]:
        return pulumi.get(self, "palette")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeZero":
            suggest = "include_zero"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 include_zero: Optional[bool] = None,
                 label: Optional[str] = None,
                 max: Optional[str] = None,
                 min: Optional[str] = None,
                 scale: Optional[str] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[bool]:
        return pulumi.get(self, "include_zero")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def max(self) -> Optional[str]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[str]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def scale(self) -> Optional[str]:
        return pulumi.get(self, "scale")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeZero":
            suggest = "include_zero"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 include_zero: Optional[bool] = None,
                 label: Optional[str] = None,
                 max: Optional[str] = None,
                 min: Optional[str] = None,
                 scale: Optional[str] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[bool]:
        return pulumi.get(self, "include_zero")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def max(self) -> Optional[str]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[str]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def scale(self) -> Optional[str]:
        return pulumi.get(self, "scale")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLink']] = None,
                 live_span: Optional[str] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequest']] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "auditQuery":
            suggest = "audit_query"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery'] = None,
                 audit_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery'] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormat']] = None,
                 formulas: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormula']] = None,
                 log_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery'] = None,
                 q: Optional[str] = None,
                 queries: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQuery']] = None,
                 rum_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery'] = None,
                 style: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle'] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if audit_query is not None:
            pulumi.set(__self__, "audit_query", audit_query)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="auditQuery")
    def audit_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery']:
        return pulumi.get(self, "audit_query")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def formulas(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormula']]:
        return pulumi.get(self, "formulas")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQuery']]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery']:
        return pulumi.get(self, "security_query")

    @property
    @pulumi.getter
    def style(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle']:
        return pulumi.get(self, "style")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormula(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formulaExpression":
            suggest = "formula_expression"
        elif key == "cellDisplayMode":
            suggest = "cell_display_mode"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormula. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormula.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormula.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 formula_expression: str,
                 alias: Optional[str] = None,
                 cell_display_mode: Optional[str] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaConditionalFormat']] = None,
                 limit: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit'] = None):
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> str:
        return pulumi.get(self, "formula_expression")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[str]:
        return pulumi.get(self, "cell_display_mode")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit']:
        return pulumi.get(self, "limit")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimit(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 order: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmDependencyStatsQuery":
            suggest = "apm_dependency_stats_query"
        elif key == "apmResourceStatsQuery":
            suggest = "apm_resource_stats_query"
        elif key == "eventQuery":
            suggest = "event_query"
        elif key == "metricQuery":
            suggest = "metric_query"
        elif key == "processQuery":
            suggest = "process_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery'] = None,
                 apm_resource_stats_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery'] = None,
                 event_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery'] = None,
                 metric_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery'] = None):
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery']:
        return pulumi.get(self, "apm_dependency_stats_query")

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery']:
        return pulumi.get(self, "apm_resource_stats_query")

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery']:
        return pulumi.get(self, "event_query")

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery']:
        return pulumi.get(self, "metric_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery']:
        return pulumi.get(self, "process_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "isUpstream":
            suggest = "is_upstream"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 operation_name: str,
                 resource_name: str,
                 service: str,
                 stat: str,
                 is_upstream: Optional[bool] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> str:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "is_upstream")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 service: str,
                 stat: str,
                 group_bies: Optional[Sequence[str]] = None,
                 operation_name: Optional[str] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None,
                 resource_name: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryCompute'],
                 data_source: str,
                 name: str,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBy']] = None,
                 indexes: Optional[Sequence[str]] = None,
                 search: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch'] = None):
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def computes(self) -> Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryCompute']:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter
    def search(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch']:
        return pulumi.get(self, "search")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 interval: Optional[int] = None,
                 metric: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBy(dict):
    def __init__(__self__, *,
                 facet: str,
                 limit: Optional[int] = None,
                 sort: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort'] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> str:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort']:
        return pulumi.get(self, "sort")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySort(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 metric: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearch(dict):
    def __init__(__self__, *,
                 query: str):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 query: str,
                 aggregator: Optional[str] = None,
                 data_source: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[str]:
        return pulumi.get(self, "data_source")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "isNormalizedCpu":
            suggest = "is_normalized_cpu"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "textFilter":
            suggest = "text_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 metric: str,
                 name: str,
                 aggregator: Optional[str] = None,
                 is_normalized_cpu: Optional[bool] = None,
                 limit: Optional[int] = None,
                 sort: Optional[str] = None,
                 tag_filters: Optional[Sequence[str]] = None,
                 text_filter: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[bool]:
        return pulumi.get(self, "is_normalized_cpu")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[str]:
        return pulumi.get(self, "text_filter")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle(dict):
    def __init__(__self__, *,
                 palette: Optional[str] = None):
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[str]:
        return pulumi.get(self, "palette")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetTraceServiceDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "spanName":
            suggest = "span_name"
        elif key == "displayFormat":
            suggest = "display_format"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "showBreakdown":
            suggest = "show_breakdown"
        elif key == "showDistribution":
            suggest = "show_distribution"
        elif key == "showErrors":
            suggest = "show_errors"
        elif key == "showHits":
            suggest = "show_hits"
        elif key == "showLatency":
            suggest = "show_latency"
        elif key == "showResourceList":
            suggest = "show_resource_list"
        elif key == "sizeFormat":
            suggest = "size_format"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetTraceServiceDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetTraceServiceDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetTraceServiceDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 env: str,
                 service: str,
                 span_name: str,
                 display_format: Optional[str] = None,
                 live_span: Optional[str] = None,
                 show_breakdown: Optional[bool] = None,
                 show_distribution: Optional[bool] = None,
                 show_errors: Optional[bool] = None,
                 show_hits: Optional[bool] = None,
                 show_latency: Optional[bool] = None,
                 show_resource_list: Optional[bool] = None,
                 size_format: Optional[str] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "span_name", span_name)
        if display_format is not None:
            pulumi.set(__self__, "display_format", display_format)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if show_breakdown is not None:
            pulumi.set(__self__, "show_breakdown", show_breakdown)
        if show_distribution is not None:
            pulumi.set(__self__, "show_distribution", show_distribution)
        if show_errors is not None:
            pulumi.set(__self__, "show_errors", show_errors)
        if show_hits is not None:
            pulumi.set(__self__, "show_hits", show_hits)
        if show_latency is not None:
            pulumi.set(__self__, "show_latency", show_latency)
        if show_resource_list is not None:
            pulumi.set(__self__, "show_resource_list", show_resource_list)
        if size_format is not None:
            pulumi.set(__self__, "size_format", size_format)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="spanName")
    def span_name(self) -> str:
        return pulumi.get(self, "span_name")

    @property
    @pulumi.getter(name="displayFormat")
    def display_format(self) -> Optional[str]:
        return pulumi.get(self, "display_format")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter(name="showBreakdown")
    def show_breakdown(self) -> Optional[bool]:
        return pulumi.get(self, "show_breakdown")

    @property
    @pulumi.getter(name="showDistribution")
    def show_distribution(self) -> Optional[bool]:
        return pulumi.get(self, "show_distribution")

    @property
    @pulumi.getter(name="showErrors")
    def show_errors(self) -> Optional[bool]:
        return pulumi.get(self, "show_errors")

    @property
    @pulumi.getter(name="showHits")
    def show_hits(self) -> Optional[bool]:
        return pulumi.get(self, "show_hits")

    @property
    @pulumi.getter(name="showLatency")
    def show_latency(self) -> Optional[bool]:
        return pulumi.get(self, "show_latency")

    @property
    @pulumi.getter(name="showResourceList")
    def show_resource_list(self) -> Optional[bool]:
        return pulumi.get(self, "show_resource_list")

    @property
    @pulumi.getter(name="sizeFormat")
    def size_format(self) -> Optional[str]:
        return pulumi.get(self, "size_format")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetGroupDefinitionWidgetWidgetLayout(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isColumnBreak":
            suggest = "is_column_break"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetGroupDefinitionWidgetWidgetLayout. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetGroupDefinitionWidgetWidgetLayout.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetGroupDefinitionWidgetWidgetLayout.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 height: int,
                 width: int,
                 x: int,
                 y: int,
                 is_column_break: Optional[bool] = None):
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "width", width)
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)
        if is_column_break is not None:
            pulumi.set(__self__, "is_column_break", is_column_break)

    @property
    @pulumi.getter
    def height(self) -> int:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def width(self) -> int:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter
    def x(self) -> int:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter
    def y(self) -> int:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="isColumnBreak")
    def is_column_break(self) -> Optional[bool]:
        return pulumi.get(self, "is_column_break")


@pulumi.output_type
class DashboardWidgetHeatmapDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "legendSize":
            suggest = "legend_size"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "showLegend":
            suggest = "show_legend"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHeatmapDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHeatmapDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHeatmapDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionCustomLink']] = None,
                 events: Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionEvent']] = None,
                 legend_size: Optional[str] = None,
                 live_span: Optional[str] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequest']] = None,
                 show_legend: Optional[bool] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None,
                 yaxis: Optional['outputs.DashboardWidgetHeatmapDefinitionYaxis'] = None):
        """
        :param str title: The title of the dashboard.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionEvent']]:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[str]:
        return pulumi.get(self, "legend_size")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[bool]:
        return pulumi.get(self, "show_legend")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")

    @property
    @pulumi.getter
    def yaxis(self) -> Optional['outputs.DashboardWidgetHeatmapDefinitionYaxis']:
        return pulumi.get(self, "yaxis")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHeatmapDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHeatmapDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHeatmapDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionEvent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagsExecution":
            suggest = "tags_execution"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHeatmapDefinitionEvent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHeatmapDefinitionEvent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHeatmapDefinitionEvent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 q: str,
                 tags_execution: Optional[str] = None):
        pulumi.set(__self__, "q", q)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)

    @property
    @pulumi.getter
    def q(self) -> str:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[str]:
        return pulumi.get(self, "tags_execution")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHeatmapDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHeatmapDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHeatmapDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_query: Optional['outputs.DashboardWidgetHeatmapDefinitionRequestApmQuery'] = None,
                 log_query: Optional['outputs.DashboardWidgetHeatmapDefinitionRequestLogQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetHeatmapDefinitionRequestProcessQuery'] = None,
                 q: Optional[str] = None,
                 rum_query: Optional['outputs.DashboardWidgetHeatmapDefinitionRequestRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetHeatmapDefinitionRequestSecurityQuery'] = None,
                 style: Optional['outputs.DashboardWidgetHeatmapDefinitionRequestStyle'] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetHeatmapDefinitionRequestApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetHeatmapDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetHeatmapDefinitionRequestProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetHeatmapDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetHeatmapDefinitionRequestSecurityQuery']:
        return pulumi.get(self, "security_query")

    @property
    @pulumi.getter
    def style(self) -> Optional['outputs.DashboardWidgetHeatmapDefinitionRequestStyle']:
        return pulumi.get(self, "style")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHeatmapDefinitionRequestApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHeatmapDefinitionRequestApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHeatmapDefinitionRequestApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHeatmapDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHeatmapDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHeatmapDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHeatmapDefinitionRequestProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHeatmapDefinitionRequestProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHeatmapDefinitionRequestProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHeatmapDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHeatmapDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHeatmapDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetHeatmapDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetHeatmapDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHeatmapDefinitionRequestSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHeatmapDefinitionRequestSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHeatmapDefinitionRequestSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionRequestStyle(dict):
    def __init__(__self__, *,
                 palette: Optional[str] = None):
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[str]:
        return pulumi.get(self, "palette")


@pulumi.output_type
class DashboardWidgetHeatmapDefinitionYaxis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeZero":
            suggest = "include_zero"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHeatmapDefinitionYaxis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHeatmapDefinitionYaxis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHeatmapDefinitionYaxis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 include_zero: Optional[bool] = None,
                 label: Optional[str] = None,
                 max: Optional[str] = None,
                 min: Optional[str] = None,
                 scale: Optional[str] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[bool]:
        return pulumi.get(self, "include_zero")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def max(self) -> Optional[str]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[str]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def scale(self) -> Optional[str]:
        return pulumi.get(self, "scale")


@pulumi.output_type
class DashboardWidgetHostmapDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "noGroupHosts":
            suggest = "no_group_hosts"
        elif key == "noMetricHosts":
            suggest = "no_metric_hosts"
        elif key == "nodeType":
            suggest = "node_type"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionCustomLink']] = None,
                 groups: Optional[Sequence[str]] = None,
                 no_group_hosts: Optional[bool] = None,
                 no_metric_hosts: Optional[bool] = None,
                 node_type: Optional[str] = None,
                 request: Optional['outputs.DashboardWidgetHostmapDefinitionRequest'] = None,
                 scopes: Optional[Sequence[str]] = None,
                 style: Optional['outputs.DashboardWidgetHostmapDefinitionStyle'] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if no_group_hosts is not None:
            pulumi.set(__self__, "no_group_hosts", no_group_hosts)
        if no_metric_hosts is not None:
            pulumi.set(__self__, "no_metric_hosts", no_metric_hosts)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="noGroupHosts")
    def no_group_hosts(self) -> Optional[bool]:
        return pulumi.get(self, "no_group_hosts")

    @property
    @pulumi.getter(name="noMetricHosts")
    def no_metric_hosts(self) -> Optional[bool]:
        return pulumi.get(self, "no_metric_hosts")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[str]:
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def request(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequest']:
        return pulumi.get(self, "request")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def style(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionStyle']:
        return pulumi.get(self, "style")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequest(dict):
    def __init__(__self__, *,
                 fills: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFill']] = None,
                 sizes: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSize']] = None):
        if fills is not None:
            pulumi.set(__self__, "fills", fills)
        if sizes is not None:
            pulumi.set(__self__, "sizes", sizes)

    @property
    @pulumi.getter
    def fills(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFill']]:
        return pulumi.get(self, "fills")

    @property
    @pulumi.getter
    def sizes(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSize']]:
        return pulumi.get(self, "sizes")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFill(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestFill. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestFill.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestFill.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillApmQuery'] = None,
                 log_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillLogQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillProcessQuery'] = None,
                 q: Optional[str] = None,
                 rum_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQuery'] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQuery']:
        return pulumi.get(self, "security_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestFillApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestFillLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestFillProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestFillRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestFillSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestSize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestSize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestSize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQuery'] = None,
                 log_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeProcessQuery'] = None,
                 q: Optional[str] = None,
                 rum_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQuery'] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQuery']:
        return pulumi.get(self, "security_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestSizeApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestSizeLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestSizeProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestSizeRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestSizeSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetHostmapDefinitionStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fillMax":
            suggest = "fill_max"
        elif key == "fillMin":
            suggest = "fill_min"
        elif key == "paletteFlip":
            suggest = "palette_flip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetHostmapDefinitionStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetHostmapDefinitionStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetHostmapDefinitionStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fill_max: Optional[str] = None,
                 fill_min: Optional[str] = None,
                 palette: Optional[str] = None,
                 palette_flip: Optional[bool] = None):
        if fill_max is not None:
            pulumi.set(__self__, "fill_max", fill_max)
        if fill_min is not None:
            pulumi.set(__self__, "fill_min", fill_min)
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_flip is not None:
            pulumi.set(__self__, "palette_flip", palette_flip)

    @property
    @pulumi.getter(name="fillMax")
    def fill_max(self) -> Optional[str]:
        return pulumi.get(self, "fill_max")

    @property
    @pulumi.getter(name="fillMin")
    def fill_min(self) -> Optional[str]:
        return pulumi.get(self, "fill_min")

    @property
    @pulumi.getter
    def palette(self) -> Optional[str]:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter(name="paletteFlip")
    def palette_flip(self) -> Optional[bool]:
        return pulumi.get(self, "palette_flip")


@pulumi.output_type
class DashboardWidgetIframeDefinition(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: The URL of the dashboard.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL of the dashboard.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class DashboardWidgetImageDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hasBackground":
            suggest = "has_background"
        elif key == "hasBorder":
            suggest = "has_border"
        elif key == "horizontalAlign":
            suggest = "horizontal_align"
        elif key == "urlDarkTheme":
            suggest = "url_dark_theme"
        elif key == "verticalAlign":
            suggest = "vertical_align"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetImageDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetImageDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetImageDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 has_background: Optional[bool] = None,
                 has_border: Optional[bool] = None,
                 horizontal_align: Optional[str] = None,
                 margin: Optional[str] = None,
                 sizing: Optional[str] = None,
                 url_dark_theme: Optional[str] = None,
                 vertical_align: Optional[str] = None):
        """
        :param str url: The URL of the dashboard.
        """
        pulumi.set(__self__, "url", url)
        if has_background is not None:
            pulumi.set(__self__, "has_background", has_background)
        if has_border is not None:
            pulumi.set(__self__, "has_border", has_border)
        if horizontal_align is not None:
            pulumi.set(__self__, "horizontal_align", horizontal_align)
        if margin is not None:
            pulumi.set(__self__, "margin", margin)
        if sizing is not None:
            pulumi.set(__self__, "sizing", sizing)
        if url_dark_theme is not None:
            pulumi.set(__self__, "url_dark_theme", url_dark_theme)
        if vertical_align is not None:
            pulumi.set(__self__, "vertical_align", vertical_align)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL of the dashboard.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="hasBackground")
    def has_background(self) -> Optional[bool]:
        return pulumi.get(self, "has_background")

    @property
    @pulumi.getter(name="hasBorder")
    def has_border(self) -> Optional[bool]:
        return pulumi.get(self, "has_border")

    @property
    @pulumi.getter(name="horizontalAlign")
    def horizontal_align(self) -> Optional[str]:
        return pulumi.get(self, "horizontal_align")

    @property
    @pulumi.getter
    def margin(self) -> Optional[str]:
        return pulumi.get(self, "margin")

    @property
    @pulumi.getter
    def sizing(self) -> Optional[str]:
        return pulumi.get(self, "sizing")

    @property
    @pulumi.getter(name="urlDarkTheme")
    def url_dark_theme(self) -> Optional[str]:
        return pulumi.get(self, "url_dark_theme")

    @property
    @pulumi.getter(name="verticalAlign")
    def vertical_align(self) -> Optional[str]:
        return pulumi.get(self, "vertical_align")


@pulumi.output_type
class DashboardWidgetLogStreamDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "liveSpan":
            suggest = "live_span"
        elif key == "messageDisplay":
            suggest = "message_display"
        elif key == "showDateColumn":
            suggest = "show_date_column"
        elif key == "showMessageColumn":
            suggest = "show_message_column"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetLogStreamDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetLogStreamDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetLogStreamDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 columns: Optional[Sequence[str]] = None,
                 indexes: Optional[Sequence[str]] = None,
                 live_span: Optional[str] = None,
                 message_display: Optional[str] = None,
                 query: Optional[str] = None,
                 show_date_column: Optional[bool] = None,
                 show_message_column: Optional[bool] = None,
                 sort: Optional['outputs.DashboardWidgetLogStreamDefinitionSort'] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if message_display is not None:
            pulumi.set(__self__, "message_display", message_display)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if show_date_column is not None:
            pulumi.set(__self__, "show_date_column", show_date_column)
        if show_message_column is not None:
            pulumi.set(__self__, "show_message_column", show_message_column)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def columns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter(name="messageDisplay")
    def message_display(self) -> Optional[str]:
        return pulumi.get(self, "message_display")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="showDateColumn")
    def show_date_column(self) -> Optional[bool]:
        return pulumi.get(self, "show_date_column")

    @property
    @pulumi.getter(name="showMessageColumn")
    def show_message_column(self) -> Optional[bool]:
        return pulumi.get(self, "show_message_column")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetLogStreamDefinitionSort']:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetLogStreamDefinitionSort(dict):
    def __init__(__self__, *,
                 column: str,
                 order: str):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def column(self) -> str:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetManageStatusDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "colorPreference":
            suggest = "color_preference"
        elif key == "displayFormat":
            suggest = "display_format"
        elif key == "hideZeroCounts":
            suggest = "hide_zero_counts"
        elif key == "showLastTriggered":
            suggest = "show_last_triggered"
        elif key == "summaryType":
            suggest = "summary_type"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetManageStatusDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetManageStatusDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetManageStatusDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query: str,
                 color_preference: Optional[str] = None,
                 display_format: Optional[str] = None,
                 hide_zero_counts: Optional[bool] = None,
                 show_last_triggered: Optional[bool] = None,
                 sort: Optional[str] = None,
                 summary_type: Optional[str] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "query", query)
        if color_preference is not None:
            pulumi.set(__self__, "color_preference", color_preference)
        if display_format is not None:
            pulumi.set(__self__, "display_format", display_format)
        if hide_zero_counts is not None:
            pulumi.set(__self__, "hide_zero_counts", hide_zero_counts)
        if show_last_triggered is not None:
            pulumi.set(__self__, "show_last_triggered", show_last_triggered)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if summary_type is not None:
            pulumi.set(__self__, "summary_type", summary_type)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="colorPreference")
    def color_preference(self) -> Optional[str]:
        return pulumi.get(self, "color_preference")

    @property
    @pulumi.getter(name="displayFormat")
    def display_format(self) -> Optional[str]:
        return pulumi.get(self, "display_format")

    @property
    @pulumi.getter(name="hideZeroCounts")
    def hide_zero_counts(self) -> Optional[bool]:
        return pulumi.get(self, "hide_zero_counts")

    @property
    @pulumi.getter(name="showLastTriggered")
    def show_last_triggered(self) -> Optional[bool]:
        return pulumi.get(self, "show_last_triggered")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="summaryType")
    def summary_type(self) -> Optional[str]:
        return pulumi.get(self, "summary_type")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetNoteDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backgroundColor":
            suggest = "background_color"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "hasPadding":
            suggest = "has_padding"
        elif key == "showTick":
            suggest = "show_tick"
        elif key == "textAlign":
            suggest = "text_align"
        elif key == "tickEdge":
            suggest = "tick_edge"
        elif key == "tickPos":
            suggest = "tick_pos"
        elif key == "verticalAlign":
            suggest = "vertical_align"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetNoteDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetNoteDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetNoteDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 background_color: Optional[str] = None,
                 font_size: Optional[str] = None,
                 has_padding: Optional[bool] = None,
                 show_tick: Optional[bool] = None,
                 text_align: Optional[str] = None,
                 tick_edge: Optional[str] = None,
                 tick_pos: Optional[str] = None,
                 vertical_align: Optional[str] = None):
        pulumi.set(__self__, "content", content)
        if background_color is not None:
            pulumi.set(__self__, "background_color", background_color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if has_padding is not None:
            pulumi.set(__self__, "has_padding", has_padding)
        if show_tick is not None:
            pulumi.set(__self__, "show_tick", show_tick)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if tick_edge is not None:
            pulumi.set(__self__, "tick_edge", tick_edge)
        if tick_pos is not None:
            pulumi.set(__self__, "tick_pos", tick_pos)
        if vertical_align is not None:
            pulumi.set(__self__, "vertical_align", vertical_align)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[str]:
        return pulumi.get(self, "background_color")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[str]:
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="hasPadding")
    def has_padding(self) -> Optional[bool]:
        return pulumi.get(self, "has_padding")

    @property
    @pulumi.getter(name="showTick")
    def show_tick(self) -> Optional[bool]:
        return pulumi.get(self, "show_tick")

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[str]:
        return pulumi.get(self, "text_align")

    @property
    @pulumi.getter(name="tickEdge")
    def tick_edge(self) -> Optional[str]:
        return pulumi.get(self, "tick_edge")

    @property
    @pulumi.getter(name="tickPos")
    def tick_pos(self) -> Optional[str]:
        return pulumi.get(self, "tick_pos")

    @property
    @pulumi.getter(name="verticalAlign")
    def vertical_align(self) -> Optional[str]:
        return pulumi.get(self, "vertical_align")


@pulumi.output_type
class DashboardWidgetQueryTableDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "hasSearchBar":
            suggest = "has_search_bar"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionCustomLink']] = None,
                 has_search_bar: Optional[str] = None,
                 live_span: Optional[str] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequest']] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if has_search_bar is not None:
            pulumi.set(__self__, "has_search_bar", has_search_bar)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter(name="hasSearchBar")
    def has_search_bar(self) -> Optional[str]:
        return pulumi.get(self, "has_search_bar")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "apmStatsQuery":
            suggest = "apm_stats_query"
        elif key == "cellDisplayModes":
            suggest = "cell_display_modes"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator: Optional[str] = None,
                 alias: Optional[str] = None,
                 apm_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestApmQuery'] = None,
                 apm_stats_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestApmStatsQuery'] = None,
                 cell_display_modes: Optional[Sequence[str]] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestConditionalFormat']] = None,
                 formulas: Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestFormula']] = None,
                 limit: Optional[int] = None,
                 log_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestLogQuery'] = None,
                 order: Optional[str] = None,
                 process_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestProcessQuery'] = None,
                 q: Optional[str] = None,
                 queries: Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestQuery']] = None,
                 rum_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestSecurityQuery'] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if apm_stats_query is not None:
            pulumi.set(__self__, "apm_stats_query", apm_stats_query)
        if cell_display_modes is not None:
            pulumi.set(__self__, "cell_display_modes", cell_display_modes)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="apmStatsQuery")
    def apm_stats_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestApmStatsQuery']:
        return pulumi.get(self, "apm_stats_query")

    @property
    @pulumi.getter(name="cellDisplayModes")
    def cell_display_modes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cell_display_modes")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def formulas(self) -> Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestFormula']]:
        return pulumi.get(self, "formulas")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestQuery']]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestSecurityQuery']:
        return pulumi.get(self, "security_query")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestApmStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "primaryTag":
            suggest = "primary_tag"
        elif key == "rowType":
            suggest = "row_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestApmStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestApmStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestApmStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 env: str,
                 name: str,
                 primary_tag: str,
                 row_type: str,
                 service: str,
                 columns: Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumn']] = None,
                 resource: Optional[str] = None):
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_tag", primary_tag)
        pulumi.set(__self__, "row_type", row_type)
        pulumi.set(__self__, "service", service)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryTag")
    def primary_tag(self) -> str:
        return pulumi.get(self, "primary_tag")

    @property
    @pulumi.getter(name="rowType")
    def row_type(self) -> str:
        return pulumi.get(self, "row_type")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def columns(self) -> Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumn']]:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def resource(self) -> Optional[str]:
        return pulumi.get(self, "resource")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cellDisplayMode":
            suggest = "cell_display_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 alias: Optional[str] = None,
                 cell_display_mode: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[str]:
        return pulumi.get(self, "cell_display_mode")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestFormula(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formulaExpression":
            suggest = "formula_expression"
        elif key == "cellDisplayMode":
            suggest = "cell_display_mode"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestFormula. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestFormula.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestFormula.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 formula_expression: str,
                 alias: Optional[str] = None,
                 cell_display_mode: Optional[str] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestFormulaConditionalFormat']] = None,
                 limit: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestFormulaLimit'] = None):
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> str:
        return pulumi.get(self, "formula_expression")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[str]:
        return pulumi.get(self, "cell_display_mode")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestFormulaConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestFormulaLimit']:
        return pulumi.get(self, "limit")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestFormulaConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestFormulaConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestFormulaLimit(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 order: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmDependencyStatsQuery":
            suggest = "apm_dependency_stats_query"
        elif key == "apmResourceStatsQuery":
            suggest = "apm_resource_stats_query"
        elif key == "eventQuery":
            suggest = "event_query"
        elif key == "metricQuery":
            suggest = "metric_query"
        elif key == "processQuery":
            suggest = "process_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery'] = None,
                 apm_resource_stats_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery'] = None,
                 event_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestQueryEventQuery'] = None,
                 metric_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestQueryMetricQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestQueryProcessQuery'] = None):
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery']:
        return pulumi.get(self, "apm_dependency_stats_query")

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery']:
        return pulumi.get(self, "apm_resource_stats_query")

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestQueryEventQuery']:
        return pulumi.get(self, "event_query")

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestQueryMetricQuery']:
        return pulumi.get(self, "metric_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestQueryProcessQuery']:
        return pulumi.get(self, "process_query")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "isUpstream":
            suggest = "is_upstream"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 operation_name: str,
                 resource_name: str,
                 service: str,
                 stat: str,
                 is_upstream: Optional[bool] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> str:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "is_upstream")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 service: str,
                 stat: str,
                 group_bies: Optional[Sequence[str]] = None,
                 operation_name: Optional[str] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None,
                 resource_name: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestQueryEventQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestQueryEventQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestQueryEventQueryCompute'],
                 data_source: str,
                 name: str,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBy']] = None,
                 indexes: Optional[Sequence[str]] = None,
                 search: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestQueryEventQuerySearch'] = None):
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def computes(self) -> Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestQueryEventQueryCompute']:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter
    def search(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestQueryEventQuerySearch']:
        return pulumi.get(self, "search")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestQueryEventQueryCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 interval: Optional[int] = None,
                 metric: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBy(dict):
    def __init__(__self__, *,
                 facet: str,
                 limit: Optional[int] = None,
                 sort: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort'] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> str:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort']:
        return pulumi.get(self, "sort")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySort(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 metric: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestQueryEventQuerySearch(dict):
    def __init__(__self__, *,
                 query: str):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestQueryMetricQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestQueryMetricQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 query: str,
                 aggregator: Optional[str] = None,
                 data_source: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[str]:
        return pulumi.get(self, "data_source")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestQueryProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "isNormalizedCpu":
            suggest = "is_normalized_cpu"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "textFilter":
            suggest = "text_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestQueryProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 metric: str,
                 name: str,
                 aggregator: Optional[str] = None,
                 is_normalized_cpu: Optional[bool] = None,
                 limit: Optional[int] = None,
                 sort: Optional[str] = None,
                 tag_filters: Optional[Sequence[str]] = None,
                 text_filter: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[bool]:
        return pulumi.get(self, "is_normalized_cpu")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[str]:
        return pulumi.get(self, "text_filter")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetQueryValueDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "customUnit":
            suggest = "custom_unit"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "textAlign":
            suggest = "text_align"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autoscale: Optional[bool] = None,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionCustomLink']] = None,
                 custom_unit: Optional[str] = None,
                 live_span: Optional[str] = None,
                 precision: Optional[int] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequest']] = None,
                 text_align: Optional[str] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if custom_unit is not None:
            pulumi.set(__self__, "custom_unit", custom_unit)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[bool]:
        return pulumi.get(self, "autoscale")

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter(name="customUnit")
    def custom_unit(self) -> Optional[str]:
        return pulumi.get(self, "custom_unit")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def precision(self) -> Optional[int]:
        return pulumi.get(self, "precision")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[str]:
        return pulumi.get(self, "text_align")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "auditQuery":
            suggest = "audit_query"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator: Optional[str] = None,
                 apm_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestApmQuery'] = None,
                 audit_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestAuditQuery'] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestConditionalFormat']] = None,
                 formulas: Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestFormula']] = None,
                 log_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestLogQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestProcessQuery'] = None,
                 q: Optional[str] = None,
                 queries: Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestQuery']] = None,
                 rum_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestSecurityQuery'] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if audit_query is not None:
            pulumi.set(__self__, "audit_query", audit_query)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="auditQuery")
    def audit_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestAuditQuery']:
        return pulumi.get(self, "audit_query")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def formulas(self) -> Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestFormula']]:
        return pulumi.get(self, "formulas")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestQuery']]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestSecurityQuery']:
        return pulumi.get(self, "security_query")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestAuditQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestAuditQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestAuditQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestAuditQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestAuditQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestAuditQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestAuditQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestAuditQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestAuditQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestAuditQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestFormula(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formulaExpression":
            suggest = "formula_expression"
        elif key == "cellDisplayMode":
            suggest = "cell_display_mode"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestFormula. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestFormula.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestFormula.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 formula_expression: str,
                 alias: Optional[str] = None,
                 cell_display_mode: Optional[str] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormat']] = None,
                 limit: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestFormulaLimit'] = None):
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> str:
        return pulumi.get(self, "formula_expression")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[str]:
        return pulumi.get(self, "cell_display_mode")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestFormulaLimit']:
        return pulumi.get(self, "limit")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestFormulaLimit(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 order: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmDependencyStatsQuery":
            suggest = "apm_dependency_stats_query"
        elif key == "apmResourceStatsQuery":
            suggest = "apm_resource_stats_query"
        elif key == "eventQuery":
            suggest = "event_query"
        elif key == "metricQuery":
            suggest = "metric_query"
        elif key == "processQuery":
            suggest = "process_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery'] = None,
                 apm_resource_stats_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery'] = None,
                 event_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQuery'] = None,
                 metric_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestQueryMetricQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestQueryProcessQuery'] = None):
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery']:
        return pulumi.get(self, "apm_dependency_stats_query")

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery']:
        return pulumi.get(self, "apm_resource_stats_query")

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQuery']:
        return pulumi.get(self, "event_query")

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestQueryMetricQuery']:
        return pulumi.get(self, "metric_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestQueryProcessQuery']:
        return pulumi.get(self, "process_query")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "isUpstream":
            suggest = "is_upstream"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 operation_name: str,
                 resource_name: str,
                 service: str,
                 stat: str,
                 is_upstream: Optional[bool] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> str:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "is_upstream")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 service: str,
                 stat: str,
                 group_bies: Optional[Sequence[str]] = None,
                 operation_name: Optional[str] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None,
                 resource_name: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestQueryEventQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestQueryEventQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQueryCompute'],
                 data_source: str,
                 name: str,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBy']] = None,
                 indexes: Optional[Sequence[str]] = None,
                 search: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQuerySearch'] = None):
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def computes(self) -> Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQueryCompute']:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter
    def search(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQuerySearch']:
        return pulumi.get(self, "search")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestQueryEventQueryCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 interval: Optional[int] = None,
                 metric: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBy(dict):
    def __init__(__self__, *,
                 facet: str,
                 limit: Optional[int] = None,
                 sort: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort'] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> str:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort']:
        return pulumi.get(self, "sort")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySort(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 metric: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestQueryEventQuerySearch(dict):
    def __init__(__self__, *,
                 query: str):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestQueryMetricQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestQueryMetricQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 query: str,
                 aggregator: Optional[str] = None,
                 data_source: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[str]:
        return pulumi.get(self, "data_source")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestQueryProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "isNormalizedCpu":
            suggest = "is_normalized_cpu"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "textFilter":
            suggest = "text_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestQueryProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 metric: str,
                 name: str,
                 aggregator: Optional[str] = None,
                 is_normalized_cpu: Optional[bool] = None,
                 limit: Optional[int] = None,
                 sort: Optional[str] = None,
                 tag_filters: Optional[Sequence[str]] = None,
                 text_filter: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[bool]:
        return pulumi.get(self, "is_normalized_cpu")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[str]:
        return pulumi.get(self, "text_filter")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetScatterplotDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "colorByGroups":
            suggest = "color_by_groups"
        elif key == "customLinks":
            suggest = "custom_links"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color_by_groups: Optional[Sequence[str]] = None,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionCustomLink']] = None,
                 live_span: Optional[str] = None,
                 request: Optional['outputs.DashboardWidgetScatterplotDefinitionRequest'] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None,
                 xaxis: Optional['outputs.DashboardWidgetScatterplotDefinitionXaxis'] = None,
                 yaxis: Optional['outputs.DashboardWidgetScatterplotDefinitionYaxis'] = None):
        """
        :param str title: The title of the dashboard.
        """
        if color_by_groups is not None:
            pulumi.set(__self__, "color_by_groups", color_by_groups)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if xaxis is not None:
            pulumi.set(__self__, "xaxis", xaxis)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="colorByGroups")
    def color_by_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "color_by_groups")

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def request(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequest']:
        return pulumi.get(self, "request")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")

    @property
    @pulumi.getter
    def xaxis(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionXaxis']:
        return pulumi.get(self, "xaxis")

    @property
    @pulumi.getter
    def yaxis(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionYaxis']:
        return pulumi.get(self, "yaxis")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scatterplotTables":
            suggest = "scatterplot_tables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scatterplot_tables: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTable']] = None,
                 xes: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestX']] = None,
                 ys: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestY']] = None):
        if scatterplot_tables is not None:
            pulumi.set(__self__, "scatterplot_tables", scatterplot_tables)
        if xes is not None:
            pulumi.set(__self__, "xes", xes)
        if ys is not None:
            pulumi.set(__self__, "ys", ys)

    @property
    @pulumi.getter(name="scatterplotTables")
    def scatterplot_tables(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTable']]:
        return pulumi.get(self, "scatterplot_tables")

    @property
    @pulumi.getter
    def xes(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestX']]:
        return pulumi.get(self, "xes")

    @property
    @pulumi.getter
    def ys(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestY']]:
        return pulumi.get(self, "ys")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTable(dict):
    def __init__(__self__, *,
                 formulas: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableFormula']] = None,
                 queries: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuery']] = None):
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableFormula']]:
        return pulumi.get(self, "formulas")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuery']]:
        return pulumi.get(self, "queries")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableFormula(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formulaExpression":
            suggest = "formula_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestScatterplotTableFormula. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestScatterplotTableFormula.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestScatterplotTableFormula.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimension: str,
                 formula_expression: str,
                 alias: Optional[str] = None):
        pulumi.set(__self__, "dimension", dimension)
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)

    @property
    @pulumi.getter
    def dimension(self) -> str:
        return pulumi.get(self, "dimension")

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> str:
        return pulumi.get(self, "formula_expression")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmDependencyStatsQuery":
            suggest = "apm_dependency_stats_query"
        elif key == "apmResourceStatsQuery":
            suggest = "apm_resource_stats_query"
        elif key == "eventQuery":
            suggest = "event_query"
        elif key == "metricQuery":
            suggest = "metric_query"
        elif key == "processQuery":
            suggest = "process_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery'] = None,
                 apm_resource_stats_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery'] = None,
                 event_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery'] = None,
                 metric_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery'] = None):
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery']:
        return pulumi.get(self, "apm_dependency_stats_query")

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery']:
        return pulumi.get(self, "apm_resource_stats_query")

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery']:
        return pulumi.get(self, "event_query")

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery']:
        return pulumi.get(self, "metric_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery']:
        return pulumi.get(self, "process_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "isUpstream":
            suggest = "is_upstream"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 operation_name: str,
                 resource_name: str,
                 service: str,
                 stat: str,
                 is_upstream: Optional[bool] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> str:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "is_upstream")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 service: str,
                 stat: str,
                 group_bies: Optional[Sequence[str]] = None,
                 operation_name: Optional[str] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None,
                 resource_name: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCompute'],
                 data_source: str,
                 name: str,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBy']] = None,
                 indexes: Optional[Sequence[str]] = None,
                 search: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch'] = None):
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def computes(self) -> Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCompute']:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter
    def search(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch']:
        return pulumi.get(self, "search")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 interval: Optional[int] = None,
                 metric: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBy(dict):
    def __init__(__self__, *,
                 facet: str,
                 limit: Optional[int] = None,
                 sort: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort'] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> str:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort']:
        return pulumi.get(self, "sort")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySort(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 metric: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearch(dict):
    def __init__(__self__, *,
                 query: str):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 query: str,
                 aggregator: Optional[str] = None,
                 data_source: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[str]:
        return pulumi.get(self, "data_source")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "isNormalizedCpu":
            suggest = "is_normalized_cpu"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "textFilter":
            suggest = "text_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 metric: str,
                 name: str,
                 aggregator: Optional[str] = None,
                 is_normalized_cpu: Optional[bool] = None,
                 limit: Optional[int] = None,
                 sort: Optional[str] = None,
                 tag_filters: Optional[Sequence[str]] = None,
                 text_filter: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[bool]:
        return pulumi.get(self, "is_normalized_cpu")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[str]:
        return pulumi.get(self, "text_filter")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestX(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestX. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestX.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestX.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator: Optional[str] = None,
                 apm_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXApmQuery'] = None,
                 log_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXLogQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXProcessQuery'] = None,
                 q: Optional[str] = None,
                 rum_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQuery'] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQuery']:
        return pulumi.get(self, "security_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestXApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestXLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestXProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestXRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestXSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestY(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestY. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestY.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestY.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator: Optional[str] = None,
                 apm_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYApmQuery'] = None,
                 log_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYLogQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYProcessQuery'] = None,
                 q: Optional[str] = None,
                 rum_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQuery'] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQuery']:
        return pulumi.get(self, "security_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestYApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestYLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestYProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestYRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestYSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionXaxis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeZero":
            suggest = "include_zero"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionXaxis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionXaxis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionXaxis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 include_zero: Optional[bool] = None,
                 label: Optional[str] = None,
                 max: Optional[str] = None,
                 min: Optional[str] = None,
                 scale: Optional[str] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[bool]:
        return pulumi.get(self, "include_zero")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def max(self) -> Optional[str]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[str]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def scale(self) -> Optional[str]:
        return pulumi.get(self, "scale")


@pulumi.output_type
class DashboardWidgetScatterplotDefinitionYaxis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeZero":
            suggest = "include_zero"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetScatterplotDefinitionYaxis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetScatterplotDefinitionYaxis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetScatterplotDefinitionYaxis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 include_zero: Optional[bool] = None,
                 label: Optional[str] = None,
                 max: Optional[str] = None,
                 min: Optional[str] = None,
                 scale: Optional[str] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[bool]:
        return pulumi.get(self, "include_zero")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def max(self) -> Optional[str]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[str]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def scale(self) -> Optional[str]:
        return pulumi.get(self, "scale")


@pulumi.output_type
class DashboardWidgetServiceLevelObjectiveDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sloId":
            suggest = "slo_id"
        elif key == "timeWindows":
            suggest = "time_windows"
        elif key == "viewMode":
            suggest = "view_mode"
        elif key == "viewType":
            suggest = "view_type"
        elif key == "globalTimeTarget":
            suggest = "global_time_target"
        elif key == "showErrorBudget":
            suggest = "show_error_budget"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetServiceLevelObjectiveDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetServiceLevelObjectiveDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetServiceLevelObjectiveDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 slo_id: str,
                 time_windows: Sequence[str],
                 view_mode: str,
                 view_type: str,
                 global_time_target: Optional[str] = None,
                 show_error_budget: Optional[bool] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "slo_id", slo_id)
        pulumi.set(__self__, "time_windows", time_windows)
        pulumi.set(__self__, "view_mode", view_mode)
        pulumi.set(__self__, "view_type", view_type)
        if global_time_target is not None:
            pulumi.set(__self__, "global_time_target", global_time_target)
        if show_error_budget is not None:
            pulumi.set(__self__, "show_error_budget", show_error_budget)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> str:
        return pulumi.get(self, "slo_id")

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Sequence[str]:
        return pulumi.get(self, "time_windows")

    @property
    @pulumi.getter(name="viewMode")
    def view_mode(self) -> str:
        return pulumi.get(self, "view_mode")

    @property
    @pulumi.getter(name="viewType")
    def view_type(self) -> str:
        return pulumi.get(self, "view_type")

    @property
    @pulumi.getter(name="globalTimeTarget")
    def global_time_target(self) -> Optional[str]:
        return pulumi.get(self, "global_time_target")

    @property
    @pulumi.getter(name="showErrorBudget")
    def show_error_budget(self) -> Optional[bool]:
        return pulumi.get(self, "show_error_budget")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetServicemapDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetServicemapDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetServicemapDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetServicemapDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filters: Sequence[str],
                 service: str,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetServicemapDefinitionCustomLink']] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "service", service)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def filters(self) -> Sequence[str]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetServicemapDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetServicemapDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetServicemapDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetServicemapDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetServicemapDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetSunburstDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "hideTotal":
            suggest = "hide_total"
        elif key == "legendInline":
            suggest = "legend_inline"
        elif key == "legendTable":
            suggest = "legend_table"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionCustomLink']] = None,
                 hide_total: Optional[bool] = None,
                 legend_inline: Optional['outputs.DashboardWidgetSunburstDefinitionLegendInline'] = None,
                 legend_table: Optional['outputs.DashboardWidgetSunburstDefinitionLegendTable'] = None,
                 live_span: Optional[str] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequest']] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if hide_total is not None:
            pulumi.set(__self__, "hide_total", hide_total)
        if legend_inline is not None:
            pulumi.set(__self__, "legend_inline", legend_inline)
        if legend_table is not None:
            pulumi.set(__self__, "legend_table", legend_table)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter(name="hideTotal")
    def hide_total(self) -> Optional[bool]:
        return pulumi.get(self, "hide_total")

    @property
    @pulumi.getter(name="legendInline")
    def legend_inline(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionLegendInline']:
        return pulumi.get(self, "legend_inline")

    @property
    @pulumi.getter(name="legendTable")
    def legend_table(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionLegendTable']:
        return pulumi.get(self, "legend_table")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionLegendInline(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hidePercent":
            suggest = "hide_percent"
        elif key == "hideValue":
            suggest = "hide_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionLegendInline. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionLegendInline.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionLegendInline.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 hide_percent: Optional[bool] = None,
                 hide_value: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        if hide_percent is not None:
            pulumi.set(__self__, "hide_percent", hide_percent)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="hidePercent")
    def hide_percent(self) -> Optional[bool]:
        return pulumi.get(self, "hide_percent")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionLegendTable(dict):
    def __init__(__self__, *,
                 type: str):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "auditQuery":
            suggest = "audit_query"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "networkQuery":
            suggest = "network_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestApmQuery'] = None,
                 audit_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestAuditQuery'] = None,
                 formulas: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestFormula']] = None,
                 log_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestLogQuery'] = None,
                 network_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestNetworkQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestProcessQuery'] = None,
                 q: Optional[str] = None,
                 queries: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestQuery']] = None,
                 rum_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestSecurityQuery'] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if audit_query is not None:
            pulumi.set(__self__, "audit_query", audit_query)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if network_query is not None:
            pulumi.set(__self__, "network_query", network_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="auditQuery")
    def audit_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestAuditQuery']:
        return pulumi.get(self, "audit_query")

    @property
    @pulumi.getter
    def formulas(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestFormula']]:
        return pulumi.get(self, "formulas")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="networkQuery")
    def network_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestNetworkQuery']:
        return pulumi.get(self, "network_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestQuery']]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestSecurityQuery']:
        return pulumi.get(self, "security_query")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestAuditQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestAuditQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestAuditQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestAuditQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestAuditQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestAuditQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestAuditQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestAuditQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestAuditQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestAuditQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestFormula(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formulaExpression":
            suggest = "formula_expression"
        elif key == "cellDisplayMode":
            suggest = "cell_display_mode"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestFormula. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestFormula.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestFormula.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 formula_expression: str,
                 alias: Optional[str] = None,
                 cell_display_mode: Optional[str] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestFormulaConditionalFormat']] = None,
                 limit: Optional['outputs.DashboardWidgetSunburstDefinitionRequestFormulaLimit'] = None):
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> str:
        return pulumi.get(self, "formula_expression")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[str]:
        return pulumi.get(self, "cell_display_mode")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestFormulaConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestFormulaLimit']:
        return pulumi.get(self, "limit")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestFormulaConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestFormulaConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestFormulaLimit(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 order: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestNetworkQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestNetworkQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestNetworkQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestNetworkQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestNetworkQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestNetworkQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestNetworkQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestNetworkQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestNetworkQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestNetworkQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmDependencyStatsQuery":
            suggest = "apm_dependency_stats_query"
        elif key == "apmResourceStatsQuery":
            suggest = "apm_resource_stats_query"
        elif key == "eventQuery":
            suggest = "event_query"
        elif key == "metricQuery":
            suggest = "metric_query"
        elif key == "processQuery":
            suggest = "process_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery'] = None,
                 apm_resource_stats_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery'] = None,
                 event_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestQueryEventQuery'] = None,
                 metric_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestQueryMetricQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestQueryProcessQuery'] = None):
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery']:
        return pulumi.get(self, "apm_dependency_stats_query")

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery']:
        return pulumi.get(self, "apm_resource_stats_query")

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestQueryEventQuery']:
        return pulumi.get(self, "event_query")

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestQueryMetricQuery']:
        return pulumi.get(self, "metric_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestQueryProcessQuery']:
        return pulumi.get(self, "process_query")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "isUpstream":
            suggest = "is_upstream"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 operation_name: str,
                 resource_name: str,
                 service: str,
                 stat: str,
                 is_upstream: Optional[bool] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> str:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "is_upstream")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 service: str,
                 stat: str,
                 group_bies: Optional[Sequence[str]] = None,
                 operation_name: Optional[str] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None,
                 resource_name: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestQueryEventQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestQueryEventQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Sequence['outputs.DashboardWidgetSunburstDefinitionRequestQueryEventQueryCompute'],
                 data_source: str,
                 name: str,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBy']] = None,
                 indexes: Optional[Sequence[str]] = None,
                 search: Optional['outputs.DashboardWidgetSunburstDefinitionRequestQueryEventQuerySearch'] = None):
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def computes(self) -> Sequence['outputs.DashboardWidgetSunburstDefinitionRequestQueryEventQueryCompute']:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter
    def search(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestQueryEventQuerySearch']:
        return pulumi.get(self, "search")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestQueryEventQueryCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 interval: Optional[int] = None,
                 metric: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBy(dict):
    def __init__(__self__, *,
                 facet: str,
                 limit: Optional[int] = None,
                 sort: Optional['outputs.DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort'] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> str:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort']:
        return pulumi.get(self, "sort")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBySort(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 metric: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestQueryEventQuerySearch(dict):
    def __init__(__self__, *,
                 query: str):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestQueryMetricQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestQueryMetricQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 query: str,
                 aggregator: Optional[str] = None,
                 data_source: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[str]:
        return pulumi.get(self, "data_source")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestQueryProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "isNormalizedCpu":
            suggest = "is_normalized_cpu"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "textFilter":
            suggest = "text_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestQueryProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 metric: str,
                 name: str,
                 aggregator: Optional[str] = None,
                 is_normalized_cpu: Optional[bool] = None,
                 limit: Optional[int] = None,
                 sort: Optional[str] = None,
                 tag_filters: Optional[Sequence[str]] = None,
                 text_filter: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[bool]:
        return pulumi.get(self, "is_normalized_cpu")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[str]:
        return pulumi.get(self, "text_filter")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetSunburstDefinitionRequestSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetSunburstDefinitionRequestSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "legendColumns":
            suggest = "legend_columns"
        elif key == "legendLayout":
            suggest = "legend_layout"
        elif key == "legendSize":
            suggest = "legend_size"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "rightYaxis":
            suggest = "right_yaxis"
        elif key == "showLegend":
            suggest = "show_legend"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionCustomLink']] = None,
                 events: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionEvent']] = None,
                 legend_columns: Optional[Sequence[str]] = None,
                 legend_layout: Optional[str] = None,
                 legend_size: Optional[str] = None,
                 live_span: Optional[str] = None,
                 markers: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionMarker']] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequest']] = None,
                 right_yaxis: Optional['outputs.DashboardWidgetTimeseriesDefinitionRightYaxis'] = None,
                 show_legend: Optional[bool] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None,
                 yaxis: Optional['outputs.DashboardWidgetTimeseriesDefinitionYaxis'] = None):
        """
        :param str title: The title of the dashboard.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if legend_columns is not None:
            pulumi.set(__self__, "legend_columns", legend_columns)
        if legend_layout is not None:
            pulumi.set(__self__, "legend_layout", legend_layout)
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if markers is not None:
            pulumi.set(__self__, "markers", markers)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if right_yaxis is not None:
            pulumi.set(__self__, "right_yaxis", right_yaxis)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionEvent']]:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="legendColumns")
    def legend_columns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "legend_columns")

    @property
    @pulumi.getter(name="legendLayout")
    def legend_layout(self) -> Optional[str]:
        return pulumi.get(self, "legend_layout")

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[str]:
        return pulumi.get(self, "legend_size")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def markers(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionMarker']]:
        return pulumi.get(self, "markers")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="rightYaxis")
    def right_yaxis(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRightYaxis']:
        return pulumi.get(self, "right_yaxis")

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[bool]:
        return pulumi.get(self, "show_legend")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")

    @property
    @pulumi.getter
    def yaxis(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionYaxis']:
        return pulumi.get(self, "yaxis")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionEvent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagsExecution":
            suggest = "tags_execution"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionEvent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionEvent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionEvent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 q: str,
                 tags_execution: Optional[str] = None):
        pulumi.set(__self__, "q", q)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)

    @property
    @pulumi.getter
    def q(self) -> str:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[str]:
        return pulumi.get(self, "tags_execution")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionMarker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayType":
            suggest = "display_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionMarker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionMarker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionMarker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 display_type: Optional[str] = None,
                 label: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if display_type is not None:
            pulumi.set(__self__, "display_type", display_type)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="displayType")
    def display_type(self) -> Optional[str]:
        return pulumi.get(self, "display_type")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "auditQuery":
            suggest = "audit_query"
        elif key == "displayType":
            suggest = "display_type"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "networkQuery":
            suggest = "network_query"
        elif key == "onRightYaxis":
            suggest = "on_right_yaxis"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestApmQuery'] = None,
                 audit_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestAuditQuery'] = None,
                 display_type: Optional[str] = None,
                 formulas: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestFormula']] = None,
                 log_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestLogQuery'] = None,
                 metadatas: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestMetadata']] = None,
                 network_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQuery'] = None,
                 on_right_yaxis: Optional[bool] = None,
                 process_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestProcessQuery'] = None,
                 q: Optional[str] = None,
                 queries: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestQuery']] = None,
                 rum_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQuery'] = None,
                 style: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestStyle'] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if audit_query is not None:
            pulumi.set(__self__, "audit_query", audit_query)
        if display_type is not None:
            pulumi.set(__self__, "display_type", display_type)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if network_query is not None:
            pulumi.set(__self__, "network_query", network_query)
        if on_right_yaxis is not None:
            pulumi.set(__self__, "on_right_yaxis", on_right_yaxis)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="auditQuery")
    def audit_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestAuditQuery']:
        return pulumi.get(self, "audit_query")

    @property
    @pulumi.getter(name="displayType")
    def display_type(self) -> Optional[str]:
        return pulumi.get(self, "display_type")

    @property
    @pulumi.getter
    def formulas(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestFormula']]:
        return pulumi.get(self, "formulas")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestMetadata']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="networkQuery")
    def network_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQuery']:
        return pulumi.get(self, "network_query")

    @property
    @pulumi.getter(name="onRightYaxis")
    def on_right_yaxis(self) -> Optional[bool]:
        return pulumi.get(self, "on_right_yaxis")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestQuery']]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQuery']:
        return pulumi.get(self, "security_query")

    @property
    @pulumi.getter
    def style(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestStyle']:
        return pulumi.get(self, "style")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestAuditQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestAuditQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestAuditQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestAuditQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestAuditQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestAuditQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestAuditQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestAuditQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestFormula(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formulaExpression":
            suggest = "formula_expression"
        elif key == "cellDisplayMode":
            suggest = "cell_display_mode"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestFormula. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestFormula.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestFormula.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 formula_expression: str,
                 alias: Optional[str] = None,
                 cell_display_mode: Optional[str] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestFormulaConditionalFormat']] = None,
                 limit: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestFormulaLimit'] = None):
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> str:
        return pulumi.get(self, "formula_expression")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[str]:
        return pulumi.get(self, "cell_display_mode")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestFormulaConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestFormulaLimit']:
        return pulumi.get(self, "limit")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestFormulaConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestFormulaConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestFormulaLimit(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 order: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aliasName":
            suggest = "alias_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 alias_name: Optional[str] = None):
        pulumi.set(__self__, "expression", expression)
        if alias_name is not None:
            pulumi.set(__self__, "alias_name", alias_name)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="aliasName")
    def alias_name(self) -> Optional[str]:
        return pulumi.get(self, "alias_name")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestNetworkQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestNetworkQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestNetworkQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestNetworkQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmDependencyStatsQuery":
            suggest = "apm_dependency_stats_query"
        elif key == "apmResourceStatsQuery":
            suggest = "apm_resource_stats_query"
        elif key == "eventQuery":
            suggest = "event_query"
        elif key == "metricQuery":
            suggest = "metric_query"
        elif key == "processQuery":
            suggest = "process_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery'] = None,
                 apm_resource_stats_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery'] = None,
                 event_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQuery'] = None,
                 metric_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryMetricQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryProcessQuery'] = None):
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery']:
        return pulumi.get(self, "apm_dependency_stats_query")

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery']:
        return pulumi.get(self, "apm_resource_stats_query")

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQuery']:
        return pulumi.get(self, "event_query")

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryMetricQuery']:
        return pulumi.get(self, "metric_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryProcessQuery']:
        return pulumi.get(self, "process_query")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "isUpstream":
            suggest = "is_upstream"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 operation_name: str,
                 resource_name: str,
                 service: str,
                 stat: str,
                 is_upstream: Optional[bool] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> str:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "is_upstream")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 service: str,
                 stat: str,
                 group_bies: Optional[Sequence[str]] = None,
                 operation_name: Optional[str] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None,
                 resource_name: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestQueryEventQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestQueryEventQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryCompute'],
                 data_source: str,
                 name: str,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBy']] = None,
                 indexes: Optional[Sequence[str]] = None,
                 search: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQuerySearch'] = None):
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def computes(self) -> Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryCompute']:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter
    def search(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQuerySearch']:
        return pulumi.get(self, "search")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 interval: Optional[int] = None,
                 metric: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBy(dict):
    def __init__(__self__, *,
                 facet: str,
                 limit: Optional[int] = None,
                 sort: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort'] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> str:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort']:
        return pulumi.get(self, "sort")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySort(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 metric: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestQueryEventQuerySearch(dict):
    def __init__(__self__, *,
                 query: str):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestQueryMetricQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestQueryMetricQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 query: str,
                 aggregator: Optional[str] = None,
                 data_source: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[str]:
        return pulumi.get(self, "data_source")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestQueryProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "isNormalizedCpu":
            suggest = "is_normalized_cpu"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "textFilter":
            suggest = "text_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestQueryProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 metric: str,
                 name: str,
                 aggregator: Optional[str] = None,
                 is_normalized_cpu: Optional[bool] = None,
                 limit: Optional[int] = None,
                 sort: Optional[str] = None,
                 tag_filters: Optional[Sequence[str]] = None,
                 text_filter: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[bool]:
        return pulumi.get(self, "is_normalized_cpu")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[str]:
        return pulumi.get(self, "text_filter")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRequestStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lineType":
            suggest = "line_type"
        elif key == "lineWidth":
            suggest = "line_width"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRequestStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRequestStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 line_type: Optional[str] = None,
                 line_width: Optional[str] = None,
                 palette: Optional[str] = None):
        if line_type is not None:
            pulumi.set(__self__, "line_type", line_type)
        if line_width is not None:
            pulumi.set(__self__, "line_width", line_width)
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter(name="lineType")
    def line_type(self) -> Optional[str]:
        return pulumi.get(self, "line_type")

    @property
    @pulumi.getter(name="lineWidth")
    def line_width(self) -> Optional[str]:
        return pulumi.get(self, "line_width")

    @property
    @pulumi.getter
    def palette(self) -> Optional[str]:
        return pulumi.get(self, "palette")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionRightYaxis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeZero":
            suggest = "include_zero"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionRightYaxis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionRightYaxis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionRightYaxis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 include_zero: Optional[bool] = None,
                 label: Optional[str] = None,
                 max: Optional[str] = None,
                 min: Optional[str] = None,
                 scale: Optional[str] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[bool]:
        return pulumi.get(self, "include_zero")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def max(self) -> Optional[str]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[str]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def scale(self) -> Optional[str]:
        return pulumi.get(self, "scale")


@pulumi.output_type
class DashboardWidgetTimeseriesDefinitionYaxis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeZero":
            suggest = "include_zero"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTimeseriesDefinitionYaxis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTimeseriesDefinitionYaxis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTimeseriesDefinitionYaxis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 include_zero: Optional[bool] = None,
                 label: Optional[str] = None,
                 max: Optional[str] = None,
                 min: Optional[str] = None,
                 scale: Optional[str] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[bool]:
        return pulumi.get(self, "include_zero")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def max(self) -> Optional[str]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[str]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def scale(self) -> Optional[str]:
        return pulumi.get(self, "scale")


@pulumi.output_type
class DashboardWidgetToplistDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLinks":
            suggest = "custom_links"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_links: Optional[Sequence['outputs.DashboardWidgetToplistDefinitionCustomLink']] = None,
                 live_span: Optional[str] = None,
                 requests: Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequest']] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[Sequence['outputs.DashboardWidgetToplistDefinitionCustomLink']]:
        return pulumi.get(self, "custom_links")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetToplistDefinitionCustomLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHidden":
            suggest = "is_hidden"
        elif key == "overrideLabel":
            suggest = "override_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionCustomLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionCustomLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionCustomLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hidden: Optional[bool] = None,
                 label: Optional[str] = None,
                 link: Optional[str] = None,
                 override_label: Optional[str] = None):
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[str]:
        return pulumi.get(self, "override_label")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmQuery":
            suggest = "apm_query"
        elif key == "auditQuery":
            suggest = "audit_query"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"
        elif key == "logQuery":
            suggest = "log_query"
        elif key == "processQuery":
            suggest = "process_query"
        elif key == "rumQuery":
            suggest = "rum_query"
        elif key == "securityQuery":
            suggest = "security_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestApmQuery'] = None,
                 audit_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestAuditQuery'] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestConditionalFormat']] = None,
                 formulas: Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestFormula']] = None,
                 log_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestLogQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestProcessQuery'] = None,
                 q: Optional[str] = None,
                 queries: Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestQuery']] = None,
                 rum_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestRumQuery'] = None,
                 security_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestSecurityQuery'] = None,
                 style: Optional['outputs.DashboardWidgetToplistDefinitionRequestStyle'] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if audit_query is not None:
            pulumi.set(__self__, "audit_query", audit_query)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestApmQuery']:
        return pulumi.get(self, "apm_query")

    @property
    @pulumi.getter(name="auditQuery")
    def audit_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestAuditQuery']:
        return pulumi.get(self, "audit_query")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def formulas(self) -> Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestFormula']]:
        return pulumi.get(self, "formulas")

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestLogQuery']:
        return pulumi.get(self, "log_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestProcessQuery']:
        return pulumi.get(self, "process_query")

    @property
    @pulumi.getter
    def q(self) -> Optional[str]:
        return pulumi.get(self, "q")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestQuery']]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestRumQuery']:
        return pulumi.get(self, "rum_query")

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestSecurityQuery']:
        return pulumi.get(self, "security_query")

    @property
    @pulumi.getter
    def style(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestStyle']:
        return pulumi.get(self, "style")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestApmQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestApmQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestApmQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestApmQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestApmQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestApmQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestApmQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestApmQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestApmQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestApmQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestApmQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestApmQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestApmQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestApmQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestApmQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestAuditQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestAuditQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestAuditQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestAuditQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestAuditQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestAuditQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestAuditQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestAuditQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestAuditQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestAuditQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestAuditQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestAuditQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestAuditQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestAuditQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestAuditQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestAuditQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestAuditQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestFormula(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formulaExpression":
            suggest = "formula_expression"
        elif key == "cellDisplayMode":
            suggest = "cell_display_mode"
        elif key == "conditionalFormats":
            suggest = "conditional_formats"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestFormula. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestFormula.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestFormula.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 formula_expression: str,
                 alias: Optional[str] = None,
                 cell_display_mode: Optional[str] = None,
                 conditional_formats: Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestFormulaConditionalFormat']] = None,
                 limit: Optional['outputs.DashboardWidgetToplistDefinitionRequestFormulaLimit'] = None):
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> str:
        return pulumi.get(self, "formula_expression")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[str]:
        return pulumi.get(self, "cell_display_mode")

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestFormulaConditionalFormat']]:
        return pulumi.get(self, "conditional_formats")

    @property
    @pulumi.getter
    def limit(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestFormulaLimit']:
        return pulumi.get(self, "limit")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestFormulaConditionalFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBgColor":
            suggest = "custom_bg_color"
        elif key == "customFgColor":
            suggest = "custom_fg_color"
        elif key == "hideValue":
            suggest = "hide_value"
        elif key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestFormulaConditionalFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestFormulaConditionalFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 palette: str,
                 value: float,
                 custom_bg_color: Optional[str] = None,
                 custom_fg_color: Optional[str] = None,
                 hide_value: Optional[bool] = None,
                 image_url: Optional[str] = None,
                 metric: Optional[str] = None,
                 timeframe: Optional[str] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def palette(self) -> str:
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_bg_color")

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[str]:
        return pulumi.get(self, "custom_fg_color")

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[bool]:
        return pulumi.get(self, "hide_value")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestFormulaLimit(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 order: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestLogQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestLogQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestLogQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestLogQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestLogQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestLogQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestLogQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestLogQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestLogQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestLogQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestLogQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestLogQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestLogQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestLogQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestLogQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterBies":
            suggest = "filter_bies"
        elif key == "searchBy":
            suggest = "search_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 filter_bies: Optional[Sequence[str]] = None,
                 limit: Optional[int] = None,
                 search_by: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_bies")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[str]:
        return pulumi.get(self, "search_by")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apmDependencyStatsQuery":
            suggest = "apm_dependency_stats_query"
        elif key == "apmResourceStatsQuery":
            suggest = "apm_resource_stats_query"
        elif key == "eventQuery":
            suggest = "event_query"
        elif key == "metricQuery":
            suggest = "metric_query"
        elif key == "processQuery":
            suggest = "process_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery'] = None,
                 apm_resource_stats_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestQueryApmResourceStatsQuery'] = None,
                 event_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestQueryEventQuery'] = None,
                 metric_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestQueryMetricQuery'] = None,
                 process_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestQueryProcessQuery'] = None):
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery']:
        return pulumi.get(self, "apm_dependency_stats_query")

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestQueryApmResourceStatsQuery']:
        return pulumi.get(self, "apm_resource_stats_query")

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestQueryEventQuery']:
        return pulumi.get(self, "event_query")

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestQueryMetricQuery']:
        return pulumi.get(self, "metric_query")

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestQueryProcessQuery']:
        return pulumi.get(self, "process_query")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "isUpstream":
            suggest = "is_upstream"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestQueryApmDependencyStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 operation_name: str,
                 resource_name: str,
                 service: str,
                 stat: str,
                 is_upstream: Optional[bool] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> str:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "is_upstream")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestQueryApmResourceStatsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "operationName":
            suggest = "operation_name"
        elif key == "primaryTagName":
            suggest = "primary_tag_name"
        elif key == "primaryTagValue":
            suggest = "primary_tag_value"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestQueryApmResourceStatsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestQueryApmResourceStatsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 env: str,
                 name: str,
                 service: str,
                 stat: str,
                 group_bies: Optional[Sequence[str]] = None,
                 operation_name: Optional[str] = None,
                 primary_tag_name: Optional[str] = None,
                 primary_tag_value: Optional[str] = None,
                 resource_name: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def stat(self) -> str:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_name")

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[str]:
        return pulumi.get(self, "primary_tag_value")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestQueryEventQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestQueryEventQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestQueryEventQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Sequence['outputs.DashboardWidgetToplistDefinitionRequestQueryEventQueryCompute'],
                 data_source: str,
                 name: str,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBy']] = None,
                 indexes: Optional[Sequence[str]] = None,
                 search: Optional['outputs.DashboardWidgetToplistDefinitionRequestQueryEventQuerySearch'] = None):
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def computes(self) -> Sequence['outputs.DashboardWidgetToplistDefinitionRequestQueryEventQueryCompute']:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def indexes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "indexes")

    @property
    @pulumi.getter
    def search(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestQueryEventQuerySearch']:
        return pulumi.get(self, "search")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestQueryEventQueryCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 interval: Optional[int] = None,
                 metric: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBy(dict):
    def __init__(__self__, *,
                 facet: str,
                 limit: Optional[int] = None,
                 sort: Optional['outputs.DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBySort'] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> str:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBySort']:
        return pulumi.get(self, "sort")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBySort(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 metric: Optional[str] = None,
                 order: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestQueryEventQuerySearch(dict):
    def __init__(__self__, *,
                 query: str):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestQueryMetricQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestQueryMetricQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestQueryMetricQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 query: str,
                 aggregator: Optional[str] = None,
                 data_source: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[str]:
        return pulumi.get(self, "data_source")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestQueryProcessQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "isNormalizedCpu":
            suggest = "is_normalized_cpu"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "textFilter":
            suggest = "text_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestQueryProcessQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestQueryProcessQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 metric: str,
                 name: str,
                 aggregator: Optional[str] = None,
                 is_normalized_cpu: Optional[bool] = None,
                 limit: Optional[int] = None,
                 sort: Optional[str] = None,
                 tag_filters: Optional[Sequence[str]] = None,
                 text_filter: Optional[str] = None):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[str]:
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[bool]:
        return pulumi.get(self, "is_normalized_cpu")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[str]:
        return pulumi.get(self, "text_filter")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestRumQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestRumQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestRumQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestRumQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestRumQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestRumQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestRumQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestRumQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestRumQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestRumQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestRumQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestRumQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestRumQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestRumQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestRumQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestSecurityQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeQuery":
            suggest = "compute_query"
        elif key == "groupBies":
            suggest = "group_bies"
        elif key == "multiComputes":
            suggest = "multi_computes"
        elif key == "searchQuery":
            suggest = "search_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestSecurityQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestSecurityQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestSecurityQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: str,
                 compute_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestSecurityQueryComputeQuery'] = None,
                 group_bies: Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBy']] = None,
                 multi_computes: Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestSecurityQueryMultiCompute']] = None,
                 search_query: Optional[str] = None):
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> str:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestSecurityQueryComputeQuery']:
        return pulumi.get(self, "compute_query")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[Sequence['outputs.DashboardWidgetToplistDefinitionRequestSecurityQueryMultiCompute']]:
        return pulumi.get(self, "multi_computes")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[str]:
        return pulumi.get(self, "search_query")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestSecurityQueryComputeQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortQuery":
            suggest = "sort_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 facet: Optional[str] = None,
                 limit: Optional[int] = None,
                 sort_query: Optional['outputs.DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery'] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional['outputs.DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery']:
        return pulumi.get(self, "sort_query")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortQuery(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 order: str,
                 facet: Optional[str] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def order(self) -> str:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestSecurityQueryMultiCompute(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 facet: Optional[str] = None,
                 interval: Optional[int] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class DashboardWidgetToplistDefinitionRequestStyle(dict):
    def __init__(__self__, *,
                 palette: Optional[str] = None):
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[str]:
        return pulumi.get(self, "palette")


@pulumi.output_type
class DashboardWidgetTraceServiceDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "spanName":
            suggest = "span_name"
        elif key == "displayFormat":
            suggest = "display_format"
        elif key == "liveSpan":
            suggest = "live_span"
        elif key == "showBreakdown":
            suggest = "show_breakdown"
        elif key == "showDistribution":
            suggest = "show_distribution"
        elif key == "showErrors":
            suggest = "show_errors"
        elif key == "showHits":
            suggest = "show_hits"
        elif key == "showLatency":
            suggest = "show_latency"
        elif key == "showResourceList":
            suggest = "show_resource_list"
        elif key == "sizeFormat":
            suggest = "size_format"
        elif key == "titleAlign":
            suggest = "title_align"
        elif key == "titleSize":
            suggest = "title_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetTraceServiceDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetTraceServiceDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetTraceServiceDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 env: str,
                 service: str,
                 span_name: str,
                 display_format: Optional[str] = None,
                 live_span: Optional[str] = None,
                 show_breakdown: Optional[bool] = None,
                 show_distribution: Optional[bool] = None,
                 show_errors: Optional[bool] = None,
                 show_hits: Optional[bool] = None,
                 show_latency: Optional[bool] = None,
                 show_resource_list: Optional[bool] = None,
                 size_format: Optional[str] = None,
                 title: Optional[str] = None,
                 title_align: Optional[str] = None,
                 title_size: Optional[str] = None):
        """
        :param str title: The title of the dashboard.
        """
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "span_name", span_name)
        if display_format is not None:
            pulumi.set(__self__, "display_format", display_format)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if show_breakdown is not None:
            pulumi.set(__self__, "show_breakdown", show_breakdown)
        if show_distribution is not None:
            pulumi.set(__self__, "show_distribution", show_distribution)
        if show_errors is not None:
            pulumi.set(__self__, "show_errors", show_errors)
        if show_hits is not None:
            pulumi.set(__self__, "show_hits", show_hits)
        if show_latency is not None:
            pulumi.set(__self__, "show_latency", show_latency)
        if show_resource_list is not None:
            pulumi.set(__self__, "show_resource_list", show_resource_list)
        if size_format is not None:
            pulumi.set(__self__, "size_format", size_format)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def env(self) -> str:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="spanName")
    def span_name(self) -> str:
        return pulumi.get(self, "span_name")

    @property
    @pulumi.getter(name="displayFormat")
    def display_format(self) -> Optional[str]:
        return pulumi.get(self, "display_format")

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[str]:
        return pulumi.get(self, "live_span")

    @property
    @pulumi.getter(name="showBreakdown")
    def show_breakdown(self) -> Optional[bool]:
        return pulumi.get(self, "show_breakdown")

    @property
    @pulumi.getter(name="showDistribution")
    def show_distribution(self) -> Optional[bool]:
        return pulumi.get(self, "show_distribution")

    @property
    @pulumi.getter(name="showErrors")
    def show_errors(self) -> Optional[bool]:
        return pulumi.get(self, "show_errors")

    @property
    @pulumi.getter(name="showHits")
    def show_hits(self) -> Optional[bool]:
        return pulumi.get(self, "show_hits")

    @property
    @pulumi.getter(name="showLatency")
    def show_latency(self) -> Optional[bool]:
        return pulumi.get(self, "show_latency")

    @property
    @pulumi.getter(name="showResourceList")
    def show_resource_list(self) -> Optional[bool]:
        return pulumi.get(self, "show_resource_list")

    @property
    @pulumi.getter(name="sizeFormat")
    def size_format(self) -> Optional[str]:
        return pulumi.get(self, "size_format")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[str]:
        return pulumi.get(self, "title_align")

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[str]:
        return pulumi.get(self, "title_size")


@pulumi.output_type
class DashboardWidgetWidgetLayout(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isColumnBreak":
            suggest = "is_column_break"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardWidgetWidgetLayout. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardWidgetWidgetLayout.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardWidgetWidgetLayout.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 height: int,
                 width: int,
                 x: int,
                 y: int,
                 is_column_break: Optional[bool] = None):
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "width", width)
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)
        if is_column_break is not None:
            pulumi.set(__self__, "is_column_break", is_column_break)

    @property
    @pulumi.getter
    def height(self) -> int:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def width(self) -> int:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter
    def x(self) -> int:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter
    def y(self) -> int:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="isColumnBreak")
    def is_column_break(self) -> Optional[bool]:
        return pulumi.get(self, "is_column_break")


@pulumi.output_type
class DowntimeRecurrence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "untilDate":
            suggest = "until_date"
        elif key == "untilOccurrences":
            suggest = "until_occurrences"
        elif key == "weekDays":
            suggest = "week_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DowntimeRecurrence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DowntimeRecurrence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DowntimeRecurrence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 period: Optional[int] = None,
                 rrule: Optional[str] = None,
                 until_date: Optional[int] = None,
                 until_occurrences: Optional[int] = None,
                 week_days: Optional[Sequence[str]] = None):
        """
        :param str type: One of `days`, `weeks`, `months`, or `years`
        :param int period: How often to repeat as an integer. For example to repeat every 3 days, select a `type` of `days` and a `period` of `3`.
        :param str rrule: The RRULE standard for defining recurring events. For example, to have a recurring event on the first day of each month, use `FREQ=MONTHLY;INTERVAL=1`. Most common rrule options from the iCalendar Spec are supported. Attributes specifying the duration in RRULE are not supported (for example, `DTSTART`, `DTEND`, `DURATION`).
        :param int until_date: The date at which the recurrence should end as a POSIX timestamp. `until_occurrences` and `until_date` are mutually exclusive.
        :param int until_occurrences: How many times the downtime will be rescheduled. `until_occurrences` and `until_date` are mutually exclusive.
        :param Sequence[str] week_days: A list of week days to repeat on. Choose from: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat` or `Sun`. Only applicable when `type` is `weeks`. First letter must be capitalized.
        """
        pulumi.set(__self__, "type", type)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if rrule is not None:
            pulumi.set(__self__, "rrule", rrule)
        if until_date is not None:
            pulumi.set(__self__, "until_date", until_date)
        if until_occurrences is not None:
            pulumi.set(__self__, "until_occurrences", until_occurrences)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        One of `days`, `weeks`, `months`, or `years`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        """
        How often to repeat as an integer. For example to repeat every 3 days, select a `type` of `days` and a `period` of `3`.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter
    def rrule(self) -> Optional[str]:
        """
        The RRULE standard for defining recurring events. For example, to have a recurring event on the first day of each month, use `FREQ=MONTHLY;INTERVAL=1`. Most common rrule options from the iCalendar Spec are supported. Attributes specifying the duration in RRULE are not supported (for example, `DTSTART`, `DTEND`, `DURATION`).
        """
        return pulumi.get(self, "rrule")

    @property
    @pulumi.getter(name="untilDate")
    def until_date(self) -> Optional[int]:
        """
        The date at which the recurrence should end as a POSIX timestamp. `until_occurrences` and `until_date` are mutually exclusive.
        """
        return pulumi.get(self, "until_date")

    @property
    @pulumi.getter(name="untilOccurrences")
    def until_occurrences(self) -> Optional[int]:
        """
        How many times the downtime will be rescheduled. `until_occurrences` and `until_date` are mutually exclusive.
        """
        return pulumi.get(self, "until_occurrences")

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[Sequence[str]]:
        """
        A list of week days to repeat on. Choose from: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat` or `Sun`. Only applicable when `type` is `weeks`. First letter must be capitalized.
        """
        return pulumi.get(self, "week_days")


@pulumi.output_type
class LogsArchiveAzureArchive(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "storageAccount":
            suggest = "storage_account"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsArchiveAzureArchive. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsArchiveAzureArchive.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsArchiveAzureArchive.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 container: str,
                 storage_account: str,
                 tenant_id: str,
                 path: Optional[str] = None):
        """
        :param str client_id: Your client id.
        :param str container: The container where the archive will be stored.
        :param str storage_account: The associated storage account.
        :param str tenant_id: Your tenant id.
        :param str path: The path where the archive will be stored.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "container", container)
        pulumi.set(__self__, "storage_account", storage_account)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        Your client id.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter
    def container(self) -> str:
        """
        The container where the archive will be stored.
        """
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="storageAccount")
    def storage_account(self) -> str:
        """
        The associated storage account.
        """
        return pulumi.get(self, "storage_account")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        Your tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The path where the archive will be stored.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class LogsArchiveGcsArchive(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientEmail":
            suggest = "client_email"
        elif key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsArchiveGcsArchive. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsArchiveGcsArchive.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsArchiveGcsArchive.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 client_email: str,
                 path: str,
                 project_id: str):
        """
        :param str bucket: Name of your GCS bucket.
        :param str client_email: Your client email.
        :param str path: Path where the archive will be stored.
        :param str project_id: Your project id.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "client_email", client_email)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of your GCS bucket.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> str:
        """
        Your client email.
        """
        return pulumi.get(self, "client_email")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path where the archive will be stored.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Your project id.
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class LogsArchiveS3Archive(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "roleName":
            suggest = "role_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsArchiveS3Archive. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsArchiveS3Archive.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsArchiveS3Archive.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: str,
                 bucket: str,
                 path: str,
                 role_name: str):
        """
        :param str account_id: Your AWS account id.
        :param str bucket: Name of your s3 bucket.
        :param str path: Path where the archive will be stored.
        :param str role_name: Your AWS role name
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        Your AWS account id.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of your s3 bucket.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path where the archive will be stored.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> str:
        """
        Your AWS role name
        """
        return pulumi.get(self, "role_name")


@pulumi.output_type
class LogsCustomPipelineFilter(dict):
    def __init__(__self__, *,
                 query: str):
        """
        :param str query: Filter criteria of the category.
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        Filter criteria of the category.
        """
        return pulumi.get(self, "query")


@pulumi.output_type
class LogsCustomPipelineProcessor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arithmeticProcessor":
            suggest = "arithmetic_processor"
        elif key == "attributeRemapper":
            suggest = "attribute_remapper"
        elif key == "categoryProcessor":
            suggest = "category_processor"
        elif key == "dateRemapper":
            suggest = "date_remapper"
        elif key == "geoIpParser":
            suggest = "geo_ip_parser"
        elif key == "grokParser":
            suggest = "grok_parser"
        elif key == "lookupProcessor":
            suggest = "lookup_processor"
        elif key == "messageRemapper":
            suggest = "message_remapper"
        elif key == "serviceRemapper":
            suggest = "service_remapper"
        elif key == "statusRemapper":
            suggest = "status_remapper"
        elif key == "stringBuilderProcessor":
            suggest = "string_builder_processor"
        elif key == "traceIdRemapper":
            suggest = "trace_id_remapper"
        elif key == "urlParser":
            suggest = "url_parser"
        elif key == "userAgentParser":
            suggest = "user_agent_parser"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arithmetic_processor: Optional['outputs.LogsCustomPipelineProcessorArithmeticProcessor'] = None,
                 attribute_remapper: Optional['outputs.LogsCustomPipelineProcessorAttributeRemapper'] = None,
                 category_processor: Optional['outputs.LogsCustomPipelineProcessorCategoryProcessor'] = None,
                 date_remapper: Optional['outputs.LogsCustomPipelineProcessorDateRemapper'] = None,
                 geo_ip_parser: Optional['outputs.LogsCustomPipelineProcessorGeoIpParser'] = None,
                 grok_parser: Optional['outputs.LogsCustomPipelineProcessorGrokParser'] = None,
                 lookup_processor: Optional['outputs.LogsCustomPipelineProcessorLookupProcessor'] = None,
                 message_remapper: Optional['outputs.LogsCustomPipelineProcessorMessageRemapper'] = None,
                 pipeline: Optional['outputs.LogsCustomPipelineProcessorPipeline'] = None,
                 service_remapper: Optional['outputs.LogsCustomPipelineProcessorServiceRemapper'] = None,
                 status_remapper: Optional['outputs.LogsCustomPipelineProcessorStatusRemapper'] = None,
                 string_builder_processor: Optional['outputs.LogsCustomPipelineProcessorStringBuilderProcessor'] = None,
                 trace_id_remapper: Optional['outputs.LogsCustomPipelineProcessorTraceIdRemapper'] = None,
                 url_parser: Optional['outputs.LogsCustomPipelineProcessorUrlParser'] = None,
                 user_agent_parser: Optional['outputs.LogsCustomPipelineProcessorUserAgentParser'] = None):
        """
        :param 'LogsCustomPipelineProcessorArithmeticProcessorArgs' arithmetic_processor: Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
        :param 'LogsCustomPipelineProcessorAttributeRemapperArgs' attribute_remapper: Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
        :param 'LogsCustomPipelineProcessorCategoryProcessorArgs' category_processor: Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
        :param 'LogsCustomPipelineProcessorDateRemapperArgs' date_remapper: Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
        :param 'LogsCustomPipelineProcessorGeoIpParserArgs' geo_ip_parser: Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
        :param 'LogsCustomPipelineProcessorGrokParserArgs' grok_parser: Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
        :param 'LogsCustomPipelineProcessorLookupProcessorArgs' lookup_processor: Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
        :param 'LogsCustomPipelineProcessorMessageRemapperArgs' message_remapper: Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
        :param 'LogsCustomPipelineProcessorServiceRemapperArgs' service_remapper: Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
        :param 'LogsCustomPipelineProcessorStatusRemapperArgs' status_remapper: Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
        :param 'LogsCustomPipelineProcessorStringBuilderProcessorArgs' string_builder_processor: String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
        :param 'LogsCustomPipelineProcessorTraceIdRemapperArgs' trace_id_remapper: Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
        :param 'LogsCustomPipelineProcessorUrlParserArgs' url_parser: URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
        :param 'LogsCustomPipelineProcessorUserAgentParserArgs' user_agent_parser: User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
        """
        if arithmetic_processor is not None:
            pulumi.set(__self__, "arithmetic_processor", arithmetic_processor)
        if attribute_remapper is not None:
            pulumi.set(__self__, "attribute_remapper", attribute_remapper)
        if category_processor is not None:
            pulumi.set(__self__, "category_processor", category_processor)
        if date_remapper is not None:
            pulumi.set(__self__, "date_remapper", date_remapper)
        if geo_ip_parser is not None:
            pulumi.set(__self__, "geo_ip_parser", geo_ip_parser)
        if grok_parser is not None:
            pulumi.set(__self__, "grok_parser", grok_parser)
        if lookup_processor is not None:
            pulumi.set(__self__, "lookup_processor", lookup_processor)
        if message_remapper is not None:
            pulumi.set(__self__, "message_remapper", message_remapper)
        if pipeline is not None:
            pulumi.set(__self__, "pipeline", pipeline)
        if service_remapper is not None:
            pulumi.set(__self__, "service_remapper", service_remapper)
        if status_remapper is not None:
            pulumi.set(__self__, "status_remapper", status_remapper)
        if string_builder_processor is not None:
            pulumi.set(__self__, "string_builder_processor", string_builder_processor)
        if trace_id_remapper is not None:
            pulumi.set(__self__, "trace_id_remapper", trace_id_remapper)
        if url_parser is not None:
            pulumi.set(__self__, "url_parser", url_parser)
        if user_agent_parser is not None:
            pulumi.set(__self__, "user_agent_parser", user_agent_parser)

    @property
    @pulumi.getter(name="arithmeticProcessor")
    def arithmetic_processor(self) -> Optional['outputs.LogsCustomPipelineProcessorArithmeticProcessor']:
        """
        Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
        """
        return pulumi.get(self, "arithmetic_processor")

    @property
    @pulumi.getter(name="attributeRemapper")
    def attribute_remapper(self) -> Optional['outputs.LogsCustomPipelineProcessorAttributeRemapper']:
        """
        Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
        """
        return pulumi.get(self, "attribute_remapper")

    @property
    @pulumi.getter(name="categoryProcessor")
    def category_processor(self) -> Optional['outputs.LogsCustomPipelineProcessorCategoryProcessor']:
        """
        Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
        """
        return pulumi.get(self, "category_processor")

    @property
    @pulumi.getter(name="dateRemapper")
    def date_remapper(self) -> Optional['outputs.LogsCustomPipelineProcessorDateRemapper']:
        """
        Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
        """
        return pulumi.get(self, "date_remapper")

    @property
    @pulumi.getter(name="geoIpParser")
    def geo_ip_parser(self) -> Optional['outputs.LogsCustomPipelineProcessorGeoIpParser']:
        """
        Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
        """
        return pulumi.get(self, "geo_ip_parser")

    @property
    @pulumi.getter(name="grokParser")
    def grok_parser(self) -> Optional['outputs.LogsCustomPipelineProcessorGrokParser']:
        """
        Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
        """
        return pulumi.get(self, "grok_parser")

    @property
    @pulumi.getter(name="lookupProcessor")
    def lookup_processor(self) -> Optional['outputs.LogsCustomPipelineProcessorLookupProcessor']:
        """
        Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
        """
        return pulumi.get(self, "lookup_processor")

    @property
    @pulumi.getter(name="messageRemapper")
    def message_remapper(self) -> Optional['outputs.LogsCustomPipelineProcessorMessageRemapper']:
        """
        Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
        """
        return pulumi.get(self, "message_remapper")

    @property
    @pulumi.getter
    def pipeline(self) -> Optional['outputs.LogsCustomPipelineProcessorPipeline']:
        return pulumi.get(self, "pipeline")

    @property
    @pulumi.getter(name="serviceRemapper")
    def service_remapper(self) -> Optional['outputs.LogsCustomPipelineProcessorServiceRemapper']:
        """
        Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
        """
        return pulumi.get(self, "service_remapper")

    @property
    @pulumi.getter(name="statusRemapper")
    def status_remapper(self) -> Optional['outputs.LogsCustomPipelineProcessorStatusRemapper']:
        """
        Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
        """
        return pulumi.get(self, "status_remapper")

    @property
    @pulumi.getter(name="stringBuilderProcessor")
    def string_builder_processor(self) -> Optional['outputs.LogsCustomPipelineProcessorStringBuilderProcessor']:
        """
        String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
        """
        return pulumi.get(self, "string_builder_processor")

    @property
    @pulumi.getter(name="traceIdRemapper")
    def trace_id_remapper(self) -> Optional['outputs.LogsCustomPipelineProcessorTraceIdRemapper']:
        """
        Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
        """
        return pulumi.get(self, "trace_id_remapper")

    @property
    @pulumi.getter(name="urlParser")
    def url_parser(self) -> Optional['outputs.LogsCustomPipelineProcessorUrlParser']:
        """
        URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
        """
        return pulumi.get(self, "url_parser")

    @property
    @pulumi.getter(name="userAgentParser")
    def user_agent_parser(self) -> Optional['outputs.LogsCustomPipelineProcessorUserAgentParser']:
        """
        User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
        """
        return pulumi.get(self, "user_agent_parser")


@pulumi.output_type
class LogsCustomPipelineProcessorArithmeticProcessor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "isReplaceMissing":
            suggest = "is_replace_missing"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorArithmeticProcessor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorArithmeticProcessor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorArithmeticProcessor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 target: str,
                 is_enabled: Optional[bool] = None,
                 is_replace_missing: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_replace_missing is not None:
            pulumi.set(__self__, "is_replace_missing", is_replace_missing)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isReplaceMissing")
    def is_replace_missing(self) -> Optional[bool]:
        return pulumi.get(self, "is_replace_missing")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorAttributeRemapper(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "targetType":
            suggest = "target_type"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "overrideOnConflict":
            suggest = "override_on_conflict"
        elif key == "preserveSource":
            suggest = "preserve_source"
        elif key == "targetFormat":
            suggest = "target_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorAttributeRemapper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorAttributeRemapper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorAttributeRemapper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 sources: Sequence[str],
                 target: str,
                 target_type: str,
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None,
                 override_on_conflict: Optional[bool] = None,
                 preserve_source: Optional[bool] = None,
                 target_format: Optional[str] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "target_type", target_type)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_on_conflict is not None:
            pulumi.set(__self__, "override_on_conflict", override_on_conflict)
        if preserve_source is not None:
            pulumi.set(__self__, "preserve_source", preserve_source)
        if target_format is not None:
            pulumi.set(__self__, "target_format", target_format)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> str:
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideOnConflict")
    def override_on_conflict(self) -> Optional[bool]:
        return pulumi.get(self, "override_on_conflict")

    @property
    @pulumi.getter(name="preserveSource")
    def preserve_source(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_source")

    @property
    @pulumi.getter(name="targetFormat")
    def target_format(self) -> Optional[str]:
        return pulumi.get(self, "target_format")


@pulumi.output_type
class LogsCustomPipelineProcessorCategoryProcessor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorCategoryProcessor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorCategoryProcessor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorCategoryProcessor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categories: Sequence['outputs.LogsCustomPipelineProcessorCategoryProcessorCategory'],
                 target: str,
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.LogsCustomPipelineProcessorCategoryProcessorCategory']:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorCategoryProcessorCategory(dict):
    def __init__(__self__, *,
                 filter: 'outputs.LogsCustomPipelineProcessorCategoryProcessorCategoryFilter',
                 name: str):
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def filter(self) -> 'outputs.LogsCustomPipelineProcessorCategoryProcessorCategoryFilter':
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorCategoryProcessorCategoryFilter(dict):
    def __init__(__self__, *,
                 query: str):
        """
        :param str query: Filter criteria of the category.
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        Filter criteria of the category.
        """
        return pulumi.get(self, "query")


@pulumi.output_type
class LogsCustomPipelineProcessorDateRemapper(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorDateRemapper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorDateRemapper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorDateRemapper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sources: Sequence[str],
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorGeoIpParser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorGeoIpParser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorGeoIpParser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorGeoIpParser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sources: Sequence[str],
                 target: str,
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorGrokParser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorGrokParser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorGrokParser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorGrokParser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 grok: 'outputs.LogsCustomPipelineProcessorGrokParserGrok',
                 source: str,
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None,
                 samples: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "grok", grok)
        pulumi.set(__self__, "source", source)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if samples is not None:
            pulumi.set(__self__, "samples", samples)

    @property
    @pulumi.getter
    def grok(self) -> 'outputs.LogsCustomPipelineProcessorGrokParserGrok':
        return pulumi.get(self, "grok")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def samples(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "samples")


@pulumi.output_type
class LogsCustomPipelineProcessorGrokParserGrok(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchRules":
            suggest = "match_rules"
        elif key == "supportRules":
            suggest = "support_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorGrokParserGrok. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorGrokParserGrok.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorGrokParserGrok.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_rules: str,
                 support_rules: str):
        pulumi.set(__self__, "match_rules", match_rules)
        pulumi.set(__self__, "support_rules", support_rules)

    @property
    @pulumi.getter(name="matchRules")
    def match_rules(self) -> str:
        return pulumi.get(self, "match_rules")

    @property
    @pulumi.getter(name="supportRules")
    def support_rules(self) -> str:
        return pulumi.get(self, "support_rules")


@pulumi.output_type
class LogsCustomPipelineProcessorLookupProcessor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lookupTables":
            suggest = "lookup_tables"
        elif key == "defaultLookup":
            suggest = "default_lookup"
        elif key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorLookupProcessor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorLookupProcessor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorLookupProcessor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lookup_tables: Sequence[str],
                 source: str,
                 target: str,
                 default_lookup: Optional[str] = None,
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "lookup_tables", lookup_tables)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)
        if default_lookup is not None:
            pulumi.set(__self__, "default_lookup", default_lookup)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="lookupTables")
    def lookup_tables(self) -> Sequence[str]:
        return pulumi.get(self, "lookup_tables")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="defaultLookup")
    def default_lookup(self) -> Optional[str]:
        return pulumi.get(self, "default_lookup")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorMessageRemapper(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorMessageRemapper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorMessageRemapper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorMessageRemapper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sources: Sequence[str],
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorPipeline(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorPipeline. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorPipeline.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorPipeline.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filters: Sequence['outputs.LogsCustomPipelineProcessorPipelineFilter'],
                 name: str,
                 is_enabled: Optional[bool] = None,
                 processors: Optional[Sequence['outputs.LogsCustomPipelineProcessorPipelineProcessor']] = None):
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "name", name)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if processors is not None:
            pulumi.set(__self__, "processors", processors)

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.LogsCustomPipelineProcessorPipelineFilter']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def processors(self) -> Optional[Sequence['outputs.LogsCustomPipelineProcessorPipelineProcessor']]:
        return pulumi.get(self, "processors")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineFilter(dict):
    def __init__(__self__, *,
                 query: str):
        """
        :param str query: Filter criteria of the category.
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        Filter criteria of the category.
        """
        return pulumi.get(self, "query")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arithmeticProcessor":
            suggest = "arithmetic_processor"
        elif key == "attributeRemapper":
            suggest = "attribute_remapper"
        elif key == "categoryProcessor":
            suggest = "category_processor"
        elif key == "dateRemapper":
            suggest = "date_remapper"
        elif key == "geoIpParser":
            suggest = "geo_ip_parser"
        elif key == "grokParser":
            suggest = "grok_parser"
        elif key == "lookupProcessor":
            suggest = "lookup_processor"
        elif key == "messageRemapper":
            suggest = "message_remapper"
        elif key == "serviceRemapper":
            suggest = "service_remapper"
        elif key == "statusRemapper":
            suggest = "status_remapper"
        elif key == "stringBuilderProcessor":
            suggest = "string_builder_processor"
        elif key == "traceIdRemapper":
            suggest = "trace_id_remapper"
        elif key == "urlParser":
            suggest = "url_parser"
        elif key == "userAgentParser":
            suggest = "user_agent_parser"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorPipelineProcessor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorPipelineProcessor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorPipelineProcessor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arithmetic_processor: Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessor'] = None,
                 attribute_remapper: Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorAttributeRemapper'] = None,
                 category_processor: Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessor'] = None,
                 date_remapper: Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorDateRemapper'] = None,
                 geo_ip_parser: Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorGeoIpParser'] = None,
                 grok_parser: Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorGrokParser'] = None,
                 lookup_processor: Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorLookupProcessor'] = None,
                 message_remapper: Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorMessageRemapper'] = None,
                 service_remapper: Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorServiceRemapper'] = None,
                 status_remapper: Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorStatusRemapper'] = None,
                 string_builder_processor: Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessor'] = None,
                 trace_id_remapper: Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapper'] = None,
                 url_parser: Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorUrlParser'] = None,
                 user_agent_parser: Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorUserAgentParser'] = None):
        """
        :param 'LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessorArgs' arithmetic_processor: Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
        :param 'LogsCustomPipelineProcessorPipelineProcessorAttributeRemapperArgs' attribute_remapper: Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
        :param 'LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorArgs' category_processor: Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
        :param 'LogsCustomPipelineProcessorPipelineProcessorDateRemapperArgs' date_remapper: Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
        :param 'LogsCustomPipelineProcessorPipelineProcessorGeoIpParserArgs' geo_ip_parser: Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
        :param 'LogsCustomPipelineProcessorPipelineProcessorGrokParserArgs' grok_parser: Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
        :param 'LogsCustomPipelineProcessorPipelineProcessorLookupProcessorArgs' lookup_processor: Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
        :param 'LogsCustomPipelineProcessorPipelineProcessorMessageRemapperArgs' message_remapper: Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
        :param 'LogsCustomPipelineProcessorPipelineProcessorServiceRemapperArgs' service_remapper: Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
        :param 'LogsCustomPipelineProcessorPipelineProcessorStatusRemapperArgs' status_remapper: Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
        :param 'LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessorArgs' string_builder_processor: String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
        :param 'LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapperArgs' trace_id_remapper: Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
        :param 'LogsCustomPipelineProcessorPipelineProcessorUrlParserArgs' url_parser: URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
        :param 'LogsCustomPipelineProcessorPipelineProcessorUserAgentParserArgs' user_agent_parser: User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
        """
        if arithmetic_processor is not None:
            pulumi.set(__self__, "arithmetic_processor", arithmetic_processor)
        if attribute_remapper is not None:
            pulumi.set(__self__, "attribute_remapper", attribute_remapper)
        if category_processor is not None:
            pulumi.set(__self__, "category_processor", category_processor)
        if date_remapper is not None:
            pulumi.set(__self__, "date_remapper", date_remapper)
        if geo_ip_parser is not None:
            pulumi.set(__self__, "geo_ip_parser", geo_ip_parser)
        if grok_parser is not None:
            pulumi.set(__self__, "grok_parser", grok_parser)
        if lookup_processor is not None:
            pulumi.set(__self__, "lookup_processor", lookup_processor)
        if message_remapper is not None:
            pulumi.set(__self__, "message_remapper", message_remapper)
        if service_remapper is not None:
            pulumi.set(__self__, "service_remapper", service_remapper)
        if status_remapper is not None:
            pulumi.set(__self__, "status_remapper", status_remapper)
        if string_builder_processor is not None:
            pulumi.set(__self__, "string_builder_processor", string_builder_processor)
        if trace_id_remapper is not None:
            pulumi.set(__self__, "trace_id_remapper", trace_id_remapper)
        if url_parser is not None:
            pulumi.set(__self__, "url_parser", url_parser)
        if user_agent_parser is not None:
            pulumi.set(__self__, "user_agent_parser", user_agent_parser)

    @property
    @pulumi.getter(name="arithmeticProcessor")
    def arithmetic_processor(self) -> Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessor']:
        """
        Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
        """
        return pulumi.get(self, "arithmetic_processor")

    @property
    @pulumi.getter(name="attributeRemapper")
    def attribute_remapper(self) -> Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorAttributeRemapper']:
        """
        Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
        """
        return pulumi.get(self, "attribute_remapper")

    @property
    @pulumi.getter(name="categoryProcessor")
    def category_processor(self) -> Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessor']:
        """
        Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
        """
        return pulumi.get(self, "category_processor")

    @property
    @pulumi.getter(name="dateRemapper")
    def date_remapper(self) -> Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorDateRemapper']:
        """
        Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
        """
        return pulumi.get(self, "date_remapper")

    @property
    @pulumi.getter(name="geoIpParser")
    def geo_ip_parser(self) -> Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorGeoIpParser']:
        """
        Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
        """
        return pulumi.get(self, "geo_ip_parser")

    @property
    @pulumi.getter(name="grokParser")
    def grok_parser(self) -> Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorGrokParser']:
        """
        Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
        """
        return pulumi.get(self, "grok_parser")

    @property
    @pulumi.getter(name="lookupProcessor")
    def lookup_processor(self) -> Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorLookupProcessor']:
        """
        Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
        """
        return pulumi.get(self, "lookup_processor")

    @property
    @pulumi.getter(name="messageRemapper")
    def message_remapper(self) -> Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorMessageRemapper']:
        """
        Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
        """
        return pulumi.get(self, "message_remapper")

    @property
    @pulumi.getter(name="serviceRemapper")
    def service_remapper(self) -> Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorServiceRemapper']:
        """
        Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
        """
        return pulumi.get(self, "service_remapper")

    @property
    @pulumi.getter(name="statusRemapper")
    def status_remapper(self) -> Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorStatusRemapper']:
        """
        Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
        """
        return pulumi.get(self, "status_remapper")

    @property
    @pulumi.getter(name="stringBuilderProcessor")
    def string_builder_processor(self) -> Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessor']:
        """
        String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
        """
        return pulumi.get(self, "string_builder_processor")

    @property
    @pulumi.getter(name="traceIdRemapper")
    def trace_id_remapper(self) -> Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapper']:
        """
        Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
        """
        return pulumi.get(self, "trace_id_remapper")

    @property
    @pulumi.getter(name="urlParser")
    def url_parser(self) -> Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorUrlParser']:
        """
        URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
        """
        return pulumi.get(self, "url_parser")

    @property
    @pulumi.getter(name="userAgentParser")
    def user_agent_parser(self) -> Optional['outputs.LogsCustomPipelineProcessorPipelineProcessorUserAgentParser']:
        """
        User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
        """
        return pulumi.get(self, "user_agent_parser")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "isReplaceMissing":
            suggest = "is_replace_missing"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 target: str,
                 is_enabled: Optional[bool] = None,
                 is_replace_missing: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_replace_missing is not None:
            pulumi.set(__self__, "is_replace_missing", is_replace_missing)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isReplaceMissing")
    def is_replace_missing(self) -> Optional[bool]:
        return pulumi.get(self, "is_replace_missing")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessorAttributeRemapper(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "targetType":
            suggest = "target_type"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "overrideOnConflict":
            suggest = "override_on_conflict"
        elif key == "preserveSource":
            suggest = "preserve_source"
        elif key == "targetFormat":
            suggest = "target_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorPipelineProcessorAttributeRemapper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorAttributeRemapper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorAttributeRemapper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 sources: Sequence[str],
                 target: str,
                 target_type: str,
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None,
                 override_on_conflict: Optional[bool] = None,
                 preserve_source: Optional[bool] = None,
                 target_format: Optional[str] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "target_type", target_type)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_on_conflict is not None:
            pulumi.set(__self__, "override_on_conflict", override_on_conflict)
        if preserve_source is not None:
            pulumi.set(__self__, "preserve_source", preserve_source)
        if target_format is not None:
            pulumi.set(__self__, "target_format", target_format)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> str:
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideOnConflict")
    def override_on_conflict(self) -> Optional[bool]:
        return pulumi.get(self, "override_on_conflict")

    @property
    @pulumi.getter(name="preserveSource")
    def preserve_source(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_source")

    @property
    @pulumi.getter(name="targetFormat")
    def target_format(self) -> Optional[str]:
        return pulumi.get(self, "target_format")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessorCategoryProcessor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorPipelineProcessorCategoryProcessor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorCategoryProcessor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorCategoryProcessor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categories: Sequence['outputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategory'],
                 target: str,
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategory']:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategory(dict):
    def __init__(__self__, *,
                 filter: 'outputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilter',
                 name: str):
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def filter(self) -> 'outputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilter':
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilter(dict):
    def __init__(__self__, *,
                 query: str):
        """
        :param str query: Filter criteria of the category.
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        Filter criteria of the category.
        """
        return pulumi.get(self, "query")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessorDateRemapper(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorPipelineProcessorDateRemapper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorDateRemapper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorDateRemapper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sources: Sequence[str],
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessorGeoIpParser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorPipelineProcessorGeoIpParser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorGeoIpParser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorGeoIpParser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sources: Sequence[str],
                 target: str,
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessorGrokParser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorPipelineProcessorGrokParser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorGrokParser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorGrokParser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 grok: 'outputs.LogsCustomPipelineProcessorPipelineProcessorGrokParserGrok',
                 source: str,
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None,
                 samples: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "grok", grok)
        pulumi.set(__self__, "source", source)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if samples is not None:
            pulumi.set(__self__, "samples", samples)

    @property
    @pulumi.getter
    def grok(self) -> 'outputs.LogsCustomPipelineProcessorPipelineProcessorGrokParserGrok':
        return pulumi.get(self, "grok")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def samples(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "samples")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessorGrokParserGrok(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchRules":
            suggest = "match_rules"
        elif key == "supportRules":
            suggest = "support_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorPipelineProcessorGrokParserGrok. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorGrokParserGrok.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorGrokParserGrok.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_rules: str,
                 support_rules: str):
        pulumi.set(__self__, "match_rules", match_rules)
        pulumi.set(__self__, "support_rules", support_rules)

    @property
    @pulumi.getter(name="matchRules")
    def match_rules(self) -> str:
        return pulumi.get(self, "match_rules")

    @property
    @pulumi.getter(name="supportRules")
    def support_rules(self) -> str:
        return pulumi.get(self, "support_rules")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessorLookupProcessor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lookupTables":
            suggest = "lookup_tables"
        elif key == "defaultLookup":
            suggest = "default_lookup"
        elif key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorPipelineProcessorLookupProcessor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorLookupProcessor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorLookupProcessor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lookup_tables: Sequence[str],
                 source: str,
                 target: str,
                 default_lookup: Optional[str] = None,
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "lookup_tables", lookup_tables)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)
        if default_lookup is not None:
            pulumi.set(__self__, "default_lookup", default_lookup)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="lookupTables")
    def lookup_tables(self) -> Sequence[str]:
        return pulumi.get(self, "lookup_tables")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="defaultLookup")
    def default_lookup(self) -> Optional[str]:
        return pulumi.get(self, "default_lookup")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessorMessageRemapper(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorPipelineProcessorMessageRemapper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorMessageRemapper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorMessageRemapper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sources: Sequence[str],
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessorServiceRemapper(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorPipelineProcessorServiceRemapper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorServiceRemapper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorServiceRemapper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sources: Sequence[str],
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessorStatusRemapper(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorPipelineProcessorStatusRemapper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorStatusRemapper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorStatusRemapper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sources: Sequence[str],
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "isReplaceMissing":
            suggest = "is_replace_missing"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target: str,
                 template: str,
                 is_enabled: Optional[bool] = None,
                 is_replace_missing: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "template", template)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_replace_missing is not None:
            pulumi.set(__self__, "is_replace_missing", is_replace_missing)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def template(self) -> str:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isReplaceMissing")
    def is_replace_missing(self) -> Optional[bool]:
        return pulumi.get(self, "is_replace_missing")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapper(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sources: Sequence[str],
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessorUrlParser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "normalizeEndingSlashes":
            suggest = "normalize_ending_slashes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorPipelineProcessorUrlParser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorUrlParser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorUrlParser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sources: Sequence[str],
                 target: str,
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None,
                 normalize_ending_slashes: Optional[bool] = None):
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if normalize_ending_slashes is not None:
            pulumi.set(__self__, "normalize_ending_slashes", normalize_ending_slashes)

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="normalizeEndingSlashes")
    def normalize_ending_slashes(self) -> Optional[bool]:
        return pulumi.get(self, "normalize_ending_slashes")


@pulumi.output_type
class LogsCustomPipelineProcessorPipelineProcessorUserAgentParser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "isEncoded":
            suggest = "is_encoded"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorPipelineProcessorUserAgentParser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorUserAgentParser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorPipelineProcessorUserAgentParser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sources: Sequence[str],
                 target: str,
                 is_enabled: Optional[bool] = None,
                 is_encoded: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_encoded is not None:
            pulumi.set(__self__, "is_encoded", is_encoded)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isEncoded")
    def is_encoded(self) -> Optional[bool]:
        return pulumi.get(self, "is_encoded")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorServiceRemapper(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorServiceRemapper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorServiceRemapper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorServiceRemapper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sources: Sequence[str],
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorStatusRemapper(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorStatusRemapper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorStatusRemapper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorStatusRemapper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sources: Sequence[str],
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorStringBuilderProcessor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "isReplaceMissing":
            suggest = "is_replace_missing"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorStringBuilderProcessor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorStringBuilderProcessor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorStringBuilderProcessor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target: str,
                 template: str,
                 is_enabled: Optional[bool] = None,
                 is_replace_missing: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "template", template)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_replace_missing is not None:
            pulumi.set(__self__, "is_replace_missing", is_replace_missing)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def template(self) -> str:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isReplaceMissing")
    def is_replace_missing(self) -> Optional[bool]:
        return pulumi.get(self, "is_replace_missing")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorTraceIdRemapper(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorTraceIdRemapper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorTraceIdRemapper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorTraceIdRemapper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sources: Sequence[str],
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsCustomPipelineProcessorUrlParser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "normalizeEndingSlashes":
            suggest = "normalize_ending_slashes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorUrlParser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorUrlParser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorUrlParser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sources: Sequence[str],
                 target: str,
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None,
                 normalize_ending_slashes: Optional[bool] = None):
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if normalize_ending_slashes is not None:
            pulumi.set(__self__, "normalize_ending_slashes", normalize_ending_slashes)

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="normalizeEndingSlashes")
    def normalize_ending_slashes(self) -> Optional[bool]:
        return pulumi.get(self, "normalize_ending_slashes")


@pulumi.output_type
class LogsCustomPipelineProcessorUserAgentParser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "isEncoded":
            suggest = "is_encoded"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsCustomPipelineProcessorUserAgentParser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsCustomPipelineProcessorUserAgentParser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsCustomPipelineProcessorUserAgentParser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sources: Sequence[str],
                 target: str,
                 is_enabled: Optional[bool] = None,
                 is_encoded: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_encoded is not None:
            pulumi.set(__self__, "is_encoded", is_encoded)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isEncoded")
    def is_encoded(self) -> Optional[bool]:
        return pulumi.get(self, "is_encoded")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsIndexExclusionFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsIndexExclusionFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsIndexExclusionFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsIndexExclusionFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filters: Optional[Sequence['outputs.LogsIndexExclusionFilterFilter']] = None,
                 is_enabled: Optional[bool] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['LogsIndexExclusionFilterFilterArgs'] filters: Logs filter
        :param bool is_enabled: A boolean stating if the exclusion is active or not.
        :param str name: The name of the exclusion filter.
        """
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.LogsIndexExclusionFilterFilter']]:
        """
        Logs filter
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        A boolean stating if the exclusion is active or not.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the exclusion filter.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class LogsIndexExclusionFilterFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sampleRate":
            suggest = "sample_rate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsIndexExclusionFilterFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsIndexExclusionFilterFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsIndexExclusionFilterFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query: Optional[str] = None,
                 sample_rate: Optional[float] = None):
        """
        :param str query: Logs filter criteria. Only logs matching this filter criteria are considered for this index.
        """
        if query is not None:
            pulumi.set(__self__, "query", query)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        """
        Logs filter criteria. Only logs matching this filter criteria are considered for this index.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[float]:
        return pulumi.get(self, "sample_rate")


@pulumi.output_type
class LogsIndexFilter(dict):
    def __init__(__self__, *,
                 query: str):
        """
        :param str query: Logs filter criteria. Only logs matching this filter criteria are considered for this index.
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        Logs filter criteria. Only logs matching this filter criteria are considered for this index.
        """
        return pulumi.get(self, "query")


@pulumi.output_type
class LogsMetricCompute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregationType":
            suggest = "aggregation_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsMetricCompute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsMetricCompute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsMetricCompute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregation_type: str,
                 path: Optional[str] = None):
        """
        :param str aggregation_type: The type of aggregation to use. This field can't be updated after creation. Valid values are `count`, `distribution`.
        :param str path: The path to the value the log-based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
        """
        pulumi.set(__self__, "aggregation_type", aggregation_type)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="aggregationType")
    def aggregation_type(self) -> str:
        """
        The type of aggregation to use. This field can't be updated after creation. Valid values are `count`, `distribution`.
        """
        return pulumi.get(self, "aggregation_type")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The path to the value the log-based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class LogsMetricFilter(dict):
    def __init__(__self__, *,
                 query: str):
        """
        :param str query: The search query - following the log search syntax.
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        The search query - following the log search syntax.
        """
        return pulumi.get(self, "query")


@pulumi.output_type
class LogsMetricGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogsMetricGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogsMetricGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogsMetricGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 path: str,
                 tag_name: str):
        """
        :param str path: The path to the value the log-based metric will be aggregated over.
        :param str tag_name: Name of the tag that gets created.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "tag_name", tag_name)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path to the value the log-based metric will be aggregated over.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        """
        Name of the tag that gets created.
        """
        return pulumi.get(self, "tag_name")


@pulumi.output_type
class MetricTagConfigurationAggregation(dict):
    def __init__(__self__, *,
                 space: str,
                 time: str):
        """
        :param str space: A space aggregation for use in query. Valid values are `avg`, `max`, `min`, `sum`.
        :param str time: A time aggregation for use in query. Valid values are `avg`, `count`, `max`, `min`, `sum`.
        """
        pulumi.set(__self__, "space", space)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def space(self) -> str:
        """
        A space aggregation for use in query. Valid values are `avg`, `max`, `min`, `sum`.
        """
        return pulumi.get(self, "space")

    @property
    @pulumi.getter
    def time(self) -> str:
        """
        A time aggregation for use in query. Valid values are `avg`, `count`, `max`, `min`, `sum`.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class MonitorMonitorThresholdWindows(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recoveryWindow":
            suggest = "recovery_window"
        elif key == "triggerWindow":
            suggest = "trigger_window"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorMonitorThresholdWindows. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorMonitorThresholdWindows.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorMonitorThresholdWindows.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 recovery_window: Optional[str] = None,
                 trigger_window: Optional[str] = None):
        """
        :param str recovery_window: Describes how long an anomalous metric must be normal before the alert recovers.
        :param str trigger_window: Describes how long a metric must be anomalous before an alert triggers.
        """
        if recovery_window is not None:
            pulumi.set(__self__, "recovery_window", recovery_window)
        if trigger_window is not None:
            pulumi.set(__self__, "trigger_window", trigger_window)

    @property
    @pulumi.getter(name="recoveryWindow")
    def recovery_window(self) -> Optional[str]:
        """
        Describes how long an anomalous metric must be normal before the alert recovers.
        """
        return pulumi.get(self, "recovery_window")

    @property
    @pulumi.getter(name="triggerWindow")
    def trigger_window(self) -> Optional[str]:
        """
        Describes how long a metric must be anomalous before an alert triggers.
        """
        return pulumi.get(self, "trigger_window")


@pulumi.output_type
class MonitorMonitorThresholds(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "criticalRecovery":
            suggest = "critical_recovery"
        elif key == "warningRecovery":
            suggest = "warning_recovery"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorMonitorThresholds. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorMonitorThresholds.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorMonitorThresholds.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 critical: Optional[str] = None,
                 critical_recovery: Optional[str] = None,
                 ok: Optional[str] = None,
                 unknown: Optional[str] = None,
                 warning: Optional[str] = None,
                 warning_recovery: Optional[str] = None):
        """
        :param str critical: The monitor `CRITICAL` threshold. Must be a number.
        :param str critical_recovery: The monitor `CRITICAL` recovery threshold. Must be a number.
        :param str ok: The monitor `OK` threshold. Must be a number.
        :param str unknown: The monitor `UNKNOWN` threshold. Must be a number.
        :param str warning: The monitor `WARNING` threshold. Must be a number.
        :param str warning_recovery: The monitor `WARNING` recovery threshold. Must be a number.
        """
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if critical_recovery is not None:
            pulumi.set(__self__, "critical_recovery", critical_recovery)
        if ok is not None:
            pulumi.set(__self__, "ok", ok)
        if unknown is not None:
            pulumi.set(__self__, "unknown", unknown)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)
        if warning_recovery is not None:
            pulumi.set(__self__, "warning_recovery", warning_recovery)

    @property
    @pulumi.getter
    def critical(self) -> Optional[str]:
        """
        The monitor `CRITICAL` threshold. Must be a number.
        """
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter(name="criticalRecovery")
    def critical_recovery(self) -> Optional[str]:
        """
        The monitor `CRITICAL` recovery threshold. Must be a number.
        """
        return pulumi.get(self, "critical_recovery")

    @property
    @pulumi.getter
    def ok(self) -> Optional[str]:
        """
        The monitor `OK` threshold. Must be a number.
        """
        return pulumi.get(self, "ok")

    @property
    @pulumi.getter
    def unknown(self) -> Optional[str]:
        """
        The monitor `UNKNOWN` threshold. Must be a number.
        """
        return pulumi.get(self, "unknown")

    @property
    @pulumi.getter
    def warning(self) -> Optional[str]:
        """
        The monitor `WARNING` threshold. Must be a number.
        """
        return pulumi.get(self, "warning")

    @property
    @pulumi.getter(name="warningRecovery")
    def warning_recovery(self) -> Optional[str]:
        """
        The monitor `WARNING` recovery threshold. Must be a number.
        """
        return pulumi.get(self, "warning_recovery")


@pulumi.output_type
class OrganizationSettingsSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "samlAutocreateUsersDomains":
            suggest = "saml_autocreate_users_domains"
        elif key == "samlIdpInitiatedLogin":
            suggest = "saml_idp_initiated_login"
        elif key == "samlStrictMode":
            suggest = "saml_strict_mode"
        elif key == "privateWidgetShare":
            suggest = "private_widget_share"
        elif key == "samlAutocreateAccessRole":
            suggest = "saml_autocreate_access_role"
        elif key == "samlCanBeEnabled":
            suggest = "saml_can_be_enabled"
        elif key == "samlIdpEndpoint":
            suggest = "saml_idp_endpoint"
        elif key == "samlIdpMetadataUploaded":
            suggest = "saml_idp_metadata_uploaded"
        elif key == "samlLoginUrl":
            suggest = "saml_login_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationSettingsSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationSettingsSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationSettingsSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 saml: 'outputs.OrganizationSettingsSettingsSaml',
                 saml_autocreate_users_domains: 'outputs.OrganizationSettingsSettingsSamlAutocreateUsersDomains',
                 saml_idp_initiated_login: 'outputs.OrganizationSettingsSettingsSamlIdpInitiatedLogin',
                 saml_strict_mode: 'outputs.OrganizationSettingsSettingsSamlStrictMode',
                 private_widget_share: Optional[bool] = None,
                 saml_autocreate_access_role: Optional[str] = None,
                 saml_can_be_enabled: Optional[bool] = None,
                 saml_idp_endpoint: Optional[str] = None,
                 saml_idp_metadata_uploaded: Optional[bool] = None,
                 saml_login_url: Optional[str] = None):
        """
        :param 'OrganizationSettingsSettingsSamlArgs' saml: SAML properties
        :param 'OrganizationSettingsSettingsSamlAutocreateUsersDomainsArgs' saml_autocreate_users_domains: List of domains where the SAML automated user creation is enabled.
        :param 'OrganizationSettingsSettingsSamlIdpInitiatedLoginArgs' saml_idp_initiated_login: Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
        :param 'OrganizationSettingsSettingsSamlStrictModeArgs' saml_strict_mode: Whether or not the SAML strict mode is enabled. If true, all users must log in with SAML.
        :param bool private_widget_share: Whether or not the organization users can share widgets outside of Datadog.
        :param str saml_autocreate_access_role: The access role of the user. Options are `st` (standard user), `adm` (admin user), or `ro` (read-only user). Allowed enum values: `st`, `adm` , `ro`, `ERROR`
        :param bool saml_can_be_enabled: Whether or not SAML can be enabled for this organization.
        :param str saml_idp_endpoint: Identity provider endpoint for SAML authentication.
        :param bool saml_idp_metadata_uploaded: Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
        :param str saml_login_url: URL for SAML logging.
        """
        pulumi.set(__self__, "saml", saml)
        pulumi.set(__self__, "saml_autocreate_users_domains", saml_autocreate_users_domains)
        pulumi.set(__self__, "saml_idp_initiated_login", saml_idp_initiated_login)
        pulumi.set(__self__, "saml_strict_mode", saml_strict_mode)
        if private_widget_share is not None:
            pulumi.set(__self__, "private_widget_share", private_widget_share)
        if saml_autocreate_access_role is not None:
            pulumi.set(__self__, "saml_autocreate_access_role", saml_autocreate_access_role)
        if saml_can_be_enabled is not None:
            pulumi.set(__self__, "saml_can_be_enabled", saml_can_be_enabled)
        if saml_idp_endpoint is not None:
            pulumi.set(__self__, "saml_idp_endpoint", saml_idp_endpoint)
        if saml_idp_metadata_uploaded is not None:
            pulumi.set(__self__, "saml_idp_metadata_uploaded", saml_idp_metadata_uploaded)
        if saml_login_url is not None:
            pulumi.set(__self__, "saml_login_url", saml_login_url)

    @property
    @pulumi.getter
    def saml(self) -> 'outputs.OrganizationSettingsSettingsSaml':
        """
        SAML properties
        """
        return pulumi.get(self, "saml")

    @property
    @pulumi.getter(name="samlAutocreateUsersDomains")
    def saml_autocreate_users_domains(self) -> 'outputs.OrganizationSettingsSettingsSamlAutocreateUsersDomains':
        """
        List of domains where the SAML automated user creation is enabled.
        """
        return pulumi.get(self, "saml_autocreate_users_domains")

    @property
    @pulumi.getter(name="samlIdpInitiatedLogin")
    def saml_idp_initiated_login(self) -> 'outputs.OrganizationSettingsSettingsSamlIdpInitiatedLogin':
        """
        Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
        """
        return pulumi.get(self, "saml_idp_initiated_login")

    @property
    @pulumi.getter(name="samlStrictMode")
    def saml_strict_mode(self) -> 'outputs.OrganizationSettingsSettingsSamlStrictMode':
        """
        Whether or not the SAML strict mode is enabled. If true, all users must log in with SAML.
        """
        return pulumi.get(self, "saml_strict_mode")

    @property
    @pulumi.getter(name="privateWidgetShare")
    def private_widget_share(self) -> Optional[bool]:
        """
        Whether or not the organization users can share widgets outside of Datadog.
        """
        return pulumi.get(self, "private_widget_share")

    @property
    @pulumi.getter(name="samlAutocreateAccessRole")
    def saml_autocreate_access_role(self) -> Optional[str]:
        """
        The access role of the user. Options are `st` (standard user), `adm` (admin user), or `ro` (read-only user). Allowed enum values: `st`, `adm` , `ro`, `ERROR`
        """
        return pulumi.get(self, "saml_autocreate_access_role")

    @property
    @pulumi.getter(name="samlCanBeEnabled")
    def saml_can_be_enabled(self) -> Optional[bool]:
        """
        Whether or not SAML can be enabled for this organization.
        """
        return pulumi.get(self, "saml_can_be_enabled")

    @property
    @pulumi.getter(name="samlIdpEndpoint")
    def saml_idp_endpoint(self) -> Optional[str]:
        """
        Identity provider endpoint for SAML authentication.
        """
        return pulumi.get(self, "saml_idp_endpoint")

    @property
    @pulumi.getter(name="samlIdpMetadataUploaded")
    def saml_idp_metadata_uploaded(self) -> Optional[bool]:
        """
        Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
        """
        return pulumi.get(self, "saml_idp_metadata_uploaded")

    @property
    @pulumi.getter(name="samlLoginUrl")
    def saml_login_url(self) -> Optional[str]:
        """
        URL for SAML logging.
        """
        return pulumi.get(self, "saml_login_url")


@pulumi.output_type
class OrganizationSettingsSettingsSaml(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class OrganizationSettingsSettingsSamlAutocreateUsersDomains(dict):
    def __init__(__self__, *,
                 domains: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None):
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class OrganizationSettingsSettingsSamlIdpInitiatedLogin(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class OrganizationSettingsSettingsSamlStrictMode(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class RolePermission(dict):
    def __init__(__self__, *,
                 id: str,
                 name: Optional[str] = None):
        """
        :param str id: ID of the permission to assign.
        :param str name: Name of the permission.
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the permission to assign.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the permission.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SecurityMonitoringDefaultRuleCase(dict):
    def __init__(__self__, *,
                 notifications: Sequence[str],
                 status: str):
        pulumi.set(__self__, "notifications", notifications)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def notifications(self) -> Sequence[str]:
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class SecurityMonitoringDefaultRuleFilter(dict):
    def __init__(__self__, *,
                 action: str,
                 query: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class SecurityMonitoringFilterExclusionFilter(dict):
    def __init__(__self__, *,
                 name: str,
                 query: str):
        """
        :param str name: Exclusion filter name.
        :param str query: Exclusion filter query. Logs that match this query are excluded from the security filter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Exclusion filter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        Exclusion filter query. Logs that match this query are excluded from the security filter.
        """
        return pulumi.get(self, "query")


@pulumi.output_type
class SecurityMonitoringRuleCase(dict):
    def __init__(__self__, *,
                 status: str,
                 condition: Optional[str] = None,
                 name: Optional[str] = None,
                 notifications: Optional[Sequence[str]] = None):
        """
        :param str name: The name of the rule.
        """
        pulumi.set(__self__, "status", status)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "notifications")


@pulumi.output_type
class SecurityMonitoringRuleFilter(dict):
    def __init__(__self__, *,
                 action: str,
                 query: str):
        """
        :param str query: Queries for selecting logs which are part of the rule.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        Queries for selecting logs which are part of the rule.
        """
        return pulumi.get(self, "query")


@pulumi.output_type
class SecurityMonitoringRuleOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "evaluationWindow":
            suggest = "evaluation_window"
        elif key == "keepAlive":
            suggest = "keep_alive"
        elif key == "maxSignalDuration":
            suggest = "max_signal_duration"
        elif key == "detectionMethod":
            suggest = "detection_method"
        elif key == "newValueOptions":
            suggest = "new_value_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityMonitoringRuleOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityMonitoringRuleOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityMonitoringRuleOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 evaluation_window: int,
                 keep_alive: int,
                 max_signal_duration: int,
                 detection_method: Optional[str] = None,
                 new_value_options: Optional['outputs.SecurityMonitoringRuleOptionsNewValueOptions'] = None):
        pulumi.set(__self__, "evaluation_window", evaluation_window)
        pulumi.set(__self__, "keep_alive", keep_alive)
        pulumi.set(__self__, "max_signal_duration", max_signal_duration)
        if detection_method is not None:
            pulumi.set(__self__, "detection_method", detection_method)
        if new_value_options is not None:
            pulumi.set(__self__, "new_value_options", new_value_options)

    @property
    @pulumi.getter(name="evaluationWindow")
    def evaluation_window(self) -> int:
        return pulumi.get(self, "evaluation_window")

    @property
    @pulumi.getter(name="keepAlive")
    def keep_alive(self) -> int:
        return pulumi.get(self, "keep_alive")

    @property
    @pulumi.getter(name="maxSignalDuration")
    def max_signal_duration(self) -> int:
        return pulumi.get(self, "max_signal_duration")

    @property
    @pulumi.getter(name="detectionMethod")
    def detection_method(self) -> Optional[str]:
        return pulumi.get(self, "detection_method")

    @property
    @pulumi.getter(name="newValueOptions")
    def new_value_options(self) -> Optional['outputs.SecurityMonitoringRuleOptionsNewValueOptions']:
        return pulumi.get(self, "new_value_options")


@pulumi.output_type
class SecurityMonitoringRuleOptionsNewValueOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forgetAfter":
            suggest = "forget_after"
        elif key == "learningDuration":
            suggest = "learning_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityMonitoringRuleOptionsNewValueOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityMonitoringRuleOptionsNewValueOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityMonitoringRuleOptionsNewValueOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 forget_after: int,
                 learning_duration: int):
        pulumi.set(__self__, "forget_after", forget_after)
        pulumi.set(__self__, "learning_duration", learning_duration)

    @property
    @pulumi.getter(name="forgetAfter")
    def forget_after(self) -> int:
        return pulumi.get(self, "forget_after")

    @property
    @pulumi.getter(name="learningDuration")
    def learning_duration(self) -> int:
        return pulumi.get(self, "learning_duration")


@pulumi.output_type
class SecurityMonitoringRuleQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentRules":
            suggest = "agent_rules"
        elif key == "distinctFields":
            suggest = "distinct_fields"
        elif key == "groupByFields":
            suggest = "group_by_fields"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityMonitoringRuleQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityMonitoringRuleQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityMonitoringRuleQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query: str,
                 agent_rules: Optional[Sequence['outputs.SecurityMonitoringRuleQueryAgentRule']] = None,
                 aggregation: Optional[str] = None,
                 distinct_fields: Optional[Sequence[str]] = None,
                 group_by_fields: Optional[Sequence[str]] = None,
                 metric: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str query: Queries for selecting logs which are part of the rule.
        :param str name: The name of the rule.
        """
        pulumi.set(__self__, "query", query)
        if agent_rules is not None:
            pulumi.set(__self__, "agent_rules", agent_rules)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if distinct_fields is not None:
            pulumi.set(__self__, "distinct_fields", distinct_fields)
        if group_by_fields is not None:
            pulumi.set(__self__, "group_by_fields", group_by_fields)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        Queries for selecting logs which are part of the rule.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="agentRules")
    def agent_rules(self) -> Optional[Sequence['outputs.SecurityMonitoringRuleQueryAgentRule']]:
        return pulumi.get(self, "agent_rules")

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[str]:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter(name="distinctFields")
    def distinct_fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "distinct_fields")

    @property
    @pulumi.getter(name="groupByFields")
    def group_by_fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_by_fields")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SecurityMonitoringRuleQueryAgentRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentRuleId":
            suggest = "agent_rule_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityMonitoringRuleQueryAgentRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityMonitoringRuleQueryAgentRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityMonitoringRuleQueryAgentRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_rule_id: str,
                 expression: str):
        pulumi.set(__self__, "agent_rule_id", agent_rule_id)
        pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter(name="agentRuleId")
    def agent_rule_id(self) -> str:
        return pulumi.get(self, "agent_rule_id")

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")


@pulumi.output_type
class ServiceLevelObjectiveQuery(dict):
    def __init__(__self__, *,
                 denominator: str,
                 numerator: str):
        """
        :param str denominator: The sum of the `total` events.
        :param str numerator: The sum of all the `good` events.
        """
        pulumi.set(__self__, "denominator", denominator)
        pulumi.set(__self__, "numerator", numerator)

    @property
    @pulumi.getter
    def denominator(self) -> str:
        """
        The sum of the `total` events.
        """
        return pulumi.get(self, "denominator")

    @property
    @pulumi.getter
    def numerator(self) -> str:
        """
        The sum of all the `good` events.
        """
        return pulumi.get(self, "numerator")


@pulumi.output_type
class ServiceLevelObjectiveThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetDisplay":
            suggest = "target_display"
        elif key == "warningDisplay":
            suggest = "warning_display"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLevelObjectiveThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLevelObjectiveThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLevelObjectiveThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target: float,
                 timeframe: str,
                 target_display: Optional[str] = None,
                 warning: Optional[float] = None,
                 warning_display: Optional[str] = None):
        """
        :param float target: The objective's target in`[0,100]`.
        :param str timeframe: The time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Valid values are `7d`, `30d`, `90d`, `custom`.
        :param str target_display: A string representation of the target that indicates its precision. It uses trailing zeros to show significant decimal places (e.g. `98.00`).
        :param float warning: The objective's warning value in `[0,100]`. This must be greater than the target value.
        :param str warning_display: A string representation of the warning target (see the description of the target_display field for details).
        """
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "timeframe", timeframe)
        if target_display is not None:
            pulumi.set(__self__, "target_display", target_display)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)
        if warning_display is not None:
            pulumi.set(__self__, "warning_display", warning_display)

    @property
    @pulumi.getter
    def target(self) -> float:
        """
        The objective's target in`[0,100]`.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def timeframe(self) -> str:
        """
        The time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Valid values are `7d`, `30d`, `90d`, `custom`.
        """
        return pulumi.get(self, "timeframe")

    @property
    @pulumi.getter(name="targetDisplay")
    def target_display(self) -> Optional[str]:
        """
        A string representation of the target that indicates its precision. It uses trailing zeros to show significant decimal places (e.g. `98.00`).
        """
        return pulumi.get(self, "target_display")

    @property
    @pulumi.getter
    def warning(self) -> Optional[float]:
        """
        The objective's warning value in `[0,100]`. This must be greater than the target value.
        """
        return pulumi.get(self, "warning")

    @property
    @pulumi.getter(name="warningDisplay")
    def warning_display(self) -> Optional[str]:
        """
        A string representation of the warning target (see the description of the target_display field for details).
        """
        return pulumi.get(self, "warning_display")


@pulumi.output_type
class SyntheticsGlobalVariableParseTestOptions(dict):
    def __init__(__self__, *,
                 parser: 'outputs.SyntheticsGlobalVariableParseTestOptionsParser',
                 type: str,
                 field: Optional[str] = None):
        """
        :param str type: Defines the source to use to extract the value. Valid values are `http_body`, `http_header`.
        :param str field: Required when type = `http_header`. Defines the header to use to extract the value
        """
        pulumi.set(__self__, "parser", parser)
        pulumi.set(__self__, "type", type)
        if field is not None:
            pulumi.set(__self__, "field", field)

    @property
    @pulumi.getter
    def parser(self) -> 'outputs.SyntheticsGlobalVariableParseTestOptionsParser':
        return pulumi.get(self, "parser")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Defines the source to use to extract the value. Valid values are `http_body`, `http_header`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        """
        Required when type = `http_header`. Defines the header to use to extract the value
        """
        return pulumi.get(self, "field")


@pulumi.output_type
class SyntheticsGlobalVariableParseTestOptionsParser(dict):
    def __init__(__self__, *,
                 type: str,
                 value: Optional[str] = None):
        """
        :param str value: The value of the global variable.
        """
        pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the global variable.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SyntheticsTestApiStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowFailure":
            suggest = "allow_failure"
        elif key == "extractedValues":
            suggest = "extracted_values"
        elif key == "isCritical":
            suggest = "is_critical"
        elif key == "requestBasicauth":
            suggest = "request_basicauth"
        elif key == "requestClientCertificate":
            suggest = "request_client_certificate"
        elif key == "requestDefinition":
            suggest = "request_definition"
        elif key == "requestHeaders":
            suggest = "request_headers"
        elif key == "requestQuery":
            suggest = "request_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsTestApiStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsTestApiStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsTestApiStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 allow_failure: Optional[bool] = None,
                 assertions: Optional[Sequence['outputs.SyntheticsTestApiStepAssertion']] = None,
                 extracted_values: Optional[Sequence['outputs.SyntheticsTestApiStepExtractedValue']] = None,
                 is_critical: Optional[bool] = None,
                 request_basicauth: Optional['outputs.SyntheticsTestApiStepRequestBasicauth'] = None,
                 request_client_certificate: Optional['outputs.SyntheticsTestApiStepRequestClientCertificate'] = None,
                 request_definition: Optional['outputs.SyntheticsTestApiStepRequestDefinition'] = None,
                 request_headers: Optional[Mapping[str, Any]] = None,
                 request_query: Optional[Mapping[str, Any]] = None,
                 retry: Optional['outputs.SyntheticsTestApiStepRetry'] = None,
                 subtype: Optional[str] = None):
        """
        :param str name: The name of the step.
        :param bool allow_failure: Determines whether or not to continue with test if this step fails.
        :param Sequence['SyntheticsTestApiStepAssertionArgs'] assertions: Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
        :param Sequence['SyntheticsTestApiStepExtractedValueArgs'] extracted_values: Values to parse and save as variables from the response.
        :param bool is_critical: Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
        :param 'SyntheticsTestApiStepRequestBasicauthArgs' request_basicauth: The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
        :param 'SyntheticsTestApiStepRequestClientCertificateArgs' request_client_certificate: Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
        :param 'SyntheticsTestApiStepRequestDefinitionArgs' request_definition: The request for the api step.
        :param Mapping[str, Any] request_headers: Header name and value map.
        :param Mapping[str, Any] request_query: Query arguments name and value map.
        :param str subtype: The subtype of the Synthetic multistep API test step. Valid values are `http`.
        """
        pulumi.set(__self__, "name", name)
        if allow_failure is not None:
            pulumi.set(__self__, "allow_failure", allow_failure)
        if assertions is not None:
            pulumi.set(__self__, "assertions", assertions)
        if extracted_values is not None:
            pulumi.set(__self__, "extracted_values", extracted_values)
        if is_critical is not None:
            pulumi.set(__self__, "is_critical", is_critical)
        if request_basicauth is not None:
            pulumi.set(__self__, "request_basicauth", request_basicauth)
        if request_client_certificate is not None:
            pulumi.set(__self__, "request_client_certificate", request_client_certificate)
        if request_definition is not None:
            pulumi.set(__self__, "request_definition", request_definition)
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if request_query is not None:
            pulumi.set(__self__, "request_query", request_query)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if subtype is not None:
            pulumi.set(__self__, "subtype", subtype)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the step.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="allowFailure")
    def allow_failure(self) -> Optional[bool]:
        """
        Determines whether or not to continue with test if this step fails.
        """
        return pulumi.get(self, "allow_failure")

    @property
    @pulumi.getter
    def assertions(self) -> Optional[Sequence['outputs.SyntheticsTestApiStepAssertion']]:
        """
        Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
        """
        return pulumi.get(self, "assertions")

    @property
    @pulumi.getter(name="extractedValues")
    def extracted_values(self) -> Optional[Sequence['outputs.SyntheticsTestApiStepExtractedValue']]:
        """
        Values to parse and save as variables from the response.
        """
        return pulumi.get(self, "extracted_values")

    @property
    @pulumi.getter(name="isCritical")
    def is_critical(self) -> Optional[bool]:
        """
        Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
        """
        return pulumi.get(self, "is_critical")

    @property
    @pulumi.getter(name="requestBasicauth")
    def request_basicauth(self) -> Optional['outputs.SyntheticsTestApiStepRequestBasicauth']:
        """
        The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
        """
        return pulumi.get(self, "request_basicauth")

    @property
    @pulumi.getter(name="requestClientCertificate")
    def request_client_certificate(self) -> Optional['outputs.SyntheticsTestApiStepRequestClientCertificate']:
        """
        Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
        """
        return pulumi.get(self, "request_client_certificate")

    @property
    @pulumi.getter(name="requestDefinition")
    def request_definition(self) -> Optional['outputs.SyntheticsTestApiStepRequestDefinition']:
        """
        The request for the api step.
        """
        return pulumi.get(self, "request_definition")

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[Mapping[str, Any]]:
        """
        Header name and value map.
        """
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="requestQuery")
    def request_query(self) -> Optional[Mapping[str, Any]]:
        """
        Query arguments name and value map.
        """
        return pulumi.get(self, "request_query")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.SyntheticsTestApiStepRetry']:
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter
    def subtype(self) -> Optional[str]:
        """
        The subtype of the Synthetic multistep API test step. Valid values are `http`.
        """
        return pulumi.get(self, "subtype")


@pulumi.output_type
class SyntheticsTestApiStepAssertion(dict):
    def __init__(__self__, *,
                 operator: str,
                 type: str,
                 property: Optional[str] = None,
                 target: Optional[str] = None,
                 targetjsonpath: Optional['outputs.SyntheticsTestApiStepAssertionTargetjsonpath'] = None):
        """
        :param str operator: Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
        :param str type: Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`.
        :param str property: If assertion type is `header`, this is the header name.
        :param str target: Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
        :param 'SyntheticsTestApiStepAssertionTargetjsonpathArgs' targetjsonpath: Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "type", type)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if targetjsonpath is not None:
            pulumi.set(__self__, "targetjsonpath", targetjsonpath)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def targetjsonpath(self) -> Optional['outputs.SyntheticsTestApiStepAssertionTargetjsonpath']:
        """
        Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
        """
        return pulumi.get(self, "targetjsonpath")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        """
        If assertion type is `header`, this is the header name.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class SyntheticsTestApiStepAssertionTargetjsonpath(dict):
    def __init__(__self__, *,
                 jsonpath: str,
                 operator: str,
                 targetvalue: str):
        pulumi.set(__self__, "jsonpath", jsonpath)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "targetvalue", targetvalue)

    @property
    @pulumi.getter
    def jsonpath(self) -> str:
        return pulumi.get(self, "jsonpath")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def targetvalue(self) -> str:
        return pulumi.get(self, "targetvalue")


@pulumi.output_type
class SyntheticsTestApiStepExtractedValue(dict):
    def __init__(__self__, *,
                 name: str,
                 parser: 'outputs.SyntheticsTestApiStepExtractedValueParser',
                 type: str,
                 field: Optional[str] = None):
        """
        :param str name: Name of Datadog synthetics test.
        :param str type: Synthetics test type. Valid values are `api`, `browser`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parser", parser)
        pulumi.set(__self__, "type", type)
        if field is not None:
            pulumi.set(__self__, "field", field)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of Datadog synthetics test.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parser(self) -> 'outputs.SyntheticsTestApiStepExtractedValueParser':
        return pulumi.get(self, "parser")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Synthetics test type. Valid values are `api`, `browser`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")


@pulumi.output_type
class SyntheticsTestApiStepExtractedValueParser(dict):
    def __init__(__self__, *,
                 type: str,
                 value: Optional[str] = None):
        """
        :param str type: Synthetics test type. Valid values are `api`, `browser`.
        """
        pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Synthetics test type. Valid values are `api`, `browser`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SyntheticsTestApiStepRequestBasicauth(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: Password for authentication.
        :param str username: Username for authentication.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password for authentication.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username for authentication.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class SyntheticsTestApiStepRequestClientCertificate(dict):
    def __init__(__self__, *,
                 cert: 'outputs.SyntheticsTestApiStepRequestClientCertificateCert',
                 key: 'outputs.SyntheticsTestApiStepRequestClientCertificateKey'):
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def cert(self) -> 'outputs.SyntheticsTestApiStepRequestClientCertificateCert':
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter
    def key(self) -> 'outputs.SyntheticsTestApiStepRequestClientCertificateKey':
        return pulumi.get(self, "key")


@pulumi.output_type
class SyntheticsTestApiStepRequestClientCertificateCert(dict):
    def __init__(__self__, *,
                 content: str,
                 filename: Optional[str] = None):
        pulumi.set(__self__, "content", content)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def filename(self) -> Optional[str]:
        return pulumi.get(self, "filename")


@pulumi.output_type
class SyntheticsTestApiStepRequestClientCertificateKey(dict):
    def __init__(__self__, *,
                 content: str,
                 filename: Optional[str] = None):
        pulumi.set(__self__, "content", content)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def filename(self) -> Optional[str]:
        return pulumi.get(self, "filename")


@pulumi.output_type
class SyntheticsTestApiStepRequestDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInsecure":
            suggest = "allow_insecure"
        elif key == "dnsServer":
            suggest = "dns_server"
        elif key == "dnsServerPort":
            suggest = "dns_server_port"
        elif key == "followRedirects":
            suggest = "follow_redirects"
        elif key == "noSavingResponseBody":
            suggest = "no_saving_response_body"
        elif key == "numberOfPackets":
            suggest = "number_of_packets"
        elif key == "shouldTrackHops":
            suggest = "should_track_hops"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsTestApiStepRequestDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsTestApiStepRequestDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsTestApiStepRequestDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_insecure: Optional[bool] = None,
                 body: Optional[str] = None,
                 dns_server: Optional[str] = None,
                 dns_server_port: Optional[int] = None,
                 follow_redirects: Optional[bool] = None,
                 host: Optional[str] = None,
                 message: Optional[str] = None,
                 method: Optional[str] = None,
                 no_saving_response_body: Optional[bool] = None,
                 number_of_packets: Optional[int] = None,
                 port: Optional[int] = None,
                 servername: Optional[str] = None,
                 should_track_hops: Optional[bool] = None,
                 timeout: Optional[int] = None,
                 url: Optional[str] = None):
        """
        :param str body: The request body.
        :param str dns_server: DNS server to use for DNS tests (`subtype = "dns"`).
        :param int dns_server_port: DNS server port to use for DNS tests.
        :param str host: Host name to perform the test with.
        :param str message: For UDP and websocket tests, message to send with the request.
        :param str method: The HTTP method. Valid values are `GET`, `POST`, `PATCH`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`.
        :param bool no_saving_response_body: Determines whether or not to save the response body.
        :param int number_of_packets: Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
        :param int port: Port to use when performing the test.
        :param str servername: For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
        :param bool should_track_hops: This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
        :param int timeout: Timeout in seconds for the test. Defaults to `60`.
        :param str url: The URL to send the request to.
        """
        if allow_insecure is not None:
            pulumi.set(__self__, "allow_insecure", allow_insecure)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if dns_server is not None:
            pulumi.set(__self__, "dns_server", dns_server)
        if dns_server_port is not None:
            pulumi.set(__self__, "dns_server_port", dns_server_port)
        if follow_redirects is not None:
            pulumi.set(__self__, "follow_redirects", follow_redirects)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if no_saving_response_body is not None:
            pulumi.set(__self__, "no_saving_response_body", no_saving_response_body)
        if number_of_packets is not None:
            pulumi.set(__self__, "number_of_packets", number_of_packets)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if servername is not None:
            pulumi.set(__self__, "servername", servername)
        if should_track_hops is not None:
            pulumi.set(__self__, "should_track_hops", should_track_hops)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="allowInsecure")
    def allow_insecure(self) -> Optional[bool]:
        return pulumi.get(self, "allow_insecure")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        """
        The request body.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="dnsServer")
    def dns_server(self) -> Optional[str]:
        """
        DNS server to use for DNS tests (`subtype = "dns"`).
        """
        return pulumi.get(self, "dns_server")

    @property
    @pulumi.getter(name="dnsServerPort")
    def dns_server_port(self) -> Optional[int]:
        """
        DNS server port to use for DNS tests.
        """
        return pulumi.get(self, "dns_server_port")

    @property
    @pulumi.getter(name="followRedirects")
    def follow_redirects(self) -> Optional[bool]:
        return pulumi.get(self, "follow_redirects")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name to perform the test with.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        For UDP and websocket tests, message to send with the request.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        """
        The HTTP method. Valid values are `GET`, `POST`, `PATCH`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="noSavingResponseBody")
    def no_saving_response_body(self) -> Optional[bool]:
        """
        Determines whether or not to save the response body.
        """
        return pulumi.get(self, "no_saving_response_body")

    @property
    @pulumi.getter(name="numberOfPackets")
    def number_of_packets(self) -> Optional[int]:
        """
        Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
        """
        return pulumi.get(self, "number_of_packets")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port to use when performing the test.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def servername(self) -> Optional[str]:
        """
        For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
        """
        return pulumi.get(self, "servername")

    @property
    @pulumi.getter(name="shouldTrackHops")
    def should_track_hops(self) -> Optional[bool]:
        """
        This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
        """
        return pulumi.get(self, "should_track_hops")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Timeout in seconds for the test. Defaults to `60`.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The URL to send the request to.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class SyntheticsTestApiStepRetry(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 interval: Optional[int] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class SyntheticsTestAssertion(dict):
    def __init__(__self__, *,
                 operator: str,
                 type: str,
                 property: Optional[str] = None,
                 target: Optional[str] = None,
                 targetjsonpath: Optional['outputs.SyntheticsTestAssertionTargetjsonpath'] = None):
        """
        :param str operator: Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
        :param str type: Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`.
        :param str property: If assertion type is `header`, this is the header name.
        :param str target: Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
        :param 'SyntheticsTestAssertionTargetjsonpathArgs' targetjsonpath: Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "type", type)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if targetjsonpath is not None:
            pulumi.set(__self__, "targetjsonpath", targetjsonpath)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def targetjsonpath(self) -> Optional['outputs.SyntheticsTestAssertionTargetjsonpath']:
        """
        Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
        """
        return pulumi.get(self, "targetjsonpath")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        """
        If assertion type is `header`, this is the header name.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class SyntheticsTestAssertionTargetjsonpath(dict):
    def __init__(__self__, *,
                 jsonpath: str,
                 operator: str,
                 targetvalue: str):
        pulumi.set(__self__, "jsonpath", jsonpath)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "targetvalue", targetvalue)

    @property
    @pulumi.getter
    def jsonpath(self) -> str:
        return pulumi.get(self, "jsonpath")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def targetvalue(self) -> str:
        return pulumi.get(self, "targetvalue")


@pulumi.output_type
class SyntheticsTestBrowserStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowFailure":
            suggest = "allow_failure"
        elif key == "forceElementUpdate":
            suggest = "force_element_update"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsTestBrowserStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsTestBrowserStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsTestBrowserStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 params: 'outputs.SyntheticsTestBrowserStepParams',
                 type: str,
                 allow_failure: Optional[bool] = None,
                 force_element_update: Optional[bool] = None,
                 timeout: Optional[int] = None):
        """
        :param str name: Name of the step.
        :param 'SyntheticsTestBrowserStepParamsArgs' params: Parameters for the step.
        :param str type: Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.
        :param bool allow_failure: Determines if the step should be allowed to fail.
        :param bool force_element_update: Force update of the "element" parameter for the step
        :param int timeout: Used to override the default timeout of a step.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "params", params)
        pulumi.set(__self__, "type", type)
        if allow_failure is not None:
            pulumi.set(__self__, "allow_failure", allow_failure)
        if force_element_update is not None:
            pulumi.set(__self__, "force_element_update", force_element_update)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the step.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def params(self) -> 'outputs.SyntheticsTestBrowserStepParams':
        """
        Parameters for the step.
        """
        return pulumi.get(self, "params")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="allowFailure")
    def allow_failure(self) -> Optional[bool]:
        """
        Determines if the step should be allowed to fail.
        """
        return pulumi.get(self, "allow_failure")

    @property
    @pulumi.getter(name="forceElementUpdate")
    def force_element_update(self) -> Optional[bool]:
        """
        Force update of the "element" parameter for the step
        """
        return pulumi.get(self, "force_element_update")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Used to override the default timeout of a step.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class SyntheticsTestBrowserStepParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clickType":
            suggest = "click_type"
        elif key == "playingTabId":
            suggest = "playing_tab_id"
        elif key == "subtestPublicId":
            suggest = "subtest_public_id"
        elif key == "withClick":
            suggest = "with_click"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsTestBrowserStepParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsTestBrowserStepParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsTestBrowserStepParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 check: Optional[str] = None,
                 click_type: Optional[str] = None,
                 code: Optional[str] = None,
                 delay: Optional[int] = None,
                 element: Optional[str] = None,
                 email: Optional[str] = None,
                 file: Optional[str] = None,
                 files: Optional[str] = None,
                 modifiers: Optional[Sequence[str]] = None,
                 playing_tab_id: Optional[str] = None,
                 request: Optional[str] = None,
                 subtest_public_id: Optional[str] = None,
                 value: Optional[str] = None,
                 variable: Optional['outputs.SyntheticsTestBrowserStepParamsVariable'] = None,
                 with_click: Optional[bool] = None,
                 x: Optional[int] = None,
                 y: Optional[int] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if check is not None:
            pulumi.set(__self__, "check", check)
        if click_type is not None:
            pulumi.set(__self__, "click_type", click_type)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if element is not None:
            pulumi.set(__self__, "element", element)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if modifiers is not None:
            pulumi.set(__self__, "modifiers", modifiers)
        if playing_tab_id is not None:
            pulumi.set(__self__, "playing_tab_id", playing_tab_id)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if subtest_public_id is not None:
            pulumi.set(__self__, "subtest_public_id", subtest_public_id)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)
        if with_click is not None:
            pulumi.set(__self__, "with_click", with_click)
        if x is not None:
            pulumi.set(__self__, "x", x)
        if y is not None:
            pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def check(self) -> Optional[str]:
        return pulumi.get(self, "check")

    @property
    @pulumi.getter(name="clickType")
    def click_type(self) -> Optional[str]:
        return pulumi.get(self, "click_type")

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def delay(self) -> Optional[int]:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def element(self) -> Optional[str]:
        return pulumi.get(self, "element")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def file(self) -> Optional[str]:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def files(self) -> Optional[str]:
        return pulumi.get(self, "files")

    @property
    @pulumi.getter
    def modifiers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "modifiers")

    @property
    @pulumi.getter(name="playingTabId")
    def playing_tab_id(self) -> Optional[str]:
        return pulumi.get(self, "playing_tab_id")

    @property
    @pulumi.getter
    def request(self) -> Optional[str]:
        return pulumi.get(self, "request")

    @property
    @pulumi.getter(name="subtestPublicId")
    def subtest_public_id(self) -> Optional[str]:
        return pulumi.get(self, "subtest_public_id")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def variable(self) -> Optional['outputs.SyntheticsTestBrowserStepParamsVariable']:
        return pulumi.get(self, "variable")

    @property
    @pulumi.getter(name="withClick")
    def with_click(self) -> Optional[bool]:
        return pulumi.get(self, "with_click")

    @property
    @pulumi.getter
    def x(self) -> Optional[int]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter
    def y(self) -> Optional[int]:
        return pulumi.get(self, "y")


@pulumi.output_type
class SyntheticsTestBrowserStepParamsVariable(dict):
    def __init__(__self__, *,
                 example: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str name: Name of Datadog synthetics test.
        """
        if example is not None:
            pulumi.set(__self__, "example", example)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def example(self) -> Optional[str]:
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of Datadog synthetics test.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SyntheticsTestBrowserVariable(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 example: Optional[str] = None,
                 id: Optional[str] = None,
                 pattern: Optional[str] = None):
        """
        :param str name: Name of the variable.
        :param str type: Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
        :param str example: Example for the variable.
        :param str id: ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
        :param str pattern: Pattern of the variable.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if example is not None:
            pulumi.set(__self__, "example", example)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def example(self) -> Optional[str]:
        """
        Example for the variable.
        """
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        Pattern of the variable.
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class SyntheticsTestConfigVariable(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 example: Optional[str] = None,
                 id: Optional[str] = None,
                 pattern: Optional[str] = None):
        """
        :param str name: Name of the variable.
        :param str type: Type of test configuration variable. Valid values are `global`, `text`.
        :param str example: Example for the variable.
        :param str id: When type = `global`, ID of the global variable to use.
        :param str pattern: Pattern of the variable.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if example is not None:
            pulumi.set(__self__, "example", example)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of test configuration variable. Valid values are `global`, `text`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def example(self) -> Optional[str]:
        """
        Example for the variable.
        """
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        When type = `global`, ID of the global variable to use.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        Pattern of the variable.
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class SyntheticsTestOptionsList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tickEvery":
            suggest = "tick_every"
        elif key == "acceptSelfSigned":
            suggest = "accept_self_signed"
        elif key == "allowInsecure":
            suggest = "allow_insecure"
        elif key == "followRedirects":
            suggest = "follow_redirects"
        elif key == "minFailureDuration":
            suggest = "min_failure_duration"
        elif key == "minLocationFailed":
            suggest = "min_location_failed"
        elif key == "monitorName":
            suggest = "monitor_name"
        elif key == "monitorOptions":
            suggest = "monitor_options"
        elif key == "monitorPriority":
            suggest = "monitor_priority"
        elif key == "noScreenshot":
            suggest = "no_screenshot"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsTestOptionsList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsTestOptionsList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsTestOptionsList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tick_every: int,
                 accept_self_signed: Optional[bool] = None,
                 allow_insecure: Optional[bool] = None,
                 follow_redirects: Optional[bool] = None,
                 min_failure_duration: Optional[int] = None,
                 min_location_failed: Optional[int] = None,
                 monitor_name: Optional[str] = None,
                 monitor_options: Optional['outputs.SyntheticsTestOptionsListMonitorOptions'] = None,
                 monitor_priority: Optional[int] = None,
                 no_screenshot: Optional[bool] = None,
                 retry: Optional['outputs.SyntheticsTestOptionsListRetry'] = None):
        """
        :param int tick_every: How often the test should run (in seconds).
        :param bool accept_self_signed: For SSL test, whether or not the test should allow self signed certificates.
        :param bool allow_insecure: Allows loading insecure content for an HTTP test.
        :param bool follow_redirects: Determines whether or not the API HTTP test should follow redirects.
        :param int min_failure_duration: Minimum amount of time in failure required to trigger an alert. Default is `0`.
        :param int min_location_failed: Minimum number of locations in failure required to trigger an alert. Default is `1`.
        :param str monitor_name: The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
        :param bool no_screenshot: Prevents saving screenshots of the steps.
        """
        pulumi.set(__self__, "tick_every", tick_every)
        if accept_self_signed is not None:
            pulumi.set(__self__, "accept_self_signed", accept_self_signed)
        if allow_insecure is not None:
            pulumi.set(__self__, "allow_insecure", allow_insecure)
        if follow_redirects is not None:
            pulumi.set(__self__, "follow_redirects", follow_redirects)
        if min_failure_duration is not None:
            pulumi.set(__self__, "min_failure_duration", min_failure_duration)
        if min_location_failed is not None:
            pulumi.set(__self__, "min_location_failed", min_location_failed)
        if monitor_name is not None:
            pulumi.set(__self__, "monitor_name", monitor_name)
        if monitor_options is not None:
            pulumi.set(__self__, "monitor_options", monitor_options)
        if monitor_priority is not None:
            pulumi.set(__self__, "monitor_priority", monitor_priority)
        if no_screenshot is not None:
            pulumi.set(__self__, "no_screenshot", no_screenshot)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)

    @property
    @pulumi.getter(name="tickEvery")
    def tick_every(self) -> int:
        """
        How often the test should run (in seconds).
        """
        return pulumi.get(self, "tick_every")

    @property
    @pulumi.getter(name="acceptSelfSigned")
    def accept_self_signed(self) -> Optional[bool]:
        """
        For SSL test, whether or not the test should allow self signed certificates.
        """
        return pulumi.get(self, "accept_self_signed")

    @property
    @pulumi.getter(name="allowInsecure")
    def allow_insecure(self) -> Optional[bool]:
        """
        Allows loading insecure content for an HTTP test.
        """
        return pulumi.get(self, "allow_insecure")

    @property
    @pulumi.getter(name="followRedirects")
    def follow_redirects(self) -> Optional[bool]:
        """
        Determines whether or not the API HTTP test should follow redirects.
        """
        return pulumi.get(self, "follow_redirects")

    @property
    @pulumi.getter(name="minFailureDuration")
    def min_failure_duration(self) -> Optional[int]:
        """
        Minimum amount of time in failure required to trigger an alert. Default is `0`.
        """
        return pulumi.get(self, "min_failure_duration")

    @property
    @pulumi.getter(name="minLocationFailed")
    def min_location_failed(self) -> Optional[int]:
        """
        Minimum number of locations in failure required to trigger an alert. Default is `1`.
        """
        return pulumi.get(self, "min_location_failed")

    @property
    @pulumi.getter(name="monitorName")
    def monitor_name(self) -> Optional[str]:
        """
        The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
        """
        return pulumi.get(self, "monitor_name")

    @property
    @pulumi.getter(name="monitorOptions")
    def monitor_options(self) -> Optional['outputs.SyntheticsTestOptionsListMonitorOptions']:
        return pulumi.get(self, "monitor_options")

    @property
    @pulumi.getter(name="monitorPriority")
    def monitor_priority(self) -> Optional[int]:
        return pulumi.get(self, "monitor_priority")

    @property
    @pulumi.getter(name="noScreenshot")
    def no_screenshot(self) -> Optional[bool]:
        """
        Prevents saving screenshots of the steps.
        """
        return pulumi.get(self, "no_screenshot")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.SyntheticsTestOptionsListRetry']:
        return pulumi.get(self, "retry")


@pulumi.output_type
class SyntheticsTestOptionsListMonitorOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "renotifyInterval":
            suggest = "renotify_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsTestOptionsListMonitorOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsTestOptionsListMonitorOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsTestOptionsListMonitorOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 renotify_interval: Optional[int] = None):
        if renotify_interval is not None:
            pulumi.set(__self__, "renotify_interval", renotify_interval)

    @property
    @pulumi.getter(name="renotifyInterval")
    def renotify_interval(self) -> Optional[int]:
        return pulumi.get(self, "renotify_interval")


@pulumi.output_type
class SyntheticsTestOptionsListRetry(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 interval: Optional[int] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class SyntheticsTestRequestBasicauth(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: Password for authentication.
        :param str username: Username for authentication.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password for authentication.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username for authentication.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class SyntheticsTestRequestClientCertificate(dict):
    def __init__(__self__, *,
                 cert: 'outputs.SyntheticsTestRequestClientCertificateCert',
                 key: 'outputs.SyntheticsTestRequestClientCertificateKey'):
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def cert(self) -> 'outputs.SyntheticsTestRequestClientCertificateCert':
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter
    def key(self) -> 'outputs.SyntheticsTestRequestClientCertificateKey':
        return pulumi.get(self, "key")


@pulumi.output_type
class SyntheticsTestRequestClientCertificateCert(dict):
    def __init__(__self__, *,
                 content: str,
                 filename: Optional[str] = None):
        pulumi.set(__self__, "content", content)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def filename(self) -> Optional[str]:
        return pulumi.get(self, "filename")


@pulumi.output_type
class SyntheticsTestRequestClientCertificateKey(dict):
    def __init__(__self__, *,
                 content: str,
                 filename: Optional[str] = None):
        pulumi.set(__self__, "content", content)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def filename(self) -> Optional[str]:
        return pulumi.get(self, "filename")


@pulumi.output_type
class SyntheticsTestRequestDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServer":
            suggest = "dns_server"
        elif key == "dnsServerPort":
            suggest = "dns_server_port"
        elif key == "noSavingResponseBody":
            suggest = "no_saving_response_body"
        elif key == "numberOfPackets":
            suggest = "number_of_packets"
        elif key == "shouldTrackHops":
            suggest = "should_track_hops"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsTestRequestDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsTestRequestDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsTestRequestDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body: Optional[str] = None,
                 dns_server: Optional[str] = None,
                 dns_server_port: Optional[int] = None,
                 host: Optional[str] = None,
                 message: Optional[str] = None,
                 method: Optional[str] = None,
                 no_saving_response_body: Optional[bool] = None,
                 number_of_packets: Optional[int] = None,
                 port: Optional[int] = None,
                 servername: Optional[str] = None,
                 should_track_hops: Optional[bool] = None,
                 timeout: Optional[int] = None,
                 url: Optional[str] = None):
        """
        :param str body: The request body.
        :param str dns_server: DNS server to use for DNS tests (`subtype = "dns"`).
        :param int dns_server_port: DNS server port to use for DNS tests.
        :param str host: Host name to perform the test with.
        :param str message: For UDP and websocket tests, message to send with the request.
        :param str method: The HTTP method. Valid values are `GET`, `POST`, `PATCH`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`.
        :param bool no_saving_response_body: Determines whether or not to save the response body.
        :param int number_of_packets: Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
        :param int port: Port to use when performing the test.
        :param str servername: For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
        :param bool should_track_hops: This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
        :param int timeout: Timeout in seconds for the test. Defaults to `60`.
        :param str url: The URL to send the request to.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if dns_server is not None:
            pulumi.set(__self__, "dns_server", dns_server)
        if dns_server_port is not None:
            pulumi.set(__self__, "dns_server_port", dns_server_port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if no_saving_response_body is not None:
            pulumi.set(__self__, "no_saving_response_body", no_saving_response_body)
        if number_of_packets is not None:
            pulumi.set(__self__, "number_of_packets", number_of_packets)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if servername is not None:
            pulumi.set(__self__, "servername", servername)
        if should_track_hops is not None:
            pulumi.set(__self__, "should_track_hops", should_track_hops)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        """
        The request body.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="dnsServer")
    def dns_server(self) -> Optional[str]:
        """
        DNS server to use for DNS tests (`subtype = "dns"`).
        """
        return pulumi.get(self, "dns_server")

    @property
    @pulumi.getter(name="dnsServerPort")
    def dns_server_port(self) -> Optional[int]:
        """
        DNS server port to use for DNS tests.
        """
        return pulumi.get(self, "dns_server_port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name to perform the test with.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        For UDP and websocket tests, message to send with the request.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        """
        The HTTP method. Valid values are `GET`, `POST`, `PATCH`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="noSavingResponseBody")
    def no_saving_response_body(self) -> Optional[bool]:
        """
        Determines whether or not to save the response body.
        """
        return pulumi.get(self, "no_saving_response_body")

    @property
    @pulumi.getter(name="numberOfPackets")
    def number_of_packets(self) -> Optional[int]:
        """
        Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
        """
        return pulumi.get(self, "number_of_packets")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port to use when performing the test.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def servername(self) -> Optional[str]:
        """
        For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
        """
        return pulumi.get(self, "servername")

    @property
    @pulumi.getter(name="shouldTrackHops")
    def should_track_hops(self) -> Optional[bool]:
        """
        This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
        """
        return pulumi.get(self, "should_track_hops")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Timeout in seconds for the test. Defaults to `60`.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The URL to send the request to.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetMonitorMonitorThresholdResult(dict):
    def __init__(__self__, *,
                 critical: str,
                 critical_recovery: str,
                 ok: str,
                 unknown: str,
                 warning: str,
                 warning_recovery: str):
        pulumi.set(__self__, "critical", critical)
        pulumi.set(__self__, "critical_recovery", critical_recovery)
        pulumi.set(__self__, "ok", ok)
        pulumi.set(__self__, "unknown", unknown)
        pulumi.set(__self__, "warning", warning)
        pulumi.set(__self__, "warning_recovery", warning_recovery)

    @property
    @pulumi.getter
    def critical(self) -> str:
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter(name="criticalRecovery")
    def critical_recovery(self) -> str:
        return pulumi.get(self, "critical_recovery")

    @property
    @pulumi.getter
    def ok(self) -> str:
        return pulumi.get(self, "ok")

    @property
    @pulumi.getter
    def unknown(self) -> str:
        return pulumi.get(self, "unknown")

    @property
    @pulumi.getter
    def warning(self) -> str:
        return pulumi.get(self, "warning")

    @property
    @pulumi.getter(name="warningRecovery")
    def warning_recovery(self) -> str:
        return pulumi.get(self, "warning_recovery")


@pulumi.output_type
class GetMonitorMonitorThresholdWindowResult(dict):
    def __init__(__self__, *,
                 recovery_window: str,
                 trigger_window: str):
        pulumi.set(__self__, "recovery_window", recovery_window)
        pulumi.set(__self__, "trigger_window", trigger_window)

    @property
    @pulumi.getter(name="recoveryWindow")
    def recovery_window(self) -> str:
        return pulumi.get(self, "recovery_window")

    @property
    @pulumi.getter(name="triggerWindow")
    def trigger_window(self) -> str:
        return pulumi.get(self, "trigger_window")


@pulumi.output_type
class GetMonitorsMonitorResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 type: str):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRolesRoleResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 user_count: int):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "user_count", user_count)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="userCount")
    def user_count(self) -> int:
        return pulumi.get(self, "user_count")


@pulumi.output_type
class GetSecurityMonitoringFiltersFilterResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool,
                 name: str,
                 query: str,
                 version: int,
                 exclusion_filters: Optional[Sequence['outputs.GetSecurityMonitoringFiltersFilterExclusionFilterResult']] = None,
                 filtered_data_type: Optional[str] = None):
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "version", version)
        if exclusion_filters is not None:
            pulumi.set(__self__, "exclusion_filters", exclusion_filters)
        if filtered_data_type is not None:
            pulumi.set(__self__, "filtered_data_type", filtered_data_type)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="exclusionFilters")
    def exclusion_filters(self) -> Optional[Sequence['outputs.GetSecurityMonitoringFiltersFilterExclusionFilterResult']]:
        return pulumi.get(self, "exclusion_filters")

    @property
    @pulumi.getter(name="filteredDataType")
    def filtered_data_type(self) -> Optional[str]:
        return pulumi.get(self, "filtered_data_type")


@pulumi.output_type
class GetSecurityMonitoringFiltersFilterExclusionFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 query: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class GetSecurityMonitoringRulesRuleResult(dict):
    def __init__(__self__, *,
                 cases: Sequence['outputs.GetSecurityMonitoringRulesRuleCaseResult'],
                 message: str,
                 name: str,
                 queries: Sequence['outputs.GetSecurityMonitoringRulesRuleQueryResult'],
                 enabled: Optional[bool] = None,
                 filters: Optional[Sequence['outputs.GetSecurityMonitoringRulesRuleFilterResult']] = None,
                 has_extended_title: Optional[bool] = None,
                 options: Optional['outputs.GetSecurityMonitoringRulesRuleOptionsResult'] = None,
                 tags: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "cases", cases)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "queries", queries)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if has_extended_title is not None:
            pulumi.set(__self__, "has_extended_title", has_extended_title)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def cases(self) -> Sequence['outputs.GetSecurityMonitoringRulesRuleCaseResult']:
        return pulumi.get(self, "cases")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def queries(self) -> Sequence['outputs.GetSecurityMonitoringRulesRuleQueryResult']:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetSecurityMonitoringRulesRuleFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="hasExtendedTitle")
    def has_extended_title(self) -> Optional[bool]:
        return pulumi.get(self, "has_extended_title")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GetSecurityMonitoringRulesRuleOptionsResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSecurityMonitoringRulesRuleCaseResult(dict):
    def __init__(__self__, *,
                 status: str,
                 condition: Optional[str] = None,
                 name: Optional[str] = None,
                 notifications: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "status", status)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "notifications")


@pulumi.output_type
class GetSecurityMonitoringRulesRuleFilterResult(dict):
    def __init__(__self__, *,
                 action: str,
                 query: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class GetSecurityMonitoringRulesRuleOptionsResult(dict):
    def __init__(__self__, *,
                 evaluation_window: int,
                 keep_alive: int,
                 max_signal_duration: int,
                 detection_method: Optional[str] = None,
                 new_value_options: Optional['outputs.GetSecurityMonitoringRulesRuleOptionsNewValueOptionsResult'] = None):
        pulumi.set(__self__, "evaluation_window", evaluation_window)
        pulumi.set(__self__, "keep_alive", keep_alive)
        pulumi.set(__self__, "max_signal_duration", max_signal_duration)
        if detection_method is not None:
            pulumi.set(__self__, "detection_method", detection_method)
        if new_value_options is not None:
            pulumi.set(__self__, "new_value_options", new_value_options)

    @property
    @pulumi.getter(name="evaluationWindow")
    def evaluation_window(self) -> int:
        return pulumi.get(self, "evaluation_window")

    @property
    @pulumi.getter(name="keepAlive")
    def keep_alive(self) -> int:
        return pulumi.get(self, "keep_alive")

    @property
    @pulumi.getter(name="maxSignalDuration")
    def max_signal_duration(self) -> int:
        return pulumi.get(self, "max_signal_duration")

    @property
    @pulumi.getter(name="detectionMethod")
    def detection_method(self) -> Optional[str]:
        return pulumi.get(self, "detection_method")

    @property
    @pulumi.getter(name="newValueOptions")
    def new_value_options(self) -> Optional['outputs.GetSecurityMonitoringRulesRuleOptionsNewValueOptionsResult']:
        return pulumi.get(self, "new_value_options")


@pulumi.output_type
class GetSecurityMonitoringRulesRuleOptionsNewValueOptionsResult(dict):
    def __init__(__self__, *,
                 forget_after: int,
                 learning_duration: int):
        pulumi.set(__self__, "forget_after", forget_after)
        pulumi.set(__self__, "learning_duration", learning_duration)

    @property
    @pulumi.getter(name="forgetAfter")
    def forget_after(self) -> int:
        return pulumi.get(self, "forget_after")

    @property
    @pulumi.getter(name="learningDuration")
    def learning_duration(self) -> int:
        return pulumi.get(self, "learning_duration")


@pulumi.output_type
class GetSecurityMonitoringRulesRuleQueryResult(dict):
    def __init__(__self__, *,
                 query: str,
                 agent_rules: Optional[Sequence['outputs.GetSecurityMonitoringRulesRuleQueryAgentRuleResult']] = None,
                 aggregation: Optional[str] = None,
                 distinct_fields: Optional[Sequence[str]] = None,
                 group_by_fields: Optional[Sequence[str]] = None,
                 metric: Optional[str] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "query", query)
        if agent_rules is not None:
            pulumi.set(__self__, "agent_rules", agent_rules)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if distinct_fields is not None:
            pulumi.set(__self__, "distinct_fields", distinct_fields)
        if group_by_fields is not None:
            pulumi.set(__self__, "group_by_fields", group_by_fields)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="agentRules")
    def agent_rules(self) -> Optional[Sequence['outputs.GetSecurityMonitoringRulesRuleQueryAgentRuleResult']]:
        return pulumi.get(self, "agent_rules")

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[str]:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter(name="distinctFields")
    def distinct_fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "distinct_fields")

    @property
    @pulumi.getter(name="groupByFields")
    def group_by_fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_by_fields")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSecurityMonitoringRulesRuleQueryAgentRuleResult(dict):
    def __init__(__self__, *,
                 agent_rule_id: str,
                 expression: str):
        pulumi.set(__self__, "agent_rule_id", agent_rule_id)
        pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter(name="agentRuleId")
    def agent_rule_id(self) -> str:
        return pulumi.get(self, "agent_rule_id")

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")


@pulumi.output_type
class GetServiceLevelObjectivesSloResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 type: str):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


