# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogsIndexArgs', 'LogsIndex']

@pulumi.input_type
class LogsIndexArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input['LogsIndexFilterArgs']]],
                 name: pulumi.Input[str],
                 daily_limit: Optional[pulumi.Input[int]] = None,
                 disable_daily_limit: Optional[pulumi.Input[bool]] = None,
                 exclusion_filters: Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexExclusionFilterArgs']]]] = None,
                 retention_days: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a LogsIndex resource.
        :param pulumi.Input[Sequence[pulumi.Input['LogsIndexFilterArgs']]] filters: Logs filter
        :param pulumi.Input[str] name: The name of the exclusion filter.
        :param pulumi.Input[int] daily_limit: The number of log events you can send in this index per day before you are rate-limited.
        :param pulumi.Input[bool] disable_daily_limit: If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index's current daily_limit is maintained.
        :param pulumi.Input[Sequence[pulumi.Input['LogsIndexExclusionFilterArgs']]] exclusion_filters: List of exclusion filters.
        :param pulumi.Input[int] retention_days: The number of days before logs are deleted from this index.
        """
        LogsIndexArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filters=filters,
            name=name,
            daily_limit=daily_limit,
            disable_daily_limit=disable_daily_limit,
            exclusion_filters=exclusion_filters,
            retention_days=retention_days,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filters: pulumi.Input[Sequence[pulumi.Input['LogsIndexFilterArgs']]],
             name: pulumi.Input[str],
             daily_limit: Optional[pulumi.Input[int]] = None,
             disable_daily_limit: Optional[pulumi.Input[bool]] = None,
             exclusion_filters: Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexExclusionFilterArgs']]]] = None,
             retention_days: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filters", filters)
        _setter("name", name)
        if daily_limit is not None:
            _setter("daily_limit", daily_limit)
        if disable_daily_limit is not None:
            _setter("disable_daily_limit", disable_daily_limit)
        if exclusion_filters is not None:
            _setter("exclusion_filters", exclusion_filters)
        if retention_days is not None:
            _setter("retention_days", retention_days)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['LogsIndexFilterArgs']]]:
        """
        Logs filter
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['LogsIndexFilterArgs']]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the exclusion filter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="dailyLimit")
    def daily_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The number of log events you can send in this index per day before you are rate-limited.
        """
        return pulumi.get(self, "daily_limit")

    @daily_limit.setter
    def daily_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "daily_limit", value)

    @property
    @pulumi.getter(name="disableDailyLimit")
    def disable_daily_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index's current daily_limit is maintained.
        """
        return pulumi.get(self, "disable_daily_limit")

    @disable_daily_limit.setter
    def disable_daily_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_daily_limit", value)

    @property
    @pulumi.getter(name="exclusionFilters")
    def exclusion_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexExclusionFilterArgs']]]]:
        """
        List of exclusion filters.
        """
        return pulumi.get(self, "exclusion_filters")

    @exclusion_filters.setter
    def exclusion_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexExclusionFilterArgs']]]]):
        pulumi.set(self, "exclusion_filters", value)

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> Optional[pulumi.Input[int]]:
        """
        The number of days before logs are deleted from this index.
        """
        return pulumi.get(self, "retention_days")

    @retention_days.setter
    def retention_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_days", value)


@pulumi.input_type
class _LogsIndexState:
    def __init__(__self__, *,
                 daily_limit: Optional[pulumi.Input[int]] = None,
                 disable_daily_limit: Optional[pulumi.Input[bool]] = None,
                 exclusion_filters: Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexExclusionFilterArgs']]]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexFilterArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 retention_days: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering LogsIndex resources.
        :param pulumi.Input[int] daily_limit: The number of log events you can send in this index per day before you are rate-limited.
        :param pulumi.Input[bool] disable_daily_limit: If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index's current daily_limit is maintained.
        :param pulumi.Input[Sequence[pulumi.Input['LogsIndexExclusionFilterArgs']]] exclusion_filters: List of exclusion filters.
        :param pulumi.Input[Sequence[pulumi.Input['LogsIndexFilterArgs']]] filters: Logs filter
        :param pulumi.Input[str] name: The name of the exclusion filter.
        :param pulumi.Input[int] retention_days: The number of days before logs are deleted from this index.
        """
        _LogsIndexState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            daily_limit=daily_limit,
            disable_daily_limit=disable_daily_limit,
            exclusion_filters=exclusion_filters,
            filters=filters,
            name=name,
            retention_days=retention_days,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             daily_limit: Optional[pulumi.Input[int]] = None,
             disable_daily_limit: Optional[pulumi.Input[bool]] = None,
             exclusion_filters: Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexExclusionFilterArgs']]]] = None,
             filters: Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexFilterArgs']]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             retention_days: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if daily_limit is not None:
            _setter("daily_limit", daily_limit)
        if disable_daily_limit is not None:
            _setter("disable_daily_limit", disable_daily_limit)
        if exclusion_filters is not None:
            _setter("exclusion_filters", exclusion_filters)
        if filters is not None:
            _setter("filters", filters)
        if name is not None:
            _setter("name", name)
        if retention_days is not None:
            _setter("retention_days", retention_days)

    @property
    @pulumi.getter(name="dailyLimit")
    def daily_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The number of log events you can send in this index per day before you are rate-limited.
        """
        return pulumi.get(self, "daily_limit")

    @daily_limit.setter
    def daily_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "daily_limit", value)

    @property
    @pulumi.getter(name="disableDailyLimit")
    def disable_daily_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index's current daily_limit is maintained.
        """
        return pulumi.get(self, "disable_daily_limit")

    @disable_daily_limit.setter
    def disable_daily_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_daily_limit", value)

    @property
    @pulumi.getter(name="exclusionFilters")
    def exclusion_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexExclusionFilterArgs']]]]:
        """
        List of exclusion filters.
        """
        return pulumi.get(self, "exclusion_filters")

    @exclusion_filters.setter
    def exclusion_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexExclusionFilterArgs']]]]):
        pulumi.set(self, "exclusion_filters", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexFilterArgs']]]]:
        """
        Logs filter
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the exclusion filter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> Optional[pulumi.Input[int]]:
        """
        The number of days before logs are deleted from this index.
        """
        return pulumi.get(self, "retention_days")

    @retention_days.setter
    def retention_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_days", value)


class LogsIndex(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 daily_limit: Optional[pulumi.Input[int]] = None,
                 disable_daily_limit: Optional[pulumi.Input[bool]] = None,
                 exclusion_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogsIndexExclusionFilterArgs']]]]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogsIndexFilterArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 retention_days: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        sample_index = datadog.LogsIndex("sampleIndex",
            daily_limit=200000,
            exclusion_filters=[
                datadog.LogsIndexExclusionFilterArgs(
                    filters=[datadog.LogsIndexExclusionFilterFilterArgs(
                        query="app:coredns",
                        sample_rate=0.97,
                    )],
                    is_enabled=True,
                    name="Filter coredns logs",
                ),
                datadog.LogsIndexExclusionFilterArgs(
                    filters=[datadog.LogsIndexExclusionFilterFilterArgs(
                        query="service:kube_apiserver",
                        sample_rate=1,
                    )],
                    is_enabled=True,
                    name="Kubernetes apiserver",
                ),
            ],
            filters=[datadog.LogsIndexFilterArgs(
                query="*",
            )],
            name="your index",
            retention_days=7)
        ```

        ## Import

        ```sh
         $ pulumi import datadog:index/logsIndex:LogsIndex name> <indexName>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] daily_limit: The number of log events you can send in this index per day before you are rate-limited.
        :param pulumi.Input[bool] disable_daily_limit: If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index's current daily_limit is maintained.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogsIndexExclusionFilterArgs']]]] exclusion_filters: List of exclusion filters.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogsIndexFilterArgs']]]] filters: Logs filter
        :param pulumi.Input[str] name: The name of the exclusion filter.
        :param pulumi.Input[int] retention_days: The number of days before logs are deleted from this index.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogsIndexArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        sample_index = datadog.LogsIndex("sampleIndex",
            daily_limit=200000,
            exclusion_filters=[
                datadog.LogsIndexExclusionFilterArgs(
                    filters=[datadog.LogsIndexExclusionFilterFilterArgs(
                        query="app:coredns",
                        sample_rate=0.97,
                    )],
                    is_enabled=True,
                    name="Filter coredns logs",
                ),
                datadog.LogsIndexExclusionFilterArgs(
                    filters=[datadog.LogsIndexExclusionFilterFilterArgs(
                        query="service:kube_apiserver",
                        sample_rate=1,
                    )],
                    is_enabled=True,
                    name="Kubernetes apiserver",
                ),
            ],
            filters=[datadog.LogsIndexFilterArgs(
                query="*",
            )],
            name="your index",
            retention_days=7)
        ```

        ## Import

        ```sh
         $ pulumi import datadog:index/logsIndex:LogsIndex name> <indexName>
        ```

        :param str resource_name: The name of the resource.
        :param LogsIndexArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogsIndexArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            LogsIndexArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 daily_limit: Optional[pulumi.Input[int]] = None,
                 disable_daily_limit: Optional[pulumi.Input[bool]] = None,
                 exclusion_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogsIndexExclusionFilterArgs']]]]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogsIndexFilterArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 retention_days: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogsIndexArgs.__new__(LogsIndexArgs)

            __props__.__dict__["daily_limit"] = daily_limit
            __props__.__dict__["disable_daily_limit"] = disable_daily_limit
            __props__.__dict__["exclusion_filters"] = exclusion_filters
            if filters is None and not opts.urn:
                raise TypeError("Missing required property 'filters'")
            __props__.__dict__["filters"] = filters
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["retention_days"] = retention_days
        super(LogsIndex, __self__).__init__(
            'datadog:index/logsIndex:LogsIndex',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            daily_limit: Optional[pulumi.Input[int]] = None,
            disable_daily_limit: Optional[pulumi.Input[bool]] = None,
            exclusion_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogsIndexExclusionFilterArgs']]]]] = None,
            filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogsIndexFilterArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            retention_days: Optional[pulumi.Input[int]] = None) -> 'LogsIndex':
        """
        Get an existing LogsIndex resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] daily_limit: The number of log events you can send in this index per day before you are rate-limited.
        :param pulumi.Input[bool] disable_daily_limit: If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index's current daily_limit is maintained.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogsIndexExclusionFilterArgs']]]] exclusion_filters: List of exclusion filters.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogsIndexFilterArgs']]]] filters: Logs filter
        :param pulumi.Input[str] name: The name of the exclusion filter.
        :param pulumi.Input[int] retention_days: The number of days before logs are deleted from this index.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogsIndexState.__new__(_LogsIndexState)

        __props__.__dict__["daily_limit"] = daily_limit
        __props__.__dict__["disable_daily_limit"] = disable_daily_limit
        __props__.__dict__["exclusion_filters"] = exclusion_filters
        __props__.__dict__["filters"] = filters
        __props__.__dict__["name"] = name
        __props__.__dict__["retention_days"] = retention_days
        return LogsIndex(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dailyLimit")
    def daily_limit(self) -> pulumi.Output[Optional[int]]:
        """
        The number of log events you can send in this index per day before you are rate-limited.
        """
        return pulumi.get(self, "daily_limit")

    @property
    @pulumi.getter(name="disableDailyLimit")
    def disable_daily_limit(self) -> pulumi.Output[bool]:
        """
        If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index's current daily_limit is maintained.
        """
        return pulumi.get(self, "disable_daily_limit")

    @property
    @pulumi.getter(name="exclusionFilters")
    def exclusion_filters(self) -> pulumi.Output[Optional[Sequence['outputs.LogsIndexExclusionFilter']]]:
        """
        List of exclusion filters.
        """
        return pulumi.get(self, "exclusion_filters")

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Output[Sequence['outputs.LogsIndexFilter']]:
        """
        Logs filter
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the exclusion filter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> pulumi.Output[int]:
        """
        The number of days before logs are deleted from this index.
        """
        return pulumi.get(self, "retention_days")

