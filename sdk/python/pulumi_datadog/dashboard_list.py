# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class DashboardList(pulumi.CustomResource):
    dash_items: pulumi.Output[list]
    """
    An individual dashboard object to add to this Dashboard List. If present, must contain the following:

      * `dashId` (`str`) - The ID of this dashboard.
      * `type` (`str`) - The type of this dashboard. Available options are: `custom_timeboard`, `custom_screenboard`, `integration_screenboard`, `integration_timeboard`, and `host_timeboard`
    """
    name: pulumi.Output[str]
    """
    The name of this Dashbaord List.
    """
    def __init__(__self__, resource_name, opts=None, dash_items=None, name=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a Datadog dashboard_list resource. This can be used to create and manage Datadog Dashboard Lists and the individual dashboards within them.

        ## Example Usage

        Create a new Dashboard list with two dashbaords

        ```python
        import pulumi
        import pulumi_datadog as datadog

        time = datadog.Dashboard("time",
            description="Created using the Datadog provider in TF",
            is_read_only=True,
            layout_type="ordered",
            title="TF Test Layout Dashboard",
            widgets=[{
                "alertGraphDefinition": {
                    "alertId": "1234",
                    "time": {
                        "liveSpan": "1h",
                    },
                    "title": "Widget Title",
                    "vizType": "timeseries",
                },
            }])
        screen = datadog.Dashboard("screen",
            description="Created using the Datadog provider in TF",
            is_read_only=False,
            layout_type="free",
            title="TF Test Free Layout Dashboard",
            widgets=[{
                "eventStreamDefinition": {
                    "eventSize": "l",
                    "query": "*",
                    "time": {
                        "liveSpan": "1h",
                    },
                    "title": "Widget Title",
                    "titleAlign": "left",
                    "titleSize": 16,
                },
                "layout": {
                    "height": 43,
                    "width": 32,
                    "x": 5,
                    "y": 5,
                },
            }])
        new_list = datadog.DashboardList("newList",
            dash_items=[
                {
                    "dashId": time.id,
                    "type": "custom_timeboard",
                },
                {
                    "dashId": screen.id,
                    "type": "custom_screenboard",
                },
            ],
            name="TF Created List",
            opts=ResourceOptions(depends_on=[
                    "datadog_dashboard.screen",
                    "datadog_dashboard.time",
                ]))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] dash_items: An individual dashboard object to add to this Dashboard List. If present, must contain the following:
        :param pulumi.Input[str] name: The name of this Dashbaord List.

        The **dash_items** object supports the following:

          * `dashId` (`pulumi.Input[str]`) - The ID of this dashboard.
          * `type` (`pulumi.Input[str]`) - The type of this dashboard. Available options are: `custom_timeboard`, `custom_screenboard`, `integration_screenboard`, `integration_timeboard`, and `host_timeboard`
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['dash_items'] = dash_items
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
        super(DashboardList, __self__).__init__(
            'datadog:index/dashboardList:DashboardList',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, dash_items=None, name=None):
        """
        Get an existing DashboardList resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] dash_items: An individual dashboard object to add to this Dashboard List. If present, must contain the following:
        :param pulumi.Input[str] name: The name of this Dashbaord List.

        The **dash_items** object supports the following:

          * `dashId` (`pulumi.Input[str]`) - The ID of this dashboard.
          * `type` (`pulumi.Input[str]`) - The type of this dashboard. Available options are: `custom_timeboard`, `custom_screenboard`, `integration_screenboard`, `integration_timeboard`, and `host_timeboard`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["dash_items"] = dash_items
        __props__["name"] = name
        return DashboardList(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
