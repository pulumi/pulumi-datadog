# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SecurityMonitoringRuleJsonArgs', 'SecurityMonitoringRuleJson']

@pulumi.input_type
class SecurityMonitoringRuleJsonArgs:
    def __init__(__self__, *,
                 json: pulumi.Input[builtins.str]):
        """
        The set of arguments for constructing a SecurityMonitoringRuleJson resource.
        :param pulumi.Input[builtins.str] json: The JSON definition of the Security Monitoring Rule.
        """
        pulumi.set(__self__, "json", json)

    @property
    @pulumi.getter
    def json(self) -> pulumi.Input[builtins.str]:
        """
        The JSON definition of the Security Monitoring Rule.
        """
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "json", value)


@pulumi.input_type
class _SecurityMonitoringRuleJsonState:
    def __init__(__self__, *,
                 json: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering SecurityMonitoringRuleJson resources.
        :param pulumi.Input[builtins.str] json: The JSON definition of the Security Monitoring Rule.
        """
        if json is not None:
            pulumi.set(__self__, "json", json)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The JSON definition of the Security Monitoring Rule.
        """
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "json", value)


@pulumi.type_token("datadog:index/securityMonitoringRuleJson:SecurityMonitoringRuleJson")
class SecurityMonitoringRuleJson(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 json: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Provides a Datadog Security Monitoring Rule JSON resource. This can be used to create and manage Datadog security monitoring rules using raw JSON.

        ## Import

        ```sh
        $ pulumi import datadog:index/securityMonitoringRuleJson:SecurityMonitoringRuleJson security_rule_json aaa-yyy-vvv
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] json: The JSON definition of the Security Monitoring Rule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecurityMonitoringRuleJsonArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Datadog Security Monitoring Rule JSON resource. This can be used to create and manage Datadog security monitoring rules using raw JSON.

        ## Import

        ```sh
        $ pulumi import datadog:index/securityMonitoringRuleJson:SecurityMonitoringRuleJson security_rule_json aaa-yyy-vvv
        ```

        :param str resource_name: The name of the resource.
        :param SecurityMonitoringRuleJsonArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityMonitoringRuleJsonArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 json: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityMonitoringRuleJsonArgs.__new__(SecurityMonitoringRuleJsonArgs)

            if json is None and not opts.urn:
                raise TypeError("Missing required property 'json'")
            __props__.__dict__["json"] = json
        super(SecurityMonitoringRuleJson, __self__).__init__(
            'datadog:index/securityMonitoringRuleJson:SecurityMonitoringRuleJson',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            json: Optional[pulumi.Input[builtins.str]] = None) -> 'SecurityMonitoringRuleJson':
        """
        Get an existing SecurityMonitoringRuleJson resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] json: The JSON definition of the Security Monitoring Rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecurityMonitoringRuleJsonState.__new__(_SecurityMonitoringRuleJsonState)

        __props__.__dict__["json"] = json
        return SecurityMonitoringRuleJson(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def json(self) -> pulumi.Output[builtins.str]:
        """
        The JSON definition of the Security Monitoring Rule.
        """
        return pulumi.get(self, "json")

