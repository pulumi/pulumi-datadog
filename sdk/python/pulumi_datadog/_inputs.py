# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = [
    'DashboardListDashItemArgs',
    'DashboardTemplateVariableArgs',
    'DashboardTemplateVariablePresetArgs',
    'DashboardTemplateVariablePresetTemplateVariableArgs',
    'DashboardWidgetArgs',
    'DashboardWidgetAlertGraphDefinitionArgs',
    'DashboardWidgetAlertGraphDefinitionTimeArgs',
    'DashboardWidgetAlertValueDefinitionArgs',
    'DashboardWidgetChangeDefinitionArgs',
    'DashboardWidgetChangeDefinitionCustomLinkArgs',
    'DashboardWidgetChangeDefinitionRequestArgs',
    'DashboardWidgetChangeDefinitionRequestApmQueryArgs',
    'DashboardWidgetChangeDefinitionRequestApmQueryComputeArgs',
    'DashboardWidgetChangeDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortArgs',
    'DashboardWidgetChangeDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetChangeDefinitionRequestApmQuerySearchArgs',
    'DashboardWidgetChangeDefinitionRequestLogQueryArgs',
    'DashboardWidgetChangeDefinitionRequestLogQueryComputeArgs',
    'DashboardWidgetChangeDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortArgs',
    'DashboardWidgetChangeDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetChangeDefinitionRequestLogQuerySearchArgs',
    'DashboardWidgetChangeDefinitionRequestProcessQueryArgs',
    'DashboardWidgetChangeDefinitionRequestRumQueryArgs',
    'DashboardWidgetChangeDefinitionRequestRumQueryComputeArgs',
    'DashboardWidgetChangeDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortArgs',
    'DashboardWidgetChangeDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetChangeDefinitionRequestRumQuerySearchArgs',
    'DashboardWidgetChangeDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetChangeDefinitionRequestSecurityQueryComputeArgs',
    'DashboardWidgetChangeDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortArgs',
    'DashboardWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetChangeDefinitionRequestSecurityQuerySearchArgs',
    'DashboardWidgetChangeDefinitionTimeArgs',
    'DashboardWidgetCheckStatusDefinitionArgs',
    'DashboardWidgetCheckStatusDefinitionTimeArgs',
    'DashboardWidgetDistributionDefinitionArgs',
    'DashboardWidgetDistributionDefinitionRequestArgs',
    'DashboardWidgetDistributionDefinitionRequestApmQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestApmQueryComputeArgs',
    'DashboardWidgetDistributionDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortArgs',
    'DashboardWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetDistributionDefinitionRequestApmQuerySearchArgs',
    'DashboardWidgetDistributionDefinitionRequestLogQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestLogQueryComputeArgs',
    'DashboardWidgetDistributionDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortArgs',
    'DashboardWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetDistributionDefinitionRequestLogQuerySearchArgs',
    'DashboardWidgetDistributionDefinitionRequestProcessQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestRumQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestRumQueryComputeArgs',
    'DashboardWidgetDistributionDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortArgs',
    'DashboardWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetDistributionDefinitionRequestRumQuerySearchArgs',
    'DashboardWidgetDistributionDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeArgs',
    'DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortArgs',
    'DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetDistributionDefinitionRequestSecurityQuerySearchArgs',
    'DashboardWidgetDistributionDefinitionRequestStyleArgs',
    'DashboardWidgetDistributionDefinitionTimeArgs',
    'DashboardWidgetEventStreamDefinitionArgs',
    'DashboardWidgetEventStreamDefinitionTimeArgs',
    'DashboardWidgetEventTimelineDefinitionArgs',
    'DashboardWidgetEventTimelineDefinitionTimeArgs',
    'DashboardWidgetFreeTextDefinitionArgs',
    'DashboardWidgetGroupDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetArgs',
    'DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionTimeArgs',
    'DashboardWidgetGroupDefinitionWidgetAlertValueDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionTimeArgs',
    'DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionTimeArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionTimeArgs',
    'DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionTimeArgs',
    'DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionTimeArgs',
    'DashboardWidgetGroupDefinitionWidgetFreeTextDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEventArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionTimeArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxisArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetIframeDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetImageDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetLayoutArgs',
    'DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSortArgs',
    'DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionTimeArgs',
    'DashboardWidgetGroupDefinitionWidgetManageStatusDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetNoteDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormatArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionTimeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormatArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionTimeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxisArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxisArgs',
    'DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetServicemapDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEventArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarkerArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadataArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxisArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionTimeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormatArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionTimeArgs',
    'DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionTimeArgs',
    'DashboardWidgetHeatmapDefinitionArgs',
    'DashboardWidgetHeatmapDefinitionCustomLinkArgs',
    'DashboardWidgetHeatmapDefinitionEventArgs',
    'DashboardWidgetHeatmapDefinitionRequestArgs',
    'DashboardWidgetHeatmapDefinitionRequestApmQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestApmQueryComputeArgs',
    'DashboardWidgetHeatmapDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortArgs',
    'DashboardWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetHeatmapDefinitionRequestApmQuerySearchArgs',
    'DashboardWidgetHeatmapDefinitionRequestLogQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestLogQueryComputeArgs',
    'DashboardWidgetHeatmapDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortArgs',
    'DashboardWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetHeatmapDefinitionRequestLogQuerySearchArgs',
    'DashboardWidgetHeatmapDefinitionRequestProcessQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestRumQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestRumQueryComputeArgs',
    'DashboardWidgetHeatmapDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortArgs',
    'DashboardWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetHeatmapDefinitionRequestRumQuerySearchArgs',
    'DashboardWidgetHeatmapDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeArgs',
    'DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortArgs',
    'DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetHeatmapDefinitionRequestSecurityQuerySearchArgs',
    'DashboardWidgetHeatmapDefinitionRequestStyleArgs',
    'DashboardWidgetHeatmapDefinitionTimeArgs',
    'DashboardWidgetHeatmapDefinitionYaxisArgs',
    'DashboardWidgetHostmapDefinitionArgs',
    'DashboardWidgetHostmapDefinitionCustomLinkArgs',
    'DashboardWidgetHostmapDefinitionRequestArgs',
    'DashboardWidgetHostmapDefinitionRequestFillArgs',
    'DashboardWidgetHostmapDefinitionRequestFillApmQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs',
    'DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortArgs',
    'DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestFillApmQuerySearchArgs',
    'DashboardWidgetHostmapDefinitionRequestFillLogQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs',
    'DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortArgs',
    'DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestFillLogQuerySearchArgs',
    'DashboardWidgetHostmapDefinitionRequestFillProcessQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillRumQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs',
    'DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortArgs',
    'DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestFillRumQuerySearchArgs',
    'DashboardWidgetHostmapDefinitionRequestFillSecurityQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs',
    'DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortArgs',
    'DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestFillSecurityQuerySearchArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeApmQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeApmQuerySearchArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeLogQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeLogQuerySearchArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeProcessQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeRumQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeRumQuerySearchArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeSecurityQuerySearchArgs',
    'DashboardWidgetHostmapDefinitionStyleArgs',
    'DashboardWidgetIframeDefinitionArgs',
    'DashboardWidgetImageDefinitionArgs',
    'DashboardWidgetLayoutArgs',
    'DashboardWidgetLogStreamDefinitionArgs',
    'DashboardWidgetLogStreamDefinitionSortArgs',
    'DashboardWidgetLogStreamDefinitionTimeArgs',
    'DashboardWidgetManageStatusDefinitionArgs',
    'DashboardWidgetNoteDefinitionArgs',
    'DashboardWidgetQueryTableDefinitionArgs',
    'DashboardWidgetQueryTableDefinitionCustomLinkArgs',
    'DashboardWidgetQueryTableDefinitionRequestArgs',
    'DashboardWidgetQueryTableDefinitionRequestApmQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestApmQueryComputeArgs',
    'DashboardWidgetQueryTableDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortArgs',
    'DashboardWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetQueryTableDefinitionRequestApmQuerySearchArgs',
    'DashboardWidgetQueryTableDefinitionRequestApmStatsQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs',
    'DashboardWidgetQueryTableDefinitionRequestConditionalFormatArgs',
    'DashboardWidgetQueryTableDefinitionRequestLogQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestLogQueryComputeArgs',
    'DashboardWidgetQueryTableDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortArgs',
    'DashboardWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetQueryTableDefinitionRequestLogQuerySearchArgs',
    'DashboardWidgetQueryTableDefinitionRequestProcessQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestRumQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestRumQueryComputeArgs',
    'DashboardWidgetQueryTableDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortArgs',
    'DashboardWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetQueryTableDefinitionRequestRumQuerySearchArgs',
    'DashboardWidgetQueryTableDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeArgs',
    'DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortArgs',
    'DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetQueryTableDefinitionRequestSecurityQuerySearchArgs',
    'DashboardWidgetQueryTableDefinitionTimeArgs',
    'DashboardWidgetQueryValueDefinitionArgs',
    'DashboardWidgetQueryValueDefinitionCustomLinkArgs',
    'DashboardWidgetQueryValueDefinitionRequestArgs',
    'DashboardWidgetQueryValueDefinitionRequestApmQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestApmQueryComputeArgs',
    'DashboardWidgetQueryValueDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortArgs',
    'DashboardWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetQueryValueDefinitionRequestApmQuerySearchArgs',
    'DashboardWidgetQueryValueDefinitionRequestConditionalFormatArgs',
    'DashboardWidgetQueryValueDefinitionRequestLogQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestLogQueryComputeArgs',
    'DashboardWidgetQueryValueDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortArgs',
    'DashboardWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetQueryValueDefinitionRequestLogQuerySearchArgs',
    'DashboardWidgetQueryValueDefinitionRequestProcessQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestRumQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestRumQueryComputeArgs',
    'DashboardWidgetQueryValueDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortArgs',
    'DashboardWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetQueryValueDefinitionRequestRumQuerySearchArgs',
    'DashboardWidgetQueryValueDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeArgs',
    'DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortArgs',
    'DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetQueryValueDefinitionRequestSecurityQuerySearchArgs',
    'DashboardWidgetQueryValueDefinitionTimeArgs',
    'DashboardWidgetScatterplotDefinitionArgs',
    'DashboardWidgetScatterplotDefinitionCustomLinkArgs',
    'DashboardWidgetScatterplotDefinitionRequestArgs',
    'DashboardWidgetScatterplotDefinitionRequestXArgs',
    'DashboardWidgetScatterplotDefinitionRequestXApmQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs',
    'DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortArgs',
    'DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestXApmQuerySearchArgs',
    'DashboardWidgetScatterplotDefinitionRequestXLogQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs',
    'DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortArgs',
    'DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestXLogQuerySearchArgs',
    'DashboardWidgetScatterplotDefinitionRequestXProcessQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXRumQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs',
    'DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortArgs',
    'DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestXRumQuerySearchArgs',
    'DashboardWidgetScatterplotDefinitionRequestXSecurityQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs',
    'DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortArgs',
    'DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestXSecurityQuerySearchArgs',
    'DashboardWidgetScatterplotDefinitionRequestYArgs',
    'DashboardWidgetScatterplotDefinitionRequestYApmQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs',
    'DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortArgs',
    'DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestYApmQuerySearchArgs',
    'DashboardWidgetScatterplotDefinitionRequestYLogQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs',
    'DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortArgs',
    'DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestYLogQuerySearchArgs',
    'DashboardWidgetScatterplotDefinitionRequestYProcessQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYRumQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs',
    'DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortArgs',
    'DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestYRumQuerySearchArgs',
    'DashboardWidgetScatterplotDefinitionRequestYSecurityQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs',
    'DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortArgs',
    'DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestYSecurityQuerySearchArgs',
    'DashboardWidgetScatterplotDefinitionTimeArgs',
    'DashboardWidgetScatterplotDefinitionXaxisArgs',
    'DashboardWidgetScatterplotDefinitionYaxisArgs',
    'DashboardWidgetServiceLevelObjectiveDefinitionArgs',
    'DashboardWidgetServicemapDefinitionArgs',
    'DashboardWidgetServicemapDefinitionCustomLinkArgs',
    'DashboardWidgetTimeseriesDefinitionArgs',
    'DashboardWidgetTimeseriesDefinitionCustomLinkArgs',
    'DashboardWidgetTimeseriesDefinitionEventArgs',
    'DashboardWidgetTimeseriesDefinitionMarkerArgs',
    'DashboardWidgetTimeseriesDefinitionRequestArgs',
    'DashboardWidgetTimeseriesDefinitionRequestApmQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeArgs',
    'DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortArgs',
    'DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetTimeseriesDefinitionRequestApmQuerySearchArgs',
    'DashboardWidgetTimeseriesDefinitionRequestLogQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeArgs',
    'DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortArgs',
    'DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetTimeseriesDefinitionRequestLogQuerySearchArgs',
    'DashboardWidgetTimeseriesDefinitionRequestMetadataArgs',
    'DashboardWidgetTimeseriesDefinitionRequestNetworkQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeArgs',
    'DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs',
    'DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortArgs',
    'DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs',
    'DashboardWidgetTimeseriesDefinitionRequestNetworkQuerySearchArgs',
    'DashboardWidgetTimeseriesDefinitionRequestProcessQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestRumQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeArgs',
    'DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortArgs',
    'DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetTimeseriesDefinitionRequestRumQuerySearchArgs',
    'DashboardWidgetTimeseriesDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeArgs',
    'DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortArgs',
    'DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetTimeseriesDefinitionRequestSecurityQuerySearchArgs',
    'DashboardWidgetTimeseriesDefinitionRequestStyleArgs',
    'DashboardWidgetTimeseriesDefinitionRightYaxisArgs',
    'DashboardWidgetTimeseriesDefinitionTimeArgs',
    'DashboardWidgetTimeseriesDefinitionYaxisArgs',
    'DashboardWidgetToplistDefinitionArgs',
    'DashboardWidgetToplistDefinitionCustomLinkArgs',
    'DashboardWidgetToplistDefinitionRequestArgs',
    'DashboardWidgetToplistDefinitionRequestApmQueryArgs',
    'DashboardWidgetToplistDefinitionRequestApmQueryComputeArgs',
    'DashboardWidgetToplistDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortArgs',
    'DashboardWidgetToplistDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetToplistDefinitionRequestApmQuerySearchArgs',
    'DashboardWidgetToplistDefinitionRequestConditionalFormatArgs',
    'DashboardWidgetToplistDefinitionRequestLogQueryArgs',
    'DashboardWidgetToplistDefinitionRequestLogQueryComputeArgs',
    'DashboardWidgetToplistDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortArgs',
    'DashboardWidgetToplistDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetToplistDefinitionRequestLogQuerySearchArgs',
    'DashboardWidgetToplistDefinitionRequestProcessQueryArgs',
    'DashboardWidgetToplistDefinitionRequestRumQueryArgs',
    'DashboardWidgetToplistDefinitionRequestRumQueryComputeArgs',
    'DashboardWidgetToplistDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortArgs',
    'DashboardWidgetToplistDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetToplistDefinitionRequestRumQuerySearchArgs',
    'DashboardWidgetToplistDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetToplistDefinitionRequestSecurityQueryComputeArgs',
    'DashboardWidgetToplistDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortArgs',
    'DashboardWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetToplistDefinitionRequestSecurityQuerySearchArgs',
    'DashboardWidgetToplistDefinitionRequestStyleArgs',
    'DashboardWidgetToplistDefinitionTimeArgs',
    'DashboardWidgetTraceServiceDefinitionArgs',
    'DashboardWidgetTraceServiceDefinitionTimeArgs',
    'DowntimeRecurrenceArgs',
    'LogsArchiveAzureArgs',
    'LogsArchiveGcsArgs',
    'LogsArchiveS3Args',
    'LogsCustomPipelineFilterArgs',
    'LogsCustomPipelineProcessorArgs',
    'LogsCustomPipelineProcessorArithmeticProcessorArgs',
    'LogsCustomPipelineProcessorAttributeRemapperArgs',
    'LogsCustomPipelineProcessorCategoryProcessorArgs',
    'LogsCustomPipelineProcessorCategoryProcessorCategoryArgs',
    'LogsCustomPipelineProcessorCategoryProcessorCategoryFilterArgs',
    'LogsCustomPipelineProcessorDateRemapperArgs',
    'LogsCustomPipelineProcessorGeoIpParserArgs',
    'LogsCustomPipelineProcessorGrokParserArgs',
    'LogsCustomPipelineProcessorGrokParserGrokArgs',
    'LogsCustomPipelineProcessorLookupProcessorArgs',
    'LogsCustomPipelineProcessorMessageRemapperArgs',
    'LogsCustomPipelineProcessorPipelineArgs',
    'LogsCustomPipelineProcessorPipelineFilterArgs',
    'LogsCustomPipelineProcessorPipelineProcessorArgs',
    'LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessorArgs',
    'LogsCustomPipelineProcessorPipelineProcessorAttributeRemapperArgs',
    'LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorArgs',
    'LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryArgs',
    'LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilterArgs',
    'LogsCustomPipelineProcessorPipelineProcessorDateRemapperArgs',
    'LogsCustomPipelineProcessorPipelineProcessorGeoIpParserArgs',
    'LogsCustomPipelineProcessorPipelineProcessorGrokParserArgs',
    'LogsCustomPipelineProcessorPipelineProcessorGrokParserGrokArgs',
    'LogsCustomPipelineProcessorPipelineProcessorLookupProcessorArgs',
    'LogsCustomPipelineProcessorPipelineProcessorMessageRemapperArgs',
    'LogsCustomPipelineProcessorPipelineProcessorServiceRemapperArgs',
    'LogsCustomPipelineProcessorPipelineProcessorStatusRemapperArgs',
    'LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessorArgs',
    'LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapperArgs',
    'LogsCustomPipelineProcessorPipelineProcessorUrlParserArgs',
    'LogsCustomPipelineProcessorPipelineProcessorUserAgentParserArgs',
    'LogsCustomPipelineProcessorServiceRemapperArgs',
    'LogsCustomPipelineProcessorStatusRemapperArgs',
    'LogsCustomPipelineProcessorStringBuilderProcessorArgs',
    'LogsCustomPipelineProcessorTraceIdRemapperArgs',
    'LogsCustomPipelineProcessorUrlParserArgs',
    'LogsCustomPipelineProcessorUserAgentParserArgs',
    'LogsIndexExclusionFilterArgs',
    'LogsIndexExclusionFilterFilterArgs',
    'LogsIndexFilterArgs',
    'MonitorThresholdWindowsArgs',
    'MonitorThresholdsArgs',
    'ScreenBoardTemplateVariableArgs',
    'ScreenBoardWidgetArgs',
    'ScreenBoardWidgetRuleArgs',
    'ScreenBoardWidgetTileDefArgs',
    'ScreenBoardWidgetTileDefEventArgs',
    'ScreenBoardWidgetTileDefMarkerArgs',
    'ScreenBoardWidgetTileDefRequestArgs',
    'ScreenBoardWidgetTileDefRequestApmQueryArgs',
    'ScreenBoardWidgetTileDefRequestApmQueryComputeArgs',
    'ScreenBoardWidgetTileDefRequestApmQueryGroupByArgs',
    'ScreenBoardWidgetTileDefRequestApmQueryGroupBySortArgs',
    'ScreenBoardWidgetTileDefRequestApmQuerySearchArgs',
    'ScreenBoardWidgetTileDefRequestConditionalFormatArgs',
    'ScreenBoardWidgetTileDefRequestLogQueryArgs',
    'ScreenBoardWidgetTileDefRequestLogQueryComputeArgs',
    'ScreenBoardWidgetTileDefRequestLogQueryGroupByArgs',
    'ScreenBoardWidgetTileDefRequestLogQueryGroupBySortArgs',
    'ScreenBoardWidgetTileDefRequestLogQuerySearchArgs',
    'ScreenBoardWidgetTileDefRequestProcessQueryArgs',
    'ServiceLevelObjectiveQueryArgs',
    'ServiceLevelObjectiveThresholdArgs',
    'SyntheticsTestOptionsArgs',
    'SyntheticsTestOptionsListArgs',
    'SyntheticsTestOptionsListMonitorOptionsArgs',
    'SyntheticsTestOptionsListRetryArgs',
    'SyntheticsTestRequestArgs',
    'SyntheticsTestRequestBasicauthArgs',
    'SyntheticsTestRequestClientCertificateArgs',
    'SyntheticsTestRequestClientCertificateCertArgs',
    'SyntheticsTestRequestClientCertificateKeyArgs',
    'SyntheticsTestStepArgs',
    'SyntheticsTestVariableArgs',
    'TimeBoardGraphArgs',
    'TimeBoardGraphMarkerArgs',
    'TimeBoardGraphRequestArgs',
    'TimeBoardGraphRequestApmQueryArgs',
    'TimeBoardGraphRequestApmQueryComputeArgs',
    'TimeBoardGraphRequestApmQueryGroupByArgs',
    'TimeBoardGraphRequestApmQueryGroupBySortArgs',
    'TimeBoardGraphRequestApmQuerySearchArgs',
    'TimeBoardGraphRequestConditionalFormatArgs',
    'TimeBoardGraphRequestLogQueryArgs',
    'TimeBoardGraphRequestLogQueryComputeArgs',
    'TimeBoardGraphRequestLogQueryGroupByArgs',
    'TimeBoardGraphRequestLogQueryGroupBySortArgs',
    'TimeBoardGraphRequestLogQuerySearchArgs',
    'TimeBoardGraphRequestProcessQueryArgs',
    'TimeBoardTemplateVariableArgs',
]

@pulumi.input_type
class DashboardListDashItemArgs:
    def __init__(__self__, *,
                 dash_id: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "dash_id", dash_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="dashId")
    def dash_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dash_id")

    @dash_id.setter
    def dash_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dash_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DashboardTemplateVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 default: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class DashboardTemplateVariablePresetArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 template_variables: pulumi.Input[Sequence[pulumi.Input['DashboardTemplateVariablePresetTemplateVariableArgs']]]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "template_variables", template_variables)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="templateVariables")
    def template_variables(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardTemplateVariablePresetTemplateVariableArgs']]]:
        return pulumi.get(self, "template_variables")

    @template_variables.setter
    def template_variables(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardTemplateVariablePresetTemplateVariableArgs']]]):
        pulumi.set(self, "template_variables", value)


@pulumi.input_type
class DashboardTemplateVariablePresetTemplateVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardWidgetArgs:
    def __init__(__self__, *,
                 alert_graph_definition: Optional[pulumi.Input['DashboardWidgetAlertGraphDefinitionArgs']] = None,
                 alert_value_definition: Optional[pulumi.Input['DashboardWidgetAlertValueDefinitionArgs']] = None,
                 change_definition: Optional[pulumi.Input['DashboardWidgetChangeDefinitionArgs']] = None,
                 check_status_definition: Optional[pulumi.Input['DashboardWidgetCheckStatusDefinitionArgs']] = None,
                 distribution_definition: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionArgs']] = None,
                 event_stream_definition: Optional[pulumi.Input['DashboardWidgetEventStreamDefinitionArgs']] = None,
                 event_timeline_definition: Optional[pulumi.Input['DashboardWidgetEventTimelineDefinitionArgs']] = None,
                 free_text_definition: Optional[pulumi.Input['DashboardWidgetFreeTextDefinitionArgs']] = None,
                 group_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionArgs']] = None,
                 heatmap_definition: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionArgs']] = None,
                 hostmap_definition: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionArgs']] = None,
                 iframe_definition: Optional[pulumi.Input['DashboardWidgetIframeDefinitionArgs']] = None,
                 image_definition: Optional[pulumi.Input['DashboardWidgetImageDefinitionArgs']] = None,
                 layout: Optional[pulumi.Input['DashboardWidgetLayoutArgs']] = None,
                 log_stream_definition: Optional[pulumi.Input['DashboardWidgetLogStreamDefinitionArgs']] = None,
                 manage_status_definition: Optional[pulumi.Input['DashboardWidgetManageStatusDefinitionArgs']] = None,
                 note_definition: Optional[pulumi.Input['DashboardWidgetNoteDefinitionArgs']] = None,
                 query_table_definition: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionArgs']] = None,
                 query_value_definition: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionArgs']] = None,
                 scatterplot_definition: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionArgs']] = None,
                 service_level_objective_definition: Optional[pulumi.Input['DashboardWidgetServiceLevelObjectiveDefinitionArgs']] = None,
                 servicemap_definition: Optional[pulumi.Input['DashboardWidgetServicemapDefinitionArgs']] = None,
                 timeseries_definition: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionArgs']] = None,
                 toplist_definition: Optional[pulumi.Input['DashboardWidgetToplistDefinitionArgs']] = None,
                 trace_service_definition: Optional[pulumi.Input['DashboardWidgetTraceServiceDefinitionArgs']] = None):
        if alert_graph_definition is not None:
            pulumi.set(__self__, "alert_graph_definition", alert_graph_definition)
        if alert_value_definition is not None:
            pulumi.set(__self__, "alert_value_definition", alert_value_definition)
        if change_definition is not None:
            pulumi.set(__self__, "change_definition", change_definition)
        if check_status_definition is not None:
            pulumi.set(__self__, "check_status_definition", check_status_definition)
        if distribution_definition is not None:
            pulumi.set(__self__, "distribution_definition", distribution_definition)
        if event_stream_definition is not None:
            pulumi.set(__self__, "event_stream_definition", event_stream_definition)
        if event_timeline_definition is not None:
            pulumi.set(__self__, "event_timeline_definition", event_timeline_definition)
        if free_text_definition is not None:
            pulumi.set(__self__, "free_text_definition", free_text_definition)
        if group_definition is not None:
            pulumi.set(__self__, "group_definition", group_definition)
        if heatmap_definition is not None:
            pulumi.set(__self__, "heatmap_definition", heatmap_definition)
        if hostmap_definition is not None:
            pulumi.set(__self__, "hostmap_definition", hostmap_definition)
        if iframe_definition is not None:
            pulumi.set(__self__, "iframe_definition", iframe_definition)
        if image_definition is not None:
            pulumi.set(__self__, "image_definition", image_definition)
        if layout is not None:
            pulumi.set(__self__, "layout", layout)
        if log_stream_definition is not None:
            pulumi.set(__self__, "log_stream_definition", log_stream_definition)
        if manage_status_definition is not None:
            pulumi.set(__self__, "manage_status_definition", manage_status_definition)
        if note_definition is not None:
            pulumi.set(__self__, "note_definition", note_definition)
        if query_table_definition is not None:
            pulumi.set(__self__, "query_table_definition", query_table_definition)
        if query_value_definition is not None:
            pulumi.set(__self__, "query_value_definition", query_value_definition)
        if scatterplot_definition is not None:
            pulumi.set(__self__, "scatterplot_definition", scatterplot_definition)
        if service_level_objective_definition is not None:
            pulumi.set(__self__, "service_level_objective_definition", service_level_objective_definition)
        if servicemap_definition is not None:
            pulumi.set(__self__, "servicemap_definition", servicemap_definition)
        if timeseries_definition is not None:
            pulumi.set(__self__, "timeseries_definition", timeseries_definition)
        if toplist_definition is not None:
            pulumi.set(__self__, "toplist_definition", toplist_definition)
        if trace_service_definition is not None:
            pulumi.set(__self__, "trace_service_definition", trace_service_definition)

    @property
    @pulumi.getter(name="alertGraphDefinition")
    def alert_graph_definition(self) -> Optional[pulumi.Input['DashboardWidgetAlertGraphDefinitionArgs']]:
        return pulumi.get(self, "alert_graph_definition")

    @alert_graph_definition.setter
    def alert_graph_definition(self, value: Optional[pulumi.Input['DashboardWidgetAlertGraphDefinitionArgs']]):
        pulumi.set(self, "alert_graph_definition", value)

    @property
    @pulumi.getter(name="alertValueDefinition")
    def alert_value_definition(self) -> Optional[pulumi.Input['DashboardWidgetAlertValueDefinitionArgs']]:
        return pulumi.get(self, "alert_value_definition")

    @alert_value_definition.setter
    def alert_value_definition(self, value: Optional[pulumi.Input['DashboardWidgetAlertValueDefinitionArgs']]):
        pulumi.set(self, "alert_value_definition", value)

    @property
    @pulumi.getter(name="changeDefinition")
    def change_definition(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionArgs']]:
        return pulumi.get(self, "change_definition")

    @change_definition.setter
    def change_definition(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionArgs']]):
        pulumi.set(self, "change_definition", value)

    @property
    @pulumi.getter(name="checkStatusDefinition")
    def check_status_definition(self) -> Optional[pulumi.Input['DashboardWidgetCheckStatusDefinitionArgs']]:
        return pulumi.get(self, "check_status_definition")

    @check_status_definition.setter
    def check_status_definition(self, value: Optional[pulumi.Input['DashboardWidgetCheckStatusDefinitionArgs']]):
        pulumi.set(self, "check_status_definition", value)

    @property
    @pulumi.getter(name="distributionDefinition")
    def distribution_definition(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionArgs']]:
        return pulumi.get(self, "distribution_definition")

    @distribution_definition.setter
    def distribution_definition(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionArgs']]):
        pulumi.set(self, "distribution_definition", value)

    @property
    @pulumi.getter(name="eventStreamDefinition")
    def event_stream_definition(self) -> Optional[pulumi.Input['DashboardWidgetEventStreamDefinitionArgs']]:
        return pulumi.get(self, "event_stream_definition")

    @event_stream_definition.setter
    def event_stream_definition(self, value: Optional[pulumi.Input['DashboardWidgetEventStreamDefinitionArgs']]):
        pulumi.set(self, "event_stream_definition", value)

    @property
    @pulumi.getter(name="eventTimelineDefinition")
    def event_timeline_definition(self) -> Optional[pulumi.Input['DashboardWidgetEventTimelineDefinitionArgs']]:
        return pulumi.get(self, "event_timeline_definition")

    @event_timeline_definition.setter
    def event_timeline_definition(self, value: Optional[pulumi.Input['DashboardWidgetEventTimelineDefinitionArgs']]):
        pulumi.set(self, "event_timeline_definition", value)

    @property
    @pulumi.getter(name="freeTextDefinition")
    def free_text_definition(self) -> Optional[pulumi.Input['DashboardWidgetFreeTextDefinitionArgs']]:
        return pulumi.get(self, "free_text_definition")

    @free_text_definition.setter
    def free_text_definition(self, value: Optional[pulumi.Input['DashboardWidgetFreeTextDefinitionArgs']]):
        pulumi.set(self, "free_text_definition", value)

    @property
    @pulumi.getter(name="groupDefinition")
    def group_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionArgs']]:
        return pulumi.get(self, "group_definition")

    @group_definition.setter
    def group_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionArgs']]):
        pulumi.set(self, "group_definition", value)

    @property
    @pulumi.getter(name="heatmapDefinition")
    def heatmap_definition(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionArgs']]:
        return pulumi.get(self, "heatmap_definition")

    @heatmap_definition.setter
    def heatmap_definition(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionArgs']]):
        pulumi.set(self, "heatmap_definition", value)

    @property
    @pulumi.getter(name="hostmapDefinition")
    def hostmap_definition(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionArgs']]:
        return pulumi.get(self, "hostmap_definition")

    @hostmap_definition.setter
    def hostmap_definition(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionArgs']]):
        pulumi.set(self, "hostmap_definition", value)

    @property
    @pulumi.getter(name="iframeDefinition")
    def iframe_definition(self) -> Optional[pulumi.Input['DashboardWidgetIframeDefinitionArgs']]:
        return pulumi.get(self, "iframe_definition")

    @iframe_definition.setter
    def iframe_definition(self, value: Optional[pulumi.Input['DashboardWidgetIframeDefinitionArgs']]):
        pulumi.set(self, "iframe_definition", value)

    @property
    @pulumi.getter(name="imageDefinition")
    def image_definition(self) -> Optional[pulumi.Input['DashboardWidgetImageDefinitionArgs']]:
        return pulumi.get(self, "image_definition")

    @image_definition.setter
    def image_definition(self, value: Optional[pulumi.Input['DashboardWidgetImageDefinitionArgs']]):
        pulumi.set(self, "image_definition", value)

    @property
    @pulumi.getter
    def layout(self) -> Optional[pulumi.Input['DashboardWidgetLayoutArgs']]:
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: Optional[pulumi.Input['DashboardWidgetLayoutArgs']]):
        pulumi.set(self, "layout", value)

    @property
    @pulumi.getter(name="logStreamDefinition")
    def log_stream_definition(self) -> Optional[pulumi.Input['DashboardWidgetLogStreamDefinitionArgs']]:
        return pulumi.get(self, "log_stream_definition")

    @log_stream_definition.setter
    def log_stream_definition(self, value: Optional[pulumi.Input['DashboardWidgetLogStreamDefinitionArgs']]):
        pulumi.set(self, "log_stream_definition", value)

    @property
    @pulumi.getter(name="manageStatusDefinition")
    def manage_status_definition(self) -> Optional[pulumi.Input['DashboardWidgetManageStatusDefinitionArgs']]:
        return pulumi.get(self, "manage_status_definition")

    @manage_status_definition.setter
    def manage_status_definition(self, value: Optional[pulumi.Input['DashboardWidgetManageStatusDefinitionArgs']]):
        pulumi.set(self, "manage_status_definition", value)

    @property
    @pulumi.getter(name="noteDefinition")
    def note_definition(self) -> Optional[pulumi.Input['DashboardWidgetNoteDefinitionArgs']]:
        return pulumi.get(self, "note_definition")

    @note_definition.setter
    def note_definition(self, value: Optional[pulumi.Input['DashboardWidgetNoteDefinitionArgs']]):
        pulumi.set(self, "note_definition", value)

    @property
    @pulumi.getter(name="queryTableDefinition")
    def query_table_definition(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionArgs']]:
        return pulumi.get(self, "query_table_definition")

    @query_table_definition.setter
    def query_table_definition(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionArgs']]):
        pulumi.set(self, "query_table_definition", value)

    @property
    @pulumi.getter(name="queryValueDefinition")
    def query_value_definition(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionArgs']]:
        return pulumi.get(self, "query_value_definition")

    @query_value_definition.setter
    def query_value_definition(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionArgs']]):
        pulumi.set(self, "query_value_definition", value)

    @property
    @pulumi.getter(name="scatterplotDefinition")
    def scatterplot_definition(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionArgs']]:
        return pulumi.get(self, "scatterplot_definition")

    @scatterplot_definition.setter
    def scatterplot_definition(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionArgs']]):
        pulumi.set(self, "scatterplot_definition", value)

    @property
    @pulumi.getter(name="serviceLevelObjectiveDefinition")
    def service_level_objective_definition(self) -> Optional[pulumi.Input['DashboardWidgetServiceLevelObjectiveDefinitionArgs']]:
        return pulumi.get(self, "service_level_objective_definition")

    @service_level_objective_definition.setter
    def service_level_objective_definition(self, value: Optional[pulumi.Input['DashboardWidgetServiceLevelObjectiveDefinitionArgs']]):
        pulumi.set(self, "service_level_objective_definition", value)

    @property
    @pulumi.getter(name="servicemapDefinition")
    def servicemap_definition(self) -> Optional[pulumi.Input['DashboardWidgetServicemapDefinitionArgs']]:
        return pulumi.get(self, "servicemap_definition")

    @servicemap_definition.setter
    def servicemap_definition(self, value: Optional[pulumi.Input['DashboardWidgetServicemapDefinitionArgs']]):
        pulumi.set(self, "servicemap_definition", value)

    @property
    @pulumi.getter(name="timeseriesDefinition")
    def timeseries_definition(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionArgs']]:
        return pulumi.get(self, "timeseries_definition")

    @timeseries_definition.setter
    def timeseries_definition(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionArgs']]):
        pulumi.set(self, "timeseries_definition", value)

    @property
    @pulumi.getter(name="toplistDefinition")
    def toplist_definition(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionArgs']]:
        return pulumi.get(self, "toplist_definition")

    @toplist_definition.setter
    def toplist_definition(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionArgs']]):
        pulumi.set(self, "toplist_definition", value)

    @property
    @pulumi.getter(name="traceServiceDefinition")
    def trace_service_definition(self) -> Optional[pulumi.Input['DashboardWidgetTraceServiceDefinitionArgs']]:
        return pulumi.get(self, "trace_service_definition")

    @trace_service_definition.setter
    def trace_service_definition(self, value: Optional[pulumi.Input['DashboardWidgetTraceServiceDefinitionArgs']]):
        pulumi.set(self, "trace_service_definition", value)


@pulumi.input_type
class DashboardWidgetAlertGraphDefinitionArgs:
    def __init__(__self__, *,
                 alert_id: pulumi.Input[str],
                 viz_type: pulumi.Input[str],
                 time: Optional[pulumi.Input['DashboardWidgetAlertGraphDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "alert_id", alert_id)
        pulumi.set(__self__, "viz_type", viz_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "alert_id")

    @alert_id.setter
    def alert_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "alert_id", value)

    @property
    @pulumi.getter(name="vizType")
    def viz_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "viz_type")

    @viz_type.setter
    def viz_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "viz_type", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetAlertGraphDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetAlertGraphDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetAlertGraphDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetAlertValueDefinitionArgs:
    def __init__(__self__, *,
                 alert_id: pulumi.Input[str],
                 precision: Optional[pulumi.Input[int]] = None,
                 text_align: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "alert_id", alert_id)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "alert_id")

    @alert_id.setter
    def alert_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "alert_id", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionCustomLinkArgs']]]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestArgs']]]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetChangeDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryArgs']] = None,
                 change_type: Optional[pulumi.Input[str]] = None,
                 compare_to: Optional[pulumi.Input[str]] = None,
                 increase_good: Optional[pulumi.Input[bool]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryArgs']] = None,
                 order_by: Optional[pulumi.Input[str]] = None,
                 order_dir: Optional[pulumi.Input[str]] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryArgs']] = None,
                 show_present: Optional[pulumi.Input[bool]] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if change_type is not None:
            pulumi.set(__self__, "change_type", change_type)
        if compare_to is not None:
            pulumi.set(__self__, "compare_to", compare_to)
        if increase_good is not None:
            pulumi.set(__self__, "increase_good", increase_good)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if order_by is not None:
            pulumi.set(__self__, "order_by", order_by)
        if order_dir is not None:
            pulumi.set(__self__, "order_dir", order_dir)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if show_present is not None:
            pulumi.set(__self__, "show_present", show_present)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="changeType")
    def change_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "change_type")

    @change_type.setter
    def change_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "change_type", value)

    @property
    @pulumi.getter(name="compareTo")
    def compare_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compare_to")

    @compare_to.setter
    def compare_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compare_to", value)

    @property
    @pulumi.getter(name="increaseGood")
    def increase_good(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "increase_good")

    @increase_good.setter
    def increase_good(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "increase_good", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "order_by")

    @order_by.setter
    def order_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_by", value)

    @property
    @pulumi.getter(name="orderDir")
    def order_dir(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "order_dir")

    @order_dir.setter
    def order_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_dir", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter(name="showPresent")
    def show_present(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_present")

    @show_present.setter
    def show_present(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_present", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetCheckStatusDefinitionArgs:
    def __init__(__self__, *,
                 check: pulumi.Input[str],
                 grouping: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetCheckStatusDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "check", check)
        pulumi.set(__self__, "grouping", grouping)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def check(self) -> pulumi.Input[str]:
        return pulumi.get(self, "check")

    @check.setter
    def check(self, value: pulumi.Input[str]):
        pulumi.set(self, "check", value)

    @property
    @pulumi.getter
    def grouping(self) -> pulumi.Input[str]:
        return pulumi.get(self, "grouping")

    @grouping.setter
    def grouping(self, value: pulumi.Input[str]):
        pulumi.set(self, "grouping", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetCheckStatusDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetCheckStatusDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetCheckStatusDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionArgs:
    def __init__(__self__, *,
                 legend_size: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestArgs']]]] = None,
                 show_legend: Optional[pulumi.Input[bool]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "legend_size")

    @legend_size.setter
    def legend_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend_size", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_legend")

    @show_legend.setter
    def show_legend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_legend", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestStyleArgs']] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None):
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetEventStreamDefinitionArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 event_size: Optional[pulumi.Input[str]] = None,
                 tags_execution: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetEventStreamDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "query", query)
        if event_size is not None:
            pulumi.set(__self__, "event_size", event_size)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="eventSize")
    def event_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event_size")

    @event_size.setter
    def event_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_size", value)

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tags_execution")

    @tags_execution.setter
    def tags_execution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags_execution", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetEventStreamDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetEventStreamDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetEventStreamDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetEventTimelineDefinitionArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 tags_execution: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetEventTimelineDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "query", query)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tags_execution")

    @tags_execution.setter
    def tags_execution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags_execution", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetEventTimelineDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetEventTimelineDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetEventTimelineDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetFreeTextDefinitionArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 color: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[str]] = None,
                 text_align: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "text", text)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionArgs:
    def __init__(__self__, *,
                 layout_type: pulumi.Input[str],
                 widgets: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetArgs']]],
                 title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "layout_type", layout_type)
        pulumi.set(__self__, "widgets", widgets)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="layoutType")
    def layout_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "layout_type")

    @layout_type.setter
    def layout_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "layout_type", value)

    @property
    @pulumi.getter
    def widgets(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetArgs']]]:
        return pulumi.get(self, "widgets")

    @widgets.setter
    def widgets(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetArgs']]]):
        pulumi.set(self, "widgets", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetArgs:
    def __init__(__self__, *,
                 alert_graph_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionArgs']] = None,
                 alert_value_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetAlertValueDefinitionArgs']] = None,
                 change_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionArgs']] = None,
                 check_status_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionArgs']] = None,
                 distribution_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionArgs']] = None,
                 event_stream_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionArgs']] = None,
                 event_timeline_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionArgs']] = None,
                 free_text_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetFreeTextDefinitionArgs']] = None,
                 heatmap_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionArgs']] = None,
                 hostmap_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionArgs']] = None,
                 iframe_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetIframeDefinitionArgs']] = None,
                 image_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetImageDefinitionArgs']] = None,
                 layout: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLayoutArgs']] = None,
                 log_stream_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionArgs']] = None,
                 manage_status_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetManageStatusDefinitionArgs']] = None,
                 note_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetNoteDefinitionArgs']] = None,
                 query_table_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionArgs']] = None,
                 query_value_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs']] = None,
                 scatterplot_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionArgs']] = None,
                 service_level_objective_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionArgs']] = None,
                 servicemap_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServicemapDefinitionArgs']] = None,
                 timeseries_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionArgs']] = None,
                 toplist_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionArgs']] = None,
                 trace_service_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionArgs']] = None):
        if alert_graph_definition is not None:
            pulumi.set(__self__, "alert_graph_definition", alert_graph_definition)
        if alert_value_definition is not None:
            pulumi.set(__self__, "alert_value_definition", alert_value_definition)
        if change_definition is not None:
            pulumi.set(__self__, "change_definition", change_definition)
        if check_status_definition is not None:
            pulumi.set(__self__, "check_status_definition", check_status_definition)
        if distribution_definition is not None:
            pulumi.set(__self__, "distribution_definition", distribution_definition)
        if event_stream_definition is not None:
            pulumi.set(__self__, "event_stream_definition", event_stream_definition)
        if event_timeline_definition is not None:
            pulumi.set(__self__, "event_timeline_definition", event_timeline_definition)
        if free_text_definition is not None:
            pulumi.set(__self__, "free_text_definition", free_text_definition)
        if heatmap_definition is not None:
            pulumi.set(__self__, "heatmap_definition", heatmap_definition)
        if hostmap_definition is not None:
            pulumi.set(__self__, "hostmap_definition", hostmap_definition)
        if iframe_definition is not None:
            pulumi.set(__self__, "iframe_definition", iframe_definition)
        if image_definition is not None:
            pulumi.set(__self__, "image_definition", image_definition)
        if layout is not None:
            pulumi.set(__self__, "layout", layout)
        if log_stream_definition is not None:
            pulumi.set(__self__, "log_stream_definition", log_stream_definition)
        if manage_status_definition is not None:
            pulumi.set(__self__, "manage_status_definition", manage_status_definition)
        if note_definition is not None:
            pulumi.set(__self__, "note_definition", note_definition)
        if query_table_definition is not None:
            pulumi.set(__self__, "query_table_definition", query_table_definition)
        if query_value_definition is not None:
            pulumi.set(__self__, "query_value_definition", query_value_definition)
        if scatterplot_definition is not None:
            pulumi.set(__self__, "scatterplot_definition", scatterplot_definition)
        if service_level_objective_definition is not None:
            pulumi.set(__self__, "service_level_objective_definition", service_level_objective_definition)
        if servicemap_definition is not None:
            pulumi.set(__self__, "servicemap_definition", servicemap_definition)
        if timeseries_definition is not None:
            pulumi.set(__self__, "timeseries_definition", timeseries_definition)
        if toplist_definition is not None:
            pulumi.set(__self__, "toplist_definition", toplist_definition)
        if trace_service_definition is not None:
            pulumi.set(__self__, "trace_service_definition", trace_service_definition)

    @property
    @pulumi.getter(name="alertGraphDefinition")
    def alert_graph_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionArgs']]:
        return pulumi.get(self, "alert_graph_definition")

    @alert_graph_definition.setter
    def alert_graph_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionArgs']]):
        pulumi.set(self, "alert_graph_definition", value)

    @property
    @pulumi.getter(name="alertValueDefinition")
    def alert_value_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetAlertValueDefinitionArgs']]:
        return pulumi.get(self, "alert_value_definition")

    @alert_value_definition.setter
    def alert_value_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetAlertValueDefinitionArgs']]):
        pulumi.set(self, "alert_value_definition", value)

    @property
    @pulumi.getter(name="changeDefinition")
    def change_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionArgs']]:
        return pulumi.get(self, "change_definition")

    @change_definition.setter
    def change_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionArgs']]):
        pulumi.set(self, "change_definition", value)

    @property
    @pulumi.getter(name="checkStatusDefinition")
    def check_status_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionArgs']]:
        return pulumi.get(self, "check_status_definition")

    @check_status_definition.setter
    def check_status_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionArgs']]):
        pulumi.set(self, "check_status_definition", value)

    @property
    @pulumi.getter(name="distributionDefinition")
    def distribution_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionArgs']]:
        return pulumi.get(self, "distribution_definition")

    @distribution_definition.setter
    def distribution_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionArgs']]):
        pulumi.set(self, "distribution_definition", value)

    @property
    @pulumi.getter(name="eventStreamDefinition")
    def event_stream_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionArgs']]:
        return pulumi.get(self, "event_stream_definition")

    @event_stream_definition.setter
    def event_stream_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionArgs']]):
        pulumi.set(self, "event_stream_definition", value)

    @property
    @pulumi.getter(name="eventTimelineDefinition")
    def event_timeline_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionArgs']]:
        return pulumi.get(self, "event_timeline_definition")

    @event_timeline_definition.setter
    def event_timeline_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionArgs']]):
        pulumi.set(self, "event_timeline_definition", value)

    @property
    @pulumi.getter(name="freeTextDefinition")
    def free_text_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetFreeTextDefinitionArgs']]:
        return pulumi.get(self, "free_text_definition")

    @free_text_definition.setter
    def free_text_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetFreeTextDefinitionArgs']]):
        pulumi.set(self, "free_text_definition", value)

    @property
    @pulumi.getter(name="heatmapDefinition")
    def heatmap_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionArgs']]:
        return pulumi.get(self, "heatmap_definition")

    @heatmap_definition.setter
    def heatmap_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionArgs']]):
        pulumi.set(self, "heatmap_definition", value)

    @property
    @pulumi.getter(name="hostmapDefinition")
    def hostmap_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionArgs']]:
        return pulumi.get(self, "hostmap_definition")

    @hostmap_definition.setter
    def hostmap_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionArgs']]):
        pulumi.set(self, "hostmap_definition", value)

    @property
    @pulumi.getter(name="iframeDefinition")
    def iframe_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetIframeDefinitionArgs']]:
        return pulumi.get(self, "iframe_definition")

    @iframe_definition.setter
    def iframe_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetIframeDefinitionArgs']]):
        pulumi.set(self, "iframe_definition", value)

    @property
    @pulumi.getter(name="imageDefinition")
    def image_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetImageDefinitionArgs']]:
        return pulumi.get(self, "image_definition")

    @image_definition.setter
    def image_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetImageDefinitionArgs']]):
        pulumi.set(self, "image_definition", value)

    @property
    @pulumi.getter
    def layout(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLayoutArgs']]:
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLayoutArgs']]):
        pulumi.set(self, "layout", value)

    @property
    @pulumi.getter(name="logStreamDefinition")
    def log_stream_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionArgs']]:
        return pulumi.get(self, "log_stream_definition")

    @log_stream_definition.setter
    def log_stream_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionArgs']]):
        pulumi.set(self, "log_stream_definition", value)

    @property
    @pulumi.getter(name="manageStatusDefinition")
    def manage_status_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetManageStatusDefinitionArgs']]:
        return pulumi.get(self, "manage_status_definition")

    @manage_status_definition.setter
    def manage_status_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetManageStatusDefinitionArgs']]):
        pulumi.set(self, "manage_status_definition", value)

    @property
    @pulumi.getter(name="noteDefinition")
    def note_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetNoteDefinitionArgs']]:
        return pulumi.get(self, "note_definition")

    @note_definition.setter
    def note_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetNoteDefinitionArgs']]):
        pulumi.set(self, "note_definition", value)

    @property
    @pulumi.getter(name="queryTableDefinition")
    def query_table_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionArgs']]:
        return pulumi.get(self, "query_table_definition")

    @query_table_definition.setter
    def query_table_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionArgs']]):
        pulumi.set(self, "query_table_definition", value)

    @property
    @pulumi.getter(name="queryValueDefinition")
    def query_value_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs']]:
        return pulumi.get(self, "query_value_definition")

    @query_value_definition.setter
    def query_value_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs']]):
        pulumi.set(self, "query_value_definition", value)

    @property
    @pulumi.getter(name="scatterplotDefinition")
    def scatterplot_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionArgs']]:
        return pulumi.get(self, "scatterplot_definition")

    @scatterplot_definition.setter
    def scatterplot_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionArgs']]):
        pulumi.set(self, "scatterplot_definition", value)

    @property
    @pulumi.getter(name="serviceLevelObjectiveDefinition")
    def service_level_objective_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionArgs']]:
        return pulumi.get(self, "service_level_objective_definition")

    @service_level_objective_definition.setter
    def service_level_objective_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionArgs']]):
        pulumi.set(self, "service_level_objective_definition", value)

    @property
    @pulumi.getter(name="servicemapDefinition")
    def servicemap_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServicemapDefinitionArgs']]:
        return pulumi.get(self, "servicemap_definition")

    @servicemap_definition.setter
    def servicemap_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServicemapDefinitionArgs']]):
        pulumi.set(self, "servicemap_definition", value)

    @property
    @pulumi.getter(name="timeseriesDefinition")
    def timeseries_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionArgs']]:
        return pulumi.get(self, "timeseries_definition")

    @timeseries_definition.setter
    def timeseries_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionArgs']]):
        pulumi.set(self, "timeseries_definition", value)

    @property
    @pulumi.getter(name="toplistDefinition")
    def toplist_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionArgs']]:
        return pulumi.get(self, "toplist_definition")

    @toplist_definition.setter
    def toplist_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionArgs']]):
        pulumi.set(self, "toplist_definition", value)

    @property
    @pulumi.getter(name="traceServiceDefinition")
    def trace_service_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionArgs']]:
        return pulumi.get(self, "trace_service_definition")

    @trace_service_definition.setter
    def trace_service_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionArgs']]):
        pulumi.set(self, "trace_service_definition", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionArgs:
    def __init__(__self__, *,
                 alert_id: pulumi.Input[str],
                 viz_type: pulumi.Input[str],
                 time: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "alert_id", alert_id)
        pulumi.set(__self__, "viz_type", viz_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "alert_id")

    @alert_id.setter
    def alert_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "alert_id", value)

    @property
    @pulumi.getter(name="vizType")
    def viz_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "viz_type")

    @viz_type.setter
    def viz_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "viz_type", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetAlertValueDefinitionArgs:
    def __init__(__self__, *,
                 alert_id: pulumi.Input[str],
                 precision: Optional[pulumi.Input[int]] = None,
                 text_align: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "alert_id", alert_id)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "alert_id")

    @alert_id.setter
    def alert_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "alert_id", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLinkArgs']]]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestArgs']]]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryArgs']] = None,
                 change_type: Optional[pulumi.Input[str]] = None,
                 compare_to: Optional[pulumi.Input[str]] = None,
                 increase_good: Optional[pulumi.Input[bool]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryArgs']] = None,
                 order_by: Optional[pulumi.Input[str]] = None,
                 order_dir: Optional[pulumi.Input[str]] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryArgs']] = None,
                 show_present: Optional[pulumi.Input[bool]] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if change_type is not None:
            pulumi.set(__self__, "change_type", change_type)
        if compare_to is not None:
            pulumi.set(__self__, "compare_to", compare_to)
        if increase_good is not None:
            pulumi.set(__self__, "increase_good", increase_good)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if order_by is not None:
            pulumi.set(__self__, "order_by", order_by)
        if order_dir is not None:
            pulumi.set(__self__, "order_dir", order_dir)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if show_present is not None:
            pulumi.set(__self__, "show_present", show_present)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="changeType")
    def change_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "change_type")

    @change_type.setter
    def change_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "change_type", value)

    @property
    @pulumi.getter(name="compareTo")
    def compare_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compare_to")

    @compare_to.setter
    def compare_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compare_to", value)

    @property
    @pulumi.getter(name="increaseGood")
    def increase_good(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "increase_good")

    @increase_good.setter
    def increase_good(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "increase_good", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "order_by")

    @order_by.setter
    def order_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_by", value)

    @property
    @pulumi.getter(name="orderDir")
    def order_dir(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "order_dir")

    @order_dir.setter
    def order_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_dir", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter(name="showPresent")
    def show_present(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_present")

    @show_present.setter
    def show_present(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_present", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionArgs:
    def __init__(__self__, *,
                 check: pulumi.Input[str],
                 grouping: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "check", check)
        pulumi.set(__self__, "grouping", grouping)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def check(self) -> pulumi.Input[str]:
        return pulumi.get(self, "check")

    @check.setter
    def check(self, value: pulumi.Input[str]):
        pulumi.set(self, "check", value)

    @property
    @pulumi.getter
    def grouping(self) -> pulumi.Input[str]:
        return pulumi.get(self, "grouping")

    @grouping.setter
    def grouping(self, value: pulumi.Input[str]):
        pulumi.set(self, "grouping", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionArgs:
    def __init__(__self__, *,
                 legend_size: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestArgs']]]] = None,
                 show_legend: Optional[pulumi.Input[bool]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "legend_size")

    @legend_size.setter
    def legend_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend_size", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_legend")

    @show_legend.setter
    def show_legend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_legend", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyleArgs']] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None):
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 event_size: Optional[pulumi.Input[str]] = None,
                 tags_execution: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "query", query)
        if event_size is not None:
            pulumi.set(__self__, "event_size", event_size)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="eventSize")
    def event_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event_size")

    @event_size.setter
    def event_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_size", value)

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tags_execution")

    @tags_execution.setter
    def tags_execution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags_execution", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 tags_execution: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "query", query)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tags_execution")

    @tags_execution.setter
    def tags_execution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags_execution", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetFreeTextDefinitionArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 color: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[str]] = None,
                 text_align: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "text", text)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLinkArgs']]]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEventArgs']]]] = None,
                 legend_size: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestArgs']]]] = None,
                 show_legend: Optional[pulumi.Input[bool]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None,
                 yaxis: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxisArgs']] = None):
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEventArgs']]]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEventArgs']]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "legend_size")

    @legend_size.setter
    def legend_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend_size", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_legend")

    @show_legend.setter
    def show_legend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_legend", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)

    @property
    @pulumi.getter
    def yaxis(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxisArgs']]:
        return pulumi.get(self, "yaxis")

    @yaxis.setter
    def yaxis(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxisArgs']]):
        pulumi.set(self, "yaxis", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEventArgs:
    def __init__(__self__, *,
                 q: pulumi.Input[str],
                 tags_execution: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "q", q)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)

    @property
    @pulumi.getter
    def q(self) -> pulumi.Input[str]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: pulumi.Input[str]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tags_execution")

    @tags_execution.setter
    def tags_execution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags_execution", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyleArgs']] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None):
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLinkArgs']]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 no_group_hosts: Optional[pulumi.Input[bool]] = None,
                 no_metric_hosts: Optional[pulumi.Input[bool]] = None,
                 node_type: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestArgs']] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyleArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if no_group_hosts is not None:
            pulumi.set(__self__, "no_group_hosts", no_group_hosts)
        if no_metric_hosts is not None:
            pulumi.set(__self__, "no_metric_hosts", no_metric_hosts)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="noGroupHosts")
    def no_group_hosts(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_group_hosts")

    @no_group_hosts.setter
    def no_group_hosts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_group_hosts", value)

    @property
    @pulumi.getter(name="noMetricHosts")
    def no_metric_hosts(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_metric_hosts")

    @no_metric_hosts.setter
    def no_metric_hosts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_metric_hosts", value)

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestArgs']]:
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestArgs']]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyleArgs']]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestArgs:
    def __init__(__self__, *,
                 fills: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillArgs']]]] = None,
                 sizes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeArgs']]]] = None):
        if fills is not None:
            pulumi.set(__self__, "fills", fills)
        if sizes is not None:
            pulumi.set(__self__, "sizes", sizes)

    @property
    @pulumi.getter
    def fills(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillArgs']]]]:
        return pulumi.get(self, "fills")

    @fills.setter
    def fills(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillArgs']]]]):
        pulumi.set(self, "fills", value)

    @property
    @pulumi.getter
    def sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeArgs']]]]:
        return pulumi.get(self, "sizes")

    @sizes.setter
    def sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeArgs']]]]):
        pulumi.set(self, "sizes", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryArgs']] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryArgs']] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyleArgs:
    def __init__(__self__, *,
                 fill_max: Optional[pulumi.Input[str]] = None,
                 fill_min: Optional[pulumi.Input[str]] = None,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_flip: Optional[pulumi.Input[bool]] = None):
        if fill_max is not None:
            pulumi.set(__self__, "fill_max", fill_max)
        if fill_min is not None:
            pulumi.set(__self__, "fill_min", fill_min)
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_flip is not None:
            pulumi.set(__self__, "palette_flip", palette_flip)

    @property
    @pulumi.getter(name="fillMax")
    def fill_max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fill_max")

    @fill_max.setter
    def fill_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_max", value)

    @property
    @pulumi.getter(name="fillMin")
    def fill_min(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fill_min")

    @fill_min.setter
    def fill_min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_min", value)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteFlip")
    def palette_flip(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "palette_flip")

    @palette_flip.setter
    def palette_flip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "palette_flip", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetIframeDefinitionArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetImageDefinitionArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 margin: Optional[pulumi.Input[str]] = None,
                 sizing: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "url", url)
        if margin is not None:
            pulumi.set(__self__, "margin", margin)
        if sizing is not None:
            pulumi.set(__self__, "sizing", sizing)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def margin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "margin")

    @margin.setter
    def margin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "margin", value)

    @property
    @pulumi.getter
    def sizing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sizing")

    @sizing.setter
    def sizing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sizing", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetLayoutArgs:
    def __init__(__self__, *,
                 height: pulumi.Input[float],
                 width: pulumi.Input[float],
                 x: pulumi.Input[float],
                 y: pulumi.Input[float]):
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "width", width)
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def height(self) -> pulumi.Input[float]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: pulumi.Input[float]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def width(self) -> pulumi.Input[float]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: pulumi.Input[float]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter
    def x(self) -> pulumi.Input[float]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: pulumi.Input[float]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter
    def y(self) -> pulumi.Input[float]:
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: pulumi.Input[float]):
        pulumi.set(self, "y", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionArgs:
    def __init__(__self__, *,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 logset: Optional[pulumi.Input[str]] = None,
                 message_display: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 show_date_column: Optional[pulumi.Input[bool]] = None,
                 show_message_column: Optional[pulumi.Input[bool]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSortArgs']] = None,
                 time: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if logset is not None:
            warnings.warn("""This parameter has been deprecated. Use 'indexes' instead""", DeprecationWarning)
            pulumi.log.warn("logset is deprecated: This parameter has been deprecated. Use 'indexes' instead")
        if logset is not None:
            pulumi.set(__self__, "logset", logset)
        if message_display is not None:
            pulumi.set(__self__, "message_display", message_display)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if show_date_column is not None:
            pulumi.set(__self__, "show_date_column", show_date_column)
        if show_message_column is not None:
            pulumi.set(__self__, "show_message_column", show_message_column)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def logset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logset")

    @logset.setter
    def logset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logset", value)

    @property
    @pulumi.getter(name="messageDisplay")
    def message_display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_display")

    @message_display.setter
    def message_display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_display", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="showDateColumn")
    def show_date_column(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_date_column")

    @show_date_column.setter
    def show_date_column(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_date_column", value)

    @property
    @pulumi.getter(name="showMessageColumn")
    def show_message_column(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_message_column")

    @show_message_column.setter
    def show_message_column(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_message_column", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSortArgs']]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSortArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[str],
                 order: pulumi.Input[str]):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[str]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetManageStatusDefinitionArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 color_preference: Optional[pulumi.Input[str]] = None,
                 count: Optional[pulumi.Input[int]] = None,
                 display_format: Optional[pulumi.Input[str]] = None,
                 hide_zero_counts: Optional[pulumi.Input[bool]] = None,
                 show_last_triggered: Optional[pulumi.Input[bool]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[int]] = None,
                 summary_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "query", query)
        if color_preference is not None:
            pulumi.set(__self__, "color_preference", color_preference)
        if count is not None:
            warnings.warn("""This parameter has been deprecated""", DeprecationWarning)
            pulumi.log.warn("count is deprecated: This parameter has been deprecated")
        if count is not None:
            pulumi.set(__self__, "count", count)
        if display_format is not None:
            pulumi.set(__self__, "display_format", display_format)
        if hide_zero_counts is not None:
            pulumi.set(__self__, "hide_zero_counts", hide_zero_counts)
        if show_last_triggered is not None:
            pulumi.set(__self__, "show_last_triggered", show_last_triggered)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if start is not None:
            warnings.warn("""This parameter has been deprecated""", DeprecationWarning)
            pulumi.log.warn("start is deprecated: This parameter has been deprecated")
        if start is not None:
            pulumi.set(__self__, "start", start)
        if summary_type is not None:
            pulumi.set(__self__, "summary_type", summary_type)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="colorPreference")
    def color_preference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color_preference")

    @color_preference.setter
    def color_preference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_preference", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="displayFormat")
    def display_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_format")

    @display_format.setter
    def display_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_format", value)

    @property
    @pulumi.getter(name="hideZeroCounts")
    def hide_zero_counts(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hide_zero_counts")

    @hide_zero_counts.setter
    def hide_zero_counts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_zero_counts", value)

    @property
    @pulumi.getter(name="showLastTriggered")
    def show_last_triggered(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_last_triggered")

    @show_last_triggered.setter
    def show_last_triggered(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_last_triggered", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start", value)

    @property
    @pulumi.getter(name="summaryType")
    def summary_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "summary_type")

    @summary_type.setter
    def summary_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetNoteDefinitionArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 background_color: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[str]] = None,
                 show_tick: Optional[pulumi.Input[bool]] = None,
                 text_align: Optional[pulumi.Input[str]] = None,
                 tick_edge: Optional[pulumi.Input[str]] = None,
                 tick_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "content", content)
        if background_color is not None:
            pulumi.set(__self__, "background_color", background_color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if show_tick is not None:
            pulumi.set(__self__, "show_tick", show_tick)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if tick_edge is not None:
            pulumi.set(__self__, "tick_edge", tick_edge)
        if tick_pos is not None:
            pulumi.set(__self__, "tick_pos", tick_pos)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="showTick")
    def show_tick(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_tick")

    @show_tick.setter
    def show_tick(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_tick", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)

    @property
    @pulumi.getter(name="tickEdge")
    def tick_edge(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tick_edge")

    @tick_edge.setter
    def tick_edge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tick_edge", value)

    @property
    @pulumi.getter(name="tickPos")
    def tick_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tick_pos")

    @tick_pos.setter
    def tick_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tick_pos", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLinkArgs']]]] = None,
                 has_search_bar: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs']]]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if has_search_bar is not None:
            pulumi.set(__self__, "has_search_bar", has_search_bar)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="hasSearchBar")
    def has_search_bar(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "has_search_bar")

    @has_search_bar.setter
    def has_search_bar(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "has_search_bar", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryArgs']] = None,
                 apm_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryArgs']] = None,
                 cell_display_modes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryArgs']] = None,
                 order: Optional[pulumi.Input[str]] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryArgs']] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if apm_stats_query is not None:
            pulumi.set(__self__, "apm_stats_query", apm_stats_query)
        if cell_display_modes is not None:
            pulumi.set(__self__, "cell_display_modes", cell_display_modes)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="apmStatsQuery")
    def apm_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryArgs']]:
        return pulumi.get(self, "apm_stats_query")

    @apm_stats_query.setter
    def apm_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryArgs']]):
        pulumi.set(self, "apm_stats_query", value)

    @property
    @pulumi.getter(name="cellDisplayModes")
    def cell_display_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cell_display_modes")

    @cell_display_modes.setter
    def cell_display_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cell_display_modes", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormatArgs']]]]:
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryArgs:
    def __init__(__self__, *,
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 primary_tag: pulumi.Input[str],
                 row_type: pulumi.Input[str],
                 service: pulumi.Input[str],
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs']]]] = None,
                 resource: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_tag", primary_tag)
        pulumi.set(__self__, "row_type", row_type)
        pulumi.set(__self__, "service", service)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryTag")
    def primary_tag(self) -> pulumi.Input[str]:
        return pulumi.get(self, "primary_tag")

    @primary_tag.setter
    def primary_tag(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_tag", value)

    @property
    @pulumi.getter(name="rowType")
    def row_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "row_type")

    @row_type.setter
    def row_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "row_type", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs']]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs']]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs:
    def __init__(__self__, *,
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLinkArgs']]]] = None,
                 custom_unit: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestArgs']]]] = None,
                 text_align: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if custom_unit is not None:
            pulumi.set(__self__, "custom_unit", custom_unit)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="customUnit")
    def custom_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_unit")

    @custom_unit.setter
    def custom_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_unit", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryArgs']] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormatArgs']]]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryArgs']] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormatArgs']]]]:
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionArgs:
    def __init__(__self__, *,
                 color_by_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLinkArgs']]]] = None,
                 request: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestArgs']] = None,
                 time: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None,
                 xaxis: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxisArgs']] = None,
                 yaxis: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxisArgs']] = None):
        if color_by_groups is not None:
            pulumi.set(__self__, "color_by_groups", color_by_groups)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if xaxis is not None:
            pulumi.set(__self__, "xaxis", xaxis)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="colorByGroups")
    def color_by_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "color_by_groups")

    @color_by_groups.setter
    def color_by_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "color_by_groups", value)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestArgs']]:
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestArgs']]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)

    @property
    @pulumi.getter
    def xaxis(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxisArgs']]:
        return pulumi.get(self, "xaxis")

    @xaxis.setter
    def xaxis(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxisArgs']]):
        pulumi.set(self, "xaxis", value)

    @property
    @pulumi.getter
    def yaxis(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxisArgs']]:
        return pulumi.get(self, "yaxis")

    @yaxis.setter
    def yaxis(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxisArgs']]):
        pulumi.set(self, "yaxis", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestArgs:
    def __init__(__self__, *,
                 xes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXArgs']]]] = None,
                 ys: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYArgs']]]] = None):
        if xes is not None:
            pulumi.set(__self__, "xes", xes)
        if ys is not None:
            pulumi.set(__self__, "ys", ys)

    @property
    @pulumi.getter
    def xes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXArgs']]]]:
        return pulumi.get(self, "xes")

    @xes.setter
    def xes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXArgs']]]]):
        pulumi.set(self, "xes", value)

    @property
    @pulumi.getter
    def ys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYArgs']]]]:
        return pulumi.get(self, "ys")

    @ys.setter
    def ys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYArgs']]]]):
        pulumi.set(self, "ys", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryArgs']] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryArgs']] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionArgs:
    def __init__(__self__, *,
                 slo_id: pulumi.Input[str],
                 time_windows: pulumi.Input[Sequence[pulumi.Input[str]]],
                 view_mode: pulumi.Input[str],
                 view_type: pulumi.Input[str],
                 show_error_budget: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "slo_id", slo_id)
        pulumi.set(__self__, "time_windows", time_windows)
        pulumi.set(__self__, "view_mode", view_mode)
        pulumi.set(__self__, "view_type", view_type)
        if show_error_budget is not None:
            pulumi.set(__self__, "show_error_budget", show_error_budget)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter(name="viewMode")
    def view_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "view_mode")

    @view_mode.setter
    def view_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "view_mode", value)

    @property
    @pulumi.getter(name="viewType")
    def view_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "view_type")

    @view_type.setter
    def view_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "view_type", value)

    @property
    @pulumi.getter(name="showErrorBudget")
    def show_error_budget(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_error_budget")

    @show_error_budget.setter
    def show_error_budget(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_error_budget", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetServicemapDefinitionArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input[str]]],
                 service: pulumi.Input[str],
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLinkArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "service", service)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLinkArgs']]]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEventArgs']]]] = None,
                 legend_size: Optional[pulumi.Input[str]] = None,
                 markers: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarkerArgs']]]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestArgs']]]] = None,
                 right_yaxis: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxisArgs']] = None,
                 show_legend: Optional[pulumi.Input[bool]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None,
                 yaxis: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisArgs']] = None):
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if markers is not None:
            pulumi.set(__self__, "markers", markers)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if right_yaxis is not None:
            pulumi.set(__self__, "right_yaxis", right_yaxis)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEventArgs']]]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEventArgs']]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "legend_size")

    @legend_size.setter
    def legend_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend_size", value)

    @property
    @pulumi.getter
    def markers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarkerArgs']]]]:
        return pulumi.get(self, "markers")

    @markers.setter
    def markers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarkerArgs']]]]):
        pulumi.set(self, "markers", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="rightYaxis")
    def right_yaxis(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxisArgs']]:
        return pulumi.get(self, "right_yaxis")

    @right_yaxis.setter
    def right_yaxis(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxisArgs']]):
        pulumi.set(self, "right_yaxis", value)

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_legend")

    @show_legend.setter
    def show_legend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_legend", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)

    @property
    @pulumi.getter
    def yaxis(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisArgs']]:
        return pulumi.get(self, "yaxis")

    @yaxis.setter
    def yaxis(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisArgs']]):
        pulumi.set(self, "yaxis", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEventArgs:
    def __init__(__self__, *,
                 q: pulumi.Input[str],
                 tags_execution: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "q", q)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)

    @property
    @pulumi.getter
    def q(self) -> pulumi.Input[str]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: pulumi.Input[str]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tags_execution")

    @tags_execution.setter
    def tags_execution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags_execution", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarkerArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 display_type: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "value", value)
        if display_type is not None:
            pulumi.set(__self__, "display_type", display_type)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="displayType")
    def display_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_type")

    @display_type.setter
    def display_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_type", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryArgs']] = None,
                 display_type: Optional[pulumi.Input[str]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryArgs']] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadataArgs']]]] = None,
                 network_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryArgs']] = None,
                 on_right_yaxis: Optional[pulumi.Input[bool]] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyleArgs']] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if display_type is not None:
            pulumi.set(__self__, "display_type", display_type)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if network_query is not None:
            pulumi.set(__self__, "network_query", network_query)
        if on_right_yaxis is not None:
            pulumi.set(__self__, "on_right_yaxis", on_right_yaxis)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="displayType")
    def display_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_type")

    @display_type.setter
    def display_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_type", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadataArgs']]]]:
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadataArgs']]]]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter(name="networkQuery")
    def network_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryArgs']]:
        return pulumi.get(self, "network_query")

    @network_query.setter
    def network_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryArgs']]):
        pulumi.set(self, "network_query", value)

    @property
    @pulumi.getter(name="onRightYaxis")
    def on_right_yaxis(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "on_right_yaxis")

    @on_right_yaxis.setter
    def on_right_yaxis(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_right_yaxis", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadataArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 alias_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        if alias_name is not None:
            pulumi.set(__self__, "alias_name", alias_name)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="aliasName")
    def alias_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alias_name")

    @alias_name.setter
    def alias_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias_name", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 line_type: Optional[pulumi.Input[str]] = None,
                 line_width: Optional[pulumi.Input[str]] = None,
                 palette: Optional[pulumi.Input[str]] = None):
        if line_type is not None:
            pulumi.set(__self__, "line_type", line_type)
        if line_width is not None:
            pulumi.set(__self__, "line_width", line_width)
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter(name="lineType")
    def line_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "line_type")

    @line_type.setter
    def line_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_type", value)

    @property
    @pulumi.getter(name="lineWidth")
    def line_width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "line_width")

    @line_width.setter
    def line_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_width", value)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLinkArgs']]]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestArgs']]]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryArgs']] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormatArgs']]]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyleArgs']] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormatArgs']]]]:
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None):
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionArgs:
    def __init__(__self__, *,
                 env: pulumi.Input[str],
                 service: pulumi.Input[str],
                 span_name: pulumi.Input[str],
                 display_format: Optional[pulumi.Input[str]] = None,
                 show_breakdown: Optional[pulumi.Input[bool]] = None,
                 show_distribution: Optional[pulumi.Input[bool]] = None,
                 show_errors: Optional[pulumi.Input[bool]] = None,
                 show_hits: Optional[pulumi.Input[bool]] = None,
                 show_latency: Optional[pulumi.Input[bool]] = None,
                 show_resource_list: Optional[pulumi.Input[bool]] = None,
                 size_format: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "span_name", span_name)
        if display_format is not None:
            pulumi.set(__self__, "display_format", display_format)
        if show_breakdown is not None:
            pulumi.set(__self__, "show_breakdown", show_breakdown)
        if show_distribution is not None:
            pulumi.set(__self__, "show_distribution", show_distribution)
        if show_errors is not None:
            pulumi.set(__self__, "show_errors", show_errors)
        if show_hits is not None:
            pulumi.set(__self__, "show_hits", show_hits)
        if show_latency is not None:
            pulumi.set(__self__, "show_latency", show_latency)
        if show_resource_list is not None:
            pulumi.set(__self__, "show_resource_list", show_resource_list)
        if size_format is not None:
            pulumi.set(__self__, "size_format", size_format)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="spanName")
    def span_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "span_name")

    @span_name.setter
    def span_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "span_name", value)

    @property
    @pulumi.getter(name="displayFormat")
    def display_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_format")

    @display_format.setter
    def display_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_format", value)

    @property
    @pulumi.getter(name="showBreakdown")
    def show_breakdown(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_breakdown")

    @show_breakdown.setter
    def show_breakdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_breakdown", value)

    @property
    @pulumi.getter(name="showDistribution")
    def show_distribution(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_distribution")

    @show_distribution.setter
    def show_distribution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_distribution", value)

    @property
    @pulumi.getter(name="showErrors")
    def show_errors(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_errors")

    @show_errors.setter
    def show_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_errors", value)

    @property
    @pulumi.getter(name="showHits")
    def show_hits(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_hits")

    @show_hits.setter
    def show_hits(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_hits", value)

    @property
    @pulumi.getter(name="showLatency")
    def show_latency(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_latency")

    @show_latency.setter
    def show_latency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_latency", value)

    @property
    @pulumi.getter(name="showResourceList")
    def show_resource_list(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_resource_list")

    @show_resource_list.setter
    def show_resource_list(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_resource_list", value)

    @property
    @pulumi.getter(name="sizeFormat")
    def size_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size_format")

    @size_format.setter
    def size_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_format", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionCustomLinkArgs']]]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionEventArgs']]]] = None,
                 legend_size: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestArgs']]]] = None,
                 show_legend: Optional[pulumi.Input[bool]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None,
                 yaxis: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionYaxisArgs']] = None):
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionEventArgs']]]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionEventArgs']]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "legend_size")

    @legend_size.setter
    def legend_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend_size", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_legend")

    @show_legend.setter
    def show_legend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_legend", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)

    @property
    @pulumi.getter
    def yaxis(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionYaxisArgs']]:
        return pulumi.get(self, "yaxis")

    @yaxis.setter
    def yaxis(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionYaxisArgs']]):
        pulumi.set(self, "yaxis", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionEventArgs:
    def __init__(__self__, *,
                 q: pulumi.Input[str],
                 tags_execution: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "q", q)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)

    @property
    @pulumi.getter
    def q(self) -> pulumi.Input[str]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: pulumi.Input[str]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tags_execution")

    @tags_execution.setter
    def tags_execution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags_execution", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestStyleArgs']] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None):
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionCustomLinkArgs']]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 no_group_hosts: Optional[pulumi.Input[bool]] = None,
                 no_metric_hosts: Optional[pulumi.Input[bool]] = None,
                 node_type: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestArgs']] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 style: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionStyleArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if no_group_hosts is not None:
            pulumi.set(__self__, "no_group_hosts", no_group_hosts)
        if no_metric_hosts is not None:
            pulumi.set(__self__, "no_metric_hosts", no_metric_hosts)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="noGroupHosts")
    def no_group_hosts(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_group_hosts")

    @no_group_hosts.setter
    def no_group_hosts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_group_hosts", value)

    @property
    @pulumi.getter(name="noMetricHosts")
    def no_metric_hosts(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_metric_hosts")

    @no_metric_hosts.setter
    def no_metric_hosts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_metric_hosts", value)

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestArgs']]:
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestArgs']]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionStyleArgs']]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestArgs:
    def __init__(__self__, *,
                 fills: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillArgs']]]] = None,
                 sizes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeArgs']]]] = None):
        if fills is not None:
            pulumi.set(__self__, "fills", fills)
        if sizes is not None:
            pulumi.set(__self__, "sizes", sizes)

    @property
    @pulumi.getter
    def fills(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillArgs']]]]:
        return pulumi.get(self, "fills")

    @fills.setter
    def fills(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillArgs']]]]):
        pulumi.set(self, "fills", value)

    @property
    @pulumi.getter
    def sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeArgs']]]]:
        return pulumi.get(self, "sizes")

    @sizes.setter
    def sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeArgs']]]]):
        pulumi.set(self, "sizes", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryArgs']] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryArgs']] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionStyleArgs:
    def __init__(__self__, *,
                 fill_max: Optional[pulumi.Input[str]] = None,
                 fill_min: Optional[pulumi.Input[str]] = None,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_flip: Optional[pulumi.Input[bool]] = None):
        if fill_max is not None:
            pulumi.set(__self__, "fill_max", fill_max)
        if fill_min is not None:
            pulumi.set(__self__, "fill_min", fill_min)
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_flip is not None:
            pulumi.set(__self__, "palette_flip", palette_flip)

    @property
    @pulumi.getter(name="fillMax")
    def fill_max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fill_max")

    @fill_max.setter
    def fill_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_max", value)

    @property
    @pulumi.getter(name="fillMin")
    def fill_min(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fill_min")

    @fill_min.setter
    def fill_min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_min", value)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteFlip")
    def palette_flip(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "palette_flip")

    @palette_flip.setter
    def palette_flip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "palette_flip", value)


@pulumi.input_type
class DashboardWidgetIframeDefinitionArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class DashboardWidgetImageDefinitionArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 margin: Optional[pulumi.Input[str]] = None,
                 sizing: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "url", url)
        if margin is not None:
            pulumi.set(__self__, "margin", margin)
        if sizing is not None:
            pulumi.set(__self__, "sizing", sizing)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def margin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "margin")

    @margin.setter
    def margin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "margin", value)

    @property
    @pulumi.getter
    def sizing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sizing")

    @sizing.setter
    def sizing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sizing", value)


@pulumi.input_type
class DashboardWidgetLayoutArgs:
    def __init__(__self__, *,
                 height: pulumi.Input[float],
                 width: pulumi.Input[float],
                 x: pulumi.Input[float],
                 y: pulumi.Input[float]):
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "width", width)
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def height(self) -> pulumi.Input[float]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: pulumi.Input[float]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def width(self) -> pulumi.Input[float]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: pulumi.Input[float]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter
    def x(self) -> pulumi.Input[float]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: pulumi.Input[float]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter
    def y(self) -> pulumi.Input[float]:
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: pulumi.Input[float]):
        pulumi.set(self, "y", value)


@pulumi.input_type
class DashboardWidgetLogStreamDefinitionArgs:
    def __init__(__self__, *,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 logset: Optional[pulumi.Input[str]] = None,
                 message_display: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 show_date_column: Optional[pulumi.Input[bool]] = None,
                 show_message_column: Optional[pulumi.Input[bool]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetLogStreamDefinitionSortArgs']] = None,
                 time: Optional[pulumi.Input['DashboardWidgetLogStreamDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if logset is not None:
            warnings.warn("""This parameter has been deprecated. Use 'indexes' instead""", DeprecationWarning)
            pulumi.log.warn("logset is deprecated: This parameter has been deprecated. Use 'indexes' instead")
        if logset is not None:
            pulumi.set(__self__, "logset", logset)
        if message_display is not None:
            pulumi.set(__self__, "message_display", message_display)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if show_date_column is not None:
            pulumi.set(__self__, "show_date_column", show_date_column)
        if show_message_column is not None:
            pulumi.set(__self__, "show_message_column", show_message_column)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def logset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logset")

    @logset.setter
    def logset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logset", value)

    @property
    @pulumi.getter(name="messageDisplay")
    def message_display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_display")

    @message_display.setter
    def message_display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_display", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="showDateColumn")
    def show_date_column(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_date_column")

    @show_date_column.setter
    def show_date_column(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_date_column", value)

    @property
    @pulumi.getter(name="showMessageColumn")
    def show_message_column(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_message_column")

    @show_message_column.setter
    def show_message_column(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_message_column", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetLogStreamDefinitionSortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetLogStreamDefinitionSortArgs']]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetLogStreamDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetLogStreamDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetLogStreamDefinitionSortArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[str],
                 order: pulumi.Input[str]):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[str]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetLogStreamDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetManageStatusDefinitionArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 color_preference: Optional[pulumi.Input[str]] = None,
                 count: Optional[pulumi.Input[int]] = None,
                 display_format: Optional[pulumi.Input[str]] = None,
                 hide_zero_counts: Optional[pulumi.Input[bool]] = None,
                 show_last_triggered: Optional[pulumi.Input[bool]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[int]] = None,
                 summary_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "query", query)
        if color_preference is not None:
            pulumi.set(__self__, "color_preference", color_preference)
        if count is not None:
            warnings.warn("""This parameter has been deprecated""", DeprecationWarning)
            pulumi.log.warn("count is deprecated: This parameter has been deprecated")
        if count is not None:
            pulumi.set(__self__, "count", count)
        if display_format is not None:
            pulumi.set(__self__, "display_format", display_format)
        if hide_zero_counts is not None:
            pulumi.set(__self__, "hide_zero_counts", hide_zero_counts)
        if show_last_triggered is not None:
            pulumi.set(__self__, "show_last_triggered", show_last_triggered)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if start is not None:
            warnings.warn("""This parameter has been deprecated""", DeprecationWarning)
            pulumi.log.warn("start is deprecated: This parameter has been deprecated")
        if start is not None:
            pulumi.set(__self__, "start", start)
        if summary_type is not None:
            pulumi.set(__self__, "summary_type", summary_type)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="colorPreference")
    def color_preference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color_preference")

    @color_preference.setter
    def color_preference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_preference", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="displayFormat")
    def display_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_format")

    @display_format.setter
    def display_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_format", value)

    @property
    @pulumi.getter(name="hideZeroCounts")
    def hide_zero_counts(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hide_zero_counts")

    @hide_zero_counts.setter
    def hide_zero_counts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_zero_counts", value)

    @property
    @pulumi.getter(name="showLastTriggered")
    def show_last_triggered(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_last_triggered")

    @show_last_triggered.setter
    def show_last_triggered(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_last_triggered", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start", value)

    @property
    @pulumi.getter(name="summaryType")
    def summary_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "summary_type")

    @summary_type.setter
    def summary_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetNoteDefinitionArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 background_color: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[str]] = None,
                 show_tick: Optional[pulumi.Input[bool]] = None,
                 text_align: Optional[pulumi.Input[str]] = None,
                 tick_edge: Optional[pulumi.Input[str]] = None,
                 tick_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "content", content)
        if background_color is not None:
            pulumi.set(__self__, "background_color", background_color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if show_tick is not None:
            pulumi.set(__self__, "show_tick", show_tick)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if tick_edge is not None:
            pulumi.set(__self__, "tick_edge", tick_edge)
        if tick_pos is not None:
            pulumi.set(__self__, "tick_pos", tick_pos)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="showTick")
    def show_tick(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_tick")

    @show_tick.setter
    def show_tick(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_tick", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)

    @property
    @pulumi.getter(name="tickEdge")
    def tick_edge(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tick_edge")

    @tick_edge.setter
    def tick_edge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tick_edge", value)

    @property
    @pulumi.getter(name="tickPos")
    def tick_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tick_pos")

    @tick_pos.setter
    def tick_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tick_pos", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionCustomLinkArgs']]]] = None,
                 has_search_bar: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestArgs']]]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if has_search_bar is not None:
            pulumi.set(__self__, "has_search_bar", has_search_bar)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="hasSearchBar")
    def has_search_bar(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "has_search_bar")

    @has_search_bar.setter
    def has_search_bar(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "has_search_bar", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryArgs']] = None,
                 apm_stats_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmStatsQueryArgs']] = None,
                 cell_display_modes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryArgs']] = None,
                 order: Optional[pulumi.Input[str]] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryArgs']] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if apm_stats_query is not None:
            pulumi.set(__self__, "apm_stats_query", apm_stats_query)
        if cell_display_modes is not None:
            pulumi.set(__self__, "cell_display_modes", cell_display_modes)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="apmStatsQuery")
    def apm_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmStatsQueryArgs']]:
        return pulumi.get(self, "apm_stats_query")

    @apm_stats_query.setter
    def apm_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmStatsQueryArgs']]):
        pulumi.set(self, "apm_stats_query", value)

    @property
    @pulumi.getter(name="cellDisplayModes")
    def cell_display_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cell_display_modes")

    @cell_display_modes.setter
    def cell_display_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cell_display_modes", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestConditionalFormatArgs']]]]:
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestApmStatsQueryArgs:
    def __init__(__self__, *,
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 primary_tag: pulumi.Input[str],
                 row_type: pulumi.Input[str],
                 service: pulumi.Input[str],
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs']]]] = None,
                 resource: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_tag", primary_tag)
        pulumi.set(__self__, "row_type", row_type)
        pulumi.set(__self__, "service", service)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryTag")
    def primary_tag(self) -> pulumi.Input[str]:
        return pulumi.get(self, "primary_tag")

    @primary_tag.setter
    def primary_tag(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_tag", value)

    @property
    @pulumi.getter(name="rowType")
    def row_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "row_type")

    @row_type.setter
    def row_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "row_type", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs']]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs']]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionArgs:
    def __init__(__self__, *,
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionCustomLinkArgs']]]] = None,
                 custom_unit: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestArgs']]]] = None,
                 text_align: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if custom_unit is not None:
            pulumi.set(__self__, "custom_unit", custom_unit)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="customUnit")
    def custom_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_unit")

    @custom_unit.setter
    def custom_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_unit", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryArgs']] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestConditionalFormatArgs']]]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryArgs']] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestConditionalFormatArgs']]]]:
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionArgs:
    def __init__(__self__, *,
                 color_by_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionCustomLinkArgs']]]] = None,
                 request: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestArgs']] = None,
                 time: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None,
                 xaxis: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionXaxisArgs']] = None,
                 yaxis: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionYaxisArgs']] = None):
        if color_by_groups is not None:
            pulumi.set(__self__, "color_by_groups", color_by_groups)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if xaxis is not None:
            pulumi.set(__self__, "xaxis", xaxis)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="colorByGroups")
    def color_by_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "color_by_groups")

    @color_by_groups.setter
    def color_by_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "color_by_groups", value)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestArgs']]:
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestArgs']]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)

    @property
    @pulumi.getter
    def xaxis(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionXaxisArgs']]:
        return pulumi.get(self, "xaxis")

    @xaxis.setter
    def xaxis(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionXaxisArgs']]):
        pulumi.set(self, "xaxis", value)

    @property
    @pulumi.getter
    def yaxis(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionYaxisArgs']]:
        return pulumi.get(self, "yaxis")

    @yaxis.setter
    def yaxis(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionYaxisArgs']]):
        pulumi.set(self, "yaxis", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestArgs:
    def __init__(__self__, *,
                 xes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXArgs']]]] = None,
                 ys: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYArgs']]]] = None):
        if xes is not None:
            pulumi.set(__self__, "xes", xes)
        if ys is not None:
            pulumi.set(__self__, "ys", ys)

    @property
    @pulumi.getter
    def xes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXArgs']]]]:
        return pulumi.get(self, "xes")

    @xes.setter
    def xes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXArgs']]]]):
        pulumi.set(self, "xes", value)

    @property
    @pulumi.getter
    def ys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYArgs']]]]:
        return pulumi.get(self, "ys")

    @ys.setter
    def ys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYArgs']]]]):
        pulumi.set(self, "ys", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryArgs']] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryArgs']] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionXaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetServiceLevelObjectiveDefinitionArgs:
    def __init__(__self__, *,
                 slo_id: pulumi.Input[str],
                 time_windows: pulumi.Input[Sequence[pulumi.Input[str]]],
                 view_mode: pulumi.Input[str],
                 view_type: pulumi.Input[str],
                 show_error_budget: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "slo_id", slo_id)
        pulumi.set(__self__, "time_windows", time_windows)
        pulumi.set(__self__, "view_mode", view_mode)
        pulumi.set(__self__, "view_type", view_type)
        if show_error_budget is not None:
            pulumi.set(__self__, "show_error_budget", show_error_budget)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter(name="viewMode")
    def view_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "view_mode")

    @view_mode.setter
    def view_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "view_mode", value)

    @property
    @pulumi.getter(name="viewType")
    def view_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "view_type")

    @view_type.setter
    def view_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "view_type", value)

    @property
    @pulumi.getter(name="showErrorBudget")
    def show_error_budget(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_error_budget")

    @show_error_budget.setter
    def show_error_budget(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_error_budget", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetServicemapDefinitionArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input[str]]],
                 service: pulumi.Input[str],
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetServicemapDefinitionCustomLinkArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "service", service)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetServicemapDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetServicemapDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetServicemapDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionCustomLinkArgs']]]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionEventArgs']]]] = None,
                 legend_size: Optional[pulumi.Input[str]] = None,
                 markers: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionMarkerArgs']]]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestArgs']]]] = None,
                 right_yaxis: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRightYaxisArgs']] = None,
                 show_legend: Optional[pulumi.Input[bool]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None,
                 yaxis: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionYaxisArgs']] = None):
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if markers is not None:
            pulumi.set(__self__, "markers", markers)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if right_yaxis is not None:
            pulumi.set(__self__, "right_yaxis", right_yaxis)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionEventArgs']]]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionEventArgs']]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "legend_size")

    @legend_size.setter
    def legend_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend_size", value)

    @property
    @pulumi.getter
    def markers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionMarkerArgs']]]]:
        return pulumi.get(self, "markers")

    @markers.setter
    def markers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionMarkerArgs']]]]):
        pulumi.set(self, "markers", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="rightYaxis")
    def right_yaxis(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRightYaxisArgs']]:
        return pulumi.get(self, "right_yaxis")

    @right_yaxis.setter
    def right_yaxis(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRightYaxisArgs']]):
        pulumi.set(self, "right_yaxis", value)

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_legend")

    @show_legend.setter
    def show_legend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_legend", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)

    @property
    @pulumi.getter
    def yaxis(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionYaxisArgs']]:
        return pulumi.get(self, "yaxis")

    @yaxis.setter
    def yaxis(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionYaxisArgs']]):
        pulumi.set(self, "yaxis", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionEventArgs:
    def __init__(__self__, *,
                 q: pulumi.Input[str],
                 tags_execution: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "q", q)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)

    @property
    @pulumi.getter
    def q(self) -> pulumi.Input[str]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: pulumi.Input[str]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tags_execution")

    @tags_execution.setter
    def tags_execution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags_execution", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionMarkerArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 display_type: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "value", value)
        if display_type is not None:
            pulumi.set(__self__, "display_type", display_type)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="displayType")
    def display_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_type")

    @display_type.setter
    def display_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_type", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryArgs']] = None,
                 display_type: Optional[pulumi.Input[str]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryArgs']] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestMetadataArgs']]]] = None,
                 network_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryArgs']] = None,
                 on_right_yaxis: Optional[pulumi.Input[bool]] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestStyleArgs']] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if display_type is not None:
            pulumi.set(__self__, "display_type", display_type)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if network_query is not None:
            pulumi.set(__self__, "network_query", network_query)
        if on_right_yaxis is not None:
            pulumi.set(__self__, "on_right_yaxis", on_right_yaxis)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="displayType")
    def display_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_type")

    @display_type.setter
    def display_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_type", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestMetadataArgs']]]]:
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestMetadataArgs']]]]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter(name="networkQuery")
    def network_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryArgs']]:
        return pulumi.get(self, "network_query")

    @network_query.setter
    def network_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryArgs']]):
        pulumi.set(self, "network_query", value)

    @property
    @pulumi.getter(name="onRightYaxis")
    def on_right_yaxis(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "on_right_yaxis")

    @on_right_yaxis.setter
    def on_right_yaxis(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_right_yaxis", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestMetadataArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 alias_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        if alias_name is not None:
            pulumi.set(__self__, "alias_name", alias_name)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="aliasName")
    def alias_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alias_name")

    @alias_name.setter
    def alias_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias_name", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestNetworkQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestNetworkQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 line_type: Optional[pulumi.Input[str]] = None,
                 line_width: Optional[pulumi.Input[str]] = None,
                 palette: Optional[pulumi.Input[str]] = None):
        if line_type is not None:
            pulumi.set(__self__, "line_type", line_type)
        if line_width is not None:
            pulumi.set(__self__, "line_width", line_width)
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter(name="lineType")
    def line_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "line_type")

    @line_type.setter
    def line_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_type", value)

    @property
    @pulumi.getter(name="lineWidth")
    def line_width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "line_width")

    @line_width.setter
    def line_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_width", value)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRightYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionCustomLinkArgs']]]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestArgs']]]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetToplistDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionCustomLinkArgs']]]]:
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 link: pulumi.Input[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryArgs']] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestConditionalFormatArgs']]]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestStyleArgs']] = None):
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestConditionalFormatArgs']]]]:
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryArgs']]:
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryArgs']]:
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestRumQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestRumQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryComputeArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQuerySearchArgs']] = None):
        pulumi.set(__self__, "index", index)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestSecurityQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortArgs']] = None):
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestSecurityQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None):
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DashboardWidgetTraceServiceDefinitionArgs:
    def __init__(__self__, *,
                 env: pulumi.Input[str],
                 service: pulumi.Input[str],
                 span_name: pulumi.Input[str],
                 display_format: Optional[pulumi.Input[str]] = None,
                 show_breakdown: Optional[pulumi.Input[bool]] = None,
                 show_distribution: Optional[pulumi.Input[bool]] = None,
                 show_errors: Optional[pulumi.Input[bool]] = None,
                 show_hits: Optional[pulumi.Input[bool]] = None,
                 show_latency: Optional[pulumi.Input[bool]] = None,
                 show_resource_list: Optional[pulumi.Input[bool]] = None,
                 size_format: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['DashboardWidgetTraceServiceDefinitionTimeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "span_name", span_name)
        if display_format is not None:
            pulumi.set(__self__, "display_format", display_format)
        if show_breakdown is not None:
            pulumi.set(__self__, "show_breakdown", show_breakdown)
        if show_distribution is not None:
            pulumi.set(__self__, "show_distribution", show_distribution)
        if show_errors is not None:
            pulumi.set(__self__, "show_errors", show_errors)
        if show_hits is not None:
            pulumi.set(__self__, "show_hits", show_hits)
        if show_latency is not None:
            pulumi.set(__self__, "show_latency", show_latency)
        if show_resource_list is not None:
            pulumi.set(__self__, "show_resource_list", show_resource_list)
        if size_format is not None:
            pulumi.set(__self__, "size_format", size_format)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="spanName")
    def span_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "span_name")

    @span_name.setter
    def span_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "span_name", value)

    @property
    @pulumi.getter(name="displayFormat")
    def display_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_format")

    @display_format.setter
    def display_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_format", value)

    @property
    @pulumi.getter(name="showBreakdown")
    def show_breakdown(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_breakdown")

    @show_breakdown.setter
    def show_breakdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_breakdown", value)

    @property
    @pulumi.getter(name="showDistribution")
    def show_distribution(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_distribution")

    @show_distribution.setter
    def show_distribution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_distribution", value)

    @property
    @pulumi.getter(name="showErrors")
    def show_errors(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_errors")

    @show_errors.setter
    def show_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_errors", value)

    @property
    @pulumi.getter(name="showHits")
    def show_hits(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_hits")

    @show_hits.setter
    def show_hits(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_hits", value)

    @property
    @pulumi.getter(name="showLatency")
    def show_latency(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_latency")

    @show_latency.setter
    def show_latency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_latency", value)

    @property
    @pulumi.getter(name="showResourceList")
    def show_resource_list(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_resource_list")

    @show_resource_list.setter
    def show_resource_list(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_resource_list", value)

    @property
    @pulumi.getter(name="sizeFormat")
    def size_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size_format")

    @size_format.setter
    def size_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_format", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardWidgetTraceServiceDefinitionTimeArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardWidgetTraceServiceDefinitionTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetTraceServiceDefinitionTimeArgs:
    def __init__(__self__, *,
                 live_span: Optional[pulumi.Input[str]] = None):
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)


@pulumi.input_type
class DowntimeRecurrenceArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 period: Optional[pulumi.Input[int]] = None,
                 rrule: Optional[pulumi.Input[str]] = None,
                 until_date: Optional[pulumi.Input[int]] = None,
                 until_occurrences: Optional[pulumi.Input[int]] = None,
                 week_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "type", type)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if rrule is not None:
            pulumi.set(__self__, "rrule", rrule)
        if until_date is not None:
            pulumi.set(__self__, "until_date", until_date)
        if until_occurrences is not None:
            pulumi.set(__self__, "until_occurrences", until_occurrences)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter
    def rrule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rrule")

    @rrule.setter
    def rrule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rrule", value)

    @property
    @pulumi.getter(name="untilDate")
    def until_date(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "until_date")

    @until_date.setter
    def until_date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "until_date", value)

    @property
    @pulumi.getter(name="untilOccurrences")
    def until_occurrences(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "until_occurrences")

    @until_occurrences.setter
    def until_occurrences(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "until_occurrences", value)

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "week_days")

    @week_days.setter
    def week_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "week_days", value)


@pulumi.input_type
class LogsArchiveAzureArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 container: pulumi.Input[str],
                 storage_account: pulumi.Input[str],
                 tenant_id: pulumi.Input[str],
                 path: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "container", container)
        pulumi.set(__self__, "storage_account", storage_account)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def container(self) -> pulumi.Input[str]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: pulumi.Input[str]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter(name="storageAccount")
    def storage_account(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage_account")

    @storage_account.setter
    def storage_account(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_account", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class LogsArchiveGcsArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 client_email: pulumi.Input[str],
                 path: pulumi.Input[str],
                 project_id: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "client_email", client_email)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_email")

    @client_email.setter
    def client_email(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_email", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class LogsArchiveS3Args:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 bucket: pulumi.Input[str],
                 client_email: pulumi.Input[str],
                 path: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 role_name: pulumi.Input[str]):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "client_email", client_email)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_email")

    @client_email.setter
    def client_email(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_email", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_name", value)


@pulumi.input_type
class LogsCustomPipelineFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class LogsCustomPipelineProcessorArgs:
    def __init__(__self__, *,
                 arithmetic_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorArithmeticProcessorArgs']] = None,
                 attribute_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorAttributeRemapperArgs']] = None,
                 category_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorArgs']] = None,
                 date_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorDateRemapperArgs']] = None,
                 geo_ip_parser: Optional[pulumi.Input['LogsCustomPipelineProcessorGeoIpParserArgs']] = None,
                 grok_parser: Optional[pulumi.Input['LogsCustomPipelineProcessorGrokParserArgs']] = None,
                 lookup_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorLookupProcessorArgs']] = None,
                 message_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorMessageRemapperArgs']] = None,
                 pipeline: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineArgs']] = None,
                 service_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorServiceRemapperArgs']] = None,
                 status_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorStatusRemapperArgs']] = None,
                 string_builder_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorStringBuilderProcessorArgs']] = None,
                 trace_id_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorTraceIdRemapperArgs']] = None,
                 url_parser: Optional[pulumi.Input['LogsCustomPipelineProcessorUrlParserArgs']] = None,
                 user_agent_parser: Optional[pulumi.Input['LogsCustomPipelineProcessorUserAgentParserArgs']] = None):
        if arithmetic_processor is not None:
            pulumi.set(__self__, "arithmetic_processor", arithmetic_processor)
        if attribute_remapper is not None:
            pulumi.set(__self__, "attribute_remapper", attribute_remapper)
        if category_processor is not None:
            pulumi.set(__self__, "category_processor", category_processor)
        if date_remapper is not None:
            pulumi.set(__self__, "date_remapper", date_remapper)
        if geo_ip_parser is not None:
            pulumi.set(__self__, "geo_ip_parser", geo_ip_parser)
        if grok_parser is not None:
            pulumi.set(__self__, "grok_parser", grok_parser)
        if lookup_processor is not None:
            pulumi.set(__self__, "lookup_processor", lookup_processor)
        if message_remapper is not None:
            pulumi.set(__self__, "message_remapper", message_remapper)
        if pipeline is not None:
            pulumi.set(__self__, "pipeline", pipeline)
        if service_remapper is not None:
            pulumi.set(__self__, "service_remapper", service_remapper)
        if status_remapper is not None:
            pulumi.set(__self__, "status_remapper", status_remapper)
        if string_builder_processor is not None:
            pulumi.set(__self__, "string_builder_processor", string_builder_processor)
        if trace_id_remapper is not None:
            pulumi.set(__self__, "trace_id_remapper", trace_id_remapper)
        if url_parser is not None:
            pulumi.set(__self__, "url_parser", url_parser)
        if user_agent_parser is not None:
            pulumi.set(__self__, "user_agent_parser", user_agent_parser)

    @property
    @pulumi.getter(name="arithmeticProcessor")
    def arithmetic_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorArithmeticProcessorArgs']]:
        return pulumi.get(self, "arithmetic_processor")

    @arithmetic_processor.setter
    def arithmetic_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorArithmeticProcessorArgs']]):
        pulumi.set(self, "arithmetic_processor", value)

    @property
    @pulumi.getter(name="attributeRemapper")
    def attribute_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorAttributeRemapperArgs']]:
        return pulumi.get(self, "attribute_remapper")

    @attribute_remapper.setter
    def attribute_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorAttributeRemapperArgs']]):
        pulumi.set(self, "attribute_remapper", value)

    @property
    @pulumi.getter(name="categoryProcessor")
    def category_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorArgs']]:
        return pulumi.get(self, "category_processor")

    @category_processor.setter
    def category_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorArgs']]):
        pulumi.set(self, "category_processor", value)

    @property
    @pulumi.getter(name="dateRemapper")
    def date_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorDateRemapperArgs']]:
        return pulumi.get(self, "date_remapper")

    @date_remapper.setter
    def date_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorDateRemapperArgs']]):
        pulumi.set(self, "date_remapper", value)

    @property
    @pulumi.getter(name="geoIpParser")
    def geo_ip_parser(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorGeoIpParserArgs']]:
        return pulumi.get(self, "geo_ip_parser")

    @geo_ip_parser.setter
    def geo_ip_parser(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorGeoIpParserArgs']]):
        pulumi.set(self, "geo_ip_parser", value)

    @property
    @pulumi.getter(name="grokParser")
    def grok_parser(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorGrokParserArgs']]:
        return pulumi.get(self, "grok_parser")

    @grok_parser.setter
    def grok_parser(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorGrokParserArgs']]):
        pulumi.set(self, "grok_parser", value)

    @property
    @pulumi.getter(name="lookupProcessor")
    def lookup_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorLookupProcessorArgs']]:
        return pulumi.get(self, "lookup_processor")

    @lookup_processor.setter
    def lookup_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorLookupProcessorArgs']]):
        pulumi.set(self, "lookup_processor", value)

    @property
    @pulumi.getter(name="messageRemapper")
    def message_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorMessageRemapperArgs']]:
        return pulumi.get(self, "message_remapper")

    @message_remapper.setter
    def message_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorMessageRemapperArgs']]):
        pulumi.set(self, "message_remapper", value)

    @property
    @pulumi.getter
    def pipeline(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineArgs']]:
        return pulumi.get(self, "pipeline")

    @pipeline.setter
    def pipeline(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineArgs']]):
        pulumi.set(self, "pipeline", value)

    @property
    @pulumi.getter(name="serviceRemapper")
    def service_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorServiceRemapperArgs']]:
        return pulumi.get(self, "service_remapper")

    @service_remapper.setter
    def service_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorServiceRemapperArgs']]):
        pulumi.set(self, "service_remapper", value)

    @property
    @pulumi.getter(name="statusRemapper")
    def status_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorStatusRemapperArgs']]:
        return pulumi.get(self, "status_remapper")

    @status_remapper.setter
    def status_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorStatusRemapperArgs']]):
        pulumi.set(self, "status_remapper", value)

    @property
    @pulumi.getter(name="stringBuilderProcessor")
    def string_builder_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorStringBuilderProcessorArgs']]:
        return pulumi.get(self, "string_builder_processor")

    @string_builder_processor.setter
    def string_builder_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorStringBuilderProcessorArgs']]):
        pulumi.set(self, "string_builder_processor", value)

    @property
    @pulumi.getter(name="traceIdRemapper")
    def trace_id_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorTraceIdRemapperArgs']]:
        return pulumi.get(self, "trace_id_remapper")

    @trace_id_remapper.setter
    def trace_id_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorTraceIdRemapperArgs']]):
        pulumi.set(self, "trace_id_remapper", value)

    @property
    @pulumi.getter(name="urlParser")
    def url_parser(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorUrlParserArgs']]:
        return pulumi.get(self, "url_parser")

    @url_parser.setter
    def url_parser(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorUrlParserArgs']]):
        pulumi.set(self, "url_parser", value)

    @property
    @pulumi.getter(name="userAgentParser")
    def user_agent_parser(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorUserAgentParserArgs']]:
        return pulumi.get(self, "user_agent_parser")

    @user_agent_parser.setter
    def user_agent_parser(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorUserAgentParserArgs']]):
        pulumi.set(self, "user_agent_parser", value)


@pulumi.input_type
class LogsCustomPipelineProcessorArithmeticProcessorArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 is_replace_missing: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_replace_missing is not None:
            pulumi.set(__self__, "is_replace_missing", is_replace_missing)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isReplaceMissing")
    def is_replace_missing(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_replace_missing")

    @is_replace_missing.setter
    def is_replace_missing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_replace_missing", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorAttributeRemapperArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target: pulumi.Input[str],
                 target_type: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_on_conflict: Optional[pulumi.Input[bool]] = None,
                 preserve_source: Optional[pulumi.Input[bool]] = None,
                 target_format: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "target_type", target_type)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_on_conflict is not None:
            pulumi.set(__self__, "override_on_conflict", override_on_conflict)
        if preserve_source is not None:
            pulumi.set(__self__, "preserve_source", preserve_source)
        if target_format is not None:
            pulumi.set(__self__, "target_format", target_format)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideOnConflict")
    def override_on_conflict(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "override_on_conflict")

    @override_on_conflict.setter
    def override_on_conflict(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_on_conflict", value)

    @property
    @pulumi.getter(name="preserveSource")
    def preserve_source(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "preserve_source")

    @preserve_source.setter
    def preserve_source(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_source", value)

    @property
    @pulumi.getter(name="targetFormat")
    def target_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_format")

    @target_format.setter
    def target_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_format", value)


@pulumi.input_type
class LogsCustomPipelineProcessorCategoryProcessorArgs:
    def __init__(__self__, *,
                 categories: pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorCategoryArgs']]],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorCategoryArgs']]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorCategoryArgs']]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorCategoryProcessorCategoryArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorCategoryFilterArgs'],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorCategoryFilterArgs']:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorCategoryFilterArgs']):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorCategoryProcessorCategoryFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class LogsCustomPipelineProcessorDateRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorGeoIpParserArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorGrokParserArgs:
    def __init__(__self__, *,
                 grok: pulumi.Input['LogsCustomPipelineProcessorGrokParserGrokArgs'],
                 source: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 samples: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "grok", grok)
        pulumi.set(__self__, "source", source)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if samples is not None:
            pulumi.set(__self__, "samples", samples)

    @property
    @pulumi.getter
    def grok(self) -> pulumi.Input['LogsCustomPipelineProcessorGrokParserGrokArgs']:
        return pulumi.get(self, "grok")

    @grok.setter
    def grok(self, value: pulumi.Input['LogsCustomPipelineProcessorGrokParserGrokArgs']):
        pulumi.set(self, "grok", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def samples(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "samples")

    @samples.setter
    def samples(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "samples", value)


@pulumi.input_type
class LogsCustomPipelineProcessorGrokParserGrokArgs:
    def __init__(__self__, *,
                 match_rules: pulumi.Input[str],
                 support_rules: pulumi.Input[str]):
        pulumi.set(__self__, "match_rules", match_rules)
        pulumi.set(__self__, "support_rules", support_rules)

    @property
    @pulumi.getter(name="matchRules")
    def match_rules(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_rules")

    @match_rules.setter
    def match_rules(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_rules", value)

    @property
    @pulumi.getter(name="supportRules")
    def support_rules(self) -> pulumi.Input[str]:
        return pulumi.get(self, "support_rules")

    @support_rules.setter
    def support_rules(self, value: pulumi.Input[str]):
        pulumi.set(self, "support_rules", value)


@pulumi.input_type
class LogsCustomPipelineProcessorLookupProcessorArgs:
    def __init__(__self__, *,
                 lookup_tables: pulumi.Input[Sequence[pulumi.Input[str]]],
                 source: pulumi.Input[str],
                 target: pulumi.Input[str],
                 default_lookup: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "lookup_tables", lookup_tables)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)
        if default_lookup is not None:
            pulumi.set(__self__, "default_lookup", default_lookup)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="lookupTables")
    def lookup_tables(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "lookup_tables")

    @lookup_tables.setter
    def lookup_tables(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "lookup_tables", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="defaultLookup")
    def default_lookup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_lookup")

    @default_lookup.setter
    def default_lookup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_lookup", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorMessageRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineFilterArgs']]],
                 name: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 processors: Optional[pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorArgs']]]] = None):
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "name", name)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if processors is not None:
            pulumi.set(__self__, "processors", processors)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineFilterArgs']]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineFilterArgs']]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def processors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorArgs']]]]:
        return pulumi.get(self, "processors")

    @processors.setter
    def processors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorArgs']]]]):
        pulumi.set(self, "processors", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorArgs:
    def __init__(__self__, *,
                 arithmetic_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessorArgs']] = None,
                 attribute_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorAttributeRemapperArgs']] = None,
                 category_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorArgs']] = None,
                 date_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorDateRemapperArgs']] = None,
                 geo_ip_parser: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGeoIpParserArgs']] = None,
                 grok_parser: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGrokParserArgs']] = None,
                 lookup_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorLookupProcessorArgs']] = None,
                 message_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorMessageRemapperArgs']] = None,
                 service_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorServiceRemapperArgs']] = None,
                 status_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorStatusRemapperArgs']] = None,
                 string_builder_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessorArgs']] = None,
                 trace_id_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapperArgs']] = None,
                 url_parser: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorUrlParserArgs']] = None,
                 user_agent_parser: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorUserAgentParserArgs']] = None):
        if arithmetic_processor is not None:
            pulumi.set(__self__, "arithmetic_processor", arithmetic_processor)
        if attribute_remapper is not None:
            pulumi.set(__self__, "attribute_remapper", attribute_remapper)
        if category_processor is not None:
            pulumi.set(__self__, "category_processor", category_processor)
        if date_remapper is not None:
            pulumi.set(__self__, "date_remapper", date_remapper)
        if geo_ip_parser is not None:
            pulumi.set(__self__, "geo_ip_parser", geo_ip_parser)
        if grok_parser is not None:
            pulumi.set(__self__, "grok_parser", grok_parser)
        if lookup_processor is not None:
            pulumi.set(__self__, "lookup_processor", lookup_processor)
        if message_remapper is not None:
            pulumi.set(__self__, "message_remapper", message_remapper)
        if service_remapper is not None:
            pulumi.set(__self__, "service_remapper", service_remapper)
        if status_remapper is not None:
            pulumi.set(__self__, "status_remapper", status_remapper)
        if string_builder_processor is not None:
            pulumi.set(__self__, "string_builder_processor", string_builder_processor)
        if trace_id_remapper is not None:
            pulumi.set(__self__, "trace_id_remapper", trace_id_remapper)
        if url_parser is not None:
            pulumi.set(__self__, "url_parser", url_parser)
        if user_agent_parser is not None:
            pulumi.set(__self__, "user_agent_parser", user_agent_parser)

    @property
    @pulumi.getter(name="arithmeticProcessor")
    def arithmetic_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessorArgs']]:
        return pulumi.get(self, "arithmetic_processor")

    @arithmetic_processor.setter
    def arithmetic_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessorArgs']]):
        pulumi.set(self, "arithmetic_processor", value)

    @property
    @pulumi.getter(name="attributeRemapper")
    def attribute_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorAttributeRemapperArgs']]:
        return pulumi.get(self, "attribute_remapper")

    @attribute_remapper.setter
    def attribute_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorAttributeRemapperArgs']]):
        pulumi.set(self, "attribute_remapper", value)

    @property
    @pulumi.getter(name="categoryProcessor")
    def category_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorArgs']]:
        return pulumi.get(self, "category_processor")

    @category_processor.setter
    def category_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorArgs']]):
        pulumi.set(self, "category_processor", value)

    @property
    @pulumi.getter(name="dateRemapper")
    def date_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorDateRemapperArgs']]:
        return pulumi.get(self, "date_remapper")

    @date_remapper.setter
    def date_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorDateRemapperArgs']]):
        pulumi.set(self, "date_remapper", value)

    @property
    @pulumi.getter(name="geoIpParser")
    def geo_ip_parser(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGeoIpParserArgs']]:
        return pulumi.get(self, "geo_ip_parser")

    @geo_ip_parser.setter
    def geo_ip_parser(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGeoIpParserArgs']]):
        pulumi.set(self, "geo_ip_parser", value)

    @property
    @pulumi.getter(name="grokParser")
    def grok_parser(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGrokParserArgs']]:
        return pulumi.get(self, "grok_parser")

    @grok_parser.setter
    def grok_parser(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGrokParserArgs']]):
        pulumi.set(self, "grok_parser", value)

    @property
    @pulumi.getter(name="lookupProcessor")
    def lookup_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorLookupProcessorArgs']]:
        return pulumi.get(self, "lookup_processor")

    @lookup_processor.setter
    def lookup_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorLookupProcessorArgs']]):
        pulumi.set(self, "lookup_processor", value)

    @property
    @pulumi.getter(name="messageRemapper")
    def message_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorMessageRemapperArgs']]:
        return pulumi.get(self, "message_remapper")

    @message_remapper.setter
    def message_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorMessageRemapperArgs']]):
        pulumi.set(self, "message_remapper", value)

    @property
    @pulumi.getter(name="serviceRemapper")
    def service_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorServiceRemapperArgs']]:
        return pulumi.get(self, "service_remapper")

    @service_remapper.setter
    def service_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorServiceRemapperArgs']]):
        pulumi.set(self, "service_remapper", value)

    @property
    @pulumi.getter(name="statusRemapper")
    def status_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorStatusRemapperArgs']]:
        return pulumi.get(self, "status_remapper")

    @status_remapper.setter
    def status_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorStatusRemapperArgs']]):
        pulumi.set(self, "status_remapper", value)

    @property
    @pulumi.getter(name="stringBuilderProcessor")
    def string_builder_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessorArgs']]:
        return pulumi.get(self, "string_builder_processor")

    @string_builder_processor.setter
    def string_builder_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessorArgs']]):
        pulumi.set(self, "string_builder_processor", value)

    @property
    @pulumi.getter(name="traceIdRemapper")
    def trace_id_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapperArgs']]:
        return pulumi.get(self, "trace_id_remapper")

    @trace_id_remapper.setter
    def trace_id_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapperArgs']]):
        pulumi.set(self, "trace_id_remapper", value)

    @property
    @pulumi.getter(name="urlParser")
    def url_parser(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorUrlParserArgs']]:
        return pulumi.get(self, "url_parser")

    @url_parser.setter
    def url_parser(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorUrlParserArgs']]):
        pulumi.set(self, "url_parser", value)

    @property
    @pulumi.getter(name="userAgentParser")
    def user_agent_parser(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorUserAgentParserArgs']]:
        return pulumi.get(self, "user_agent_parser")

    @user_agent_parser.setter
    def user_agent_parser(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorUserAgentParserArgs']]):
        pulumi.set(self, "user_agent_parser", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessorArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 is_replace_missing: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_replace_missing is not None:
            pulumi.set(__self__, "is_replace_missing", is_replace_missing)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isReplaceMissing")
    def is_replace_missing(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_replace_missing")

    @is_replace_missing.setter
    def is_replace_missing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_replace_missing", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorAttributeRemapperArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target: pulumi.Input[str],
                 target_type: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_on_conflict: Optional[pulumi.Input[bool]] = None,
                 preserve_source: Optional[pulumi.Input[bool]] = None,
                 target_format: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "target_type", target_type)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_on_conflict is not None:
            pulumi.set(__self__, "override_on_conflict", override_on_conflict)
        if preserve_source is not None:
            pulumi.set(__self__, "preserve_source", preserve_source)
        if target_format is not None:
            pulumi.set(__self__, "target_format", target_format)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideOnConflict")
    def override_on_conflict(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "override_on_conflict")

    @override_on_conflict.setter
    def override_on_conflict(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_on_conflict", value)

    @property
    @pulumi.getter(name="preserveSource")
    def preserve_source(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "preserve_source")

    @preserve_source.setter
    def preserve_source(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_source", value)

    @property
    @pulumi.getter(name="targetFormat")
    def target_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_format")

    @target_format.setter
    def target_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_format", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorArgs:
    def __init__(__self__, *,
                 categories: pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryArgs']]],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryArgs']]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryArgs']]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilterArgs'],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilterArgs']:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilterArgs']):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorDateRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorGeoIpParserArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorGrokParserArgs:
    def __init__(__self__, *,
                 grok: pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGrokParserGrokArgs'],
                 source: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 samples: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "grok", grok)
        pulumi.set(__self__, "source", source)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if samples is not None:
            pulumi.set(__self__, "samples", samples)

    @property
    @pulumi.getter
    def grok(self) -> pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGrokParserGrokArgs']:
        return pulumi.get(self, "grok")

    @grok.setter
    def grok(self, value: pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGrokParserGrokArgs']):
        pulumi.set(self, "grok", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def samples(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "samples")

    @samples.setter
    def samples(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "samples", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorGrokParserGrokArgs:
    def __init__(__self__, *,
                 match_rules: pulumi.Input[str],
                 support_rules: pulumi.Input[str]):
        pulumi.set(__self__, "match_rules", match_rules)
        pulumi.set(__self__, "support_rules", support_rules)

    @property
    @pulumi.getter(name="matchRules")
    def match_rules(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_rules")

    @match_rules.setter
    def match_rules(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_rules", value)

    @property
    @pulumi.getter(name="supportRules")
    def support_rules(self) -> pulumi.Input[str]:
        return pulumi.get(self, "support_rules")

    @support_rules.setter
    def support_rules(self, value: pulumi.Input[str]):
        pulumi.set(self, "support_rules", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorLookupProcessorArgs:
    def __init__(__self__, *,
                 lookup_tables: pulumi.Input[Sequence[pulumi.Input[str]]],
                 source: pulumi.Input[str],
                 target: pulumi.Input[str],
                 default_lookup: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "lookup_tables", lookup_tables)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)
        if default_lookup is not None:
            pulumi.set(__self__, "default_lookup", default_lookup)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="lookupTables")
    def lookup_tables(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "lookup_tables")

    @lookup_tables.setter
    def lookup_tables(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "lookup_tables", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="defaultLookup")
    def default_lookup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_lookup")

    @default_lookup.setter
    def default_lookup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_lookup", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorMessageRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorServiceRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorStatusRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessorArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[str],
                 template: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 is_replace_missing: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "template", template)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_replace_missing is not None:
            pulumi.set(__self__, "is_replace_missing", is_replace_missing)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input[str]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isReplaceMissing")
    def is_replace_missing(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_replace_missing")

    @is_replace_missing.setter
    def is_replace_missing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_replace_missing", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorUrlParserArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 normalize_ending_slashes: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if normalize_ending_slashes is not None:
            pulumi.set(__self__, "normalize_ending_slashes", normalize_ending_slashes)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="normalizeEndingSlashes")
    def normalize_ending_slashes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "normalize_ending_slashes")

    @normalize_ending_slashes.setter
    def normalize_ending_slashes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "normalize_ending_slashes", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorUserAgentParserArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 is_encoded: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_encoded is not None:
            pulumi.set(__self__, "is_encoded", is_encoded)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isEncoded")
    def is_encoded(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_encoded")

    @is_encoded.setter
    def is_encoded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_encoded", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorServiceRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorStatusRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorStringBuilderProcessorArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[str],
                 template: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 is_replace_missing: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "template", template)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_replace_missing is not None:
            pulumi.set(__self__, "is_replace_missing", is_replace_missing)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input[str]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isReplaceMissing")
    def is_replace_missing(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_replace_missing")

    @is_replace_missing.setter
    def is_replace_missing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_replace_missing", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorTraceIdRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorUrlParserArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 normalize_ending_slashes: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if normalize_ending_slashes is not None:
            pulumi.set(__self__, "normalize_ending_slashes", normalize_ending_slashes)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="normalizeEndingSlashes")
    def normalize_ending_slashes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "normalize_ending_slashes")

    @normalize_ending_slashes.setter
    def normalize_ending_slashes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "normalize_ending_slashes", value)


@pulumi.input_type
class LogsCustomPipelineProcessorUserAgentParserArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 is_encoded: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_encoded is not None:
            pulumi.set(__self__, "is_encoded", is_encoded)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isEncoded")
    def is_encoded(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_encoded")

    @is_encoded.setter
    def is_encoded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_encoded", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsIndexExclusionFilterArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexExclusionFilterFilterArgs']]]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexExclusionFilterFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexExclusionFilterFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsIndexExclusionFilterFilterArgs:
    def __init__(__self__, *,
                 query: Optional[pulumi.Input[str]] = None,
                 sample_rate: Optional[pulumi.Input[float]] = None):
        if query is not None:
            pulumi.set(__self__, "query", query)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "sample_rate", value)


@pulumi.input_type
class LogsIndexFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class MonitorThresholdWindowsArgs:
    def __init__(__self__, *,
                 recovery_window: Optional[pulumi.Input[str]] = None,
                 trigger_window: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] recovery_window: describes how long an anomalous metric must be normal before the alert recovers.
        :param pulumi.Input[str] trigger_window: describes how long a metric must be anomalous before an alert triggers.
        """
        if recovery_window is not None:
            pulumi.set(__self__, "recovery_window", recovery_window)
        if trigger_window is not None:
            pulumi.set(__self__, "trigger_window", trigger_window)

    @property
    @pulumi.getter(name="recoveryWindow")
    def recovery_window(self) -> Optional[pulumi.Input[str]]:
        """
        describes how long an anomalous metric must be normal before the alert recovers.
        """
        return pulumi.get(self, "recovery_window")

    @recovery_window.setter
    def recovery_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_window", value)

    @property
    @pulumi.getter(name="triggerWindow")
    def trigger_window(self) -> Optional[pulumi.Input[str]]:
        """
        describes how long a metric must be anomalous before an alert triggers.
        """
        return pulumi.get(self, "trigger_window")

    @trigger_window.setter
    def trigger_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_window", value)


@pulumi.input_type
class MonitorThresholdsArgs:
    def __init__(__self__, *,
                 critical: Optional[pulumi.Input[float]] = None,
                 critical_recovery: Optional[pulumi.Input[float]] = None,
                 ok: Optional[pulumi.Input[float]] = None,
                 unknown: Optional[pulumi.Input[float]] = None,
                 warning: Optional[pulumi.Input[float]] = None,
                 warning_recovery: Optional[pulumi.Input[float]] = None):
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if critical_recovery is not None:
            pulumi.set(__self__, "critical_recovery", critical_recovery)
        if ok is not None:
            pulumi.set(__self__, "ok", ok)
        if unknown is not None:
            pulumi.set(__self__, "unknown", unknown)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)
        if warning_recovery is not None:
            pulumi.set(__self__, "warning_recovery", warning_recovery)

    @property
    @pulumi.getter
    def critical(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "critical")

    @critical.setter
    def critical(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "critical", value)

    @property
    @pulumi.getter(name="criticalRecovery")
    def critical_recovery(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "critical_recovery")

    @critical_recovery.setter
    def critical_recovery(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "critical_recovery", value)

    @property
    @pulumi.getter
    def ok(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "ok")

    @ok.setter
    def ok(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "ok", value)

    @property
    @pulumi.getter
    def unknown(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "unknown")

    @unknown.setter
    def unknown(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "unknown", value)

    @property
    @pulumi.getter
    def warning(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "warning")

    @warning.setter
    def warning(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "warning", value)

    @property
    @pulumi.getter(name="warningRecovery")
    def warning_recovery(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "warning_recovery")

    @warning_recovery.setter
    def warning_recovery(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "warning_recovery", value)


@pulumi.input_type
class ScreenBoardTemplateVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 default: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class ScreenBoardWidgetArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 x: pulumi.Input[int],
                 y: pulumi.Input[int],
                 alert_id: Optional[pulumi.Input[int]] = None,
                 auto_refresh: Optional[pulumi.Input[bool]] = None,
                 bgcolor: Optional[pulumi.Input[str]] = None,
                 check: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 color_preference: Optional[pulumi.Input[str]] = None,
                 columns: Optional[pulumi.Input[str]] = None,
                 display_format: Optional[pulumi.Input[str]] = None,
                 env: Optional[pulumi.Input[str]] = None,
                 event_size: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[str]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 grouping: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 hide_zero_counts: Optional[pulumi.Input[bool]] = None,
                 html: Optional[pulumi.Input[str]] = None,
                 layout_version: Optional[pulumi.Input[str]] = None,
                 legend: Optional[pulumi.Input[bool]] = None,
                 legend_size: Optional[pulumi.Input[str]] = None,
                 logset: Optional[pulumi.Input[str]] = None,
                 manage_status_show_title: Optional[pulumi.Input[bool]] = None,
                 manage_status_title_align: Optional[pulumi.Input[str]] = None,
                 manage_status_title_size: Optional[pulumi.Input[str]] = None,
                 manage_status_title_text: Optional[pulumi.Input[str]] = None,
                 margin: Optional[pulumi.Input[str]] = None,
                 monitor: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 must_show_breakdown: Optional[pulumi.Input[bool]] = None,
                 must_show_distribution: Optional[pulumi.Input[bool]] = None,
                 must_show_errors: Optional[pulumi.Input[bool]] = None,
                 must_show_hits: Optional[pulumi.Input[bool]] = None,
                 must_show_latency: Optional[pulumi.Input[bool]] = None,
                 must_show_resource_list: Optional[pulumi.Input[bool]] = None,
                 params: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 precision: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetRuleArgs']]]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 service_service: Optional[pulumi.Input[str]] = None,
                 show_last_triggered: Optional[pulumi.Input[bool]] = None,
                 size_version: Optional[pulumi.Input[str]] = None,
                 sizing: Optional[pulumi.Input[str]] = None,
                 summary_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text: Optional[pulumi.Input[str]] = None,
                 text_align: Optional[pulumi.Input[str]] = None,
                 text_size: Optional[pulumi.Input[str]] = None,
                 tick: Optional[pulumi.Input[bool]] = None,
                 tick_edge: Optional[pulumi.Input[str]] = None,
                 tick_pos: Optional[pulumi.Input[str]] = None,
                 tile_deves: Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefArgs']]]] = None,
                 time: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 timeframes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[int]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 viz_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)
        if alert_id is not None:
            pulumi.set(__self__, "alert_id", alert_id)
        if auto_refresh is not None:
            pulumi.set(__self__, "auto_refresh", auto_refresh)
        if bgcolor is not None:
            pulumi.set(__self__, "bgcolor", bgcolor)
        if check is not None:
            pulumi.set(__self__, "check", check)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_preference is not None:
            pulumi.set(__self__, "color_preference", color_preference)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if display_format is not None:
            pulumi.set(__self__, "display_format", display_format)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if event_size is not None:
            pulumi.set(__self__, "event_size", event_size)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if grouping is not None:
            pulumi.set(__self__, "grouping", grouping)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if hide_zero_counts is not None:
            pulumi.set(__self__, "hide_zero_counts", hide_zero_counts)
        if html is not None:
            pulumi.set(__self__, "html", html)
        if layout_version is not None:
            pulumi.set(__self__, "layout_version", layout_version)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if logset is not None:
            pulumi.set(__self__, "logset", logset)
        if manage_status_show_title is not None:
            pulumi.set(__self__, "manage_status_show_title", manage_status_show_title)
        if manage_status_title_align is not None:
            pulumi.set(__self__, "manage_status_title_align", manage_status_title_align)
        if manage_status_title_size is not None:
            pulumi.set(__self__, "manage_status_title_size", manage_status_title_size)
        if manage_status_title_text is not None:
            pulumi.set(__self__, "manage_status_title_text", manage_status_title_text)
        if margin is not None:
            pulumi.set(__self__, "margin", margin)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if must_show_breakdown is not None:
            pulumi.set(__self__, "must_show_breakdown", must_show_breakdown)
        if must_show_distribution is not None:
            pulumi.set(__self__, "must_show_distribution", must_show_distribution)
        if must_show_errors is not None:
            pulumi.set(__self__, "must_show_errors", must_show_errors)
        if must_show_hits is not None:
            pulumi.set(__self__, "must_show_hits", must_show_hits)
        if must_show_latency is not None:
            pulumi.set(__self__, "must_show_latency", must_show_latency)
        if must_show_resource_list is not None:
            pulumi.set(__self__, "must_show_resource_list", must_show_resource_list)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if service_service is not None:
            pulumi.set(__self__, "service_service", service_service)
        if show_last_triggered is not None:
            pulumi.set(__self__, "show_last_triggered", show_last_triggered)
        if size_version is not None:
            pulumi.set(__self__, "size_version", size_version)
        if sizing is not None:
            pulumi.set(__self__, "sizing", sizing)
        if summary_type is not None:
            pulumi.set(__self__, "summary_type", summary_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if text_size is not None:
            pulumi.set(__self__, "text_size", text_size)
        if tick is not None:
            pulumi.set(__self__, "tick", tick)
        if tick_edge is not None:
            pulumi.set(__self__, "tick_edge", tick_edge)
        if tick_pos is not None:
            pulumi.set(__self__, "tick_pos", tick_pos)
        if tile_deves is not None:
            pulumi.set(__self__, "tile_deves", tile_deves)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if timeframes is not None:
            pulumi.set(__self__, "timeframes", timeframes)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if viz_type is not None:
            pulumi.set(__self__, "viz_type", viz_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def x(self) -> pulumi.Input[int]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: pulumi.Input[int]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter
    def y(self) -> pulumi.Input[int]:
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: pulumi.Input[int]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "alert_id")

    @alert_id.setter
    def alert_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "alert_id", value)

    @property
    @pulumi.getter(name="autoRefresh")
    def auto_refresh(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_refresh")

    @auto_refresh.setter
    def auto_refresh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_refresh", value)

    @property
    @pulumi.getter
    def bgcolor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bgcolor")

    @bgcolor.setter
    def bgcolor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgcolor", value)

    @property
    @pulumi.getter
    def check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "check")

    @check.setter
    def check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorPreference")
    def color_preference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color_preference")

    @color_preference.setter
    def color_preference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_preference", value)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter(name="displayFormat")
    def display_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_format")

    @display_format.setter
    def display_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_format", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="eventSize")
    def event_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event_size")

    @event_size.setter
    def event_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_size", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def grouping(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grouping")

    @grouping.setter
    def grouping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grouping", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="hideZeroCounts")
    def hide_zero_counts(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hide_zero_counts")

    @hide_zero_counts.setter
    def hide_zero_counts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_zero_counts", value)

    @property
    @pulumi.getter
    def html(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "html")

    @html.setter
    def html(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "html", value)

    @property
    @pulumi.getter(name="layoutVersion")
    def layout_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "layout_version")

    @layout_version.setter
    def layout_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "layout_version", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "legend_size")

    @legend_size.setter
    def legend_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend_size", value)

    @property
    @pulumi.getter
    def logset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logset")

    @logset.setter
    def logset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logset", value)

    @property
    @pulumi.getter(name="manageStatusShowTitle")
    def manage_status_show_title(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "manage_status_show_title")

    @manage_status_show_title.setter
    def manage_status_show_title(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manage_status_show_title", value)

    @property
    @pulumi.getter(name="manageStatusTitleAlign")
    def manage_status_title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "manage_status_title_align")

    @manage_status_title_align.setter
    def manage_status_title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manage_status_title_align", value)

    @property
    @pulumi.getter(name="manageStatusTitleSize")
    def manage_status_title_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "manage_status_title_size")

    @manage_status_title_size.setter
    def manage_status_title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manage_status_title_size", value)

    @property
    @pulumi.getter(name="manageStatusTitleText")
    def manage_status_title_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "manage_status_title_text")

    @manage_status_title_text.setter
    def manage_status_title_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manage_status_title_text", value)

    @property
    @pulumi.getter
    def margin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "margin")

    @margin.setter
    def margin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "margin", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter(name="mustShowBreakdown")
    def must_show_breakdown(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "must_show_breakdown")

    @must_show_breakdown.setter
    def must_show_breakdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "must_show_breakdown", value)

    @property
    @pulumi.getter(name="mustShowDistribution")
    def must_show_distribution(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "must_show_distribution")

    @must_show_distribution.setter
    def must_show_distribution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "must_show_distribution", value)

    @property
    @pulumi.getter(name="mustShowErrors")
    def must_show_errors(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "must_show_errors")

    @must_show_errors.setter
    def must_show_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "must_show_errors", value)

    @property
    @pulumi.getter(name="mustShowHits")
    def must_show_hits(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "must_show_hits")

    @must_show_hits.setter
    def must_show_hits(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "must_show_hits", value)

    @property
    @pulumi.getter(name="mustShowLatency")
    def must_show_latency(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "must_show_latency")

    @must_show_latency.setter
    def must_show_latency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "must_show_latency", value)

    @property
    @pulumi.getter(name="mustShowResourceList")
    def must_show_resource_list(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "must_show_resource_list")

    @must_show_resource_list.setter
    def must_show_resource_list(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "must_show_resource_list", value)

    @property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "params", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "precision", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="serviceService")
    def service_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_service")

    @service_service.setter
    def service_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_service", value)

    @property
    @pulumi.getter(name="showLastTriggered")
    def show_last_triggered(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_last_triggered")

    @show_last_triggered.setter
    def show_last_triggered(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_last_triggered", value)

    @property
    @pulumi.getter(name="sizeVersion")
    def size_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size_version")

    @size_version.setter
    def size_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_version", value)

    @property
    @pulumi.getter
    def sizing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sizing")

    @sizing.setter
    def sizing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sizing", value)

    @property
    @pulumi.getter(name="summaryType")
    def summary_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "summary_type")

    @summary_type.setter
    def summary_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)

    @property
    @pulumi.getter(name="textSize")
    def text_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_size")

    @text_size.setter
    def text_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_size", value)

    @property
    @pulumi.getter
    def tick(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tick")

    @tick.setter
    def tick(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tick", value)

    @property
    @pulumi.getter(name="tickEdge")
    def tick_edge(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tick_edge")

    @tick_edge.setter
    def tick_edge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tick_edge", value)

    @property
    @pulumi.getter(name="tickPos")
    def tick_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tick_pos")

    @tick_pos.setter
    def tick_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tick_pos", value)

    @property
    @pulumi.getter(name="tileDeves")
    def tile_deves(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefArgs']]]]:
        return pulumi.get(self, "tile_deves")

    @tile_deves.setter
    def tile_deves(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefArgs']]]]):
        pulumi.set(self, "tile_deves", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def timeframes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "timeframes")

    @timeframes.setter
    def timeframes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "timeframes", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "title_size", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="vizType")
    def viz_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "viz_type")

    @viz_type.setter
    def viz_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "viz_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class ScreenBoardWidgetRuleArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[float]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class ScreenBoardWidgetTileDefArgs:
    def __init__(__self__, *,
                 requests: pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefRequestArgs']]],
                 viz: pulumi.Input[str],
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 custom_unit: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefEventArgs']]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 markers: Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefMarkerArgs']]]] = None,
                 no_group_hosts: Optional[pulumi.Input[bool]] = None,
                 no_metric_hosts: Optional[pulumi.Input[bool]] = None,
                 node_type: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 style: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 text_align: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "requests", requests)
        pulumi.set(__self__, "viz", viz)
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if custom_unit is not None:
            pulumi.set(__self__, "custom_unit", custom_unit)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if markers is not None:
            pulumi.set(__self__, "markers", markers)
        if no_group_hosts is not None:
            pulumi.set(__self__, "no_group_hosts", no_group_hosts)
        if no_metric_hosts is not None:
            pulumi.set(__self__, "no_metric_hosts", no_metric_hosts)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)

    @property
    @pulumi.getter
    def requests(self) -> pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefRequestArgs']]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefRequestArgs']]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def viz(self) -> pulumi.Input[str]:
        return pulumi.get(self, "viz")

    @viz.setter
    def viz(self, value: pulumi.Input[str]):
        pulumi.set(self, "viz", value)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="customUnit")
    def custom_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_unit")

    @custom_unit.setter
    def custom_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_unit", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefEventArgs']]]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefEventArgs']]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def markers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefMarkerArgs']]]]:
        return pulumi.get(self, "markers")

    @markers.setter
    def markers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefMarkerArgs']]]]):
        pulumi.set(self, "markers", value)

    @property
    @pulumi.getter(name="noGroupHosts")
    def no_group_hosts(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_group_hosts")

    @no_group_hosts.setter
    def no_group_hosts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_group_hosts", value)

    @property
    @pulumi.getter(name="noMetricHosts")
    def no_metric_hosts(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_metric_hosts")

    @no_metric_hosts.setter
    def no_metric_hosts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_metric_hosts", value)

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "precision", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)


@pulumi.input_type
class ScreenBoardWidgetTileDefEventArgs:
    def __init__(__self__, *,
                 q: pulumi.Input[str]):
        pulumi.set(__self__, "q", q)

    @property
    @pulumi.getter
    def q(self) -> pulumi.Input[str]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: pulumi.Input[str]):
        pulumi.set(self, "q", value)


@pulumi.input_type
class ScreenBoardWidgetTileDefMarkerArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str],
                 label: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class ScreenBoardWidgetTileDefRequestArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestApmQueryArgs']] = None,
                 change_type: Optional[pulumi.Input[str]] = None,
                 compare_to: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefRequestConditionalFormatArgs']]]] = None,
                 extra_col: Optional[pulumi.Input[str]] = None,
                 increase_good: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 log_query: Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestLogQueryArgs']] = None,
                 metadata_json: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 order_by: Optional[pulumi.Input[str]] = None,
                 order_dir: Optional[pulumi.Input[str]] = None,
                 process_query: Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 query_type: Optional[pulumi.Input[str]] = None,
                 style: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if change_type is not None:
            pulumi.set(__self__, "change_type", change_type)
        if compare_to is not None:
            pulumi.set(__self__, "compare_to", compare_to)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if extra_col is not None:
            pulumi.set(__self__, "extra_col", extra_col)
        if increase_good is not None:
            pulumi.set(__self__, "increase_good", increase_good)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if metadata_json is not None:
            pulumi.set(__self__, "metadata_json", metadata_json)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order_by is not None:
            pulumi.set(__self__, "order_by", order_by)
        if order_dir is not None:
            pulumi.set(__self__, "order_dir", order_dir)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if query_type is not None:
            pulumi.set(__self__, "query_type", query_type)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="changeType")
    def change_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "change_type")

    @change_type.setter
    def change_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "change_type", value)

    @property
    @pulumi.getter(name="compareTo")
    def compare_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compare_to")

    @compare_to.setter
    def compare_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compare_to", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefRequestConditionalFormatArgs']]]]:
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefRequestConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter(name="extraCol")
    def extra_col(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extra_col")

    @extra_col.setter
    def extra_col(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_col", value)

    @property
    @pulumi.getter(name="increaseGood")
    def increase_good(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "increase_good")

    @increase_good.setter
    def increase_good(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "increase_good", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="metadataJson")
    def metadata_json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metadata_json")

    @metadata_json.setter
    def metadata_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata_json", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "order_by")

    @order_by.setter
    def order_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_by", value)

    @property
    @pulumi.getter(name="orderDir")
    def order_dir(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "order_dir")

    @order_dir.setter
    def order_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_dir", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="queryType")
    def query_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_type")

    @query_type.setter
    def query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_type", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ScreenBoardWidgetTileDefRequestApmQueryArgs:
    def __init__(__self__, *,
                 compute: pulumi.Input['ScreenBoardWidgetTileDefRequestApmQueryComputeArgs'],
                 index: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefRequestApmQueryGroupByArgs']]]] = None,
                 search: Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "index", index)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def compute(self) -> pulumi.Input['ScreenBoardWidgetTileDefRequestApmQueryComputeArgs']:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: pulumi.Input['ScreenBoardWidgetTileDefRequestApmQueryComputeArgs']):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefRequestApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class ScreenBoardWidgetTileDefRequestApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class ScreenBoardWidgetTileDefRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestApmQueryGroupBySortArgs']] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class ScreenBoardWidgetTileDefRequestApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class ScreenBoardWidgetTileDefRequestApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class ScreenBoardWidgetTileDefRequestConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 color: Optional[pulumi.Input[str]] = None,
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 invert: Optional[pulumi.Input[bool]] = None,
                 palette: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "comparator", comparator)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if invert is not None:
            pulumi.set(__self__, "invert", invert)
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter
    def invert(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "invert")

    @invert.setter
    def invert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "invert", value)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ScreenBoardWidgetTileDefRequestLogQueryArgs:
    def __init__(__self__, *,
                 compute: pulumi.Input['ScreenBoardWidgetTileDefRequestLogQueryComputeArgs'],
                 index: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefRequestLogQueryGroupByArgs']]]] = None,
                 search: Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "index", index)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def compute(self) -> pulumi.Input['ScreenBoardWidgetTileDefRequestLogQueryComputeArgs']:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: pulumi.Input['ScreenBoardWidgetTileDefRequestLogQueryComputeArgs']):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefRequestLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScreenBoardWidgetTileDefRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class ScreenBoardWidgetTileDefRequestLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class ScreenBoardWidgetTileDefRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestLogQueryGroupBySortArgs']] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['ScreenBoardWidgetTileDefRequestLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class ScreenBoardWidgetTileDefRequestLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class ScreenBoardWidgetTileDefRequestLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class ScreenBoardWidgetTileDefRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class ServiceLevelObjectiveQueryArgs:
    def __init__(__self__, *,
                 denominator: pulumi.Input[str],
                 numerator: pulumi.Input[str]):
        pulumi.set(__self__, "denominator", denominator)
        pulumi.set(__self__, "numerator", numerator)

    @property
    @pulumi.getter
    def denominator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "denominator")

    @denominator.setter
    def denominator(self, value: pulumi.Input[str]):
        pulumi.set(self, "denominator", value)

    @property
    @pulumi.getter
    def numerator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "numerator")

    @numerator.setter
    def numerator(self, value: pulumi.Input[str]):
        pulumi.set(self, "numerator", value)


@pulumi.input_type
class ServiceLevelObjectiveThresholdArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[float],
                 timeframe: pulumi.Input[str],
                 target_display: Optional[pulumi.Input[str]] = None,
                 warning: Optional[pulumi.Input[float]] = None,
                 warning_display: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] timeframe: the time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation](https://docs.datadoghq.com/api/v1/service-level-objectives/#create-a-slo-object) page. Available options to choose from are:
               -   `7d`
               -   `30d`
               -   `90d`
               -   `target`: (Required) the objective's target `[0,100]`
               -   `target_display`: (Optional) the string version to specify additional digits in the case of `99` but want 3 digits like `99.000` to display.
               -   `warning`: (Optional) the objective's warning value `[0,100]`. This must be `> target` value.
               -   `warning_display`: (Optional) the string version to specify additional digits in the case of `99` but want 3 digits like `99.000` to display.
        """
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "timeframe", timeframe)
        if target_display is not None:
            pulumi.set(__self__, "target_display", target_display)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)
        if warning_display is not None:
            pulumi.set(__self__, "warning_display", warning_display)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[float]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[float]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def timeframe(self) -> pulumi.Input[str]:
        """
        the time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation](https://docs.datadoghq.com/api/v1/service-level-objectives/#create-a-slo-object) page. Available options to choose from are:
        -   `7d`
        -   `30d`
        -   `90d`
        -   `target`: (Required) the objective's target `[0,100]`
        -   `target_display`: (Optional) the string version to specify additional digits in the case of `99` but want 3 digits like `99.000` to display.
        -   `warning`: (Optional) the objective's warning value `[0,100]`. This must be `> target` value.
        -   `warning_display`: (Optional) the string version to specify additional digits in the case of `99` but want 3 digits like `99.000` to display.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: pulumi.Input[str]):
        pulumi.set(self, "timeframe", value)

    @property
    @pulumi.getter(name="targetDisplay")
    def target_display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_display")

    @target_display.setter
    def target_display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_display", value)

    @property
    @pulumi.getter
    def warning(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "warning")

    @warning.setter
    def warning(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "warning", value)

    @property
    @pulumi.getter(name="warningDisplay")
    def warning_display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "warning_display")

    @warning_display.setter
    def warning_display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_display", value)


@pulumi.input_type
class SyntheticsTestOptionsArgs:
    def __init__(__self__, *,
                 tick_every: pulumi.Input[int],
                 accept_self_signed: Optional[pulumi.Input[bool]] = None,
                 allow_insecure: Optional[pulumi.Input[bool]] = None,
                 follow_redirects: Optional[pulumi.Input[bool]] = None,
                 min_failure_duration: Optional[pulumi.Input[int]] = None,
                 min_location_failed: Optional[pulumi.Input[int]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None,
                 retry_interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "tick_every", tick_every)
        if accept_self_signed is not None:
            pulumi.set(__self__, "accept_self_signed", accept_self_signed)
        if allow_insecure is not None:
            pulumi.set(__self__, "allow_insecure", allow_insecure)
        if follow_redirects is not None:
            pulumi.set(__self__, "follow_redirects", follow_redirects)
        if min_failure_duration is not None:
            pulumi.set(__self__, "min_failure_duration", min_failure_duration)
        if min_location_failed is not None:
            pulumi.set(__self__, "min_location_failed", min_location_failed)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if retry_interval is not None:
            pulumi.set(__self__, "retry_interval", retry_interval)

    @property
    @pulumi.getter(name="tickEvery")
    def tick_every(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tick_every")

    @tick_every.setter
    def tick_every(self, value: pulumi.Input[int]):
        pulumi.set(self, "tick_every", value)

    @property
    @pulumi.getter(name="acceptSelfSigned")
    def accept_self_signed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "accept_self_signed")

    @accept_self_signed.setter
    def accept_self_signed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_self_signed", value)

    @property
    @pulumi.getter(name="allowInsecure")
    def allow_insecure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_insecure")

    @allow_insecure.setter
    def allow_insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_insecure", value)

    @property
    @pulumi.getter(name="followRedirects")
    def follow_redirects(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "follow_redirects")

    @follow_redirects.setter
    def follow_redirects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "follow_redirects", value)

    @property
    @pulumi.getter(name="minFailureDuration")
    def min_failure_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_failure_duration")

    @min_failure_duration.setter
    def min_failure_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_failure_duration", value)

    @property
    @pulumi.getter(name="minLocationFailed")
    def min_location_failed(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_location_failed")

    @min_location_failed.setter
    def min_location_failed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_location_failed", value)

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_count", value)

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retry_interval")

    @retry_interval.setter
    def retry_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_interval", value)


@pulumi.input_type
class SyntheticsTestOptionsListArgs:
    def __init__(__self__, *,
                 accept_self_signed: Optional[pulumi.Input[bool]] = None,
                 allow_insecure: Optional[pulumi.Input[bool]] = None,
                 follow_redirects: Optional[pulumi.Input[bool]] = None,
                 min_failure_duration: Optional[pulumi.Input[int]] = None,
                 min_location_failed: Optional[pulumi.Input[int]] = None,
                 monitor_options: Optional[pulumi.Input['SyntheticsTestOptionsListMonitorOptionsArgs']] = None,
                 retry: Optional[pulumi.Input['SyntheticsTestOptionsListRetryArgs']] = None,
                 tick_every: Optional[pulumi.Input[int]] = None):
        if accept_self_signed is not None:
            pulumi.set(__self__, "accept_self_signed", accept_self_signed)
        if allow_insecure is not None:
            pulumi.set(__self__, "allow_insecure", allow_insecure)
        if follow_redirects is not None:
            pulumi.set(__self__, "follow_redirects", follow_redirects)
        if min_failure_duration is not None:
            pulumi.set(__self__, "min_failure_duration", min_failure_duration)
        if min_location_failed is not None:
            pulumi.set(__self__, "min_location_failed", min_location_failed)
        if monitor_options is not None:
            pulumi.set(__self__, "monitor_options", monitor_options)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if tick_every is not None:
            pulumi.set(__self__, "tick_every", tick_every)

    @property
    @pulumi.getter(name="acceptSelfSigned")
    def accept_self_signed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "accept_self_signed")

    @accept_self_signed.setter
    def accept_self_signed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_self_signed", value)

    @property
    @pulumi.getter(name="allowInsecure")
    def allow_insecure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_insecure")

    @allow_insecure.setter
    def allow_insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_insecure", value)

    @property
    @pulumi.getter(name="followRedirects")
    def follow_redirects(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "follow_redirects")

    @follow_redirects.setter
    def follow_redirects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "follow_redirects", value)

    @property
    @pulumi.getter(name="minFailureDuration")
    def min_failure_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_failure_duration")

    @min_failure_duration.setter
    def min_failure_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_failure_duration", value)

    @property
    @pulumi.getter(name="minLocationFailed")
    def min_location_failed(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_location_failed")

    @min_location_failed.setter
    def min_location_failed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_location_failed", value)

    @property
    @pulumi.getter(name="monitorOptions")
    def monitor_options(self) -> Optional[pulumi.Input['SyntheticsTestOptionsListMonitorOptionsArgs']]:
        return pulumi.get(self, "monitor_options")

    @monitor_options.setter
    def monitor_options(self, value: Optional[pulumi.Input['SyntheticsTestOptionsListMonitorOptionsArgs']]):
        pulumi.set(self, "monitor_options", value)

    @property
    @pulumi.getter
    def retry(self) -> Optional[pulumi.Input['SyntheticsTestOptionsListRetryArgs']]:
        return pulumi.get(self, "retry")

    @retry.setter
    def retry(self, value: Optional[pulumi.Input['SyntheticsTestOptionsListRetryArgs']]):
        pulumi.set(self, "retry", value)

    @property
    @pulumi.getter(name="tickEvery")
    def tick_every(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tick_every")

    @tick_every.setter
    def tick_every(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tick_every", value)


@pulumi.input_type
class SyntheticsTestOptionsListMonitorOptionsArgs:
    def __init__(__self__, *,
                 renotify_interval: Optional[pulumi.Input[int]] = None):
        if renotify_interval is not None:
            pulumi.set(__self__, "renotify_interval", renotify_interval)

    @property
    @pulumi.getter(name="renotifyInterval")
    def renotify_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "renotify_interval")

    @renotify_interval.setter
    def renotify_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "renotify_interval", value)


@pulumi.input_type
class SyntheticsTestOptionsListRetryArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class SyntheticsTestRequestArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 dns_server: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        if body is not None:
            pulumi.set(__self__, "body", body)
        if dns_server is not None:
            pulumi.set(__self__, "dns_server", dns_server)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="dnsServer")
    def dns_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server")

    @dns_server.setter
    def dns_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SyntheticsTestRequestBasicauthArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class SyntheticsTestRequestClientCertificateArgs:
    def __init__(__self__, *,
                 cert: pulumi.Input['SyntheticsTestRequestClientCertificateCertArgs'],
                 key: pulumi.Input['SyntheticsTestRequestClientCertificateKeyArgs']):
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def cert(self) -> pulumi.Input['SyntheticsTestRequestClientCertificateCertArgs']:
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: pulumi.Input['SyntheticsTestRequestClientCertificateCertArgs']):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input['SyntheticsTestRequestClientCertificateKeyArgs']:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input['SyntheticsTestRequestClientCertificateKeyArgs']):
        pulumi.set(self, "key", value)


@pulumi.input_type
class SyntheticsTestRequestClientCertificateCertArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 filename: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "content", content)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)


@pulumi.input_type
class SyntheticsTestRequestClientCertificateKeyArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 filename: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "content", content)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)


@pulumi.input_type
class SyntheticsTestStepArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 params: pulumi.Input[str],
                 type: pulumi.Input[str],
                 allow_failure: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "params", params)
        pulumi.set(__self__, "type", type)
        if allow_failure is not None:
            pulumi.set(__self__, "allow_failure", allow_failure)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def params(self) -> pulumi.Input[str]:
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: pulumi.Input[str]):
        pulumi.set(self, "params", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="allowFailure")
    def allow_failure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_failure")

    @allow_failure.setter
    def allow_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_failure", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class SyntheticsTestVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 example: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if example is not None:
            pulumi.set(__self__, "example", example)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def example(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "example")

    @example.setter
    def example(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "example", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class TimeBoardGraphArgs:
    def __init__(__self__, *,
                 requests: pulumi.Input[Sequence[pulumi.Input['TimeBoardGraphRequestArgs']]],
                 title: pulumi.Input[str],
                 viz: pulumi.Input[str],
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 custom_unit: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 include_no_metric_hosts: Optional[pulumi.Input[bool]] = None,
                 include_ungrouped_hosts: Optional[pulumi.Input[bool]] = None,
                 markers: Optional[pulumi.Input[Sequence[pulumi.Input['TimeBoardGraphMarkerArgs']]]] = None,
                 node_type: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 style: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 text_align: Optional[pulumi.Input[str]] = None,
                 yaxis: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "requests", requests)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "viz", viz)
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if custom_unit is not None:
            pulumi.set(__self__, "custom_unit", custom_unit)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if include_no_metric_hosts is not None:
            pulumi.set(__self__, "include_no_metric_hosts", include_no_metric_hosts)
        if include_ungrouped_hosts is not None:
            pulumi.set(__self__, "include_ungrouped_hosts", include_ungrouped_hosts)
        if markers is not None:
            pulumi.set(__self__, "markers", markers)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter
    def requests(self) -> pulumi.Input[Sequence[pulumi.Input['TimeBoardGraphRequestArgs']]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: pulumi.Input[Sequence[pulumi.Input['TimeBoardGraphRequestArgs']]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def viz(self) -> pulumi.Input[str]:
        return pulumi.get(self, "viz")

    @viz.setter
    def viz(self, value: pulumi.Input[str]):
        pulumi.set(self, "viz", value)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="customUnit")
    def custom_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_unit")

    @custom_unit.setter
    def custom_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_unit", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="includeNoMetricHosts")
    def include_no_metric_hosts(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_no_metric_hosts")

    @include_no_metric_hosts.setter
    def include_no_metric_hosts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_no_metric_hosts", value)

    @property
    @pulumi.getter(name="includeUngroupedHosts")
    def include_ungrouped_hosts(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_ungrouped_hosts")

    @include_ungrouped_hosts.setter
    def include_ungrouped_hosts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_ungrouped_hosts", value)

    @property
    @pulumi.getter
    def markers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TimeBoardGraphMarkerArgs']]]]:
        return pulumi.get(self, "markers")

    @markers.setter
    def markers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TimeBoardGraphMarkerArgs']]]]):
        pulumi.set(self, "markers", value)

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "precision", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)

    @property
    @pulumi.getter
    def yaxis(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "yaxis")

    @yaxis.setter
    def yaxis(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "yaxis", value)


@pulumi.input_type
class TimeBoardGraphMarkerArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str],
                 label: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class TimeBoardGraphRequestArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['TimeBoardGraphRequestApmQueryArgs']] = None,
                 change_type: Optional[pulumi.Input[str]] = None,
                 compare_to: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['TimeBoardGraphRequestConditionalFormatArgs']]]] = None,
                 extra_col: Optional[pulumi.Input[str]] = None,
                 increase_good: Optional[pulumi.Input[bool]] = None,
                 log_query: Optional[pulumi.Input['TimeBoardGraphRequestLogQueryArgs']] = None,
                 metadata_json: Optional[pulumi.Input[str]] = None,
                 order_by: Optional[pulumi.Input[str]] = None,
                 order_direction: Optional[pulumi.Input[str]] = None,
                 process_query: Optional[pulumi.Input['TimeBoardGraphRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 stacked: Optional[pulumi.Input[bool]] = None,
                 style: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if change_type is not None:
            pulumi.set(__self__, "change_type", change_type)
        if compare_to is not None:
            pulumi.set(__self__, "compare_to", compare_to)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if extra_col is not None:
            pulumi.set(__self__, "extra_col", extra_col)
        if increase_good is not None:
            pulumi.set(__self__, "increase_good", increase_good)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if metadata_json is not None:
            pulumi.set(__self__, "metadata_json", metadata_json)
        if order_by is not None:
            pulumi.set(__self__, "order_by", order_by)
        if order_direction is not None:
            pulumi.set(__self__, "order_direction", order_direction)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if stacked is not None:
            pulumi.set(__self__, "stacked", stacked)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['TimeBoardGraphRequestApmQueryArgs']]:
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['TimeBoardGraphRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="changeType")
    def change_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "change_type")

    @change_type.setter
    def change_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "change_type", value)

    @property
    @pulumi.getter(name="compareTo")
    def compare_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compare_to")

    @compare_to.setter
    def compare_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compare_to", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TimeBoardGraphRequestConditionalFormatArgs']]]]:
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TimeBoardGraphRequestConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter(name="extraCol")
    def extra_col(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extra_col")

    @extra_col.setter
    def extra_col(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_col", value)

    @property
    @pulumi.getter(name="increaseGood")
    def increase_good(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "increase_good")

    @increase_good.setter
    def increase_good(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "increase_good", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['TimeBoardGraphRequestLogQueryArgs']]:
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['TimeBoardGraphRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="metadataJson")
    def metadata_json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metadata_json")

    @metadata_json.setter
    def metadata_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata_json", value)

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "order_by")

    @order_by.setter
    def order_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_by", value)

    @property
    @pulumi.getter(name="orderDirection")
    def order_direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "order_direction")

    @order_direction.setter
    def order_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_direction", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['TimeBoardGraphRequestProcessQueryArgs']]:
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['TimeBoardGraphRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter
    def stacked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stacked")

    @stacked.setter
    def stacked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stacked", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TimeBoardGraphRequestApmQueryArgs:
    def __init__(__self__, *,
                 compute: pulumi.Input['TimeBoardGraphRequestApmQueryComputeArgs'],
                 index: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['TimeBoardGraphRequestApmQueryGroupByArgs']]]] = None,
                 search: Optional[pulumi.Input['TimeBoardGraphRequestApmQuerySearchArgs']] = None):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "index", index)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def compute(self) -> pulumi.Input['TimeBoardGraphRequestApmQueryComputeArgs']:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: pulumi.Input['TimeBoardGraphRequestApmQueryComputeArgs']):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TimeBoardGraphRequestApmQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TimeBoardGraphRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['TimeBoardGraphRequestApmQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['TimeBoardGraphRequestApmQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class TimeBoardGraphRequestApmQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class TimeBoardGraphRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['TimeBoardGraphRequestApmQueryGroupBySortArgs']] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['TimeBoardGraphRequestApmQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['TimeBoardGraphRequestApmQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class TimeBoardGraphRequestApmQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class TimeBoardGraphRequestApmQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class TimeBoardGraphRequestConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 palette: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "comparator", comparator)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TimeBoardGraphRequestLogQueryArgs:
    def __init__(__self__, *,
                 compute: pulumi.Input['TimeBoardGraphRequestLogQueryComputeArgs'],
                 index: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['TimeBoardGraphRequestLogQueryGroupByArgs']]]] = None,
                 search: Optional[pulumi.Input['TimeBoardGraphRequestLogQuerySearchArgs']] = None):
        pulumi.set(__self__, "compute", compute)
        pulumi.set(__self__, "index", index)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if search is not None:
            pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def compute(self) -> pulumi.Input['TimeBoardGraphRequestLogQueryComputeArgs']:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: pulumi.Input['TimeBoardGraphRequestLogQueryComputeArgs']):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TimeBoardGraphRequestLogQueryGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TimeBoardGraphRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['TimeBoardGraphRequestLogQuerySearchArgs']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['TimeBoardGraphRequestLogQuerySearchArgs']]):
        pulumi.set(self, "search", value)


@pulumi.input_type
class TimeBoardGraphRequestLogQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class TimeBoardGraphRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['TimeBoardGraphRequestLogQueryGroupBySortArgs']] = None):
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['TimeBoardGraphRequestLogQueryGroupBySortArgs']]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['TimeBoardGraphRequestLogQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class TimeBoardGraphRequestLogQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class TimeBoardGraphRequestLogQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class TimeBoardGraphRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class TimeBoardTemplateVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 default: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


