# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DashboardJsonArgs', 'DashboardJson']

@pulumi.input_type
class DashboardJsonArgs:
    def __init__(__self__, *,
                 dashboard: pulumi.Input[str],
                 dashboard_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DashboardJson resource.
        :param pulumi.Input[str] dashboard: The JSON formatted definition of the Dashboard.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] dashboard_lists: A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
               dashboard lists using Terraform as it causes inconsistent behavior.
        :param pulumi.Input[str] url: The URL of the dashboard.
        """
        DashboardJsonArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dashboard=dashboard,
            dashboard_lists=dashboard_lists,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dashboard: Optional[pulumi.Input[str]] = None,
             dashboard_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if dashboard is None:
            raise TypeError("Missing 'dashboard' argument")
        if dashboard_lists is None and 'dashboardLists' in kwargs:
            dashboard_lists = kwargs['dashboardLists']

        _setter("dashboard", dashboard)
        if dashboard_lists is not None:
            _setter("dashboard_lists", dashboard_lists)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def dashboard(self) -> pulumi.Input[str]:
        """
        The JSON formatted definition of the Dashboard.
        """
        return pulumi.get(self, "dashboard")

    @dashboard.setter
    def dashboard(self, value: pulumi.Input[str]):
        pulumi.set(self, "dashboard", value)

    @property
    @pulumi.getter(name="dashboardLists")
    def dashboard_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
        dashboard lists using Terraform as it causes inconsistent behavior.
        """
        return pulumi.get(self, "dashboard_lists")

    @dashboard_lists.setter
    def dashboard_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "dashboard_lists", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the dashboard.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class _DashboardJsonState:
    def __init__(__self__, *,
                 dashboard: Optional[pulumi.Input[str]] = None,
                 dashboard_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 dashboard_lists_removeds: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DashboardJson resources.
        :param pulumi.Input[str] dashboard: The JSON formatted definition of the Dashboard.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] dashboard_lists: A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
               dashboard lists using Terraform as it causes inconsistent behavior.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] dashboard_lists_removeds: The list of dashboard lists this dashboard should be removed from. Internal only.
        :param pulumi.Input[str] url: The URL of the dashboard.
        """
        _DashboardJsonState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dashboard=dashboard,
            dashboard_lists=dashboard_lists,
            dashboard_lists_removeds=dashboard_lists_removeds,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dashboard: Optional[pulumi.Input[str]] = None,
             dashboard_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             dashboard_lists_removeds: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if dashboard_lists is None and 'dashboardLists' in kwargs:
            dashboard_lists = kwargs['dashboardLists']
        if dashboard_lists_removeds is None and 'dashboardListsRemoveds' in kwargs:
            dashboard_lists_removeds = kwargs['dashboardListsRemoveds']

        if dashboard is not None:
            _setter("dashboard", dashboard)
        if dashboard_lists is not None:
            _setter("dashboard_lists", dashboard_lists)
        if dashboard_lists_removeds is not None:
            _setter("dashboard_lists_removeds", dashboard_lists_removeds)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def dashboard(self) -> Optional[pulumi.Input[str]]:
        """
        The JSON formatted definition of the Dashboard.
        """
        return pulumi.get(self, "dashboard")

    @dashboard.setter
    def dashboard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dashboard", value)

    @property
    @pulumi.getter(name="dashboardLists")
    def dashboard_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
        dashboard lists using Terraform as it causes inconsistent behavior.
        """
        return pulumi.get(self, "dashboard_lists")

    @dashboard_lists.setter
    def dashboard_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "dashboard_lists", value)

    @property
    @pulumi.getter(name="dashboardListsRemoveds")
    def dashboard_lists_removeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The list of dashboard lists this dashboard should be removed from. Internal only.
        """
        return pulumi.get(self, "dashboard_lists_removeds")

    @dashboard_lists_removeds.setter
    def dashboard_lists_removeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "dashboard_lists_removeds", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the dashboard.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class DashboardJson(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dashboard: Optional[pulumi.Input[str]] = None,
                 dashboard_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Datadog dashboard JSON resource. This can be used to create and manage Datadog dashboards using the JSON definition.

        ## Import

        ```sh
         $ pulumi import datadog:index/dashboardJson:DashboardJson my_service_dashboard sv7-gyh-kas
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dashboard: The JSON formatted definition of the Dashboard.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] dashboard_lists: A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
               dashboard lists using Terraform as it causes inconsistent behavior.
        :param pulumi.Input[str] url: The URL of the dashboard.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DashboardJsonArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Datadog dashboard JSON resource. This can be used to create and manage Datadog dashboards using the JSON definition.

        ## Import

        ```sh
         $ pulumi import datadog:index/dashboardJson:DashboardJson my_service_dashboard sv7-gyh-kas
        ```

        :param str resource_name: The name of the resource.
        :param DashboardJsonArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DashboardJsonArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            DashboardJsonArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dashboard: Optional[pulumi.Input[str]] = None,
                 dashboard_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DashboardJsonArgs.__new__(DashboardJsonArgs)

            if dashboard is None and not opts.urn:
                raise TypeError("Missing required property 'dashboard'")
            __props__.__dict__["dashboard"] = dashboard
            __props__.__dict__["dashboard_lists"] = dashboard_lists
            __props__.__dict__["url"] = url
            __props__.__dict__["dashboard_lists_removeds"] = None
        super(DashboardJson, __self__).__init__(
            'datadog:index/dashboardJson:DashboardJson',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dashboard: Optional[pulumi.Input[str]] = None,
            dashboard_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            dashboard_lists_removeds: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'DashboardJson':
        """
        Get an existing DashboardJson resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dashboard: The JSON formatted definition of the Dashboard.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] dashboard_lists: A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
               dashboard lists using Terraform as it causes inconsistent behavior.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] dashboard_lists_removeds: The list of dashboard lists this dashboard should be removed from. Internal only.
        :param pulumi.Input[str] url: The URL of the dashboard.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DashboardJsonState.__new__(_DashboardJsonState)

        __props__.__dict__["dashboard"] = dashboard
        __props__.__dict__["dashboard_lists"] = dashboard_lists
        __props__.__dict__["dashboard_lists_removeds"] = dashboard_lists_removeds
        __props__.__dict__["url"] = url
        return DashboardJson(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def dashboard(self) -> pulumi.Output[str]:
        """
        The JSON formatted definition of the Dashboard.
        """
        return pulumi.get(self, "dashboard")

    @property
    @pulumi.getter(name="dashboardLists")
    def dashboard_lists(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
        dashboard lists using Terraform as it causes inconsistent behavior.
        """
        return pulumi.get(self, "dashboard_lists")

    @property
    @pulumi.getter(name="dashboardListsRemoveds")
    def dashboard_lists_removeds(self) -> pulumi.Output[Sequence[int]]:
        """
        The list of dashboard lists this dashboard should be removed from. Internal only.
        """
        return pulumi.get(self, "dashboard_lists_removeds")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The URL of the dashboard.
        """
        return pulumi.get(self, "url")

