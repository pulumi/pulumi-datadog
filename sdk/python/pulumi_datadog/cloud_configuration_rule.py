# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CloudConfigurationRuleArgs', 'CloudConfigurationRule']

@pulumi.input_type
class CloudConfigurationRuleArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 message: pulumi.Input[str],
                 name: pulumi.Input[str],
                 policy: pulumi.Input[str],
                 resource_type: pulumi.Input[str],
                 severity: pulumi.Input[str],
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['CloudConfigurationRuleFilterArgs']]]] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 related_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a CloudConfigurationRule resource.
        :param pulumi.Input[bool] enabled: Whether the cloud configuration rule is enabled.
        :param pulumi.Input[str] message: The message associated to the rule that will be shown in findings and signals.
        :param pulumi.Input[str] name: The name of the cloud configuration rule.
        :param pulumi.Input[str] policy: Policy written in Rego format.
        :param pulumi.Input[str] resource_type: Main resource type to be checked by the rule.
        :param pulumi.Input[str] severity: Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[Sequence[pulumi.Input['CloudConfigurationRuleFilterArgs']]] filters: Additional queries to filter matched events before they are processed. Defaults to empty list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications: Notification targets for signals. Defaults to empty list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] related_resource_types: Related resource types to be checked by the rule. Defaults to empty list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags of the rule, propagated to findings and signals. Defaults to empty list.
        """
        CloudConfigurationRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            message=message,
            name=name,
            policy=policy,
            resource_type=resource_type,
            severity=severity,
            filters=filters,
            group_bies=group_bies,
            notifications=notifications,
            related_resource_types=related_resource_types,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: pulumi.Input[bool],
             message: pulumi.Input[str],
             name: pulumi.Input[str],
             policy: pulumi.Input[str],
             resource_type: pulumi.Input[str],
             severity: pulumi.Input[str],
             filters: Optional[pulumi.Input[Sequence[pulumi.Input['CloudConfigurationRuleFilterArgs']]]] = None,
             group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             notifications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             related_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        _setter("message", message)
        _setter("name", name)
        _setter("policy", policy)
        _setter("resource_type", resource_type)
        _setter("severity", severity)
        if filters is not None:
            _setter("filters", filters)
        if group_bies is not None:
            _setter("group_bies", group_bies)
        if notifications is not None:
            _setter("notifications", notifications)
        if related_resource_types is not None:
            _setter("related_resource_types", related_resource_types)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Whether the cloud configuration rule is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        The message associated to the rule that will be shown in findings and signals.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the cloud configuration rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Input[str]:
        """
        Policy written in Rego format.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        Main resource type to be checked by the rule.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Input[str]:
        """
        Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[str]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudConfigurationRuleFilterArgs']]]]:
        """
        Additional queries to filter matched events before they are processed. Defaults to empty list
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudConfigurationRuleFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Notification targets for signals. Defaults to empty list.
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter(name="relatedResourceTypes")
    def related_resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Related resource types to be checked by the rule. Defaults to empty list.
        """
        return pulumi.get(self, "related_resource_types")

    @related_resource_types.setter
    def related_resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "related_resource_types", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags of the rule, propagated to findings and signals. Defaults to empty list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _CloudConfigurationRuleState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['CloudConfigurationRuleFilterArgs']]]] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 related_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering CloudConfigurationRule resources.
        :param pulumi.Input[bool] enabled: Whether the cloud configuration rule is enabled.
        :param pulumi.Input[Sequence[pulumi.Input['CloudConfigurationRuleFilterArgs']]] filters: Additional queries to filter matched events before they are processed. Defaults to empty list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
        :param pulumi.Input[str] message: The message associated to the rule that will be shown in findings and signals.
        :param pulumi.Input[str] name: The name of the cloud configuration rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications: Notification targets for signals. Defaults to empty list.
        :param pulumi.Input[str] policy: Policy written in Rego format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] related_resource_types: Related resource types to be checked by the rule. Defaults to empty list.
        :param pulumi.Input[str] resource_type: Main resource type to be checked by the rule.
        :param pulumi.Input[str] severity: Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags of the rule, propagated to findings and signals. Defaults to empty list.
        """
        _CloudConfigurationRuleState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            filters=filters,
            group_bies=group_bies,
            message=message,
            name=name,
            notifications=notifications,
            policy=policy,
            related_resource_types=related_resource_types,
            resource_type=resource_type,
            severity=severity,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             filters: Optional[pulumi.Input[Sequence[pulumi.Input['CloudConfigurationRuleFilterArgs']]]] = None,
             group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             message: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             notifications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             policy: Optional[pulumi.Input[str]] = None,
             related_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             resource_type: Optional[pulumi.Input[str]] = None,
             severity: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enabled is not None:
            _setter("enabled", enabled)
        if filters is not None:
            _setter("filters", filters)
        if group_bies is not None:
            _setter("group_bies", group_bies)
        if message is not None:
            _setter("message", message)
        if name is not None:
            _setter("name", name)
        if notifications is not None:
            _setter("notifications", notifications)
        if policy is not None:
            _setter("policy", policy)
        if related_resource_types is not None:
            _setter("related_resource_types", related_resource_types)
        if resource_type is not None:
            _setter("resource_type", resource_type)
        if severity is not None:
            _setter("severity", severity)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the cloud configuration rule is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudConfigurationRuleFilterArgs']]]]:
        """
        Additional queries to filter matched events before they are processed. Defaults to empty list
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudConfigurationRuleFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        The message associated to the rule that will be shown in findings and signals.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cloud configuration rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Notification targets for signals. Defaults to empty list.
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        """
        Policy written in Rego format.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="relatedResourceTypes")
    def related_resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Related resource types to be checked by the rule. Defaults to empty list.
        """
        return pulumi.get(self, "related_resource_types")

    @related_resource_types.setter
    def related_resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "related_resource_types", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Main resource type to be checked by the rule.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags of the rule, propagated to findings and signals. Defaults to empty list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class CloudConfigurationRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudConfigurationRuleFilterArgs']]]]] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 related_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a Datadog Cloud Configuration Rule resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        myrule = datadog.CloudConfigurationRule("myrule",
            enabled=True,
            group_bies=["@resource"],
            message="Rule has triggered",
            name="My cloud configuration rule",
            notifications=["@channel"],
            policy=\"\"\"        package datadog

                import data.datadog.output as dd_output

                import future.keywords.contains
                import future.keywords.if
                import future.keywords.in

                eval(resource) = "skip" if {
                    # Logic that evaluates to true if the resource should be skipped
                    true
                } else = "pass" {
                    # Logic that evaluates to true if the resource is compliant
                    true
                } else = "fail" {
                    # Logic that evaluates to true if the resource is not compliant
                    true
                }

                # This part remains unchanged for all rules
                results contains result if {
                    some resource in input.resources[input.main_resource_type]
                    result := dd_output.format(resource, eval(resource))
                }

        \"\"\",
            related_resource_types=[],
            resource_type="aws_s3_bucket",
            severity="high",
            tags=["some:tag"])
        ```

        ## Import

        Security monitoring rules can be imported using ID, e.g.

        ```sh
         $ pulumi import datadog:index/cloudConfigurationRule:CloudConfigurationRule my_rule m0o-hto-lkb
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: Whether the cloud configuration rule is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudConfigurationRuleFilterArgs']]]] filters: Additional queries to filter matched events before they are processed. Defaults to empty list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
        :param pulumi.Input[str] message: The message associated to the rule that will be shown in findings and signals.
        :param pulumi.Input[str] name: The name of the cloud configuration rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications: Notification targets for signals. Defaults to empty list.
        :param pulumi.Input[str] policy: Policy written in Rego format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] related_resource_types: Related resource types to be checked by the rule. Defaults to empty list.
        :param pulumi.Input[str] resource_type: Main resource type to be checked by the rule.
        :param pulumi.Input[str] severity: Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags of the rule, propagated to findings and signals. Defaults to empty list.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CloudConfigurationRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Datadog Cloud Configuration Rule resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        myrule = datadog.CloudConfigurationRule("myrule",
            enabled=True,
            group_bies=["@resource"],
            message="Rule has triggered",
            name="My cloud configuration rule",
            notifications=["@channel"],
            policy=\"\"\"        package datadog

                import data.datadog.output as dd_output

                import future.keywords.contains
                import future.keywords.if
                import future.keywords.in

                eval(resource) = "skip" if {
                    # Logic that evaluates to true if the resource should be skipped
                    true
                } else = "pass" {
                    # Logic that evaluates to true if the resource is compliant
                    true
                } else = "fail" {
                    # Logic that evaluates to true if the resource is not compliant
                    true
                }

                # This part remains unchanged for all rules
                results contains result if {
                    some resource in input.resources[input.main_resource_type]
                    result := dd_output.format(resource, eval(resource))
                }

        \"\"\",
            related_resource_types=[],
            resource_type="aws_s3_bucket",
            severity="high",
            tags=["some:tag"])
        ```

        ## Import

        Security monitoring rules can be imported using ID, e.g.

        ```sh
         $ pulumi import datadog:index/cloudConfigurationRule:CloudConfigurationRule my_rule m0o-hto-lkb
        ```

        :param str resource_name: The name of the resource.
        :param CloudConfigurationRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudConfigurationRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            CloudConfigurationRuleArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudConfigurationRuleFilterArgs']]]]] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 related_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudConfigurationRuleArgs.__new__(CloudConfigurationRuleArgs)

            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["filters"] = filters
            __props__.__dict__["group_bies"] = group_bies
            if message is None and not opts.urn:
                raise TypeError("Missing required property 'message'")
            __props__.__dict__["message"] = message
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["notifications"] = notifications
            if policy is None and not opts.urn:
                raise TypeError("Missing required property 'policy'")
            __props__.__dict__["policy"] = policy
            __props__.__dict__["related_resource_types"] = related_resource_types
            if resource_type is None and not opts.urn:
                raise TypeError("Missing required property 'resource_type'")
            __props__.__dict__["resource_type"] = resource_type
            if severity is None and not opts.urn:
                raise TypeError("Missing required property 'severity'")
            __props__.__dict__["severity"] = severity
            __props__.__dict__["tags"] = tags
        super(CloudConfigurationRule, __self__).__init__(
            'datadog:index/cloudConfigurationRule:CloudConfigurationRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudConfigurationRuleFilterArgs']]]]] = None,
            group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            message: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notifications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            policy: Optional[pulumi.Input[str]] = None,
            related_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            resource_type: Optional[pulumi.Input[str]] = None,
            severity: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'CloudConfigurationRule':
        """
        Get an existing CloudConfigurationRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: Whether the cloud configuration rule is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudConfigurationRuleFilterArgs']]]] filters: Additional queries to filter matched events before they are processed. Defaults to empty list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
        :param pulumi.Input[str] message: The message associated to the rule that will be shown in findings and signals.
        :param pulumi.Input[str] name: The name of the cloud configuration rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications: Notification targets for signals. Defaults to empty list.
        :param pulumi.Input[str] policy: Policy written in Rego format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] related_resource_types: Related resource types to be checked by the rule. Defaults to empty list.
        :param pulumi.Input[str] resource_type: Main resource type to be checked by the rule.
        :param pulumi.Input[str] severity: Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags of the rule, propagated to findings and signals. Defaults to empty list.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CloudConfigurationRuleState.__new__(_CloudConfigurationRuleState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["filters"] = filters
        __props__.__dict__["group_bies"] = group_bies
        __props__.__dict__["message"] = message
        __props__.__dict__["name"] = name
        __props__.__dict__["notifications"] = notifications
        __props__.__dict__["policy"] = policy
        __props__.__dict__["related_resource_types"] = related_resource_types
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["severity"] = severity
        __props__.__dict__["tags"] = tags
        return CloudConfigurationRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Whether the cloud configuration rule is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Output[Optional[Sequence['outputs.CloudConfigurationRuleFilter']]]:
        """
        Additional queries to filter matched events before they are processed. Defaults to empty list
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Fields to group by when generating signals, e.g. @resource. Defaults to empty list.
        """
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def message(self) -> pulumi.Output[str]:
        """
        The message associated to the rule that will be shown in findings and signals.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the cloud configuration rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Notification targets for signals. Defaults to empty list.
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Output[str]:
        """
        Policy written in Rego format.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="relatedResourceTypes")
    def related_resource_types(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Related resource types to be checked by the rule. Defaults to empty list.
        """
        return pulumi.get(self, "related_resource_types")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[str]:
        """
        Main resource type to be checked by the rule.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Output[str]:
        """
        Severity of the rule and associated signals. Valid values are `info`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Tags of the rule, propagated to findings and signals. Defaults to empty list.
        """
        return pulumi.get(self, "tags")

