# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SensitiveDataScannerGroupArgs', 'SensitiveDataScannerGroup']

@pulumi.input_type
class SensitiveDataScannerGroupArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input['SensitiveDataScannerGroupFilterArgs'],
                 is_enabled: pulumi.Input[bool],
                 name: pulumi.Input[str],
                 product_lists: pulumi.Input[Sequence[pulumi.Input[str]]],
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SensitiveDataScannerGroup resource.
        :param pulumi.Input['SensitiveDataScannerGroupFilterArgs'] filter: Filter object the scanning group applies.
        :param pulumi.Input[bool] is_enabled: Whether or not the scanning group is enabled. If the group doesn't contain any rule or if all the rules in it are disabled, the group is force-disabled by our backend
        :param pulumi.Input[str] name: Name of the Datadog scanning group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] product_lists: List of products the scanning group applies.
        :param pulumi.Input[str] description: Description of the Datadog scanning group.
        """
        SensitiveDataScannerGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter=filter,
            is_enabled=is_enabled,
            name=name,
            product_lists=product_lists,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter: pulumi.Input['SensitiveDataScannerGroupFilterArgs'],
             is_enabled: pulumi.Input[bool],
             name: pulumi.Input[str],
             product_lists: pulumi.Input[Sequence[pulumi.Input[str]]],
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter", filter)
        _setter("is_enabled", is_enabled)
        _setter("name", name)
        _setter("product_lists", product_lists)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input['SensitiveDataScannerGroupFilterArgs']:
        """
        Filter object the scanning group applies.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input['SensitiveDataScannerGroupFilterArgs']):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        """
        Whether or not the scanning group is enabled. If the group doesn't contain any rule or if all the rules in it are disabled, the group is force-disabled by our backend
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the Datadog scanning group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="productLists")
    def product_lists(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of products the scanning group applies.
        """
        return pulumi.get(self, "product_lists")

    @product_lists.setter
    def product_lists(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "product_lists", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the Datadog scanning group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _SensitiveDataScannerGroupState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input['SensitiveDataScannerGroupFilterArgs']] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 product_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering SensitiveDataScannerGroup resources.
        :param pulumi.Input[str] description: Description of the Datadog scanning group.
        :param pulumi.Input['SensitiveDataScannerGroupFilterArgs'] filter: Filter object the scanning group applies.
        :param pulumi.Input[bool] is_enabled: Whether or not the scanning group is enabled. If the group doesn't contain any rule or if all the rules in it are disabled, the group is force-disabled by our backend
        :param pulumi.Input[str] name: Name of the Datadog scanning group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] product_lists: List of products the scanning group applies.
        """
        _SensitiveDataScannerGroupState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            filter=filter,
            is_enabled=is_enabled,
            name=name,
            product_lists=product_lists,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[pulumi.Input[str]] = None,
             filter: Optional[pulumi.Input['SensitiveDataScannerGroupFilterArgs']] = None,
             is_enabled: Optional[pulumi.Input[bool]] = None,
             name: Optional[pulumi.Input[str]] = None,
             product_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if description is not None:
            _setter("description", description)
        if filter is not None:
            _setter("filter", filter)
        if is_enabled is not None:
            _setter("is_enabled", is_enabled)
        if name is not None:
            _setter("name", name)
        if product_lists is not None:
            _setter("product_lists", product_lists)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the Datadog scanning group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['SensitiveDataScannerGroupFilterArgs']]:
        """
        Filter object the scanning group applies.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['SensitiveDataScannerGroupFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the scanning group is enabled. If the group doesn't contain any rule or if all the rules in it are disabled, the group is force-disabled by our backend
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Datadog scanning group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="productLists")
    def product_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of products the scanning group applies.
        """
        return pulumi.get(self, "product_lists")

    @product_lists.setter
    def product_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "product_lists", value)


class SensitiveDataScannerGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['SensitiveDataScannerGroupFilterArgs']]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 product_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a Sensitive Data Scanner group resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        mygroup = datadog.SensitiveDataScannerGroup("mygroup",
            description="A relevant description",
            filter=datadog.SensitiveDataScannerGroupFilterArgs(
                query="service:my-service",
            ),
            is_enabled=True,
            name="My new scanning group",
            product_lists=["apm"])
        ```

        ## Import

        ```sh
         $ pulumi import datadog:index/sensitiveDataScannerGroup:SensitiveDataScannerGroup new_list ""
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the Datadog scanning group.
        :param pulumi.Input[pulumi.InputType['SensitiveDataScannerGroupFilterArgs']] filter: Filter object the scanning group applies.
        :param pulumi.Input[bool] is_enabled: Whether or not the scanning group is enabled. If the group doesn't contain any rule or if all the rules in it are disabled, the group is force-disabled by our backend
        :param pulumi.Input[str] name: Name of the Datadog scanning group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] product_lists: List of products the scanning group applies.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SensitiveDataScannerGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Sensitive Data Scanner group resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        mygroup = datadog.SensitiveDataScannerGroup("mygroup",
            description="A relevant description",
            filter=datadog.SensitiveDataScannerGroupFilterArgs(
                query="service:my-service",
            ),
            is_enabled=True,
            name="My new scanning group",
            product_lists=["apm"])
        ```

        ## Import

        ```sh
         $ pulumi import datadog:index/sensitiveDataScannerGroup:SensitiveDataScannerGroup new_list ""
        ```

        :param str resource_name: The name of the resource.
        :param SensitiveDataScannerGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SensitiveDataScannerGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            SensitiveDataScannerGroupArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['SensitiveDataScannerGroupFilterArgs']]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 product_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SensitiveDataScannerGroupArgs.__new__(SensitiveDataScannerGroupArgs)

            __props__.__dict__["description"] = description
            if filter is not None and not isinstance(filter, SensitiveDataScannerGroupFilterArgs):
                filter = filter or {}
                def _setter(key, value):
                    filter[key] = value
                SensitiveDataScannerGroupFilterArgs._configure(_setter, **filter)
            if filter is None and not opts.urn:
                raise TypeError("Missing required property 'filter'")
            __props__.__dict__["filter"] = filter
            if is_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'is_enabled'")
            __props__.__dict__["is_enabled"] = is_enabled
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if product_lists is None and not opts.urn:
                raise TypeError("Missing required property 'product_lists'")
            __props__.__dict__["product_lists"] = product_lists
        super(SensitiveDataScannerGroup, __self__).__init__(
            'datadog:index/sensitiveDataScannerGroup:SensitiveDataScannerGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            filter: Optional[pulumi.Input[pulumi.InputType['SensitiveDataScannerGroupFilterArgs']]] = None,
            is_enabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            product_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'SensitiveDataScannerGroup':
        """
        Get an existing SensitiveDataScannerGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the Datadog scanning group.
        :param pulumi.Input[pulumi.InputType['SensitiveDataScannerGroupFilterArgs']] filter: Filter object the scanning group applies.
        :param pulumi.Input[bool] is_enabled: Whether or not the scanning group is enabled. If the group doesn't contain any rule or if all the rules in it are disabled, the group is force-disabled by our backend
        :param pulumi.Input[str] name: Name of the Datadog scanning group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] product_lists: List of products the scanning group applies.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SensitiveDataScannerGroupState.__new__(_SensitiveDataScannerGroupState)

        __props__.__dict__["description"] = description
        __props__.__dict__["filter"] = filter
        __props__.__dict__["is_enabled"] = is_enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["product_lists"] = product_lists
        return SensitiveDataScannerGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the Datadog scanning group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Output['outputs.SensitiveDataScannerGroupFilter']:
        """
        Filter object the scanning group applies.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Output[bool]:
        """
        Whether or not the scanning group is enabled. If the group doesn't contain any rule or if all the rules in it are disabled, the group is force-disabled by our backend
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the Datadog scanning group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productLists")
    def product_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        List of products the scanning group applies.
        """
        return pulumi.get(self, "product_lists")

