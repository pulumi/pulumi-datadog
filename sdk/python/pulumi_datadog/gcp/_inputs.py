# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'IntegrationMonitoredResourceConfigArgs',
    'IntegrationMonitoredResourceConfigArgsDict',
    'IntegrationStsMetricNamespaceConfigArgs',
    'IntegrationStsMetricNamespaceConfigArgsDict',
    'IntegrationStsMonitoredResourceConfigArgs',
    'IntegrationStsMonitoredResourceConfigArgsDict',
]

MYPY = False

if not MYPY:
    class IntegrationMonitoredResourceConfigArgsDict(TypedDict):
        filters: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        type: pulumi.Input[_builtins.str]
elif False:
    IntegrationMonitoredResourceConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegrationMonitoredResourceConfigArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 type: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "filters", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class IntegrationStsMetricNamespaceConfigArgsDict(TypedDict):
        disabled: pulumi.Input[_builtins.bool]
        id: pulumi.Input[_builtins.str]
elif False:
    IntegrationStsMetricNamespaceConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegrationStsMetricNamespaceConfigArgs:
    def __init__(__self__, *,
                 disabled: pulumi.Input[_builtins.bool],
                 id: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> pulumi.Input[_builtins.bool]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "disabled", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class IntegrationStsMonitoredResourceConfigArgsDict(TypedDict):
        filters: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        type: pulumi.Input[_builtins.str]
elif False:
    IntegrationStsMonitoredResourceConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegrationStsMonitoredResourceConfigArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 type: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "filters", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


