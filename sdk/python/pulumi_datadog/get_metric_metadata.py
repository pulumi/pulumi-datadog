# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetMetricMetadataResult',
    'AwaitableGetMetricMetadataResult',
    'get_metric_metadata',
    'get_metric_metadata_output',
]

@pulumi.output_type
class GetMetricMetadataResult:
    """
    A collection of values returned by getMetricMetadata.
    """
    def __init__(__self__, description=None, id=None, integration=None, metric_name=None, per_unit=None, short_name=None, statsd_interval=None, type=None, unit=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if integration and not isinstance(integration, str):
            raise TypeError("Expected argument 'integration' to be a str")
        pulumi.set(__self__, "integration", integration)
        if metric_name and not isinstance(metric_name, str):
            raise TypeError("Expected argument 'metric_name' to be a str")
        pulumi.set(__self__, "metric_name", metric_name)
        if per_unit and not isinstance(per_unit, str):
            raise TypeError("Expected argument 'per_unit' to be a str")
        pulumi.set(__self__, "per_unit", per_unit)
        if short_name and not isinstance(short_name, str):
            raise TypeError("Expected argument 'short_name' to be a str")
        pulumi.set(__self__, "short_name", short_name)
        if statsd_interval and not isinstance(statsd_interval, int):
            raise TypeError("Expected argument 'statsd_interval' to be a int")
        pulumi.set(__self__, "statsd_interval", statsd_interval)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if unit and not isinstance(unit, str):
            raise TypeError("Expected argument 'unit' to be a str")
        pulumi.set(__self__, "unit", unit)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The metric description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def integration(self) -> _builtins.str:
        """
        The metric integration.
        """
        return pulumi.get(self, "integration")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        The metric for which to fetch metadata.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter(name="perUnit")
    def per_unit(self) -> _builtins.str:
        """
        The per unit of the metric.
        """
        return pulumi.get(self, "per_unit")

    @_builtins.property
    @pulumi.getter(name="shortName")
    def short_name(self) -> _builtins.str:
        """
        The metric short name.
        """
        return pulumi.get(self, "short_name")

    @_builtins.property
    @pulumi.getter(name="statsdInterval")
    def statsd_interval(self) -> _builtins.int:
        """
        The metric statsd interval.
        """
        return pulumi.get(self, "statsd_interval")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The metric type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The metric unit.
        """
        return pulumi.get(self, "unit")


class AwaitableGetMetricMetadataResult(GetMetricMetadataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetricMetadataResult(
            description=self.description,
            id=self.id,
            integration=self.integration,
            metric_name=self.metric_name,
            per_unit=self.per_unit,
            short_name=self.short_name,
            statsd_interval=self.statsd_interval,
            type=self.type,
            unit=self.unit)


def get_metric_metadata(metric_name: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetricMetadataResult:
    """
    Use this data source to retrieve metadata associated with a metric to use in other resources.


    :param _builtins.str metric_name: The metric for which to fetch metadata.
    """
    __args__ = dict()
    __args__['metricName'] = metric_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('datadog:index/getMetricMetadata:getMetricMetadata', __args__, opts=opts, typ=GetMetricMetadataResult).value

    return AwaitableGetMetricMetadataResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        integration=pulumi.get(__ret__, 'integration'),
        metric_name=pulumi.get(__ret__, 'metric_name'),
        per_unit=pulumi.get(__ret__, 'per_unit'),
        short_name=pulumi.get(__ret__, 'short_name'),
        statsd_interval=pulumi.get(__ret__, 'statsd_interval'),
        type=pulumi.get(__ret__, 'type'),
        unit=pulumi.get(__ret__, 'unit'))
def get_metric_metadata_output(metric_name: Optional[pulumi.Input[_builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMetricMetadataResult]:
    """
    Use this data source to retrieve metadata associated with a metric to use in other resources.


    :param _builtins.str metric_name: The metric for which to fetch metadata.
    """
    __args__ = dict()
    __args__['metricName'] = metric_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('datadog:index/getMetricMetadata:getMetricMetadata', __args__, opts=opts, typ=GetMetricMetadataResult)
    return __ret__.apply(lambda __response__: GetMetricMetadataResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        integration=pulumi.get(__response__, 'integration'),
        metric_name=pulumi.get(__response__, 'metric_name'),
        per_unit=pulumi.get(__response__, 'per_unit'),
        short_name=pulumi.get(__response__, 'short_name'),
        statsd_interval=pulumi.get(__response__, 'statsd_interval'),
        type=pulumi.get(__response__, 'type'),
        unit=pulumi.get(__response__, 'unit')))
