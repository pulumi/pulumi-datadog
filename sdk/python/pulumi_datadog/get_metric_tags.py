# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetMetricTagsResult',
    'AwaitableGetMetricTagsResult',
    'get_metric_tags',
    'get_metric_tags_output',
]

@pulumi.output_type
class GetMetricTagsResult:
    """
    A collection of values returned by getMetricTags.
    """
    def __init__(__self__, id=None, metric=None, tags=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metric and not isinstance(metric, str):
            raise TypeError("Expected argument 'metric' to be a str")
        pulumi.set(__self__, "metric", metric)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metric(self) -> builtins.str:
        """
        The metric for which to fetch tags.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[builtins.str]:
        """
        The tags associated with the metric.
        """
        return pulumi.get(self, "tags")


class AwaitableGetMetricTagsResult(GetMetricTagsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetricTagsResult(
            id=self.id,
            metric=self.metric,
            tags=self.tags)


def get_metric_tags(metric: Optional[builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetricTagsResult:
    """
    Use this data source to retrieve tags associated with a metric to use in other resources.


    :param builtins.str metric: The metric for which to fetch tags.
    """
    __args__ = dict()
    __args__['metric'] = metric
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('datadog:index/getMetricTags:getMetricTags', __args__, opts=opts, typ=GetMetricTagsResult).value

    return AwaitableGetMetricTagsResult(
        id=pulumi.get(__ret__, 'id'),
        metric=pulumi.get(__ret__, 'metric'),
        tags=pulumi.get(__ret__, 'tags'))
def get_metric_tags_output(metric: Optional[pulumi.Input[builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMetricTagsResult]:
    """
    Use this data source to retrieve tags associated with a metric to use in other resources.


    :param builtins.str metric: The metric for which to fetch tags.
    """
    __args__ = dict()
    __args__['metric'] = metric
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('datadog:index/getMetricTags:getMetricTags', __args__, opts=opts, typ=GetMetricTagsResult)
    return __ret__.apply(lambda __response__: GetMetricTagsResult(
        id=pulumi.get(__response__, 'id'),
        metric=pulumi.get(__response__, 'metric'),
        tags=pulumi.get(__response__, 'tags')))
