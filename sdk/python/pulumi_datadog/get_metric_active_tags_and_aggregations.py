# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetMetricActiveTagsAndAggregationsResult',
    'AwaitableGetMetricActiveTagsAndAggregationsResult',
    'get_metric_active_tags_and_aggregations',
    'get_metric_active_tags_and_aggregations_output',
]

@pulumi.output_type
class GetMetricActiveTagsAndAggregationsResult:
    """
    A collection of values returned by getMetricActiveTagsAndAggregations.
    """
    def __init__(__self__, active_aggregations=None, active_tags=None, id=None, metric=None, window=None):
        if active_aggregations and not isinstance(active_aggregations, list):
            raise TypeError("Expected argument 'active_aggregations' to be a list")
        pulumi.set(__self__, "active_aggregations", active_aggregations)
        if active_tags and not isinstance(active_tags, list):
            raise TypeError("Expected argument 'active_tags' to be a list")
        pulumi.set(__self__, "active_tags", active_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metric and not isinstance(metric, str):
            raise TypeError("Expected argument 'metric' to be a str")
        pulumi.set(__self__, "metric", metric)
        if window and not isinstance(window, int):
            raise TypeError("Expected argument 'window' to be a int")
        pulumi.set(__self__, "window", window)

    @_builtins.property
    @pulumi.getter(name="activeAggregations")
    def active_aggregations(self) -> Sequence['outputs.GetMetricActiveTagsAndAggregationsActiveAggregationResult']:
        """
        The active aggregations associated with the metric.
        """
        return pulumi.get(self, "active_aggregations")

    @_builtins.property
    @pulumi.getter(name="activeTags")
    def active_tags(self) -> Sequence[_builtins.str]:
        """
        The active tags associated with the metric.
        """
        return pulumi.get(self, "active_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> _builtins.str:
        """
        The metric for which to fetch tags.
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter
    def window(self) -> Optional[_builtins.int]:
        """
        The number of seconds to look back from now.
        """
        return pulumi.get(self, "window")


class AwaitableGetMetricActiveTagsAndAggregationsResult(GetMetricActiveTagsAndAggregationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetricActiveTagsAndAggregationsResult(
            active_aggregations=self.active_aggregations,
            active_tags=self.active_tags,
            id=self.id,
            metric=self.metric,
            window=self.window)


def get_metric_active_tags_and_aggregations(metric: Optional[_builtins.str] = None,
                                            window: Optional[_builtins.int] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetricActiveTagsAndAggregationsResult:
    """
    Use this data source to retrieve active tags and aggregations associated with a metric to use in other resources.


    :param _builtins.str metric: The metric for which to fetch tags.
    :param _builtins.int window: The number of seconds to look back from now.
    """
    __args__ = dict()
    __args__['metric'] = metric
    __args__['window'] = window
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('datadog:index/getMetricActiveTagsAndAggregations:getMetricActiveTagsAndAggregations', __args__, opts=opts, typ=GetMetricActiveTagsAndAggregationsResult).value

    return AwaitableGetMetricActiveTagsAndAggregationsResult(
        active_aggregations=pulumi.get(__ret__, 'active_aggregations'),
        active_tags=pulumi.get(__ret__, 'active_tags'),
        id=pulumi.get(__ret__, 'id'),
        metric=pulumi.get(__ret__, 'metric'),
        window=pulumi.get(__ret__, 'window'))
def get_metric_active_tags_and_aggregations_output(metric: Optional[pulumi.Input[_builtins.str]] = None,
                                                   window: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMetricActiveTagsAndAggregationsResult]:
    """
    Use this data source to retrieve active tags and aggregations associated with a metric to use in other resources.


    :param _builtins.str metric: The metric for which to fetch tags.
    :param _builtins.int window: The number of seconds to look back from now.
    """
    __args__ = dict()
    __args__['metric'] = metric
    __args__['window'] = window
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('datadog:index/getMetricActiveTagsAndAggregations:getMetricActiveTagsAndAggregations', __args__, opts=opts, typ=GetMetricActiveTagsAndAggregationsResult)
    return __ret__.apply(lambda __response__: GetMetricActiveTagsAndAggregationsResult(
        active_aggregations=pulumi.get(__response__, 'active_aggregations'),
        active_tags=pulumi.get(__response__, 'active_tags'),
        id=pulumi.get(__response__, 'id'),
        metric=pulumi.get(__response__, 'metric'),
        window=pulumi.get(__response__, 'window')))
