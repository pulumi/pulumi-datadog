# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['LogsArchive']


class LogsArchive(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 azure: Optional[pulumi.Input[pulumi.InputType['LogsArchiveAzureArgs']]] = None,
                 azure_archive: Optional[pulumi.Input[pulumi.InputType['LogsArchiveAzureArchiveArgs']]] = None,
                 gcs: Optional[pulumi.Input[pulumi.InputType['LogsArchiveGcsArgs']]] = None,
                 gcs_archive: Optional[pulumi.Input[pulumi.InputType['LogsArchiveGcsArchiveArgs']]] = None,
                 include_tags: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 rehydration_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 s3: Optional[pulumi.Input[pulumi.InputType['LogsArchiveS3Args']]] = None,
                 s3_archive: Optional[pulumi.Input[pulumi.InputType['LogsArchiveS3ArchiveArgs']]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Provides a Datadog Logs Archive API resource, which is used to create and manage Datadog logs archives.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_datadog as datadog

        my_s3_archive = datadog.LogsArchive("myS3Archive",
            name="my s3 archive",
            query="service:myservice",
            s3_archive=datadog.LogsArchiveS3ArchiveArgs(
                account_id="001234567888",
                bucket="my-bucket",
                path="/path/foo",
                role_name="my-role-name",
            ))
        ```
        ## Schema

        ### Required

        - **name** (String, Required) Your archive name.
        - **query** (String, Required) The archive query/filter. Logs matching this query are included in the archive.

        ### Optional

        - **azure** (Map of String, Optional, Deprecated) Definition of an azure archive.
        - **azure_archive** (Block List, Max: 1) Definition of an azure archive. (see below for nested schema)
        - **gcs** (Map of String, Optional, Deprecated) Definition of a GCS archive.
        - **gcs_archive** (Block List, Max: 1) Definition of a GCS archive. (see below for nested schema)
        - **id** (String, Optional) The ID of this resource.
        - **include_tags** (Boolean, Optional) To store the tags in the archive, set the value `true`. If it is set to `false`, the tags will be dropped when the logs are sent to the archive.
        - **rehydration_tags** (List of String, Optional) An array of tags to add to rehydrated logs from an archive.
        - **s3** (Map of String, Optional, Deprecated) Definition of an s3 archive.
        - **s3_archive** (Block List, Max: 1) Definition of an s3 archive. (see below for nested schema)

        <a id="nestedblock--azure_archive"></a>
        ### Nested Schema for `azure_archive`

        Required:

        - **client_id** (String, Required) Your client id.
        - **container** (String, Required) The container where the archive will be stored.
        - **storage_account** (String, Required) The associated storage account.
        - **tenant_id** (String, Required) Your tenant id.

        Optional:

        - **path** (String, Optional) The path where the archive will be stored.

        <a id="nestedblock--gcs_archive"></a>
        ### Nested Schema for `gcs_archive`

        Required:

        - **bucket** (String, Required) Name of your GCS bucket.
        - **client_email** (String, Required) Your client email.
        - **path** (String, Required) Path where the archive will be stored.
        - **project_id** (String, Required) Your project id.

        <a id="nestedblock--s3_archive"></a>
        ### Nested Schema for `s3_archive`

        Required:

        - **account_id** (String, Required) Your AWS account id.
        - **bucket** (String, Required) Name of your s3 bucket.
        - **path** (String, Required) Path where the archive will be stored.
        - **role_name** (String, Required) Your AWS role name

        ## Import

        Import is supported using the following syntax

        ```sh
         $ pulumi import datadog:index/logsArchive:LogsArchive my_s3_archive 1Aabc2_dfQPLnXy3HlfK4hi
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['LogsArchiveAzureArgs']] azure: Definition of an azure archive.
        :param pulumi.Input[pulumi.InputType['LogsArchiveAzureArchiveArgs']] azure_archive: Definition of an azure archive.
        :param pulumi.Input[pulumi.InputType['LogsArchiveGcsArgs']] gcs: Definition of a GCS archive.
        :param pulumi.Input[pulumi.InputType['LogsArchiveGcsArchiveArgs']] gcs_archive: Definition of a GCS archive.
        :param pulumi.Input[bool] include_tags: To store the tags in the archive, set the value `true`. If it is set to `false`, the tags will be dropped when the logs
               are sent to the archive.
        :param pulumi.Input[str] name: Your archive name.
        :param pulumi.Input[str] query: The archive query/filter. Logs matching this query are included in the archive.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rehydration_tags: An array of tags to add to rehydrated logs from an archive.
        :param pulumi.Input[pulumi.InputType['LogsArchiveS3Args']] s3: Definition of an s3 archive.
        :param pulumi.Input[pulumi.InputType['LogsArchiveS3ArchiveArgs']] s3_archive: Definition of an s3 archive.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if azure is not None and not opts.urn:
                warnings.warn("""Define `azure_archive` list with one element instead.""", DeprecationWarning)
                pulumi.log.warn("""azure is deprecated: Define `azure_archive` list with one element instead.""")
            __props__['azure'] = azure
            __props__['azure_archive'] = azure_archive
            if gcs is not None and not opts.urn:
                warnings.warn("""Define `gcs_archive` list with one element instead.""", DeprecationWarning)
                pulumi.log.warn("""gcs is deprecated: Define `gcs_archive` list with one element instead.""")
            __props__['gcs'] = gcs
            __props__['gcs_archive'] = gcs_archive
            __props__['include_tags'] = include_tags
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if query is None and not opts.urn:
                raise TypeError("Missing required property 'query'")
            __props__['query'] = query
            __props__['rehydration_tags'] = rehydration_tags
            if s3 is not None and not opts.urn:
                warnings.warn("""Define `s3_archive` list with one element instead.""", DeprecationWarning)
                pulumi.log.warn("""s3 is deprecated: Define `s3_archive` list with one element instead.""")
            __props__['s3'] = s3
            __props__['s3_archive'] = s3_archive
        super(LogsArchive, __self__).__init__(
            'datadog:index/logsArchive:LogsArchive',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            azure: Optional[pulumi.Input[pulumi.InputType['LogsArchiveAzureArgs']]] = None,
            azure_archive: Optional[pulumi.Input[pulumi.InputType['LogsArchiveAzureArchiveArgs']]] = None,
            gcs: Optional[pulumi.Input[pulumi.InputType['LogsArchiveGcsArgs']]] = None,
            gcs_archive: Optional[pulumi.Input[pulumi.InputType['LogsArchiveGcsArchiveArgs']]] = None,
            include_tags: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            query: Optional[pulumi.Input[str]] = None,
            rehydration_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            s3: Optional[pulumi.Input[pulumi.InputType['LogsArchiveS3Args']]] = None,
            s3_archive: Optional[pulumi.Input[pulumi.InputType['LogsArchiveS3ArchiveArgs']]] = None) -> 'LogsArchive':
        """
        Get an existing LogsArchive resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['LogsArchiveAzureArgs']] azure: Definition of an azure archive.
        :param pulumi.Input[pulumi.InputType['LogsArchiveAzureArchiveArgs']] azure_archive: Definition of an azure archive.
        :param pulumi.Input[pulumi.InputType['LogsArchiveGcsArgs']] gcs: Definition of a GCS archive.
        :param pulumi.Input[pulumi.InputType['LogsArchiveGcsArchiveArgs']] gcs_archive: Definition of a GCS archive.
        :param pulumi.Input[bool] include_tags: To store the tags in the archive, set the value `true`. If it is set to `false`, the tags will be dropped when the logs
               are sent to the archive.
        :param pulumi.Input[str] name: Your archive name.
        :param pulumi.Input[str] query: The archive query/filter. Logs matching this query are included in the archive.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rehydration_tags: An array of tags to add to rehydrated logs from an archive.
        :param pulumi.Input[pulumi.InputType['LogsArchiveS3Args']] s3: Definition of an s3 archive.
        :param pulumi.Input[pulumi.InputType['LogsArchiveS3ArchiveArgs']] s3_archive: Definition of an s3 archive.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["azure"] = azure
        __props__["azure_archive"] = azure_archive
        __props__["gcs"] = gcs
        __props__["gcs_archive"] = gcs_archive
        __props__["include_tags"] = include_tags
        __props__["name"] = name
        __props__["query"] = query
        __props__["rehydration_tags"] = rehydration_tags
        __props__["s3"] = s3
        __props__["s3_archive"] = s3_archive
        return LogsArchive(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def azure(self) -> pulumi.Output[Optional['outputs.LogsArchiveAzure']]:
        """
        Definition of an azure archive.
        """
        return pulumi.get(self, "azure")

    @property
    @pulumi.getter(name="azureArchive")
    def azure_archive(self) -> pulumi.Output[Optional['outputs.LogsArchiveAzureArchive']]:
        """
        Definition of an azure archive.
        """
        return pulumi.get(self, "azure_archive")

    @property
    @pulumi.getter
    def gcs(self) -> pulumi.Output[Optional['outputs.LogsArchiveGcs']]:
        """
        Definition of a GCS archive.
        """
        return pulumi.get(self, "gcs")

    @property
    @pulumi.getter(name="gcsArchive")
    def gcs_archive(self) -> pulumi.Output[Optional['outputs.LogsArchiveGcsArchive']]:
        """
        Definition of a GCS archive.
        """
        return pulumi.get(self, "gcs_archive")

    @property
    @pulumi.getter(name="includeTags")
    def include_tags(self) -> pulumi.Output[Optional[bool]]:
        """
        To store the tags in the archive, set the value `true`. If it is set to `false`, the tags will be dropped when the logs
        are sent to the archive.
        """
        return pulumi.get(self, "include_tags")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Your archive name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def query(self) -> pulumi.Output[str]:
        """
        The archive query/filter. Logs matching this query are included in the archive.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="rehydrationTags")
    def rehydration_tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        An array of tags to add to rehydrated logs from an archive.
        """
        return pulumi.get(self, "rehydration_tags")

    @property
    @pulumi.getter
    def s3(self) -> pulumi.Output[Optional['outputs.LogsArchiveS3']]:
        """
        Definition of an s3 archive.
        """
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter(name="s3Archive")
    def s3_archive(self) -> pulumi.Output[Optional['outputs.LogsArchiveS3Archive']]:
        """
        Definition of an s3 archive.
        """
        return pulumi.get(self, "s3_archive")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

