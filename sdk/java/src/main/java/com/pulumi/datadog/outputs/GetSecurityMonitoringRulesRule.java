// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.GetSecurityMonitoringRulesRuleCase;
import com.pulumi.datadog.outputs.GetSecurityMonitoringRulesRuleFilter;
import com.pulumi.datadog.outputs.GetSecurityMonitoringRulesRuleOptions;
import com.pulumi.datadog.outputs.GetSecurityMonitoringRulesRuleQuery;
import com.pulumi.datadog.outputs.GetSecurityMonitoringRulesRuleSignalQuery;
import com.pulumi.datadog.outputs.GetSecurityMonitoringRulesRuleThirdPartyCase;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecurityMonitoringRulesRule {
    /**
     * @return Cases for generating signals.
     * 
     */
    private @Nullable List<GetSecurityMonitoringRulesRuleCase> cases;
    /**
     * @return Whether the rule is enabled.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return Additional queries to filter matched events before they are processed.
     * 
     */
    private @Nullable List<GetSecurityMonitoringRulesRuleFilter> filters;
    /**
     * @return Whether the notifications include the triggering group-by values in their title.
     * 
     */
    private @Nullable Boolean hasExtendedTitle;
    /**
     * @return Message for generated signals.
     * 
     */
    private String message;
    /**
     * @return The name of the rule.
     * 
     */
    private String name;
    /**
     * @return Options on rules.
     * 
     */
    private @Nullable GetSecurityMonitoringRulesRuleOptions options;
    /**
     * @return Queries for selecting logs which are part of the rule.
     * 
     */
    private @Nullable List<GetSecurityMonitoringRulesRuleQuery> queries;
    /**
     * @return Queries for selecting logs which are part of the rule.
     * 
     */
    private @Nullable List<GetSecurityMonitoringRulesRuleSignalQuery> signalQueries;
    /**
     * @return Tags for generated signals.
     * 
     */
    private @Nullable List<String> tags;
    /**
     * @return Cases for generating signals for third-party rules. Only required and accepted for third-party rules
     * 
     */
    private @Nullable List<GetSecurityMonitoringRulesRuleThirdPartyCase> thirdPartyCases;
    /**
     * @return The rule type.
     * 
     */
    private @Nullable String type;

    private GetSecurityMonitoringRulesRule() {}
    /**
     * @return Cases for generating signals.
     * 
     */
    public List<GetSecurityMonitoringRulesRuleCase> cases() {
        return this.cases == null ? List.of() : this.cases;
    }
    /**
     * @return Whether the rule is enabled.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Additional queries to filter matched events before they are processed.
     * 
     */
    public List<GetSecurityMonitoringRulesRuleFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return Whether the notifications include the triggering group-by values in their title.
     * 
     */
    public Optional<Boolean> hasExtendedTitle() {
        return Optional.ofNullable(this.hasExtendedTitle);
    }
    /**
     * @return Message for generated signals.
     * 
     */
    public String message() {
        return this.message;
    }
    /**
     * @return The name of the rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Options on rules.
     * 
     */
    public Optional<GetSecurityMonitoringRulesRuleOptions> options() {
        return Optional.ofNullable(this.options);
    }
    /**
     * @return Queries for selecting logs which are part of the rule.
     * 
     */
    public List<GetSecurityMonitoringRulesRuleQuery> queries() {
        return this.queries == null ? List.of() : this.queries;
    }
    /**
     * @return Queries for selecting logs which are part of the rule.
     * 
     */
    public List<GetSecurityMonitoringRulesRuleSignalQuery> signalQueries() {
        return this.signalQueries == null ? List.of() : this.signalQueries;
    }
    /**
     * @return Tags for generated signals.
     * 
     */
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return Cases for generating signals for third-party rules. Only required and accepted for third-party rules
     * 
     */
    public List<GetSecurityMonitoringRulesRuleThirdPartyCase> thirdPartyCases() {
        return this.thirdPartyCases == null ? List.of() : this.thirdPartyCases;
    }
    /**
     * @return The rule type.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityMonitoringRulesRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetSecurityMonitoringRulesRuleCase> cases;
        private @Nullable Boolean enabled;
        private @Nullable List<GetSecurityMonitoringRulesRuleFilter> filters;
        private @Nullable Boolean hasExtendedTitle;
        private String message;
        private String name;
        private @Nullable GetSecurityMonitoringRulesRuleOptions options;
        private @Nullable List<GetSecurityMonitoringRulesRuleQuery> queries;
        private @Nullable List<GetSecurityMonitoringRulesRuleSignalQuery> signalQueries;
        private @Nullable List<String> tags;
        private @Nullable List<GetSecurityMonitoringRulesRuleThirdPartyCase> thirdPartyCases;
        private @Nullable String type;
        public Builder() {}
        public Builder(GetSecurityMonitoringRulesRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cases = defaults.cases;
    	      this.enabled = defaults.enabled;
    	      this.filters = defaults.filters;
    	      this.hasExtendedTitle = defaults.hasExtendedTitle;
    	      this.message = defaults.message;
    	      this.name = defaults.name;
    	      this.options = defaults.options;
    	      this.queries = defaults.queries;
    	      this.signalQueries = defaults.signalQueries;
    	      this.tags = defaults.tags;
    	      this.thirdPartyCases = defaults.thirdPartyCases;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder cases(@Nullable List<GetSecurityMonitoringRulesRuleCase> cases) {

            this.cases = cases;
            return this;
        }
        public Builder cases(GetSecurityMonitoringRulesRuleCase... cases) {
            return cases(List.of(cases));
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSecurityMonitoringRulesRuleFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetSecurityMonitoringRulesRuleFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder hasExtendedTitle(@Nullable Boolean hasExtendedTitle) {

            this.hasExtendedTitle = hasExtendedTitle;
            return this;
        }
        @CustomType.Setter
        public Builder message(String message) {
            if (message == null) {
              throw new MissingRequiredPropertyException("GetSecurityMonitoringRulesRule", "message");
            }
            this.message = message;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSecurityMonitoringRulesRule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder options(@Nullable GetSecurityMonitoringRulesRuleOptions options) {

            this.options = options;
            return this;
        }
        @CustomType.Setter
        public Builder queries(@Nullable List<GetSecurityMonitoringRulesRuleQuery> queries) {

            this.queries = queries;
            return this;
        }
        public Builder queries(GetSecurityMonitoringRulesRuleQuery... queries) {
            return queries(List.of(queries));
        }
        @CustomType.Setter
        public Builder signalQueries(@Nullable List<GetSecurityMonitoringRulesRuleSignalQuery> signalQueries) {

            this.signalQueries = signalQueries;
            return this;
        }
        public Builder signalQueries(GetSecurityMonitoringRulesRuleSignalQuery... signalQueries) {
            return signalQueries(List.of(signalQueries));
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<String> tags) {

            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder thirdPartyCases(@Nullable List<GetSecurityMonitoringRulesRuleThirdPartyCase> thirdPartyCases) {

            this.thirdPartyCases = thirdPartyCases;
            return this;
        }
        public Builder thirdPartyCases(GetSecurityMonitoringRulesRuleThirdPartyCase... thirdPartyCases) {
            return thirdPartyCases(List.of(thirdPartyCases));
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public GetSecurityMonitoringRulesRule build() {
            final var _resultValue = new GetSecurityMonitoringRulesRule();
            _resultValue.cases = cases;
            _resultValue.enabled = enabled;
            _resultValue.filters = filters;
            _resultValue.hasExtendedTitle = hasExtendedTitle;
            _resultValue.message = message;
            _resultValue.name = name;
            _resultValue.options = options;
            _resultValue.queries = queries;
            _resultValue.signalQueries = signalQueries;
            _resultValue.tags = tags;
            _resultValue.thirdPartyCases = thirdPartyCases;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
