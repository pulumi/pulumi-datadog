// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.OnCallEscalationPolicyStepTarget;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OnCallEscalationPolicyStep {
    /**
     * @return Specifies how this escalation step will assign targets. Can be `default` (page all targets at once) or `round-robin`. Valid values are `assignment`, `round-robin`. Defaults to `&#34;default&#34;`.
     * 
     */
    private @Nullable String assignment;
    /**
     * @return Defines how many seconds to wait before escalating to the next step. Value must be between 60 and 36000.
     * 
     */
    private Integer escalateAfterSeconds;
    /**
     * @return The ID of this step.
     * 
     */
    private @Nullable String id;
    /**
     * @return List of targets for the step.
     * 
     */
    private @Nullable List<OnCallEscalationPolicyStepTarget> targets;

    private OnCallEscalationPolicyStep() {}
    /**
     * @return Specifies how this escalation step will assign targets. Can be `default` (page all targets at once) or `round-robin`. Valid values are `assignment`, `round-robin`. Defaults to `&#34;default&#34;`.
     * 
     */
    public Optional<String> assignment() {
        return Optional.ofNullable(this.assignment);
    }
    /**
     * @return Defines how many seconds to wait before escalating to the next step. Value must be between 60 and 36000.
     * 
     */
    public Integer escalateAfterSeconds() {
        return this.escalateAfterSeconds;
    }
    /**
     * @return The ID of this step.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return List of targets for the step.
     * 
     */
    public List<OnCallEscalationPolicyStepTarget> targets() {
        return this.targets == null ? List.of() : this.targets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OnCallEscalationPolicyStep defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String assignment;
        private Integer escalateAfterSeconds;
        private @Nullable String id;
        private @Nullable List<OnCallEscalationPolicyStepTarget> targets;
        public Builder() {}
        public Builder(OnCallEscalationPolicyStep defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignment = defaults.assignment;
    	      this.escalateAfterSeconds = defaults.escalateAfterSeconds;
    	      this.id = defaults.id;
    	      this.targets = defaults.targets;
        }

        @CustomType.Setter
        public Builder assignment(@Nullable String assignment) {

            this.assignment = assignment;
            return this;
        }
        @CustomType.Setter
        public Builder escalateAfterSeconds(Integer escalateAfterSeconds) {
            if (escalateAfterSeconds == null) {
              throw new MissingRequiredPropertyException("OnCallEscalationPolicyStep", "escalateAfterSeconds");
            }
            this.escalateAfterSeconds = escalateAfterSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder targets(@Nullable List<OnCallEscalationPolicyStepTarget> targets) {

            this.targets = targets;
            return this;
        }
        public Builder targets(OnCallEscalationPolicyStepTarget... targets) {
            return targets(List.of(targets));
        }
        public OnCallEscalationPolicyStep build() {
            final var _resultValue = new OnCallEscalationPolicyStep();
            _resultValue.assignment = assignment;
            _resultValue.escalateAfterSeconds = escalateAfterSeconds;
            _resultValue.id = id;
            _resultValue.targets = targets;
            return _resultValue;
        }
    }
}
