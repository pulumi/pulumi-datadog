// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class SyntheticsTestMobileOptionsListMobileApplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticsTestMobileOptionsListMobileApplicationArgs Empty = new SyntheticsTestMobileOptionsListMobileApplicationArgs();

    @Import(name="applicationId", required=true)
    private Output<String> applicationId;

    public Output<String> applicationId() {
        return this.applicationId;
    }

    @Import(name="referenceId", required=true)
    private Output<String> referenceId;

    public Output<String> referenceId() {
        return this.referenceId;
    }

    /**
     * Valid values are `latest`, `version`.
     * 
     */
    @Import(name="referenceType", required=true)
    private Output<String> referenceType;

    /**
     * @return Valid values are `latest`, `version`.
     * 
     */
    public Output<String> referenceType() {
        return this.referenceType;
    }

    private SyntheticsTestMobileOptionsListMobileApplicationArgs() {}

    private SyntheticsTestMobileOptionsListMobileApplicationArgs(SyntheticsTestMobileOptionsListMobileApplicationArgs $) {
        this.applicationId = $.applicationId;
        this.referenceId = $.referenceId;
        this.referenceType = $.referenceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticsTestMobileOptionsListMobileApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticsTestMobileOptionsListMobileApplicationArgs $;

        public Builder() {
            $ = new SyntheticsTestMobileOptionsListMobileApplicationArgs();
        }

        public Builder(SyntheticsTestMobileOptionsListMobileApplicationArgs defaults) {
            $ = new SyntheticsTestMobileOptionsListMobileApplicationArgs(Objects.requireNonNull(defaults));
        }

        public Builder applicationId(Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        public Builder referenceId(Output<String> referenceId) {
            $.referenceId = referenceId;
            return this;
        }

        public Builder referenceId(String referenceId) {
            return referenceId(Output.of(referenceId));
        }

        /**
         * @param referenceType Valid values are `latest`, `version`.
         * 
         * @return builder
         * 
         */
        public Builder referenceType(Output<String> referenceType) {
            $.referenceType = referenceType;
            return this;
        }

        /**
         * @param referenceType Valid values are `latest`, `version`.
         * 
         * @return builder
         * 
         */
        public Builder referenceType(String referenceType) {
            return referenceType(Output.of(referenceType));
        }

        public SyntheticsTestMobileOptionsListMobileApplicationArgs build() {
            if ($.applicationId == null) {
                throw new MissingRequiredPropertyException("SyntheticsTestMobileOptionsListMobileApplicationArgs", "applicationId");
            }
            if ($.referenceId == null) {
                throw new MissingRequiredPropertyException("SyntheticsTestMobileOptionsListMobileApplicationArgs", "referenceId");
            }
            if ($.referenceType == null) {
                throw new MissingRequiredPropertyException("SyntheticsTestMobileOptionsListMobileApplicationArgs", "referenceType");
            }
            return $;
        }
    }

}
