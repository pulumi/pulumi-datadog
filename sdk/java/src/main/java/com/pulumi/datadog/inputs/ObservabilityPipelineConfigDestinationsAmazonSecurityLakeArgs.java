// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigDestinationsAmazonSecurityLakeAuthArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigDestinationsAmazonSecurityLakeTlsArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigDestinationsAmazonSecurityLakeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigDestinationsAmazonSecurityLakeArgs Empty = new ObservabilityPipelineConfigDestinationsAmazonSecurityLakeArgs();

    /**
     * AWS authentication credentials used for accessing AWS services. If omitted, the system&#39;s default credentials are used (for example, the IAM role and environment variables).
     * 
     */
    @Import(name="auth")
    private @Nullable Output<ObservabilityPipelineConfigDestinationsAmazonSecurityLakeAuthArgs> auth;

    /**
     * @return AWS authentication credentials used for accessing AWS services. If omitted, the system&#39;s default credentials are used (for example, the IAM role and environment variables).
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigDestinationsAmazonSecurityLakeAuthArgs>> auth() {
        return Optional.ofNullable(this.auth);
    }

    /**
     * Name of the Amazon S3 bucket in Security Lake (3-63 characters).
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return Name of the Amazon S3 bucket in Security Lake (3-63 characters).
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * Custom source name for the logs in Security Lake.
     * 
     */
    @Import(name="customSourceName", required=true)
    private Output<String> customSourceName;

    /**
     * @return Custom source name for the logs in Security Lake.
     * 
     */
    public Output<String> customSourceName() {
        return this.customSourceName;
    }

    /**
     * Unique identifier for the destination component.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return Unique identifier for the destination component.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    @Import(name="inputs", required=true)
    private Output<List<String>> inputs;

    /**
     * @return A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    public Output<List<String>> inputs() {
        return this.inputs;
    }

    /**
     * AWS region of the Security Lake bucket.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return AWS region of the Security Lake bucket.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    @Import(name="tls")
    private @Nullable Output<ObservabilityPipelineConfigDestinationsAmazonSecurityLakeTlsArgs> tls;

    /**
     * @return Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigDestinationsAmazonSecurityLakeTlsArgs>> tls() {
        return Optional.ofNullable(this.tls);
    }

    private ObservabilityPipelineConfigDestinationsAmazonSecurityLakeArgs() {}

    private ObservabilityPipelineConfigDestinationsAmazonSecurityLakeArgs(ObservabilityPipelineConfigDestinationsAmazonSecurityLakeArgs $) {
        this.auth = $.auth;
        this.bucket = $.bucket;
        this.customSourceName = $.customSourceName;
        this.id = $.id;
        this.inputs = $.inputs;
        this.region = $.region;
        this.tls = $.tls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigDestinationsAmazonSecurityLakeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigDestinationsAmazonSecurityLakeArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigDestinationsAmazonSecurityLakeArgs();
        }

        public Builder(ObservabilityPipelineConfigDestinationsAmazonSecurityLakeArgs defaults) {
            $ = new ObservabilityPipelineConfigDestinationsAmazonSecurityLakeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auth AWS authentication credentials used for accessing AWS services. If omitted, the system&#39;s default credentials are used (for example, the IAM role and environment variables).
         * 
         * @return builder
         * 
         */
        public Builder auth(@Nullable Output<ObservabilityPipelineConfigDestinationsAmazonSecurityLakeAuthArgs> auth) {
            $.auth = auth;
            return this;
        }

        /**
         * @param auth AWS authentication credentials used for accessing AWS services. If omitted, the system&#39;s default credentials are used (for example, the IAM role and environment variables).
         * 
         * @return builder
         * 
         */
        public Builder auth(ObservabilityPipelineConfigDestinationsAmazonSecurityLakeAuthArgs auth) {
            return auth(Output.of(auth));
        }

        /**
         * @param bucket Name of the Amazon S3 bucket in Security Lake (3-63 characters).
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Name of the Amazon S3 bucket in Security Lake (3-63 characters).
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param customSourceName Custom source name for the logs in Security Lake.
         * 
         * @return builder
         * 
         */
        public Builder customSourceName(Output<String> customSourceName) {
            $.customSourceName = customSourceName;
            return this;
        }

        /**
         * @param customSourceName Custom source name for the logs in Security Lake.
         * 
         * @return builder
         * 
         */
        public Builder customSourceName(String customSourceName) {
            return customSourceName(Output.of(customSourceName));
        }

        /**
         * @param id Unique identifier for the destination component.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique identifier for the destination component.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(Output<List<String>> inputs) {
            $.inputs = inputs;
            return this;
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(List<String> inputs) {
            return inputs(Output.of(inputs));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }

        /**
         * @param region AWS region of the Security Lake bucket.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region AWS region of the Security Lake bucket.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(@Nullable Output<ObservabilityPipelineConfigDestinationsAmazonSecurityLakeTlsArgs> tls) {
            $.tls = tls;
            return this;
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(ObservabilityPipelineConfigDestinationsAmazonSecurityLakeTlsArgs tls) {
            return tls(Output.of(tls));
        }

        public ObservabilityPipelineConfigDestinationsAmazonSecurityLakeArgs build() {
            if ($.bucket == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsAmazonSecurityLakeArgs", "bucket");
            }
            if ($.customSourceName == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsAmazonSecurityLakeArgs", "customSourceName");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsAmazonSecurityLakeArgs", "id");
            }
            if ($.inputs == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsAmazonSecurityLakeArgs", "inputs");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsAmazonSecurityLakeArgs", "region");
            }
            return $;
        }
    }

}
