// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMetricMetadataResult {
    /**
     * @return The metric description.
     * 
     */
    private String description;
    /**
     * @return The ID of this resource.
     * 
     */
    private String id;
    /**
     * @return The metric integration.
     * 
     */
    private String integration;
    /**
     * @return The metric for which to fetch metadata.
     * 
     */
    private String metricName;
    /**
     * @return The per unit of the metric.
     * 
     */
    private String perUnit;
    /**
     * @return The metric short name.
     * 
     */
    private String shortName;
    /**
     * @return The metric statsd interval.
     * 
     */
    private Integer statsdInterval;
    /**
     * @return The metric type.
     * 
     */
    private String type;
    /**
     * @return The metric unit.
     * 
     */
    private String unit;

    private GetMetricMetadataResult() {}
    /**
     * @return The metric description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The metric integration.
     * 
     */
    public String integration() {
        return this.integration;
    }
    /**
     * @return The metric for which to fetch metadata.
     * 
     */
    public String metricName() {
        return this.metricName;
    }
    /**
     * @return The per unit of the metric.
     * 
     */
    public String perUnit() {
        return this.perUnit;
    }
    /**
     * @return The metric short name.
     * 
     */
    public String shortName() {
        return this.shortName;
    }
    /**
     * @return The metric statsd interval.
     * 
     */
    public Integer statsdInterval() {
        return this.statsdInterval;
    }
    /**
     * @return The metric type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The metric unit.
     * 
     */
    public String unit() {
        return this.unit;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMetricMetadataResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String id;
        private String integration;
        private String metricName;
        private String perUnit;
        private String shortName;
        private Integer statsdInterval;
        private String type;
        private String unit;
        public Builder() {}
        public Builder(GetMetricMetadataResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.integration = defaults.integration;
    	      this.metricName = defaults.metricName;
    	      this.perUnit = defaults.perUnit;
    	      this.shortName = defaults.shortName;
    	      this.statsdInterval = defaults.statsdInterval;
    	      this.type = defaults.type;
    	      this.unit = defaults.unit;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetMetricMetadataResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMetricMetadataResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder integration(String integration) {
            if (integration == null) {
              throw new MissingRequiredPropertyException("GetMetricMetadataResult", "integration");
            }
            this.integration = integration;
            return this;
        }
        @CustomType.Setter
        public Builder metricName(String metricName) {
            if (metricName == null) {
              throw new MissingRequiredPropertyException("GetMetricMetadataResult", "metricName");
            }
            this.metricName = metricName;
            return this;
        }
        @CustomType.Setter
        public Builder perUnit(String perUnit) {
            if (perUnit == null) {
              throw new MissingRequiredPropertyException("GetMetricMetadataResult", "perUnit");
            }
            this.perUnit = perUnit;
            return this;
        }
        @CustomType.Setter
        public Builder shortName(String shortName) {
            if (shortName == null) {
              throw new MissingRequiredPropertyException("GetMetricMetadataResult", "shortName");
            }
            this.shortName = shortName;
            return this;
        }
        @CustomType.Setter
        public Builder statsdInterval(Integer statsdInterval) {
            if (statsdInterval == null) {
              throw new MissingRequiredPropertyException("GetMetricMetadataResult", "statsdInterval");
            }
            this.statsdInterval = statsdInterval;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetMetricMetadataResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder unit(String unit) {
            if (unit == null) {
              throw new MissingRequiredPropertyException("GetMetricMetadataResult", "unit");
            }
            this.unit = unit;
            return this;
        }
        public GetMetricMetadataResult build() {
            final var _resultValue = new GetMetricMetadataResult();
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.integration = integration;
            _resultValue.metricName = metricName;
            _resultValue.perUnit = perUnit;
            _resultValue.shortName = shortName;
            _resultValue.statsdInterval = statsdInterval;
            _resultValue.type = type;
            _resultValue.unit = unit;
            return _resultValue;
        }
    }
}
