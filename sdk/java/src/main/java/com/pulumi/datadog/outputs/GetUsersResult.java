// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.GetUsersUser;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUsersResult {
    /**
     * @return Filter all users by the given string.
     * 
     */
    private @Nullable String filter;
    /**
     * @return Filter on status attribute. Comma-separated list with possible values of Active, Pending, and Disabled.
     * 
     */
    private @Nullable String filterStatus;
    /**
     * @return The ID of this resource.
     * 
     */
    private String id;
    /**
     * @return List of users
     * 
     */
    private List<GetUsersUser> users;

    private GetUsersResult() {}
    /**
     * @return Filter all users by the given string.
     * 
     */
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return Filter on status attribute. Comma-separated list with possible values of Active, Pending, and Disabled.
     * 
     */
    public Optional<String> filterStatus() {
        return Optional.ofNullable(this.filterStatus);
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of users
     * 
     */
    public List<GetUsersUser> users() {
        return this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String filter;
        private @Nullable String filterStatus;
        private String id;
        private List<GetUsersUser> users;
        public Builder() {}
        public Builder(GetUsersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filter = defaults.filter;
    	      this.filterStatus = defaults.filterStatus;
    	      this.id = defaults.id;
    	      this.users = defaults.users;
        }

        @CustomType.Setter
        public Builder filter(@Nullable String filter) {

            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder filterStatus(@Nullable String filterStatus) {

            this.filterStatus = filterStatus;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUsersResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder users(List<GetUsersUser> users) {
            if (users == null) {
              throw new MissingRequiredPropertyException("GetUsersResult", "users");
            }
            this.users = users;
            return this;
        }
        public Builder users(GetUsersUser... users) {
            return users(List.of(users));
        }
        public GetUsersResult build() {
            final var _resultValue = new GetUsersResult();
            _resultValue.filter = filter;
            _resultValue.filterStatus = filterStatus;
            _resultValue.id = id;
            _resultValue.users = users;
            return _resultValue;
        }
    }
}
