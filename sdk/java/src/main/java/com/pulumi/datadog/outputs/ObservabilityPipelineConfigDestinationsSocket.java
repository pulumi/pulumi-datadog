// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigDestinationsSocketFraming;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigDestinationsSocketTls;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ObservabilityPipelineConfigDestinationsSocket {
    /**
     * @return Encoding format for log events. Valid values are `json`, `raw_message`.
     * 
     */
    private String encoding;
    /**
     * @return Defines the framing method for outgoing messages.
     * 
     */
    private @Nullable ObservabilityPipelineConfigDestinationsSocketFraming framing;
    /**
     * @return The unique identifier for this destination.
     * 
     */
    private String id;
    /**
     * @return A list of component IDs whose output is used as the `input` for this destination.
     * 
     */
    private List<String> inputs;
    /**
     * @return The protocol used to send logs. Valid values are `tcp`, `udp`.
     * 
     */
    private String mode;
    /**
     * @return Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    private @Nullable ObservabilityPipelineConfigDestinationsSocketTls tls;

    private ObservabilityPipelineConfigDestinationsSocket() {}
    /**
     * @return Encoding format for log events. Valid values are `json`, `raw_message`.
     * 
     */
    public String encoding() {
        return this.encoding;
    }
    /**
     * @return Defines the framing method for outgoing messages.
     * 
     */
    public Optional<ObservabilityPipelineConfigDestinationsSocketFraming> framing() {
        return Optional.ofNullable(this.framing);
    }
    /**
     * @return The unique identifier for this destination.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of component IDs whose output is used as the `input` for this destination.
     * 
     */
    public List<String> inputs() {
        return this.inputs;
    }
    /**
     * @return The protocol used to send logs. Valid values are `tcp`, `udp`.
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    public Optional<ObservabilityPipelineConfigDestinationsSocketTls> tls() {
        return Optional.ofNullable(this.tls);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObservabilityPipelineConfigDestinationsSocket defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String encoding;
        private @Nullable ObservabilityPipelineConfigDestinationsSocketFraming framing;
        private String id;
        private List<String> inputs;
        private String mode;
        private @Nullable ObservabilityPipelineConfigDestinationsSocketTls tls;
        public Builder() {}
        public Builder(ObservabilityPipelineConfigDestinationsSocket defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encoding = defaults.encoding;
    	      this.framing = defaults.framing;
    	      this.id = defaults.id;
    	      this.inputs = defaults.inputs;
    	      this.mode = defaults.mode;
    	      this.tls = defaults.tls;
        }

        @CustomType.Setter
        public Builder encoding(String encoding) {
            if (encoding == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsSocket", "encoding");
            }
            this.encoding = encoding;
            return this;
        }
        @CustomType.Setter
        public Builder framing(@Nullable ObservabilityPipelineConfigDestinationsSocketFraming framing) {

            this.framing = framing;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsSocket", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inputs(List<String> inputs) {
            if (inputs == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsSocket", "inputs");
            }
            this.inputs = inputs;
            return this;
        }
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsSocket", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder tls(@Nullable ObservabilityPipelineConfigDestinationsSocketTls tls) {

            this.tls = tls;
            return this;
        }
        public ObservabilityPipelineConfigDestinationsSocket build() {
            final var _resultValue = new ObservabilityPipelineConfigDestinationsSocket();
            _resultValue.encoding = encoding;
            _resultValue.framing = framing;
            _resultValue.id = id;
            _resultValue.inputs = inputs;
            _resultValue.mode = mode;
            _resultValue.tls = tls;
            return _resultValue;
        }
    }
}
