// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkflowAutomationArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkflowAutomationArgs Empty = new WorkflowAutomationArgs();

    /**
     * Description of the workflow.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Description of the workflow.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Name of the workflow.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the workflow.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Set the workflow to published or unpublished. Workflows in an unpublished state are only executable through manual runs. Automatic triggers such as Schedule do not execute the workflow until it is published.
     * 
     */
    @Import(name="published", required=true)
    private Output<Boolean> published;

    /**
     * @return Set the workflow to published or unpublished. Workflows in an unpublished state are only executable through manual runs. Automatic triggers such as Schedule do not execute the workflow until it is published.
     * 
     */
    public Output<Boolean> published() {
        return this.published;
    }

    /**
     * The spec defines what the workflow does.
     * 
     */
    @Import(name="specJson", required=true)
    private Output<String> specJson;

    /**
     * @return The spec defines what the workflow does.
     * 
     */
    public Output<String> specJson() {
        return this.specJson;
    }

    /**
     * Tags of the workflow.
     * 
     */
    @Import(name="tags", required=true)
    private Output<List<String>> tags;

    /**
     * @return Tags of the workflow.
     * 
     */
    public Output<List<String>> tags() {
        return this.tags;
    }

    /**
     * If a webhook trigger is defined on this workflow, a webhookSecret is required and should be provided here.
     * 
     */
    @Import(name="webhookSecret")
    private @Nullable Output<String> webhookSecret;

    /**
     * @return If a webhook trigger is defined on this workflow, a webhookSecret is required and should be provided here.
     * 
     */
    public Optional<Output<String>> webhookSecret() {
        return Optional.ofNullable(this.webhookSecret);
    }

    private WorkflowAutomationArgs() {}

    private WorkflowAutomationArgs(WorkflowAutomationArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.published = $.published;
        this.specJson = $.specJson;
        this.tags = $.tags;
        this.webhookSecret = $.webhookSecret;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkflowAutomationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkflowAutomationArgs $;

        public Builder() {
            $ = new WorkflowAutomationArgs();
        }

        public Builder(WorkflowAutomationArgs defaults) {
            $ = new WorkflowAutomationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the workflow.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the workflow.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the workflow.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the workflow.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param published Set the workflow to published or unpublished. Workflows in an unpublished state are only executable through manual runs. Automatic triggers such as Schedule do not execute the workflow until it is published.
         * 
         * @return builder
         * 
         */
        public Builder published(Output<Boolean> published) {
            $.published = published;
            return this;
        }

        /**
         * @param published Set the workflow to published or unpublished. Workflows in an unpublished state are only executable through manual runs. Automatic triggers such as Schedule do not execute the workflow until it is published.
         * 
         * @return builder
         * 
         */
        public Builder published(Boolean published) {
            return published(Output.of(published));
        }

        /**
         * @param specJson The spec defines what the workflow does.
         * 
         * @return builder
         * 
         */
        public Builder specJson(Output<String> specJson) {
            $.specJson = specJson;
            return this;
        }

        /**
         * @param specJson The spec defines what the workflow does.
         * 
         * @return builder
         * 
         */
        public Builder specJson(String specJson) {
            return specJson(Output.of(specJson));
        }

        /**
         * @param tags Tags of the workflow.
         * 
         * @return builder
         * 
         */
        public Builder tags(Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags of the workflow.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags of the workflow.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param webhookSecret If a webhook trigger is defined on this workflow, a webhookSecret is required and should be provided here.
         * 
         * @return builder
         * 
         */
        public Builder webhookSecret(@Nullable Output<String> webhookSecret) {
            $.webhookSecret = webhookSecret;
            return this;
        }

        /**
         * @param webhookSecret If a webhook trigger is defined on this workflow, a webhookSecret is required and should be provided here.
         * 
         * @return builder
         * 
         */
        public Builder webhookSecret(String webhookSecret) {
            return webhookSecret(Output.of(webhookSecret));
        }

        public WorkflowAutomationArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("WorkflowAutomationArgs", "description");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("WorkflowAutomationArgs", "name");
            }
            if ($.published == null) {
                throw new MissingRequiredPropertyException("WorkflowAutomationArgs", "published");
            }
            if ($.specJson == null) {
                throw new MissingRequiredPropertyException("WorkflowAutomationArgs", "specJson");
            }
            if ($.tags == null) {
                throw new MissingRequiredPropertyException("WorkflowAutomationArgs", "tags");
            }
            return $;
        }
    }

}
