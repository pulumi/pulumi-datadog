// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SpansMetricGroupByArgs extends com.pulumi.resources.ResourceArgs {

    public static final SpansMetricGroupByArgs Empty = new SpansMetricGroupByArgs();

    /**
     * The path to the value the span-based metric will be aggregated over.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The path to the value the span-based metric will be aggregated over.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.
     * 
     */
    @Import(name="tagName")
    private @Nullable Output<String> tagName;

    /**
     * @return Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.
     * 
     */
    public Optional<Output<String>> tagName() {
        return Optional.ofNullable(this.tagName);
    }

    private SpansMetricGroupByArgs() {}

    private SpansMetricGroupByArgs(SpansMetricGroupByArgs $) {
        this.path = $.path;
        this.tagName = $.tagName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpansMetricGroupByArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpansMetricGroupByArgs $;

        public Builder() {
            $ = new SpansMetricGroupByArgs();
        }

        public Builder(SpansMetricGroupByArgs defaults) {
            $ = new SpansMetricGroupByArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param path The path to the value the span-based metric will be aggregated over.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path to the value the span-based metric will be aggregated over.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param tagName Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.
         * 
         * @return builder
         * 
         */
        public Builder tagName(@Nullable Output<String> tagName) {
            $.tagName = tagName;
            return this;
        }

        /**
         * @param tagName Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.
         * 
         * @return builder
         * 
         */
        public Builder tagName(String tagName) {
            return tagName(Output.of(tagName));
        }

        public SpansMetricGroupByArgs build() {
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            return $;
        }
    }

}
