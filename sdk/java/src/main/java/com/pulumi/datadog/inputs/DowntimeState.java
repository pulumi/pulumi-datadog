// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.DowntimeRecurrenceArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DowntimeState extends com.pulumi.resources.ResourceArgs {

    public static final DowntimeState Empty = new DowntimeState();

    /**
     * When true indicates this downtime is being actively applied
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return When true indicates this downtime is being actively applied
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * The id corresponding to the downtime object definition of the active child for the original parent recurring downtime. This field will only exist on recurring downtimes.
     * 
     */
    @Import(name="activeChildId")
    private @Nullable Output<Integer> activeChildId;

    /**
     * @return The id corresponding to the downtime object definition of the active child for the original parent recurring downtime. This field will only exist on recurring downtimes.
     * 
     */
    public Optional<Output<Integer>> activeChildId() {
        return Optional.ofNullable(this.activeChildId);
    }

    /**
     * When true indicates this downtime is not being applied
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return When true indicates this downtime is not being applied
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
     * 
     */
    @Import(name="end")
    private @Nullable Output<Integer> end;

    /**
     * @return Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
     * 
     */
    public Optional<Output<Integer>> end() {
        return Optional.ofNullable(this.end);
    }

    /**
     * String representing date and time to end the downtime in RFC3339 format.
     * 
     */
    @Import(name="endDate")
    private @Nullable Output<String> endDate;

    /**
     * @return String representing date and time to end the downtime in RFC3339 format.
     * 
     */
    public Optional<Output<String>> endDate() {
        return Optional.ofNullable(this.endDate);
    }

    /**
     * An optional message to provide when creating the downtime, can include notification handles
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return An optional message to provide when creating the downtime, can include notification handles
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * When specified, this downtime will only apply to this monitor
     * 
     */
    @Import(name="monitorId")
    private @Nullable Output<Integer> monitorId;

    /**
     * @return When specified, this downtime will only apply to this monitor
     * 
     */
    public Optional<Output<Integer>> monitorId() {
        return Optional.ofNullable(this.monitorId);
    }

    /**
     * A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
     * 
     */
    @Import(name="monitorTags")
    private @Nullable Output<List<String>> monitorTags;

    /**
     * @return A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
     * 
     */
    public Optional<Output<List<String>>> monitorTags() {
        return Optional.ofNullable(this.monitorTags);
    }

    /**
     * When true the first recovery notification during the downtime will be muted Defaults to `false`.
     * 
     */
    @Import(name="muteFirstRecoveryNotification")
    private @Nullable Output<Boolean> muteFirstRecoveryNotification;

    /**
     * @return When true the first recovery notification during the downtime will be muted Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> muteFirstRecoveryNotification() {
        return Optional.ofNullable(this.muteFirstRecoveryNotification);
    }

    /**
     * Optional recurring schedule for this downtime
     * 
     */
    @Import(name="recurrence")
    private @Nullable Output<DowntimeRecurrenceArgs> recurrence;

    /**
     * @return Optional recurring schedule for this downtime
     * 
     */
    public Optional<Output<DowntimeRecurrenceArgs>> recurrence() {
        return Optional.ofNullable(this.recurrence);
    }

    /**
     * specify the group scope to which this downtime applies. For everything use &#39;*&#39;
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return specify the group scope to which this downtime applies. For everything use &#39;*&#39;
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * Specify when this downtime should start. Accepts a Unix timestamp in UTC.
     * 
     */
    @Import(name="start")
    private @Nullable Output<Integer> start;

    /**
     * @return Specify when this downtime should start. Accepts a Unix timestamp in UTC.
     * 
     */
    public Optional<Output<Integer>> start() {
        return Optional.ofNullable(this.start);
    }

    /**
     * String representing date and time to start the downtime in RFC3339 format.
     * 
     */
    @Import(name="startDate")
    private @Nullable Output<String> startDate;

    /**
     * @return String representing date and time to start the downtime in RFC3339 format.
     * 
     */
    public Optional<Output<String>> startDate() {
        return Optional.ofNullable(this.startDate);
    }

    /**
     * The timezone for the downtime. Follows IANA timezone database identifiers. Defaults to `&#34;UTC&#34;`.
     * 
     */
    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    /**
     * @return The timezone for the downtime. Follows IANA timezone database identifiers. Defaults to `&#34;UTC&#34;`.
     * 
     */
    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    private DowntimeState() {}

    private DowntimeState(DowntimeState $) {
        this.active = $.active;
        this.activeChildId = $.activeChildId;
        this.disabled = $.disabled;
        this.end = $.end;
        this.endDate = $.endDate;
        this.message = $.message;
        this.monitorId = $.monitorId;
        this.monitorTags = $.monitorTags;
        this.muteFirstRecoveryNotification = $.muteFirstRecoveryNotification;
        this.recurrence = $.recurrence;
        this.scopes = $.scopes;
        this.start = $.start;
        this.startDate = $.startDate;
        this.timezone = $.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DowntimeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DowntimeState $;

        public Builder() {
            $ = new DowntimeState();
        }

        public Builder(DowntimeState defaults) {
            $ = new DowntimeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param active When true indicates this downtime is being actively applied
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active When true indicates this downtime is being actively applied
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param activeChildId The id corresponding to the downtime object definition of the active child for the original parent recurring downtime. This field will only exist on recurring downtimes.
         * 
         * @return builder
         * 
         */
        public Builder activeChildId(@Nullable Output<Integer> activeChildId) {
            $.activeChildId = activeChildId;
            return this;
        }

        /**
         * @param activeChildId The id corresponding to the downtime object definition of the active child for the original parent recurring downtime. This field will only exist on recurring downtimes.
         * 
         * @return builder
         * 
         */
        public Builder activeChildId(Integer activeChildId) {
            return activeChildId(Output.of(activeChildId));
        }

        /**
         * @param disabled When true indicates this downtime is not being applied
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled When true indicates this downtime is not being applied
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param end Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
         * 
         * @return builder
         * 
         */
        public Builder end(@Nullable Output<Integer> end) {
            $.end = end;
            return this;
        }

        /**
         * @param end Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
         * 
         * @return builder
         * 
         */
        public Builder end(Integer end) {
            return end(Output.of(end));
        }

        /**
         * @param endDate String representing date and time to end the downtime in RFC3339 format.
         * 
         * @return builder
         * 
         */
        public Builder endDate(@Nullable Output<String> endDate) {
            $.endDate = endDate;
            return this;
        }

        /**
         * @param endDate String representing date and time to end the downtime in RFC3339 format.
         * 
         * @return builder
         * 
         */
        public Builder endDate(String endDate) {
            return endDate(Output.of(endDate));
        }

        /**
         * @param message An optional message to provide when creating the downtime, can include notification handles
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message An optional message to provide when creating the downtime, can include notification handles
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param monitorId When specified, this downtime will only apply to this monitor
         * 
         * @return builder
         * 
         */
        public Builder monitorId(@Nullable Output<Integer> monitorId) {
            $.monitorId = monitorId;
            return this;
        }

        /**
         * @param monitorId When specified, this downtime will only apply to this monitor
         * 
         * @return builder
         * 
         */
        public Builder monitorId(Integer monitorId) {
            return monitorId(Output.of(monitorId));
        }

        /**
         * @param monitorTags A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
         * 
         * @return builder
         * 
         */
        public Builder monitorTags(@Nullable Output<List<String>> monitorTags) {
            $.monitorTags = monitorTags;
            return this;
        }

        /**
         * @param monitorTags A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
         * 
         * @return builder
         * 
         */
        public Builder monitorTags(List<String> monitorTags) {
            return monitorTags(Output.of(monitorTags));
        }

        /**
         * @param monitorTags A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
         * 
         * @return builder
         * 
         */
        public Builder monitorTags(String... monitorTags) {
            return monitorTags(List.of(monitorTags));
        }

        /**
         * @param muteFirstRecoveryNotification When true the first recovery notification during the downtime will be muted Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder muteFirstRecoveryNotification(@Nullable Output<Boolean> muteFirstRecoveryNotification) {
            $.muteFirstRecoveryNotification = muteFirstRecoveryNotification;
            return this;
        }

        /**
         * @param muteFirstRecoveryNotification When true the first recovery notification during the downtime will be muted Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder muteFirstRecoveryNotification(Boolean muteFirstRecoveryNotification) {
            return muteFirstRecoveryNotification(Output.of(muteFirstRecoveryNotification));
        }

        /**
         * @param recurrence Optional recurring schedule for this downtime
         * 
         * @return builder
         * 
         */
        public Builder recurrence(@Nullable Output<DowntimeRecurrenceArgs> recurrence) {
            $.recurrence = recurrence;
            return this;
        }

        /**
         * @param recurrence Optional recurring schedule for this downtime
         * 
         * @return builder
         * 
         */
        public Builder recurrence(DowntimeRecurrenceArgs recurrence) {
            return recurrence(Output.of(recurrence));
        }

        /**
         * @param scopes specify the group scope to which this downtime applies. For everything use &#39;*&#39;
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes specify the group scope to which this downtime applies. For everything use &#39;*&#39;
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes specify the group scope to which this downtime applies. For everything use &#39;*&#39;
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param start Specify when this downtime should start. Accepts a Unix timestamp in UTC.
         * 
         * @return builder
         * 
         */
        public Builder start(@Nullable Output<Integer> start) {
            $.start = start;
            return this;
        }

        /**
         * @param start Specify when this downtime should start. Accepts a Unix timestamp in UTC.
         * 
         * @return builder
         * 
         */
        public Builder start(Integer start) {
            return start(Output.of(start));
        }

        /**
         * @param startDate String representing date and time to start the downtime in RFC3339 format.
         * 
         * @return builder
         * 
         */
        public Builder startDate(@Nullable Output<String> startDate) {
            $.startDate = startDate;
            return this;
        }

        /**
         * @param startDate String representing date and time to start the downtime in RFC3339 format.
         * 
         * @return builder
         * 
         */
        public Builder startDate(String startDate) {
            return startDate(Output.of(startDate));
        }

        /**
         * @param timezone The timezone for the downtime. Follows IANA timezone database identifiers. Defaults to `&#34;UTC&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone The timezone for the downtime. Follows IANA timezone database identifiers. Defaults to `&#34;UTC&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        public DowntimeState build() {
            return $;
        }
    }

}
