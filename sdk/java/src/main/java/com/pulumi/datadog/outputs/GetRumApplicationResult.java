// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRumApplicationResult {
    /**
     * @return The client token
     * 
     */
    private String clientToken;
    /**
     * @return ID of the RUM application. Cannot be used with name and type filters.
     * 
     */
    private String id;
    /**
     * @return The name of the RUM application
     * 
     */
    private String name;
    /**
     * @return The name used to search for a RUM application
     * 
     */
    private @Nullable String nameFilter;
    /**
     * @return The RUM application type. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`
     * 
     */
    private String type;
    /**
     * @return The type used to search for a RUM application
     * 
     */
    private @Nullable String typeFilter;

    private GetRumApplicationResult() {}
    /**
     * @return The client token
     * 
     */
    public String clientToken() {
        return this.clientToken;
    }
    /**
     * @return ID of the RUM application. Cannot be used with name and type filters.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the RUM application
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The name used to search for a RUM application
     * 
     */
    public Optional<String> nameFilter() {
        return Optional.ofNullable(this.nameFilter);
    }
    /**
     * @return The RUM application type. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The type used to search for a RUM application
     * 
     */
    public Optional<String> typeFilter() {
        return Optional.ofNullable(this.typeFilter);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRumApplicationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clientToken;
        private String id;
        private String name;
        private @Nullable String nameFilter;
        private String type;
        private @Nullable String typeFilter;
        public Builder() {}
        public Builder(GetRumApplicationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientToken = defaults.clientToken;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.nameFilter = defaults.nameFilter;
    	      this.type = defaults.type;
    	      this.typeFilter = defaults.typeFilter;
        }

        @CustomType.Setter
        public Builder clientToken(String clientToken) {
            this.clientToken = Objects.requireNonNull(clientToken);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nameFilter(@Nullable String nameFilter) {
            this.nameFilter = nameFilter;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder typeFilter(@Nullable String typeFilter) {
            this.typeFilter = typeFilter;
            return this;
        }
        public GetRumApplicationResult build() {
            final var _resultValue = new GetRumApplicationResult();
            _resultValue.clientToken = clientToken;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.nameFilter = nameFilter;
            _resultValue.type = type;
            _resultValue.typeFilter = typeFilter;
            return _resultValue;
        }
    }
}
