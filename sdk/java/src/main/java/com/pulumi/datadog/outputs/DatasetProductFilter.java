// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class DatasetProductFilter {
    /**
     * @return A list of tag-based filters used to restrict access to the product type. Each filter is formatted as `{@literal @}tag.key:value`.
     * 
     */
    private List<String> filters;
    /**
     * @return The product type of the dataset. Supported types: `apm`, `rum`, `synthetics`, `metrics`, `logs`, `sdRepoinfo`, `errorTracking`, `cloudCost`, and `mlObs`.
     * 
     */
    private String product;

    private DatasetProductFilter() {}
    /**
     * @return A list of tag-based filters used to restrict access to the product type. Each filter is formatted as `{@literal @}tag.key:value`.
     * 
     */
    public List<String> filters() {
        return this.filters;
    }
    /**
     * @return The product type of the dataset. Supported types: `apm`, `rum`, `synthetics`, `metrics`, `logs`, `sdRepoinfo`, `errorTracking`, `cloudCost`, and `mlObs`.
     * 
     */
    public String product() {
        return this.product;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetProductFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> filters;
        private String product;
        public Builder() {}
        public Builder(DatasetProductFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.product = defaults.product;
        }

        @CustomType.Setter
        public Builder filters(List<String> filters) {
            if (filters == null) {
              throw new MissingRequiredPropertyException("DatasetProductFilter", "filters");
            }
            this.filters = filters;
            return this;
        }
        public Builder filters(String... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder product(String product) {
            if (product == null) {
              throw new MissingRequiredPropertyException("DatasetProductFilter", "product");
            }
            this.product = product;
            return this;
        }
        public DatasetProductFilter build() {
            final var _resultValue = new DatasetProductFilter();
            _resultValue.filters = filters;
            _resultValue.product = product;
            return _resultValue;
        }
    }
}
