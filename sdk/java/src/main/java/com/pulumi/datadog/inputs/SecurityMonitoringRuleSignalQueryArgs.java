// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityMonitoringRuleSignalQueryArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityMonitoringRuleSignalQueryArgs Empty = new SecurityMonitoringRuleSignalQueryArgs();

    /**
     * The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are `count`, `cardinality`, `sum`, `max`, `new_value`, `geo_data`, `event_count`, `none`.
     * 
     */
    @Import(name="aggregation")
    private @Nullable Output<String> aggregation;

    /**
     * @return The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are `count`, `cardinality`, `sum`, `max`, `new_value`, `geo_data`, `event_count`, `none`.
     * 
     */
    public Optional<Output<String>> aggregation() {
        return Optional.ofNullable(this.aggregation);
    }

    /**
     * Fields to correlate by.
     * 
     */
    @Import(name="correlatedByFields")
    private @Nullable Output<List<String>> correlatedByFields;

    /**
     * @return Fields to correlate by.
     * 
     */
    public Optional<Output<List<String>>> correlatedByFields() {
        return Optional.ofNullable(this.correlatedByFields);
    }

    /**
     * Index of the rule query used to retrieve the correlated field. An empty string applies correlation on the non-projected per query attributes of the rule.
     * 
     */
    @Import(name="correlatedQueryIndex")
    private @Nullable Output<String> correlatedQueryIndex;

    /**
     * @return Index of the rule query used to retrieve the correlated field. An empty string applies correlation on the non-projected per query attributes of the rule.
     * 
     */
    public Optional<Output<String>> correlatedQueryIndex() {
        return Optional.ofNullable(this.correlatedQueryIndex);
    }

    /**
     * Default Rule ID of the signal to correlate. This value is READ-ONLY.
     * 
     */
    @Import(name="defaultRuleId")
    private @Nullable Output<String> defaultRuleId;

    /**
     * @return Default Rule ID of the signal to correlate. This value is READ-ONLY.
     * 
     */
    public Optional<Output<String>> defaultRuleId() {
        return Optional.ofNullable(this.defaultRuleId);
    }

    /**
     * Name of the query. Not compatible with `new_value` aggregations.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the query. Not compatible with `new_value` aggregations.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Rule ID of the signal to correlate.
     * 
     */
    @Import(name="ruleId", required=true)
    private Output<String> ruleId;

    /**
     * @return Rule ID of the signal to correlate.
     * 
     */
    public Output<String> ruleId() {
        return this.ruleId;
    }

    private SecurityMonitoringRuleSignalQueryArgs() {}

    private SecurityMonitoringRuleSignalQueryArgs(SecurityMonitoringRuleSignalQueryArgs $) {
        this.aggregation = $.aggregation;
        this.correlatedByFields = $.correlatedByFields;
        this.correlatedQueryIndex = $.correlatedQueryIndex;
        this.defaultRuleId = $.defaultRuleId;
        this.name = $.name;
        this.ruleId = $.ruleId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityMonitoringRuleSignalQueryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityMonitoringRuleSignalQueryArgs $;

        public Builder() {
            $ = new SecurityMonitoringRuleSignalQueryArgs();
        }

        public Builder(SecurityMonitoringRuleSignalQueryArgs defaults) {
            $ = new SecurityMonitoringRuleSignalQueryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregation The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are `count`, `cardinality`, `sum`, `max`, `new_value`, `geo_data`, `event_count`, `none`.
         * 
         * @return builder
         * 
         */
        public Builder aggregation(@Nullable Output<String> aggregation) {
            $.aggregation = aggregation;
            return this;
        }

        /**
         * @param aggregation The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are `count`, `cardinality`, `sum`, `max`, `new_value`, `geo_data`, `event_count`, `none`.
         * 
         * @return builder
         * 
         */
        public Builder aggregation(String aggregation) {
            return aggregation(Output.of(aggregation));
        }

        /**
         * @param correlatedByFields Fields to correlate by.
         * 
         * @return builder
         * 
         */
        public Builder correlatedByFields(@Nullable Output<List<String>> correlatedByFields) {
            $.correlatedByFields = correlatedByFields;
            return this;
        }

        /**
         * @param correlatedByFields Fields to correlate by.
         * 
         * @return builder
         * 
         */
        public Builder correlatedByFields(List<String> correlatedByFields) {
            return correlatedByFields(Output.of(correlatedByFields));
        }

        /**
         * @param correlatedByFields Fields to correlate by.
         * 
         * @return builder
         * 
         */
        public Builder correlatedByFields(String... correlatedByFields) {
            return correlatedByFields(List.of(correlatedByFields));
        }

        /**
         * @param correlatedQueryIndex Index of the rule query used to retrieve the correlated field. An empty string applies correlation on the non-projected per query attributes of the rule.
         * 
         * @return builder
         * 
         */
        public Builder correlatedQueryIndex(@Nullable Output<String> correlatedQueryIndex) {
            $.correlatedQueryIndex = correlatedQueryIndex;
            return this;
        }

        /**
         * @param correlatedQueryIndex Index of the rule query used to retrieve the correlated field. An empty string applies correlation on the non-projected per query attributes of the rule.
         * 
         * @return builder
         * 
         */
        public Builder correlatedQueryIndex(String correlatedQueryIndex) {
            return correlatedQueryIndex(Output.of(correlatedQueryIndex));
        }

        /**
         * @param defaultRuleId Default Rule ID of the signal to correlate. This value is READ-ONLY.
         * 
         * @return builder
         * 
         */
        public Builder defaultRuleId(@Nullable Output<String> defaultRuleId) {
            $.defaultRuleId = defaultRuleId;
            return this;
        }

        /**
         * @param defaultRuleId Default Rule ID of the signal to correlate. This value is READ-ONLY.
         * 
         * @return builder
         * 
         */
        public Builder defaultRuleId(String defaultRuleId) {
            return defaultRuleId(Output.of(defaultRuleId));
        }

        /**
         * @param name Name of the query. Not compatible with `new_value` aggregations.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the query. Not compatible with `new_value` aggregations.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ruleId Rule ID of the signal to correlate.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(Output<String> ruleId) {
            $.ruleId = ruleId;
            return this;
        }

        /**
         * @param ruleId Rule ID of the signal to correlate.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(String ruleId) {
            return ruleId(Output.of(ruleId));
        }

        public SecurityMonitoringRuleSignalQueryArgs build() {
            if ($.ruleId == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringRuleSignalQueryArgs", "ruleId");
            }
            return $;
        }
    }

}
