// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetServiceAccountPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetServiceAccountPlainArgs Empty = new GetServiceAccountPlainArgs();

    /**
     * Filter all users and service accounts by name, email, or role.
     * 
     */
    @Import(name="filter")
    private @Nullable String filter;

    /**
     * @return Filter all users and service accounts by name, email, or role.
     * 
     */
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * Filter on status attribute. Comma separated list, with possible values `Active`, `Pending`, and `Disabled`.
     * 
     */
    @Import(name="filterStatus")
    private @Nullable String filterStatus;

    /**
     * @return Filter on status attribute. Comma separated list, with possible values `Active`, `Pending`, and `Disabled`.
     * 
     */
    public Optional<String> filterStatus() {
        return Optional.ofNullable(this.filterStatus);
    }

    /**
     * The service account&#39;s ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return The service account&#39;s ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    private GetServiceAccountPlainArgs() {}

    private GetServiceAccountPlainArgs(GetServiceAccountPlainArgs $) {
        this.filter = $.filter;
        this.filterStatus = $.filterStatus;
        this.id = $.id;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServiceAccountPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServiceAccountPlainArgs $;

        public Builder() {
            $ = new GetServiceAccountPlainArgs();
        }

        public Builder(GetServiceAccountPlainArgs defaults) {
            $ = new GetServiceAccountPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filter Filter all users and service accounts by name, email, or role.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable String filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filterStatus Filter on status attribute. Comma separated list, with possible values `Active`, `Pending`, and `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder filterStatus(@Nullable String filterStatus) {
            $.filterStatus = filterStatus;
            return this;
        }

        /**
         * @param id The service account&#39;s ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public GetServiceAccountPlainArgs build() {
            return $;
        }
    }

}
