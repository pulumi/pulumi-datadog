// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigDestinationsGooglePubsubAuthArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigDestinationsGooglePubsubTlsArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigDestinationsGooglePubsubArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigDestinationsGooglePubsubArgs Empty = new ObservabilityPipelineConfigDestinationsGooglePubsubArgs();

    /**
     * GCP credentials used to authenticate with Google Cloud Pub/Sub.
     * 
     */
    @Import(name="auth")
    private @Nullable Output<ObservabilityPipelineConfigDestinationsGooglePubsubAuthArgs> auth;

    /**
     * @return GCP credentials used to authenticate with Google Cloud Pub/Sub.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigDestinationsGooglePubsubAuthArgs>> auth() {
        return Optional.ofNullable(this.auth);
    }

    /**
     * Encoding format for log events. Valid values: `json`, `raw_message`.
     * 
     */
    @Import(name="encoding")
    private @Nullable Output<String> encoding;

    /**
     * @return Encoding format for log events. Valid values: `json`, `raw_message`.
     * 
     */
    public Optional<Output<String>> encoding() {
        return Optional.ofNullable(this.encoding);
    }

    /**
     * The unique identifier for this component.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique identifier for this component.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    @Import(name="inputs", required=true)
    private Output<List<String>> inputs;

    /**
     * @return A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    public Output<List<String>> inputs() {
        return this.inputs;
    }

    /**
     * The GCP project ID that owns the Pub/Sub topic.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The GCP project ID that owns the Pub/Sub topic.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    @Import(name="tls")
    private @Nullable Output<ObservabilityPipelineConfigDestinationsGooglePubsubTlsArgs> tls;

    /**
     * @return Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigDestinationsGooglePubsubTlsArgs>> tls() {
        return Optional.ofNullable(this.tls);
    }

    /**
     * The Pub/Sub topic name to publish logs to.
     * 
     */
    @Import(name="topic", required=true)
    private Output<String> topic;

    /**
     * @return The Pub/Sub topic name to publish logs to.
     * 
     */
    public Output<String> topic() {
        return this.topic;
    }

    private ObservabilityPipelineConfigDestinationsGooglePubsubArgs() {}

    private ObservabilityPipelineConfigDestinationsGooglePubsubArgs(ObservabilityPipelineConfigDestinationsGooglePubsubArgs $) {
        this.auth = $.auth;
        this.encoding = $.encoding;
        this.id = $.id;
        this.inputs = $.inputs;
        this.project = $.project;
        this.tls = $.tls;
        this.topic = $.topic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigDestinationsGooglePubsubArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigDestinationsGooglePubsubArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigDestinationsGooglePubsubArgs();
        }

        public Builder(ObservabilityPipelineConfigDestinationsGooglePubsubArgs defaults) {
            $ = new ObservabilityPipelineConfigDestinationsGooglePubsubArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auth GCP credentials used to authenticate with Google Cloud Pub/Sub.
         * 
         * @return builder
         * 
         */
        public Builder auth(@Nullable Output<ObservabilityPipelineConfigDestinationsGooglePubsubAuthArgs> auth) {
            $.auth = auth;
            return this;
        }

        /**
         * @param auth GCP credentials used to authenticate with Google Cloud Pub/Sub.
         * 
         * @return builder
         * 
         */
        public Builder auth(ObservabilityPipelineConfigDestinationsGooglePubsubAuthArgs auth) {
            return auth(Output.of(auth));
        }

        /**
         * @param encoding Encoding format for log events. Valid values: `json`, `raw_message`.
         * 
         * @return builder
         * 
         */
        public Builder encoding(@Nullable Output<String> encoding) {
            $.encoding = encoding;
            return this;
        }

        /**
         * @param encoding Encoding format for log events. Valid values: `json`, `raw_message`.
         * 
         * @return builder
         * 
         */
        public Builder encoding(String encoding) {
            return encoding(Output.of(encoding));
        }

        /**
         * @param id The unique identifier for this component.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier for this component.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(Output<List<String>> inputs) {
            $.inputs = inputs;
            return this;
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(List<String> inputs) {
            return inputs(Output.of(inputs));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }

        /**
         * @param project The GCP project ID that owns the Pub/Sub topic.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The GCP project ID that owns the Pub/Sub topic.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(@Nullable Output<ObservabilityPipelineConfigDestinationsGooglePubsubTlsArgs> tls) {
            $.tls = tls;
            return this;
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(ObservabilityPipelineConfigDestinationsGooglePubsubTlsArgs tls) {
            return tls(Output.of(tls));
        }

        /**
         * @param topic The Pub/Sub topic name to publish logs to.
         * 
         * @return builder
         * 
         */
        public Builder topic(Output<String> topic) {
            $.topic = topic;
            return this;
        }

        /**
         * @param topic The Pub/Sub topic name to publish logs to.
         * 
         * @return builder
         * 
         */
        public Builder topic(String topic) {
            return topic(Output.of(topic));
        }

        public ObservabilityPipelineConfigDestinationsGooglePubsubArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsGooglePubsubArgs", "id");
            }
            if ($.inputs == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsGooglePubsubArgs", "inputs");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsGooglePubsubArgs", "project");
            }
            if ($.topic == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsGooglePubsubArgs", "topic");
            }
            return $;
        }
    }

}
