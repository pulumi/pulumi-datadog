// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigProcessorsReduceMergeStrategyArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigProcessorsReduceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigProcessorsReduceArgs Empty = new ObservabilityPipelineConfigProcessorsReduceArgs();

    /**
     * A list of fields used to group log events for merging.
     * 
     */
    @Import(name="groupBies", required=true)
    private Output<List<String>> groupBies;

    /**
     * @return A list of fields used to group log events for merging.
     * 
     */
    public Output<List<String>> groupBies() {
        return this.groupBies;
    }

    /**
     * The unique identifier for this processor.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique identifier for this processor.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * A Datadog search query used to determine which logs this processor targets.
     * 
     */
    @Import(name="include", required=true)
    private Output<String> include;

    /**
     * @return A Datadog search query used to determine which logs this processor targets.
     * 
     */
    public Output<String> include() {
        return this.include;
    }

    /**
     * A list of component IDs whose output is used as the input for this processor.
     * 
     */
    @Import(name="inputs", required=true)
    private Output<List<String>> inputs;

    /**
     * @return A list of component IDs whose output is used as the input for this processor.
     * 
     */
    public Output<List<String>> inputs() {
        return this.inputs;
    }

    /**
     * List of merge strategies defining how values from grouped events should be combined.
     * 
     */
    @Import(name="mergeStrategies")
    private @Nullable Output<List<ObservabilityPipelineConfigProcessorsReduceMergeStrategyArgs>> mergeStrategies;

    /**
     * @return List of merge strategies defining how values from grouped events should be combined.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigProcessorsReduceMergeStrategyArgs>>> mergeStrategies() {
        return Optional.ofNullable(this.mergeStrategies);
    }

    private ObservabilityPipelineConfigProcessorsReduceArgs() {}

    private ObservabilityPipelineConfigProcessorsReduceArgs(ObservabilityPipelineConfigProcessorsReduceArgs $) {
        this.groupBies = $.groupBies;
        this.id = $.id;
        this.include = $.include;
        this.inputs = $.inputs;
        this.mergeStrategies = $.mergeStrategies;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigProcessorsReduceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigProcessorsReduceArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigProcessorsReduceArgs();
        }

        public Builder(ObservabilityPipelineConfigProcessorsReduceArgs defaults) {
            $ = new ObservabilityPipelineConfigProcessorsReduceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupBies A list of fields used to group log events for merging.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(Output<List<String>> groupBies) {
            $.groupBies = groupBies;
            return this;
        }

        /**
         * @param groupBies A list of fields used to group log events for merging.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(List<String> groupBies) {
            return groupBies(Output.of(groupBies));
        }

        /**
         * @param groupBies A list of fields used to group log events for merging.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }

        /**
         * @param id The unique identifier for this processor.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier for this processor.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param include A Datadog search query used to determine which logs this processor targets.
         * 
         * @return builder
         * 
         */
        public Builder include(Output<String> include) {
            $.include = include;
            return this;
        }

        /**
         * @param include A Datadog search query used to determine which logs this processor targets.
         * 
         * @return builder
         * 
         */
        public Builder include(String include) {
            return include(Output.of(include));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the input for this processor.
         * 
         * @return builder
         * 
         */
        public Builder inputs(Output<List<String>> inputs) {
            $.inputs = inputs;
            return this;
        }

        /**
         * @param inputs A list of component IDs whose output is used as the input for this processor.
         * 
         * @return builder
         * 
         */
        public Builder inputs(List<String> inputs) {
            return inputs(Output.of(inputs));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the input for this processor.
         * 
         * @return builder
         * 
         */
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }

        /**
         * @param mergeStrategies List of merge strategies defining how values from grouped events should be combined.
         * 
         * @return builder
         * 
         */
        public Builder mergeStrategies(@Nullable Output<List<ObservabilityPipelineConfigProcessorsReduceMergeStrategyArgs>> mergeStrategies) {
            $.mergeStrategies = mergeStrategies;
            return this;
        }

        /**
         * @param mergeStrategies List of merge strategies defining how values from grouped events should be combined.
         * 
         * @return builder
         * 
         */
        public Builder mergeStrategies(List<ObservabilityPipelineConfigProcessorsReduceMergeStrategyArgs> mergeStrategies) {
            return mergeStrategies(Output.of(mergeStrategies));
        }

        /**
         * @param mergeStrategies List of merge strategies defining how values from grouped events should be combined.
         * 
         * @return builder
         * 
         */
        public Builder mergeStrategies(ObservabilityPipelineConfigProcessorsReduceMergeStrategyArgs... mergeStrategies) {
            return mergeStrategies(List.of(mergeStrategies));
        }

        public ObservabilityPipelineConfigProcessorsReduceArgs build() {
            if ($.groupBies == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsReduceArgs", "groupBies");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsReduceArgs", "id");
            }
            if ($.include == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsReduceArgs", "include");
            }
            if ($.inputs == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsReduceArgs", "inputs");
            }
            return $;
        }
    }

}
