// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.DashboardWidgetToplistDefinitionRequestQueryEventQueryCompute;
import com.pulumi.datadog.outputs.DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBy;
import com.pulumi.datadog.outputs.DashboardWidgetToplistDefinitionRequestQueryEventQuerySearch;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardWidgetToplistDefinitionRequestQueryEventQuery {
    /**
     * @return The compute options.
     * 
     */
    private List<DashboardWidgetToplistDefinitionRequestQueryEventQueryCompute> computes;
    /**
     * @return The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
     * 
     */
    private String dataSource;
    /**
     * @return Multiple `group_by` blocks are allowed using the structure below.
     * 
     */
    private @Nullable List<DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBy> groupBies;
    /**
     * @return An array of index names to query in the stream.
     * 
     */
    private @Nullable List<String> indexes;
    /**
     * @return The name of the variable.
     * 
     */
    private String name;
    /**
     * @return The search options.
     * 
     */
    private @Nullable DashboardWidgetToplistDefinitionRequestQueryEventQuerySearch search;
    /**
     * @return Storage location (private beta).
     * 
     */
    private @Nullable String storage;

    private DashboardWidgetToplistDefinitionRequestQueryEventQuery() {}
    /**
     * @return The compute options.
     * 
     */
    public List<DashboardWidgetToplistDefinitionRequestQueryEventQueryCompute> computes() {
        return this.computes;
    }
    /**
     * @return The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
     * 
     */
    public String dataSource() {
        return this.dataSource;
    }
    /**
     * @return Multiple `group_by` blocks are allowed using the structure below.
     * 
     */
    public List<DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBy> groupBies() {
        return this.groupBies == null ? List.of() : this.groupBies;
    }
    /**
     * @return An array of index names to query in the stream.
     * 
     */
    public List<String> indexes() {
        return this.indexes == null ? List.of() : this.indexes;
    }
    /**
     * @return The name of the variable.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The search options.
     * 
     */
    public Optional<DashboardWidgetToplistDefinitionRequestQueryEventQuerySearch> search() {
        return Optional.ofNullable(this.search);
    }
    /**
     * @return Storage location (private beta).
     * 
     */
    public Optional<String> storage() {
        return Optional.ofNullable(this.storage);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardWidgetToplistDefinitionRequestQueryEventQuery defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<DashboardWidgetToplistDefinitionRequestQueryEventQueryCompute> computes;
        private String dataSource;
        private @Nullable List<DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBy> groupBies;
        private @Nullable List<String> indexes;
        private String name;
        private @Nullable DashboardWidgetToplistDefinitionRequestQueryEventQuerySearch search;
        private @Nullable String storage;
        public Builder() {}
        public Builder(DashboardWidgetToplistDefinitionRequestQueryEventQuery defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.computes = defaults.computes;
    	      this.dataSource = defaults.dataSource;
    	      this.groupBies = defaults.groupBies;
    	      this.indexes = defaults.indexes;
    	      this.name = defaults.name;
    	      this.search = defaults.search;
    	      this.storage = defaults.storage;
        }

        @CustomType.Setter
        public Builder computes(List<DashboardWidgetToplistDefinitionRequestQueryEventQueryCompute> computes) {
            this.computes = Objects.requireNonNull(computes);
            return this;
        }
        public Builder computes(DashboardWidgetToplistDefinitionRequestQueryEventQueryCompute... computes) {
            return computes(List.of(computes));
        }
        @CustomType.Setter
        public Builder dataSource(String dataSource) {
            this.dataSource = Objects.requireNonNull(dataSource);
            return this;
        }
        @CustomType.Setter
        public Builder groupBies(@Nullable List<DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBy> groupBies) {
            this.groupBies = groupBies;
            return this;
        }
        public Builder groupBies(DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBy... groupBies) {
            return groupBies(List.of(groupBies));
        }
        @CustomType.Setter
        public Builder indexes(@Nullable List<String> indexes) {
            this.indexes = indexes;
            return this;
        }
        public Builder indexes(String... indexes) {
            return indexes(List.of(indexes));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder search(@Nullable DashboardWidgetToplistDefinitionRequestQueryEventQuerySearch search) {
            this.search = search;
            return this;
        }
        @CustomType.Setter
        public Builder storage(@Nullable String storage) {
            this.storage = storage;
            return this;
        }
        public DashboardWidgetToplistDefinitionRequestQueryEventQuery build() {
            final var _resultValue = new DashboardWidgetToplistDefinitionRequestQueryEventQuery();
            _resultValue.computes = computes;
            _resultValue.dataSource = dataSource;
            _resultValue.groupBies = groupBies;
            _resultValue.indexes = indexes;
            _resultValue.name = name;
            _resultValue.search = search;
            _resultValue.storage = storage;
            return _resultValue;
        }
    }
}
