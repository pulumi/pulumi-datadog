// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class SecurityMonitoringRuleReferenceTableArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityMonitoringRuleReferenceTableArgs Empty = new SecurityMonitoringRuleReferenceTableArgs();

    /**
     * Whether to include or exclude logs that match the reference table.
     * 
     */
    @Import(name="checkPresence", required=true)
    private Output<Boolean> checkPresence;

    /**
     * @return Whether to include or exclude logs that match the reference table.
     * 
     */
    public Output<Boolean> checkPresence() {
        return this.checkPresence;
    }

    /**
     * The name of the column in the reference table.
     * 
     */
    @Import(name="columnName", required=true)
    private Output<String> columnName;

    /**
     * @return The name of the column in the reference table.
     * 
     */
    public Output<String> columnName() {
        return this.columnName;
    }

    /**
     * The field in the log that should be matched against the reference table.
     * 
     */
    @Import(name="logFieldPath", required=true)
    private Output<String> logFieldPath;

    /**
     * @return The field in the log that should be matched against the reference table.
     * 
     */
    public Output<String> logFieldPath() {
        return this.logFieldPath;
    }

    /**
     * The name of the query to filter.
     * 
     */
    @Import(name="ruleQueryName", required=true)
    private Output<String> ruleQueryName;

    /**
     * @return The name of the query to filter.
     * 
     */
    public Output<String> ruleQueryName() {
        return this.ruleQueryName;
    }

    /**
     * The name of the reference table.
     * 
     */
    @Import(name="tableName", required=true)
    private Output<String> tableName;

    /**
     * @return The name of the reference table.
     * 
     */
    public Output<String> tableName() {
        return this.tableName;
    }

    private SecurityMonitoringRuleReferenceTableArgs() {}

    private SecurityMonitoringRuleReferenceTableArgs(SecurityMonitoringRuleReferenceTableArgs $) {
        this.checkPresence = $.checkPresence;
        this.columnName = $.columnName;
        this.logFieldPath = $.logFieldPath;
        this.ruleQueryName = $.ruleQueryName;
        this.tableName = $.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityMonitoringRuleReferenceTableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityMonitoringRuleReferenceTableArgs $;

        public Builder() {
            $ = new SecurityMonitoringRuleReferenceTableArgs();
        }

        public Builder(SecurityMonitoringRuleReferenceTableArgs defaults) {
            $ = new SecurityMonitoringRuleReferenceTableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkPresence Whether to include or exclude logs that match the reference table.
         * 
         * @return builder
         * 
         */
        public Builder checkPresence(Output<Boolean> checkPresence) {
            $.checkPresence = checkPresence;
            return this;
        }

        /**
         * @param checkPresence Whether to include or exclude logs that match the reference table.
         * 
         * @return builder
         * 
         */
        public Builder checkPresence(Boolean checkPresence) {
            return checkPresence(Output.of(checkPresence));
        }

        /**
         * @param columnName The name of the column in the reference table.
         * 
         * @return builder
         * 
         */
        public Builder columnName(Output<String> columnName) {
            $.columnName = columnName;
            return this;
        }

        /**
         * @param columnName The name of the column in the reference table.
         * 
         * @return builder
         * 
         */
        public Builder columnName(String columnName) {
            return columnName(Output.of(columnName));
        }

        /**
         * @param logFieldPath The field in the log that should be matched against the reference table.
         * 
         * @return builder
         * 
         */
        public Builder logFieldPath(Output<String> logFieldPath) {
            $.logFieldPath = logFieldPath;
            return this;
        }

        /**
         * @param logFieldPath The field in the log that should be matched against the reference table.
         * 
         * @return builder
         * 
         */
        public Builder logFieldPath(String logFieldPath) {
            return logFieldPath(Output.of(logFieldPath));
        }

        /**
         * @param ruleQueryName The name of the query to filter.
         * 
         * @return builder
         * 
         */
        public Builder ruleQueryName(Output<String> ruleQueryName) {
            $.ruleQueryName = ruleQueryName;
            return this;
        }

        /**
         * @param ruleQueryName The name of the query to filter.
         * 
         * @return builder
         * 
         */
        public Builder ruleQueryName(String ruleQueryName) {
            return ruleQueryName(Output.of(ruleQueryName));
        }

        /**
         * @param tableName The name of the reference table.
         * 
         * @return builder
         * 
         */
        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        /**
         * @param tableName The name of the reference table.
         * 
         * @return builder
         * 
         */
        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public SecurityMonitoringRuleReferenceTableArgs build() {
            if ($.checkPresence == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringRuleReferenceTableArgs", "checkPresence");
            }
            if ($.columnName == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringRuleReferenceTableArgs", "columnName");
            }
            if ($.logFieldPath == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringRuleReferenceTableArgs", "logFieldPath");
            }
            if ($.ruleQueryName == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringRuleReferenceTableArgs", "ruleQueryName");
            }
            if ($.tableName == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringRuleReferenceTableArgs", "tableName");
            }
            return $;
        }
    }

}
