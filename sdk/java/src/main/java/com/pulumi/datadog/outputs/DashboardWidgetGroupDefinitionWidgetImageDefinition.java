// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardWidgetGroupDefinitionWidgetImageDefinition {
    /**
     * @return Whether to display a background or not. Defaults to `true`.
     * 
     */
    private @Nullable Boolean hasBackground;
    /**
     * @return Whether to display a border or not. Defaults to `true`.
     * 
     */
    private @Nullable Boolean hasBorder;
    /**
     * @return The horizontal alignment for the widget. Valid values are `center`, `left`, `right`.
     * 
     */
    private @Nullable String horizontalAlign;
    /**
     * @return The margins to use around the image. Note: `small` and `large` values are deprecated. Valid values are `sm`, `md`, `lg`, `small`, `large`.
     * 
     */
    private @Nullable String margin;
    /**
     * @return The preferred method to adapt the dimensions of the image. The values are based on the image `object-fit` CSS properties. Note: `zoom`, `fit` and `center` values are deprecated. Valid values are `fill`, `contain`, `cover`, `none`, `scale-down`, `zoom`, `fit`, `center`.
     * 
     */
    private @Nullable String sizing;
    /**
     * @return The URL to use as a data source for the widget.
     * 
     */
    private String url;
    /**
     * @return The URL in dark mode to use as a data source for the widget.
     * 
     */
    private @Nullable String urlDarkTheme;
    /**
     * @return The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
     * 
     */
    private @Nullable String verticalAlign;

    private DashboardWidgetGroupDefinitionWidgetImageDefinition() {}
    /**
     * @return Whether to display a background or not. Defaults to `true`.
     * 
     */
    public Optional<Boolean> hasBackground() {
        return Optional.ofNullable(this.hasBackground);
    }
    /**
     * @return Whether to display a border or not. Defaults to `true`.
     * 
     */
    public Optional<Boolean> hasBorder() {
        return Optional.ofNullable(this.hasBorder);
    }
    /**
     * @return The horizontal alignment for the widget. Valid values are `center`, `left`, `right`.
     * 
     */
    public Optional<String> horizontalAlign() {
        return Optional.ofNullable(this.horizontalAlign);
    }
    /**
     * @return The margins to use around the image. Note: `small` and `large` values are deprecated. Valid values are `sm`, `md`, `lg`, `small`, `large`.
     * 
     */
    public Optional<String> margin() {
        return Optional.ofNullable(this.margin);
    }
    /**
     * @return The preferred method to adapt the dimensions of the image. The values are based on the image `object-fit` CSS properties. Note: `zoom`, `fit` and `center` values are deprecated. Valid values are `fill`, `contain`, `cover`, `none`, `scale-down`, `zoom`, `fit`, `center`.
     * 
     */
    public Optional<String> sizing() {
        return Optional.ofNullable(this.sizing);
    }
    /**
     * @return The URL to use as a data source for the widget.
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return The URL in dark mode to use as a data source for the widget.
     * 
     */
    public Optional<String> urlDarkTheme() {
        return Optional.ofNullable(this.urlDarkTheme);
    }
    /**
     * @return The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
     * 
     */
    public Optional<String> verticalAlign() {
        return Optional.ofNullable(this.verticalAlign);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardWidgetGroupDefinitionWidgetImageDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean hasBackground;
        private @Nullable Boolean hasBorder;
        private @Nullable String horizontalAlign;
        private @Nullable String margin;
        private @Nullable String sizing;
        private String url;
        private @Nullable String urlDarkTheme;
        private @Nullable String verticalAlign;
        public Builder() {}
        public Builder(DashboardWidgetGroupDefinitionWidgetImageDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hasBackground = defaults.hasBackground;
    	      this.hasBorder = defaults.hasBorder;
    	      this.horizontalAlign = defaults.horizontalAlign;
    	      this.margin = defaults.margin;
    	      this.sizing = defaults.sizing;
    	      this.url = defaults.url;
    	      this.urlDarkTheme = defaults.urlDarkTheme;
    	      this.verticalAlign = defaults.verticalAlign;
        }

        @CustomType.Setter
        public Builder hasBackground(@Nullable Boolean hasBackground) {

            this.hasBackground = hasBackground;
            return this;
        }
        @CustomType.Setter
        public Builder hasBorder(@Nullable Boolean hasBorder) {

            this.hasBorder = hasBorder;
            return this;
        }
        @CustomType.Setter
        public Builder horizontalAlign(@Nullable String horizontalAlign) {

            this.horizontalAlign = horizontalAlign;
            return this;
        }
        @CustomType.Setter
        public Builder margin(@Nullable String margin) {

            this.margin = margin;
            return this;
        }
        @CustomType.Setter
        public Builder sizing(@Nullable String sizing) {

            this.sizing = sizing;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("DashboardWidgetGroupDefinitionWidgetImageDefinition", "url");
            }
            this.url = url;
            return this;
        }
        @CustomType.Setter
        public Builder urlDarkTheme(@Nullable String urlDarkTheme) {

            this.urlDarkTheme = urlDarkTheme;
            return this;
        }
        @CustomType.Setter
        public Builder verticalAlign(@Nullable String verticalAlign) {

            this.verticalAlign = verticalAlign;
            return this;
        }
        public DashboardWidgetGroupDefinitionWidgetImageDefinition build() {
            final var _resultValue = new DashboardWidgetGroupDefinitionWidgetImageDefinition();
            _resultValue.hasBackground = hasBackground;
            _resultValue.hasBorder = hasBorder;
            _resultValue.horizontalAlign = horizontalAlign;
            _resultValue.margin = margin;
            _resultValue.sizing = sizing;
            _resultValue.url = url;
            _resultValue.urlDarkTheme = urlDarkTheme;
            _resultValue.verticalAlign = verticalAlign;
            return _resultValue;
        }
    }
}
