// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryArgs;
import com.pulumi.datadog.inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryArgs;
import com.pulumi.datadog.inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormatArgs;
import com.pulumi.datadog.inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaArgs;
import com.pulumi.datadog.inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryArgs;
import com.pulumi.datadog.inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryArgs;
import com.pulumi.datadog.inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryArgs;
import com.pulumi.datadog.inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryArgs;
import com.pulumi.datadog.inputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs Empty = new DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs();

    /**
     * The aggregation methods available for cloud cost queries. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
     * 
     */
    @Import(name="aggregator")
    private @Nullable Output<String> aggregator;

    /**
     * @return The aggregation methods available for cloud cost queries. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
     * 
     */
    public Optional<Output<String>> aggregator() {
        return Optional.ofNullable(this.aggregator);
    }

    /**
     * An expression alias.
     * 
     */
    @Import(name="alias")
    private @Nullable Output<String> alias;

    /**
     * @return An expression alias.
     * 
     */
    public Optional<Output<String>> alias() {
        return Optional.ofNullable(this.alias);
    }

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="apmQuery")
    private @Nullable Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryArgs> apmQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryArgs>> apmQuery() {
        return Optional.ofNullable(this.apmQuery);
    }

    @Import(name="apmStatsQuery")
    private @Nullable Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryArgs> apmStatsQuery;

    public Optional<Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryArgs>> apmStatsQuery() {
        return Optional.ofNullable(this.apmStatsQuery);
    }

    /**
     * A list of display modes for each table cell. Valid values are `number`, `bar`.
     * 
     */
    @Import(name="cellDisplayModes")
    private @Nullable Output<List<String>> cellDisplayModes;

    /**
     * @return A list of display modes for each table cell. Valid values are `number`, `bar`.
     * 
     */
    public Optional<Output<List<String>>> cellDisplayModes() {
        return Optional.ofNullable(this.cellDisplayModes);
    }

    /**
     * Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
     * 
     */
    @Import(name="conditionalFormats")
    private @Nullable Output<List<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormatArgs>> conditionalFormats;

    /**
     * @return Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
     * 
     */
    public Optional<Output<List<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormatArgs>>> conditionalFormats() {
        return Optional.ofNullable(this.conditionalFormats);
    }

    @Import(name="formulas")
    private @Nullable Output<List<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaArgs>> formulas;

    public Optional<Output<List<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaArgs>>> formulas() {
        return Optional.ofNullable(this.formulas);
    }

    /**
     * The maximum number of items in the group.
     * 
     */
    @Import(name="limit")
    private @Nullable Output<Integer> limit;

    /**
     * @return The maximum number of items in the group.
     * 
     */
    public Optional<Output<Integer>> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="logQuery")
    private @Nullable Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryArgs> logQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryArgs>> logQuery() {
        return Optional.ofNullable(this.logQuery);
    }

    /**
     * Widget sorting methods. Valid values are `asc`, `desc`.
     * 
     */
    @Import(name="order")
    private @Nullable Output<String> order;

    /**
     * @return Widget sorting methods. Valid values are `asc`, `desc`.
     * 
     */
    public Optional<Output<String>> order() {
        return Optional.ofNullable(this.order);
    }

    /**
     * The process query to use in the widget. The structure of this block is described below.
     * 
     */
    @Import(name="processQuery")
    private @Nullable Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryArgs> processQuery;

    /**
     * @return The process query to use in the widget. The structure of this block is described below.
     * 
     */
    public Optional<Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryArgs>> processQuery() {
        return Optional.ofNullable(this.processQuery);
    }

    /**
     * The metric query to use for this widget.
     * 
     */
    @Import(name="q")
    private @Nullable Output<String> q;

    /**
     * @return The metric query to use for this widget.
     * 
     */
    public Optional<Output<String>> q() {
        return Optional.ofNullable(this.q);
    }

    @Import(name="queries")
    private @Nullable Output<List<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryArgs>> queries;

    public Optional<Output<List<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryArgs>>> queries() {
        return Optional.ofNullable(this.queries);
    }

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="rumQuery")
    private @Nullable Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryArgs> rumQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryArgs>> rumQuery() {
        return Optional.ofNullable(this.rumQuery);
    }

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="securityQuery")
    private @Nullable Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryArgs> securityQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryArgs>> securityQuery() {
        return Optional.ofNullable(this.securityQuery);
    }

    private DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs() {}

    private DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs(DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs $) {
        this.aggregator = $.aggregator;
        this.alias = $.alias;
        this.apmQuery = $.apmQuery;
        this.apmStatsQuery = $.apmStatsQuery;
        this.cellDisplayModes = $.cellDisplayModes;
        this.conditionalFormats = $.conditionalFormats;
        this.formulas = $.formulas;
        this.limit = $.limit;
        this.logQuery = $.logQuery;
        this.order = $.order;
        this.processQuery = $.processQuery;
        this.q = $.q;
        this.queries = $.queries;
        this.rumQuery = $.rumQuery;
        this.securityQuery = $.securityQuery;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs $;

        public Builder() {
            $ = new DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs();
        }

        public Builder(DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs defaults) {
            $ = new DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregator The aggregation methods available for cloud cost queries. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
         * 
         * @return builder
         * 
         */
        public Builder aggregator(@Nullable Output<String> aggregator) {
            $.aggregator = aggregator;
            return this;
        }

        /**
         * @param aggregator The aggregation methods available for cloud cost queries. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
         * 
         * @return builder
         * 
         */
        public Builder aggregator(String aggregator) {
            return aggregator(Output.of(aggregator));
        }

        /**
         * @param alias An expression alias.
         * 
         * @return builder
         * 
         */
        public Builder alias(@Nullable Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias An expression alias.
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param apmQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder apmQuery(@Nullable Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryArgs> apmQuery) {
            $.apmQuery = apmQuery;
            return this;
        }

        /**
         * @param apmQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder apmQuery(DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryArgs apmQuery) {
            return apmQuery(Output.of(apmQuery));
        }

        public Builder apmStatsQuery(@Nullable Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryArgs> apmStatsQuery) {
            $.apmStatsQuery = apmStatsQuery;
            return this;
        }

        public Builder apmStatsQuery(DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryArgs apmStatsQuery) {
            return apmStatsQuery(Output.of(apmStatsQuery));
        }

        /**
         * @param cellDisplayModes A list of display modes for each table cell. Valid values are `number`, `bar`.
         * 
         * @return builder
         * 
         */
        public Builder cellDisplayModes(@Nullable Output<List<String>> cellDisplayModes) {
            $.cellDisplayModes = cellDisplayModes;
            return this;
        }

        /**
         * @param cellDisplayModes A list of display modes for each table cell. Valid values are `number`, `bar`.
         * 
         * @return builder
         * 
         */
        public Builder cellDisplayModes(List<String> cellDisplayModes) {
            return cellDisplayModes(Output.of(cellDisplayModes));
        }

        /**
         * @param cellDisplayModes A list of display modes for each table cell. Valid values are `number`, `bar`.
         * 
         * @return builder
         * 
         */
        public Builder cellDisplayModes(String... cellDisplayModes) {
            return cellDisplayModes(List.of(cellDisplayModes));
        }

        /**
         * @param conditionalFormats Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
         * 
         * @return builder
         * 
         */
        public Builder conditionalFormats(@Nullable Output<List<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormatArgs>> conditionalFormats) {
            $.conditionalFormats = conditionalFormats;
            return this;
        }

        /**
         * @param conditionalFormats Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
         * 
         * @return builder
         * 
         */
        public Builder conditionalFormats(List<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormatArgs> conditionalFormats) {
            return conditionalFormats(Output.of(conditionalFormats));
        }

        /**
         * @param conditionalFormats Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
         * 
         * @return builder
         * 
         */
        public Builder conditionalFormats(DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormatArgs... conditionalFormats) {
            return conditionalFormats(List.of(conditionalFormats));
        }

        public Builder formulas(@Nullable Output<List<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaArgs>> formulas) {
            $.formulas = formulas;
            return this;
        }

        public Builder formulas(List<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaArgs> formulas) {
            return formulas(Output.of(formulas));
        }

        public Builder formulas(DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaArgs... formulas) {
            return formulas(List.of(formulas));
        }

        /**
         * @param limit The maximum number of items in the group.
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable Output<Integer> limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param limit The maximum number of items in the group.
         * 
         * @return builder
         * 
         */
        public Builder limit(Integer limit) {
            return limit(Output.of(limit));
        }

        /**
         * @param logQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder logQuery(@Nullable Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryArgs> logQuery) {
            $.logQuery = logQuery;
            return this;
        }

        /**
         * @param logQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder logQuery(DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryArgs logQuery) {
            return logQuery(Output.of(logQuery));
        }

        /**
         * @param order Widget sorting methods. Valid values are `asc`, `desc`.
         * 
         * @return builder
         * 
         */
        public Builder order(@Nullable Output<String> order) {
            $.order = order;
            return this;
        }

        /**
         * @param order Widget sorting methods. Valid values are `asc`, `desc`.
         * 
         * @return builder
         * 
         */
        public Builder order(String order) {
            return order(Output.of(order));
        }

        /**
         * @param processQuery The process query to use in the widget. The structure of this block is described below.
         * 
         * @return builder
         * 
         */
        public Builder processQuery(@Nullable Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryArgs> processQuery) {
            $.processQuery = processQuery;
            return this;
        }

        /**
         * @param processQuery The process query to use in the widget. The structure of this block is described below.
         * 
         * @return builder
         * 
         */
        public Builder processQuery(DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryArgs processQuery) {
            return processQuery(Output.of(processQuery));
        }

        /**
         * @param q The metric query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder q(@Nullable Output<String> q) {
            $.q = q;
            return this;
        }

        /**
         * @param q The metric query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder q(String q) {
            return q(Output.of(q));
        }

        public Builder queries(@Nullable Output<List<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryArgs>> queries) {
            $.queries = queries;
            return this;
        }

        public Builder queries(List<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryArgs> queries) {
            return queries(Output.of(queries));
        }

        public Builder queries(DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryArgs... queries) {
            return queries(List.of(queries));
        }

        /**
         * @param rumQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder rumQuery(@Nullable Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryArgs> rumQuery) {
            $.rumQuery = rumQuery;
            return this;
        }

        /**
         * @param rumQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder rumQuery(DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryArgs rumQuery) {
            return rumQuery(Output.of(rumQuery));
        }

        /**
         * @param securityQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder securityQuery(@Nullable Output<DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryArgs> securityQuery) {
            $.securityQuery = securityQuery;
            return this;
        }

        /**
         * @param securityQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder securityQuery(DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryArgs securityQuery) {
            return securityQuery(Output.of(securityQuery));
        }

        public DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs build() {
            return $;
        }
    }

}
