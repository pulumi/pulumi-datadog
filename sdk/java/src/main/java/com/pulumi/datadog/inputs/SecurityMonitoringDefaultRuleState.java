// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.SecurityMonitoringDefaultRuleCaseArgs;
import com.pulumi.datadog.inputs.SecurityMonitoringDefaultRuleFilterArgs;
import com.pulumi.datadog.inputs.SecurityMonitoringDefaultRuleOptionsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityMonitoringDefaultRuleState extends com.pulumi.resources.ResourceArgs {

    public static final SecurityMonitoringDefaultRuleState Empty = new SecurityMonitoringDefaultRuleState();

    /**
     * Cases of the rule, this is used to update notifications.
     * 
     */
    @Import(name="cases")
    private @Nullable Output<List<SecurityMonitoringDefaultRuleCaseArgs>> cases;

    /**
     * @return Cases of the rule, this is used to update notifications.
     * 
     */
    public Optional<Output<List<SecurityMonitoringDefaultRuleCaseArgs>>> cases() {
        return Optional.ofNullable(this.cases);
    }

    /**
     * Enable the rule. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enable the rule. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Additional queries to filter matched events before they are processed.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<SecurityMonitoringDefaultRuleFilterArgs>> filters;

    /**
     * @return Additional queries to filter matched events before they are processed.
     * 
     */
    public Optional<Output<List<SecurityMonitoringDefaultRuleFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Options on default rules. Note that only a subset of fields can be updated on default rule options.
     * 
     */
    @Import(name="options")
    private @Nullable Output<SecurityMonitoringDefaultRuleOptionsArgs> options;

    /**
     * @return Options on default rules. Note that only a subset of fields can be updated on default rule options.
     * 
     */
    public Optional<Output<SecurityMonitoringDefaultRuleOptionsArgs>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * The rule type.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The rule type.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private SecurityMonitoringDefaultRuleState() {}

    private SecurityMonitoringDefaultRuleState(SecurityMonitoringDefaultRuleState $) {
        this.cases = $.cases;
        this.enabled = $.enabled;
        this.filters = $.filters;
        this.options = $.options;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityMonitoringDefaultRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityMonitoringDefaultRuleState $;

        public Builder() {
            $ = new SecurityMonitoringDefaultRuleState();
        }

        public Builder(SecurityMonitoringDefaultRuleState defaults) {
            $ = new SecurityMonitoringDefaultRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cases Cases of the rule, this is used to update notifications.
         * 
         * @return builder
         * 
         */
        public Builder cases(@Nullable Output<List<SecurityMonitoringDefaultRuleCaseArgs>> cases) {
            $.cases = cases;
            return this;
        }

        /**
         * @param cases Cases of the rule, this is used to update notifications.
         * 
         * @return builder
         * 
         */
        public Builder cases(List<SecurityMonitoringDefaultRuleCaseArgs> cases) {
            return cases(Output.of(cases));
        }

        /**
         * @param cases Cases of the rule, this is used to update notifications.
         * 
         * @return builder
         * 
         */
        public Builder cases(SecurityMonitoringDefaultRuleCaseArgs... cases) {
            return cases(List.of(cases));
        }

        /**
         * @param enabled Enable the rule. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enable the rule. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param filters Additional queries to filter matched events before they are processed.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<SecurityMonitoringDefaultRuleFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Additional queries to filter matched events before they are processed.
         * 
         * @return builder
         * 
         */
        public Builder filters(List<SecurityMonitoringDefaultRuleFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters Additional queries to filter matched events before they are processed.
         * 
         * @return builder
         * 
         */
        public Builder filters(SecurityMonitoringDefaultRuleFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param options Options on default rules. Note that only a subset of fields can be updated on default rule options.
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<SecurityMonitoringDefaultRuleOptionsArgs> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options Options on default rules. Note that only a subset of fields can be updated on default rule options.
         * 
         * @return builder
         * 
         */
        public Builder options(SecurityMonitoringDefaultRuleOptionsArgs options) {
            return options(Output.of(options));
        }

        /**
         * @param type The rule type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The rule type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public SecurityMonitoringDefaultRuleState build() {
            return $;
        }
    }

}
