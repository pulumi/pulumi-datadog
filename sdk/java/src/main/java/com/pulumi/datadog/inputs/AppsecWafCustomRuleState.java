// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.AppsecWafCustomRuleActionArgs;
import com.pulumi.datadog.inputs.AppsecWafCustomRuleConditionArgs;
import com.pulumi.datadog.inputs.AppsecWafCustomRuleScopeArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppsecWafCustomRuleState extends com.pulumi.resources.ResourceArgs {

    public static final AppsecWafCustomRuleState Empty = new AppsecWafCustomRuleState();

    @Import(name="action")
    private @Nullable Output<AppsecWafCustomRuleActionArgs> action;

    public Optional<Output<AppsecWafCustomRuleActionArgs>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Indicates whether the WAF custom rule will block the request.
     * 
     */
    @Import(name="blocking")
    private @Nullable Output<Boolean> blocking;

    /**
     * @return Indicates whether the WAF custom rule will block the request.
     * 
     */
    public Optional<Output<Boolean>> blocking() {
        return Optional.ofNullable(this.blocking);
    }

    @Import(name="conditions")
    private @Nullable Output<List<AppsecWafCustomRuleConditionArgs>> conditions;

    public Optional<Output<List<AppsecWafCustomRuleConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * Indicates whether the WAF custom rule is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Indicates whether the WAF custom rule is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The Name of the WAF custom rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The Name of the WAF custom rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The path glob for the WAF custom rule.
     * 
     */
    @Import(name="pathGlob")
    private @Nullable Output<String> pathGlob;

    /**
     * @return The path glob for the WAF custom rule.
     * 
     */
    public Optional<Output<String>> pathGlob() {
        return Optional.ofNullable(this.pathGlob);
    }

    @Import(name="scopes")
    private @Nullable Output<List<AppsecWafCustomRuleScopeArgs>> scopes;

    public Optional<Output<List<AppsecWafCustomRuleScopeArgs>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * Tags associated with the WAF custom rule. `category` and `type` tags are required. Supported categories include `business_logic`, `attack_attempt` and `security_response`.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Tags associated with the WAF custom rule. `category` and `type` tags are required. Supported categories include `business_logic`, `attack_attempt` and `security_response`.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private AppsecWafCustomRuleState() {}

    private AppsecWafCustomRuleState(AppsecWafCustomRuleState $) {
        this.action = $.action;
        this.blocking = $.blocking;
        this.conditions = $.conditions;
        this.enabled = $.enabled;
        this.name = $.name;
        this.pathGlob = $.pathGlob;
        this.scopes = $.scopes;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppsecWafCustomRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppsecWafCustomRuleState $;

        public Builder() {
            $ = new AppsecWafCustomRuleState();
        }

        public Builder(AppsecWafCustomRuleState defaults) {
            $ = new AppsecWafCustomRuleState(Objects.requireNonNull(defaults));
        }

        public Builder action(@Nullable Output<AppsecWafCustomRuleActionArgs> action) {
            $.action = action;
            return this;
        }

        public Builder action(AppsecWafCustomRuleActionArgs action) {
            return action(Output.of(action));
        }

        /**
         * @param blocking Indicates whether the WAF custom rule will block the request.
         * 
         * @return builder
         * 
         */
        public Builder blocking(@Nullable Output<Boolean> blocking) {
            $.blocking = blocking;
            return this;
        }

        /**
         * @param blocking Indicates whether the WAF custom rule will block the request.
         * 
         * @return builder
         * 
         */
        public Builder blocking(Boolean blocking) {
            return blocking(Output.of(blocking));
        }

        public Builder conditions(@Nullable Output<List<AppsecWafCustomRuleConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        public Builder conditions(List<AppsecWafCustomRuleConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        public Builder conditions(AppsecWafCustomRuleConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param enabled Indicates whether the WAF custom rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Indicates whether the WAF custom rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name The Name of the WAF custom rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The Name of the WAF custom rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pathGlob The path glob for the WAF custom rule.
         * 
         * @return builder
         * 
         */
        public Builder pathGlob(@Nullable Output<String> pathGlob) {
            $.pathGlob = pathGlob;
            return this;
        }

        /**
         * @param pathGlob The path glob for the WAF custom rule.
         * 
         * @return builder
         * 
         */
        public Builder pathGlob(String pathGlob) {
            return pathGlob(Output.of(pathGlob));
        }

        public Builder scopes(@Nullable Output<List<AppsecWafCustomRuleScopeArgs>> scopes) {
            $.scopes = scopes;
            return this;
        }

        public Builder scopes(List<AppsecWafCustomRuleScopeArgs> scopes) {
            return scopes(Output.of(scopes));
        }

        public Builder scopes(AppsecWafCustomRuleScopeArgs... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param tags Tags associated with the WAF custom rule. `category` and `type` tags are required. Supported categories include `business_logic`, `attack_attempt` and `security_response`.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags associated with the WAF custom rule. `category` and `type` tags are required. Supported categories include `business_logic`, `attack_attempt` and `security_response`.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public AppsecWafCustomRuleState build() {
            return $;
        }
    }

}
