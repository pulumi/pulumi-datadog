// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RumMetricUniquenessArgs extends com.pulumi.resources.ResourceArgs {

    public static final RumMetricUniquenessArgs Empty = new RumMetricUniquenessArgs();

    /**
     * When to count updatable events. `match` when the event is first seen, or `end` when the event is complete.
     * 
     */
    @Import(name="when")
    private @Nullable Output<String> when;

    /**
     * @return When to count updatable events. `match` when the event is first seen, or `end` when the event is complete.
     * 
     */
    public Optional<Output<String>> when() {
        return Optional.ofNullable(this.when);
    }

    private RumMetricUniquenessArgs() {}

    private RumMetricUniquenessArgs(RumMetricUniquenessArgs $) {
        this.when = $.when;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RumMetricUniquenessArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RumMetricUniquenessArgs $;

        public Builder() {
            $ = new RumMetricUniquenessArgs();
        }

        public Builder(RumMetricUniquenessArgs defaults) {
            $ = new RumMetricUniquenessArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param when When to count updatable events. `match` when the event is first seen, or `end` when the event is complete.
         * 
         * @return builder
         * 
         */
        public Builder when(@Nullable Output<String> when) {
            $.when = when;
            return this;
        }

        /**
         * @param when When to count updatable events. `match` when the event is first seen, or `end` when the event is complete.
         * 
         * @return builder
         * 
         */
        public Builder when(String when) {
            return when(Output.of(when));
        }

        public RumMetricUniquenessArgs build() {
            return $;
        }
    }

}
