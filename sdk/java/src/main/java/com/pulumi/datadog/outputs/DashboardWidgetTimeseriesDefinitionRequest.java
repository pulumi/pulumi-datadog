// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.DashboardWidgetApmQuery;
import com.pulumi.datadog.outputs.DashboardWidgetLogQuery;
import com.pulumi.datadog.outputs.DashboardWidgetRumQuery;
import com.pulumi.datadog.outputs.DashboardWidgetSecurityQuery;
import com.pulumi.datadog.outputs.DashboardWidgetTimeseriesDefinitionRequestAuditQuery;
import com.pulumi.datadog.outputs.DashboardWidgetTimeseriesDefinitionRequestFormula;
import com.pulumi.datadog.outputs.DashboardWidgetTimeseriesDefinitionRequestMetadata;
import com.pulumi.datadog.outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQuery;
import com.pulumi.datadog.outputs.DashboardWidgetTimeseriesDefinitionRequestProcessQuery;
import com.pulumi.datadog.outputs.DashboardWidgetTimeseriesDefinitionRequestQuery;
import com.pulumi.datadog.outputs.DashboardWidgetTimeseriesDefinitionRequestStyle;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardWidgetTimeseriesDefinitionRequest {
    /**
     * @return The query to use for this widget.
     * 
     */
    private @Nullable DashboardWidgetApmQuery apmQuery;
    /**
     * @return The query to use for this widget.
     * 
     */
    private @Nullable DashboardWidgetTimeseriesDefinitionRequestAuditQuery auditQuery;
    /**
     * @return How to display the marker lines. Valid values are `area`, `bars`, `line`, `overlay`.
     * 
     */
    private @Nullable String displayType;
    private @Nullable List<DashboardWidgetTimeseriesDefinitionRequestFormula> formulas;
    /**
     * @return The query to use for this widget.
     * 
     */
    private @Nullable DashboardWidgetLogQuery logQuery;
    /**
     * @return Used to define expression aliases. Multiple `metadata` blocks are allowed using the structure below.
     * 
     */
    private @Nullable List<DashboardWidgetTimeseriesDefinitionRequestMetadata> metadatas;
    /**
     * @return The query to use for this widget.
     * 
     */
    private @Nullable DashboardWidgetTimeseriesDefinitionRequestNetworkQuery networkQuery;
    /**
     * @return A Boolean indicating whether the request uses the right or left Y-Axis.
     * 
     */
    private @Nullable Boolean onRightYaxis;
    /**
     * @return The process query to use in the widget. The structure of this block is described below.
     * 
     */
    private @Nullable DashboardWidgetTimeseriesDefinitionRequestProcessQuery processQuery;
    /**
     * @return The metric query to use for this widget.
     * 
     */
    private @Nullable String q;
    private @Nullable List<DashboardWidgetTimeseriesDefinitionRequestQuery> queries;
    /**
     * @return The query to use for this widget.
     * 
     */
    private @Nullable DashboardWidgetRumQuery rumQuery;
    /**
     * @return The query to use for this widget.
     * 
     */
    private @Nullable DashboardWidgetSecurityQuery securityQuery;
    /**
     * @return The style of the widget graph. Exactly one `style` block is allowed using the structure below.
     * 
     */
    private @Nullable DashboardWidgetTimeseriesDefinitionRequestStyle style;

    private DashboardWidgetTimeseriesDefinitionRequest() {}
    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<DashboardWidgetApmQuery> apmQuery() {
        return Optional.ofNullable(this.apmQuery);
    }
    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<DashboardWidgetTimeseriesDefinitionRequestAuditQuery> auditQuery() {
        return Optional.ofNullable(this.auditQuery);
    }
    /**
     * @return How to display the marker lines. Valid values are `area`, `bars`, `line`, `overlay`.
     * 
     */
    public Optional<String> displayType() {
        return Optional.ofNullable(this.displayType);
    }
    public List<DashboardWidgetTimeseriesDefinitionRequestFormula> formulas() {
        return this.formulas == null ? List.of() : this.formulas;
    }
    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<DashboardWidgetLogQuery> logQuery() {
        return Optional.ofNullable(this.logQuery);
    }
    /**
     * @return Used to define expression aliases. Multiple `metadata` blocks are allowed using the structure below.
     * 
     */
    public List<DashboardWidgetTimeseriesDefinitionRequestMetadata> metadatas() {
        return this.metadatas == null ? List.of() : this.metadatas;
    }
    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<DashboardWidgetTimeseriesDefinitionRequestNetworkQuery> networkQuery() {
        return Optional.ofNullable(this.networkQuery);
    }
    /**
     * @return A Boolean indicating whether the request uses the right or left Y-Axis.
     * 
     */
    public Optional<Boolean> onRightYaxis() {
        return Optional.ofNullable(this.onRightYaxis);
    }
    /**
     * @return The process query to use in the widget. The structure of this block is described below.
     * 
     */
    public Optional<DashboardWidgetTimeseriesDefinitionRequestProcessQuery> processQuery() {
        return Optional.ofNullable(this.processQuery);
    }
    /**
     * @return The metric query to use for this widget.
     * 
     */
    public Optional<String> q() {
        return Optional.ofNullable(this.q);
    }
    public List<DashboardWidgetTimeseriesDefinitionRequestQuery> queries() {
        return this.queries == null ? List.of() : this.queries;
    }
    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<DashboardWidgetRumQuery> rumQuery() {
        return Optional.ofNullable(this.rumQuery);
    }
    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<DashboardWidgetSecurityQuery> securityQuery() {
        return Optional.ofNullable(this.securityQuery);
    }
    /**
     * @return The style of the widget graph. Exactly one `style` block is allowed using the structure below.
     * 
     */
    public Optional<DashboardWidgetTimeseriesDefinitionRequestStyle> style() {
        return Optional.ofNullable(this.style);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardWidgetTimeseriesDefinitionRequest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable DashboardWidgetApmQuery apmQuery;
        private @Nullable DashboardWidgetTimeseriesDefinitionRequestAuditQuery auditQuery;
        private @Nullable String displayType;
        private @Nullable List<DashboardWidgetTimeseriesDefinitionRequestFormula> formulas;
        private @Nullable DashboardWidgetLogQuery logQuery;
        private @Nullable List<DashboardWidgetTimeseriesDefinitionRequestMetadata> metadatas;
        private @Nullable DashboardWidgetTimeseriesDefinitionRequestNetworkQuery networkQuery;
        private @Nullable Boolean onRightYaxis;
        private @Nullable DashboardWidgetTimeseriesDefinitionRequestProcessQuery processQuery;
        private @Nullable String q;
        private @Nullable List<DashboardWidgetTimeseriesDefinitionRequestQuery> queries;
        private @Nullable DashboardWidgetRumQuery rumQuery;
        private @Nullable DashboardWidgetSecurityQuery securityQuery;
        private @Nullable DashboardWidgetTimeseriesDefinitionRequestStyle style;
        public Builder() {}
        public Builder(DashboardWidgetTimeseriesDefinitionRequest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apmQuery = defaults.apmQuery;
    	      this.auditQuery = defaults.auditQuery;
    	      this.displayType = defaults.displayType;
    	      this.formulas = defaults.formulas;
    	      this.logQuery = defaults.logQuery;
    	      this.metadatas = defaults.metadatas;
    	      this.networkQuery = defaults.networkQuery;
    	      this.onRightYaxis = defaults.onRightYaxis;
    	      this.processQuery = defaults.processQuery;
    	      this.q = defaults.q;
    	      this.queries = defaults.queries;
    	      this.rumQuery = defaults.rumQuery;
    	      this.securityQuery = defaults.securityQuery;
    	      this.style = defaults.style;
        }

        @CustomType.Setter
        public Builder apmQuery(@Nullable DashboardWidgetApmQuery apmQuery) {

            this.apmQuery = apmQuery;
            return this;
        }
        @CustomType.Setter
        public Builder auditQuery(@Nullable DashboardWidgetTimeseriesDefinitionRequestAuditQuery auditQuery) {

            this.auditQuery = auditQuery;
            return this;
        }
        @CustomType.Setter
        public Builder displayType(@Nullable String displayType) {

            this.displayType = displayType;
            return this;
        }
        @CustomType.Setter
        public Builder formulas(@Nullable List<DashboardWidgetTimeseriesDefinitionRequestFormula> formulas) {

            this.formulas = formulas;
            return this;
        }
        public Builder formulas(DashboardWidgetTimeseriesDefinitionRequestFormula... formulas) {
            return formulas(List.of(formulas));
        }
        @CustomType.Setter
        public Builder logQuery(@Nullable DashboardWidgetLogQuery logQuery) {

            this.logQuery = logQuery;
            return this;
        }
        @CustomType.Setter
        public Builder metadatas(@Nullable List<DashboardWidgetTimeseriesDefinitionRequestMetadata> metadatas) {

            this.metadatas = metadatas;
            return this;
        }
        public Builder metadatas(DashboardWidgetTimeseriesDefinitionRequestMetadata... metadatas) {
            return metadatas(List.of(metadatas));
        }
        @CustomType.Setter
        public Builder networkQuery(@Nullable DashboardWidgetTimeseriesDefinitionRequestNetworkQuery networkQuery) {

            this.networkQuery = networkQuery;
            return this;
        }
        @CustomType.Setter
        public Builder onRightYaxis(@Nullable Boolean onRightYaxis) {

            this.onRightYaxis = onRightYaxis;
            return this;
        }
        @CustomType.Setter
        public Builder processQuery(@Nullable DashboardWidgetTimeseriesDefinitionRequestProcessQuery processQuery) {

            this.processQuery = processQuery;
            return this;
        }
        @CustomType.Setter
        public Builder q(@Nullable String q) {

            this.q = q;
            return this;
        }
        @CustomType.Setter
        public Builder queries(@Nullable List<DashboardWidgetTimeseriesDefinitionRequestQuery> queries) {

            this.queries = queries;
            return this;
        }
        public Builder queries(DashboardWidgetTimeseriesDefinitionRequestQuery... queries) {
            return queries(List.of(queries));
        }
        @CustomType.Setter
        public Builder rumQuery(@Nullable DashboardWidgetRumQuery rumQuery) {

            this.rumQuery = rumQuery;
            return this;
        }
        @CustomType.Setter
        public Builder securityQuery(@Nullable DashboardWidgetSecurityQuery securityQuery) {

            this.securityQuery = securityQuery;
            return this;
        }
        @CustomType.Setter
        public Builder style(@Nullable DashboardWidgetTimeseriesDefinitionRequestStyle style) {

            this.style = style;
            return this;
        }
        public DashboardWidgetTimeseriesDefinitionRequest build() {
            final var _resultValue = new DashboardWidgetTimeseriesDefinitionRequest();
            _resultValue.apmQuery = apmQuery;
            _resultValue.auditQuery = auditQuery;
            _resultValue.displayType = displayType;
            _resultValue.formulas = formulas;
            _resultValue.logQuery = logQuery;
            _resultValue.metadatas = metadatas;
            _resultValue.networkQuery = networkQuery;
            _resultValue.onRightYaxis = onRightYaxis;
            _resultValue.processQuery = processQuery;
            _resultValue.q = q;
            _resultValue.queries = queries;
            _resultValue.rumQuery = rumQuery;
            _resultValue.securityQuery = securityQuery;
            _resultValue.style = style;
            return _resultValue;
        }
    }
}
