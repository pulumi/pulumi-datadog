// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.GetTagPipelineRulesetRuleQueryAddition;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTagPipelineRulesetRuleQuery extends com.pulumi.resources.InvokeArgs {

    public static final GetTagPipelineRulesetRuleQuery Empty = new GetTagPipelineRulesetRuleQuery();

    /**
     * The addition configuration for the query.
     * 
     */
    @Import(name="addition")
    private @Nullable GetTagPipelineRulesetRuleQueryAddition addition;

    /**
     * @return The addition configuration for the query.
     * 
     */
    public Optional<GetTagPipelineRulesetRuleQueryAddition> addition() {
        return Optional.ofNullable(this.addition);
    }

    /**
     * Whether the query matching is case insensitive.
     * 
     */
    @Import(name="caseInsensitivity", required=true)
    private Boolean caseInsensitivity;

    /**
     * @return Whether the query matching is case insensitive.
     * 
     */
    public Boolean caseInsensitivity() {
        return this.caseInsensitivity;
    }

    /**
     * Whether to apply the query only if the key doesn&#39;t exist.
     * 
     */
    @Import(name="ifNotExists", required=true)
    private Boolean ifNotExists;

    /**
     * @return Whether to apply the query only if the key doesn&#39;t exist.
     * 
     */
    public Boolean ifNotExists() {
        return this.ifNotExists;
    }

    /**
     * The query string.
     * 
     */
    @Import(name="query", required=true)
    private String query;

    /**
     * @return The query string.
     * 
     */
    public String query() {
        return this.query;
    }

    private GetTagPipelineRulesetRuleQuery() {}

    private GetTagPipelineRulesetRuleQuery(GetTagPipelineRulesetRuleQuery $) {
        this.addition = $.addition;
        this.caseInsensitivity = $.caseInsensitivity;
        this.ifNotExists = $.ifNotExists;
        this.query = $.query;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTagPipelineRulesetRuleQuery defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTagPipelineRulesetRuleQuery $;

        public Builder() {
            $ = new GetTagPipelineRulesetRuleQuery();
        }

        public Builder(GetTagPipelineRulesetRuleQuery defaults) {
            $ = new GetTagPipelineRulesetRuleQuery(Objects.requireNonNull(defaults));
        }

        /**
         * @param addition The addition configuration for the query.
         * 
         * @return builder
         * 
         */
        public Builder addition(@Nullable GetTagPipelineRulesetRuleQueryAddition addition) {
            $.addition = addition;
            return this;
        }

        /**
         * @param caseInsensitivity Whether the query matching is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder caseInsensitivity(Boolean caseInsensitivity) {
            $.caseInsensitivity = caseInsensitivity;
            return this;
        }

        /**
         * @param ifNotExists Whether to apply the query only if the key doesn&#39;t exist.
         * 
         * @return builder
         * 
         */
        public Builder ifNotExists(Boolean ifNotExists) {
            $.ifNotExists = ifNotExists;
            return this;
        }

        /**
         * @param query The query string.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            $.query = query;
            return this;
        }

        public GetTagPipelineRulesetRuleQuery build() {
            if ($.caseInsensitivity == null) {
                throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleQuery", "caseInsensitivity");
            }
            if ($.ifNotExists == null) {
                throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleQuery", "ifNotExists");
            }
            if ($.query == null) {
                throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleQuery", "query");
            }
            return $;
        }
    }

}
