// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * (Required unless validate is false) Datadog API key. This can also be set via the DD_API_KEY environment variable.
     * 
     */
    @Import(name="apiKey")
    private @Nullable Output<String> apiKey;

    /**
     * @return (Required unless validate is false) Datadog API key. This can also be set via the DD_API_KEY environment variable.
     * 
     */
    public Optional<Output<String>> apiKey() {
        return Optional.ofNullable(this.apiKey);
    }

    /**
     * The API URL. This can also be set via the DD_HOST environment variable. Note that this URL must not end with the `/api/`
     * path. For example, `https://api.datadoghq.com/` is a correct value, while `https://api.datadoghq.com/api/` is not. And
     * if you&#39;re working with &#34;EU&#34; version of Datadog, use `https://api.datadoghq.eu/`. Other Datadog region examples:
     * `https://api.us5.datadoghq.com/`, `https://api.us3.datadoghq.com/` and `https://api.ddog-gov.com/`. See
     * https://docs.datadoghq.com/getting_started/site/ for all available regions.
     * 
     */
    @Import(name="apiUrl")
    private @Nullable Output<String> apiUrl;

    /**
     * @return The API URL. This can also be set via the DD_HOST environment variable. Note that this URL must not end with the `/api/`
     * path. For example, `https://api.datadoghq.com/` is a correct value, while `https://api.datadoghq.com/api/` is not. And
     * if you&#39;re working with &#34;EU&#34; version of Datadog, use `https://api.datadoghq.eu/`. Other Datadog region examples:
     * `https://api.us5.datadoghq.com/`, `https://api.us3.datadoghq.com/` and `https://api.ddog-gov.com/`. See
     * https://docs.datadoghq.com/getting_started/site/ for all available regions.
     * 
     */
    public Optional<Output<String>> apiUrl() {
        return Optional.ofNullable(this.apiUrl);
    }

    /**
     * (Required unless validate is false) Datadog APP key. This can also be set via the DD_APP_KEY environment variable.
     * 
     */
    @Import(name="appKey")
    private @Nullable Output<String> appKey;

    /**
     * @return (Required unless validate is false) Datadog APP key. This can also be set via the DD_APP_KEY environment variable.
     * 
     */
    public Optional<Output<String>> appKey() {
        return Optional.ofNullable(this.appKey);
    }

    /**
     * The HTTP request retry back off base. Defaults to 2.
     * 
     */
    @Import(name="httpClientRetryBackoffBase", json=true)
    private @Nullable Output<Integer> httpClientRetryBackoffBase;

    /**
     * @return The HTTP request retry back off base. Defaults to 2.
     * 
     */
    public Optional<Output<Integer>> httpClientRetryBackoffBase() {
        return Optional.ofNullable(this.httpClientRetryBackoffBase);
    }

    /**
     * The HTTP request retry back off multiplier. Defaults to 2.
     * 
     */
    @Import(name="httpClientRetryBackoffMultiplier", json=true)
    private @Nullable Output<Integer> httpClientRetryBackoffMultiplier;

    /**
     * @return The HTTP request retry back off multiplier. Defaults to 2.
     * 
     */
    public Optional<Output<Integer>> httpClientRetryBackoffMultiplier() {
        return Optional.ofNullable(this.httpClientRetryBackoffMultiplier);
    }

    /**
     * Enables request retries on HTTP status codes 429 and 5xx. Defaults to `true`.
     * 
     */
    @Import(name="httpClientRetryEnabled", json=true)
    private @Nullable Output<Boolean> httpClientRetryEnabled;

    /**
     * @return Enables request retries on HTTP status codes 429 and 5xx. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> httpClientRetryEnabled() {
        return Optional.ofNullable(this.httpClientRetryEnabled);
    }

    /**
     * The HTTP request maximum retry number. Defaults to 3.
     * 
     */
    @Import(name="httpClientRetryMaxRetries", json=true)
    private @Nullable Output<Integer> httpClientRetryMaxRetries;

    /**
     * @return The HTTP request maximum retry number. Defaults to 3.
     * 
     */
    public Optional<Output<Integer>> httpClientRetryMaxRetries() {
        return Optional.ofNullable(this.httpClientRetryMaxRetries);
    }

    /**
     * The HTTP request retry timeout period. Defaults to 60 seconds.
     * 
     */
    @Import(name="httpClientRetryTimeout", json=true)
    private @Nullable Output<Integer> httpClientRetryTimeout;

    /**
     * @return The HTTP request retry timeout period. Defaults to 60 seconds.
     * 
     */
    public Optional<Output<Integer>> httpClientRetryTimeout() {
        return Optional.ofNullable(this.httpClientRetryTimeout);
    }

    /**
     * Enables validation of the provided API and APP keys during provider initialization. Default is true. When false, api_key
     * and app_key won&#39;t be checked.
     * 
     */
    @Import(name="validate", json=true)
    private @Nullable Output<Boolean> validate;

    /**
     * @return Enables validation of the provided API and APP keys during provider initialization. Default is true. When false, api_key
     * and app_key won&#39;t be checked.
     * 
     */
    public Optional<Output<Boolean>> validate() {
        return Optional.ofNullable(this.validate);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.apiKey = $.apiKey;
        this.apiUrl = $.apiUrl;
        this.appKey = $.appKey;
        this.httpClientRetryBackoffBase = $.httpClientRetryBackoffBase;
        this.httpClientRetryBackoffMultiplier = $.httpClientRetryBackoffMultiplier;
        this.httpClientRetryEnabled = $.httpClientRetryEnabled;
        this.httpClientRetryMaxRetries = $.httpClientRetryMaxRetries;
        this.httpClientRetryTimeout = $.httpClientRetryTimeout;
        this.validate = $.validate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKey (Required unless validate is false) Datadog API key. This can also be set via the DD_API_KEY environment variable.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(@Nullable Output<String> apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param apiKey (Required unless validate is false) Datadog API key. This can also be set via the DD_API_KEY environment variable.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(String apiKey) {
            return apiKey(Output.of(apiKey));
        }

        /**
         * @param apiUrl The API URL. This can also be set via the DD_HOST environment variable. Note that this URL must not end with the `/api/`
         * path. For example, `https://api.datadoghq.com/` is a correct value, while `https://api.datadoghq.com/api/` is not. And
         * if you&#39;re working with &#34;EU&#34; version of Datadog, use `https://api.datadoghq.eu/`. Other Datadog region examples:
         * `https://api.us5.datadoghq.com/`, `https://api.us3.datadoghq.com/` and `https://api.ddog-gov.com/`. See
         * https://docs.datadoghq.com/getting_started/site/ for all available regions.
         * 
         * @return builder
         * 
         */
        public Builder apiUrl(@Nullable Output<String> apiUrl) {
            $.apiUrl = apiUrl;
            return this;
        }

        /**
         * @param apiUrl The API URL. This can also be set via the DD_HOST environment variable. Note that this URL must not end with the `/api/`
         * path. For example, `https://api.datadoghq.com/` is a correct value, while `https://api.datadoghq.com/api/` is not. And
         * if you&#39;re working with &#34;EU&#34; version of Datadog, use `https://api.datadoghq.eu/`. Other Datadog region examples:
         * `https://api.us5.datadoghq.com/`, `https://api.us3.datadoghq.com/` and `https://api.ddog-gov.com/`. See
         * https://docs.datadoghq.com/getting_started/site/ for all available regions.
         * 
         * @return builder
         * 
         */
        public Builder apiUrl(String apiUrl) {
            return apiUrl(Output.of(apiUrl));
        }

        /**
         * @param appKey (Required unless validate is false) Datadog APP key. This can also be set via the DD_APP_KEY environment variable.
         * 
         * @return builder
         * 
         */
        public Builder appKey(@Nullable Output<String> appKey) {
            $.appKey = appKey;
            return this;
        }

        /**
         * @param appKey (Required unless validate is false) Datadog APP key. This can also be set via the DD_APP_KEY environment variable.
         * 
         * @return builder
         * 
         */
        public Builder appKey(String appKey) {
            return appKey(Output.of(appKey));
        }

        /**
         * @param httpClientRetryBackoffBase The HTTP request retry back off base. Defaults to 2.
         * 
         * @return builder
         * 
         */
        public Builder httpClientRetryBackoffBase(@Nullable Output<Integer> httpClientRetryBackoffBase) {
            $.httpClientRetryBackoffBase = httpClientRetryBackoffBase;
            return this;
        }

        /**
         * @param httpClientRetryBackoffBase The HTTP request retry back off base. Defaults to 2.
         * 
         * @return builder
         * 
         */
        public Builder httpClientRetryBackoffBase(Integer httpClientRetryBackoffBase) {
            return httpClientRetryBackoffBase(Output.of(httpClientRetryBackoffBase));
        }

        /**
         * @param httpClientRetryBackoffMultiplier The HTTP request retry back off multiplier. Defaults to 2.
         * 
         * @return builder
         * 
         */
        public Builder httpClientRetryBackoffMultiplier(@Nullable Output<Integer> httpClientRetryBackoffMultiplier) {
            $.httpClientRetryBackoffMultiplier = httpClientRetryBackoffMultiplier;
            return this;
        }

        /**
         * @param httpClientRetryBackoffMultiplier The HTTP request retry back off multiplier. Defaults to 2.
         * 
         * @return builder
         * 
         */
        public Builder httpClientRetryBackoffMultiplier(Integer httpClientRetryBackoffMultiplier) {
            return httpClientRetryBackoffMultiplier(Output.of(httpClientRetryBackoffMultiplier));
        }

        /**
         * @param httpClientRetryEnabled Enables request retries on HTTP status codes 429 and 5xx. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder httpClientRetryEnabled(@Nullable Output<Boolean> httpClientRetryEnabled) {
            $.httpClientRetryEnabled = httpClientRetryEnabled;
            return this;
        }

        /**
         * @param httpClientRetryEnabled Enables request retries on HTTP status codes 429 and 5xx. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder httpClientRetryEnabled(Boolean httpClientRetryEnabled) {
            return httpClientRetryEnabled(Output.of(httpClientRetryEnabled));
        }

        /**
         * @param httpClientRetryMaxRetries The HTTP request maximum retry number. Defaults to 3.
         * 
         * @return builder
         * 
         */
        public Builder httpClientRetryMaxRetries(@Nullable Output<Integer> httpClientRetryMaxRetries) {
            $.httpClientRetryMaxRetries = httpClientRetryMaxRetries;
            return this;
        }

        /**
         * @param httpClientRetryMaxRetries The HTTP request maximum retry number. Defaults to 3.
         * 
         * @return builder
         * 
         */
        public Builder httpClientRetryMaxRetries(Integer httpClientRetryMaxRetries) {
            return httpClientRetryMaxRetries(Output.of(httpClientRetryMaxRetries));
        }

        /**
         * @param httpClientRetryTimeout The HTTP request retry timeout period. Defaults to 60 seconds.
         * 
         * @return builder
         * 
         */
        public Builder httpClientRetryTimeout(@Nullable Output<Integer> httpClientRetryTimeout) {
            $.httpClientRetryTimeout = httpClientRetryTimeout;
            return this;
        }

        /**
         * @param httpClientRetryTimeout The HTTP request retry timeout period. Defaults to 60 seconds.
         * 
         * @return builder
         * 
         */
        public Builder httpClientRetryTimeout(Integer httpClientRetryTimeout) {
            return httpClientRetryTimeout(Output.of(httpClientRetryTimeout));
        }

        /**
         * @param validate Enables validation of the provided API and APP keys during provider initialization. Default is true. When false, api_key
         * and app_key won&#39;t be checked.
         * 
         * @return builder
         * 
         */
        public Builder validate(@Nullable Output<Boolean> validate) {
            $.validate = validate;
            return this;
        }

        /**
         * @param validate Enables validation of the provided API and APP keys during provider initialization. Default is true. When false, api_key
         * and app_key won&#39;t be checked.
         * 
         * @return builder
         * 
         */
        public Builder validate(Boolean validate) {
            return validate(Output.of(validate));
        }

        public ProviderArgs build() {
            return $;
        }
    }

}
