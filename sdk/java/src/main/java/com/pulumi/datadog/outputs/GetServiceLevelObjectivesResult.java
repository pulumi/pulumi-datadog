// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.GetServiceLevelObjectivesSlo;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetServiceLevelObjectivesResult {
    /**
     * @return Throw an error if no results are found. Defaults to `true`.
     * 
     */
    private @Nullable Boolean errorOnEmptyResult;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return An array of SLO IDs to limit the search.
     * 
     */
    private @Nullable List<String> ids;
    /**
     * @return Filter results based on SLO numerator and denominator.
     * 
     */
    private @Nullable String metricsQuery;
    /**
     * @return Filter results based on SLO names.
     * 
     */
    private @Nullable String nameQuery;
    /**
     * @return The query string to filter results based on SLO names. Some examples of queries include service:\n\n and \n\n.
     * 
     */
    private @Nullable String query;
    /**
     * @return List of SLOs
     * 
     */
    private List<GetServiceLevelObjectivesSlo> slos;
    /**
     * @return Filter results based on a single SLO tag.
     * 
     */
    private @Nullable String tagsQuery;

    private GetServiceLevelObjectivesResult() {}
    /**
     * @return Throw an error if no results are found. Defaults to `true`.
     * 
     */
    public Optional<Boolean> errorOnEmptyResult() {
        return Optional.ofNullable(this.errorOnEmptyResult);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An array of SLO IDs to limit the search.
     * 
     */
    public List<String> ids() {
        return this.ids == null ? List.of() : this.ids;
    }
    /**
     * @return Filter results based on SLO numerator and denominator.
     * 
     */
    public Optional<String> metricsQuery() {
        return Optional.ofNullable(this.metricsQuery);
    }
    /**
     * @return Filter results based on SLO names.
     * 
     */
    public Optional<String> nameQuery() {
        return Optional.ofNullable(this.nameQuery);
    }
    /**
     * @return The query string to filter results based on SLO names. Some examples of queries include service:\n\n and \n\n.
     * 
     */
    public Optional<String> query() {
        return Optional.ofNullable(this.query);
    }
    /**
     * @return List of SLOs
     * 
     */
    public List<GetServiceLevelObjectivesSlo> slos() {
        return this.slos;
    }
    /**
     * @return Filter results based on a single SLO tag.
     * 
     */
    public Optional<String> tagsQuery() {
        return Optional.ofNullable(this.tagsQuery);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceLevelObjectivesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean errorOnEmptyResult;
        private String id;
        private @Nullable List<String> ids;
        private @Nullable String metricsQuery;
        private @Nullable String nameQuery;
        private @Nullable String query;
        private List<GetServiceLevelObjectivesSlo> slos;
        private @Nullable String tagsQuery;
        public Builder() {}
        public Builder(GetServiceLevelObjectivesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.errorOnEmptyResult = defaults.errorOnEmptyResult;
    	      this.id = defaults.id;
    	      this.ids = defaults.ids;
    	      this.metricsQuery = defaults.metricsQuery;
    	      this.nameQuery = defaults.nameQuery;
    	      this.query = defaults.query;
    	      this.slos = defaults.slos;
    	      this.tagsQuery = defaults.tagsQuery;
        }

        @CustomType.Setter
        public Builder errorOnEmptyResult(@Nullable Boolean errorOnEmptyResult) {

            this.errorOnEmptyResult = errorOnEmptyResult;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceLevelObjectivesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ids(@Nullable List<String> ids) {

            this.ids = ids;
            return this;
        }
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }
        @CustomType.Setter
        public Builder metricsQuery(@Nullable String metricsQuery) {

            this.metricsQuery = metricsQuery;
            return this;
        }
        @CustomType.Setter
        public Builder nameQuery(@Nullable String nameQuery) {

            this.nameQuery = nameQuery;
            return this;
        }
        @CustomType.Setter
        public Builder query(@Nullable String query) {

            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder slos(List<GetServiceLevelObjectivesSlo> slos) {
            if (slos == null) {
              throw new MissingRequiredPropertyException("GetServiceLevelObjectivesResult", "slos");
            }
            this.slos = slos;
            return this;
        }
        public Builder slos(GetServiceLevelObjectivesSlo... slos) {
            return slos(List.of(slos));
        }
        @CustomType.Setter
        public Builder tagsQuery(@Nullable String tagsQuery) {

            this.tagsQuery = tagsQuery;
            return this;
        }
        public GetServiceLevelObjectivesResult build() {
            final var _resultValue = new GetServiceLevelObjectivesResult();
            _resultValue.errorOnEmptyResult = errorOnEmptyResult;
            _resultValue.id = id;
            _resultValue.ids = ids;
            _resultValue.metricsQuery = metricsQuery;
            _resultValue.nameQuery = nameQuery;
            _resultValue.query = query;
            _resultValue.slos = slos;
            _resultValue.tagsQuery = tagsQuery;
            return _resultValue;
        }
    }
}
