// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.SecurityMonitoringFilterExclusionFilterArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityMonitoringFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityMonitoringFilterArgs Empty = new SecurityMonitoringFilterArgs();

    /**
     * Exclusion filters to exclude some logs from the security filter.
     * 
     */
    @Import(name="exclusionFilters")
    private @Nullable Output<List<SecurityMonitoringFilterExclusionFilterArgs>> exclusionFilters;

    /**
     * @return Exclusion filters to exclude some logs from the security filter.
     * 
     */
    public Optional<Output<List<SecurityMonitoringFilterExclusionFilterArgs>>> exclusionFilters() {
        return Optional.ofNullable(this.exclusionFilters);
    }

    /**
     * The filtered data type. Valid values are `logs`.
     * 
     */
    @Import(name="filteredDataType")
    private @Nullable Output<String> filteredDataType;

    /**
     * @return The filtered data type. Valid values are `logs`.
     * 
     */
    public Optional<Output<String>> filteredDataType() {
        return Optional.ofNullable(this.filteredDataType);
    }

    /**
     * Whether the security filter is enabled.
     * 
     */
    @Import(name="isEnabled", required=true)
    private Output<Boolean> isEnabled;

    /**
     * @return Whether the security filter is enabled.
     * 
     */
    public Output<Boolean> isEnabled() {
        return this.isEnabled;
    }

    /**
     * Exclusion filter name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Exclusion filter name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Exclusion filter query. Logs that match this query are excluded from the security filter.
     * 
     */
    @Import(name="query", required=true)
    private Output<String> query;

    /**
     * @return Exclusion filter query. Logs that match this query are excluded from the security filter.
     * 
     */
    public Output<String> query() {
        return this.query;
    }

    private SecurityMonitoringFilterArgs() {}

    private SecurityMonitoringFilterArgs(SecurityMonitoringFilterArgs $) {
        this.exclusionFilters = $.exclusionFilters;
        this.filteredDataType = $.filteredDataType;
        this.isEnabled = $.isEnabled;
        this.name = $.name;
        this.query = $.query;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityMonitoringFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityMonitoringFilterArgs $;

        public Builder() {
            $ = new SecurityMonitoringFilterArgs();
        }

        public Builder(SecurityMonitoringFilterArgs defaults) {
            $ = new SecurityMonitoringFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param exclusionFilters Exclusion filters to exclude some logs from the security filter.
         * 
         * @return builder
         * 
         */
        public Builder exclusionFilters(@Nullable Output<List<SecurityMonitoringFilterExclusionFilterArgs>> exclusionFilters) {
            $.exclusionFilters = exclusionFilters;
            return this;
        }

        /**
         * @param exclusionFilters Exclusion filters to exclude some logs from the security filter.
         * 
         * @return builder
         * 
         */
        public Builder exclusionFilters(List<SecurityMonitoringFilterExclusionFilterArgs> exclusionFilters) {
            return exclusionFilters(Output.of(exclusionFilters));
        }

        /**
         * @param exclusionFilters Exclusion filters to exclude some logs from the security filter.
         * 
         * @return builder
         * 
         */
        public Builder exclusionFilters(SecurityMonitoringFilterExclusionFilterArgs... exclusionFilters) {
            return exclusionFilters(List.of(exclusionFilters));
        }

        /**
         * @param filteredDataType The filtered data type. Valid values are `logs`.
         * 
         * @return builder
         * 
         */
        public Builder filteredDataType(@Nullable Output<String> filteredDataType) {
            $.filteredDataType = filteredDataType;
            return this;
        }

        /**
         * @param filteredDataType The filtered data type. Valid values are `logs`.
         * 
         * @return builder
         * 
         */
        public Builder filteredDataType(String filteredDataType) {
            return filteredDataType(Output.of(filteredDataType));
        }

        /**
         * @param isEnabled Whether the security filter is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled Whether the security filter is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param name Exclusion filter name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Exclusion filter name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param query Exclusion filter query. Logs that match this query are excluded from the security filter.
         * 
         * @return builder
         * 
         */
        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query Exclusion filter query. Logs that match this query are excluded from the security filter.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        public SecurityMonitoringFilterArgs build() {
            if ($.isEnabled == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringFilterArgs", "isEnabled");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringFilterArgs", "name");
            }
            if ($.query == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringFilterArgs", "query");
            }
            return $;
        }
    }

}
