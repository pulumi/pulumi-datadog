// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LogsArchiveS3Archive {
    /**
     * @return Your AWS account id.
     * 
     */
    private String accountId;
    /**
     * @return Name of your s3 bucket.
     * 
     */
    private String bucket;
    /**
     * @return The AWS KMS encryption key.
     * 
     */
    private @Nullable String encryptionKey;
    /**
     * @return The type of encryption on your archive. Valid values are `NO_OVERRIDE`, `SSE_S3`, `SSE_KMS`. Defaults to `&#34;NO_OVERRIDE&#34;`.
     * 
     */
    private @Nullable String encryptionType;
    /**
     * @return Path where the archive is stored.
     * 
     */
    private @Nullable String path;
    /**
     * @return Your AWS role name
     * 
     */
    private String roleName;
    /**
     * @return The AWS S3 storage class used to upload the logs. Valid values are `STANDARD`, `STANDARD_IA`, `ONEZONE_IA`, `INTELLIGENT_TIERING`, `GLACIER_IR`. Defaults to `&#34;STANDARD&#34;`.
     * 
     */
    private @Nullable String storageClass;

    private LogsArchiveS3Archive() {}
    /**
     * @return Your AWS account id.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Name of your s3 bucket.
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return The AWS KMS encryption key.
     * 
     */
    public Optional<String> encryptionKey() {
        return Optional.ofNullable(this.encryptionKey);
    }
    /**
     * @return The type of encryption on your archive. Valid values are `NO_OVERRIDE`, `SSE_S3`, `SSE_KMS`. Defaults to `&#34;NO_OVERRIDE&#34;`.
     * 
     */
    public Optional<String> encryptionType() {
        return Optional.ofNullable(this.encryptionType);
    }
    /**
     * @return Path where the archive is stored.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return Your AWS role name
     * 
     */
    public String roleName() {
        return this.roleName;
    }
    /**
     * @return The AWS S3 storage class used to upload the logs. Valid values are `STANDARD`, `STANDARD_IA`, `ONEZONE_IA`, `INTELLIGENT_TIERING`, `GLACIER_IR`. Defaults to `&#34;STANDARD&#34;`.
     * 
     */
    public Optional<String> storageClass() {
        return Optional.ofNullable(this.storageClass);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogsArchiveS3Archive defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String bucket;
        private @Nullable String encryptionKey;
        private @Nullable String encryptionType;
        private @Nullable String path;
        private String roleName;
        private @Nullable String storageClass;
        public Builder() {}
        public Builder(LogsArchiveS3Archive defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.bucket = defaults.bucket;
    	      this.encryptionKey = defaults.encryptionKey;
    	      this.encryptionType = defaults.encryptionType;
    	      this.path = defaults.path;
    	      this.roleName = defaults.roleName;
    	      this.storageClass = defaults.storageClass;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("LogsArchiveS3Archive", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("LogsArchiveS3Archive", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionKey(@Nullable String encryptionKey) {

            this.encryptionKey = encryptionKey;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionType(@Nullable String encryptionType) {

            this.encryptionType = encryptionType;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder roleName(String roleName) {
            if (roleName == null) {
              throw new MissingRequiredPropertyException("LogsArchiveS3Archive", "roleName");
            }
            this.roleName = roleName;
            return this;
        }
        @CustomType.Setter
        public Builder storageClass(@Nullable String storageClass) {

            this.storageClass = storageClass;
            return this;
        }
        public LogsArchiveS3Archive build() {
            final var _resultValue = new LogsArchiveS3Archive();
            _resultValue.accountId = accountId;
            _resultValue.bucket = bucket;
            _resultValue.encryptionKey = encryptionKey;
            _resultValue.encryptionType = encryptionType;
            _resultValue.path = path;
            _resultValue.roleName = roleName;
            _resultValue.storageClass = storageClass;
            return _resultValue;
        }
    }
}
