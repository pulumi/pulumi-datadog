// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class LogsCustomPipelineProcessorGrokParserGrokArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogsCustomPipelineProcessorGrokParserGrokArgs Empty = new LogsCustomPipelineProcessorGrokParserGrokArgs();

    /**
     * Match rules for your grok parser.
     * 
     */
    @Import(name="matchRules", required=true)
    private Output<String> matchRules;

    /**
     * @return Match rules for your grok parser.
     * 
     */
    public Output<String> matchRules() {
        return this.matchRules;
    }

    /**
     * Support rules for your grok parser.
     * 
     */
    @Import(name="supportRules", required=true)
    private Output<String> supportRules;

    /**
     * @return Support rules for your grok parser.
     * 
     */
    public Output<String> supportRules() {
        return this.supportRules;
    }

    private LogsCustomPipelineProcessorGrokParserGrokArgs() {}

    private LogsCustomPipelineProcessorGrokParserGrokArgs(LogsCustomPipelineProcessorGrokParserGrokArgs $) {
        this.matchRules = $.matchRules;
        this.supportRules = $.supportRules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogsCustomPipelineProcessorGrokParserGrokArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogsCustomPipelineProcessorGrokParserGrokArgs $;

        public Builder() {
            $ = new LogsCustomPipelineProcessorGrokParserGrokArgs();
        }

        public Builder(LogsCustomPipelineProcessorGrokParserGrokArgs defaults) {
            $ = new LogsCustomPipelineProcessorGrokParserGrokArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param matchRules Match rules for your grok parser.
         * 
         * @return builder
         * 
         */
        public Builder matchRules(Output<String> matchRules) {
            $.matchRules = matchRules;
            return this;
        }

        /**
         * @param matchRules Match rules for your grok parser.
         * 
         * @return builder
         * 
         */
        public Builder matchRules(String matchRules) {
            return matchRules(Output.of(matchRules));
        }

        /**
         * @param supportRules Support rules for your grok parser.
         * 
         * @return builder
         * 
         */
        public Builder supportRules(Output<String> supportRules) {
            $.supportRules = supportRules;
            return this;
        }

        /**
         * @param supportRules Support rules for your grok parser.
         * 
         * @return builder
         * 
         */
        public Builder supportRules(String supportRules) {
            return supportRules(Output.of(supportRules));
        }

        public LogsCustomPipelineProcessorGrokParserGrokArgs build() {
            if ($.matchRules == null) {
                throw new MissingRequiredPropertyException("LogsCustomPipelineProcessorGrokParserGrokArgs", "matchRules");
            }
            if ($.supportRules == null) {
                throw new MissingRequiredPropertyException("LogsCustomPipelineProcessorGrokParserGrokArgs", "supportRules");
            }
            return $;
        }
    }

}
