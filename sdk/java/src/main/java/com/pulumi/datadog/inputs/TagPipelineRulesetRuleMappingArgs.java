// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagPipelineRulesetRuleMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final TagPipelineRulesetRuleMappingArgs Empty = new TagPipelineRulesetRuleMappingArgs();

    /**
     * The destination key for the mapping.
     * 
     */
    @Import(name="destinationKey")
    private @Nullable Output<String> destinationKey;

    /**
     * @return The destination key for the mapping.
     * 
     */
    public Optional<Output<String>> destinationKey() {
        return Optional.ofNullable(this.destinationKey);
    }

    /**
     * Whether to apply the mapping only if the destination key doesn&#39;t exist.
     * 
     */
    @Import(name="ifNotExists")
    private @Nullable Output<Boolean> ifNotExists;

    /**
     * @return Whether to apply the mapping only if the destination key doesn&#39;t exist.
     * 
     */
    public Optional<Output<Boolean>> ifNotExists() {
        return Optional.ofNullable(this.ifNotExists);
    }

    /**
     * The source keys for the mapping.
     * 
     */
    @Import(name="sourceKeys")
    private @Nullable Output<List<String>> sourceKeys;

    /**
     * @return The source keys for the mapping.
     * 
     */
    public Optional<Output<List<String>>> sourceKeys() {
        return Optional.ofNullable(this.sourceKeys);
    }

    private TagPipelineRulesetRuleMappingArgs() {}

    private TagPipelineRulesetRuleMappingArgs(TagPipelineRulesetRuleMappingArgs $) {
        this.destinationKey = $.destinationKey;
        this.ifNotExists = $.ifNotExists;
        this.sourceKeys = $.sourceKeys;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagPipelineRulesetRuleMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagPipelineRulesetRuleMappingArgs $;

        public Builder() {
            $ = new TagPipelineRulesetRuleMappingArgs();
        }

        public Builder(TagPipelineRulesetRuleMappingArgs defaults) {
            $ = new TagPipelineRulesetRuleMappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationKey The destination key for the mapping.
         * 
         * @return builder
         * 
         */
        public Builder destinationKey(@Nullable Output<String> destinationKey) {
            $.destinationKey = destinationKey;
            return this;
        }

        /**
         * @param destinationKey The destination key for the mapping.
         * 
         * @return builder
         * 
         */
        public Builder destinationKey(String destinationKey) {
            return destinationKey(Output.of(destinationKey));
        }

        /**
         * @param ifNotExists Whether to apply the mapping only if the destination key doesn&#39;t exist.
         * 
         * @return builder
         * 
         */
        public Builder ifNotExists(@Nullable Output<Boolean> ifNotExists) {
            $.ifNotExists = ifNotExists;
            return this;
        }

        /**
         * @param ifNotExists Whether to apply the mapping only if the destination key doesn&#39;t exist.
         * 
         * @return builder
         * 
         */
        public Builder ifNotExists(Boolean ifNotExists) {
            return ifNotExists(Output.of(ifNotExists));
        }

        /**
         * @param sourceKeys The source keys for the mapping.
         * 
         * @return builder
         * 
         */
        public Builder sourceKeys(@Nullable Output<List<String>> sourceKeys) {
            $.sourceKeys = sourceKeys;
            return this;
        }

        /**
         * @param sourceKeys The source keys for the mapping.
         * 
         * @return builder
         * 
         */
        public Builder sourceKeys(List<String> sourceKeys) {
            return sourceKeys(Output.of(sourceKeys));
        }

        /**
         * @param sourceKeys The source keys for the mapping.
         * 
         * @return builder
         * 
         */
        public Builder sourceKeys(String... sourceKeys) {
            return sourceKeys(List.of(sourceKeys));
        }

        public TagPipelineRulesetRuleMappingArgs build() {
            return $;
        }
    }

}
