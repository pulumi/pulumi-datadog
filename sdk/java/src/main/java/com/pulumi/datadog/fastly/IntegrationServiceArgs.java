// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationServiceArgs Empty = new IntegrationServiceArgs();

    /**
     * Fastly Account id.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Fastly Account id.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The ID of the Fastly service.
     * 
     */
    @Import(name="serviceId", required=true)
    private Output<String> serviceId;

    /**
     * @return The ID of the Fastly service.
     * 
     */
    public Output<String> serviceId() {
        return this.serviceId;
    }

    /**
     * A list of tags for the Fastly service.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of tags for the Fastly service.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private IntegrationServiceArgs() {}

    private IntegrationServiceArgs(IntegrationServiceArgs $) {
        this.accountId = $.accountId;
        this.serviceId = $.serviceId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationServiceArgs $;

        public Builder() {
            $ = new IntegrationServiceArgs();
        }

        public Builder(IntegrationServiceArgs defaults) {
            $ = new IntegrationServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Fastly Account id.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Fastly Account id.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param serviceId The ID of the Fastly service.
         * 
         * @return builder
         * 
         */
        public Builder serviceId(Output<String> serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        /**
         * @param serviceId The ID of the Fastly service.
         * 
         * @return builder
         * 
         */
        public Builder serviceId(String serviceId) {
            return serviceId(Output.of(serviceId));
        }

        /**
         * @param tags A list of tags for the Fastly service.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags for the Fastly service.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of tags for the Fastly service.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public IntegrationServiceArgs build() {
            if ($.serviceId == null) {
                throw new MissingRequiredPropertyException("IntegrationServiceArgs", "serviceId");
            }
            return $;
        }
    }

}
