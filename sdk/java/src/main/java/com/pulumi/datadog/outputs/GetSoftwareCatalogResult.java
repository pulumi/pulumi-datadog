// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.GetSoftwareCatalogEntity;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSoftwareCatalogResult {
    /**
     * @return List of entities
     * 
     */
    private List<GetSoftwareCatalogEntity> entities;
    /**
     * @return Filter entities by excluding snapshotted entities.
     * 
     */
    private @Nullable String filterExcludeSnapshot;
    /**
     * @return Filter entities by UUID.
     * 
     */
    private @Nullable String filterId;
    /**
     * @return Filter entities by kind.
     * 
     */
    private @Nullable String filterKind;
    /**
     * @return Filter entities by name.
     * 
     */
    private @Nullable String filterName;
    /**
     * @return Filter entities by owner.
     * 
     */
    private @Nullable String filterOwner;
    /**
     * @return Filter entities by reference.
     * 
     */
    private @Nullable String filterRef;
    /**
     * @return Filter entities by relation type.
     * 
     */
    private @Nullable String filterRelationType;
    /**
     * @return The ID of this resource.
     * 
     */
    private String id;

    private GetSoftwareCatalogResult() {}
    /**
     * @return List of entities
     * 
     */
    public List<GetSoftwareCatalogEntity> entities() {
        return this.entities;
    }
    /**
     * @return Filter entities by excluding snapshotted entities.
     * 
     */
    public Optional<String> filterExcludeSnapshot() {
        return Optional.ofNullable(this.filterExcludeSnapshot);
    }
    /**
     * @return Filter entities by UUID.
     * 
     */
    public Optional<String> filterId() {
        return Optional.ofNullable(this.filterId);
    }
    /**
     * @return Filter entities by kind.
     * 
     */
    public Optional<String> filterKind() {
        return Optional.ofNullable(this.filterKind);
    }
    /**
     * @return Filter entities by name.
     * 
     */
    public Optional<String> filterName() {
        return Optional.ofNullable(this.filterName);
    }
    /**
     * @return Filter entities by owner.
     * 
     */
    public Optional<String> filterOwner() {
        return Optional.ofNullable(this.filterOwner);
    }
    /**
     * @return Filter entities by reference.
     * 
     */
    public Optional<String> filterRef() {
        return Optional.ofNullable(this.filterRef);
    }
    /**
     * @return Filter entities by relation type.
     * 
     */
    public Optional<String> filterRelationType() {
        return Optional.ofNullable(this.filterRelationType);
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSoftwareCatalogResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetSoftwareCatalogEntity> entities;
        private @Nullable String filterExcludeSnapshot;
        private @Nullable String filterId;
        private @Nullable String filterKind;
        private @Nullable String filterName;
        private @Nullable String filterOwner;
        private @Nullable String filterRef;
        private @Nullable String filterRelationType;
        private String id;
        public Builder() {}
        public Builder(GetSoftwareCatalogResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.entities = defaults.entities;
    	      this.filterExcludeSnapshot = defaults.filterExcludeSnapshot;
    	      this.filterId = defaults.filterId;
    	      this.filterKind = defaults.filterKind;
    	      this.filterName = defaults.filterName;
    	      this.filterOwner = defaults.filterOwner;
    	      this.filterRef = defaults.filterRef;
    	      this.filterRelationType = defaults.filterRelationType;
    	      this.id = defaults.id;
        }

        @CustomType.Setter
        public Builder entities(List<GetSoftwareCatalogEntity> entities) {
            if (entities == null) {
              throw new MissingRequiredPropertyException("GetSoftwareCatalogResult", "entities");
            }
            this.entities = entities;
            return this;
        }
        public Builder entities(GetSoftwareCatalogEntity... entities) {
            return entities(List.of(entities));
        }
        @CustomType.Setter
        public Builder filterExcludeSnapshot(@Nullable String filterExcludeSnapshot) {

            this.filterExcludeSnapshot = filterExcludeSnapshot;
            return this;
        }
        @CustomType.Setter
        public Builder filterId(@Nullable String filterId) {

            this.filterId = filterId;
            return this;
        }
        @CustomType.Setter
        public Builder filterKind(@Nullable String filterKind) {

            this.filterKind = filterKind;
            return this;
        }
        @CustomType.Setter
        public Builder filterName(@Nullable String filterName) {

            this.filterName = filterName;
            return this;
        }
        @CustomType.Setter
        public Builder filterOwner(@Nullable String filterOwner) {

            this.filterOwner = filterOwner;
            return this;
        }
        @CustomType.Setter
        public Builder filterRef(@Nullable String filterRef) {

            this.filterRef = filterRef;
            return this;
        }
        @CustomType.Setter
        public Builder filterRelationType(@Nullable String filterRelationType) {

            this.filterRelationType = filterRelationType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSoftwareCatalogResult", "id");
            }
            this.id = id;
            return this;
        }
        public GetSoftwareCatalogResult build() {
            final var _resultValue = new GetSoftwareCatalogResult();
            _resultValue.entities = entities;
            _resultValue.filterExcludeSnapshot = filterExcludeSnapshot;
            _resultValue.filterId = filterId;
            _resultValue.filterKind = filterKind;
            _resultValue.filterName = filterName;
            _resultValue.filterOwner = filterOwner;
            _resultValue.filterRef = filterRef;
            _resultValue.filterRelationType = filterRelationType;
            _resultValue.id = id;
            return _resultValue;
        }
    }
}
