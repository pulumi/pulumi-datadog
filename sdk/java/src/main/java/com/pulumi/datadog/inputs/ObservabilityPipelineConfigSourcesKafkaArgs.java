// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesKafkaLibrdkafkaOptionArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesKafkaSaslArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesKafkaTlsArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigSourcesKafkaArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigSourcesKafkaArgs Empty = new ObservabilityPipelineConfigSourcesKafkaArgs();

    /**
     * The Kafka consumer group ID.
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return The Kafka consumer group ID.
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * The unique ID of the source.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique ID of the source.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Advanced librdkafka client configuration options.
     * 
     */
    @Import(name="librdkafkaOptions")
    private @Nullable Output<List<ObservabilityPipelineConfigSourcesKafkaLibrdkafkaOptionArgs>> librdkafkaOptions;

    /**
     * @return Advanced librdkafka client configuration options.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigSourcesKafkaLibrdkafkaOptionArgs>>> librdkafkaOptions() {
        return Optional.ofNullable(this.librdkafkaOptions);
    }

    /**
     * SASL authentication settings.
     * 
     */
    @Import(name="sasl")
    private @Nullable Output<ObservabilityPipelineConfigSourcesKafkaSaslArgs> sasl;

    /**
     * @return SASL authentication settings.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigSourcesKafkaSaslArgs>> sasl() {
        return Optional.ofNullable(this.sasl);
    }

    /**
     * Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    @Import(name="tls")
    private @Nullable Output<ObservabilityPipelineConfigSourcesKafkaTlsArgs> tls;

    /**
     * @return Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigSourcesKafkaTlsArgs>> tls() {
        return Optional.ofNullable(this.tls);
    }

    /**
     * A list of Kafka topic names to subscribe to. The source ingests messages from each topic specified.
     * 
     */
    @Import(name="topics", required=true)
    private Output<List<String>> topics;

    /**
     * @return A list of Kafka topic names to subscribe to. The source ingests messages from each topic specified.
     * 
     */
    public Output<List<String>> topics() {
        return this.topics;
    }

    private ObservabilityPipelineConfigSourcesKafkaArgs() {}

    private ObservabilityPipelineConfigSourcesKafkaArgs(ObservabilityPipelineConfigSourcesKafkaArgs $) {
        this.groupId = $.groupId;
        this.id = $.id;
        this.librdkafkaOptions = $.librdkafkaOptions;
        this.sasl = $.sasl;
        this.tls = $.tls;
        this.topics = $.topics;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigSourcesKafkaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigSourcesKafkaArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigSourcesKafkaArgs();
        }

        public Builder(ObservabilityPipelineConfigSourcesKafkaArgs defaults) {
            $ = new ObservabilityPipelineConfigSourcesKafkaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupId The Kafka consumer group ID.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The Kafka consumer group ID.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param id The unique ID of the source.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique ID of the source.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param librdkafkaOptions Advanced librdkafka client configuration options.
         * 
         * @return builder
         * 
         */
        public Builder librdkafkaOptions(@Nullable Output<List<ObservabilityPipelineConfigSourcesKafkaLibrdkafkaOptionArgs>> librdkafkaOptions) {
            $.librdkafkaOptions = librdkafkaOptions;
            return this;
        }

        /**
         * @param librdkafkaOptions Advanced librdkafka client configuration options.
         * 
         * @return builder
         * 
         */
        public Builder librdkafkaOptions(List<ObservabilityPipelineConfigSourcesKafkaLibrdkafkaOptionArgs> librdkafkaOptions) {
            return librdkafkaOptions(Output.of(librdkafkaOptions));
        }

        /**
         * @param librdkafkaOptions Advanced librdkafka client configuration options.
         * 
         * @return builder
         * 
         */
        public Builder librdkafkaOptions(ObservabilityPipelineConfigSourcesKafkaLibrdkafkaOptionArgs... librdkafkaOptions) {
            return librdkafkaOptions(List.of(librdkafkaOptions));
        }

        /**
         * @param sasl SASL authentication settings.
         * 
         * @return builder
         * 
         */
        public Builder sasl(@Nullable Output<ObservabilityPipelineConfigSourcesKafkaSaslArgs> sasl) {
            $.sasl = sasl;
            return this;
        }

        /**
         * @param sasl SASL authentication settings.
         * 
         * @return builder
         * 
         */
        public Builder sasl(ObservabilityPipelineConfigSourcesKafkaSaslArgs sasl) {
            return sasl(Output.of(sasl));
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(@Nullable Output<ObservabilityPipelineConfigSourcesKafkaTlsArgs> tls) {
            $.tls = tls;
            return this;
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(ObservabilityPipelineConfigSourcesKafkaTlsArgs tls) {
            return tls(Output.of(tls));
        }

        /**
         * @param topics A list of Kafka topic names to subscribe to. The source ingests messages from each topic specified.
         * 
         * @return builder
         * 
         */
        public Builder topics(Output<List<String>> topics) {
            $.topics = topics;
            return this;
        }

        /**
         * @param topics A list of Kafka topic names to subscribe to. The source ingests messages from each topic specified.
         * 
         * @return builder
         * 
         */
        public Builder topics(List<String> topics) {
            return topics(Output.of(topics));
        }

        /**
         * @param topics A list of Kafka topic names to subscribe to. The source ingests messages from each topic specified.
         * 
         * @return builder
         * 
         */
        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }

        public ObservabilityPipelineConfigSourcesKafkaArgs build() {
            if ($.groupId == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigSourcesKafkaArgs", "groupId");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigSourcesKafkaArgs", "id");
            }
            if ($.topics == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigSourcesKafkaArgs", "topics");
            }
            return $;
        }
    }

}
