// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigDestinationsSocketFramingArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigDestinationsSocketTlsArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigDestinationsSocketArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigDestinationsSocketArgs Empty = new ObservabilityPipelineConfigDestinationsSocketArgs();

    /**
     * Encoding format for log events. Valid values are `json`, `raw_message`.
     * 
     */
    @Import(name="encoding", required=true)
    private Output<String> encoding;

    /**
     * @return Encoding format for log events. Valid values are `json`, `raw_message`.
     * 
     */
    public Output<String> encoding() {
        return this.encoding;
    }

    /**
     * Defines the framing method for outgoing messages.
     * 
     */
    @Import(name="framing")
    private @Nullable Output<ObservabilityPipelineConfigDestinationsSocketFramingArgs> framing;

    /**
     * @return Defines the framing method for outgoing messages.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigDestinationsSocketFramingArgs>> framing() {
        return Optional.ofNullable(this.framing);
    }

    /**
     * The unique identifier for this destination.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique identifier for this destination.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * A list of component IDs whose output is used as the `input` for this destination.
     * 
     */
    @Import(name="inputs", required=true)
    private Output<List<String>> inputs;

    /**
     * @return A list of component IDs whose output is used as the `input` for this destination.
     * 
     */
    public Output<List<String>> inputs() {
        return this.inputs;
    }

    /**
     * The protocol used to send logs. Valid values are `tcp`, `udp`.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return The protocol used to send logs. Valid values are `tcp`, `udp`.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    @Import(name="tls")
    private @Nullable Output<ObservabilityPipelineConfigDestinationsSocketTlsArgs> tls;

    /**
     * @return Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigDestinationsSocketTlsArgs>> tls() {
        return Optional.ofNullable(this.tls);
    }

    private ObservabilityPipelineConfigDestinationsSocketArgs() {}

    private ObservabilityPipelineConfigDestinationsSocketArgs(ObservabilityPipelineConfigDestinationsSocketArgs $) {
        this.encoding = $.encoding;
        this.framing = $.framing;
        this.id = $.id;
        this.inputs = $.inputs;
        this.mode = $.mode;
        this.tls = $.tls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigDestinationsSocketArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigDestinationsSocketArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigDestinationsSocketArgs();
        }

        public Builder(ObservabilityPipelineConfigDestinationsSocketArgs defaults) {
            $ = new ObservabilityPipelineConfigDestinationsSocketArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param encoding Encoding format for log events. Valid values are `json`, `raw_message`.
         * 
         * @return builder
         * 
         */
        public Builder encoding(Output<String> encoding) {
            $.encoding = encoding;
            return this;
        }

        /**
         * @param encoding Encoding format for log events. Valid values are `json`, `raw_message`.
         * 
         * @return builder
         * 
         */
        public Builder encoding(String encoding) {
            return encoding(Output.of(encoding));
        }

        /**
         * @param framing Defines the framing method for outgoing messages.
         * 
         * @return builder
         * 
         */
        public Builder framing(@Nullable Output<ObservabilityPipelineConfigDestinationsSocketFramingArgs> framing) {
            $.framing = framing;
            return this;
        }

        /**
         * @param framing Defines the framing method for outgoing messages.
         * 
         * @return builder
         * 
         */
        public Builder framing(ObservabilityPipelineConfigDestinationsSocketFramingArgs framing) {
            return framing(Output.of(framing));
        }

        /**
         * @param id The unique identifier for this destination.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier for this destination.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this destination.
         * 
         * @return builder
         * 
         */
        public Builder inputs(Output<List<String>> inputs) {
            $.inputs = inputs;
            return this;
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this destination.
         * 
         * @return builder
         * 
         */
        public Builder inputs(List<String> inputs) {
            return inputs(Output.of(inputs));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this destination.
         * 
         * @return builder
         * 
         */
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }

        /**
         * @param mode The protocol used to send logs. Valid values are `tcp`, `udp`.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The protocol used to send logs. Valid values are `tcp`, `udp`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(@Nullable Output<ObservabilityPipelineConfigDestinationsSocketTlsArgs> tls) {
            $.tls = tls;
            return this;
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(ObservabilityPipelineConfigDestinationsSocketTlsArgs tls) {
            return tls(Output.of(tls));
        }

        public ObservabilityPipelineConfigDestinationsSocketArgs build() {
            if ($.encoding == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsSocketArgs", "encoding");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsSocketArgs", "id");
            }
            if ($.inputs == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsSocketArgs", "inputs");
            }
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsSocketArgs", "mode");
            }
            return $;
        }
    }

}
