// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.GetMonitorsMonitor;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMonitorsResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A list of monitor tags to limit the search. This filters on the tags set on the monitor itself.
     * 
     */
    private @Nullable List<String> monitorTagsFilters;
    /**
     * @return List of monitors
     * 
     */
    private List<GetMonitorsMonitor> monitors;
    /**
     * @return A monitor name to limit the search.
     * 
     */
    private @Nullable String nameFilter;
    /**
     * @return A list of tags to limit the search. This filters on the monitor scope.
     * 
     */
    private @Nullable List<String> tagsFilters;

    private GetMonitorsResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of monitor tags to limit the search. This filters on the tags set on the monitor itself.
     * 
     */
    public List<String> monitorTagsFilters() {
        return this.monitorTagsFilters == null ? List.of() : this.monitorTagsFilters;
    }
    /**
     * @return List of monitors
     * 
     */
    public List<GetMonitorsMonitor> monitors() {
        return this.monitors;
    }
    /**
     * @return A monitor name to limit the search.
     * 
     */
    public Optional<String> nameFilter() {
        return Optional.ofNullable(this.nameFilter);
    }
    /**
     * @return A list of tags to limit the search. This filters on the monitor scope.
     * 
     */
    public List<String> tagsFilters() {
        return this.tagsFilters == null ? List.of() : this.tagsFilters;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitorsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private @Nullable List<String> monitorTagsFilters;
        private List<GetMonitorsMonitor> monitors;
        private @Nullable String nameFilter;
        private @Nullable List<String> tagsFilters;
        public Builder() {}
        public Builder(GetMonitorsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.monitorTagsFilters = defaults.monitorTagsFilters;
    	      this.monitors = defaults.monitors;
    	      this.nameFilter = defaults.nameFilter;
    	      this.tagsFilters = defaults.tagsFilters;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMonitorsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder monitorTagsFilters(@Nullable List<String> monitorTagsFilters) {

            this.monitorTagsFilters = monitorTagsFilters;
            return this;
        }
        public Builder monitorTagsFilters(String... monitorTagsFilters) {
            return monitorTagsFilters(List.of(monitorTagsFilters));
        }
        @CustomType.Setter
        public Builder monitors(List<GetMonitorsMonitor> monitors) {
            if (monitors == null) {
              throw new MissingRequiredPropertyException("GetMonitorsResult", "monitors");
            }
            this.monitors = monitors;
            return this;
        }
        public Builder monitors(GetMonitorsMonitor... monitors) {
            return monitors(List.of(monitors));
        }
        @CustomType.Setter
        public Builder nameFilter(@Nullable String nameFilter) {

            this.nameFilter = nameFilter;
            return this;
        }
        @CustomType.Setter
        public Builder tagsFilters(@Nullable List<String> tagsFilters) {

            this.tagsFilters = tagsFilters;
            return this;
        }
        public Builder tagsFilters(String... tagsFilters) {
            return tagsFilters(List.of(tagsFilters));
        }
        public GetMonitorsResult build() {
            final var _resultValue = new GetMonitorsResult();
            _resultValue.id = id;
            _resultValue.monitorTagsFilters = monitorTagsFilters;
            _resultValue.monitors = monitors;
            _resultValue.nameFilter = nameFilter;
            _resultValue.tagsFilters = tagsFilters;
            return _resultValue;
        }
    }
}
