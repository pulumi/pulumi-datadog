// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.DatasetProductFilterArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatasetArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatasetArgs Empty = new DatasetArgs();

    /**
     * The name of the dataset.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the dataset.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `team`.
     * 
     */
    @Import(name="principals", required=true)
    private Output<List<String>> principals;

    /**
     * @return An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `team`.
     * 
     */
    public Output<List<String>> principals() {
        return this.principals;
    }

    @Import(name="productFilters")
    private @Nullable Output<List<DatasetProductFilterArgs>> productFilters;

    public Optional<Output<List<DatasetProductFilterArgs>>> productFilters() {
        return Optional.ofNullable(this.productFilters);
    }

    private DatasetArgs() {}

    private DatasetArgs(DatasetArgs $) {
        this.name = $.name;
        this.principals = $.principals;
        this.productFilters = $.productFilters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetArgs $;

        public Builder() {
            $ = new DatasetArgs();
        }

        public Builder(DatasetArgs defaults) {
            $ = new DatasetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name of the dataset.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the dataset.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param principals An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `team`.
         * 
         * @return builder
         * 
         */
        public Builder principals(Output<List<String>> principals) {
            $.principals = principals;
            return this;
        }

        /**
         * @param principals An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `team`.
         * 
         * @return builder
         * 
         */
        public Builder principals(List<String> principals) {
            return principals(Output.of(principals));
        }

        /**
         * @param principals An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `team`.
         * 
         * @return builder
         * 
         */
        public Builder principals(String... principals) {
            return principals(List.of(principals));
        }

        public Builder productFilters(@Nullable Output<List<DatasetProductFilterArgs>> productFilters) {
            $.productFilters = productFilters;
            return this;
        }

        public Builder productFilters(List<DatasetProductFilterArgs> productFilters) {
            return productFilters(Output.of(productFilters));
        }

        public Builder productFilters(DatasetProductFilterArgs... productFilters) {
            return productFilters(List.of(productFilters));
        }

        public DatasetArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DatasetArgs", "name");
            }
            if ($.principals == null) {
                throw new MissingRequiredPropertyException("DatasetArgs", "principals");
            }
            return $;
        }
    }

}
