// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetCustomAllocationRuleStrategyAllocatedByFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetCustomAllocationRuleStrategyAllocatedByFilterArgs Empty = new GetCustomAllocationRuleStrategyAllocatedByFilterArgs();

    /**
     * The condition used to match tags. Valid values are `=`, `!=`, `is`, `is not`, `like`, `in`, `not in`.
     * 
     */
    @Import(name="condition", required=true)
    private Output<String> condition;

    /**
     * @return The condition used to match tags. Valid values are `=`, `!=`, `is`, `is not`, `like`, `in`, `not in`.
     * 
     */
    public Output<String> condition() {
        return this.condition;
    }

    /**
     * The tag key used in the filter.
     * 
     */
    @Import(name="tag", required=true)
    private Output<String> tag;

    /**
     * @return The tag key used in the filter.
     * 
     */
    public Output<String> tag() {
        return this.tag;
    }

    /**
     * The tag value used in the filter (for single-value conditions).
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return The tag value used in the filter (for single-value conditions).
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    /**
     * The list of tag values used in the filter (for multi-value conditions like `in` or `notIn`).
     * 
     */
    @Import(name="values", required=true)
    private Output<List<String>> values;

    /**
     * @return The list of tag values used in the filter (for multi-value conditions like `in` or `notIn`).
     * 
     */
    public Output<List<String>> values() {
        return this.values;
    }

    private GetCustomAllocationRuleStrategyAllocatedByFilterArgs() {}

    private GetCustomAllocationRuleStrategyAllocatedByFilterArgs(GetCustomAllocationRuleStrategyAllocatedByFilterArgs $) {
        this.condition = $.condition;
        this.tag = $.tag;
        this.value = $.value;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCustomAllocationRuleStrategyAllocatedByFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCustomAllocationRuleStrategyAllocatedByFilterArgs $;

        public Builder() {
            $ = new GetCustomAllocationRuleStrategyAllocatedByFilterArgs();
        }

        public Builder(GetCustomAllocationRuleStrategyAllocatedByFilterArgs defaults) {
            $ = new GetCustomAllocationRuleStrategyAllocatedByFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param condition The condition used to match tags. Valid values are `=`, `!=`, `is`, `is not`, `like`, `in`, `not in`.
         * 
         * @return builder
         * 
         */
        public Builder condition(Output<String> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition The condition used to match tags. Valid values are `=`, `!=`, `is`, `is not`, `like`, `in`, `not in`.
         * 
         * @return builder
         * 
         */
        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param tag The tag key used in the filter.
         * 
         * @return builder
         * 
         */
        public Builder tag(Output<String> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag The tag key used in the filter.
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        /**
         * @param value The tag value used in the filter (for single-value conditions).
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The tag value used in the filter (for single-value conditions).
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        /**
         * @param values The list of tag values used in the filter (for multi-value conditions like `in` or `notIn`).
         * 
         * @return builder
         * 
         */
        public Builder values(Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values The list of tag values used in the filter (for multi-value conditions like `in` or `notIn`).
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values The list of tag values used in the filter (for multi-value conditions like `in` or `notIn`).
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public GetCustomAllocationRuleStrategyAllocatedByFilterArgs build() {
            if ($.condition == null) {
                throw new MissingRequiredPropertyException("GetCustomAllocationRuleStrategyAllocatedByFilterArgs", "condition");
            }
            if ($.tag == null) {
                throw new MissingRequiredPropertyException("GetCustomAllocationRuleStrategyAllocatedByFilterArgs", "tag");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("GetCustomAllocationRuleStrategyAllocatedByFilterArgs", "value");
            }
            if ($.values == null) {
                throw new MissingRequiredPropertyException("GetCustomAllocationRuleStrategyAllocatedByFilterArgs", "values");
            }
            return $;
        }
    }

}
