// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.DashboardWidgetAlertGraphDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetAlertValueDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetChangeDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetCheckStatusDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetDistributionDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetEventStreamDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetEventTimelineDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetFreeTextDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetGeomapDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetGroupDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetHeatmapDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetHostmapDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetIframeDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetImageDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetListStreamDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetLogStreamDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetManageStatusDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetNoteDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetQueryTableDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetQueryValueDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetRunWorkflowDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetScatterplotDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetServiceLevelObjectiveDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetServicemapDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetSloListDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetSunburstDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetTimeseriesDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetToplistDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetTopologyMapDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetTraceServiceDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetTreemapDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetWidgetLayoutArgs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetArgs Empty = new DashboardWidgetArgs();

    /**
     * The definition for a Alert Graph widget.
     * 
     */
    @Import(name="alertGraphDefinition")
    private @Nullable Output<DashboardWidgetAlertGraphDefinitionArgs> alertGraphDefinition;

    /**
     * @return The definition for a Alert Graph widget.
     * 
     */
    public Optional<Output<DashboardWidgetAlertGraphDefinitionArgs>> alertGraphDefinition() {
        return Optional.ofNullable(this.alertGraphDefinition);
    }

    /**
     * The definition for a Alert Value widget.
     * 
     */
    @Import(name="alertValueDefinition")
    private @Nullable Output<DashboardWidgetAlertValueDefinitionArgs> alertValueDefinition;

    /**
     * @return The definition for a Alert Value widget.
     * 
     */
    public Optional<Output<DashboardWidgetAlertValueDefinitionArgs>> alertValueDefinition() {
        return Optional.ofNullable(this.alertValueDefinition);
    }

    /**
     * The definition for a Change widget.
     * 
     */
    @Import(name="changeDefinition")
    private @Nullable Output<DashboardWidgetChangeDefinitionArgs> changeDefinition;

    /**
     * @return The definition for a Change widget.
     * 
     */
    public Optional<Output<DashboardWidgetChangeDefinitionArgs>> changeDefinition() {
        return Optional.ofNullable(this.changeDefinition);
    }

    /**
     * The definition for a Check Status widget.
     * 
     */
    @Import(name="checkStatusDefinition")
    private @Nullable Output<DashboardWidgetCheckStatusDefinitionArgs> checkStatusDefinition;

    /**
     * @return The definition for a Check Status widget.
     * 
     */
    public Optional<Output<DashboardWidgetCheckStatusDefinitionArgs>> checkStatusDefinition() {
        return Optional.ofNullable(this.checkStatusDefinition);
    }

    /**
     * The definition for a Distribution widget.
     * 
     */
    @Import(name="distributionDefinition")
    private @Nullable Output<DashboardWidgetDistributionDefinitionArgs> distributionDefinition;

    /**
     * @return The definition for a Distribution widget.
     * 
     */
    public Optional<Output<DashboardWidgetDistributionDefinitionArgs>> distributionDefinition() {
        return Optional.ofNullable(this.distributionDefinition);
    }

    /**
     * The definition for a Event Stream widget.
     * 
     */
    @Import(name="eventStreamDefinition")
    private @Nullable Output<DashboardWidgetEventStreamDefinitionArgs> eventStreamDefinition;

    /**
     * @return The definition for a Event Stream widget.
     * 
     */
    public Optional<Output<DashboardWidgetEventStreamDefinitionArgs>> eventStreamDefinition() {
        return Optional.ofNullable(this.eventStreamDefinition);
    }

    /**
     * The definition for a Event Timeline widget.
     * 
     */
    @Import(name="eventTimelineDefinition")
    private @Nullable Output<DashboardWidgetEventTimelineDefinitionArgs> eventTimelineDefinition;

    /**
     * @return The definition for a Event Timeline widget.
     * 
     */
    public Optional<Output<DashboardWidgetEventTimelineDefinitionArgs>> eventTimelineDefinition() {
        return Optional.ofNullable(this.eventTimelineDefinition);
    }

    /**
     * The definition for a Free Text widget.
     * 
     */
    @Import(name="freeTextDefinition")
    private @Nullable Output<DashboardWidgetFreeTextDefinitionArgs> freeTextDefinition;

    /**
     * @return The definition for a Free Text widget.
     * 
     */
    public Optional<Output<DashboardWidgetFreeTextDefinitionArgs>> freeTextDefinition() {
        return Optional.ofNullable(this.freeTextDefinition);
    }

    /**
     * The definition for a Geomap widget.
     * 
     */
    @Import(name="geomapDefinition")
    private @Nullable Output<DashboardWidgetGeomapDefinitionArgs> geomapDefinition;

    /**
     * @return The definition for a Geomap widget.
     * 
     */
    public Optional<Output<DashboardWidgetGeomapDefinitionArgs>> geomapDefinition() {
        return Optional.ofNullable(this.geomapDefinition);
    }

    /**
     * The definition for a Group widget.
     * 
     */
    @Import(name="groupDefinition")
    private @Nullable Output<DashboardWidgetGroupDefinitionArgs> groupDefinition;

    /**
     * @return The definition for a Group widget.
     * 
     */
    public Optional<Output<DashboardWidgetGroupDefinitionArgs>> groupDefinition() {
        return Optional.ofNullable(this.groupDefinition);
    }

    /**
     * The definition for a Heatmap widget.
     * 
     */
    @Import(name="heatmapDefinition")
    private @Nullable Output<DashboardWidgetHeatmapDefinitionArgs> heatmapDefinition;

    /**
     * @return The definition for a Heatmap widget.
     * 
     */
    public Optional<Output<DashboardWidgetHeatmapDefinitionArgs>> heatmapDefinition() {
        return Optional.ofNullable(this.heatmapDefinition);
    }

    /**
     * The definition for a Hostmap widget.
     * 
     */
    @Import(name="hostmapDefinition")
    private @Nullable Output<DashboardWidgetHostmapDefinitionArgs> hostmapDefinition;

    /**
     * @return The definition for a Hostmap widget.
     * 
     */
    public Optional<Output<DashboardWidgetHostmapDefinitionArgs>> hostmapDefinition() {
        return Optional.ofNullable(this.hostmapDefinition);
    }

    /**
     * The ID of the widget.
     * 
     */
    @Import(name="id")
    private @Nullable Output<Integer> id;

    /**
     * @return The ID of the widget.
     * 
     */
    public Optional<Output<Integer>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The definition for an Iframe widget.
     * 
     */
    @Import(name="iframeDefinition")
    private @Nullable Output<DashboardWidgetIframeDefinitionArgs> iframeDefinition;

    /**
     * @return The definition for an Iframe widget.
     * 
     */
    public Optional<Output<DashboardWidgetIframeDefinitionArgs>> iframeDefinition() {
        return Optional.ofNullable(this.iframeDefinition);
    }

    /**
     * The definition for an Image widget
     * 
     */
    @Import(name="imageDefinition")
    private @Nullable Output<DashboardWidgetImageDefinitionArgs> imageDefinition;

    /**
     * @return The definition for an Image widget
     * 
     */
    public Optional<Output<DashboardWidgetImageDefinitionArgs>> imageDefinition() {
        return Optional.ofNullable(this.imageDefinition);
    }

    /**
     * The definition for a List Stream widget.
     * 
     */
    @Import(name="listStreamDefinition")
    private @Nullable Output<DashboardWidgetListStreamDefinitionArgs> listStreamDefinition;

    /**
     * @return The definition for a List Stream widget.
     * 
     */
    public Optional<Output<DashboardWidgetListStreamDefinitionArgs>> listStreamDefinition() {
        return Optional.ofNullable(this.listStreamDefinition);
    }

    /**
     * The definition for an Log Stream widget.
     * 
     */
    @Import(name="logStreamDefinition")
    private @Nullable Output<DashboardWidgetLogStreamDefinitionArgs> logStreamDefinition;

    /**
     * @return The definition for an Log Stream widget.
     * 
     */
    public Optional<Output<DashboardWidgetLogStreamDefinitionArgs>> logStreamDefinition() {
        return Optional.ofNullable(this.logStreamDefinition);
    }

    /**
     * The definition for an Manage Status widget.
     * 
     */
    @Import(name="manageStatusDefinition")
    private @Nullable Output<DashboardWidgetManageStatusDefinitionArgs> manageStatusDefinition;

    /**
     * @return The definition for an Manage Status widget.
     * 
     */
    public Optional<Output<DashboardWidgetManageStatusDefinitionArgs>> manageStatusDefinition() {
        return Optional.ofNullable(this.manageStatusDefinition);
    }

    /**
     * The definition for a Note widget.
     * 
     */
    @Import(name="noteDefinition")
    private @Nullable Output<DashboardWidgetNoteDefinitionArgs> noteDefinition;

    /**
     * @return The definition for a Note widget.
     * 
     */
    public Optional<Output<DashboardWidgetNoteDefinitionArgs>> noteDefinition() {
        return Optional.ofNullable(this.noteDefinition);
    }

    /**
     * The definition for a Query Table widget.
     * 
     */
    @Import(name="queryTableDefinition")
    private @Nullable Output<DashboardWidgetQueryTableDefinitionArgs> queryTableDefinition;

    /**
     * @return The definition for a Query Table widget.
     * 
     */
    public Optional<Output<DashboardWidgetQueryTableDefinitionArgs>> queryTableDefinition() {
        return Optional.ofNullable(this.queryTableDefinition);
    }

    /**
     * The definition for a Query Value widget.
     * 
     */
    @Import(name="queryValueDefinition")
    private @Nullable Output<DashboardWidgetQueryValueDefinitionArgs> queryValueDefinition;

    /**
     * @return The definition for a Query Value widget.
     * 
     */
    public Optional<Output<DashboardWidgetQueryValueDefinitionArgs>> queryValueDefinition() {
        return Optional.ofNullable(this.queryValueDefinition);
    }

    /**
     * The definition for a Run Workflow widget.
     * 
     */
    @Import(name="runWorkflowDefinition")
    private @Nullable Output<DashboardWidgetRunWorkflowDefinitionArgs> runWorkflowDefinition;

    /**
     * @return The definition for a Run Workflow widget.
     * 
     */
    public Optional<Output<DashboardWidgetRunWorkflowDefinitionArgs>> runWorkflowDefinition() {
        return Optional.ofNullable(this.runWorkflowDefinition);
    }

    /**
     * The definition for a Scatterplot widget.
     * 
     */
    @Import(name="scatterplotDefinition")
    private @Nullable Output<DashboardWidgetScatterplotDefinitionArgs> scatterplotDefinition;

    /**
     * @return The definition for a Scatterplot widget.
     * 
     */
    public Optional<Output<DashboardWidgetScatterplotDefinitionArgs>> scatterplotDefinition() {
        return Optional.ofNullable(this.scatterplotDefinition);
    }

    /**
     * The definition for a Service Level Objective widget.
     * 
     */
    @Import(name="serviceLevelObjectiveDefinition")
    private @Nullable Output<DashboardWidgetServiceLevelObjectiveDefinitionArgs> serviceLevelObjectiveDefinition;

    /**
     * @return The definition for a Service Level Objective widget.
     * 
     */
    public Optional<Output<DashboardWidgetServiceLevelObjectiveDefinitionArgs>> serviceLevelObjectiveDefinition() {
        return Optional.ofNullable(this.serviceLevelObjectiveDefinition);
    }

    /**
     * The definition for a Service Map widget.
     * 
     */
    @Import(name="servicemapDefinition")
    private @Nullable Output<DashboardWidgetServicemapDefinitionArgs> servicemapDefinition;

    /**
     * @return The definition for a Service Map widget.
     * 
     */
    public Optional<Output<DashboardWidgetServicemapDefinitionArgs>> servicemapDefinition() {
        return Optional.ofNullable(this.servicemapDefinition);
    }

    /**
     * The definition for an SLO (Service Level Objective) List widget.
     * 
     */
    @Import(name="sloListDefinition")
    private @Nullable Output<DashboardWidgetSloListDefinitionArgs> sloListDefinition;

    /**
     * @return The definition for an SLO (Service Level Objective) List widget.
     * 
     */
    public Optional<Output<DashboardWidgetSloListDefinitionArgs>> sloListDefinition() {
        return Optional.ofNullable(this.sloListDefinition);
    }

    /**
     * The definition for a Sunburst widget.
     * 
     */
    @Import(name="sunburstDefinition")
    private @Nullable Output<DashboardWidgetSunburstDefinitionArgs> sunburstDefinition;

    /**
     * @return The definition for a Sunburst widget.
     * 
     */
    public Optional<Output<DashboardWidgetSunburstDefinitionArgs>> sunburstDefinition() {
        return Optional.ofNullable(this.sunburstDefinition);
    }

    /**
     * The definition for a Timeseries widget.
     * 
     */
    @Import(name="timeseriesDefinition")
    private @Nullable Output<DashboardWidgetTimeseriesDefinitionArgs> timeseriesDefinition;

    /**
     * @return The definition for a Timeseries widget.
     * 
     */
    public Optional<Output<DashboardWidgetTimeseriesDefinitionArgs>> timeseriesDefinition() {
        return Optional.ofNullable(this.timeseriesDefinition);
    }

    /**
     * The definition for a Toplist widget.
     * 
     */
    @Import(name="toplistDefinition")
    private @Nullable Output<DashboardWidgetToplistDefinitionArgs> toplistDefinition;

    /**
     * @return The definition for a Toplist widget.
     * 
     */
    public Optional<Output<DashboardWidgetToplistDefinitionArgs>> toplistDefinition() {
        return Optional.ofNullable(this.toplistDefinition);
    }

    /**
     * The definition for a Topology Map widget.
     * 
     */
    @Import(name="topologyMapDefinition")
    private @Nullable Output<DashboardWidgetTopologyMapDefinitionArgs> topologyMapDefinition;

    /**
     * @return The definition for a Topology Map widget.
     * 
     */
    public Optional<Output<DashboardWidgetTopologyMapDefinitionArgs>> topologyMapDefinition() {
        return Optional.ofNullable(this.topologyMapDefinition);
    }

    /**
     * The definition for a Trace Service widget.
     * 
     */
    @Import(name="traceServiceDefinition")
    private @Nullable Output<DashboardWidgetTraceServiceDefinitionArgs> traceServiceDefinition;

    /**
     * @return The definition for a Trace Service widget.
     * 
     */
    public Optional<Output<DashboardWidgetTraceServiceDefinitionArgs>> traceServiceDefinition() {
        return Optional.ofNullable(this.traceServiceDefinition);
    }

    /**
     * The definition for a Treemap widget.
     * 
     */
    @Import(name="treemapDefinition")
    private @Nullable Output<DashboardWidgetTreemapDefinitionArgs> treemapDefinition;

    /**
     * @return The definition for a Treemap widget.
     * 
     */
    public Optional<Output<DashboardWidgetTreemapDefinitionArgs>> treemapDefinition() {
        return Optional.ofNullable(this.treemapDefinition);
    }

    /**
     * The layout of the widget on a &#39;free&#39; dashboard.
     * 
     */
    @Import(name="widgetLayout")
    private @Nullable Output<DashboardWidgetWidgetLayoutArgs> widgetLayout;

    /**
     * @return The layout of the widget on a &#39;free&#39; dashboard.
     * 
     */
    public Optional<Output<DashboardWidgetWidgetLayoutArgs>> widgetLayout() {
        return Optional.ofNullable(this.widgetLayout);
    }

    private DashboardWidgetArgs() {}

    private DashboardWidgetArgs(DashboardWidgetArgs $) {
        this.alertGraphDefinition = $.alertGraphDefinition;
        this.alertValueDefinition = $.alertValueDefinition;
        this.changeDefinition = $.changeDefinition;
        this.checkStatusDefinition = $.checkStatusDefinition;
        this.distributionDefinition = $.distributionDefinition;
        this.eventStreamDefinition = $.eventStreamDefinition;
        this.eventTimelineDefinition = $.eventTimelineDefinition;
        this.freeTextDefinition = $.freeTextDefinition;
        this.geomapDefinition = $.geomapDefinition;
        this.groupDefinition = $.groupDefinition;
        this.heatmapDefinition = $.heatmapDefinition;
        this.hostmapDefinition = $.hostmapDefinition;
        this.id = $.id;
        this.iframeDefinition = $.iframeDefinition;
        this.imageDefinition = $.imageDefinition;
        this.listStreamDefinition = $.listStreamDefinition;
        this.logStreamDefinition = $.logStreamDefinition;
        this.manageStatusDefinition = $.manageStatusDefinition;
        this.noteDefinition = $.noteDefinition;
        this.queryTableDefinition = $.queryTableDefinition;
        this.queryValueDefinition = $.queryValueDefinition;
        this.runWorkflowDefinition = $.runWorkflowDefinition;
        this.scatterplotDefinition = $.scatterplotDefinition;
        this.serviceLevelObjectiveDefinition = $.serviceLevelObjectiveDefinition;
        this.servicemapDefinition = $.servicemapDefinition;
        this.sloListDefinition = $.sloListDefinition;
        this.sunburstDefinition = $.sunburstDefinition;
        this.timeseriesDefinition = $.timeseriesDefinition;
        this.toplistDefinition = $.toplistDefinition;
        this.topologyMapDefinition = $.topologyMapDefinition;
        this.traceServiceDefinition = $.traceServiceDefinition;
        this.treemapDefinition = $.treemapDefinition;
        this.widgetLayout = $.widgetLayout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetArgs $;

        public Builder() {
            $ = new DashboardWidgetArgs();
        }

        public Builder(DashboardWidgetArgs defaults) {
            $ = new DashboardWidgetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alertGraphDefinition The definition for a Alert Graph widget.
         * 
         * @return builder
         * 
         */
        public Builder alertGraphDefinition(@Nullable Output<DashboardWidgetAlertGraphDefinitionArgs> alertGraphDefinition) {
            $.alertGraphDefinition = alertGraphDefinition;
            return this;
        }

        /**
         * @param alertGraphDefinition The definition for a Alert Graph widget.
         * 
         * @return builder
         * 
         */
        public Builder alertGraphDefinition(DashboardWidgetAlertGraphDefinitionArgs alertGraphDefinition) {
            return alertGraphDefinition(Output.of(alertGraphDefinition));
        }

        /**
         * @param alertValueDefinition The definition for a Alert Value widget.
         * 
         * @return builder
         * 
         */
        public Builder alertValueDefinition(@Nullable Output<DashboardWidgetAlertValueDefinitionArgs> alertValueDefinition) {
            $.alertValueDefinition = alertValueDefinition;
            return this;
        }

        /**
         * @param alertValueDefinition The definition for a Alert Value widget.
         * 
         * @return builder
         * 
         */
        public Builder alertValueDefinition(DashboardWidgetAlertValueDefinitionArgs alertValueDefinition) {
            return alertValueDefinition(Output.of(alertValueDefinition));
        }

        /**
         * @param changeDefinition The definition for a Change widget.
         * 
         * @return builder
         * 
         */
        public Builder changeDefinition(@Nullable Output<DashboardWidgetChangeDefinitionArgs> changeDefinition) {
            $.changeDefinition = changeDefinition;
            return this;
        }

        /**
         * @param changeDefinition The definition for a Change widget.
         * 
         * @return builder
         * 
         */
        public Builder changeDefinition(DashboardWidgetChangeDefinitionArgs changeDefinition) {
            return changeDefinition(Output.of(changeDefinition));
        }

        /**
         * @param checkStatusDefinition The definition for a Check Status widget.
         * 
         * @return builder
         * 
         */
        public Builder checkStatusDefinition(@Nullable Output<DashboardWidgetCheckStatusDefinitionArgs> checkStatusDefinition) {
            $.checkStatusDefinition = checkStatusDefinition;
            return this;
        }

        /**
         * @param checkStatusDefinition The definition for a Check Status widget.
         * 
         * @return builder
         * 
         */
        public Builder checkStatusDefinition(DashboardWidgetCheckStatusDefinitionArgs checkStatusDefinition) {
            return checkStatusDefinition(Output.of(checkStatusDefinition));
        }

        /**
         * @param distributionDefinition The definition for a Distribution widget.
         * 
         * @return builder
         * 
         */
        public Builder distributionDefinition(@Nullable Output<DashboardWidgetDistributionDefinitionArgs> distributionDefinition) {
            $.distributionDefinition = distributionDefinition;
            return this;
        }

        /**
         * @param distributionDefinition The definition for a Distribution widget.
         * 
         * @return builder
         * 
         */
        public Builder distributionDefinition(DashboardWidgetDistributionDefinitionArgs distributionDefinition) {
            return distributionDefinition(Output.of(distributionDefinition));
        }

        /**
         * @param eventStreamDefinition The definition for a Event Stream widget.
         * 
         * @return builder
         * 
         */
        public Builder eventStreamDefinition(@Nullable Output<DashboardWidgetEventStreamDefinitionArgs> eventStreamDefinition) {
            $.eventStreamDefinition = eventStreamDefinition;
            return this;
        }

        /**
         * @param eventStreamDefinition The definition for a Event Stream widget.
         * 
         * @return builder
         * 
         */
        public Builder eventStreamDefinition(DashboardWidgetEventStreamDefinitionArgs eventStreamDefinition) {
            return eventStreamDefinition(Output.of(eventStreamDefinition));
        }

        /**
         * @param eventTimelineDefinition The definition for a Event Timeline widget.
         * 
         * @return builder
         * 
         */
        public Builder eventTimelineDefinition(@Nullable Output<DashboardWidgetEventTimelineDefinitionArgs> eventTimelineDefinition) {
            $.eventTimelineDefinition = eventTimelineDefinition;
            return this;
        }

        /**
         * @param eventTimelineDefinition The definition for a Event Timeline widget.
         * 
         * @return builder
         * 
         */
        public Builder eventTimelineDefinition(DashboardWidgetEventTimelineDefinitionArgs eventTimelineDefinition) {
            return eventTimelineDefinition(Output.of(eventTimelineDefinition));
        }

        /**
         * @param freeTextDefinition The definition for a Free Text widget.
         * 
         * @return builder
         * 
         */
        public Builder freeTextDefinition(@Nullable Output<DashboardWidgetFreeTextDefinitionArgs> freeTextDefinition) {
            $.freeTextDefinition = freeTextDefinition;
            return this;
        }

        /**
         * @param freeTextDefinition The definition for a Free Text widget.
         * 
         * @return builder
         * 
         */
        public Builder freeTextDefinition(DashboardWidgetFreeTextDefinitionArgs freeTextDefinition) {
            return freeTextDefinition(Output.of(freeTextDefinition));
        }

        /**
         * @param geomapDefinition The definition for a Geomap widget.
         * 
         * @return builder
         * 
         */
        public Builder geomapDefinition(@Nullable Output<DashboardWidgetGeomapDefinitionArgs> geomapDefinition) {
            $.geomapDefinition = geomapDefinition;
            return this;
        }

        /**
         * @param geomapDefinition The definition for a Geomap widget.
         * 
         * @return builder
         * 
         */
        public Builder geomapDefinition(DashboardWidgetGeomapDefinitionArgs geomapDefinition) {
            return geomapDefinition(Output.of(geomapDefinition));
        }

        /**
         * @param groupDefinition The definition for a Group widget.
         * 
         * @return builder
         * 
         */
        public Builder groupDefinition(@Nullable Output<DashboardWidgetGroupDefinitionArgs> groupDefinition) {
            $.groupDefinition = groupDefinition;
            return this;
        }

        /**
         * @param groupDefinition The definition for a Group widget.
         * 
         * @return builder
         * 
         */
        public Builder groupDefinition(DashboardWidgetGroupDefinitionArgs groupDefinition) {
            return groupDefinition(Output.of(groupDefinition));
        }

        /**
         * @param heatmapDefinition The definition for a Heatmap widget.
         * 
         * @return builder
         * 
         */
        public Builder heatmapDefinition(@Nullable Output<DashboardWidgetHeatmapDefinitionArgs> heatmapDefinition) {
            $.heatmapDefinition = heatmapDefinition;
            return this;
        }

        /**
         * @param heatmapDefinition The definition for a Heatmap widget.
         * 
         * @return builder
         * 
         */
        public Builder heatmapDefinition(DashboardWidgetHeatmapDefinitionArgs heatmapDefinition) {
            return heatmapDefinition(Output.of(heatmapDefinition));
        }

        /**
         * @param hostmapDefinition The definition for a Hostmap widget.
         * 
         * @return builder
         * 
         */
        public Builder hostmapDefinition(@Nullable Output<DashboardWidgetHostmapDefinitionArgs> hostmapDefinition) {
            $.hostmapDefinition = hostmapDefinition;
            return this;
        }

        /**
         * @param hostmapDefinition The definition for a Hostmap widget.
         * 
         * @return builder
         * 
         */
        public Builder hostmapDefinition(DashboardWidgetHostmapDefinitionArgs hostmapDefinition) {
            return hostmapDefinition(Output.of(hostmapDefinition));
        }

        /**
         * @param id The ID of the widget.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the widget.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param iframeDefinition The definition for an Iframe widget.
         * 
         * @return builder
         * 
         */
        public Builder iframeDefinition(@Nullable Output<DashboardWidgetIframeDefinitionArgs> iframeDefinition) {
            $.iframeDefinition = iframeDefinition;
            return this;
        }

        /**
         * @param iframeDefinition The definition for an Iframe widget.
         * 
         * @return builder
         * 
         */
        public Builder iframeDefinition(DashboardWidgetIframeDefinitionArgs iframeDefinition) {
            return iframeDefinition(Output.of(iframeDefinition));
        }

        /**
         * @param imageDefinition The definition for an Image widget
         * 
         * @return builder
         * 
         */
        public Builder imageDefinition(@Nullable Output<DashboardWidgetImageDefinitionArgs> imageDefinition) {
            $.imageDefinition = imageDefinition;
            return this;
        }

        /**
         * @param imageDefinition The definition for an Image widget
         * 
         * @return builder
         * 
         */
        public Builder imageDefinition(DashboardWidgetImageDefinitionArgs imageDefinition) {
            return imageDefinition(Output.of(imageDefinition));
        }

        /**
         * @param listStreamDefinition The definition for a List Stream widget.
         * 
         * @return builder
         * 
         */
        public Builder listStreamDefinition(@Nullable Output<DashboardWidgetListStreamDefinitionArgs> listStreamDefinition) {
            $.listStreamDefinition = listStreamDefinition;
            return this;
        }

        /**
         * @param listStreamDefinition The definition for a List Stream widget.
         * 
         * @return builder
         * 
         */
        public Builder listStreamDefinition(DashboardWidgetListStreamDefinitionArgs listStreamDefinition) {
            return listStreamDefinition(Output.of(listStreamDefinition));
        }

        /**
         * @param logStreamDefinition The definition for an Log Stream widget.
         * 
         * @return builder
         * 
         */
        public Builder logStreamDefinition(@Nullable Output<DashboardWidgetLogStreamDefinitionArgs> logStreamDefinition) {
            $.logStreamDefinition = logStreamDefinition;
            return this;
        }

        /**
         * @param logStreamDefinition The definition for an Log Stream widget.
         * 
         * @return builder
         * 
         */
        public Builder logStreamDefinition(DashboardWidgetLogStreamDefinitionArgs logStreamDefinition) {
            return logStreamDefinition(Output.of(logStreamDefinition));
        }

        /**
         * @param manageStatusDefinition The definition for an Manage Status widget.
         * 
         * @return builder
         * 
         */
        public Builder manageStatusDefinition(@Nullable Output<DashboardWidgetManageStatusDefinitionArgs> manageStatusDefinition) {
            $.manageStatusDefinition = manageStatusDefinition;
            return this;
        }

        /**
         * @param manageStatusDefinition The definition for an Manage Status widget.
         * 
         * @return builder
         * 
         */
        public Builder manageStatusDefinition(DashboardWidgetManageStatusDefinitionArgs manageStatusDefinition) {
            return manageStatusDefinition(Output.of(manageStatusDefinition));
        }

        /**
         * @param noteDefinition The definition for a Note widget.
         * 
         * @return builder
         * 
         */
        public Builder noteDefinition(@Nullable Output<DashboardWidgetNoteDefinitionArgs> noteDefinition) {
            $.noteDefinition = noteDefinition;
            return this;
        }

        /**
         * @param noteDefinition The definition for a Note widget.
         * 
         * @return builder
         * 
         */
        public Builder noteDefinition(DashboardWidgetNoteDefinitionArgs noteDefinition) {
            return noteDefinition(Output.of(noteDefinition));
        }

        /**
         * @param queryTableDefinition The definition for a Query Table widget.
         * 
         * @return builder
         * 
         */
        public Builder queryTableDefinition(@Nullable Output<DashboardWidgetQueryTableDefinitionArgs> queryTableDefinition) {
            $.queryTableDefinition = queryTableDefinition;
            return this;
        }

        /**
         * @param queryTableDefinition The definition for a Query Table widget.
         * 
         * @return builder
         * 
         */
        public Builder queryTableDefinition(DashboardWidgetQueryTableDefinitionArgs queryTableDefinition) {
            return queryTableDefinition(Output.of(queryTableDefinition));
        }

        /**
         * @param queryValueDefinition The definition for a Query Value widget.
         * 
         * @return builder
         * 
         */
        public Builder queryValueDefinition(@Nullable Output<DashboardWidgetQueryValueDefinitionArgs> queryValueDefinition) {
            $.queryValueDefinition = queryValueDefinition;
            return this;
        }

        /**
         * @param queryValueDefinition The definition for a Query Value widget.
         * 
         * @return builder
         * 
         */
        public Builder queryValueDefinition(DashboardWidgetQueryValueDefinitionArgs queryValueDefinition) {
            return queryValueDefinition(Output.of(queryValueDefinition));
        }

        /**
         * @param runWorkflowDefinition The definition for a Run Workflow widget.
         * 
         * @return builder
         * 
         */
        public Builder runWorkflowDefinition(@Nullable Output<DashboardWidgetRunWorkflowDefinitionArgs> runWorkflowDefinition) {
            $.runWorkflowDefinition = runWorkflowDefinition;
            return this;
        }

        /**
         * @param runWorkflowDefinition The definition for a Run Workflow widget.
         * 
         * @return builder
         * 
         */
        public Builder runWorkflowDefinition(DashboardWidgetRunWorkflowDefinitionArgs runWorkflowDefinition) {
            return runWorkflowDefinition(Output.of(runWorkflowDefinition));
        }

        /**
         * @param scatterplotDefinition The definition for a Scatterplot widget.
         * 
         * @return builder
         * 
         */
        public Builder scatterplotDefinition(@Nullable Output<DashboardWidgetScatterplotDefinitionArgs> scatterplotDefinition) {
            $.scatterplotDefinition = scatterplotDefinition;
            return this;
        }

        /**
         * @param scatterplotDefinition The definition for a Scatterplot widget.
         * 
         * @return builder
         * 
         */
        public Builder scatterplotDefinition(DashboardWidgetScatterplotDefinitionArgs scatterplotDefinition) {
            return scatterplotDefinition(Output.of(scatterplotDefinition));
        }

        /**
         * @param serviceLevelObjectiveDefinition The definition for a Service Level Objective widget.
         * 
         * @return builder
         * 
         */
        public Builder serviceLevelObjectiveDefinition(@Nullable Output<DashboardWidgetServiceLevelObjectiveDefinitionArgs> serviceLevelObjectiveDefinition) {
            $.serviceLevelObjectiveDefinition = serviceLevelObjectiveDefinition;
            return this;
        }

        /**
         * @param serviceLevelObjectiveDefinition The definition for a Service Level Objective widget.
         * 
         * @return builder
         * 
         */
        public Builder serviceLevelObjectiveDefinition(DashboardWidgetServiceLevelObjectiveDefinitionArgs serviceLevelObjectiveDefinition) {
            return serviceLevelObjectiveDefinition(Output.of(serviceLevelObjectiveDefinition));
        }

        /**
         * @param servicemapDefinition The definition for a Service Map widget.
         * 
         * @return builder
         * 
         */
        public Builder servicemapDefinition(@Nullable Output<DashboardWidgetServicemapDefinitionArgs> servicemapDefinition) {
            $.servicemapDefinition = servicemapDefinition;
            return this;
        }

        /**
         * @param servicemapDefinition The definition for a Service Map widget.
         * 
         * @return builder
         * 
         */
        public Builder servicemapDefinition(DashboardWidgetServicemapDefinitionArgs servicemapDefinition) {
            return servicemapDefinition(Output.of(servicemapDefinition));
        }

        /**
         * @param sloListDefinition The definition for an SLO (Service Level Objective) List widget.
         * 
         * @return builder
         * 
         */
        public Builder sloListDefinition(@Nullable Output<DashboardWidgetSloListDefinitionArgs> sloListDefinition) {
            $.sloListDefinition = sloListDefinition;
            return this;
        }

        /**
         * @param sloListDefinition The definition for an SLO (Service Level Objective) List widget.
         * 
         * @return builder
         * 
         */
        public Builder sloListDefinition(DashboardWidgetSloListDefinitionArgs sloListDefinition) {
            return sloListDefinition(Output.of(sloListDefinition));
        }

        /**
         * @param sunburstDefinition The definition for a Sunburst widget.
         * 
         * @return builder
         * 
         */
        public Builder sunburstDefinition(@Nullable Output<DashboardWidgetSunburstDefinitionArgs> sunburstDefinition) {
            $.sunburstDefinition = sunburstDefinition;
            return this;
        }

        /**
         * @param sunburstDefinition The definition for a Sunburst widget.
         * 
         * @return builder
         * 
         */
        public Builder sunburstDefinition(DashboardWidgetSunburstDefinitionArgs sunburstDefinition) {
            return sunburstDefinition(Output.of(sunburstDefinition));
        }

        /**
         * @param timeseriesDefinition The definition for a Timeseries widget.
         * 
         * @return builder
         * 
         */
        public Builder timeseriesDefinition(@Nullable Output<DashboardWidgetTimeseriesDefinitionArgs> timeseriesDefinition) {
            $.timeseriesDefinition = timeseriesDefinition;
            return this;
        }

        /**
         * @param timeseriesDefinition The definition for a Timeseries widget.
         * 
         * @return builder
         * 
         */
        public Builder timeseriesDefinition(DashboardWidgetTimeseriesDefinitionArgs timeseriesDefinition) {
            return timeseriesDefinition(Output.of(timeseriesDefinition));
        }

        /**
         * @param toplistDefinition The definition for a Toplist widget.
         * 
         * @return builder
         * 
         */
        public Builder toplistDefinition(@Nullable Output<DashboardWidgetToplistDefinitionArgs> toplistDefinition) {
            $.toplistDefinition = toplistDefinition;
            return this;
        }

        /**
         * @param toplistDefinition The definition for a Toplist widget.
         * 
         * @return builder
         * 
         */
        public Builder toplistDefinition(DashboardWidgetToplistDefinitionArgs toplistDefinition) {
            return toplistDefinition(Output.of(toplistDefinition));
        }

        /**
         * @param topologyMapDefinition The definition for a Topology Map widget.
         * 
         * @return builder
         * 
         */
        public Builder topologyMapDefinition(@Nullable Output<DashboardWidgetTopologyMapDefinitionArgs> topologyMapDefinition) {
            $.topologyMapDefinition = topologyMapDefinition;
            return this;
        }

        /**
         * @param topologyMapDefinition The definition for a Topology Map widget.
         * 
         * @return builder
         * 
         */
        public Builder topologyMapDefinition(DashboardWidgetTopologyMapDefinitionArgs topologyMapDefinition) {
            return topologyMapDefinition(Output.of(topologyMapDefinition));
        }

        /**
         * @param traceServiceDefinition The definition for a Trace Service widget.
         * 
         * @return builder
         * 
         */
        public Builder traceServiceDefinition(@Nullable Output<DashboardWidgetTraceServiceDefinitionArgs> traceServiceDefinition) {
            $.traceServiceDefinition = traceServiceDefinition;
            return this;
        }

        /**
         * @param traceServiceDefinition The definition for a Trace Service widget.
         * 
         * @return builder
         * 
         */
        public Builder traceServiceDefinition(DashboardWidgetTraceServiceDefinitionArgs traceServiceDefinition) {
            return traceServiceDefinition(Output.of(traceServiceDefinition));
        }

        /**
         * @param treemapDefinition The definition for a Treemap widget.
         * 
         * @return builder
         * 
         */
        public Builder treemapDefinition(@Nullable Output<DashboardWidgetTreemapDefinitionArgs> treemapDefinition) {
            $.treemapDefinition = treemapDefinition;
            return this;
        }

        /**
         * @param treemapDefinition The definition for a Treemap widget.
         * 
         * @return builder
         * 
         */
        public Builder treemapDefinition(DashboardWidgetTreemapDefinitionArgs treemapDefinition) {
            return treemapDefinition(Output.of(treemapDefinition));
        }

        /**
         * @param widgetLayout The layout of the widget on a &#39;free&#39; dashboard.
         * 
         * @return builder
         * 
         */
        public Builder widgetLayout(@Nullable Output<DashboardWidgetWidgetLayoutArgs> widgetLayout) {
            $.widgetLayout = widgetLayout;
            return this;
        }

        /**
         * @param widgetLayout The layout of the widget on a &#39;free&#39; dashboard.
         * 
         * @return builder
         * 
         */
        public Builder widgetLayout(DashboardWidgetWidgetLayoutArgs widgetLayout) {
            return widgetLayout(Output.of(widgetLayout));
        }

        public DashboardWidgetArgs build() {
            return $;
        }
    }

}
