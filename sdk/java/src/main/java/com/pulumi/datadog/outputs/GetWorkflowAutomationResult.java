// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWorkflowAutomationResult {
    /**
     * @return Description of the workflow.
     * 
     */
    private String description;
    /**
     * @return ID of the workflow.
     * 
     */
    private String id;
    /**
     * @return Name of the workflow.
     * 
     */
    private String name;
    /**
     * @return Set the workflow to published or unpublished. Workflows in an unpublished state are only executable through manual runs. Automatic triggers such as Schedule do not execute the workflow until it is published.
     * 
     */
    private Boolean published;
    /**
     * @return The spec defines what the workflow does.
     * 
     */
    private String specJson;
    /**
     * @return Tags of the workflow.
     * 
     */
    private List<String> tags;

    private GetWorkflowAutomationResult() {}
    /**
     * @return Description of the workflow.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return ID of the workflow.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Name of the workflow.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Set the workflow to published or unpublished. Workflows in an unpublished state are only executable through manual runs. Automatic triggers such as Schedule do not execute the workflow until it is published.
     * 
     */
    public Boolean published() {
        return this.published;
    }
    /**
     * @return The spec defines what the workflow does.
     * 
     */
    public String specJson() {
        return this.specJson;
    }
    /**
     * @return Tags of the workflow.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkflowAutomationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String id;
        private String name;
        private Boolean published;
        private String specJson;
        private List<String> tags;
        public Builder() {}
        public Builder(GetWorkflowAutomationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.published = defaults.published;
    	      this.specJson = defaults.specJson;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetWorkflowAutomationResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWorkflowAutomationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetWorkflowAutomationResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder published(Boolean published) {
            if (published == null) {
              throw new MissingRequiredPropertyException("GetWorkflowAutomationResult", "published");
            }
            this.published = published;
            return this;
        }
        @CustomType.Setter
        public Builder specJson(String specJson) {
            if (specJson == null) {
              throw new MissingRequiredPropertyException("GetWorkflowAutomationResult", "specJson");
            }
            this.specJson = specJson;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetWorkflowAutomationResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public GetWorkflowAutomationResult build() {
            final var _resultValue = new GetWorkflowAutomationResult();
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.published = published;
            _resultValue.specJson = specJson;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
