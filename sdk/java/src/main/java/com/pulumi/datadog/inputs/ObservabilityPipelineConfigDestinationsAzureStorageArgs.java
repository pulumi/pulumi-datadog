// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigDestinationsAzureStorageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigDestinationsAzureStorageArgs Empty = new ObservabilityPipelineConfigDestinationsAzureStorageArgs();

    /**
     * Optional prefix for blobs written to the container.
     * 
     */
    @Import(name="blobPrefix")
    private @Nullable Output<String> blobPrefix;

    /**
     * @return Optional prefix for blobs written to the container.
     * 
     */
    public Optional<Output<String>> blobPrefix() {
        return Optional.ofNullable(this.blobPrefix);
    }

    /**
     * The name of the Azure Blob Storage container to store logs in.
     * 
     */
    @Import(name="containerName", required=true)
    private Output<String> containerName;

    /**
     * @return The name of the Azure Blob Storage container to store logs in.
     * 
     */
    public Output<String> containerName() {
        return this.containerName;
    }

    /**
     * The unique identifier for this component.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique identifier for this component.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    @Import(name="inputs", required=true)
    private Output<List<String>> inputs;

    /**
     * @return A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    public Output<List<String>> inputs() {
        return this.inputs;
    }

    private ObservabilityPipelineConfigDestinationsAzureStorageArgs() {}

    private ObservabilityPipelineConfigDestinationsAzureStorageArgs(ObservabilityPipelineConfigDestinationsAzureStorageArgs $) {
        this.blobPrefix = $.blobPrefix;
        this.containerName = $.containerName;
        this.id = $.id;
        this.inputs = $.inputs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigDestinationsAzureStorageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigDestinationsAzureStorageArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigDestinationsAzureStorageArgs();
        }

        public Builder(ObservabilityPipelineConfigDestinationsAzureStorageArgs defaults) {
            $ = new ObservabilityPipelineConfigDestinationsAzureStorageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blobPrefix Optional prefix for blobs written to the container.
         * 
         * @return builder
         * 
         */
        public Builder blobPrefix(@Nullable Output<String> blobPrefix) {
            $.blobPrefix = blobPrefix;
            return this;
        }

        /**
         * @param blobPrefix Optional prefix for blobs written to the container.
         * 
         * @return builder
         * 
         */
        public Builder blobPrefix(String blobPrefix) {
            return blobPrefix(Output.of(blobPrefix));
        }

        /**
         * @param containerName The name of the Azure Blob Storage container to store logs in.
         * 
         * @return builder
         * 
         */
        public Builder containerName(Output<String> containerName) {
            $.containerName = containerName;
            return this;
        }

        /**
         * @param containerName The name of the Azure Blob Storage container to store logs in.
         * 
         * @return builder
         * 
         */
        public Builder containerName(String containerName) {
            return containerName(Output.of(containerName));
        }

        /**
         * @param id The unique identifier for this component.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier for this component.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(Output<List<String>> inputs) {
            $.inputs = inputs;
            return this;
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(List<String> inputs) {
            return inputs(Output.of(inputs));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }

        public ObservabilityPipelineConfigDestinationsAzureStorageArgs build() {
            if ($.containerName == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsAzureStorageArgs", "containerName");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsAzureStorageArgs", "id");
            }
            if ($.inputs == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsAzureStorageArgs", "inputs");
            }
            return $;
        }
    }

}
