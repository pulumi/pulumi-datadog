// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityMonitoringDefaultRuleOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityMonitoringDefaultRuleOptionsArgs Empty = new SecurityMonitoringDefaultRuleOptionsArgs();

    /**
     * If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `log_detection`.
     * 
     */
    @Import(name="decreaseCriticalityBasedOnEnv")
    private @Nullable Output<Boolean> decreaseCriticalityBasedOnEnv;

    /**
     * @return If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `log_detection`.
     * 
     */
    public Optional<Output<Boolean>> decreaseCriticalityBasedOnEnv() {
        return Optional.ofNullable(this.decreaseCriticalityBasedOnEnv);
    }

    private SecurityMonitoringDefaultRuleOptionsArgs() {}

    private SecurityMonitoringDefaultRuleOptionsArgs(SecurityMonitoringDefaultRuleOptionsArgs $) {
        this.decreaseCriticalityBasedOnEnv = $.decreaseCriticalityBasedOnEnv;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityMonitoringDefaultRuleOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityMonitoringDefaultRuleOptionsArgs $;

        public Builder() {
            $ = new SecurityMonitoringDefaultRuleOptionsArgs();
        }

        public Builder(SecurityMonitoringDefaultRuleOptionsArgs defaults) {
            $ = new SecurityMonitoringDefaultRuleOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param decreaseCriticalityBasedOnEnv If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `log_detection`.
         * 
         * @return builder
         * 
         */
        public Builder decreaseCriticalityBasedOnEnv(@Nullable Output<Boolean> decreaseCriticalityBasedOnEnv) {
            $.decreaseCriticalityBasedOnEnv = decreaseCriticalityBasedOnEnv;
            return this;
        }

        /**
         * @param decreaseCriticalityBasedOnEnv If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `log_detection`.
         * 
         * @return builder
         * 
         */
        public Builder decreaseCriticalityBasedOnEnv(Boolean decreaseCriticalityBasedOnEnv) {
            return decreaseCriticalityBasedOnEnv(Output.of(decreaseCriticalityBasedOnEnv));
        }

        public SecurityMonitoringDefaultRuleOptionsArgs build() {
            return $;
        }
    }

}
