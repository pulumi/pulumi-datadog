// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IncidentTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final IncidentTypeArgs Empty = new IncidentTypeArgs();

    /**
     * Description of the incident type. The description can have a maximum of 512 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the incident type. The description can have a maximum of 512 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether this incident type is the default type.
     * 
     */
    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    /**
     * @return Whether this incident type is the default type.
     * 
     */
    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * Name of the incident type. Must be between 1 and 50 characters.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the incident type. Must be between 1 and 50 characters.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private IncidentTypeArgs() {}

    private IncidentTypeArgs(IncidentTypeArgs $) {
        this.description = $.description;
        this.isDefault = $.isDefault;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IncidentTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IncidentTypeArgs $;

        public Builder() {
            $ = new IncidentTypeArgs();
        }

        public Builder(IncidentTypeArgs defaults) {
            $ = new IncidentTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the incident type. The description can have a maximum of 512 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the incident type. The description can have a maximum of 512 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isDefault Whether this incident type is the default type.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param isDefault Whether this incident type is the default type.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        /**
         * @param name Name of the incident type. Must be between 1 and 50 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the incident type. Must be between 1 and 50 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public IncidentTypeArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("IncidentTypeArgs", "name");
            }
            return $;
        }
    }

}
