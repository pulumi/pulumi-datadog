// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.SecurityMonitoringDefaultRuleQueryAgentRule;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecurityMonitoringDefaultRuleQuery {
    /**
     * @return **Deprecated**. It won&#39;t be applied anymore. **Deprecated.** `agentRule` has been deprecated in favor of new Agent Rule resource.
     * 
     * @deprecated
     * `agentRule` has been deprecated in favor of new Agent Rule resource.
     * 
     */
    @Deprecated /* `agentRule` has been deprecated in favor of new Agent Rule resource. */
    private @Nullable List<SecurityMonitoringDefaultRuleQueryAgentRule> agentRules;
    /**
     * @return The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are `count`, `cardinality`, `sum`, `max`, `newValue`, `geoData`, `eventCount`, `none`.
     * 
     */
    private @Nullable String aggregation;
    /**
     * @return Query extension to append to the logs query.
     * 
     */
    private @Nullable String customQueryExtension;
    /**
     * @return Source of events. Valid values are `logs`, `audit`, `appSecSpans`, `spans`, `securityRuntime`, `network`, `events`.
     * 
     */
    private @Nullable String dataSource;
    /**
     * @return Field for which the cardinality is measured. Sent as an array.
     * 
     */
    private @Nullable List<String> distinctFields;
    /**
     * @return Fields to group by.
     * 
     */
    private @Nullable List<String> groupByFields;
    /**
     * @return When false, events without a group-by value are ignored by the rule. When true, events with missing group-by fields are processed with `N/A`, replacing the missing values.
     * 
     */
    private @Nullable Boolean hasOptionalGroupByFields;
    /**
     * @return The target field to aggregate over when using the `sum`, `max`, or `geoData` aggregations. **Deprecated.** Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
     * 
     * @deprecated
     * Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
     * 
     */
    @Deprecated /* Configure `metrics` instead. This attribute will be removed in the next major version of the provider. */
    private @Nullable String metric;
    /**
     * @return Group of target fields to aggregate over when using the `sum`, `max`, `geoData`, or `newValue` aggregations. The `sum`, `max`, and `geoData` aggregations only accept one value in this list, whereas the `newValue` aggregation accepts up to five values.
     * 
     */
    private @Nullable List<String> metrics;
    /**
     * @return Name of the query. Not compatible with `newValue` aggregations.
     * 
     */
    private @Nullable String name;
    /**
     * @return Query to run on logs.
     * 
     */
    private @Nullable String query;

    private SecurityMonitoringDefaultRuleQuery() {}
    /**
     * @return **Deprecated**. It won&#39;t be applied anymore. **Deprecated.** `agentRule` has been deprecated in favor of new Agent Rule resource.
     * 
     * @deprecated
     * `agentRule` has been deprecated in favor of new Agent Rule resource.
     * 
     */
    @Deprecated /* `agentRule` has been deprecated in favor of new Agent Rule resource. */
    public List<SecurityMonitoringDefaultRuleQueryAgentRule> agentRules() {
        return this.agentRules == null ? List.of() : this.agentRules;
    }
    /**
     * @return The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are `count`, `cardinality`, `sum`, `max`, `newValue`, `geoData`, `eventCount`, `none`.
     * 
     */
    public Optional<String> aggregation() {
        return Optional.ofNullable(this.aggregation);
    }
    /**
     * @return Query extension to append to the logs query.
     * 
     */
    public Optional<String> customQueryExtension() {
        return Optional.ofNullable(this.customQueryExtension);
    }
    /**
     * @return Source of events. Valid values are `logs`, `audit`, `appSecSpans`, `spans`, `securityRuntime`, `network`, `events`.
     * 
     */
    public Optional<String> dataSource() {
        return Optional.ofNullable(this.dataSource);
    }
    /**
     * @return Field for which the cardinality is measured. Sent as an array.
     * 
     */
    public List<String> distinctFields() {
        return this.distinctFields == null ? List.of() : this.distinctFields;
    }
    /**
     * @return Fields to group by.
     * 
     */
    public List<String> groupByFields() {
        return this.groupByFields == null ? List.of() : this.groupByFields;
    }
    /**
     * @return When false, events without a group-by value are ignored by the rule. When true, events with missing group-by fields are processed with `N/A`, replacing the missing values.
     * 
     */
    public Optional<Boolean> hasOptionalGroupByFields() {
        return Optional.ofNullable(this.hasOptionalGroupByFields);
    }
    /**
     * @return The target field to aggregate over when using the `sum`, `max`, or `geoData` aggregations. **Deprecated.** Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
     * 
     * @deprecated
     * Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
     * 
     */
    @Deprecated /* Configure `metrics` instead. This attribute will be removed in the next major version of the provider. */
    public Optional<String> metric() {
        return Optional.ofNullable(this.metric);
    }
    /**
     * @return Group of target fields to aggregate over when using the `sum`, `max`, `geoData`, or `newValue` aggregations. The `sum`, `max`, and `geoData` aggregations only accept one value in this list, whereas the `newValue` aggregation accepts up to five values.
     * 
     */
    public List<String> metrics() {
        return this.metrics == null ? List.of() : this.metrics;
    }
    /**
     * @return Name of the query. Not compatible with `newValue` aggregations.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Query to run on logs.
     * 
     */
    public Optional<String> query() {
        return Optional.ofNullable(this.query);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityMonitoringDefaultRuleQuery defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<SecurityMonitoringDefaultRuleQueryAgentRule> agentRules;
        private @Nullable String aggregation;
        private @Nullable String customQueryExtension;
        private @Nullable String dataSource;
        private @Nullable List<String> distinctFields;
        private @Nullable List<String> groupByFields;
        private @Nullable Boolean hasOptionalGroupByFields;
        private @Nullable String metric;
        private @Nullable List<String> metrics;
        private @Nullable String name;
        private @Nullable String query;
        public Builder() {}
        public Builder(SecurityMonitoringDefaultRuleQuery defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentRules = defaults.agentRules;
    	      this.aggregation = defaults.aggregation;
    	      this.customQueryExtension = defaults.customQueryExtension;
    	      this.dataSource = defaults.dataSource;
    	      this.distinctFields = defaults.distinctFields;
    	      this.groupByFields = defaults.groupByFields;
    	      this.hasOptionalGroupByFields = defaults.hasOptionalGroupByFields;
    	      this.metric = defaults.metric;
    	      this.metrics = defaults.metrics;
    	      this.name = defaults.name;
    	      this.query = defaults.query;
        }

        @CustomType.Setter
        public Builder agentRules(@Nullable List<SecurityMonitoringDefaultRuleQueryAgentRule> agentRules) {

            this.agentRules = agentRules;
            return this;
        }
        public Builder agentRules(SecurityMonitoringDefaultRuleQueryAgentRule... agentRules) {
            return agentRules(List.of(agentRules));
        }
        @CustomType.Setter
        public Builder aggregation(@Nullable String aggregation) {

            this.aggregation = aggregation;
            return this;
        }
        @CustomType.Setter
        public Builder customQueryExtension(@Nullable String customQueryExtension) {

            this.customQueryExtension = customQueryExtension;
            return this;
        }
        @CustomType.Setter
        public Builder dataSource(@Nullable String dataSource) {

            this.dataSource = dataSource;
            return this;
        }
        @CustomType.Setter
        public Builder distinctFields(@Nullable List<String> distinctFields) {

            this.distinctFields = distinctFields;
            return this;
        }
        public Builder distinctFields(String... distinctFields) {
            return distinctFields(List.of(distinctFields));
        }
        @CustomType.Setter
        public Builder groupByFields(@Nullable List<String> groupByFields) {

            this.groupByFields = groupByFields;
            return this;
        }
        public Builder groupByFields(String... groupByFields) {
            return groupByFields(List.of(groupByFields));
        }
        @CustomType.Setter
        public Builder hasOptionalGroupByFields(@Nullable Boolean hasOptionalGroupByFields) {

            this.hasOptionalGroupByFields = hasOptionalGroupByFields;
            return this;
        }
        @CustomType.Setter
        public Builder metric(@Nullable String metric) {

            this.metric = metric;
            return this;
        }
        @CustomType.Setter
        public Builder metrics(@Nullable List<String> metrics) {

            this.metrics = metrics;
            return this;
        }
        public Builder metrics(String... metrics) {
            return metrics(List.of(metrics));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder query(@Nullable String query) {

            this.query = query;
            return this;
        }
        public SecurityMonitoringDefaultRuleQuery build() {
            final var _resultValue = new SecurityMonitoringDefaultRuleQuery();
            _resultValue.agentRules = agentRules;
            _resultValue.aggregation = aggregation;
            _resultValue.customQueryExtension = customQueryExtension;
            _resultValue.dataSource = dataSource;
            _resultValue.distinctFields = distinctFields;
            _resultValue.groupByFields = groupByFields;
            _resultValue.hasOptionalGroupByFields = hasOptionalGroupByFields;
            _resultValue.metric = metric;
            _resultValue.metrics = metrics;
            _resultValue.name = name;
            _resultValue.query = query;
            return _resultValue;
        }
    }
}
