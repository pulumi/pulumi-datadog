// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SloCorrectionState extends com.pulumi.resources.ResourceArgs {

    public static final SloCorrectionState Empty = new SloCorrectionState();

    /**
     * Category the SLO correction belongs to. Valid values are `Scheduled Maintenance`, `Outside Business Hours`, `Deployment`, `Other`.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return Category the SLO correction belongs to. Valid values are `Scheduled Maintenance`, `Outside Business Hours`, `Deployment`, `Other`.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * Description of the correction being made.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the correction being made.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Length of time in seconds for a specified `rrule` recurring SLO correction (required if specifying `rrule`)
     * 
     */
    @Import(name="duration")
    private @Nullable Output<Integer> duration;

    /**
     * @return Length of time in seconds for a specified `rrule` recurring SLO correction (required if specifying `rrule`)
     * 
     */
    public Optional<Output<Integer>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * Ending time of the correction in epoch seconds. Required for one time corrections, but optional if `rrule` is specified
     * 
     */
    @Import(name="end")
    private @Nullable Output<Integer> end;

    /**
     * @return Ending time of the correction in epoch seconds. Required for one time corrections, but optional if `rrule` is specified
     * 
     */
    public Optional<Output<Integer>> end() {
        return Optional.ofNullable(this.end);
    }

    /**
     * Recurrence rules as defined in the iCalendar RFC 5545. Supported rules for SLO corrections are `FREQ`, `INTERVAL`, `COUNT` and `UNTIL`.
     * 
     */
    @Import(name="rrule")
    private @Nullable Output<String> rrule;

    /**
     * @return Recurrence rules as defined in the iCalendar RFC 5545. Supported rules for SLO corrections are `FREQ`, `INTERVAL`, `COUNT` and `UNTIL`.
     * 
     */
    public Optional<Output<String>> rrule() {
        return Optional.ofNullable(this.rrule);
    }

    /**
     * ID of the SLO that this correction will be applied to.
     * 
     */
    @Import(name="sloId")
    private @Nullable Output<String> sloId;

    /**
     * @return ID of the SLO that this correction will be applied to.
     * 
     */
    public Optional<Output<String>> sloId() {
        return Optional.ofNullable(this.sloId);
    }

    /**
     * Starting time of the correction in epoch seconds.
     * 
     */
    @Import(name="start")
    private @Nullable Output<Integer> start;

    /**
     * @return Starting time of the correction in epoch seconds.
     * 
     */
    public Optional<Output<Integer>> start() {
        return Optional.ofNullable(this.start);
    }

    /**
     * The timezone to display in the UI for the correction times (defaults to &#34;UTC&#34;)
     * 
     */
    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    /**
     * @return The timezone to display in the UI for the correction times (defaults to &#34;UTC&#34;)
     * 
     */
    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    private SloCorrectionState() {}

    private SloCorrectionState(SloCorrectionState $) {
        this.category = $.category;
        this.description = $.description;
        this.duration = $.duration;
        this.end = $.end;
        this.rrule = $.rrule;
        this.sloId = $.sloId;
        this.start = $.start;
        this.timezone = $.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SloCorrectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SloCorrectionState $;

        public Builder() {
            $ = new SloCorrectionState();
        }

        public Builder(SloCorrectionState defaults) {
            $ = new SloCorrectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param category Category the SLO correction belongs to. Valid values are `Scheduled Maintenance`, `Outside Business Hours`, `Deployment`, `Other`.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Category the SLO correction belongs to. Valid values are `Scheduled Maintenance`, `Outside Business Hours`, `Deployment`, `Other`.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param description Description of the correction being made.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the correction being made.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param duration Length of time in seconds for a specified `rrule` recurring SLO correction (required if specifying `rrule`)
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration Length of time in seconds for a specified `rrule` recurring SLO correction (required if specifying `rrule`)
         * 
         * @return builder
         * 
         */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param end Ending time of the correction in epoch seconds. Required for one time corrections, but optional if `rrule` is specified
         * 
         * @return builder
         * 
         */
        public Builder end(@Nullable Output<Integer> end) {
            $.end = end;
            return this;
        }

        /**
         * @param end Ending time of the correction in epoch seconds. Required for one time corrections, but optional if `rrule` is specified
         * 
         * @return builder
         * 
         */
        public Builder end(Integer end) {
            return end(Output.of(end));
        }

        /**
         * @param rrule Recurrence rules as defined in the iCalendar RFC 5545. Supported rules for SLO corrections are `FREQ`, `INTERVAL`, `COUNT` and `UNTIL`.
         * 
         * @return builder
         * 
         */
        public Builder rrule(@Nullable Output<String> rrule) {
            $.rrule = rrule;
            return this;
        }

        /**
         * @param rrule Recurrence rules as defined in the iCalendar RFC 5545. Supported rules for SLO corrections are `FREQ`, `INTERVAL`, `COUNT` and `UNTIL`.
         * 
         * @return builder
         * 
         */
        public Builder rrule(String rrule) {
            return rrule(Output.of(rrule));
        }

        /**
         * @param sloId ID of the SLO that this correction will be applied to.
         * 
         * @return builder
         * 
         */
        public Builder sloId(@Nullable Output<String> sloId) {
            $.sloId = sloId;
            return this;
        }

        /**
         * @param sloId ID of the SLO that this correction will be applied to.
         * 
         * @return builder
         * 
         */
        public Builder sloId(String sloId) {
            return sloId(Output.of(sloId));
        }

        /**
         * @param start Starting time of the correction in epoch seconds.
         * 
         * @return builder
         * 
         */
        public Builder start(@Nullable Output<Integer> start) {
            $.start = start;
            return this;
        }

        /**
         * @param start Starting time of the correction in epoch seconds.
         * 
         * @return builder
         * 
         */
        public Builder start(Integer start) {
            return start(Output.of(start));
        }

        /**
         * @param timezone The timezone to display in the UI for the correction times (defaults to &#34;UTC&#34;)
         * 
         * @return builder
         * 
         */
        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone The timezone to display in the UI for the correction times (defaults to &#34;UTC&#34;)
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        public SloCorrectionState build() {
            return $;
        }
    }

}
