// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class ObservabilityPipelineConfigProcessorsThrottle {
    /**
     * @return Optional list of fields used to group events before applying throttling.
     * 
     */
    private @Nullable List<String> groupBies;
    /**
     * @return The unique identifier for this processor.
     * 
     */
    private String id;
    /**
     * @return A Datadog search query used to determine which logs this processor targets.
     * 
     */
    private String include;
    /**
     * @return A list of component IDs whose output is used as the input for this processor.
     * 
     */
    private List<String> inputs;
    /**
     * @return The number of events to allow before throttling is applied.
     * 
     */
    private Integer threshold;
    /**
     * @return The time window in seconds over which the threshold applies.
     * 
     */
    private Double window;

    private ObservabilityPipelineConfigProcessorsThrottle() {}
    /**
     * @return Optional list of fields used to group events before applying throttling.
     * 
     */
    public List<String> groupBies() {
        return this.groupBies == null ? List.of() : this.groupBies;
    }
    /**
     * @return The unique identifier for this processor.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A Datadog search query used to determine which logs this processor targets.
     * 
     */
    public String include() {
        return this.include;
    }
    /**
     * @return A list of component IDs whose output is used as the input for this processor.
     * 
     */
    public List<String> inputs() {
        return this.inputs;
    }
    /**
     * @return The number of events to allow before throttling is applied.
     * 
     */
    public Integer threshold() {
        return this.threshold;
    }
    /**
     * @return The time window in seconds over which the threshold applies.
     * 
     */
    public Double window() {
        return this.window;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObservabilityPipelineConfigProcessorsThrottle defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> groupBies;
        private String id;
        private String include;
        private List<String> inputs;
        private Integer threshold;
        private Double window;
        public Builder() {}
        public Builder(ObservabilityPipelineConfigProcessorsThrottle defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.groupBies = defaults.groupBies;
    	      this.id = defaults.id;
    	      this.include = defaults.include;
    	      this.inputs = defaults.inputs;
    	      this.threshold = defaults.threshold;
    	      this.window = defaults.window;
        }

        @CustomType.Setter
        public Builder groupBies(@Nullable List<String> groupBies) {

            this.groupBies = groupBies;
            return this;
        }
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsThrottle", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder include(String include) {
            if (include == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsThrottle", "include");
            }
            this.include = include;
            return this;
        }
        @CustomType.Setter
        public Builder inputs(List<String> inputs) {
            if (inputs == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsThrottle", "inputs");
            }
            this.inputs = inputs;
            return this;
        }
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }
        @CustomType.Setter
        public Builder threshold(Integer threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsThrottle", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder window(Double window) {
            if (window == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsThrottle", "window");
            }
            this.window = window;
            return this;
        }
        public ObservabilityPipelineConfigProcessorsThrottle build() {
            final var _resultValue = new ObservabilityPipelineConfigProcessorsThrottle();
            _resultValue.groupBies = groupBies;
            _resultValue.id = id;
            _resultValue.include = include;
            _resultValue.inputs = inputs;
            _resultValue.threshold = threshold;
            _resultValue.window = window;
            return _resultValue;
        }
    }
}
