// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomAllocationRuleCostsToAllocateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomAllocationRuleCostsToAllocateArgs Empty = new CustomAllocationRuleCostsToAllocateArgs();

    /**
     * The condition to match. Valid values are `=`, `!=`, `is`, `is not`, `like`, `in`, `not in`.
     * 
     */
    @Import(name="condition")
    private @Nullable Output<String> condition;

    /**
     * @return The condition to match. Valid values are `=`, `!=`, `is`, `is not`, `like`, `in`, `not in`.
     * 
     */
    public Optional<Output<String>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * The tag key to filter on (e.g., `awsProduct`, `team`, `environment`).
     * 
     */
    @Import(name="tag")
    private @Nullable Output<String> tag;

    /**
     * @return The tag key to filter on (e.g., `awsProduct`, `team`, `environment`).
     * 
     */
    public Optional<Output<String>> tag() {
        return Optional.ofNullable(this.tag);
    }

    /**
     * The single tag value to match. Use this field for conditions like `=`, `!=`, `is`, `is not`, `like`. Do not use with `in` or `not in` conditions.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return The single tag value to match. Use this field for conditions like `=`, `!=`, `is`, `is not`, `like`. Do not use with `in` or `not in` conditions.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    /**
     * A list of tag values to match. Use this field for `in` or `not in` conditions only. Do not use with single-value conditions.
     * 
     */
    @Import(name="values")
    private @Nullable Output<List<String>> values;

    /**
     * @return A list of tag values to match. Use this field for `in` or `not in` conditions only. Do not use with single-value conditions.
     * 
     */
    public Optional<Output<List<String>>> values() {
        return Optional.ofNullable(this.values);
    }

    private CustomAllocationRuleCostsToAllocateArgs() {}

    private CustomAllocationRuleCostsToAllocateArgs(CustomAllocationRuleCostsToAllocateArgs $) {
        this.condition = $.condition;
        this.tag = $.tag;
        this.value = $.value;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomAllocationRuleCostsToAllocateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomAllocationRuleCostsToAllocateArgs $;

        public Builder() {
            $ = new CustomAllocationRuleCostsToAllocateArgs();
        }

        public Builder(CustomAllocationRuleCostsToAllocateArgs defaults) {
            $ = new CustomAllocationRuleCostsToAllocateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param condition The condition to match. Valid values are `=`, `!=`, `is`, `is not`, `like`, `in`, `not in`.
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable Output<String> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition The condition to match. Valid values are `=`, `!=`, `is`, `is not`, `like`, `in`, `not in`.
         * 
         * @return builder
         * 
         */
        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param tag The tag key to filter on (e.g., `awsProduct`, `team`, `environment`).
         * 
         * @return builder
         * 
         */
        public Builder tag(@Nullable Output<String> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag The tag key to filter on (e.g., `awsProduct`, `team`, `environment`).
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        /**
         * @param value The single tag value to match. Use this field for conditions like `=`, `!=`, `is`, `is not`, `like`. Do not use with `in` or `not in` conditions.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The single tag value to match. Use this field for conditions like `=`, `!=`, `is`, `is not`, `like`. Do not use with `in` or `not in` conditions.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        /**
         * @param values A list of tag values to match. Use this field for `in` or `not in` conditions only. Do not use with single-value conditions.
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values A list of tag values to match. Use this field for `in` or `not in` conditions only. Do not use with single-value conditions.
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values A list of tag values to match. Use this field for `in` or `not in` conditions only. Do not use with single-value conditions.
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public CustomAllocationRuleCostsToAllocateArgs build() {
            return $;
        }
    }

}
