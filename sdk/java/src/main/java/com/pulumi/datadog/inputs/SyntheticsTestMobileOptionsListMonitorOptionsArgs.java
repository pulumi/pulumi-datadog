// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticsTestMobileOptionsListMonitorOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticsTestMobileOptionsListMonitorOptionsArgs Empty = new SyntheticsTestMobileOptionsListMonitorOptionsArgs();

    /**
     * A message to include with a re-notification.
     * 
     */
    @Import(name="escalationMessage")
    private @Nullable Output<String> escalationMessage;

    /**
     * @return A message to include with a re-notification.
     * 
     */
    public Optional<Output<String>> escalationMessage() {
        return Optional.ofNullable(this.escalationMessage);
    }

    /**
     * Valid values are `show_all`, `hide_all`, `hide_query`, `hide_handles`.
     * 
     */
    @Import(name="notificationPresetName")
    private @Nullable Output<String> notificationPresetName;

    /**
     * @return Valid values are `show_all`, `hide_all`, `hide_query`, `hide_handles`.
     * 
     */
    public Optional<Output<String>> notificationPresetName() {
        return Optional.ofNullable(this.notificationPresetName);
    }

    /**
     * Specify a renotification frequency in minutes. Values available by default are `0`, `10`, `20`, `30`, `40`, `50`, `60`, `90`, `120`, `180`, `240`, `300`, `360`, `720`, `1440`. Defaults to `0`.
     * 
     */
    @Import(name="renotifyInterval")
    private @Nullable Output<Integer> renotifyInterval;

    /**
     * @return Specify a renotification frequency in minutes. Values available by default are `0`, `10`, `20`, `30`, `40`, `50`, `60`, `90`, `120`, `180`, `240`, `300`, `360`, `720`, `1440`. Defaults to `0`.
     * 
     */
    public Optional<Output<Integer>> renotifyInterval() {
        return Optional.ofNullable(this.renotifyInterval);
    }

    /**
     * The number of times a monitor renotifies. It can only be set if `renotify_interval` is set.
     * 
     */
    @Import(name="renotifyOccurrences")
    private @Nullable Output<Integer> renotifyOccurrences;

    /**
     * @return The number of times a monitor renotifies. It can only be set if `renotify_interval` is set.
     * 
     */
    public Optional<Output<Integer>> renotifyOccurrences() {
        return Optional.ofNullable(this.renotifyOccurrences);
    }

    private SyntheticsTestMobileOptionsListMonitorOptionsArgs() {}

    private SyntheticsTestMobileOptionsListMonitorOptionsArgs(SyntheticsTestMobileOptionsListMonitorOptionsArgs $) {
        this.escalationMessage = $.escalationMessage;
        this.notificationPresetName = $.notificationPresetName;
        this.renotifyInterval = $.renotifyInterval;
        this.renotifyOccurrences = $.renotifyOccurrences;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticsTestMobileOptionsListMonitorOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticsTestMobileOptionsListMonitorOptionsArgs $;

        public Builder() {
            $ = new SyntheticsTestMobileOptionsListMonitorOptionsArgs();
        }

        public Builder(SyntheticsTestMobileOptionsListMonitorOptionsArgs defaults) {
            $ = new SyntheticsTestMobileOptionsListMonitorOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param escalationMessage A message to include with a re-notification.
         * 
         * @return builder
         * 
         */
        public Builder escalationMessage(@Nullable Output<String> escalationMessage) {
            $.escalationMessage = escalationMessage;
            return this;
        }

        /**
         * @param escalationMessage A message to include with a re-notification.
         * 
         * @return builder
         * 
         */
        public Builder escalationMessage(String escalationMessage) {
            return escalationMessage(Output.of(escalationMessage));
        }

        /**
         * @param notificationPresetName Valid values are `show_all`, `hide_all`, `hide_query`, `hide_handles`.
         * 
         * @return builder
         * 
         */
        public Builder notificationPresetName(@Nullable Output<String> notificationPresetName) {
            $.notificationPresetName = notificationPresetName;
            return this;
        }

        /**
         * @param notificationPresetName Valid values are `show_all`, `hide_all`, `hide_query`, `hide_handles`.
         * 
         * @return builder
         * 
         */
        public Builder notificationPresetName(String notificationPresetName) {
            return notificationPresetName(Output.of(notificationPresetName));
        }

        /**
         * @param renotifyInterval Specify a renotification frequency in minutes. Values available by default are `0`, `10`, `20`, `30`, `40`, `50`, `60`, `90`, `120`, `180`, `240`, `300`, `360`, `720`, `1440`. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder renotifyInterval(@Nullable Output<Integer> renotifyInterval) {
            $.renotifyInterval = renotifyInterval;
            return this;
        }

        /**
         * @param renotifyInterval Specify a renotification frequency in minutes. Values available by default are `0`, `10`, `20`, `30`, `40`, `50`, `60`, `90`, `120`, `180`, `240`, `300`, `360`, `720`, `1440`. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder renotifyInterval(Integer renotifyInterval) {
            return renotifyInterval(Output.of(renotifyInterval));
        }

        /**
         * @param renotifyOccurrences The number of times a monitor renotifies. It can only be set if `renotify_interval` is set.
         * 
         * @return builder
         * 
         */
        public Builder renotifyOccurrences(@Nullable Output<Integer> renotifyOccurrences) {
            $.renotifyOccurrences = renotifyOccurrences;
            return this;
        }

        /**
         * @param renotifyOccurrences The number of times a monitor renotifies. It can only be set if `renotify_interval` is set.
         * 
         * @return builder
         * 
         */
        public Builder renotifyOccurrences(Integer renotifyOccurrences) {
            return renotifyOccurrences(Output.of(renotifyOccurrences));
        }

        public SyntheticsTestMobileOptionsListMonitorOptionsArgs build() {
            return $;
        }
    }

}
