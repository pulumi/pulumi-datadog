// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.GetLogsPipelinesLogsPipelineFilter;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLogsPipelinesLogsPipeline {
    /**
     * @return Description of the pipeline
     * 
     */
    private String description;
    /**
     * @return Pipelines filter
     * 
     */
    private List<GetLogsPipelinesLogsPipelineFilter> filters;
    /**
     * @return ID of the pipeline
     * 
     */
    private String id;
    /**
     * @return Whether or not the pipeline is enabled.
     * 
     */
    private Boolean isEnabled;
    /**
     * @return Whether or not the pipeline can be edited.
     * 
     */
    private Boolean isReadOnly;
    /**
     * @return The name of the pipeline.
     * 
     */
    private String name;
    /**
     * @return Tags of the pipeline
     * 
     */
    private List<String> tags;
    /**
     * @return Whether or not the pipeline can be edited.
     * 
     */
    private String type;

    private GetLogsPipelinesLogsPipeline() {}
    /**
     * @return Description of the pipeline
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Pipelines filter
     * 
     */
    public List<GetLogsPipelinesLogsPipelineFilter> filters() {
        return this.filters;
    }
    /**
     * @return ID of the pipeline
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether or not the pipeline is enabled.
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }
    /**
     * @return Whether or not the pipeline can be edited.
     * 
     */
    public Boolean isReadOnly() {
        return this.isReadOnly;
    }
    /**
     * @return The name of the pipeline.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Tags of the pipeline
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Whether or not the pipeline can be edited.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLogsPipelinesLogsPipeline defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private List<GetLogsPipelinesLogsPipelineFilter> filters;
        private String id;
        private Boolean isEnabled;
        private Boolean isReadOnly;
        private String name;
        private List<String> tags;
        private String type;
        public Builder() {}
        public Builder(GetLogsPipelinesLogsPipeline defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isEnabled = defaults.isEnabled;
    	      this.isReadOnly = defaults.isReadOnly;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetLogsPipelinesLogsPipeline", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder filters(List<GetLogsPipelinesLogsPipelineFilter> filters) {
            if (filters == null) {
              throw new MissingRequiredPropertyException("GetLogsPipelinesLogsPipeline", "filters");
            }
            this.filters = filters;
            return this;
        }
        public Builder filters(GetLogsPipelinesLogsPipelineFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLogsPipelinesLogsPipeline", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(Boolean isEnabled) {
            if (isEnabled == null) {
              throw new MissingRequiredPropertyException("GetLogsPipelinesLogsPipeline", "isEnabled");
            }
            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isReadOnly(Boolean isReadOnly) {
            if (isReadOnly == null) {
              throw new MissingRequiredPropertyException("GetLogsPipelinesLogsPipeline", "isReadOnly");
            }
            this.isReadOnly = isReadOnly;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetLogsPipelinesLogsPipeline", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetLogsPipelinesLogsPipeline", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetLogsPipelinesLogsPipeline", "type");
            }
            this.type = type;
            return this;
        }
        public GetLogsPipelinesLogsPipeline build() {
            final var _resultValue = new GetLogsPipelinesLogsPipeline();
            _resultValue.description = description;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.isEnabled = isEnabled;
            _resultValue.isReadOnly = isReadOnly;
            _resultValue.name = name;
            _resultValue.tags = tags;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
