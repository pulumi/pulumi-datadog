// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RumRetentionFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final RumRetentionFilterArgs Empty = new RumRetentionFilterArgs();

    /**
     * RUM application ID.
     * 
     */
    @Import(name="applicationId", required=true)
    private Output<String> applicationId;

    /**
     * @return RUM application ID.
     * 
     */
    public Output<String> applicationId() {
        return this.applicationId;
    }

    /**
     * Whether the retention filter is to be enabled. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the retention filter is to be enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The type of RUM events to filter on.
     * 
     */
    @Import(name="eventType", required=true)
    private Output<String> eventType;

    /**
     * @return The type of RUM events to filter on.
     * 
     */
    public Output<String> eventType() {
        return this.eventType;
    }

    /**
     * The name of a RUM retention filter.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of a RUM retention filter.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The Query string for a RUM retention filter. Defaults to `&#34;&#34;`.
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return The Query string for a RUM retention filter. Defaults to `&#34;&#34;`.
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * The sample rate for a RUM retention filter, between 0 and 100.
     * 
     */
    @Import(name="sampleRate", required=true)
    private Output<Integer> sampleRate;

    /**
     * @return The sample rate for a RUM retention filter, between 0 and 100.
     * 
     */
    public Output<Integer> sampleRate() {
        return this.sampleRate;
    }

    private RumRetentionFilterArgs() {}

    private RumRetentionFilterArgs(RumRetentionFilterArgs $) {
        this.applicationId = $.applicationId;
        this.enabled = $.enabled;
        this.eventType = $.eventType;
        this.name = $.name;
        this.query = $.query;
        this.sampleRate = $.sampleRate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RumRetentionFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RumRetentionFilterArgs $;

        public Builder() {
            $ = new RumRetentionFilterArgs();
        }

        public Builder(RumRetentionFilterArgs defaults) {
            $ = new RumRetentionFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId RUM application ID.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId RUM application ID.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param enabled Whether the retention filter is to be enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the retention filter is to be enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param eventType The type of RUM events to filter on.
         * 
         * @return builder
         * 
         */
        public Builder eventType(Output<String> eventType) {
            $.eventType = eventType;
            return this;
        }

        /**
         * @param eventType The type of RUM events to filter on.
         * 
         * @return builder
         * 
         */
        public Builder eventType(String eventType) {
            return eventType(Output.of(eventType));
        }

        /**
         * @param name The name of a RUM retention filter.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of a RUM retention filter.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param query The Query string for a RUM retention filter. Defaults to `&#34;&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query The Query string for a RUM retention filter. Defaults to `&#34;&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param sampleRate The sample rate for a RUM retention filter, between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder sampleRate(Output<Integer> sampleRate) {
            $.sampleRate = sampleRate;
            return this;
        }

        /**
         * @param sampleRate The sample rate for a RUM retention filter, between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder sampleRate(Integer sampleRate) {
            return sampleRate(Output.of(sampleRate));
        }

        public RumRetentionFilterArgs build() {
            if ($.applicationId == null) {
                throw new MissingRequiredPropertyException("RumRetentionFilterArgs", "applicationId");
            }
            if ($.eventType == null) {
                throw new MissingRequiredPropertyException("RumRetentionFilterArgs", "eventType");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("RumRetentionFilterArgs", "name");
            }
            if ($.sampleRate == null) {
                throw new MissingRequiredPropertyException("RumRetentionFilterArgs", "sampleRate");
            }
            return $;
        }
    }

}
