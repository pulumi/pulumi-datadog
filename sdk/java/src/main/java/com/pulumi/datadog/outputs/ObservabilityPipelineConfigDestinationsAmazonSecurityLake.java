// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigDestinationsAmazonSecurityLakeAuth;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigDestinationsAmazonSecurityLakeTls;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ObservabilityPipelineConfigDestinationsAmazonSecurityLake {
    /**
     * @return AWS authentication credentials used for accessing AWS services. If omitted, the system&#39;s default credentials are used (for example, the IAM role and environment variables).
     * 
     */
    private @Nullable ObservabilityPipelineConfigDestinationsAmazonSecurityLakeAuth auth;
    /**
     * @return Name of the Amazon S3 bucket in Security Lake (3-63 characters).
     * 
     */
    private String bucket;
    /**
     * @return Custom source name for the logs in Security Lake.
     * 
     */
    private String customSourceName;
    /**
     * @return Unique identifier for the destination component.
     * 
     */
    private String id;
    /**
     * @return A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    private List<String> inputs;
    /**
     * @return AWS region of the Security Lake bucket.
     * 
     */
    private String region;
    /**
     * @return Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    private @Nullable ObservabilityPipelineConfigDestinationsAmazonSecurityLakeTls tls;

    private ObservabilityPipelineConfigDestinationsAmazonSecurityLake() {}
    /**
     * @return AWS authentication credentials used for accessing AWS services. If omitted, the system&#39;s default credentials are used (for example, the IAM role and environment variables).
     * 
     */
    public Optional<ObservabilityPipelineConfigDestinationsAmazonSecurityLakeAuth> auth() {
        return Optional.ofNullable(this.auth);
    }
    /**
     * @return Name of the Amazon S3 bucket in Security Lake (3-63 characters).
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return Custom source name for the logs in Security Lake.
     * 
     */
    public String customSourceName() {
        return this.customSourceName;
    }
    /**
     * @return Unique identifier for the destination component.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    public List<String> inputs() {
        return this.inputs;
    }
    /**
     * @return AWS region of the Security Lake bucket.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    public Optional<ObservabilityPipelineConfigDestinationsAmazonSecurityLakeTls> tls() {
        return Optional.ofNullable(this.tls);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObservabilityPipelineConfigDestinationsAmazonSecurityLake defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ObservabilityPipelineConfigDestinationsAmazonSecurityLakeAuth auth;
        private String bucket;
        private String customSourceName;
        private String id;
        private List<String> inputs;
        private String region;
        private @Nullable ObservabilityPipelineConfigDestinationsAmazonSecurityLakeTls tls;
        public Builder() {}
        public Builder(ObservabilityPipelineConfigDestinationsAmazonSecurityLake defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auth = defaults.auth;
    	      this.bucket = defaults.bucket;
    	      this.customSourceName = defaults.customSourceName;
    	      this.id = defaults.id;
    	      this.inputs = defaults.inputs;
    	      this.region = defaults.region;
    	      this.tls = defaults.tls;
        }

        @CustomType.Setter
        public Builder auth(@Nullable ObservabilityPipelineConfigDestinationsAmazonSecurityLakeAuth auth) {

            this.auth = auth;
            return this;
        }
        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsAmazonSecurityLake", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder customSourceName(String customSourceName) {
            if (customSourceName == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsAmazonSecurityLake", "customSourceName");
            }
            this.customSourceName = customSourceName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsAmazonSecurityLake", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inputs(List<String> inputs) {
            if (inputs == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsAmazonSecurityLake", "inputs");
            }
            this.inputs = inputs;
            return this;
        }
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsAmazonSecurityLake", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder tls(@Nullable ObservabilityPipelineConfigDestinationsAmazonSecurityLakeTls tls) {

            this.tls = tls;
            return this;
        }
        public ObservabilityPipelineConfigDestinationsAmazonSecurityLake build() {
            final var _resultValue = new ObservabilityPipelineConfigDestinationsAmazonSecurityLake();
            _resultValue.auth = auth;
            _resultValue.bucket = bucket;
            _resultValue.customSourceName = customSourceName;
            _resultValue.id = id;
            _resultValue.inputs = inputs;
            _resultValue.region = region;
            _resultValue.tls = tls;
            return _resultValue;
        }
    }
}
