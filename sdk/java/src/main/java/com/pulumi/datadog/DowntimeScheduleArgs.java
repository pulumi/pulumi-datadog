// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.DowntimeScheduleMonitorIdentifierArgs;
import com.pulumi.datadog.inputs.DowntimeScheduleOneTimeScheduleArgs;
import com.pulumi.datadog.inputs.DowntimeScheduleRecurringScheduleArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DowntimeScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final DowntimeScheduleArgs Empty = new DowntimeScheduleArgs();

    /**
     * The timezone in which to display the downtime&#39;s start and end times in Datadog applications. This is not used as an offset for scheduling.
     * 
     */
    @Import(name="displayTimezone")
    private @Nullable Output<String> displayTimezone;

    /**
     * @return The timezone in which to display the downtime&#39;s start and end times in Datadog applications. This is not used as an offset for scheduling.
     * 
     */
    public Optional<Output<String>> displayTimezone() {
        return Optional.ofNullable(this.displayTimezone);
    }

    /**
     * A message to include with notifications for this downtime. Email notifications can be sent to specific users by using the same `@username` notation as events.
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return A message to include with notifications for this downtime. Email notifications can be sent to specific users by using the same `@username` notation as events.
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    @Import(name="monitorIdentifier")
    private @Nullable Output<DowntimeScheduleMonitorIdentifierArgs> monitorIdentifier;

    public Optional<Output<DowntimeScheduleMonitorIdentifierArgs>> monitorIdentifier() {
        return Optional.ofNullable(this.monitorIdentifier);
    }

    /**
     * If the first recovery notification during a downtime should be muted.
     * 
     */
    @Import(name="muteFirstRecoveryNotification")
    private @Nullable Output<Boolean> muteFirstRecoveryNotification;

    /**
     * @return If the first recovery notification during a downtime should be muted.
     * 
     */
    public Optional<Output<Boolean>> muteFirstRecoveryNotification() {
        return Optional.ofNullable(this.muteFirstRecoveryNotification);
    }

    /**
     * States that will trigger a monitor notification when the `notify_end_types` action occurs.
     * 
     */
    @Import(name="notifyEndStates")
    private @Nullable Output<List<String>> notifyEndStates;

    /**
     * @return States that will trigger a monitor notification when the `notify_end_types` action occurs.
     * 
     */
    public Optional<Output<List<String>>> notifyEndStates() {
        return Optional.ofNullable(this.notifyEndStates);
    }

    /**
     * Actions that will trigger a monitor notification if the downtime is in the `notify_end_types` state.
     * 
     */
    @Import(name="notifyEndTypes")
    private @Nullable Output<List<String>> notifyEndTypes;

    /**
     * @return Actions that will trigger a monitor notification if the downtime is in the `notify_end_types` state.
     * 
     */
    public Optional<Output<List<String>>> notifyEndTypes() {
        return Optional.ofNullable(this.notifyEndTypes);
    }

    @Import(name="oneTimeSchedule")
    private @Nullable Output<DowntimeScheduleOneTimeScheduleArgs> oneTimeSchedule;

    public Optional<Output<DowntimeScheduleOneTimeScheduleArgs>> oneTimeSchedule() {
        return Optional.ofNullable(this.oneTimeSchedule);
    }

    @Import(name="recurringSchedule")
    private @Nullable Output<DowntimeScheduleRecurringScheduleArgs> recurringSchedule;

    public Optional<Output<DowntimeScheduleRecurringScheduleArgs>> recurringSchedule() {
        return Optional.ofNullable(this.recurringSchedule);
    }

    /**
     * The scope to which the downtime applies. Must follow the [common search syntax](https://docs.datadoghq.com/logs/explorer/search_syntax/).
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return The scope to which the downtime applies. Must follow the [common search syntax](https://docs.datadoghq.com/logs/explorer/search_syntax/).
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    private DowntimeScheduleArgs() {}

    private DowntimeScheduleArgs(DowntimeScheduleArgs $) {
        this.displayTimezone = $.displayTimezone;
        this.message = $.message;
        this.monitorIdentifier = $.monitorIdentifier;
        this.muteFirstRecoveryNotification = $.muteFirstRecoveryNotification;
        this.notifyEndStates = $.notifyEndStates;
        this.notifyEndTypes = $.notifyEndTypes;
        this.oneTimeSchedule = $.oneTimeSchedule;
        this.recurringSchedule = $.recurringSchedule;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DowntimeScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DowntimeScheduleArgs $;

        public Builder() {
            $ = new DowntimeScheduleArgs();
        }

        public Builder(DowntimeScheduleArgs defaults) {
            $ = new DowntimeScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayTimezone The timezone in which to display the downtime&#39;s start and end times in Datadog applications. This is not used as an offset for scheduling.
         * 
         * @return builder
         * 
         */
        public Builder displayTimezone(@Nullable Output<String> displayTimezone) {
            $.displayTimezone = displayTimezone;
            return this;
        }

        /**
         * @param displayTimezone The timezone in which to display the downtime&#39;s start and end times in Datadog applications. This is not used as an offset for scheduling.
         * 
         * @return builder
         * 
         */
        public Builder displayTimezone(String displayTimezone) {
            return displayTimezone(Output.of(displayTimezone));
        }

        /**
         * @param message A message to include with notifications for this downtime. Email notifications can be sent to specific users by using the same `@username` notation as events.
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message A message to include with notifications for this downtime. Email notifications can be sent to specific users by using the same `@username` notation as events.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        public Builder monitorIdentifier(@Nullable Output<DowntimeScheduleMonitorIdentifierArgs> monitorIdentifier) {
            $.monitorIdentifier = monitorIdentifier;
            return this;
        }

        public Builder monitorIdentifier(DowntimeScheduleMonitorIdentifierArgs monitorIdentifier) {
            return monitorIdentifier(Output.of(monitorIdentifier));
        }

        /**
         * @param muteFirstRecoveryNotification If the first recovery notification during a downtime should be muted.
         * 
         * @return builder
         * 
         */
        public Builder muteFirstRecoveryNotification(@Nullable Output<Boolean> muteFirstRecoveryNotification) {
            $.muteFirstRecoveryNotification = muteFirstRecoveryNotification;
            return this;
        }

        /**
         * @param muteFirstRecoveryNotification If the first recovery notification during a downtime should be muted.
         * 
         * @return builder
         * 
         */
        public Builder muteFirstRecoveryNotification(Boolean muteFirstRecoveryNotification) {
            return muteFirstRecoveryNotification(Output.of(muteFirstRecoveryNotification));
        }

        /**
         * @param notifyEndStates States that will trigger a monitor notification when the `notify_end_types` action occurs.
         * 
         * @return builder
         * 
         */
        public Builder notifyEndStates(@Nullable Output<List<String>> notifyEndStates) {
            $.notifyEndStates = notifyEndStates;
            return this;
        }

        /**
         * @param notifyEndStates States that will trigger a monitor notification when the `notify_end_types` action occurs.
         * 
         * @return builder
         * 
         */
        public Builder notifyEndStates(List<String> notifyEndStates) {
            return notifyEndStates(Output.of(notifyEndStates));
        }

        /**
         * @param notifyEndStates States that will trigger a monitor notification when the `notify_end_types` action occurs.
         * 
         * @return builder
         * 
         */
        public Builder notifyEndStates(String... notifyEndStates) {
            return notifyEndStates(List.of(notifyEndStates));
        }

        /**
         * @param notifyEndTypes Actions that will trigger a monitor notification if the downtime is in the `notify_end_types` state.
         * 
         * @return builder
         * 
         */
        public Builder notifyEndTypes(@Nullable Output<List<String>> notifyEndTypes) {
            $.notifyEndTypes = notifyEndTypes;
            return this;
        }

        /**
         * @param notifyEndTypes Actions that will trigger a monitor notification if the downtime is in the `notify_end_types` state.
         * 
         * @return builder
         * 
         */
        public Builder notifyEndTypes(List<String> notifyEndTypes) {
            return notifyEndTypes(Output.of(notifyEndTypes));
        }

        /**
         * @param notifyEndTypes Actions that will trigger a monitor notification if the downtime is in the `notify_end_types` state.
         * 
         * @return builder
         * 
         */
        public Builder notifyEndTypes(String... notifyEndTypes) {
            return notifyEndTypes(List.of(notifyEndTypes));
        }

        public Builder oneTimeSchedule(@Nullable Output<DowntimeScheduleOneTimeScheduleArgs> oneTimeSchedule) {
            $.oneTimeSchedule = oneTimeSchedule;
            return this;
        }

        public Builder oneTimeSchedule(DowntimeScheduleOneTimeScheduleArgs oneTimeSchedule) {
            return oneTimeSchedule(Output.of(oneTimeSchedule));
        }

        public Builder recurringSchedule(@Nullable Output<DowntimeScheduleRecurringScheduleArgs> recurringSchedule) {
            $.recurringSchedule = recurringSchedule;
            return this;
        }

        public Builder recurringSchedule(DowntimeScheduleRecurringScheduleArgs recurringSchedule) {
            return recurringSchedule(Output.of(recurringSchedule));
        }

        /**
         * @param scope The scope to which the downtime applies. Must follow the [common search syntax](https://docs.datadoghq.com/logs/explorer/search_syntax/).
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope to which the downtime applies. Must follow the [common search syntax](https://docs.datadoghq.com/logs/explorer/search_syntax/).
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public DowntimeScheduleArgs build() {
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            return $;
        }
    }

}
