// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.CostBudgetEntryArgs;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CostBudgetState extends com.pulumi.resources.ResourceArgs {

    public static final CostBudgetState Empty = new CostBudgetState();

    /**
     * The ID of the budget.
     * 
     */
    @Import(name="budgetId")
    private @Nullable Output<String> budgetId;

    /**
     * @return The ID of the budget.
     * 
     */
    public Optional<Output<String>> budgetId() {
        return Optional.ofNullable(this.budgetId);
    }

    /**
     * The month when the budget ends (YYYYMM).
     * 
     */
    @Import(name="endMonth")
    private @Nullable Output<Integer> endMonth;

    /**
     * @return The month when the budget ends (YYYYMM).
     * 
     */
    public Optional<Output<Integer>> endMonth() {
        return Optional.ofNullable(this.endMonth);
    }

    /**
     * The entries of the budget.
     * 
     */
    @Import(name="entries")
    private @Nullable Output<List<CostBudgetEntryArgs>> entries;

    /**
     * @return The entries of the budget.
     * 
     */
    public Optional<Output<List<CostBudgetEntryArgs>>> entries() {
        return Optional.ofNullable(this.entries);
    }

    /**
     * The cost query used to track against the budget.
     * 
     */
    @Import(name="metricsQuery")
    private @Nullable Output<String> metricsQuery;

    /**
     * @return The cost query used to track against the budget.
     * 
     */
    public Optional<Output<String>> metricsQuery() {
        return Optional.ofNullable(this.metricsQuery);
    }

    /**
     * The name of the budget.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the budget.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The month when the budget starts (YYYYMM).
     * 
     */
    @Import(name="startMonth")
    private @Nullable Output<Integer> startMonth;

    /**
     * @return The month when the budget starts (YYYYMM).
     * 
     */
    public Optional<Output<Integer>> startMonth() {
        return Optional.ofNullable(this.startMonth);
    }

    /**
     * The sum of all budget entries&#39; amounts.
     * 
     */
    @Import(name="totalAmount")
    private @Nullable Output<Double> totalAmount;

    /**
     * @return The sum of all budget entries&#39; amounts.
     * 
     */
    public Optional<Output<Double>> totalAmount() {
        return Optional.ofNullable(this.totalAmount);
    }

    private CostBudgetState() {}

    private CostBudgetState(CostBudgetState $) {
        this.budgetId = $.budgetId;
        this.endMonth = $.endMonth;
        this.entries = $.entries;
        this.metricsQuery = $.metricsQuery;
        this.name = $.name;
        this.startMonth = $.startMonth;
        this.totalAmount = $.totalAmount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CostBudgetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CostBudgetState $;

        public Builder() {
            $ = new CostBudgetState();
        }

        public Builder(CostBudgetState defaults) {
            $ = new CostBudgetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param budgetId The ID of the budget.
         * 
         * @return builder
         * 
         */
        public Builder budgetId(@Nullable Output<String> budgetId) {
            $.budgetId = budgetId;
            return this;
        }

        /**
         * @param budgetId The ID of the budget.
         * 
         * @return builder
         * 
         */
        public Builder budgetId(String budgetId) {
            return budgetId(Output.of(budgetId));
        }

        /**
         * @param endMonth The month when the budget ends (YYYYMM).
         * 
         * @return builder
         * 
         */
        public Builder endMonth(@Nullable Output<Integer> endMonth) {
            $.endMonth = endMonth;
            return this;
        }

        /**
         * @param endMonth The month when the budget ends (YYYYMM).
         * 
         * @return builder
         * 
         */
        public Builder endMonth(Integer endMonth) {
            return endMonth(Output.of(endMonth));
        }

        /**
         * @param entries The entries of the budget.
         * 
         * @return builder
         * 
         */
        public Builder entries(@Nullable Output<List<CostBudgetEntryArgs>> entries) {
            $.entries = entries;
            return this;
        }

        /**
         * @param entries The entries of the budget.
         * 
         * @return builder
         * 
         */
        public Builder entries(List<CostBudgetEntryArgs> entries) {
            return entries(Output.of(entries));
        }

        /**
         * @param entries The entries of the budget.
         * 
         * @return builder
         * 
         */
        public Builder entries(CostBudgetEntryArgs... entries) {
            return entries(List.of(entries));
        }

        /**
         * @param metricsQuery The cost query used to track against the budget.
         * 
         * @return builder
         * 
         */
        public Builder metricsQuery(@Nullable Output<String> metricsQuery) {
            $.metricsQuery = metricsQuery;
            return this;
        }

        /**
         * @param metricsQuery The cost query used to track against the budget.
         * 
         * @return builder
         * 
         */
        public Builder metricsQuery(String metricsQuery) {
            return metricsQuery(Output.of(metricsQuery));
        }

        /**
         * @param name The name of the budget.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the budget.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param startMonth The month when the budget starts (YYYYMM).
         * 
         * @return builder
         * 
         */
        public Builder startMonth(@Nullable Output<Integer> startMonth) {
            $.startMonth = startMonth;
            return this;
        }

        /**
         * @param startMonth The month when the budget starts (YYYYMM).
         * 
         * @return builder
         * 
         */
        public Builder startMonth(Integer startMonth) {
            return startMonth(Output.of(startMonth));
        }

        /**
         * @param totalAmount The sum of all budget entries&#39; amounts.
         * 
         * @return builder
         * 
         */
        public Builder totalAmount(@Nullable Output<Double> totalAmount) {
            $.totalAmount = totalAmount;
            return this;
        }

        /**
         * @param totalAmount The sum of all budget entries&#39; amounts.
         * 
         * @return builder
         * 
         */
        public Builder totalAmount(Double totalAmount) {
            return totalAmount(Output.of(totalAmount));
        }

        public CostBudgetState build() {
            return $;
        }
    }

}
