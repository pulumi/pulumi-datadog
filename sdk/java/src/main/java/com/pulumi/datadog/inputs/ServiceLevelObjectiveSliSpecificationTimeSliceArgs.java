// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ServiceLevelObjectiveSliSpecificationTimeSliceQueryArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceLevelObjectiveSliSpecificationTimeSliceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceLevelObjectiveSliSpecificationTimeSliceArgs Empty = new ServiceLevelObjectiveSliSpecificationTimeSliceArgs();

    /**
     * The comparator used to compare the SLI value to the threshold. Valid values are `&gt;`, `&gt;=`, `&lt;`, `&lt;=`.
     * 
     */
    @Import(name="comparator", required=true)
    private Output<String> comparator;

    /**
     * @return The comparator used to compare the SLI value to the threshold. Valid values are `&gt;`, `&gt;=`, `&lt;`, `&lt;=`.
     * 
     */
    public Output<String> comparator() {
        return this.comparator;
    }

    /**
     * A timeseries query, containing named data-source-specific queries and a formula involving the named queries.
     * 
     */
    @Import(name="query", required=true)
    private Output<ServiceLevelObjectiveSliSpecificationTimeSliceQueryArgs> query;

    /**
     * @return A timeseries query, containing named data-source-specific queries and a formula involving the named queries.
     * 
     */
    public Output<ServiceLevelObjectiveSliSpecificationTimeSliceQueryArgs> query() {
        return this.query;
    }

    /**
     * The interval used when querying data, which defines the size of a time slice. Valid values are `60`, `300`. Defaults to `300`.
     * 
     */
    @Import(name="queryIntervalSeconds")
    private @Nullable Output<Integer> queryIntervalSeconds;

    /**
     * @return The interval used when querying data, which defines the size of a time slice. Valid values are `60`, `300`. Defaults to `300`.
     * 
     */
    public Optional<Output<Integer>> queryIntervalSeconds() {
        return Optional.ofNullable(this.queryIntervalSeconds);
    }

    /**
     * The threshold value to which each SLI value will be compared.
     * 
     */
    @Import(name="threshold", required=true)
    private Output<Double> threshold;

    /**
     * @return The threshold value to which each SLI value will be compared.
     * 
     */
    public Output<Double> threshold() {
        return this.threshold;
    }

    private ServiceLevelObjectiveSliSpecificationTimeSliceArgs() {}

    private ServiceLevelObjectiveSliSpecificationTimeSliceArgs(ServiceLevelObjectiveSliSpecificationTimeSliceArgs $) {
        this.comparator = $.comparator;
        this.query = $.query;
        this.queryIntervalSeconds = $.queryIntervalSeconds;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceLevelObjectiveSliSpecificationTimeSliceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceLevelObjectiveSliSpecificationTimeSliceArgs $;

        public Builder() {
            $ = new ServiceLevelObjectiveSliSpecificationTimeSliceArgs();
        }

        public Builder(ServiceLevelObjectiveSliSpecificationTimeSliceArgs defaults) {
            $ = new ServiceLevelObjectiveSliSpecificationTimeSliceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comparator The comparator used to compare the SLI value to the threshold. Valid values are `&gt;`, `&gt;=`, `&lt;`, `&lt;=`.
         * 
         * @return builder
         * 
         */
        public Builder comparator(Output<String> comparator) {
            $.comparator = comparator;
            return this;
        }

        /**
         * @param comparator The comparator used to compare the SLI value to the threshold. Valid values are `&gt;`, `&gt;=`, `&lt;`, `&lt;=`.
         * 
         * @return builder
         * 
         */
        public Builder comparator(String comparator) {
            return comparator(Output.of(comparator));
        }

        /**
         * @param query A timeseries query, containing named data-source-specific queries and a formula involving the named queries.
         * 
         * @return builder
         * 
         */
        public Builder query(Output<ServiceLevelObjectiveSliSpecificationTimeSliceQueryArgs> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query A timeseries query, containing named data-source-specific queries and a formula involving the named queries.
         * 
         * @return builder
         * 
         */
        public Builder query(ServiceLevelObjectiveSliSpecificationTimeSliceQueryArgs query) {
            return query(Output.of(query));
        }

        /**
         * @param queryIntervalSeconds The interval used when querying data, which defines the size of a time slice. Valid values are `60`, `300`. Defaults to `300`.
         * 
         * @return builder
         * 
         */
        public Builder queryIntervalSeconds(@Nullable Output<Integer> queryIntervalSeconds) {
            $.queryIntervalSeconds = queryIntervalSeconds;
            return this;
        }

        /**
         * @param queryIntervalSeconds The interval used when querying data, which defines the size of a time slice. Valid values are `60`, `300`. Defaults to `300`.
         * 
         * @return builder
         * 
         */
        public Builder queryIntervalSeconds(Integer queryIntervalSeconds) {
            return queryIntervalSeconds(Output.of(queryIntervalSeconds));
        }

        /**
         * @param threshold The threshold value to which each SLI value will be compared.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold The threshold value to which each SLI value will be compared.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        public ServiceLevelObjectiveSliSpecificationTimeSliceArgs build() {
            if ($.comparator == null) {
                throw new MissingRequiredPropertyException("ServiceLevelObjectiveSliSpecificationTimeSliceArgs", "comparator");
            }
            if ($.query == null) {
                throw new MissingRequiredPropertyException("ServiceLevelObjectiveSliSpecificationTimeSliceArgs", "query");
            }
            if ($.threshold == null) {
                throw new MissingRequiredPropertyException("ServiceLevelObjectiveSliSpecificationTimeSliceArgs", "threshold");
            }
            return $;
        }
    }

}
