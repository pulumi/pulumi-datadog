// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrgConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final OrgConnectionState Empty = new OrgConnectionState();

    /**
     * Set of connection types to enable for this connection (., metrics, logs).
     * 
     */
    @Import(name="connectionTypes")
    private @Nullable Output<List<String>> connectionTypes;

    /**
     * @return Set of connection types to enable for this connection (., metrics, logs).
     * 
     */
    public Optional<Output<List<String>>> connectionTypes() {
        return Optional.ofNullable(this.connectionTypes);
    }

    /**
     * Timestamp when the connection was created (RFC 3339).
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Timestamp when the connection was created (RFC 3339).
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Creator user ID (UUID).
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return Creator user ID (UUID).
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * UUID of the sink (destination) organization. Must be a valid UUID.
     * 
     */
    @Import(name="sinkOrgId")
    private @Nullable Output<String> sinkOrgId;

    /**
     * @return UUID of the sink (destination) organization. Must be a valid UUID.
     * 
     */
    public Optional<Output<String>> sinkOrgId() {
        return Optional.ofNullable(this.sinkOrgId);
    }

    /**
     * Name of the sink (destination) organization.
     * 
     */
    @Import(name="sinkOrgName")
    private @Nullable Output<String> sinkOrgName;

    /**
     * @return Name of the sink (destination) organization.
     * 
     */
    public Optional<Output<String>> sinkOrgName() {
        return Optional.ofNullable(this.sinkOrgName);
    }

    /**
     * UUID of the source (current) organization.
     * 
     */
    @Import(name="sourceOrgId")
    private @Nullable Output<String> sourceOrgId;

    /**
     * @return UUID of the source (current) organization.
     * 
     */
    public Optional<Output<String>> sourceOrgId() {
        return Optional.ofNullable(this.sourceOrgId);
    }

    /**
     * Name of the source organization.
     * 
     */
    @Import(name="sourceOrgName")
    private @Nullable Output<String> sourceOrgName;

    /**
     * @return Name of the source organization.
     * 
     */
    public Optional<Output<String>> sourceOrgName() {
        return Optional.ofNullable(this.sourceOrgName);
    }

    private OrgConnectionState() {}

    private OrgConnectionState(OrgConnectionState $) {
        this.connectionTypes = $.connectionTypes;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.sinkOrgId = $.sinkOrgId;
        this.sinkOrgName = $.sinkOrgName;
        this.sourceOrgId = $.sourceOrgId;
        this.sourceOrgName = $.sourceOrgName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrgConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrgConnectionState $;

        public Builder() {
            $ = new OrgConnectionState();
        }

        public Builder(OrgConnectionState defaults) {
            $ = new OrgConnectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionTypes Set of connection types to enable for this connection (., metrics, logs).
         * 
         * @return builder
         * 
         */
        public Builder connectionTypes(@Nullable Output<List<String>> connectionTypes) {
            $.connectionTypes = connectionTypes;
            return this;
        }

        /**
         * @param connectionTypes Set of connection types to enable for this connection (., metrics, logs).
         * 
         * @return builder
         * 
         */
        public Builder connectionTypes(List<String> connectionTypes) {
            return connectionTypes(Output.of(connectionTypes));
        }

        /**
         * @param connectionTypes Set of connection types to enable for this connection (., metrics, logs).
         * 
         * @return builder
         * 
         */
        public Builder connectionTypes(String... connectionTypes) {
            return connectionTypes(List.of(connectionTypes));
        }

        /**
         * @param createdAt Timestamp when the connection was created (RFC 3339).
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Timestamp when the connection was created (RFC 3339).
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param createdBy Creator user ID (UUID).
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy Creator user ID (UUID).
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param sinkOrgId UUID of the sink (destination) organization. Must be a valid UUID.
         * 
         * @return builder
         * 
         */
        public Builder sinkOrgId(@Nullable Output<String> sinkOrgId) {
            $.sinkOrgId = sinkOrgId;
            return this;
        }

        /**
         * @param sinkOrgId UUID of the sink (destination) organization. Must be a valid UUID.
         * 
         * @return builder
         * 
         */
        public Builder sinkOrgId(String sinkOrgId) {
            return sinkOrgId(Output.of(sinkOrgId));
        }

        /**
         * @param sinkOrgName Name of the sink (destination) organization.
         * 
         * @return builder
         * 
         */
        public Builder sinkOrgName(@Nullable Output<String> sinkOrgName) {
            $.sinkOrgName = sinkOrgName;
            return this;
        }

        /**
         * @param sinkOrgName Name of the sink (destination) organization.
         * 
         * @return builder
         * 
         */
        public Builder sinkOrgName(String sinkOrgName) {
            return sinkOrgName(Output.of(sinkOrgName));
        }

        /**
         * @param sourceOrgId UUID of the source (current) organization.
         * 
         * @return builder
         * 
         */
        public Builder sourceOrgId(@Nullable Output<String> sourceOrgId) {
            $.sourceOrgId = sourceOrgId;
            return this;
        }

        /**
         * @param sourceOrgId UUID of the source (current) organization.
         * 
         * @return builder
         * 
         */
        public Builder sourceOrgId(String sourceOrgId) {
            return sourceOrgId(Output.of(sourceOrgId));
        }

        /**
         * @param sourceOrgName Name of the source organization.
         * 
         * @return builder
         * 
         */
        public Builder sourceOrgName(@Nullable Output<String> sourceOrgName) {
            $.sourceOrgName = sourceOrgName;
            return this;
        }

        /**
         * @param sourceOrgName Name of the source organization.
         * 
         * @return builder
         * 
         */
        public Builder sourceOrgName(String sourceOrgName) {
            return sourceOrgName(Output.of(sourceOrgName));
        }

        public OrgConnectionState build() {
            return $;
        }
    }

}
