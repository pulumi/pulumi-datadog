// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.DashboardWidgetChangeDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetGeomapDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetQueryTableDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetQueryValueDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetScatterplotDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetSunburstDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetTimeseriesDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetToplistDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetTreemapDefinitionArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionArgs Empty = new DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionArgs();

    /**
     * The definition for a Change widget.
     * 
     */
    @Import(name="changeDefinition")
    private @Nullable Output<DashboardWidgetChangeDefinitionArgs> changeDefinition;

    /**
     * @return The definition for a Change widget.
     * 
     */
    public Optional<Output<DashboardWidgetChangeDefinitionArgs>> changeDefinition() {
        return Optional.ofNullable(this.changeDefinition);
    }

    /**
     * The definition for a Geomap widget.
     * 
     */
    @Import(name="geomapDefinition")
    private @Nullable Output<DashboardWidgetGeomapDefinitionArgs> geomapDefinition;

    /**
     * @return The definition for a Geomap widget.
     * 
     */
    public Optional<Output<DashboardWidgetGeomapDefinitionArgs>> geomapDefinition() {
        return Optional.ofNullable(this.geomapDefinition);
    }

    /**
     * The definition for a Query Table widget.
     * 
     */
    @Import(name="queryTableDefinition")
    private @Nullable Output<DashboardWidgetQueryTableDefinitionArgs> queryTableDefinition;

    /**
     * @return The definition for a Query Table widget.
     * 
     */
    public Optional<Output<DashboardWidgetQueryTableDefinitionArgs>> queryTableDefinition() {
        return Optional.ofNullable(this.queryTableDefinition);
    }

    /**
     * The definition for a Query Value widget.
     * 
     */
    @Import(name="queryValueDefinition")
    private @Nullable Output<DashboardWidgetQueryValueDefinitionArgs> queryValueDefinition;

    /**
     * @return The definition for a Query Value widget.
     * 
     */
    public Optional<Output<DashboardWidgetQueryValueDefinitionArgs>> queryValueDefinition() {
        return Optional.ofNullable(this.queryValueDefinition);
    }

    /**
     * The definition for a Scatterplot widget.
     * 
     */
    @Import(name="scatterplotDefinition")
    private @Nullable Output<DashboardWidgetScatterplotDefinitionArgs> scatterplotDefinition;

    /**
     * @return The definition for a Scatterplot widget.
     * 
     */
    public Optional<Output<DashboardWidgetScatterplotDefinitionArgs>> scatterplotDefinition() {
        return Optional.ofNullable(this.scatterplotDefinition);
    }

    /**
     * The definition for a Sunburst widget.
     * 
     */
    @Import(name="sunburstDefinition")
    private @Nullable Output<DashboardWidgetSunburstDefinitionArgs> sunburstDefinition;

    /**
     * @return The definition for a Sunburst widget.
     * 
     */
    public Optional<Output<DashboardWidgetSunburstDefinitionArgs>> sunburstDefinition() {
        return Optional.ofNullable(this.sunburstDefinition);
    }

    /**
     * The definition for a Timeseries widget.
     * 
     */
    @Import(name="timeseriesDefinition")
    private @Nullable Output<DashboardWidgetTimeseriesDefinitionArgs> timeseriesDefinition;

    /**
     * @return The definition for a Timeseries widget.
     * 
     */
    public Optional<Output<DashboardWidgetTimeseriesDefinitionArgs>> timeseriesDefinition() {
        return Optional.ofNullable(this.timeseriesDefinition);
    }

    /**
     * The definition for a Toplist widget.
     * 
     */
    @Import(name="toplistDefinition")
    private @Nullable Output<DashboardWidgetToplistDefinitionArgs> toplistDefinition;

    /**
     * @return The definition for a Toplist widget.
     * 
     */
    public Optional<Output<DashboardWidgetToplistDefinitionArgs>> toplistDefinition() {
        return Optional.ofNullable(this.toplistDefinition);
    }

    /**
     * The definition for a Treemap widget.
     * 
     */
    @Import(name="treemapDefinition")
    private @Nullable Output<DashboardWidgetTreemapDefinitionArgs> treemapDefinition;

    /**
     * @return The definition for a Treemap widget.
     * 
     */
    public Optional<Output<DashboardWidgetTreemapDefinitionArgs>> treemapDefinition() {
        return Optional.ofNullable(this.treemapDefinition);
    }

    private DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionArgs() {}

    private DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionArgs(DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionArgs $) {
        this.changeDefinition = $.changeDefinition;
        this.geomapDefinition = $.geomapDefinition;
        this.queryTableDefinition = $.queryTableDefinition;
        this.queryValueDefinition = $.queryValueDefinition;
        this.scatterplotDefinition = $.scatterplotDefinition;
        this.sunburstDefinition = $.sunburstDefinition;
        this.timeseriesDefinition = $.timeseriesDefinition;
        this.toplistDefinition = $.toplistDefinition;
        this.treemapDefinition = $.treemapDefinition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionArgs $;

        public Builder() {
            $ = new DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionArgs();
        }

        public Builder(DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionArgs defaults) {
            $ = new DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param changeDefinition The definition for a Change widget.
         * 
         * @return builder
         * 
         */
        public Builder changeDefinition(@Nullable Output<DashboardWidgetChangeDefinitionArgs> changeDefinition) {
            $.changeDefinition = changeDefinition;
            return this;
        }

        /**
         * @param changeDefinition The definition for a Change widget.
         * 
         * @return builder
         * 
         */
        public Builder changeDefinition(DashboardWidgetChangeDefinitionArgs changeDefinition) {
            return changeDefinition(Output.of(changeDefinition));
        }

        /**
         * @param geomapDefinition The definition for a Geomap widget.
         * 
         * @return builder
         * 
         */
        public Builder geomapDefinition(@Nullable Output<DashboardWidgetGeomapDefinitionArgs> geomapDefinition) {
            $.geomapDefinition = geomapDefinition;
            return this;
        }

        /**
         * @param geomapDefinition The definition for a Geomap widget.
         * 
         * @return builder
         * 
         */
        public Builder geomapDefinition(DashboardWidgetGeomapDefinitionArgs geomapDefinition) {
            return geomapDefinition(Output.of(geomapDefinition));
        }

        /**
         * @param queryTableDefinition The definition for a Query Table widget.
         * 
         * @return builder
         * 
         */
        public Builder queryTableDefinition(@Nullable Output<DashboardWidgetQueryTableDefinitionArgs> queryTableDefinition) {
            $.queryTableDefinition = queryTableDefinition;
            return this;
        }

        /**
         * @param queryTableDefinition The definition for a Query Table widget.
         * 
         * @return builder
         * 
         */
        public Builder queryTableDefinition(DashboardWidgetQueryTableDefinitionArgs queryTableDefinition) {
            return queryTableDefinition(Output.of(queryTableDefinition));
        }

        /**
         * @param queryValueDefinition The definition for a Query Value widget.
         * 
         * @return builder
         * 
         */
        public Builder queryValueDefinition(@Nullable Output<DashboardWidgetQueryValueDefinitionArgs> queryValueDefinition) {
            $.queryValueDefinition = queryValueDefinition;
            return this;
        }

        /**
         * @param queryValueDefinition The definition for a Query Value widget.
         * 
         * @return builder
         * 
         */
        public Builder queryValueDefinition(DashboardWidgetQueryValueDefinitionArgs queryValueDefinition) {
            return queryValueDefinition(Output.of(queryValueDefinition));
        }

        /**
         * @param scatterplotDefinition The definition for a Scatterplot widget.
         * 
         * @return builder
         * 
         */
        public Builder scatterplotDefinition(@Nullable Output<DashboardWidgetScatterplotDefinitionArgs> scatterplotDefinition) {
            $.scatterplotDefinition = scatterplotDefinition;
            return this;
        }

        /**
         * @param scatterplotDefinition The definition for a Scatterplot widget.
         * 
         * @return builder
         * 
         */
        public Builder scatterplotDefinition(DashboardWidgetScatterplotDefinitionArgs scatterplotDefinition) {
            return scatterplotDefinition(Output.of(scatterplotDefinition));
        }

        /**
         * @param sunburstDefinition The definition for a Sunburst widget.
         * 
         * @return builder
         * 
         */
        public Builder sunburstDefinition(@Nullable Output<DashboardWidgetSunburstDefinitionArgs> sunburstDefinition) {
            $.sunburstDefinition = sunburstDefinition;
            return this;
        }

        /**
         * @param sunburstDefinition The definition for a Sunburst widget.
         * 
         * @return builder
         * 
         */
        public Builder sunburstDefinition(DashboardWidgetSunburstDefinitionArgs sunburstDefinition) {
            return sunburstDefinition(Output.of(sunburstDefinition));
        }

        /**
         * @param timeseriesDefinition The definition for a Timeseries widget.
         * 
         * @return builder
         * 
         */
        public Builder timeseriesDefinition(@Nullable Output<DashboardWidgetTimeseriesDefinitionArgs> timeseriesDefinition) {
            $.timeseriesDefinition = timeseriesDefinition;
            return this;
        }

        /**
         * @param timeseriesDefinition The definition for a Timeseries widget.
         * 
         * @return builder
         * 
         */
        public Builder timeseriesDefinition(DashboardWidgetTimeseriesDefinitionArgs timeseriesDefinition) {
            return timeseriesDefinition(Output.of(timeseriesDefinition));
        }

        /**
         * @param toplistDefinition The definition for a Toplist widget.
         * 
         * @return builder
         * 
         */
        public Builder toplistDefinition(@Nullable Output<DashboardWidgetToplistDefinitionArgs> toplistDefinition) {
            $.toplistDefinition = toplistDefinition;
            return this;
        }

        /**
         * @param toplistDefinition The definition for a Toplist widget.
         * 
         * @return builder
         * 
         */
        public Builder toplistDefinition(DashboardWidgetToplistDefinitionArgs toplistDefinition) {
            return toplistDefinition(Output.of(toplistDefinition));
        }

        /**
         * @param treemapDefinition The definition for a Treemap widget.
         * 
         * @return builder
         * 
         */
        public Builder treemapDefinition(@Nullable Output<DashboardWidgetTreemapDefinitionArgs> treemapDefinition) {
            $.treemapDefinition = treemapDefinition;
            return this;
        }

        /**
         * @param treemapDefinition The definition for a Treemap widget.
         * 
         * @return builder
         * 
         */
        public Builder treemapDefinition(DashboardWidgetTreemapDefinitionArgs treemapDefinition) {
            return treemapDefinition(Output.of(treemapDefinition));
        }

        public DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionArgs build() {
            return $;
        }
    }

}
