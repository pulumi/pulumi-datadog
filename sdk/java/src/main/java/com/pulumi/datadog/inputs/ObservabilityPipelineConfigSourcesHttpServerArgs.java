// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesHttpServerTlsArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigSourcesHttpServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigSourcesHttpServerArgs Empty = new ObservabilityPipelineConfigSourcesHttpServerArgs();

    /**
     * HTTP authentication method. Valid values are `none`, `plain`.
     * 
     */
    @Import(name="authStrategy", required=true)
    private Output<String> authStrategy;

    /**
     * @return HTTP authentication method. Valid values are `none`, `plain`.
     * 
     */
    public Output<String> authStrategy() {
        return this.authStrategy;
    }

    /**
     * The decoding format used to interpret incoming logs. Valid values are `json`, `gelf`, `syslog`, `bytes`.
     * 
     */
    @Import(name="decoding", required=true)
    private Output<String> decoding;

    /**
     * @return The decoding format used to interpret incoming logs. Valid values are `json`, `gelf`, `syslog`, `bytes`.
     * 
     */
    public Output<String> decoding() {
        return this.decoding;
    }

    /**
     * Unique ID for the HTTP server source.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return Unique ID for the HTTP server source.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    @Import(name="tls")
    private @Nullable Output<ObservabilityPipelineConfigSourcesHttpServerTlsArgs> tls;

    /**
     * @return Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigSourcesHttpServerTlsArgs>> tls() {
        return Optional.ofNullable(this.tls);
    }

    private ObservabilityPipelineConfigSourcesHttpServerArgs() {}

    private ObservabilityPipelineConfigSourcesHttpServerArgs(ObservabilityPipelineConfigSourcesHttpServerArgs $) {
        this.authStrategy = $.authStrategy;
        this.decoding = $.decoding;
        this.id = $.id;
        this.tls = $.tls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigSourcesHttpServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigSourcesHttpServerArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigSourcesHttpServerArgs();
        }

        public Builder(ObservabilityPipelineConfigSourcesHttpServerArgs defaults) {
            $ = new ObservabilityPipelineConfigSourcesHttpServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authStrategy HTTP authentication method. Valid values are `none`, `plain`.
         * 
         * @return builder
         * 
         */
        public Builder authStrategy(Output<String> authStrategy) {
            $.authStrategy = authStrategy;
            return this;
        }

        /**
         * @param authStrategy HTTP authentication method. Valid values are `none`, `plain`.
         * 
         * @return builder
         * 
         */
        public Builder authStrategy(String authStrategy) {
            return authStrategy(Output.of(authStrategy));
        }

        /**
         * @param decoding The decoding format used to interpret incoming logs. Valid values are `json`, `gelf`, `syslog`, `bytes`.
         * 
         * @return builder
         * 
         */
        public Builder decoding(Output<String> decoding) {
            $.decoding = decoding;
            return this;
        }

        /**
         * @param decoding The decoding format used to interpret incoming logs. Valid values are `json`, `gelf`, `syslog`, `bytes`.
         * 
         * @return builder
         * 
         */
        public Builder decoding(String decoding) {
            return decoding(Output.of(decoding));
        }

        /**
         * @param id Unique ID for the HTTP server source.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique ID for the HTTP server source.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(@Nullable Output<ObservabilityPipelineConfigSourcesHttpServerTlsArgs> tls) {
            $.tls = tls;
            return this;
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(ObservabilityPipelineConfigSourcesHttpServerTlsArgs tls) {
            return tls(Output.of(tls));
        }

        public ObservabilityPipelineConfigSourcesHttpServerArgs build() {
            if ($.authStrategy == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigSourcesHttpServerArgs", "authStrategy");
            }
            if ($.decoding == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigSourcesHttpServerArgs", "decoding");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigSourcesHttpServerArgs", "id");
            }
            return $;
        }
    }

}
