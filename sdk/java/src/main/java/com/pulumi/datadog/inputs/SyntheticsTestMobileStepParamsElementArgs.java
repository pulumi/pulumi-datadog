// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.SyntheticsTestMobileStepParamsElementRelativePositionArgs;
import com.pulumi.datadog.inputs.SyntheticsTestMobileStepParamsElementUserLocatorArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticsTestMobileStepParamsElementArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticsTestMobileStepParamsElementArgs Empty = new SyntheticsTestMobileStepParamsElementArgs();

    @Import(name="context")
    private @Nullable Output<String> context;

    public Optional<Output<String>> context() {
        return Optional.ofNullable(this.context);
    }

    /**
     * Valid values are `native`, `web`.
     * 
     */
    @Import(name="contextType")
    private @Nullable Output<String> contextType;

    /**
     * @return Valid values are `native`, `web`.
     * 
     */
    public Optional<Output<String>> contextType() {
        return Optional.ofNullable(this.contextType);
    }

    @Import(name="elementDescription")
    private @Nullable Output<String> elementDescription;

    public Optional<Output<String>> elementDescription() {
        return Optional.ofNullable(this.elementDescription);
    }

    @Import(name="multiLocator")
    private @Nullable Output<Map<String,String>> multiLocator;

    public Optional<Output<Map<String,String>>> multiLocator() {
        return Optional.ofNullable(this.multiLocator);
    }

    @Import(name="relativePosition")
    private @Nullable Output<SyntheticsTestMobileStepParamsElementRelativePositionArgs> relativePosition;

    public Optional<Output<SyntheticsTestMobileStepParamsElementRelativePositionArgs>> relativePosition() {
        return Optional.ofNullable(this.relativePosition);
    }

    @Import(name="textContent")
    private @Nullable Output<String> textContent;

    public Optional<Output<String>> textContent() {
        return Optional.ofNullable(this.textContent);
    }

    @Import(name="userLocator")
    private @Nullable Output<SyntheticsTestMobileStepParamsElementUserLocatorArgs> userLocator;

    public Optional<Output<SyntheticsTestMobileStepParamsElementUserLocatorArgs>> userLocator() {
        return Optional.ofNullable(this.userLocator);
    }

    @Import(name="viewName")
    private @Nullable Output<String> viewName;

    public Optional<Output<String>> viewName() {
        return Optional.ofNullable(this.viewName);
    }

    private SyntheticsTestMobileStepParamsElementArgs() {}

    private SyntheticsTestMobileStepParamsElementArgs(SyntheticsTestMobileStepParamsElementArgs $) {
        this.context = $.context;
        this.contextType = $.contextType;
        this.elementDescription = $.elementDescription;
        this.multiLocator = $.multiLocator;
        this.relativePosition = $.relativePosition;
        this.textContent = $.textContent;
        this.userLocator = $.userLocator;
        this.viewName = $.viewName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticsTestMobileStepParamsElementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticsTestMobileStepParamsElementArgs $;

        public Builder() {
            $ = new SyntheticsTestMobileStepParamsElementArgs();
        }

        public Builder(SyntheticsTestMobileStepParamsElementArgs defaults) {
            $ = new SyntheticsTestMobileStepParamsElementArgs(Objects.requireNonNull(defaults));
        }

        public Builder context(@Nullable Output<String> context) {
            $.context = context;
            return this;
        }

        public Builder context(String context) {
            return context(Output.of(context));
        }

        /**
         * @param contextType Valid values are `native`, `web`.
         * 
         * @return builder
         * 
         */
        public Builder contextType(@Nullable Output<String> contextType) {
            $.contextType = contextType;
            return this;
        }

        /**
         * @param contextType Valid values are `native`, `web`.
         * 
         * @return builder
         * 
         */
        public Builder contextType(String contextType) {
            return contextType(Output.of(contextType));
        }

        public Builder elementDescription(@Nullable Output<String> elementDescription) {
            $.elementDescription = elementDescription;
            return this;
        }

        public Builder elementDescription(String elementDescription) {
            return elementDescription(Output.of(elementDescription));
        }

        public Builder multiLocator(@Nullable Output<Map<String,String>> multiLocator) {
            $.multiLocator = multiLocator;
            return this;
        }

        public Builder multiLocator(Map<String,String> multiLocator) {
            return multiLocator(Output.of(multiLocator));
        }

        public Builder relativePosition(@Nullable Output<SyntheticsTestMobileStepParamsElementRelativePositionArgs> relativePosition) {
            $.relativePosition = relativePosition;
            return this;
        }

        public Builder relativePosition(SyntheticsTestMobileStepParamsElementRelativePositionArgs relativePosition) {
            return relativePosition(Output.of(relativePosition));
        }

        public Builder textContent(@Nullable Output<String> textContent) {
            $.textContent = textContent;
            return this;
        }

        public Builder textContent(String textContent) {
            return textContent(Output.of(textContent));
        }

        public Builder userLocator(@Nullable Output<SyntheticsTestMobileStepParamsElementUserLocatorArgs> userLocator) {
            $.userLocator = userLocator;
            return this;
        }

        public Builder userLocator(SyntheticsTestMobileStepParamsElementUserLocatorArgs userLocator) {
            return userLocator(Output.of(userLocator));
        }

        public Builder viewName(@Nullable Output<String> viewName) {
            $.viewName = viewName;
            return this;
        }

        public Builder viewName(String viewName) {
            return viewName(Output.of(viewName));
        }

        public SyntheticsTestMobileStepParamsElementArgs build() {
            return $;
        }
    }

}
