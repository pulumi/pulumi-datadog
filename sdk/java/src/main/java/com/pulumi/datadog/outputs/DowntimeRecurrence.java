// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DowntimeRecurrence {
    /**
     * @return How often to repeat as an integer. For example to repeat every 3 days, select a `type` of `days` and a `period` of `3`.
     * 
     */
    private @Nullable Integer period;
    /**
     * @return The RRULE standard for defining recurring events. For example, to have a recurring event on the first day of each month, use `FREQ=MONTHLY;INTERVAL=1`. Most common rrule options from the iCalendar Spec are supported. Attributes specifying the duration in RRULE are not supported (for example, `DTSTART`, `DTEND`, `DURATION`). Only applicable when `type` is `rrule`.
     * 
     */
    private @Nullable String rrule;
    /**
     * @return One of `days`, `weeks`, `months`, `years`, or `rrule`.
     * 
     */
    private String type;
    /**
     * @return The date at which the recurrence should end as a POSIX timestamp. `until_occurrences` and `until_date` are mutually exclusive.
     * 
     */
    private @Nullable Integer untilDate;
    /**
     * @return How many times the downtime will be rescheduled. `until_occurrences` and `until_date` are mutually exclusive.
     * 
     */
    private @Nullable Integer untilOccurrences;
    /**
     * @return A list of week days to repeat on. Choose from: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat` or `Sun`. Only applicable when `type` is `weeks`. First letter must be capitalized.
     * 
     */
    private @Nullable List<String> weekDays;

    private DowntimeRecurrence() {}
    /**
     * @return How often to repeat as an integer. For example to repeat every 3 days, select a `type` of `days` and a `period` of `3`.
     * 
     */
    public Optional<Integer> period() {
        return Optional.ofNullable(this.period);
    }
    /**
     * @return The RRULE standard for defining recurring events. For example, to have a recurring event on the first day of each month, use `FREQ=MONTHLY;INTERVAL=1`. Most common rrule options from the iCalendar Spec are supported. Attributes specifying the duration in RRULE are not supported (for example, `DTSTART`, `DTEND`, `DURATION`). Only applicable when `type` is `rrule`.
     * 
     */
    public Optional<String> rrule() {
        return Optional.ofNullable(this.rrule);
    }
    /**
     * @return One of `days`, `weeks`, `months`, `years`, or `rrule`.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The date at which the recurrence should end as a POSIX timestamp. `until_occurrences` and `until_date` are mutually exclusive.
     * 
     */
    public Optional<Integer> untilDate() {
        return Optional.ofNullable(this.untilDate);
    }
    /**
     * @return How many times the downtime will be rescheduled. `until_occurrences` and `until_date` are mutually exclusive.
     * 
     */
    public Optional<Integer> untilOccurrences() {
        return Optional.ofNullable(this.untilOccurrences);
    }
    /**
     * @return A list of week days to repeat on. Choose from: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat` or `Sun`. Only applicable when `type` is `weeks`. First letter must be capitalized.
     * 
     */
    public List<String> weekDays() {
        return this.weekDays == null ? List.of() : this.weekDays;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DowntimeRecurrence defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer period;
        private @Nullable String rrule;
        private String type;
        private @Nullable Integer untilDate;
        private @Nullable Integer untilOccurrences;
        private @Nullable List<String> weekDays;
        public Builder() {}
        public Builder(DowntimeRecurrence defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.period = defaults.period;
    	      this.rrule = defaults.rrule;
    	      this.type = defaults.type;
    	      this.untilDate = defaults.untilDate;
    	      this.untilOccurrences = defaults.untilOccurrences;
    	      this.weekDays = defaults.weekDays;
        }

        @CustomType.Setter
        public Builder period(@Nullable Integer period) {
            this.period = period;
            return this;
        }
        @CustomType.Setter
        public Builder rrule(@Nullable String rrule) {
            this.rrule = rrule;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder untilDate(@Nullable Integer untilDate) {
            this.untilDate = untilDate;
            return this;
        }
        @CustomType.Setter
        public Builder untilOccurrences(@Nullable Integer untilOccurrences) {
            this.untilOccurrences = untilOccurrences;
            return this;
        }
        @CustomType.Setter
        public Builder weekDays(@Nullable List<String> weekDays) {
            this.weekDays = weekDays;
            return this;
        }
        public Builder weekDays(String... weekDays) {
            return weekDays(List.of(weekDays));
        }
        public DowntimeRecurrence build() {
            final var _resultValue = new DowntimeRecurrence();
            _resultValue.period = period;
            _resultValue.rrule = rrule;
            _resultValue.type = type;
            _resultValue.untilDate = untilDate;
            _resultValue.untilOccurrences = untilOccurrences;
            _resultValue.weekDays = weekDays;
            return _resultValue;
        }
    }
}
