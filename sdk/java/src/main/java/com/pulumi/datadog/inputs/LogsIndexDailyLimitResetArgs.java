// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class LogsIndexDailyLimitResetArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogsIndexDailyLimitResetArgs Empty = new LogsIndexDailyLimitResetArgs();

    /**
     * String in `HH:00` format representing the time of day the daily limit should be reset. The hours must be between 00 and 23 (inclusive).
     * 
     */
    @Import(name="resetTime", required=true)
    private Output<String> resetTime;

    /**
     * @return String in `HH:00` format representing the time of day the daily limit should be reset. The hours must be between 00 and 23 (inclusive).
     * 
     */
    public Output<String> resetTime() {
        return this.resetTime;
    }

    /**
     * String in `(-|+)HH:00` format representing the UTC offset to apply to the given reset time. The hours must be between -12 and +14 (inclusive).
     * 
     */
    @Import(name="resetUtcOffset", required=true)
    private Output<String> resetUtcOffset;

    /**
     * @return String in `(-|+)HH:00` format representing the UTC offset to apply to the given reset time. The hours must be between -12 and +14 (inclusive).
     * 
     */
    public Output<String> resetUtcOffset() {
        return this.resetUtcOffset;
    }

    private LogsIndexDailyLimitResetArgs() {}

    private LogsIndexDailyLimitResetArgs(LogsIndexDailyLimitResetArgs $) {
        this.resetTime = $.resetTime;
        this.resetUtcOffset = $.resetUtcOffset;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogsIndexDailyLimitResetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogsIndexDailyLimitResetArgs $;

        public Builder() {
            $ = new LogsIndexDailyLimitResetArgs();
        }

        public Builder(LogsIndexDailyLimitResetArgs defaults) {
            $ = new LogsIndexDailyLimitResetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param resetTime String in `HH:00` format representing the time of day the daily limit should be reset. The hours must be between 00 and 23 (inclusive).
         * 
         * @return builder
         * 
         */
        public Builder resetTime(Output<String> resetTime) {
            $.resetTime = resetTime;
            return this;
        }

        /**
         * @param resetTime String in `HH:00` format representing the time of day the daily limit should be reset. The hours must be between 00 and 23 (inclusive).
         * 
         * @return builder
         * 
         */
        public Builder resetTime(String resetTime) {
            return resetTime(Output.of(resetTime));
        }

        /**
         * @param resetUtcOffset String in `(-|+)HH:00` format representing the UTC offset to apply to the given reset time. The hours must be between -12 and +14 (inclusive).
         * 
         * @return builder
         * 
         */
        public Builder resetUtcOffset(Output<String> resetUtcOffset) {
            $.resetUtcOffset = resetUtcOffset;
            return this;
        }

        /**
         * @param resetUtcOffset String in `(-|+)HH:00` format representing the UTC offset to apply to the given reset time. The hours must be between -12 and +14 (inclusive).
         * 
         * @return builder
         * 
         */
        public Builder resetUtcOffset(String resetUtcOffset) {
            return resetUtcOffset(Output.of(resetUtcOffset));
        }

        public LogsIndexDailyLimitResetArgs build() {
            if ($.resetTime == null) {
                throw new MissingRequiredPropertyException("LogsIndexDailyLimitResetArgs", "resetTime");
            }
            if ($.resetUtcOffset == null) {
                throw new MissingRequiredPropertyException("LogsIndexDailyLimitResetArgs", "resetUtcOffset");
            }
            return $;
        }
    }

}
