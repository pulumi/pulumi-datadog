// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGcpUcConfigResult {
    /**
     * @return The internal account identifier for this GCP Usage Cost configuration.
     * 
     */
    private String accountId;
    /**
     * @return The Google Cloud Storage bucket name where Usage Cost export files are stored.
     * 
     */
    private String bucketName;
    /**
     * @return The Datadog cloud account ID for the GCP Usage Cost configuration you want to retrieve information about.
     * 
     */
    private Integer cloudAccountId;
    /**
     * @return The timestamp when the GCP Usage Cost configuration was created.
     * 
     */
    private String createdAt;
    /**
     * @return The resolved BigQuery dataset name used for the Usage Cost export.
     * 
     */
    private String dataset;
    /**
     * @return List of error messages if the GCP Usage Cost configuration encountered any issues during setup or data processing.
     * 
     */
    private List<String> errorMessages;
    /**
     * @return The prefix path within the storage bucket where Usage Cost export files are organized.
     * 
     */
    private String exportPrefix;
    /**
     * @return The Google Cloud Project ID where the Usage Cost export is configured.
     * 
     */
    private String exportProjectName;
    /**
     * @return The ID of this resource.
     * 
     */
    private String id;
    /**
     * @return The number of months of historical cost data available for analysis.
     * 
     */
    private Integer months;
    /**
     * @return The Google Cloud service account email that Datadog uses to access the Usage Cost export data.
     * 
     */
    private String serviceAccount;
    /**
     * @return The current status of the GCP Usage Cost configuration (for example, active, error, or archived).
     * 
     */
    private String status;
    /**
     * @return The timestamp when the configuration status was last updated.
     * 
     */
    private String statusUpdatedAt;
    /**
     * @return The timestamp when the GCP Usage Cost configuration was last modified.
     * 
     */
    private String updatedAt;

    private GetGcpUcConfigResult() {}
    /**
     * @return The internal account identifier for this GCP Usage Cost configuration.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return The Google Cloud Storage bucket name where Usage Cost export files are stored.
     * 
     */
    public String bucketName() {
        return this.bucketName;
    }
    /**
     * @return The Datadog cloud account ID for the GCP Usage Cost configuration you want to retrieve information about.
     * 
     */
    public Integer cloudAccountId() {
        return this.cloudAccountId;
    }
    /**
     * @return The timestamp when the GCP Usage Cost configuration was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The resolved BigQuery dataset name used for the Usage Cost export.
     * 
     */
    public String dataset() {
        return this.dataset;
    }
    /**
     * @return List of error messages if the GCP Usage Cost configuration encountered any issues during setup or data processing.
     * 
     */
    public List<String> errorMessages() {
        return this.errorMessages;
    }
    /**
     * @return The prefix path within the storage bucket where Usage Cost export files are organized.
     * 
     */
    public String exportPrefix() {
        return this.exportPrefix;
    }
    /**
     * @return The Google Cloud Project ID where the Usage Cost export is configured.
     * 
     */
    public String exportProjectName() {
        return this.exportProjectName;
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The number of months of historical cost data available for analysis.
     * 
     */
    public Integer months() {
        return this.months;
    }
    /**
     * @return The Google Cloud service account email that Datadog uses to access the Usage Cost export data.
     * 
     */
    public String serviceAccount() {
        return this.serviceAccount;
    }
    /**
     * @return The current status of the GCP Usage Cost configuration (for example, active, error, or archived).
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The timestamp when the configuration status was last updated.
     * 
     */
    public String statusUpdatedAt() {
        return this.statusUpdatedAt;
    }
    /**
     * @return The timestamp when the GCP Usage Cost configuration was last modified.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGcpUcConfigResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String bucketName;
        private Integer cloudAccountId;
        private String createdAt;
        private String dataset;
        private List<String> errorMessages;
        private String exportPrefix;
        private String exportProjectName;
        private String id;
        private Integer months;
        private String serviceAccount;
        private String status;
        private String statusUpdatedAt;
        private String updatedAt;
        public Builder() {}
        public Builder(GetGcpUcConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.bucketName = defaults.bucketName;
    	      this.cloudAccountId = defaults.cloudAccountId;
    	      this.createdAt = defaults.createdAt;
    	      this.dataset = defaults.dataset;
    	      this.errorMessages = defaults.errorMessages;
    	      this.exportPrefix = defaults.exportPrefix;
    	      this.exportProjectName = defaults.exportProjectName;
    	      this.id = defaults.id;
    	      this.months = defaults.months;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.status = defaults.status;
    	      this.statusUpdatedAt = defaults.statusUpdatedAt;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetGcpUcConfigResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder bucketName(String bucketName) {
            if (bucketName == null) {
              throw new MissingRequiredPropertyException("GetGcpUcConfigResult", "bucketName");
            }
            this.bucketName = bucketName;
            return this;
        }
        @CustomType.Setter
        public Builder cloudAccountId(Integer cloudAccountId) {
            if (cloudAccountId == null) {
              throw new MissingRequiredPropertyException("GetGcpUcConfigResult", "cloudAccountId");
            }
            this.cloudAccountId = cloudAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetGcpUcConfigResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder dataset(String dataset) {
            if (dataset == null) {
              throw new MissingRequiredPropertyException("GetGcpUcConfigResult", "dataset");
            }
            this.dataset = dataset;
            return this;
        }
        @CustomType.Setter
        public Builder errorMessages(List<String> errorMessages) {
            if (errorMessages == null) {
              throw new MissingRequiredPropertyException("GetGcpUcConfigResult", "errorMessages");
            }
            this.errorMessages = errorMessages;
            return this;
        }
        public Builder errorMessages(String... errorMessages) {
            return errorMessages(List.of(errorMessages));
        }
        @CustomType.Setter
        public Builder exportPrefix(String exportPrefix) {
            if (exportPrefix == null) {
              throw new MissingRequiredPropertyException("GetGcpUcConfigResult", "exportPrefix");
            }
            this.exportPrefix = exportPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder exportProjectName(String exportProjectName) {
            if (exportProjectName == null) {
              throw new MissingRequiredPropertyException("GetGcpUcConfigResult", "exportProjectName");
            }
            this.exportProjectName = exportProjectName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGcpUcConfigResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder months(Integer months) {
            if (months == null) {
              throw new MissingRequiredPropertyException("GetGcpUcConfigResult", "months");
            }
            this.months = months;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            if (serviceAccount == null) {
              throw new MissingRequiredPropertyException("GetGcpUcConfigResult", "serviceAccount");
            }
            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetGcpUcConfigResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statusUpdatedAt(String statusUpdatedAt) {
            if (statusUpdatedAt == null) {
              throw new MissingRequiredPropertyException("GetGcpUcConfigResult", "statusUpdatedAt");
            }
            this.statusUpdatedAt = statusUpdatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetGcpUcConfigResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        public GetGcpUcConfigResult build() {
            final var _resultValue = new GetGcpUcConfigResult();
            _resultValue.accountId = accountId;
            _resultValue.bucketName = bucketName;
            _resultValue.cloudAccountId = cloudAccountId;
            _resultValue.createdAt = createdAt;
            _resultValue.dataset = dataset;
            _resultValue.errorMessages = errorMessages;
            _resultValue.exportPrefix = exportPrefix;
            _resultValue.exportProjectName = exportProjectName;
            _resultValue.id = id;
            _resultValue.months = months;
            _resultValue.serviceAccount = serviceAccount;
            _resultValue.status = status;
            _resultValue.statusUpdatedAt = statusUpdatedAt;
            _resultValue.updatedAt = updatedAt;
            return _resultValue;
        }
    }
}
