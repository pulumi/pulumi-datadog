// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.SyntheticsTestOptionsListCi;
import com.pulumi.datadog.outputs.SyntheticsTestOptionsListMonitorOptions;
import com.pulumi.datadog.outputs.SyntheticsTestOptionsListRetry;
import com.pulumi.datadog.outputs.SyntheticsTestOptionsListRumSettings;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SyntheticsTestOptionsList {
    /**
     * @return For SSL test, whether or not the test should allow self signed certificates.
     * 
     */
    private @Nullable Boolean acceptSelfSigned;
    /**
     * @return Allows loading insecure content for an HTTP test.
     * 
     */
    private @Nullable Boolean allowInsecure;
    /**
     * @return For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
     * 
     */
    private @Nullable Boolean checkCertificateRevocation;
    /**
     * @return CI/CD options for a Synthetic test.
     * 
     */
    private @Nullable SyntheticsTestOptionsListCi ci;
    /**
     * @return Disable Cross-Origin Resource Sharing for browser tests.
     * 
     */
    private @Nullable Boolean disableCors;
    /**
     * @return Disable Content Security Policy for browser tests.
     * 
     */
    private @Nullable Boolean disableCsp;
    /**
     * @return Determines whether or not the API HTTP test should follow redirects.
     * 
     */
    private @Nullable Boolean followRedirects;
    /**
     * @return HTTP version to use for a Synthetics API test. Valid values are `http1`, `http2`, `any`.
     * 
     */
    private @Nullable String httpVersion;
    /**
     * @return Ignore server certificate error.
     * 
     */
    private @Nullable Boolean ignoreServerCertificateError;
    /**
     * @return Timeout before declaring the initial step as failed (in seconds) for browser tests.
     * 
     */
    private @Nullable Integer initialNavigationTimeout;
    /**
     * @return Minimum amount of time in failure required to trigger an alert. Default is `0`.
     * 
     */
    private @Nullable Integer minFailureDuration;
    /**
     * @return Minimum number of locations in failure required to trigger an alert. Default is `1`.
     * 
     */
    private @Nullable Integer minLocationFailed;
    /**
     * @return The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
     * 
     */
    private @Nullable String monitorName;
    private @Nullable SyntheticsTestOptionsListMonitorOptions monitorOptions;
    private @Nullable Integer monitorPriority;
    /**
     * @return Prevents saving screenshots of the steps.
     * 
     */
    private @Nullable Boolean noScreenshot;
    /**
     * @return A list of role identifiers pulled from the Roles API to restrict read and write access.
     * 
     */
    private @Nullable List<String> restrictedRoles;
    private @Nullable SyntheticsTestOptionsListRetry retry;
    /**
     * @return The RUM data collection settings for the Synthetic browser test.
     * 
     */
    private @Nullable SyntheticsTestOptionsListRumSettings rumSettings;
    /**
     * @return How often the test should run (in seconds).
     * 
     */
    private Integer tickEvery;

    private SyntheticsTestOptionsList() {}
    /**
     * @return For SSL test, whether or not the test should allow self signed certificates.
     * 
     */
    public Optional<Boolean> acceptSelfSigned() {
        return Optional.ofNullable(this.acceptSelfSigned);
    }
    /**
     * @return Allows loading insecure content for an HTTP test.
     * 
     */
    public Optional<Boolean> allowInsecure() {
        return Optional.ofNullable(this.allowInsecure);
    }
    /**
     * @return For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
     * 
     */
    public Optional<Boolean> checkCertificateRevocation() {
        return Optional.ofNullable(this.checkCertificateRevocation);
    }
    /**
     * @return CI/CD options for a Synthetic test.
     * 
     */
    public Optional<SyntheticsTestOptionsListCi> ci() {
        return Optional.ofNullable(this.ci);
    }
    /**
     * @return Disable Cross-Origin Resource Sharing for browser tests.
     * 
     */
    public Optional<Boolean> disableCors() {
        return Optional.ofNullable(this.disableCors);
    }
    /**
     * @return Disable Content Security Policy for browser tests.
     * 
     */
    public Optional<Boolean> disableCsp() {
        return Optional.ofNullable(this.disableCsp);
    }
    /**
     * @return Determines whether or not the API HTTP test should follow redirects.
     * 
     */
    public Optional<Boolean> followRedirects() {
        return Optional.ofNullable(this.followRedirects);
    }
    /**
     * @return HTTP version to use for a Synthetics API test. Valid values are `http1`, `http2`, `any`.
     * 
     */
    public Optional<String> httpVersion() {
        return Optional.ofNullable(this.httpVersion);
    }
    /**
     * @return Ignore server certificate error.
     * 
     */
    public Optional<Boolean> ignoreServerCertificateError() {
        return Optional.ofNullable(this.ignoreServerCertificateError);
    }
    /**
     * @return Timeout before declaring the initial step as failed (in seconds) for browser tests.
     * 
     */
    public Optional<Integer> initialNavigationTimeout() {
        return Optional.ofNullable(this.initialNavigationTimeout);
    }
    /**
     * @return Minimum amount of time in failure required to trigger an alert. Default is `0`.
     * 
     */
    public Optional<Integer> minFailureDuration() {
        return Optional.ofNullable(this.minFailureDuration);
    }
    /**
     * @return Minimum number of locations in failure required to trigger an alert. Default is `1`.
     * 
     */
    public Optional<Integer> minLocationFailed() {
        return Optional.ofNullable(this.minLocationFailed);
    }
    /**
     * @return The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
     * 
     */
    public Optional<String> monitorName() {
        return Optional.ofNullable(this.monitorName);
    }
    public Optional<SyntheticsTestOptionsListMonitorOptions> monitorOptions() {
        return Optional.ofNullable(this.monitorOptions);
    }
    public Optional<Integer> monitorPriority() {
        return Optional.ofNullable(this.monitorPriority);
    }
    /**
     * @return Prevents saving screenshots of the steps.
     * 
     */
    public Optional<Boolean> noScreenshot() {
        return Optional.ofNullable(this.noScreenshot);
    }
    /**
     * @return A list of role identifiers pulled from the Roles API to restrict read and write access.
     * 
     */
    public List<String> restrictedRoles() {
        return this.restrictedRoles == null ? List.of() : this.restrictedRoles;
    }
    public Optional<SyntheticsTestOptionsListRetry> retry() {
        return Optional.ofNullable(this.retry);
    }
    /**
     * @return The RUM data collection settings for the Synthetic browser test.
     * 
     */
    public Optional<SyntheticsTestOptionsListRumSettings> rumSettings() {
        return Optional.ofNullable(this.rumSettings);
    }
    /**
     * @return How often the test should run (in seconds).
     * 
     */
    public Integer tickEvery() {
        return this.tickEvery;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyntheticsTestOptionsList defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean acceptSelfSigned;
        private @Nullable Boolean allowInsecure;
        private @Nullable Boolean checkCertificateRevocation;
        private @Nullable SyntheticsTestOptionsListCi ci;
        private @Nullable Boolean disableCors;
        private @Nullable Boolean disableCsp;
        private @Nullable Boolean followRedirects;
        private @Nullable String httpVersion;
        private @Nullable Boolean ignoreServerCertificateError;
        private @Nullable Integer initialNavigationTimeout;
        private @Nullable Integer minFailureDuration;
        private @Nullable Integer minLocationFailed;
        private @Nullable String monitorName;
        private @Nullable SyntheticsTestOptionsListMonitorOptions monitorOptions;
        private @Nullable Integer monitorPriority;
        private @Nullable Boolean noScreenshot;
        private @Nullable List<String> restrictedRoles;
        private @Nullable SyntheticsTestOptionsListRetry retry;
        private @Nullable SyntheticsTestOptionsListRumSettings rumSettings;
        private Integer tickEvery;
        public Builder() {}
        public Builder(SyntheticsTestOptionsList defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptSelfSigned = defaults.acceptSelfSigned;
    	      this.allowInsecure = defaults.allowInsecure;
    	      this.checkCertificateRevocation = defaults.checkCertificateRevocation;
    	      this.ci = defaults.ci;
    	      this.disableCors = defaults.disableCors;
    	      this.disableCsp = defaults.disableCsp;
    	      this.followRedirects = defaults.followRedirects;
    	      this.httpVersion = defaults.httpVersion;
    	      this.ignoreServerCertificateError = defaults.ignoreServerCertificateError;
    	      this.initialNavigationTimeout = defaults.initialNavigationTimeout;
    	      this.minFailureDuration = defaults.minFailureDuration;
    	      this.minLocationFailed = defaults.minLocationFailed;
    	      this.monitorName = defaults.monitorName;
    	      this.monitorOptions = defaults.monitorOptions;
    	      this.monitorPriority = defaults.monitorPriority;
    	      this.noScreenshot = defaults.noScreenshot;
    	      this.restrictedRoles = defaults.restrictedRoles;
    	      this.retry = defaults.retry;
    	      this.rumSettings = defaults.rumSettings;
    	      this.tickEvery = defaults.tickEvery;
        }

        @CustomType.Setter
        public Builder acceptSelfSigned(@Nullable Boolean acceptSelfSigned) {
            this.acceptSelfSigned = acceptSelfSigned;
            return this;
        }
        @CustomType.Setter
        public Builder allowInsecure(@Nullable Boolean allowInsecure) {
            this.allowInsecure = allowInsecure;
            return this;
        }
        @CustomType.Setter
        public Builder checkCertificateRevocation(@Nullable Boolean checkCertificateRevocation) {
            this.checkCertificateRevocation = checkCertificateRevocation;
            return this;
        }
        @CustomType.Setter
        public Builder ci(@Nullable SyntheticsTestOptionsListCi ci) {
            this.ci = ci;
            return this;
        }
        @CustomType.Setter
        public Builder disableCors(@Nullable Boolean disableCors) {
            this.disableCors = disableCors;
            return this;
        }
        @CustomType.Setter
        public Builder disableCsp(@Nullable Boolean disableCsp) {
            this.disableCsp = disableCsp;
            return this;
        }
        @CustomType.Setter
        public Builder followRedirects(@Nullable Boolean followRedirects) {
            this.followRedirects = followRedirects;
            return this;
        }
        @CustomType.Setter
        public Builder httpVersion(@Nullable String httpVersion) {
            this.httpVersion = httpVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreServerCertificateError(@Nullable Boolean ignoreServerCertificateError) {
            this.ignoreServerCertificateError = ignoreServerCertificateError;
            return this;
        }
        @CustomType.Setter
        public Builder initialNavigationTimeout(@Nullable Integer initialNavigationTimeout) {
            this.initialNavigationTimeout = initialNavigationTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder minFailureDuration(@Nullable Integer minFailureDuration) {
            this.minFailureDuration = minFailureDuration;
            return this;
        }
        @CustomType.Setter
        public Builder minLocationFailed(@Nullable Integer minLocationFailed) {
            this.minLocationFailed = minLocationFailed;
            return this;
        }
        @CustomType.Setter
        public Builder monitorName(@Nullable String monitorName) {
            this.monitorName = monitorName;
            return this;
        }
        @CustomType.Setter
        public Builder monitorOptions(@Nullable SyntheticsTestOptionsListMonitorOptions monitorOptions) {
            this.monitorOptions = monitorOptions;
            return this;
        }
        @CustomType.Setter
        public Builder monitorPriority(@Nullable Integer monitorPriority) {
            this.monitorPriority = monitorPriority;
            return this;
        }
        @CustomType.Setter
        public Builder noScreenshot(@Nullable Boolean noScreenshot) {
            this.noScreenshot = noScreenshot;
            return this;
        }
        @CustomType.Setter
        public Builder restrictedRoles(@Nullable List<String> restrictedRoles) {
            this.restrictedRoles = restrictedRoles;
            return this;
        }
        public Builder restrictedRoles(String... restrictedRoles) {
            return restrictedRoles(List.of(restrictedRoles));
        }
        @CustomType.Setter
        public Builder retry(@Nullable SyntheticsTestOptionsListRetry retry) {
            this.retry = retry;
            return this;
        }
        @CustomType.Setter
        public Builder rumSettings(@Nullable SyntheticsTestOptionsListRumSettings rumSettings) {
            this.rumSettings = rumSettings;
            return this;
        }
        @CustomType.Setter
        public Builder tickEvery(Integer tickEvery) {
            this.tickEvery = Objects.requireNonNull(tickEvery);
            return this;
        }
        public SyntheticsTestOptionsList build() {
            final var o = new SyntheticsTestOptionsList();
            o.acceptSelfSigned = acceptSelfSigned;
            o.allowInsecure = allowInsecure;
            o.checkCertificateRevocation = checkCertificateRevocation;
            o.ci = ci;
            o.disableCors = disableCors;
            o.disableCsp = disableCsp;
            o.followRedirects = followRedirects;
            o.httpVersion = httpVersion;
            o.ignoreServerCertificateError = ignoreServerCertificateError;
            o.initialNavigationTimeout = initialNavigationTimeout;
            o.minFailureDuration = minFailureDuration;
            o.minLocationFailed = minLocationFailed;
            o.monitorName = monitorName;
            o.monitorOptions = monitorOptions;
            o.monitorPriority = monitorPriority;
            o.noScreenshot = noScreenshot;
            o.restrictedRoles = restrictedRoles;
            o.retry = retry;
            o.rumSettings = rumSettings;
            o.tickEvery = tickEvery;
            return o;
        }
    }
}
