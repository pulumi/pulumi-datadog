// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.confluent.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationAccountState extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationAccountState Empty = new IntegrationAccountState();

    /**
     * The API key associated with your Confluent account.
     * 
     */
    @Import(name="apiKey")
    private @Nullable Output<String> apiKey;

    /**
     * @return The API key associated with your Confluent account.
     * 
     */
    public Optional<Output<String>> apiKey() {
        return Optional.ofNullable(this.apiKey);
    }

    /**
     * The API secret associated with your Confluent account.
     * 
     */
    @Import(name="apiSecret")
    private @Nullable Output<String> apiSecret;

    /**
     * @return The API secret associated with your Confluent account.
     * 
     */
    public Optional<Output<String>> apiSecret() {
        return Optional.ofNullable(this.apiSecret);
    }

    /**
     * A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private IntegrationAccountState() {}

    private IntegrationAccountState(IntegrationAccountState $) {
        this.apiKey = $.apiKey;
        this.apiSecret = $.apiSecret;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationAccountState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationAccountState $;

        public Builder() {
            $ = new IntegrationAccountState();
        }

        public Builder(IntegrationAccountState defaults) {
            $ = new IntegrationAccountState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKey The API key associated with your Confluent account.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(@Nullable Output<String> apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param apiKey The API key associated with your Confluent account.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(String apiKey) {
            return apiKey(Output.of(apiKey));
        }

        /**
         * @param apiSecret The API secret associated with your Confluent account.
         * 
         * @return builder
         * 
         */
        public Builder apiSecret(@Nullable Output<String> apiSecret) {
            $.apiSecret = apiSecret;
            return this;
        }

        /**
         * @param apiSecret The API secret associated with your Confluent account.
         * 
         * @return builder
         * 
         */
        public Builder apiSecret(String apiSecret) {
            return apiSecret(Output.of(apiSecret));
        }

        /**
         * @param tags A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public IntegrationAccountState build() {
            return $;
        }
    }

}
