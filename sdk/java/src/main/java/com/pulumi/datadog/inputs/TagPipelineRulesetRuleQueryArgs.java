// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.TagPipelineRulesetRuleQueryAdditionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagPipelineRulesetRuleQueryArgs extends com.pulumi.resources.ResourceArgs {

    public static final TagPipelineRulesetRuleQueryArgs Empty = new TagPipelineRulesetRuleQueryArgs();

    /**
     * The addition configuration for the query.
     * 
     */
    @Import(name="addition")
    private @Nullable Output<TagPipelineRulesetRuleQueryAdditionArgs> addition;

    /**
     * @return The addition configuration for the query.
     * 
     */
    public Optional<Output<TagPipelineRulesetRuleQueryAdditionArgs>> addition() {
        return Optional.ofNullable(this.addition);
    }

    /**
     * Whether the query matching is case insensitive.
     * 
     */
    @Import(name="caseInsensitivity")
    private @Nullable Output<Boolean> caseInsensitivity;

    /**
     * @return Whether the query matching is case insensitive.
     * 
     */
    public Optional<Output<Boolean>> caseInsensitivity() {
        return Optional.ofNullable(this.caseInsensitivity);
    }

    /**
     * Whether to apply the query only if the key doesn&#39;t exist.
     * 
     */
    @Import(name="ifNotExists")
    private @Nullable Output<Boolean> ifNotExists;

    /**
     * @return Whether to apply the query only if the key doesn&#39;t exist.
     * 
     */
    public Optional<Output<Boolean>> ifNotExists() {
        return Optional.ofNullable(this.ifNotExists);
    }

    /**
     * The query string.
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return The query string.
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    private TagPipelineRulesetRuleQueryArgs() {}

    private TagPipelineRulesetRuleQueryArgs(TagPipelineRulesetRuleQueryArgs $) {
        this.addition = $.addition;
        this.caseInsensitivity = $.caseInsensitivity;
        this.ifNotExists = $.ifNotExists;
        this.query = $.query;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagPipelineRulesetRuleQueryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagPipelineRulesetRuleQueryArgs $;

        public Builder() {
            $ = new TagPipelineRulesetRuleQueryArgs();
        }

        public Builder(TagPipelineRulesetRuleQueryArgs defaults) {
            $ = new TagPipelineRulesetRuleQueryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addition The addition configuration for the query.
         * 
         * @return builder
         * 
         */
        public Builder addition(@Nullable Output<TagPipelineRulesetRuleQueryAdditionArgs> addition) {
            $.addition = addition;
            return this;
        }

        /**
         * @param addition The addition configuration for the query.
         * 
         * @return builder
         * 
         */
        public Builder addition(TagPipelineRulesetRuleQueryAdditionArgs addition) {
            return addition(Output.of(addition));
        }

        /**
         * @param caseInsensitivity Whether the query matching is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder caseInsensitivity(@Nullable Output<Boolean> caseInsensitivity) {
            $.caseInsensitivity = caseInsensitivity;
            return this;
        }

        /**
         * @param caseInsensitivity Whether the query matching is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder caseInsensitivity(Boolean caseInsensitivity) {
            return caseInsensitivity(Output.of(caseInsensitivity));
        }

        /**
         * @param ifNotExists Whether to apply the query only if the key doesn&#39;t exist.
         * 
         * @return builder
         * 
         */
        public Builder ifNotExists(@Nullable Output<Boolean> ifNotExists) {
            $.ifNotExists = ifNotExists;
            return this;
        }

        /**
         * @param ifNotExists Whether to apply the query only if the key doesn&#39;t exist.
         * 
         * @return builder
         * 
         */
        public Builder ifNotExists(Boolean ifNotExists) {
            return ifNotExists(Output.of(ifNotExists));
        }

        /**
         * @param query The query string.
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query The query string.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        public TagPipelineRulesetRuleQueryArgs build() {
            return $;
        }
    }

}
