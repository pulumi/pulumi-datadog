// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetServiceAccountResult {
    /**
     * @return Whether the user is disabled.
     * 
     */
    private Boolean disabled;
    /**
     * @return Email of the user.
     * 
     */
    private String email;
    /**
     * @return Filter all users and service accounts by name, email, or role.
     * 
     */
    private @Nullable String filter;
    /**
     * @return Filter on status attribute. Comma separated list, with possible values `Active`, `Pending`, and `Disabled`.
     * 
     */
    private @Nullable String filterStatus;
    /**
     * @return Handle of the user.
     * 
     */
    private String handle;
    /**
     * @return URL of the user&#39;s icon.
     * 
     */
    private String icon;
    /**
     * @return The service account&#39;s ID.
     * 
     */
    private String id;
    /**
     * @return Name of the user.
     * 
     */
    private String name;
    /**
     * @return Roles assigned to this service account.
     * 
     */
    private List<String> roles;
    /**
     * @return Status of the user.
     * 
     */
    private String status;
    /**
     * @return Title of the user.
     * 
     */
    private String title;
    /**
     * @return Whether the user is verified.
     * 
     */
    private Boolean verified;

    private GetServiceAccountResult() {}
    /**
     * @return Whether the user is disabled.
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    /**
     * @return Email of the user.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return Filter all users and service accounts by name, email, or role.
     * 
     */
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return Filter on status attribute. Comma separated list, with possible values `Active`, `Pending`, and `Disabled`.
     * 
     */
    public Optional<String> filterStatus() {
        return Optional.ofNullable(this.filterStatus);
    }
    /**
     * @return Handle of the user.
     * 
     */
    public String handle() {
        return this.handle;
    }
    /**
     * @return URL of the user&#39;s icon.
     * 
     */
    public String icon() {
        return this.icon;
    }
    /**
     * @return The service account&#39;s ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Name of the user.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Roles assigned to this service account.
     * 
     */
    public List<String> roles() {
        return this.roles;
    }
    /**
     * @return Status of the user.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Title of the user.
     * 
     */
    public String title() {
        return this.title;
    }
    /**
     * @return Whether the user is verified.
     * 
     */
    public Boolean verified() {
        return this.verified;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceAccountResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean disabled;
        private String email;
        private @Nullable String filter;
        private @Nullable String filterStatus;
        private String handle;
        private String icon;
        private String id;
        private String name;
        private List<String> roles;
        private String status;
        private String title;
        private Boolean verified;
        public Builder() {}
        public Builder(GetServiceAccountResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disabled = defaults.disabled;
    	      this.email = defaults.email;
    	      this.filter = defaults.filter;
    	      this.filterStatus = defaults.filterStatus;
    	      this.handle = defaults.handle;
    	      this.icon = defaults.icon;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.roles = defaults.roles;
    	      this.status = defaults.status;
    	      this.title = defaults.title;
    	      this.verified = defaults.verified;
        }

        @CustomType.Setter
        public Builder disabled(Boolean disabled) {
            if (disabled == null) {
              throw new MissingRequiredPropertyException("GetServiceAccountResult", "disabled");
            }
            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetServiceAccountResult", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable String filter) {

            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder filterStatus(@Nullable String filterStatus) {

            this.filterStatus = filterStatus;
            return this;
        }
        @CustomType.Setter
        public Builder handle(String handle) {
            if (handle == null) {
              throw new MissingRequiredPropertyException("GetServiceAccountResult", "handle");
            }
            this.handle = handle;
            return this;
        }
        @CustomType.Setter
        public Builder icon(String icon) {
            if (icon == null) {
              throw new MissingRequiredPropertyException("GetServiceAccountResult", "icon");
            }
            this.icon = icon;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceAccountResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceAccountResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder roles(List<String> roles) {
            if (roles == null) {
              throw new MissingRequiredPropertyException("GetServiceAccountResult", "roles");
            }
            this.roles = roles;
            return this;
        }
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetServiceAccountResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder title(String title) {
            if (title == null) {
              throw new MissingRequiredPropertyException("GetServiceAccountResult", "title");
            }
            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder verified(Boolean verified) {
            if (verified == null) {
              throw new MissingRequiredPropertyException("GetServiceAccountResult", "verified");
            }
            this.verified = verified;
            return this;
        }
        public GetServiceAccountResult build() {
            final var _resultValue = new GetServiceAccountResult();
            _resultValue.disabled = disabled;
            _resultValue.email = email;
            _resultValue.filter = filter;
            _resultValue.filterStatus = filterStatus;
            _resultValue.handle = handle;
            _resultValue.icon = icon;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.roles = roles;
            _resultValue.status = status;
            _resultValue.title = title;
            _resultValue.verified = verified;
            return _resultValue;
        }
    }
}
