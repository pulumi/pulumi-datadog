// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.datadog.MonitorArgs;
import com.pulumi.datadog.Utilities;
import com.pulumi.datadog.inputs.MonitorState;
import com.pulumi.datadog.outputs.MonitorMonitorThresholdWindows;
import com.pulumi.datadog.outputs.MonitorMonitorThresholds;
import com.pulumi.datadog.outputs.MonitorSchedulingOption;
import com.pulumi.datadog.outputs.MonitorVariables;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Datadog monitor resource. This can be used to create and manage Datadog monitors.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.datadog.Monitor;
 * import com.pulumi.datadog.MonitorArgs;
 * import com.pulumi.datadog.inputs.MonitorMonitorThresholdsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new Monitor("foo", MonitorArgs.builder()        
 *             .name("Name for monitor foo")
 *             .type("metric alert")
 *             .message("Monitor triggered. Notify:{@literal @}hipchat-channel")
 *             .escalationMessage("Escalation message{@literal @}pagerduty")
 *             .query("avg(last_1h):avg:aws.ec2.cpu{environment:foo,host:foo} by {host} > 4")
 *             .monitorThresholds(MonitorMonitorThresholdsArgs.builder()
 *                 .warning(2)
 *                 .critical(4)
 *                 .build())
 *             .includeTags(true)
 *             .tags(            
 *                 "foo:bar",
 *                 "team:fooBar")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import datadog:index/monitor:Monitor bytes_received_localhost 2081
 * ```
 * 
 */
@ResourceType(type="datadog:index/monitor:Monitor")
public class Monitor extends com.pulumi.resources.CustomResource {
    /**
     * A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log
     * monitors. Defaults to `false`.
     * 
     */
    @Export(name="enableLogsSample", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableLogsSample;

    /**
     * @return A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log
     * monitors. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> enableLogsSample() {
        return Codegen.optional(this.enableLogsSample);
    }
    /**
     * Whether or not a list of samples which triggered the alert is included. This is only used by CI Test and Pipeline
     * monitors.
     * 
     */
    @Export(name="enableSamples", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableSamples;

    /**
     * @return Whether or not a list of samples which triggered the alert is included. This is only used by CI Test and Pipeline
     * monitors.
     * 
     */
    public Output<Boolean> enableSamples() {
        return this.enableSamples;
    }
    /**
     * A message to include with a re-notification. Supports the `{@literal @}username` notification allowed elsewhere.
     * 
     */
    @Export(name="escalationMessage", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> escalationMessage;

    /**
     * @return A message to include with a re-notification. Supports the `{@literal @}username` notification allowed elsewhere.
     * 
     */
    public Output<Optional<String>> escalationMessage() {
        return Codegen.optional(this.escalationMessage);
    }
    /**
     * (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer. For example, if the
     * value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data
     * from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have
     * data during evaluation.
     * 
     */
    @Export(name="evaluationDelay", refs={Integer.class}, tree="[0]")
    private Output<Integer> evaluationDelay;

    /**
     * @return (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer. For example, if the
     * value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data
     * from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have
     * data during evaluation.
     * 
     */
    public Output<Integer> evaluationDelay() {
        return this.evaluationDelay;
    }
    /**
     * A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO,
     * composite monitor).
     * 
     */
    @Export(name="forceDelete", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceDelete;

    /**
     * @return A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO,
     * composite monitor).
     * 
     */
    public Output<Optional<Boolean>> forceDelete() {
        return Codegen.optional(this.forceDelete);
    }
    /**
     * The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour,
     * and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace
     * Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
     * 
     */
    @Export(name="groupRetentionDuration", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> groupRetentionDuration;

    /**
     * @return The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour,
     * and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace
     * Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
     * 
     */
    public Output<Optional<String>> groupRetentionDuration() {
        return Codegen.optional(this.groupRetentionDuration);
    }
    /**
     * Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to
     * `false`.
     * 
     */
    @Export(name="groupbySimpleMonitor", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> groupbySimpleMonitor;

    /**
     * @return Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to
     * `false`.
     * 
     */
    public Output<Optional<Boolean>> groupbySimpleMonitor() {
        return Codegen.optional(this.groupbySimpleMonitor);
    }
    /**
     * A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title.
     * 
     */
    @Export(name="includeTags", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> includeTags;

    /**
     * @return A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title.
     * 
     */
    public Output<Optional<Boolean>> includeTags() {
        return Codegen.optional(this.includeTags);
    }
    /**
     * A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`.
     * 
     * @deprecated
     * Use `restricted_roles`.
     * 
     */
    @Deprecated /* Use `restricted_roles`. */
    @Export(name="locked", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> locked;

    /**
     * @return A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> locked() {
        return Codegen.optional(this.locked);
    }
    /**
     * A message to include with notifications for this monitor.
     * 
     */
    @Export(name="message", refs={String.class}, tree="[0]")
    private Output<String> message;

    /**
     * @return A message to include with notifications for this monitor.
     * 
     */
    public Output<String> message() {
        return this.message;
    }
    /**
     * A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are
     * required for, anomaly monitors.
     * 
     */
    @Export(name="monitorThresholdWindows", refs={MonitorMonitorThresholdWindows.class}, tree="[0]")
    private Output</* @Nullable */ MonitorMonitorThresholdWindows> monitorThresholdWindows;

    /**
     * @return A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are
     * required for, anomaly monitors.
     * 
     */
    public Output<Optional<MonitorMonitorThresholdWindows>> monitorThresholdWindows() {
        return Codegen.optional(this.monitorThresholdWindows);
    }
    /**
     * Alert thresholds of the monitor.
     * 
     */
    @Export(name="monitorThresholds", refs={MonitorMonitorThresholds.class}, tree="[0]")
    private Output</* @Nullable */ MonitorMonitorThresholds> monitorThresholds;

    /**
     * @return Alert thresholds of the monitor.
     * 
     */
    public Output<Optional<MonitorMonitorThresholds>> monitorThresholds() {
        return Codegen.optional(this.monitorThresholds);
    }
    /**
     * Name of Datadog monitor.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of Datadog monitor.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The time (in seconds) to skip evaluations for new groups. `new_group_delay` overrides `new_host_delay` if it is set to a
     * nonzero value.
     * 
     */
    @Export(name="newGroupDelay", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> newGroupDelay;

    /**
     * @return The time (in seconds) to skip evaluations for new groups. `new_group_delay` overrides `new_host_delay` if it is set to a
     * nonzero value.
     * 
     */
    public Output<Optional<Integer>> newGroupDelay() {
        return Codegen.optional(this.newGroupDelay);
    }
    /**
     * **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before
     * starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors
     * and monitors not grouped by host. The only case when this should be used is to override the default and set
     * `new_host_delay` to zero for monitors grouped by host.
     * 
     * @deprecated
     * Use `new_group_delay` except when setting `new_host_delay` to zero.
     * 
     */
    @Deprecated /* Use `new_group_delay` except when setting `new_host_delay` to zero. */
    @Export(name="newHostDelay", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> newHostDelay;

    /**
     * @return **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before
     * starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors
     * and monitors not grouped by host. The only case when this should be used is to override the default and set
     * `new_host_delay` to zero for monitors grouped by host.
     * 
     */
    public Output<Optional<Integer>> newHostDelay() {
        return Codegen.optional(this.newHostDelay);
    }
    /**
     * The number of minutes before a monitor will notify when data stops reporting. We recommend at least 2x the monitor
     * timeframe for metric alerts or 2 minutes for service checks.
     * 
     */
    @Export(name="noDataTimeframe", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> noDataTimeframe;

    /**
     * @return The number of minutes before a monitor will notify when data stops reporting. We recommend at least 2x the monitor
     * timeframe for metric alerts or 2 minutes for service checks.
     * 
     */
    public Output<Optional<Integer>> noDataTimeframe() {
        return Codegen.optional(this.noDataTimeframe);
    }
    /**
     * Toggles the display of additional content sent in the monitor notification.
     * 
     */
    @Export(name="notificationPresetName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> notificationPresetName;

    /**
     * @return Toggles the display of additional content sent in the monitor notification.
     * 
     */
    public Output<Optional<String>> notificationPresetName() {
        return Codegen.optional(this.notificationPresetName);
    }
    /**
     * A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
     * 
     */
    @Export(name="notifyAudit", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> notifyAudit;

    /**
     * @return A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> notifyAudit() {
        return Codegen.optional(this.notifyAudit);
    }
    /**
     * Controls what granularity a monitor alerts on. Only available for monitors with groupings. For instance, a monitor
     * grouped by `cluster`, `namespace`, and `pod` can be configured to only notify on each new `cluster` violating the alert
     * conditions by setting `notify_by` to `[&#39;cluster&#39;]`. Tags mentioned in `notify_by` must be a subset of the grouping tags
     * in the query. For example, a query grouped by `cluster` and `namespace` cannot notify on `region`. Setting `notify_by`
     * to `[*]` configures the monitor to notify as a simple-alert.
     * 
     */
    @Export(name="notifyBies", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> notifyBies;

    /**
     * @return Controls what granularity a monitor alerts on. Only available for monitors with groupings. For instance, a monitor
     * grouped by `cluster`, `namespace`, and `pod` can be configured to only notify on each new `cluster` violating the alert
     * conditions by setting `notify_by` to `[&#39;cluster&#39;]`. Tags mentioned in `notify_by` must be a subset of the grouping tags
     * in the query. For example, a query grouped by `cluster` and `namespace` cannot notify on `region`. Setting `notify_by`
     * to `[*]` configures the monitor to notify as a simple-alert.
     * 
     */
    public Output<Optional<List<String>>> notifyBies() {
        return Codegen.optional(this.notifyBies);
    }
    /**
     * A boolean indicating whether this monitor will notify when data stops reporting.
     * 
     */
    @Export(name="notifyNoData", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> notifyNoData;

    /**
     * @return A boolean indicating whether this monitor will notify when data stops reporting.
     * 
     */
    public Output<Optional<Boolean>> notifyNoData() {
        return Codegen.optional(this.notifyNoData);
    }
    /**
     * Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results
     * in different behavior depending on the monitor query type. For monitors using `Count` queries, an empty monitor
     * evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than
     * `Count`, for example `Gauge`, `Measure`, or `Rate`, the monitor shows the last known status. This option is only
     * available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors. Valid values are:
     * `show_no_data`, `show_and_notify_no_data`, `resolve`, and `default`.
     * 
     */
    @Export(name="onMissingData", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> onMissingData;

    /**
     * @return Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results
     * in different behavior depending on the monitor query type. For monitors using `Count` queries, an empty monitor
     * evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than
     * `Count`, for example `Gauge`, `Measure`, or `Rate`, the monitor shows the last known status. This option is only
     * available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors. Valid values are:
     * `show_no_data`, `show_and_notify_no_data`, `resolve`, and `default`.
     * 
     */
    public Output<Optional<String>> onMissingData() {
        return Codegen.optional(this.onMissingData);
    }
    /**
     * Integer from 1 (high) to 5 (low) indicating alert severity.
     * 
     */
    @Export(name="priority", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> priority;

    /**
     * @return Integer from 1 (high) to 5 (low) indicating alert severity.
     * 
     */
    public Output<Optional<Integer>> priority() {
        return Codegen.optional(this.priority);
    }
    @Export(name="query", refs={String.class}, tree="[0]")
    private Output<String> query;

    public Output<String> query() {
        return this.query;
    }
    /**
     * The number of minutes after the last notification before a monitor will re-notify on the current status. It will only
     * re-notify if it&#39;s not resolved.
     * 
     */
    @Export(name="renotifyInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> renotifyInterval;

    /**
     * @return The number of minutes after the last notification before a monitor will re-notify on the current status. It will only
     * re-notify if it&#39;s not resolved.
     * 
     */
    public Output<Optional<Integer>> renotifyInterval() {
        return Codegen.optional(this.renotifyInterval);
    }
    /**
     * The number of re-notification messages that should be sent on the current status.
     * 
     */
    @Export(name="renotifyOccurrences", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> renotifyOccurrences;

    /**
     * @return The number of re-notification messages that should be sent on the current status.
     * 
     */
    public Output<Optional<Integer>> renotifyOccurrences() {
        return Codegen.optional(this.renotifyOccurrences);
    }
    /**
     * The types of statuses for which re-notification messages should be sent.
     * 
     */
    @Export(name="renotifyStatuses", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> renotifyStatuses;

    /**
     * @return The types of statuses for which re-notification messages should be sent.
     * 
     */
    public Output<Optional<List<String>>> renotifyStatuses() {
        return Codegen.optional(this.renotifyStatuses);
    }
    /**
     * A boolean indicating whether this monitor needs a full window of data before it&#39;s evaluated. Datadog strongly recommends
     * you set this to `false` for sparse metrics, otherwise some evaluations may be skipped. If there&#39;s a custom_schedule set,
     * `require_full_window` must be false and will be ignored.
     * 
     */
    @Export(name="requireFullWindow", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> requireFullWindow;

    /**
     * @return A boolean indicating whether this monitor needs a full window of data before it&#39;s evaluated. Datadog strongly recommends
     * you set this to `false` for sparse metrics, otherwise some evaluations may be skipped. If there&#39;s a custom_schedule set,
     * `require_full_window` must be false and will be ignored.
     * 
     */
    public Output<Optional<Boolean>> requireFullWindow() {
        return Codegen.optional(this.requireFullWindow);
    }
    /**
     * A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any
     * updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique
     * identifiers can be pulled from the [Roles API](https://docs.datadoghq.com/api/latest/roles/#list-roles) in the `data.id`
     * field.
     * 
     */
    @Export(name="restrictedRoles", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> restrictedRoles;

    /**
     * @return A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any
     * updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique
     * identifiers can be pulled from the [Roles API](https://docs.datadoghq.com/api/latest/roles/#list-roles) in the `data.id`
     * field.
     * 
     */
    public Output<Optional<List<String>>> restrictedRoles() {
        return Codegen.optional(this.restrictedRoles);
    }
    /**
     * Configuration options for scheduling.
     * 
     */
    @Export(name="schedulingOptions", refs={List.class,MonitorSchedulingOption.class}, tree="[0,1]")
    private Output</* @Nullable */ List<MonitorSchedulingOption>> schedulingOptions;

    /**
     * @return Configuration options for scheduling.
     * 
     */
    public Output<Optional<List<MonitorSchedulingOption>>> schedulingOptions() {
        return Codegen.optional(this.schedulingOptions);
    }
    /**
     * A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors
     * page of the UI. Note: it&#39;s not currently possible to filter by these tags when querying via the API
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors
     * page of the UI. Note: it&#39;s not currently possible to filter by these tags when querying via the API
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The
     * minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
     * 
     */
    @Export(name="timeoutH", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> timeoutH;

    /**
     * @return The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The
     * minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
     * 
     */
    public Output<Optional<Integer>> timeoutH() {
        return Codegen.optional(this.timeoutH);
    }
    /**
     * The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the
     * Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type
     * cannot be changed after a monitor is created.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the
     * Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type
     * cannot be changed after a monitor is created.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * If set to `false`, skip the validation call done during plan.
     * 
     */
    @Export(name="validate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> validate;

    /**
     * @return If set to `false`, skip the validation call done during plan.
     * 
     */
    public Output<Optional<Boolean>> validate() {
        return Codegen.optional(this.validate);
    }
    @Export(name="variables", refs={MonitorVariables.class}, tree="[0]")
    private Output</* @Nullable */ MonitorVariables> variables;

    public Output<Optional<MonitorVariables>> variables() {
        return Codegen.optional(this.variables);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Monitor(String name) {
        this(name, MonitorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Monitor(String name, MonitorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Monitor(String name, MonitorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("datadog:index/monitor:Monitor", name, args == null ? MonitorArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Monitor(String name, Output<String> id, @Nullable MonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("datadog:index/monitor:Monitor", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Monitor get(String name, Output<String> id, @Nullable MonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Monitor(name, id, state, options);
    }
}
