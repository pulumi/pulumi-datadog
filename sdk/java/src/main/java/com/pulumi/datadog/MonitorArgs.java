// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.MonitorMonitorThresholdWindowsArgs;
import com.pulumi.datadog.inputs.MonitorMonitorThresholdsArgs;
import com.pulumi.datadog.inputs.MonitorSchedulingOptionArgs;
import com.pulumi.datadog.inputs.MonitorVariablesArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitorArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitorArgs Empty = new MonitorArgs();

    /**
     * A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log
     * monitors. Defaults to `false`.
     * 
     */
    @Import(name="enableLogsSample")
    private @Nullable Output<Boolean> enableLogsSample;

    /**
     * @return A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log
     * monitors. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> enableLogsSample() {
        return Optional.ofNullable(this.enableLogsSample);
    }

    /**
     * A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
     * 
     */
    @Import(name="escalationMessage")
    private @Nullable Output<String> escalationMessage;

    /**
     * @return A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
     * 
     */
    public Optional<Output<String>> escalationMessage() {
        return Optional.ofNullable(this.escalationMessage);
    }

    /**
     * (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer. For example, if the
     * value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data
     * from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have
     * data during evaluation.
     * 
     */
    @Import(name="evaluationDelay")
    private @Nullable Output<Integer> evaluationDelay;

    /**
     * @return (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer. For example, if the
     * value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data
     * from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have
     * data during evaluation.
     * 
     */
    public Optional<Output<Integer>> evaluationDelay() {
        return Optional.ofNullable(this.evaluationDelay);
    }

    /**
     * A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO,
     * composite monitor).
     * 
     */
    @Import(name="forceDelete")
    private @Nullable Output<Boolean> forceDelete;

    /**
     * @return A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO,
     * composite monitor).
     * 
     */
    public Optional<Output<Boolean>> forceDelete() {
        return Optional.ofNullable(this.forceDelete);
    }

    /**
     * The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour,
     * and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace
     * Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
     * 
     */
    @Import(name="groupRetentionDuration")
    private @Nullable Output<String> groupRetentionDuration;

    /**
     * @return The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour,
     * and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace
     * Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
     * 
     */
    public Optional<Output<String>> groupRetentionDuration() {
        return Optional.ofNullable(this.groupRetentionDuration);
    }

    /**
     * Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to
     * `false`.
     * 
     */
    @Import(name="groupbySimpleMonitor")
    private @Nullable Output<Boolean> groupbySimpleMonitor;

    /**
     * @return Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to
     * `false`.
     * 
     */
    public Optional<Output<Boolean>> groupbySimpleMonitor() {
        return Optional.ofNullable(this.groupbySimpleMonitor);
    }

    /**
     * A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title.
     * Defaults to `true`.
     * 
     */
    @Import(name="includeTags")
    private @Nullable Output<Boolean> includeTags;

    /**
     * @return A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title.
     * Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> includeTags() {
        return Optional.ofNullable(this.includeTags);
    }

    /**
     * A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`.
     * 
     * @deprecated
     * Use `restricted_roles`.
     * 
     */
    @Deprecated /* Use `restricted_roles`. */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`.
     * 
     * @deprecated
     * Use `restricted_roles`.
     * 
     */
    @Deprecated /* Use `restricted_roles`. */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * A message to include with notifications for this monitor.
     * 
     */
    @Import(name="message", required=true)
    private Output<String> message;

    /**
     * @return A message to include with notifications for this monitor.
     * 
     */
    public Output<String> message() {
        return this.message;
    }

    /**
     * A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are
     * required for, anomaly monitors.
     * 
     */
    @Import(name="monitorThresholdWindows")
    private @Nullable Output<MonitorMonitorThresholdWindowsArgs> monitorThresholdWindows;

    /**
     * @return A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are
     * required for, anomaly monitors.
     * 
     */
    public Optional<Output<MonitorMonitorThresholdWindowsArgs>> monitorThresholdWindows() {
        return Optional.ofNullable(this.monitorThresholdWindows);
    }

    /**
     * Alert thresholds of the monitor.
     * 
     */
    @Import(name="monitorThresholds")
    private @Nullable Output<MonitorMonitorThresholdsArgs> monitorThresholds;

    /**
     * @return Alert thresholds of the monitor.
     * 
     */
    public Optional<Output<MonitorMonitorThresholdsArgs>> monitorThresholds() {
        return Optional.ofNullable(this.monitorThresholds);
    }

    /**
     * Name of Datadog monitor.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of Datadog monitor.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The time (in seconds) to skip evaluations for new groups. `new_group_delay` overrides `new_host_delay` if it is set to a
     * nonzero value.
     * 
     */
    @Import(name="newGroupDelay")
    private @Nullable Output<Integer> newGroupDelay;

    /**
     * @return The time (in seconds) to skip evaluations for new groups. `new_group_delay` overrides `new_host_delay` if it is set to a
     * nonzero value.
     * 
     */
    public Optional<Output<Integer>> newGroupDelay() {
        return Optional.ofNullable(this.newGroupDelay);
    }

    /**
     * **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before
     * starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors
     * and monitors not grouped by host. Defaults to `300`. The only case when this should be used is to override the default
     * and set `new_host_delay` to zero for monitors grouped by host.
     * 
     * @deprecated
     * Use `new_group_delay` except when setting `new_host_delay` to zero.
     * 
     */
    @Deprecated /* Use `new_group_delay` except when setting `new_host_delay` to zero. */
    @Import(name="newHostDelay")
    private @Nullable Output<Integer> newHostDelay;

    /**
     * @return **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before
     * starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors
     * and monitors not grouped by host. Defaults to `300`. The only case when this should be used is to override the default
     * and set `new_host_delay` to zero for monitors grouped by host.
     * 
     * @deprecated
     * Use `new_group_delay` except when setting `new_host_delay` to zero.
     * 
     */
    @Deprecated /* Use `new_group_delay` except when setting `new_host_delay` to zero. */
    public Optional<Output<Integer>> newHostDelay() {
        return Optional.ofNullable(this.newHostDelay);
    }

    /**
     * The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes. We
     * recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
     * 
     */
    @Import(name="noDataTimeframe")
    private @Nullable Output<Integer> noDataTimeframe;

    /**
     * @return The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes. We
     * recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
     * 
     */
    public Optional<Output<Integer>> noDataTimeframe() {
        return Optional.ofNullable(this.noDataTimeframe);
    }

    /**
     * Toggles the display of additional content sent in the monitor notification.
     * 
     */
    @Import(name="notificationPresetName")
    private @Nullable Output<String> notificationPresetName;

    /**
     * @return Toggles the display of additional content sent in the monitor notification.
     * 
     */
    public Optional<Output<String>> notificationPresetName() {
        return Optional.ofNullable(this.notificationPresetName);
    }

    /**
     * A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
     * 
     */
    @Import(name="notifyAudit")
    private @Nullable Output<Boolean> notifyAudit;

    /**
     * @return A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> notifyAudit() {
        return Optional.ofNullable(this.notifyAudit);
    }

    /**
     * Controls what granularity a monitor alerts on. Only available for monitors with groupings. For instance, a monitor
     * grouped by `cluster`, `namespace`, and `pod` can be configured to only notify on each new `cluster` violating the alert
     * conditions by setting `notify_by` to `[&#39;cluster&#39;]`. Tags mentioned in `notify_by` must be a subset of the grouping tags
     * in the query. For example, a query grouped by `cluster` and `namespace` cannot notify on `region`. Setting `notify_by`
     * to `[*]` configures the monitor to notify as a simple-alert.
     * 
     */
    @Import(name="notifyBies")
    private @Nullable Output<List<String>> notifyBies;

    /**
     * @return Controls what granularity a monitor alerts on. Only available for monitors with groupings. For instance, a monitor
     * grouped by `cluster`, `namespace`, and `pod` can be configured to only notify on each new `cluster` violating the alert
     * conditions by setting `notify_by` to `[&#39;cluster&#39;]`. Tags mentioned in `notify_by` must be a subset of the grouping tags
     * in the query. For example, a query grouped by `cluster` and `namespace` cannot notify on `region`. Setting `notify_by`
     * to `[*]` configures the monitor to notify as a simple-alert.
     * 
     */
    public Optional<Output<List<String>>> notifyBies() {
        return Optional.ofNullable(this.notifyBies);
    }

    /**
     * A boolean indicating whether this monitor will notify when data stops reporting. Defaults to `false`.
     * 
     */
    @Import(name="notifyNoData")
    private @Nullable Output<Boolean> notifyNoData;

    /**
     * @return A boolean indicating whether this monitor will notify when data stops reporting. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> notifyNoData() {
        return Optional.ofNullable(this.notifyNoData);
    }

    /**
     * Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results
     * in different behavior depending on the monitor query type. For monitors using `Count` queries, an empty monitor
     * evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than
     * `Count`, for example `Gauge`, `Measure`, or `Rate`, the monitor shows the last known status. This option is only
     * available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors. Valid values are:
     * `show_no_data`, `show_and_notify_no_data`, `resolve`, and `default`.
     * 
     */
    @Import(name="onMissingData")
    private @Nullable Output<String> onMissingData;

    /**
     * @return Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results
     * in different behavior depending on the monitor query type. For monitors using `Count` queries, an empty monitor
     * evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than
     * `Count`, for example `Gauge`, `Measure`, or `Rate`, the monitor shows the last known status. This option is only
     * available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors. Valid values are:
     * `show_no_data`, `show_and_notify_no_data`, `resolve`, and `default`.
     * 
     */
    public Optional<Output<String>> onMissingData() {
        return Optional.ofNullable(this.onMissingData);
    }

    /**
     * Integer from 1 (high) to 5 (low) indicating alert severity.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Integer from 1 (high) to 5 (low) indicating alert severity.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending
     * on the monitor type, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for
     * details. `terraform plan` will validate query contents unless `validate` is set to `false`. **Note:** APM latency data
     * is now available as Distribution Metrics. Existing monitors have been migrated automatically but all terraformed
     * monitors can still use the existing metrics. We strongly recommend updating monitor definitions to query the new
     * metrics. To learn more, or to see examples of how to update your terraform definitions to utilize the new distribution
     * metrics, see the [detailed doc](https://docs.datadoghq.com/tracing/guide/ddsketch_trace_metrics/).
     * 
     */
    @Import(name="query", required=true)
    private Output<String> query;

    /**
     * @return The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending
     * on the monitor type, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for
     * details. `terraform plan` will validate query contents unless `validate` is set to `false`. **Note:** APM latency data
     * is now available as Distribution Metrics. Existing monitors have been migrated automatically but all terraformed
     * monitors can still use the existing metrics. We strongly recommend updating monitor definitions to query the new
     * metrics. To learn more, or to see examples of how to update your terraform definitions to utilize the new distribution
     * metrics, see the [detailed doc](https://docs.datadoghq.com/tracing/guide/ddsketch_trace_metrics/).
     * 
     */
    public Output<String> query() {
        return this.query;
    }

    /**
     * The number of minutes after the last notification before a monitor will re-notify on the current status. It will only
     * re-notify if it&#39;s not resolved.
     * 
     */
    @Import(name="renotifyInterval")
    private @Nullable Output<Integer> renotifyInterval;

    /**
     * @return The number of minutes after the last notification before a monitor will re-notify on the current status. It will only
     * re-notify if it&#39;s not resolved.
     * 
     */
    public Optional<Output<Integer>> renotifyInterval() {
        return Optional.ofNullable(this.renotifyInterval);
    }

    /**
     * The number of re-notification messages that should be sent on the current status.
     * 
     */
    @Import(name="renotifyOccurrences")
    private @Nullable Output<Integer> renotifyOccurrences;

    /**
     * @return The number of re-notification messages that should be sent on the current status.
     * 
     */
    public Optional<Output<Integer>> renotifyOccurrences() {
        return Optional.ofNullable(this.renotifyOccurrences);
    }

    /**
     * The types of statuses for which re-notification messages should be sent.
     * 
     */
    @Import(name="renotifyStatuses")
    private @Nullable Output<List<String>> renotifyStatuses;

    /**
     * @return The types of statuses for which re-notification messages should be sent.
     * 
     */
    public Optional<Output<List<String>>> renotifyStatuses() {
        return Optional.ofNullable(this.renotifyStatuses);
    }

    /**
     * A boolean indicating whether this monitor needs a full window of data before it&#39;s evaluated. We highly recommend you set
     * this to `false` for sparse metrics, otherwise some evaluations will be skipped. Default: `true` for `on average`, `at
     * all times` and `in total` aggregation. `false` otherwise.
     * 
     */
    @Import(name="requireFullWindow")
    private @Nullable Output<Boolean> requireFullWindow;

    /**
     * @return A boolean indicating whether this monitor needs a full window of data before it&#39;s evaluated. We highly recommend you set
     * this to `false` for sparse metrics, otherwise some evaluations will be skipped. Default: `true` for `on average`, `at
     * all times` and `in total` aggregation. `false` otherwise.
     * 
     */
    public Optional<Output<Boolean>> requireFullWindow() {
        return Optional.ofNullable(this.requireFullWindow);
    }

    /**
     * A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any
     * updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique
     * identifiers can be pulled from the [Roles API](https://docs.datadoghq.com/api/latest/roles/#list-roles) in the `data.id`
     * field.
     * 
     */
    @Import(name="restrictedRoles")
    private @Nullable Output<List<String>> restrictedRoles;

    /**
     * @return A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any
     * updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique
     * identifiers can be pulled from the [Roles API](https://docs.datadoghq.com/api/latest/roles/#list-roles) in the `data.id`
     * field.
     * 
     */
    public Optional<Output<List<String>>> restrictedRoles() {
        return Optional.ofNullable(this.restrictedRoles);
    }

    /**
     * Configuration options for scheduling.
     * 
     */
    @Import(name="schedulingOptions")
    private @Nullable Output<List<MonitorSchedulingOptionArgs>> schedulingOptions;

    /**
     * @return Configuration options for scheduling.
     * 
     */
    public Optional<Output<List<MonitorSchedulingOptionArgs>>> schedulingOptions() {
        return Optional.ofNullable(this.schedulingOptions);
    }

    /**
     * A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors
     * page of the UI. Note: it&#39;s not currently possible to filter by these tags when querying via the API
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors
     * page of the UI. Note: it&#39;s not currently possible to filter by these tags when querying via the API
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The
     * minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
     * 
     */
    @Import(name="timeoutH")
    private @Nullable Output<Integer> timeoutH;

    /**
     * @return The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The
     * minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
     * 
     */
    public Optional<Output<Integer>> timeoutH() {
        return Optional.ofNullable(this.timeoutH);
    }

    /**
     * The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the
     * Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type
     * cannot be changed after a monitor is created.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the
     * Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type
     * cannot be changed after a monitor is created.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * If set to `false`, skip the validation call done during plan.
     * 
     */
    @Import(name="validate")
    private @Nullable Output<Boolean> validate;

    /**
     * @return If set to `false`, skip the validation call done during plan.
     * 
     */
    public Optional<Output<Boolean>> validate() {
        return Optional.ofNullable(this.validate);
    }

    @Import(name="variables")
    private @Nullable Output<MonitorVariablesArgs> variables;

    public Optional<Output<MonitorVariablesArgs>> variables() {
        return Optional.ofNullable(this.variables);
    }

    private MonitorArgs() {}

    private MonitorArgs(MonitorArgs $) {
        this.enableLogsSample = $.enableLogsSample;
        this.escalationMessage = $.escalationMessage;
        this.evaluationDelay = $.evaluationDelay;
        this.forceDelete = $.forceDelete;
        this.groupRetentionDuration = $.groupRetentionDuration;
        this.groupbySimpleMonitor = $.groupbySimpleMonitor;
        this.includeTags = $.includeTags;
        this.locked = $.locked;
        this.message = $.message;
        this.monitorThresholdWindows = $.monitorThresholdWindows;
        this.monitorThresholds = $.monitorThresholds;
        this.name = $.name;
        this.newGroupDelay = $.newGroupDelay;
        this.newHostDelay = $.newHostDelay;
        this.noDataTimeframe = $.noDataTimeframe;
        this.notificationPresetName = $.notificationPresetName;
        this.notifyAudit = $.notifyAudit;
        this.notifyBies = $.notifyBies;
        this.notifyNoData = $.notifyNoData;
        this.onMissingData = $.onMissingData;
        this.priority = $.priority;
        this.query = $.query;
        this.renotifyInterval = $.renotifyInterval;
        this.renotifyOccurrences = $.renotifyOccurrences;
        this.renotifyStatuses = $.renotifyStatuses;
        this.requireFullWindow = $.requireFullWindow;
        this.restrictedRoles = $.restrictedRoles;
        this.schedulingOptions = $.schedulingOptions;
        this.tags = $.tags;
        this.timeoutH = $.timeoutH;
        this.type = $.type;
        this.validate = $.validate;
        this.variables = $.variables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorArgs $;

        public Builder() {
            $ = new MonitorArgs();
        }

        public Builder(MonitorArgs defaults) {
            $ = new MonitorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableLogsSample A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log
         * monitors. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableLogsSample(@Nullable Output<Boolean> enableLogsSample) {
            $.enableLogsSample = enableLogsSample;
            return this;
        }

        /**
         * @param enableLogsSample A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log
         * monitors. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableLogsSample(Boolean enableLogsSample) {
            return enableLogsSample(Output.of(enableLogsSample));
        }

        /**
         * @param escalationMessage A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
         * 
         * @return builder
         * 
         */
        public Builder escalationMessage(@Nullable Output<String> escalationMessage) {
            $.escalationMessage = escalationMessage;
            return this;
        }

        /**
         * @param escalationMessage A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
         * 
         * @return builder
         * 
         */
        public Builder escalationMessage(String escalationMessage) {
            return escalationMessage(Output.of(escalationMessage));
        }

        /**
         * @param evaluationDelay (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer. For example, if the
         * value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data
         * from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have
         * data during evaluation.
         * 
         * @return builder
         * 
         */
        public Builder evaluationDelay(@Nullable Output<Integer> evaluationDelay) {
            $.evaluationDelay = evaluationDelay;
            return this;
        }

        /**
         * @param evaluationDelay (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer. For example, if the
         * value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data
         * from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have
         * data during evaluation.
         * 
         * @return builder
         * 
         */
        public Builder evaluationDelay(Integer evaluationDelay) {
            return evaluationDelay(Output.of(evaluationDelay));
        }

        /**
         * @param forceDelete A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO,
         * composite monitor).
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(@Nullable Output<Boolean> forceDelete) {
            $.forceDelete = forceDelete;
            return this;
        }

        /**
         * @param forceDelete A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO,
         * composite monitor).
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(Boolean forceDelete) {
            return forceDelete(Output.of(forceDelete));
        }

        /**
         * @param groupRetentionDuration The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour,
         * and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace
         * Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
         * 
         * @return builder
         * 
         */
        public Builder groupRetentionDuration(@Nullable Output<String> groupRetentionDuration) {
            $.groupRetentionDuration = groupRetentionDuration;
            return this;
        }

        /**
         * @param groupRetentionDuration The time span after which groups with missing data are dropped from the monitor state. The minimum value is one hour,
         * and the maximum value is 72 hours. Example values are: 60m, 1h, and 2d. This option is only available for APM Trace
         * Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors.
         * 
         * @return builder
         * 
         */
        public Builder groupRetentionDuration(String groupRetentionDuration) {
            return groupRetentionDuration(Output.of(groupRetentionDuration));
        }

        /**
         * @param groupbySimpleMonitor Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to
         * `false`.
         * 
         * @return builder
         * 
         */
        public Builder groupbySimpleMonitor(@Nullable Output<Boolean> groupbySimpleMonitor) {
            $.groupbySimpleMonitor = groupbySimpleMonitor;
            return this;
        }

        /**
         * @param groupbySimpleMonitor Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to
         * `false`.
         * 
         * @return builder
         * 
         */
        public Builder groupbySimpleMonitor(Boolean groupbySimpleMonitor) {
            return groupbySimpleMonitor(Output.of(groupbySimpleMonitor));
        }

        /**
         * @param includeTags A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title.
         * Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder includeTags(@Nullable Output<Boolean> includeTags) {
            $.includeTags = includeTags;
            return this;
        }

        /**
         * @param includeTags A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title.
         * Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder includeTags(Boolean includeTags) {
            return includeTags(Output.of(includeTags));
        }

        /**
         * @param locked A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `restricted_roles`.
         * 
         */
        @Deprecated /* Use `restricted_roles`. */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `restricted_roles`.
         * 
         */
        @Deprecated /* Use `restricted_roles`. */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param message A message to include with notifications for this monitor.
         * 
         * @return builder
         * 
         */
        public Builder message(Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message A message to include with notifications for this monitor.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param monitorThresholdWindows A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are
         * required for, anomaly monitors.
         * 
         * @return builder
         * 
         */
        public Builder monitorThresholdWindows(@Nullable Output<MonitorMonitorThresholdWindowsArgs> monitorThresholdWindows) {
            $.monitorThresholdWindows = monitorThresholdWindows;
            return this;
        }

        /**
         * @param monitorThresholdWindows A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are
         * required for, anomaly monitors.
         * 
         * @return builder
         * 
         */
        public Builder monitorThresholdWindows(MonitorMonitorThresholdWindowsArgs monitorThresholdWindows) {
            return monitorThresholdWindows(Output.of(monitorThresholdWindows));
        }

        /**
         * @param monitorThresholds Alert thresholds of the monitor.
         * 
         * @return builder
         * 
         */
        public Builder monitorThresholds(@Nullable Output<MonitorMonitorThresholdsArgs> monitorThresholds) {
            $.monitorThresholds = monitorThresholds;
            return this;
        }

        /**
         * @param monitorThresholds Alert thresholds of the monitor.
         * 
         * @return builder
         * 
         */
        public Builder monitorThresholds(MonitorMonitorThresholdsArgs monitorThresholds) {
            return monitorThresholds(Output.of(monitorThresholds));
        }

        /**
         * @param name Name of Datadog monitor.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of Datadog monitor.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param newGroupDelay The time (in seconds) to skip evaluations for new groups. `new_group_delay` overrides `new_host_delay` if it is set to a
         * nonzero value.
         * 
         * @return builder
         * 
         */
        public Builder newGroupDelay(@Nullable Output<Integer> newGroupDelay) {
            $.newGroupDelay = newGroupDelay;
            return this;
        }

        /**
         * @param newGroupDelay The time (in seconds) to skip evaluations for new groups. `new_group_delay` overrides `new_host_delay` if it is set to a
         * nonzero value.
         * 
         * @return builder
         * 
         */
        public Builder newGroupDelay(Integer newGroupDelay) {
            return newGroupDelay(Output.of(newGroupDelay));
        }

        /**
         * @param newHostDelay **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before
         * starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors
         * and monitors not grouped by host. Defaults to `300`. The only case when this should be used is to override the default
         * and set `new_host_delay` to zero for monitors grouped by host.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `new_group_delay` except when setting `new_host_delay` to zero.
         * 
         */
        @Deprecated /* Use `new_group_delay` except when setting `new_host_delay` to zero. */
        public Builder newHostDelay(@Nullable Output<Integer> newHostDelay) {
            $.newHostDelay = newHostDelay;
            return this;
        }

        /**
         * @param newHostDelay **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before
         * starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors
         * and monitors not grouped by host. Defaults to `300`. The only case when this should be used is to override the default
         * and set `new_host_delay` to zero for monitors grouped by host.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `new_group_delay` except when setting `new_host_delay` to zero.
         * 
         */
        @Deprecated /* Use `new_group_delay` except when setting `new_host_delay` to zero. */
        public Builder newHostDelay(Integer newHostDelay) {
            return newHostDelay(Output.of(newHostDelay));
        }

        /**
         * @param noDataTimeframe The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes. We
         * recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
         * 
         * @return builder
         * 
         */
        public Builder noDataTimeframe(@Nullable Output<Integer> noDataTimeframe) {
            $.noDataTimeframe = noDataTimeframe;
            return this;
        }

        /**
         * @param noDataTimeframe The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes. We
         * recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
         * 
         * @return builder
         * 
         */
        public Builder noDataTimeframe(Integer noDataTimeframe) {
            return noDataTimeframe(Output.of(noDataTimeframe));
        }

        /**
         * @param notificationPresetName Toggles the display of additional content sent in the monitor notification.
         * 
         * @return builder
         * 
         */
        public Builder notificationPresetName(@Nullable Output<String> notificationPresetName) {
            $.notificationPresetName = notificationPresetName;
            return this;
        }

        /**
         * @param notificationPresetName Toggles the display of additional content sent in the monitor notification.
         * 
         * @return builder
         * 
         */
        public Builder notificationPresetName(String notificationPresetName) {
            return notificationPresetName(Output.of(notificationPresetName));
        }

        /**
         * @param notifyAudit A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder notifyAudit(@Nullable Output<Boolean> notifyAudit) {
            $.notifyAudit = notifyAudit;
            return this;
        }

        /**
         * @param notifyAudit A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder notifyAudit(Boolean notifyAudit) {
            return notifyAudit(Output.of(notifyAudit));
        }

        /**
         * @param notifyBies Controls what granularity a monitor alerts on. Only available for monitors with groupings. For instance, a monitor
         * grouped by `cluster`, `namespace`, and `pod` can be configured to only notify on each new `cluster` violating the alert
         * conditions by setting `notify_by` to `[&#39;cluster&#39;]`. Tags mentioned in `notify_by` must be a subset of the grouping tags
         * in the query. For example, a query grouped by `cluster` and `namespace` cannot notify on `region`. Setting `notify_by`
         * to `[*]` configures the monitor to notify as a simple-alert.
         * 
         * @return builder
         * 
         */
        public Builder notifyBies(@Nullable Output<List<String>> notifyBies) {
            $.notifyBies = notifyBies;
            return this;
        }

        /**
         * @param notifyBies Controls what granularity a monitor alerts on. Only available for monitors with groupings. For instance, a monitor
         * grouped by `cluster`, `namespace`, and `pod` can be configured to only notify on each new `cluster` violating the alert
         * conditions by setting `notify_by` to `[&#39;cluster&#39;]`. Tags mentioned in `notify_by` must be a subset of the grouping tags
         * in the query. For example, a query grouped by `cluster` and `namespace` cannot notify on `region`. Setting `notify_by`
         * to `[*]` configures the monitor to notify as a simple-alert.
         * 
         * @return builder
         * 
         */
        public Builder notifyBies(List<String> notifyBies) {
            return notifyBies(Output.of(notifyBies));
        }

        /**
         * @param notifyBies Controls what granularity a monitor alerts on. Only available for monitors with groupings. For instance, a monitor
         * grouped by `cluster`, `namespace`, and `pod` can be configured to only notify on each new `cluster` violating the alert
         * conditions by setting `notify_by` to `[&#39;cluster&#39;]`. Tags mentioned in `notify_by` must be a subset of the grouping tags
         * in the query. For example, a query grouped by `cluster` and `namespace` cannot notify on `region`. Setting `notify_by`
         * to `[*]` configures the monitor to notify as a simple-alert.
         * 
         * @return builder
         * 
         */
        public Builder notifyBies(String... notifyBies) {
            return notifyBies(List.of(notifyBies));
        }

        /**
         * @param notifyNoData A boolean indicating whether this monitor will notify when data stops reporting. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder notifyNoData(@Nullable Output<Boolean> notifyNoData) {
            $.notifyNoData = notifyNoData;
            return this;
        }

        /**
         * @param notifyNoData A boolean indicating whether this monitor will notify when data stops reporting. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder notifyNoData(Boolean notifyNoData) {
            return notifyNoData(Output.of(notifyNoData));
        }

        /**
         * @param onMissingData Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results
         * in different behavior depending on the monitor query type. For monitors using `Count` queries, an empty monitor
         * evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than
         * `Count`, for example `Gauge`, `Measure`, or `Rate`, the monitor shows the last known status. This option is only
         * available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors. Valid values are:
         * `show_no_data`, `show_and_notify_no_data`, `resolve`, and `default`.
         * 
         * @return builder
         * 
         */
        public Builder onMissingData(@Nullable Output<String> onMissingData) {
            $.onMissingData = onMissingData;
            return this;
        }

        /**
         * @param onMissingData Controls how groups or monitors are treated if an evaluation does not return any data points. The default option results
         * in different behavior depending on the monitor query type. For monitors using `Count` queries, an empty monitor
         * evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than
         * `Count`, for example `Gauge`, `Measure`, or `Rate`, the monitor shows the last known status. This option is only
         * available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors. Valid values are:
         * `show_no_data`, `show_and_notify_no_data`, `resolve`, and `default`.
         * 
         * @return builder
         * 
         */
        public Builder onMissingData(String onMissingData) {
            return onMissingData(Output.of(onMissingData));
        }

        /**
         * @param priority Integer from 1 (high) to 5 (low) indicating alert severity.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Integer from 1 (high) to 5 (low) indicating alert severity.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param query The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending
         * on the monitor type, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for
         * details. `terraform plan` will validate query contents unless `validate` is set to `false`. **Note:** APM latency data
         * is now available as Distribution Metrics. Existing monitors have been migrated automatically but all terraformed
         * monitors can still use the existing metrics. We strongly recommend updating monitor definitions to query the new
         * metrics. To learn more, or to see examples of how to update your terraform definitions to utilize the new distribution
         * metrics, see the [detailed doc](https://docs.datadoghq.com/tracing/guide/ddsketch_trace_metrics/).
         * 
         * @return builder
         * 
         */
        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending
         * on the monitor type, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for
         * details. `terraform plan` will validate query contents unless `validate` is set to `false`. **Note:** APM latency data
         * is now available as Distribution Metrics. Existing monitors have been migrated automatically but all terraformed
         * monitors can still use the existing metrics. We strongly recommend updating monitor definitions to query the new
         * metrics. To learn more, or to see examples of how to update your terraform definitions to utilize the new distribution
         * metrics, see the [detailed doc](https://docs.datadoghq.com/tracing/guide/ddsketch_trace_metrics/).
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param renotifyInterval The number of minutes after the last notification before a monitor will re-notify on the current status. It will only
         * re-notify if it&#39;s not resolved.
         * 
         * @return builder
         * 
         */
        public Builder renotifyInterval(@Nullable Output<Integer> renotifyInterval) {
            $.renotifyInterval = renotifyInterval;
            return this;
        }

        /**
         * @param renotifyInterval The number of minutes after the last notification before a monitor will re-notify on the current status. It will only
         * re-notify if it&#39;s not resolved.
         * 
         * @return builder
         * 
         */
        public Builder renotifyInterval(Integer renotifyInterval) {
            return renotifyInterval(Output.of(renotifyInterval));
        }

        /**
         * @param renotifyOccurrences The number of re-notification messages that should be sent on the current status.
         * 
         * @return builder
         * 
         */
        public Builder renotifyOccurrences(@Nullable Output<Integer> renotifyOccurrences) {
            $.renotifyOccurrences = renotifyOccurrences;
            return this;
        }

        /**
         * @param renotifyOccurrences The number of re-notification messages that should be sent on the current status.
         * 
         * @return builder
         * 
         */
        public Builder renotifyOccurrences(Integer renotifyOccurrences) {
            return renotifyOccurrences(Output.of(renotifyOccurrences));
        }

        /**
         * @param renotifyStatuses The types of statuses for which re-notification messages should be sent.
         * 
         * @return builder
         * 
         */
        public Builder renotifyStatuses(@Nullable Output<List<String>> renotifyStatuses) {
            $.renotifyStatuses = renotifyStatuses;
            return this;
        }

        /**
         * @param renotifyStatuses The types of statuses for which re-notification messages should be sent.
         * 
         * @return builder
         * 
         */
        public Builder renotifyStatuses(List<String> renotifyStatuses) {
            return renotifyStatuses(Output.of(renotifyStatuses));
        }

        /**
         * @param renotifyStatuses The types of statuses for which re-notification messages should be sent.
         * 
         * @return builder
         * 
         */
        public Builder renotifyStatuses(String... renotifyStatuses) {
            return renotifyStatuses(List.of(renotifyStatuses));
        }

        /**
         * @param requireFullWindow A boolean indicating whether this monitor needs a full window of data before it&#39;s evaluated. We highly recommend you set
         * this to `false` for sparse metrics, otherwise some evaluations will be skipped. Default: `true` for `on average`, `at
         * all times` and `in total` aggregation. `false` otherwise.
         * 
         * @return builder
         * 
         */
        public Builder requireFullWindow(@Nullable Output<Boolean> requireFullWindow) {
            $.requireFullWindow = requireFullWindow;
            return this;
        }

        /**
         * @param requireFullWindow A boolean indicating whether this monitor needs a full window of data before it&#39;s evaluated. We highly recommend you set
         * this to `false` for sparse metrics, otherwise some evaluations will be skipped. Default: `true` for `on average`, `at
         * all times` and `in total` aggregation. `false` otherwise.
         * 
         * @return builder
         * 
         */
        public Builder requireFullWindow(Boolean requireFullWindow) {
            return requireFullWindow(Output.of(requireFullWindow));
        }

        /**
         * @param restrictedRoles A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any
         * updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique
         * identifiers can be pulled from the [Roles API](https://docs.datadoghq.com/api/latest/roles/#list-roles) in the `data.id`
         * field.
         * 
         * @return builder
         * 
         */
        public Builder restrictedRoles(@Nullable Output<List<String>> restrictedRoles) {
            $.restrictedRoles = restrictedRoles;
            return this;
        }

        /**
         * @param restrictedRoles A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any
         * updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique
         * identifiers can be pulled from the [Roles API](https://docs.datadoghq.com/api/latest/roles/#list-roles) in the `data.id`
         * field.
         * 
         * @return builder
         * 
         */
        public Builder restrictedRoles(List<String> restrictedRoles) {
            return restrictedRoles(Output.of(restrictedRoles));
        }

        /**
         * @param restrictedRoles A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any
         * updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique
         * identifiers can be pulled from the [Roles API](https://docs.datadoghq.com/api/latest/roles/#list-roles) in the `data.id`
         * field.
         * 
         * @return builder
         * 
         */
        public Builder restrictedRoles(String... restrictedRoles) {
            return restrictedRoles(List.of(restrictedRoles));
        }

        /**
         * @param schedulingOptions Configuration options for scheduling.
         * 
         * @return builder
         * 
         */
        public Builder schedulingOptions(@Nullable Output<List<MonitorSchedulingOptionArgs>> schedulingOptions) {
            $.schedulingOptions = schedulingOptions;
            return this;
        }

        /**
         * @param schedulingOptions Configuration options for scheduling.
         * 
         * @return builder
         * 
         */
        public Builder schedulingOptions(List<MonitorSchedulingOptionArgs> schedulingOptions) {
            return schedulingOptions(Output.of(schedulingOptions));
        }

        /**
         * @param schedulingOptions Configuration options for scheduling.
         * 
         * @return builder
         * 
         */
        public Builder schedulingOptions(MonitorSchedulingOptionArgs... schedulingOptions) {
            return schedulingOptions(List.of(schedulingOptions));
        }

        /**
         * @param tags A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors
         * page of the UI. Note: it&#39;s not currently possible to filter by these tags when querying via the API
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors
         * page of the UI. Note: it&#39;s not currently possible to filter by these tags when querying via the API
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors
         * page of the UI. Note: it&#39;s not currently possible to filter by these tags when querying via the API
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param timeoutH The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The
         * minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
         * 
         * @return builder
         * 
         */
        public Builder timeoutH(@Nullable Output<Integer> timeoutH) {
            $.timeoutH = timeoutH;
            return this;
        }

        /**
         * @param timeoutH The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The
         * minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
         * 
         * @return builder
         * 
         */
        public Builder timeoutH(Integer timeoutH) {
            return timeoutH(Output.of(timeoutH));
        }

        /**
         * @param type The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the
         * Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type
         * cannot be changed after a monitor is created.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the
         * Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type
         * cannot be changed after a monitor is created.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param validate If set to `false`, skip the validation call done during plan.
         * 
         * @return builder
         * 
         */
        public Builder validate(@Nullable Output<Boolean> validate) {
            $.validate = validate;
            return this;
        }

        /**
         * @param validate If set to `false`, skip the validation call done during plan.
         * 
         * @return builder
         * 
         */
        public Builder validate(Boolean validate) {
            return validate(Output.of(validate));
        }

        public Builder variables(@Nullable Output<MonitorVariablesArgs> variables) {
            $.variables = variables;
            return this;
        }

        public Builder variables(MonitorVariablesArgs variables) {
            return variables(Output.of(variables));
        }

        public MonitorArgs build() {
            $.message = Objects.requireNonNull($.message, "expected parameter 'message' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.query = Objects.requireNonNull($.query, "expected parameter 'query' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
