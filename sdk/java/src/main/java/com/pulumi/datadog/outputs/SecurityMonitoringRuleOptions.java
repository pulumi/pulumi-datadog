// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.SecurityMonitoringRuleOptionsImpossibleTravelOptions;
import com.pulumi.datadog.outputs.SecurityMonitoringRuleOptionsNewValueOptions;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecurityMonitoringRuleOptions {
    /**
     * @return If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `log_detection`.
     * 
     */
    private @Nullable Boolean decreaseCriticalityBasedOnEnv;
    /**
     * @return The detection method. Valid values are `threshold`, `new_value`, `anomaly_detection`, `impossible_travel`, `hardcoded`, `third_party`.
     * 
     */
    private @Nullable String detectionMethod;
    /**
     * @return A time window is specified to match when at least one of the cases matches true. This is a sliding window and evaluates in real time. Valid values are `0`, `60`, `300`, `600`, `900`, `1800`, `3600`, `7200`.
     * 
     */
    private @Nullable Integer evaluationWindow;
    /**
     * @return Options for rules using the impossible travel detection method.
     * 
     */
    private @Nullable SecurityMonitoringRuleOptionsImpossibleTravelOptions impossibleTravelOptions;
    /**
     * @return Once a signal is generated, the signal will remain “open” if a case is matched at least once within this keep alive window. Valid values are `0`, `60`, `300`, `600`, `900`, `1800`, `3600`, `7200`, `10800`, `21600`.
     * 
     */
    private Integer keepAlive;
    /**
     * @return A signal will “close” regardless of the query being matched once the time exceeds the maximum duration. This time is calculated from the first seen timestamp. Valid values are `0`, `60`, `300`, `600`, `900`, `1800`, `3600`, `7200`, `10800`, `21600`, `43200`, `86400`.
     * 
     */
    private Integer maxSignalDuration;
    /**
     * @return New value rules specific options.
     * 
     */
    private @Nullable SecurityMonitoringRuleOptionsNewValueOptions newValueOptions;

    private SecurityMonitoringRuleOptions() {}
    /**
     * @return If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `log_detection`.
     * 
     */
    public Optional<Boolean> decreaseCriticalityBasedOnEnv() {
        return Optional.ofNullable(this.decreaseCriticalityBasedOnEnv);
    }
    /**
     * @return The detection method. Valid values are `threshold`, `new_value`, `anomaly_detection`, `impossible_travel`, `hardcoded`, `third_party`.
     * 
     */
    public Optional<String> detectionMethod() {
        return Optional.ofNullable(this.detectionMethod);
    }
    /**
     * @return A time window is specified to match when at least one of the cases matches true. This is a sliding window and evaluates in real time. Valid values are `0`, `60`, `300`, `600`, `900`, `1800`, `3600`, `7200`.
     * 
     */
    public Optional<Integer> evaluationWindow() {
        return Optional.ofNullable(this.evaluationWindow);
    }
    /**
     * @return Options for rules using the impossible travel detection method.
     * 
     */
    public Optional<SecurityMonitoringRuleOptionsImpossibleTravelOptions> impossibleTravelOptions() {
        return Optional.ofNullable(this.impossibleTravelOptions);
    }
    /**
     * @return Once a signal is generated, the signal will remain “open” if a case is matched at least once within this keep alive window. Valid values are `0`, `60`, `300`, `600`, `900`, `1800`, `3600`, `7200`, `10800`, `21600`.
     * 
     */
    public Integer keepAlive() {
        return this.keepAlive;
    }
    /**
     * @return A signal will “close” regardless of the query being matched once the time exceeds the maximum duration. This time is calculated from the first seen timestamp. Valid values are `0`, `60`, `300`, `600`, `900`, `1800`, `3600`, `7200`, `10800`, `21600`, `43200`, `86400`.
     * 
     */
    public Integer maxSignalDuration() {
        return this.maxSignalDuration;
    }
    /**
     * @return New value rules specific options.
     * 
     */
    public Optional<SecurityMonitoringRuleOptionsNewValueOptions> newValueOptions() {
        return Optional.ofNullable(this.newValueOptions);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityMonitoringRuleOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean decreaseCriticalityBasedOnEnv;
        private @Nullable String detectionMethod;
        private @Nullable Integer evaluationWindow;
        private @Nullable SecurityMonitoringRuleOptionsImpossibleTravelOptions impossibleTravelOptions;
        private Integer keepAlive;
        private Integer maxSignalDuration;
        private @Nullable SecurityMonitoringRuleOptionsNewValueOptions newValueOptions;
        public Builder() {}
        public Builder(SecurityMonitoringRuleOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.decreaseCriticalityBasedOnEnv = defaults.decreaseCriticalityBasedOnEnv;
    	      this.detectionMethod = defaults.detectionMethod;
    	      this.evaluationWindow = defaults.evaluationWindow;
    	      this.impossibleTravelOptions = defaults.impossibleTravelOptions;
    	      this.keepAlive = defaults.keepAlive;
    	      this.maxSignalDuration = defaults.maxSignalDuration;
    	      this.newValueOptions = defaults.newValueOptions;
        }

        @CustomType.Setter
        public Builder decreaseCriticalityBasedOnEnv(@Nullable Boolean decreaseCriticalityBasedOnEnv) {
            this.decreaseCriticalityBasedOnEnv = decreaseCriticalityBasedOnEnv;
            return this;
        }
        @CustomType.Setter
        public Builder detectionMethod(@Nullable String detectionMethod) {
            this.detectionMethod = detectionMethod;
            return this;
        }
        @CustomType.Setter
        public Builder evaluationWindow(@Nullable Integer evaluationWindow) {
            this.evaluationWindow = evaluationWindow;
            return this;
        }
        @CustomType.Setter
        public Builder impossibleTravelOptions(@Nullable SecurityMonitoringRuleOptionsImpossibleTravelOptions impossibleTravelOptions) {
            this.impossibleTravelOptions = impossibleTravelOptions;
            return this;
        }
        @CustomType.Setter
        public Builder keepAlive(Integer keepAlive) {
            this.keepAlive = Objects.requireNonNull(keepAlive);
            return this;
        }
        @CustomType.Setter
        public Builder maxSignalDuration(Integer maxSignalDuration) {
            this.maxSignalDuration = Objects.requireNonNull(maxSignalDuration);
            return this;
        }
        @CustomType.Setter
        public Builder newValueOptions(@Nullable SecurityMonitoringRuleOptionsNewValueOptions newValueOptions) {
            this.newValueOptions = newValueOptions;
            return this;
        }
        public SecurityMonitoringRuleOptions build() {
            final var o = new SecurityMonitoringRuleOptions();
            o.decreaseCriticalityBasedOnEnv = decreaseCriticalityBasedOnEnv;
            o.detectionMethod = detectionMethod;
            o.evaluationWindow = evaluationWindow;
            o.impossibleTravelOptions = impossibleTravelOptions;
            o.keepAlive = keepAlive;
            o.maxSignalDuration = maxSignalDuration;
            o.newValueOptions = newValueOptions;
            return o;
        }
    }
}
