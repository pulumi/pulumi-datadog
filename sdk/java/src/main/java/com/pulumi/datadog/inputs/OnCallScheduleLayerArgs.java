// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.OnCallScheduleLayerIntervalArgs;
import com.pulumi.datadog.inputs.OnCallScheduleLayerRestrictionArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OnCallScheduleLayerArgs extends com.pulumi.resources.ResourceArgs {

    public static final OnCallScheduleLayerArgs Empty = new OnCallScheduleLayerArgs();

    /**
     * The date/time when this layer should become active (in ISO 8601).
     * 
     */
    @Import(name="effectiveDate", required=true)
    private Output<String> effectiveDate;

    /**
     * @return The date/time when this layer should become active (in ISO 8601).
     * 
     */
    public Output<String> effectiveDate() {
        return this.effectiveDate;
    }

    /**
     * The date/time after which this layer no longer applies (in ISO 8601).
     * 
     */
    @Import(name="endDate")
    private @Nullable Output<String> endDate;

    /**
     * @return The date/time after which this layer no longer applies (in ISO 8601).
     * 
     */
    public Optional<Output<String>> endDate() {
        return Optional.ofNullable(this.endDate);
    }

    /**
     * The ID of this layer.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of this layer.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    @Import(name="interval")
    private @Nullable Output<OnCallScheduleLayerIntervalArgs> interval;

    public Optional<Output<OnCallScheduleLayerIntervalArgs>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * The name of this layer. Should be unique within the schedule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of this layer. Should be unique within the schedule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * List of restrictions for the layer.
     * 
     */
    @Import(name="restrictions")
    private @Nullable Output<List<OnCallScheduleLayerRestrictionArgs>> restrictions;

    /**
     * @return List of restrictions for the layer.
     * 
     */
    public Optional<Output<List<OnCallScheduleLayerRestrictionArgs>>> restrictions() {
        return Optional.ofNullable(this.restrictions);
    }

    /**
     * The date/time when the rotation for this layer starts (in ISO 8601).
     * 
     */
    @Import(name="rotationStart")
    private @Nullable Output<String> rotationStart;

    /**
     * @return The date/time when the rotation for this layer starts (in ISO 8601).
     * 
     */
    public Optional<Output<String>> rotationStart() {
        return Optional.ofNullable(this.rotationStart);
    }

    /**
     * List of user IDs for the layer. Can either be a valid user id or null
     * 
     */
    @Import(name="users", required=true)
    private Output<List<String>> users;

    /**
     * @return List of user IDs for the layer. Can either be a valid user id or null
     * 
     */
    public Output<List<String>> users() {
        return this.users;
    }

    private OnCallScheduleLayerArgs() {}

    private OnCallScheduleLayerArgs(OnCallScheduleLayerArgs $) {
        this.effectiveDate = $.effectiveDate;
        this.endDate = $.endDate;
        this.id = $.id;
        this.interval = $.interval;
        this.name = $.name;
        this.restrictions = $.restrictions;
        this.rotationStart = $.rotationStart;
        this.users = $.users;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OnCallScheduleLayerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OnCallScheduleLayerArgs $;

        public Builder() {
            $ = new OnCallScheduleLayerArgs();
        }

        public Builder(OnCallScheduleLayerArgs defaults) {
            $ = new OnCallScheduleLayerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param effectiveDate The date/time when this layer should become active (in ISO 8601).
         * 
         * @return builder
         * 
         */
        public Builder effectiveDate(Output<String> effectiveDate) {
            $.effectiveDate = effectiveDate;
            return this;
        }

        /**
         * @param effectiveDate The date/time when this layer should become active (in ISO 8601).
         * 
         * @return builder
         * 
         */
        public Builder effectiveDate(String effectiveDate) {
            return effectiveDate(Output.of(effectiveDate));
        }

        /**
         * @param endDate The date/time after which this layer no longer applies (in ISO 8601).
         * 
         * @return builder
         * 
         */
        public Builder endDate(@Nullable Output<String> endDate) {
            $.endDate = endDate;
            return this;
        }

        /**
         * @param endDate The date/time after which this layer no longer applies (in ISO 8601).
         * 
         * @return builder
         * 
         */
        public Builder endDate(String endDate) {
            return endDate(Output.of(endDate));
        }

        /**
         * @param id The ID of this layer.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of this layer.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder interval(@Nullable Output<OnCallScheduleLayerIntervalArgs> interval) {
            $.interval = interval;
            return this;
        }

        public Builder interval(OnCallScheduleLayerIntervalArgs interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param name The name of this layer. Should be unique within the schedule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of this layer. Should be unique within the schedule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param restrictions List of restrictions for the layer.
         * 
         * @return builder
         * 
         */
        public Builder restrictions(@Nullable Output<List<OnCallScheduleLayerRestrictionArgs>> restrictions) {
            $.restrictions = restrictions;
            return this;
        }

        /**
         * @param restrictions List of restrictions for the layer.
         * 
         * @return builder
         * 
         */
        public Builder restrictions(List<OnCallScheduleLayerRestrictionArgs> restrictions) {
            return restrictions(Output.of(restrictions));
        }

        /**
         * @param restrictions List of restrictions for the layer.
         * 
         * @return builder
         * 
         */
        public Builder restrictions(OnCallScheduleLayerRestrictionArgs... restrictions) {
            return restrictions(List.of(restrictions));
        }

        /**
         * @param rotationStart The date/time when the rotation for this layer starts (in ISO 8601).
         * 
         * @return builder
         * 
         */
        public Builder rotationStart(@Nullable Output<String> rotationStart) {
            $.rotationStart = rotationStart;
            return this;
        }

        /**
         * @param rotationStart The date/time when the rotation for this layer starts (in ISO 8601).
         * 
         * @return builder
         * 
         */
        public Builder rotationStart(String rotationStart) {
            return rotationStart(Output.of(rotationStart));
        }

        /**
         * @param users List of user IDs for the layer. Can either be a valid user id or null
         * 
         * @return builder
         * 
         */
        public Builder users(Output<List<String>> users) {
            $.users = users;
            return this;
        }

        /**
         * @param users List of user IDs for the layer. Can either be a valid user id or null
         * 
         * @return builder
         * 
         */
        public Builder users(List<String> users) {
            return users(Output.of(users));
        }

        /**
         * @param users List of user IDs for the layer. Can either be a valid user id or null
         * 
         * @return builder
         * 
         */
        public Builder users(String... users) {
            return users(List.of(users));
        }

        public OnCallScheduleLayerArgs build() {
            if ($.effectiveDate == null) {
                throw new MissingRequiredPropertyException("OnCallScheduleLayerArgs", "effectiveDate");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("OnCallScheduleLayerArgs", "name");
            }
            if ($.users == null) {
                throw new MissingRequiredPropertyException("OnCallScheduleLayerArgs", "users");
            }
            return $;
        }
    }

}
