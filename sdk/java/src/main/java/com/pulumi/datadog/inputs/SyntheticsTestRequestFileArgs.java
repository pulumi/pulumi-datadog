// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticsTestRequestFileArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticsTestRequestFileArgs Empty = new SyntheticsTestRequestFileArgs();

    /**
     * Bucket key of the file.
     * 
     */
    @Import(name="bucketKey")
    private @Nullable Output<String> bucketKey;

    /**
     * @return Bucket key of the file.
     * 
     */
    public Optional<Output<String>> bucketKey() {
        return Optional.ofNullable(this.bucketKey);
    }

    /**
     * Content of the file.
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return Content of the file.
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * Name of the file.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the file.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Original name of the file.
     * 
     */
    @Import(name="originalFileName")
    private @Nullable Output<String> originalFileName;

    /**
     * @return Original name of the file.
     * 
     */
    public Optional<Output<String>> originalFileName() {
        return Optional.ofNullable(this.originalFileName);
    }

    /**
     * Size of the file.
     * 
     */
    @Import(name="size", required=true)
    private Output<Integer> size;

    /**
     * @return Size of the file.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }

    /**
     * Type of the file.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the file.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private SyntheticsTestRequestFileArgs() {}

    private SyntheticsTestRequestFileArgs(SyntheticsTestRequestFileArgs $) {
        this.bucketKey = $.bucketKey;
        this.content = $.content;
        this.name = $.name;
        this.originalFileName = $.originalFileName;
        this.size = $.size;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticsTestRequestFileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticsTestRequestFileArgs $;

        public Builder() {
            $ = new SyntheticsTestRequestFileArgs();
        }

        public Builder(SyntheticsTestRequestFileArgs defaults) {
            $ = new SyntheticsTestRequestFileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucketKey Bucket key of the file.
         * 
         * @return builder
         * 
         */
        public Builder bucketKey(@Nullable Output<String> bucketKey) {
            $.bucketKey = bucketKey;
            return this;
        }

        /**
         * @param bucketKey Bucket key of the file.
         * 
         * @return builder
         * 
         */
        public Builder bucketKey(String bucketKey) {
            return bucketKey(Output.of(bucketKey));
        }

        /**
         * @param content Content of the file.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content Content of the file.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param name Name of the file.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the file.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param originalFileName Original name of the file.
         * 
         * @return builder
         * 
         */
        public Builder originalFileName(@Nullable Output<String> originalFileName) {
            $.originalFileName = originalFileName;
            return this;
        }

        /**
         * @param originalFileName Original name of the file.
         * 
         * @return builder
         * 
         */
        public Builder originalFileName(String originalFileName) {
            return originalFileName(Output.of(originalFileName));
        }

        /**
         * @param size Size of the file.
         * 
         * @return builder
         * 
         */
        public Builder size(Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Size of the file.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param type Type of the file.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the file.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public SyntheticsTestRequestFileArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("SyntheticsTestRequestFileArgs", "name");
            }
            if ($.size == null) {
                throw new MissingRequiredPropertyException("SyntheticsTestRequestFileArgs", "size");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("SyntheticsTestRequestFileArgs", "type");
            }
            return $;
        }
    }

}
