// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigDestinationsGooglePubsubAuth;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigDestinationsGooglePubsubTls;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ObservabilityPipelineConfigDestinationsGooglePubsub {
    /**
     * @return GCP credentials used to authenticate with Google Cloud Pub/Sub.
     * 
     */
    private @Nullable ObservabilityPipelineConfigDestinationsGooglePubsubAuth auth;
    /**
     * @return Encoding format for log events. Valid values: `json`, `raw_message`.
     * 
     */
    private @Nullable String encoding;
    /**
     * @return The unique identifier for this component.
     * 
     */
    private String id;
    /**
     * @return A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    private List<String> inputs;
    /**
     * @return The GCP project ID that owns the Pub/Sub topic.
     * 
     */
    private String project;
    /**
     * @return Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    private @Nullable ObservabilityPipelineConfigDestinationsGooglePubsubTls tls;
    /**
     * @return The Pub/Sub topic name to publish logs to.
     * 
     */
    private String topic;

    private ObservabilityPipelineConfigDestinationsGooglePubsub() {}
    /**
     * @return GCP credentials used to authenticate with Google Cloud Pub/Sub.
     * 
     */
    public Optional<ObservabilityPipelineConfigDestinationsGooglePubsubAuth> auth() {
        return Optional.ofNullable(this.auth);
    }
    /**
     * @return Encoding format for log events. Valid values: `json`, `raw_message`.
     * 
     */
    public Optional<String> encoding() {
        return Optional.ofNullable(this.encoding);
    }
    /**
     * @return The unique identifier for this component.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    public List<String> inputs() {
        return this.inputs;
    }
    /**
     * @return The GCP project ID that owns the Pub/Sub topic.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    public Optional<ObservabilityPipelineConfigDestinationsGooglePubsubTls> tls() {
        return Optional.ofNullable(this.tls);
    }
    /**
     * @return The Pub/Sub topic name to publish logs to.
     * 
     */
    public String topic() {
        return this.topic;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObservabilityPipelineConfigDestinationsGooglePubsub defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ObservabilityPipelineConfigDestinationsGooglePubsubAuth auth;
        private @Nullable String encoding;
        private String id;
        private List<String> inputs;
        private String project;
        private @Nullable ObservabilityPipelineConfigDestinationsGooglePubsubTls tls;
        private String topic;
        public Builder() {}
        public Builder(ObservabilityPipelineConfigDestinationsGooglePubsub defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auth = defaults.auth;
    	      this.encoding = defaults.encoding;
    	      this.id = defaults.id;
    	      this.inputs = defaults.inputs;
    	      this.project = defaults.project;
    	      this.tls = defaults.tls;
    	      this.topic = defaults.topic;
        }

        @CustomType.Setter
        public Builder auth(@Nullable ObservabilityPipelineConfigDestinationsGooglePubsubAuth auth) {

            this.auth = auth;
            return this;
        }
        @CustomType.Setter
        public Builder encoding(@Nullable String encoding) {

            this.encoding = encoding;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsGooglePubsub", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inputs(List<String> inputs) {
            if (inputs == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsGooglePubsub", "inputs");
            }
            this.inputs = inputs;
            return this;
        }
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsGooglePubsub", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder tls(@Nullable ObservabilityPipelineConfigDestinationsGooglePubsubTls tls) {

            this.tls = tls;
            return this;
        }
        @CustomType.Setter
        public Builder topic(String topic) {
            if (topic == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsGooglePubsub", "topic");
            }
            this.topic = topic;
            return this;
        }
        public ObservabilityPipelineConfigDestinationsGooglePubsub build() {
            final var _resultValue = new ObservabilityPipelineConfigDestinationsGooglePubsub();
            _resultValue.auth = auth;
            _resultValue.encoding = encoding;
            _resultValue.id = id;
            _resultValue.inputs = inputs;
            _resultValue.project = project;
            _resultValue.tls = tls;
            _resultValue.topic = topic;
            return _resultValue;
        }
    }
}
