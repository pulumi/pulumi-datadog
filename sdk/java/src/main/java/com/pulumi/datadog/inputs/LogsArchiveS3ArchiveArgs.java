// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogsArchiveS3ArchiveArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogsArchiveS3ArchiveArgs Empty = new LogsArchiveS3ArchiveArgs();

    /**
     * Your AWS account id.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Your AWS account id.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Name of your s3 bucket.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return Name of your s3 bucket.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * Path where the archive is stored.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Path where the archive is stored.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Your AWS role name
     * 
     */
    @Import(name="roleName", required=true)
    private Output<String> roleName;

    /**
     * @return Your AWS role name
     * 
     */
    public Output<String> roleName() {
        return this.roleName;
    }

    private LogsArchiveS3ArchiveArgs() {}

    private LogsArchiveS3ArchiveArgs(LogsArchiveS3ArchiveArgs $) {
        this.accountId = $.accountId;
        this.bucket = $.bucket;
        this.path = $.path;
        this.roleName = $.roleName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogsArchiveS3ArchiveArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogsArchiveS3ArchiveArgs $;

        public Builder() {
            $ = new LogsArchiveS3ArchiveArgs();
        }

        public Builder(LogsArchiveS3ArchiveArgs defaults) {
            $ = new LogsArchiveS3ArchiveArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Your AWS account id.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Your AWS account id.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param bucket Name of your s3 bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Name of your s3 bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param path Path where the archive is stored.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Path where the archive is stored.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param roleName Your AWS role name
         * 
         * @return builder
         * 
         */
        public Builder roleName(Output<String> roleName) {
            $.roleName = roleName;
            return this;
        }

        /**
         * @param roleName Your AWS role name
         * 
         * @return builder
         * 
         */
        public Builder roleName(String roleName) {
            return roleName(Output.of(roleName));
        }

        public LogsArchiveS3ArchiveArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("LogsArchiveS3ArchiveArgs", "accountId");
            }
            if ($.bucket == null) {
                throw new MissingRequiredPropertyException("LogsArchiveS3ArchiveArgs", "bucket");
            }
            if ($.roleName == null) {
                throw new MissingRequiredPropertyException("LogsArchiveS3ArchiveArgs", "roleName");
            }
            return $;
        }
    }

}
