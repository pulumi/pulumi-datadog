// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.SyntheticsTestMobileStepParamsArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticsTestMobileStepArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticsTestMobileStepArgs Empty = new SyntheticsTestMobileStepArgs();

    /**
     * A boolean set to allow this step to fail.
     * 
     */
    @Import(name="allowFailure")
    private @Nullable Output<Boolean> allowFailure;

    /**
     * @return A boolean set to allow this step to fail.
     * 
     */
    public Optional<Output<Boolean>> allowFailure() {
        return Optional.ofNullable(this.allowFailure);
    }

    /**
     * A boolean set to determine if the step has a new step element.
     * 
     */
    @Import(name="hasNewStepElement")
    private @Nullable Output<Boolean> hasNewStepElement;

    /**
     * @return A boolean set to determine if the step has a new step element.
     * 
     */
    public Optional<Output<Boolean>> hasNewStepElement() {
        return Optional.ofNullable(this.hasNewStepElement);
    }

    /**
     * A boolean to use in addition to `allowFailure` to determine if the test should be marked as failed when the step fails.
     * 
     */
    @Import(name="isCritical")
    private @Nullable Output<Boolean> isCritical;

    /**
     * @return A boolean to use in addition to `allowFailure` to determine if the test should be marked as failed when the step fails.
     * 
     */
    public Optional<Output<Boolean>> isCritical() {
        return Optional.ofNullable(this.isCritical);
    }

    /**
     * The name of the step.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the step.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * A boolean set to not take a screenshot for the step.
     * 
     */
    @Import(name="noScreenshot")
    private @Nullable Output<Boolean> noScreenshot;

    /**
     * @return A boolean set to not take a screenshot for the step.
     * 
     */
    public Optional<Output<Boolean>> noScreenshot() {
        return Optional.ofNullable(this.noScreenshot);
    }

    /**
     * Parameters for the step.
     * 
     */
    @Import(name="params", required=true)
    private Output<SyntheticsTestMobileStepParamsArgs> params;

    /**
     * @return Parameters for the step.
     * 
     */
    public Output<SyntheticsTestMobileStepParamsArgs> params() {
        return this.params;
    }

    /**
     * The public ID of the step.
     * 
     */
    @Import(name="publicId")
    private @Nullable Output<String> publicId;

    /**
     * @return The public ID of the step.
     * 
     */
    public Optional<Output<String>> publicId() {
        return Optional.ofNullable(this.publicId);
    }

    /**
     * The time before declaring a step failed.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return The time before declaring a step failed.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * The type of the step. Valid values are `assertElementContent`, `assertScreenContains`, `assertScreenLacks`, `doubleTap`, `extractVariable`, `flick`, `openDeeplink`, `playSubTest`, `pressBack`, `restartApplication`, `rotate`, `scroll`, `scrollToElement`, `tap`, `toggleWiFi`, `typeText`, `wait`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the step. Valid values are `assertElementContent`, `assertScreenContains`, `assertScreenLacks`, `doubleTap`, `extractVariable`, `flick`, `openDeeplink`, `playSubTest`, `pressBack`, `restartApplication`, `rotate`, `scroll`, `scrollToElement`, `tap`, `toggleWiFi`, `typeText`, `wait`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private SyntheticsTestMobileStepArgs() {}

    private SyntheticsTestMobileStepArgs(SyntheticsTestMobileStepArgs $) {
        this.allowFailure = $.allowFailure;
        this.hasNewStepElement = $.hasNewStepElement;
        this.isCritical = $.isCritical;
        this.name = $.name;
        this.noScreenshot = $.noScreenshot;
        this.params = $.params;
        this.publicId = $.publicId;
        this.timeout = $.timeout;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticsTestMobileStepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticsTestMobileStepArgs $;

        public Builder() {
            $ = new SyntheticsTestMobileStepArgs();
        }

        public Builder(SyntheticsTestMobileStepArgs defaults) {
            $ = new SyntheticsTestMobileStepArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowFailure A boolean set to allow this step to fail.
         * 
         * @return builder
         * 
         */
        public Builder allowFailure(@Nullable Output<Boolean> allowFailure) {
            $.allowFailure = allowFailure;
            return this;
        }

        /**
         * @param allowFailure A boolean set to allow this step to fail.
         * 
         * @return builder
         * 
         */
        public Builder allowFailure(Boolean allowFailure) {
            return allowFailure(Output.of(allowFailure));
        }

        /**
         * @param hasNewStepElement A boolean set to determine if the step has a new step element.
         * 
         * @return builder
         * 
         */
        public Builder hasNewStepElement(@Nullable Output<Boolean> hasNewStepElement) {
            $.hasNewStepElement = hasNewStepElement;
            return this;
        }

        /**
         * @param hasNewStepElement A boolean set to determine if the step has a new step element.
         * 
         * @return builder
         * 
         */
        public Builder hasNewStepElement(Boolean hasNewStepElement) {
            return hasNewStepElement(Output.of(hasNewStepElement));
        }

        /**
         * @param isCritical A boolean to use in addition to `allowFailure` to determine if the test should be marked as failed when the step fails.
         * 
         * @return builder
         * 
         */
        public Builder isCritical(@Nullable Output<Boolean> isCritical) {
            $.isCritical = isCritical;
            return this;
        }

        /**
         * @param isCritical A boolean to use in addition to `allowFailure` to determine if the test should be marked as failed when the step fails.
         * 
         * @return builder
         * 
         */
        public Builder isCritical(Boolean isCritical) {
            return isCritical(Output.of(isCritical));
        }

        /**
         * @param name The name of the step.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the step.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param noScreenshot A boolean set to not take a screenshot for the step.
         * 
         * @return builder
         * 
         */
        public Builder noScreenshot(@Nullable Output<Boolean> noScreenshot) {
            $.noScreenshot = noScreenshot;
            return this;
        }

        /**
         * @param noScreenshot A boolean set to not take a screenshot for the step.
         * 
         * @return builder
         * 
         */
        public Builder noScreenshot(Boolean noScreenshot) {
            return noScreenshot(Output.of(noScreenshot));
        }

        /**
         * @param params Parameters for the step.
         * 
         * @return builder
         * 
         */
        public Builder params(Output<SyntheticsTestMobileStepParamsArgs> params) {
            $.params = params;
            return this;
        }

        /**
         * @param params Parameters for the step.
         * 
         * @return builder
         * 
         */
        public Builder params(SyntheticsTestMobileStepParamsArgs params) {
            return params(Output.of(params));
        }

        /**
         * @param publicId The public ID of the step.
         * 
         * @return builder
         * 
         */
        public Builder publicId(@Nullable Output<String> publicId) {
            $.publicId = publicId;
            return this;
        }

        /**
         * @param publicId The public ID of the step.
         * 
         * @return builder
         * 
         */
        public Builder publicId(String publicId) {
            return publicId(Output.of(publicId));
        }

        /**
         * @param timeout The time before declaring a step failed.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The time before declaring a step failed.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param type The type of the step. Valid values are `assertElementContent`, `assertScreenContains`, `assertScreenLacks`, `doubleTap`, `extractVariable`, `flick`, `openDeeplink`, `playSubTest`, `pressBack`, `restartApplication`, `rotate`, `scroll`, `scrollToElement`, `tap`, `toggleWiFi`, `typeText`, `wait`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the step. Valid values are `assertElementContent`, `assertScreenContains`, `assertScreenLacks`, `doubleTap`, `extractVariable`, `flick`, `openDeeplink`, `playSubTest`, `pressBack`, `restartApplication`, `rotate`, `scroll`, `scrollToElement`, `tap`, `toggleWiFi`, `typeText`, `wait`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public SyntheticsTestMobileStepArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("SyntheticsTestMobileStepArgs", "name");
            }
            if ($.params == null) {
                throw new MissingRequiredPropertyException("SyntheticsTestMobileStepArgs", "params");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("SyntheticsTestMobileStepArgs", "type");
            }
            return $;
        }
    }

}
