// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleKeywordOptionsArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleOnMatchArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigProcessorsSensitiveDataScannerRulePatternArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleScopeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleArgs Empty = new ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleArgs();

    /**
     * Keyword-based proximity matching for sensitive data.
     * 
     */
    @Import(name="keywordOptions")
    private @Nullable Output<ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleKeywordOptionsArgs> keywordOptions;

    /**
     * @return Keyword-based proximity matching for sensitive data.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleKeywordOptionsArgs>> keywordOptions() {
        return Optional.ofNullable(this.keywordOptions);
    }

    /**
     * A name identifying the rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A name identifying the rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The action to take when a sensitive value is found.
     * 
     */
    @Import(name="onMatch")
    private @Nullable Output<ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleOnMatchArgs> onMatch;

    /**
     * @return The action to take when a sensitive value is found.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleOnMatchArgs>> onMatch() {
        return Optional.ofNullable(this.onMatch);
    }

    /**
     * Pattern detection configuration for identifying sensitive data using either a custom regex or a library reference.
     * 
     */
    @Import(name="pattern")
    private @Nullable Output<ObservabilityPipelineConfigProcessorsSensitiveDataScannerRulePatternArgs> pattern;

    /**
     * @return Pattern detection configuration for identifying sensitive data using either a custom regex or a library reference.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigProcessorsSensitiveDataScannerRulePatternArgs>> pattern() {
        return Optional.ofNullable(this.pattern);
    }

    /**
     * Field-level targeting options that determine where the scanner should operate.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleScopeArgs> scope;

    /**
     * @return Field-level targeting options that determine where the scanner should operate.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleScopeArgs>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Tags assigned to this rule for filtering and classification.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags assigned to this rule for filtering and classification.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleArgs() {}

    private ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleArgs(ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleArgs $) {
        this.keywordOptions = $.keywordOptions;
        this.name = $.name;
        this.onMatch = $.onMatch;
        this.pattern = $.pattern;
        this.scope = $.scope;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleArgs();
        }

        public Builder(ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleArgs defaults) {
            $ = new ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keywordOptions Keyword-based proximity matching for sensitive data.
         * 
         * @return builder
         * 
         */
        public Builder keywordOptions(@Nullable Output<ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleKeywordOptionsArgs> keywordOptions) {
            $.keywordOptions = keywordOptions;
            return this;
        }

        /**
         * @param keywordOptions Keyword-based proximity matching for sensitive data.
         * 
         * @return builder
         * 
         */
        public Builder keywordOptions(ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleKeywordOptionsArgs keywordOptions) {
            return keywordOptions(Output.of(keywordOptions));
        }

        /**
         * @param name A name identifying the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A name identifying the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param onMatch The action to take when a sensitive value is found.
         * 
         * @return builder
         * 
         */
        public Builder onMatch(@Nullable Output<ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleOnMatchArgs> onMatch) {
            $.onMatch = onMatch;
            return this;
        }

        /**
         * @param onMatch The action to take when a sensitive value is found.
         * 
         * @return builder
         * 
         */
        public Builder onMatch(ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleOnMatchArgs onMatch) {
            return onMatch(Output.of(onMatch));
        }

        /**
         * @param pattern Pattern detection configuration for identifying sensitive data using either a custom regex or a library reference.
         * 
         * @return builder
         * 
         */
        public Builder pattern(@Nullable Output<ObservabilityPipelineConfigProcessorsSensitiveDataScannerRulePatternArgs> pattern) {
            $.pattern = pattern;
            return this;
        }

        /**
         * @param pattern Pattern detection configuration for identifying sensitive data using either a custom regex or a library reference.
         * 
         * @return builder
         * 
         */
        public Builder pattern(ObservabilityPipelineConfigProcessorsSensitiveDataScannerRulePatternArgs pattern) {
            return pattern(Output.of(pattern));
        }

        /**
         * @param scope Field-level targeting options that determine where the scanner should operate.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleScopeArgs> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Field-level targeting options that determine where the scanner should operate.
         * 
         * @return builder
         * 
         */
        public Builder scope(ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleScopeArgs scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param tags Tags assigned to this rule for filtering and classification.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags assigned to this rule for filtering and classification.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags assigned to this rule for filtering and classification.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public ObservabilityPipelineConfigProcessorsSensitiveDataScannerRuleArgs build() {
            return $;
        }
    }

}
