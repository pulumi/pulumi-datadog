// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SyntheticsTestRequestDefinition {
    /**
     * @return The request body.
     * 
     */
    private @Nullable String body;
    /**
     * @return Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`, `application/octet-stream`, `multipart/form-data`.
     * 
     */
    private @Nullable String bodyType;
    /**
     * @return The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
     * 
     */
    private @Nullable String callType;
    /**
     * @return By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.
     * 
     */
    private @Nullable List<String> certificateDomains;
    /**
     * @return DNS server to use for DNS tests (`subtype = &#34;dns&#34;`).
     * 
     */
    private @Nullable String dnsServer;
    /**
     * @return DNS server port to use for DNS tests.
     * 
     */
    private @Nullable Integer dnsServerPort;
    /**
     * @return Host name to perform the test with.
     * 
     */
    private @Nullable String host;
    /**
     * @return HTTP version to use for an HTTP request in an API test or step. **Deprecated.** Use `http_version` in the `options_list` field instead.
     * 
     * @deprecated
     * Use `http_version` in the `options_list` field instead.
     * 
     */
    @Deprecated /* Use `http_version` in the `options_list` field instead. */
    private @Nullable String httpVersion;
    /**
     * @return For UDP and websocket tests, message to send with the request.
     * 
     */
    private @Nullable String message;
    /**
     * @return Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
     * 
     */
    private @Nullable String method;
    /**
     * @return Determines whether or not to save the response body.
     * 
     */
    private @Nullable Boolean noSavingResponseBody;
    /**
     * @return Number of pings to use per test for ICMP tests (`subtype = &#34;icmp&#34;`) between 0 and 10.
     * 
     */
    private @Nullable Integer numberOfPackets;
    /**
     * @return Persist cookies across redirects.
     * 
     */
    private @Nullable Boolean persistCookies;
    /**
     * @return The content of a proto file as a string.
     * 
     */
    private @Nullable String plainProtoFile;
    /**
     * @return Port to use when performing the test.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return A protobuf JSON descriptor. **Deprecated.** Use `plain_proto_file` instead.
     * 
     * @deprecated
     * Use `plain_proto_file` instead.
     * 
     */
    @Deprecated /* Use `plain_proto_file` instead. */
    private @Nullable String protoJsonDescriptor;
    /**
     * @return For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
     * 
     */
    private @Nullable String servername;
    /**
     * @return The gRPC service on which you want to perform the gRPC call.
     * 
     */
    private @Nullable String service;
    /**
     * @return This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = &#34;icmp&#34;`).
     * 
     */
    private @Nullable Boolean shouldTrackHops;
    /**
     * @return Timeout in seconds for the test.
     * 
     */
    private @Nullable Integer timeout;
    /**
     * @return The URL to send the request to.
     * 
     */
    private @Nullable String url;

    private SyntheticsTestRequestDefinition() {}
    /**
     * @return The request body.
     * 
     */
    public Optional<String> body() {
        return Optional.ofNullable(this.body);
    }
    /**
     * @return Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`, `application/octet-stream`, `multipart/form-data`.
     * 
     */
    public Optional<String> bodyType() {
        return Optional.ofNullable(this.bodyType);
    }
    /**
     * @return The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
     * 
     */
    public Optional<String> callType() {
        return Optional.ofNullable(this.callType);
    }
    /**
     * @return By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.
     * 
     */
    public List<String> certificateDomains() {
        return this.certificateDomains == null ? List.of() : this.certificateDomains;
    }
    /**
     * @return DNS server to use for DNS tests (`subtype = &#34;dns&#34;`).
     * 
     */
    public Optional<String> dnsServer() {
        return Optional.ofNullable(this.dnsServer);
    }
    /**
     * @return DNS server port to use for DNS tests.
     * 
     */
    public Optional<Integer> dnsServerPort() {
        return Optional.ofNullable(this.dnsServerPort);
    }
    /**
     * @return Host name to perform the test with.
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return HTTP version to use for an HTTP request in an API test or step. **Deprecated.** Use `http_version` in the `options_list` field instead.
     * 
     * @deprecated
     * Use `http_version` in the `options_list` field instead.
     * 
     */
    @Deprecated /* Use `http_version` in the `options_list` field instead. */
    public Optional<String> httpVersion() {
        return Optional.ofNullable(this.httpVersion);
    }
    /**
     * @return For UDP and websocket tests, message to send with the request.
     * 
     */
    public Optional<String> message() {
        return Optional.ofNullable(this.message);
    }
    /**
     * @return Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
     * 
     */
    public Optional<String> method() {
        return Optional.ofNullable(this.method);
    }
    /**
     * @return Determines whether or not to save the response body.
     * 
     */
    public Optional<Boolean> noSavingResponseBody() {
        return Optional.ofNullable(this.noSavingResponseBody);
    }
    /**
     * @return Number of pings to use per test for ICMP tests (`subtype = &#34;icmp&#34;`) between 0 and 10.
     * 
     */
    public Optional<Integer> numberOfPackets() {
        return Optional.ofNullable(this.numberOfPackets);
    }
    /**
     * @return Persist cookies across redirects.
     * 
     */
    public Optional<Boolean> persistCookies() {
        return Optional.ofNullable(this.persistCookies);
    }
    /**
     * @return The content of a proto file as a string.
     * 
     */
    public Optional<String> plainProtoFile() {
        return Optional.ofNullable(this.plainProtoFile);
    }
    /**
     * @return Port to use when performing the test.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return A protobuf JSON descriptor. **Deprecated.** Use `plain_proto_file` instead.
     * 
     * @deprecated
     * Use `plain_proto_file` instead.
     * 
     */
    @Deprecated /* Use `plain_proto_file` instead. */
    public Optional<String> protoJsonDescriptor() {
        return Optional.ofNullable(this.protoJsonDescriptor);
    }
    /**
     * @return For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
     * 
     */
    public Optional<String> servername() {
        return Optional.ofNullable(this.servername);
    }
    /**
     * @return The gRPC service on which you want to perform the gRPC call.
     * 
     */
    public Optional<String> service() {
        return Optional.ofNullable(this.service);
    }
    /**
     * @return This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = &#34;icmp&#34;`).
     * 
     */
    public Optional<Boolean> shouldTrackHops() {
        return Optional.ofNullable(this.shouldTrackHops);
    }
    /**
     * @return Timeout in seconds for the test.
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }
    /**
     * @return The URL to send the request to.
     * 
     */
    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyntheticsTestRequestDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String body;
        private @Nullable String bodyType;
        private @Nullable String callType;
        private @Nullable List<String> certificateDomains;
        private @Nullable String dnsServer;
        private @Nullable Integer dnsServerPort;
        private @Nullable String host;
        private @Nullable String httpVersion;
        private @Nullable String message;
        private @Nullable String method;
        private @Nullable Boolean noSavingResponseBody;
        private @Nullable Integer numberOfPackets;
        private @Nullable Boolean persistCookies;
        private @Nullable String plainProtoFile;
        private @Nullable Integer port;
        private @Nullable String protoJsonDescriptor;
        private @Nullable String servername;
        private @Nullable String service;
        private @Nullable Boolean shouldTrackHops;
        private @Nullable Integer timeout;
        private @Nullable String url;
        public Builder() {}
        public Builder(SyntheticsTestRequestDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.body = defaults.body;
    	      this.bodyType = defaults.bodyType;
    	      this.callType = defaults.callType;
    	      this.certificateDomains = defaults.certificateDomains;
    	      this.dnsServer = defaults.dnsServer;
    	      this.dnsServerPort = defaults.dnsServerPort;
    	      this.host = defaults.host;
    	      this.httpVersion = defaults.httpVersion;
    	      this.message = defaults.message;
    	      this.method = defaults.method;
    	      this.noSavingResponseBody = defaults.noSavingResponseBody;
    	      this.numberOfPackets = defaults.numberOfPackets;
    	      this.persistCookies = defaults.persistCookies;
    	      this.plainProtoFile = defaults.plainProtoFile;
    	      this.port = defaults.port;
    	      this.protoJsonDescriptor = defaults.protoJsonDescriptor;
    	      this.servername = defaults.servername;
    	      this.service = defaults.service;
    	      this.shouldTrackHops = defaults.shouldTrackHops;
    	      this.timeout = defaults.timeout;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder body(@Nullable String body) {

            this.body = body;
            return this;
        }
        @CustomType.Setter
        public Builder bodyType(@Nullable String bodyType) {

            this.bodyType = bodyType;
            return this;
        }
        @CustomType.Setter
        public Builder callType(@Nullable String callType) {

            this.callType = callType;
            return this;
        }
        @CustomType.Setter
        public Builder certificateDomains(@Nullable List<String> certificateDomains) {

            this.certificateDomains = certificateDomains;
            return this;
        }
        public Builder certificateDomains(String... certificateDomains) {
            return certificateDomains(List.of(certificateDomains));
        }
        @CustomType.Setter
        public Builder dnsServer(@Nullable String dnsServer) {

            this.dnsServer = dnsServer;
            return this;
        }
        @CustomType.Setter
        public Builder dnsServerPort(@Nullable Integer dnsServerPort) {

            this.dnsServerPort = dnsServerPort;
            return this;
        }
        @CustomType.Setter
        public Builder host(@Nullable String host) {

            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder httpVersion(@Nullable String httpVersion) {

            this.httpVersion = httpVersion;
            return this;
        }
        @CustomType.Setter
        public Builder message(@Nullable String message) {

            this.message = message;
            return this;
        }
        @CustomType.Setter
        public Builder method(@Nullable String method) {

            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder noSavingResponseBody(@Nullable Boolean noSavingResponseBody) {

            this.noSavingResponseBody = noSavingResponseBody;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfPackets(@Nullable Integer numberOfPackets) {

            this.numberOfPackets = numberOfPackets;
            return this;
        }
        @CustomType.Setter
        public Builder persistCookies(@Nullable Boolean persistCookies) {

            this.persistCookies = persistCookies;
            return this;
        }
        @CustomType.Setter
        public Builder plainProtoFile(@Nullable String plainProtoFile) {

            this.plainProtoFile = plainProtoFile;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protoJsonDescriptor(@Nullable String protoJsonDescriptor) {

            this.protoJsonDescriptor = protoJsonDescriptor;
            return this;
        }
        @CustomType.Setter
        public Builder servername(@Nullable String servername) {

            this.servername = servername;
            return this;
        }
        @CustomType.Setter
        public Builder service(@Nullable String service) {

            this.service = service;
            return this;
        }
        @CustomType.Setter
        public Builder shouldTrackHops(@Nullable Boolean shouldTrackHops) {

            this.shouldTrackHops = shouldTrackHops;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {

            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder url(@Nullable String url) {

            this.url = url;
            return this;
        }
        public SyntheticsTestRequestDefinition build() {
            final var _resultValue = new SyntheticsTestRequestDefinition();
            _resultValue.body = body;
            _resultValue.bodyType = bodyType;
            _resultValue.callType = callType;
            _resultValue.certificateDomains = certificateDomains;
            _resultValue.dnsServer = dnsServer;
            _resultValue.dnsServerPort = dnsServerPort;
            _resultValue.host = host;
            _resultValue.httpVersion = httpVersion;
            _resultValue.message = message;
            _resultValue.method = method;
            _resultValue.noSavingResponseBody = noSavingResponseBody;
            _resultValue.numberOfPackets = numberOfPackets;
            _resultValue.persistCookies = persistCookies;
            _resultValue.plainProtoFile = plainProtoFile;
            _resultValue.port = port;
            _resultValue.protoJsonDescriptor = protoJsonDescriptor;
            _resultValue.servername = servername;
            _resultValue.service = service;
            _resultValue.shouldTrackHops = shouldTrackHops;
            _resultValue.timeout = timeout;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
