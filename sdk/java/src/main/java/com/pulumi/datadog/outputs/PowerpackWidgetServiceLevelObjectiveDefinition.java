// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PowerpackWidgetServiceLevelObjectiveDefinition {
    /**
     * @return Additional filters applied to the SLO query.
     * 
     */
    private @Nullable String additionalQueryFilters;
    /**
     * @return The global time target of the widget.
     * 
     */
    private @Nullable String globalTimeTarget;
    /**
     * @return Whether to show the error budget or not.
     * 
     */
    private @Nullable Boolean showErrorBudget;
    /**
     * @return ID of an SLO to query.
     * 
     */
    private String sloId;
    /**
     * @return A list of time windows to display in the widget. Valid values are `7d`, `30d`, `90d`, `week_to_date`, `previous_week`, `month_to_date`, `previous_month`, `global_time`.
     * 
     */
    private List<String> timeWindows;
    /**
     * @return The title of the widget.
     * 
     */
    private @Nullable String title;
    /**
     * @return The alignment of the widget&#39;s title. Valid values are `center`, `left`, `right`.
     * 
     */
    private @Nullable String titleAlign;
    /**
     * @return The size of the widget&#39;s title (defaults to 16).
     * 
     */
    private @Nullable String titleSize;
    /**
     * @return The view mode for the widget. Valid values are `overall`, `component`, `both`.
     * 
     */
    private String viewMode;
    /**
     * @return The type of view to use when displaying the widget. Only `detail` is supported.
     * 
     */
    private String viewType;

    private PowerpackWidgetServiceLevelObjectiveDefinition() {}
    /**
     * @return Additional filters applied to the SLO query.
     * 
     */
    public Optional<String> additionalQueryFilters() {
        return Optional.ofNullable(this.additionalQueryFilters);
    }
    /**
     * @return The global time target of the widget.
     * 
     */
    public Optional<String> globalTimeTarget() {
        return Optional.ofNullable(this.globalTimeTarget);
    }
    /**
     * @return Whether to show the error budget or not.
     * 
     */
    public Optional<Boolean> showErrorBudget() {
        return Optional.ofNullable(this.showErrorBudget);
    }
    /**
     * @return ID of an SLO to query.
     * 
     */
    public String sloId() {
        return this.sloId;
    }
    /**
     * @return A list of time windows to display in the widget. Valid values are `7d`, `30d`, `90d`, `week_to_date`, `previous_week`, `month_to_date`, `previous_month`, `global_time`.
     * 
     */
    public List<String> timeWindows() {
        return this.timeWindows;
    }
    /**
     * @return The title of the widget.
     * 
     */
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }
    /**
     * @return The alignment of the widget&#39;s title. Valid values are `center`, `left`, `right`.
     * 
     */
    public Optional<String> titleAlign() {
        return Optional.ofNullable(this.titleAlign);
    }
    /**
     * @return The size of the widget&#39;s title (defaults to 16).
     * 
     */
    public Optional<String> titleSize() {
        return Optional.ofNullable(this.titleSize);
    }
    /**
     * @return The view mode for the widget. Valid values are `overall`, `component`, `both`.
     * 
     */
    public String viewMode() {
        return this.viewMode;
    }
    /**
     * @return The type of view to use when displaying the widget. Only `detail` is supported.
     * 
     */
    public String viewType() {
        return this.viewType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PowerpackWidgetServiceLevelObjectiveDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String additionalQueryFilters;
        private @Nullable String globalTimeTarget;
        private @Nullable Boolean showErrorBudget;
        private String sloId;
        private List<String> timeWindows;
        private @Nullable String title;
        private @Nullable String titleAlign;
        private @Nullable String titleSize;
        private String viewMode;
        private String viewType;
        public Builder() {}
        public Builder(PowerpackWidgetServiceLevelObjectiveDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalQueryFilters = defaults.additionalQueryFilters;
    	      this.globalTimeTarget = defaults.globalTimeTarget;
    	      this.showErrorBudget = defaults.showErrorBudget;
    	      this.sloId = defaults.sloId;
    	      this.timeWindows = defaults.timeWindows;
    	      this.title = defaults.title;
    	      this.titleAlign = defaults.titleAlign;
    	      this.titleSize = defaults.titleSize;
    	      this.viewMode = defaults.viewMode;
    	      this.viewType = defaults.viewType;
        }

        @CustomType.Setter
        public Builder additionalQueryFilters(@Nullable String additionalQueryFilters) {

            this.additionalQueryFilters = additionalQueryFilters;
            return this;
        }
        @CustomType.Setter
        public Builder globalTimeTarget(@Nullable String globalTimeTarget) {

            this.globalTimeTarget = globalTimeTarget;
            return this;
        }
        @CustomType.Setter
        public Builder showErrorBudget(@Nullable Boolean showErrorBudget) {

            this.showErrorBudget = showErrorBudget;
            return this;
        }
        @CustomType.Setter
        public Builder sloId(String sloId) {
            if (sloId == null) {
              throw new MissingRequiredPropertyException("PowerpackWidgetServiceLevelObjectiveDefinition", "sloId");
            }
            this.sloId = sloId;
            return this;
        }
        @CustomType.Setter
        public Builder timeWindows(List<String> timeWindows) {
            if (timeWindows == null) {
              throw new MissingRequiredPropertyException("PowerpackWidgetServiceLevelObjectiveDefinition", "timeWindows");
            }
            this.timeWindows = timeWindows;
            return this;
        }
        public Builder timeWindows(String... timeWindows) {
            return timeWindows(List.of(timeWindows));
        }
        @CustomType.Setter
        public Builder title(@Nullable String title) {

            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder titleAlign(@Nullable String titleAlign) {

            this.titleAlign = titleAlign;
            return this;
        }
        @CustomType.Setter
        public Builder titleSize(@Nullable String titleSize) {

            this.titleSize = titleSize;
            return this;
        }
        @CustomType.Setter
        public Builder viewMode(String viewMode) {
            if (viewMode == null) {
              throw new MissingRequiredPropertyException("PowerpackWidgetServiceLevelObjectiveDefinition", "viewMode");
            }
            this.viewMode = viewMode;
            return this;
        }
        @CustomType.Setter
        public Builder viewType(String viewType) {
            if (viewType == null) {
              throw new MissingRequiredPropertyException("PowerpackWidgetServiceLevelObjectiveDefinition", "viewType");
            }
            this.viewType = viewType;
            return this;
        }
        public PowerpackWidgetServiceLevelObjectiveDefinition build() {
            final var _resultValue = new PowerpackWidgetServiceLevelObjectiveDefinition();
            _resultValue.additionalQueryFilters = additionalQueryFilters;
            _resultValue.globalTimeTarget = globalTimeTarget;
            _resultValue.showErrorBudget = showErrorBudget;
            _resultValue.sloId = sloId;
            _resultValue.timeWindows = timeWindows;
            _resultValue.title = title;
            _resultValue.titleAlign = titleAlign;
            _resultValue.titleSize = titleSize;
            _resultValue.viewMode = viewMode;
            _resultValue.viewType = viewType;
            return _resultValue;
        }
    }
}
