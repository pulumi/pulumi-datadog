// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesSocketFramingArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesSocketTlsArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigSourcesSocketArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigSourcesSocketArgs Empty = new ObservabilityPipelineConfigSourcesSocketArgs();

    /**
     * Defines the framing method for incoming messages.
     * 
     */
    @Import(name="framing")
    private @Nullable Output<ObservabilityPipelineConfigSourcesSocketFramingArgs> framing;

    /**
     * @return Defines the framing method for incoming messages.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigSourcesSocketFramingArgs>> framing() {
        return Optional.ofNullable(this.framing);
    }

    /**
     * The unique identifier for this component.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique identifier for this component.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The protocol used to receive logs. Valid values are `tcp`, `udp`.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return The protocol used to receive logs. Valid values are `tcp`, `udp`.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    @Import(name="tls")
    private @Nullable Output<ObservabilityPipelineConfigSourcesSocketTlsArgs> tls;

    /**
     * @return Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigSourcesSocketTlsArgs>> tls() {
        return Optional.ofNullable(this.tls);
    }

    private ObservabilityPipelineConfigSourcesSocketArgs() {}

    private ObservabilityPipelineConfigSourcesSocketArgs(ObservabilityPipelineConfigSourcesSocketArgs $) {
        this.framing = $.framing;
        this.id = $.id;
        this.mode = $.mode;
        this.tls = $.tls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigSourcesSocketArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigSourcesSocketArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigSourcesSocketArgs();
        }

        public Builder(ObservabilityPipelineConfigSourcesSocketArgs defaults) {
            $ = new ObservabilityPipelineConfigSourcesSocketArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param framing Defines the framing method for incoming messages.
         * 
         * @return builder
         * 
         */
        public Builder framing(@Nullable Output<ObservabilityPipelineConfigSourcesSocketFramingArgs> framing) {
            $.framing = framing;
            return this;
        }

        /**
         * @param framing Defines the framing method for incoming messages.
         * 
         * @return builder
         * 
         */
        public Builder framing(ObservabilityPipelineConfigSourcesSocketFramingArgs framing) {
            return framing(Output.of(framing));
        }

        /**
         * @param id The unique identifier for this component.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier for this component.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param mode The protocol used to receive logs. Valid values are `tcp`, `udp`.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The protocol used to receive logs. Valid values are `tcp`, `udp`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(@Nullable Output<ObservabilityPipelineConfigSourcesSocketTlsArgs> tls) {
            $.tls = tls;
            return this;
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(ObservabilityPipelineConfigSourcesSocketTlsArgs tls) {
            return tls(Output.of(tls));
        }

        public ObservabilityPipelineConfigSourcesSocketArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigSourcesSocketArgs", "id");
            }
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigSourcesSocketArgs", "mode");
            }
            return $;
        }
    }

}
