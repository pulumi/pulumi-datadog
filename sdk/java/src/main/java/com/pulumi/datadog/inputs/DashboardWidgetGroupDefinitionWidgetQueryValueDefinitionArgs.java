// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLinkArgs;
import com.pulumi.datadog.inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestArgs;
import com.pulumi.datadog.inputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs Empty = new DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs();

    /**
     * A Boolean indicating whether to automatically scale the tile.
     * 
     */
    @Import(name="autoscale")
    private @Nullable Output<Boolean> autoscale;

    /**
     * @return A Boolean indicating whether to automatically scale the tile.
     * 
     */
    public Optional<Output<Boolean>> autoscale() {
        return Optional.ofNullable(this.autoscale);
    }

    /**
     * A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
     * 
     */
    @Import(name="customLinks")
    private @Nullable Output<List<DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLinkArgs>> customLinks;

    /**
     * @return A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
     * 
     */
    public Optional<Output<List<DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLinkArgs>>> customLinks() {
        return Optional.ofNullable(this.customLinks);
    }

    /**
     * The unit for the value displayed in the widget.
     * 
     */
    @Import(name="customUnit")
    private @Nullable Output<String> customUnit;

    /**
     * @return The unit for the value displayed in the widget.
     * 
     */
    public Optional<Output<String>> customUnit() {
        return Optional.ofNullable(this.customUnit);
    }

    /**
     * The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
     * 
     */
    @Import(name="liveSpan")
    private @Nullable Output<String> liveSpan;

    /**
     * @return The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
     * 
     */
    public Optional<Output<String>> liveSpan() {
        return Optional.ofNullable(this.liveSpan);
    }

    /**
     * The precision to use when displaying the value. Use `*` for maximum precision.
     * 
     */
    @Import(name="precision")
    private @Nullable Output<Integer> precision;

    /**
     * @return The precision to use when displaying the value. Use `*` for maximum precision.
     * 
     */
    public Optional<Output<Integer>> precision() {
        return Optional.ofNullable(this.precision);
    }

    /**
     * A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
     * 
     */
    @Import(name="requests")
    private @Nullable Output<List<DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestArgs>> requests;

    /**
     * @return A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
     * 
     */
    public Optional<Output<List<DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestArgs>>> requests() {
        return Optional.ofNullable(this.requests);
    }

    /**
     * The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
     * 
     */
    @Import(name="textAlign")
    private @Nullable Output<String> textAlign;

    /**
     * @return The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
     * 
     */
    public Optional<Output<String>> textAlign() {
        return Optional.ofNullable(this.textAlign);
    }

    /**
     * Set a timeseries on the widget background.
     * 
     */
    @Import(name="timeseriesBackground")
    private @Nullable Output<DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundArgs> timeseriesBackground;

    /**
     * @return Set a timeseries on the widget background.
     * 
     */
    public Optional<Output<DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundArgs>> timeseriesBackground() {
        return Optional.ofNullable(this.timeseriesBackground);
    }

    /**
     * The title of the widget.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return The title of the widget.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * The alignment of the widget&#39;s title. Valid values are `center`, `left`, `right`.
     * 
     */
    @Import(name="titleAlign")
    private @Nullable Output<String> titleAlign;

    /**
     * @return The alignment of the widget&#39;s title. Valid values are `center`, `left`, `right`.
     * 
     */
    public Optional<Output<String>> titleAlign() {
        return Optional.ofNullable(this.titleAlign);
    }

    /**
     * The size of the widget&#39;s title (defaults to 16).
     * 
     */
    @Import(name="titleSize")
    private @Nullable Output<String> titleSize;

    /**
     * @return The size of the widget&#39;s title (defaults to 16).
     * 
     */
    public Optional<Output<String>> titleSize() {
        return Optional.ofNullable(this.titleSize);
    }

    private DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs() {}

    private DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs(DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs $) {
        this.autoscale = $.autoscale;
        this.customLinks = $.customLinks;
        this.customUnit = $.customUnit;
        this.liveSpan = $.liveSpan;
        this.precision = $.precision;
        this.requests = $.requests;
        this.textAlign = $.textAlign;
        this.timeseriesBackground = $.timeseriesBackground;
        this.title = $.title;
        this.titleAlign = $.titleAlign;
        this.titleSize = $.titleSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs $;

        public Builder() {
            $ = new DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs();
        }

        public Builder(DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs defaults) {
            $ = new DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoscale A Boolean indicating whether to automatically scale the tile.
         * 
         * @return builder
         * 
         */
        public Builder autoscale(@Nullable Output<Boolean> autoscale) {
            $.autoscale = autoscale;
            return this;
        }

        /**
         * @param autoscale A Boolean indicating whether to automatically scale the tile.
         * 
         * @return builder
         * 
         */
        public Builder autoscale(Boolean autoscale) {
            return autoscale(Output.of(autoscale));
        }

        /**
         * @param customLinks A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
         * 
         * @return builder
         * 
         */
        public Builder customLinks(@Nullable Output<List<DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLinkArgs>> customLinks) {
            $.customLinks = customLinks;
            return this;
        }

        /**
         * @param customLinks A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
         * 
         * @return builder
         * 
         */
        public Builder customLinks(List<DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLinkArgs> customLinks) {
            return customLinks(Output.of(customLinks));
        }

        /**
         * @param customLinks A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
         * 
         * @return builder
         * 
         */
        public Builder customLinks(DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLinkArgs... customLinks) {
            return customLinks(List.of(customLinks));
        }

        /**
         * @param customUnit The unit for the value displayed in the widget.
         * 
         * @return builder
         * 
         */
        public Builder customUnit(@Nullable Output<String> customUnit) {
            $.customUnit = customUnit;
            return this;
        }

        /**
         * @param customUnit The unit for the value displayed in the widget.
         * 
         * @return builder
         * 
         */
        public Builder customUnit(String customUnit) {
            return customUnit(Output.of(customUnit));
        }

        /**
         * @param liveSpan The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
         * 
         * @return builder
         * 
         */
        public Builder liveSpan(@Nullable Output<String> liveSpan) {
            $.liveSpan = liveSpan;
            return this;
        }

        /**
         * @param liveSpan The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
         * 
         * @return builder
         * 
         */
        public Builder liveSpan(String liveSpan) {
            return liveSpan(Output.of(liveSpan));
        }

        /**
         * @param precision The precision to use when displaying the value. Use `*` for maximum precision.
         * 
         * @return builder
         * 
         */
        public Builder precision(@Nullable Output<Integer> precision) {
            $.precision = precision;
            return this;
        }

        /**
         * @param precision The precision to use when displaying the value. Use `*` for maximum precision.
         * 
         * @return builder
         * 
         */
        public Builder precision(Integer precision) {
            return precision(Output.of(precision));
        }

        /**
         * @param requests A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
         * 
         * @return builder
         * 
         */
        public Builder requests(@Nullable Output<List<DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestArgs>> requests) {
            $.requests = requests;
            return this;
        }

        /**
         * @param requests A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
         * 
         * @return builder
         * 
         */
        public Builder requests(List<DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestArgs> requests) {
            return requests(Output.of(requests));
        }

        /**
         * @param requests A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
         * 
         * @return builder
         * 
         */
        public Builder requests(DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestArgs... requests) {
            return requests(List.of(requests));
        }

        /**
         * @param textAlign The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
         * 
         * @return builder
         * 
         */
        public Builder textAlign(@Nullable Output<String> textAlign) {
            $.textAlign = textAlign;
            return this;
        }

        /**
         * @param textAlign The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
         * 
         * @return builder
         * 
         */
        public Builder textAlign(String textAlign) {
            return textAlign(Output.of(textAlign));
        }

        /**
         * @param timeseriesBackground Set a timeseries on the widget background.
         * 
         * @return builder
         * 
         */
        public Builder timeseriesBackground(@Nullable Output<DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundArgs> timeseriesBackground) {
            $.timeseriesBackground = timeseriesBackground;
            return this;
        }

        /**
         * @param timeseriesBackground Set a timeseries on the widget background.
         * 
         * @return builder
         * 
         */
        public Builder timeseriesBackground(DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundArgs timeseriesBackground) {
            return timeseriesBackground(Output.of(timeseriesBackground));
        }

        /**
         * @param title The title of the widget.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The title of the widget.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param titleAlign The alignment of the widget&#39;s title. Valid values are `center`, `left`, `right`.
         * 
         * @return builder
         * 
         */
        public Builder titleAlign(@Nullable Output<String> titleAlign) {
            $.titleAlign = titleAlign;
            return this;
        }

        /**
         * @param titleAlign The alignment of the widget&#39;s title. Valid values are `center`, `left`, `right`.
         * 
         * @return builder
         * 
         */
        public Builder titleAlign(String titleAlign) {
            return titleAlign(Output.of(titleAlign));
        }

        /**
         * @param titleSize The size of the widget&#39;s title (defaults to 16).
         * 
         * @return builder
         * 
         */
        public Builder titleSize(@Nullable Output<String> titleSize) {
            $.titleSize = titleSize;
            return this;
        }

        /**
         * @param titleSize The size of the widget&#39;s title (defaults to 16).
         * 
         * @return builder
         * 
         */
        public Builder titleSize(String titleSize) {
            return titleSize(Output.of(titleSize));
        }

        public DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs build() {
            return $;
        }
    }

}
