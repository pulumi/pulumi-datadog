// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class SecurityMonitoringRuleSchedulingOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityMonitoringRuleSchedulingOptionsArgs Empty = new SecurityMonitoringRuleSchedulingOptionsArgs();

    /**
     * Schedule for the rule queries, written in RRULE syntax. See [RFC](https://icalendar.org/iCalendar-RFC-5545/3-8-5-3-recurrence-rule.html) for syntax reference.
     * 
     */
    @Import(name="rrule", required=true)
    private Output<String> rrule;

    /**
     * @return Schedule for the rule queries, written in RRULE syntax. See [RFC](https://icalendar.org/iCalendar-RFC-5545/3-8-5-3-recurrence-rule.html) for syntax reference.
     * 
     */
    public Output<String> rrule() {
        return this.rrule;
    }

    /**
     * Start date for the schedule, in ISO 8601 format without timezone.
     * 
     */
    @Import(name="start", required=true)
    private Output<String> start;

    /**
     * @return Start date for the schedule, in ISO 8601 format without timezone.
     * 
     */
    public Output<String> start() {
        return this.start;
    }

    /**
     * Time zone of the start date, in the [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) format.
     * 
     */
    @Import(name="timezone", required=true)
    private Output<String> timezone;

    /**
     * @return Time zone of the start date, in the [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) format.
     * 
     */
    public Output<String> timezone() {
        return this.timezone;
    }

    private SecurityMonitoringRuleSchedulingOptionsArgs() {}

    private SecurityMonitoringRuleSchedulingOptionsArgs(SecurityMonitoringRuleSchedulingOptionsArgs $) {
        this.rrule = $.rrule;
        this.start = $.start;
        this.timezone = $.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityMonitoringRuleSchedulingOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityMonitoringRuleSchedulingOptionsArgs $;

        public Builder() {
            $ = new SecurityMonitoringRuleSchedulingOptionsArgs();
        }

        public Builder(SecurityMonitoringRuleSchedulingOptionsArgs defaults) {
            $ = new SecurityMonitoringRuleSchedulingOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param rrule Schedule for the rule queries, written in RRULE syntax. See [RFC](https://icalendar.org/iCalendar-RFC-5545/3-8-5-3-recurrence-rule.html) for syntax reference.
         * 
         * @return builder
         * 
         */
        public Builder rrule(Output<String> rrule) {
            $.rrule = rrule;
            return this;
        }

        /**
         * @param rrule Schedule for the rule queries, written in RRULE syntax. See [RFC](https://icalendar.org/iCalendar-RFC-5545/3-8-5-3-recurrence-rule.html) for syntax reference.
         * 
         * @return builder
         * 
         */
        public Builder rrule(String rrule) {
            return rrule(Output.of(rrule));
        }

        /**
         * @param start Start date for the schedule, in ISO 8601 format without timezone.
         * 
         * @return builder
         * 
         */
        public Builder start(Output<String> start) {
            $.start = start;
            return this;
        }

        /**
         * @param start Start date for the schedule, in ISO 8601 format without timezone.
         * 
         * @return builder
         * 
         */
        public Builder start(String start) {
            return start(Output.of(start));
        }

        /**
         * @param timezone Time zone of the start date, in the [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) format.
         * 
         * @return builder
         * 
         */
        public Builder timezone(Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone Time zone of the start date, in the [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) format.
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        public SecurityMonitoringRuleSchedulingOptionsArgs build() {
            if ($.rrule == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringRuleSchedulingOptionsArgs", "rrule");
            }
            if ($.start == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringRuleSchedulingOptionsArgs", "start");
            }
            if ($.timezone == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringRuleSchedulingOptionsArgs", "timezone");
            }
            return $;
        }
    }

}
