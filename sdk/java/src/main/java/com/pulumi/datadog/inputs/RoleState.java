// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.RolePermissionArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleState extends com.pulumi.resources.ResourceArgs {

    public static final RoleState Empty = new RoleState();

    /**
     * Name of the permission.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the permission.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Set of objects containing the permission ID and the name of the permissions granted to this role.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<RolePermissionArgs>> permissions;

    /**
     * @return Set of objects containing the permission ID and the name of the permissions granted to this role.
     * 
     */
    public Optional<Output<List<RolePermissionArgs>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * Number of users that have this role.
     * 
     */
    @Import(name="userCount")
    private @Nullable Output<Integer> userCount;

    /**
     * @return Number of users that have this role.
     * 
     */
    public Optional<Output<Integer>> userCount() {
        return Optional.ofNullable(this.userCount);
    }

    /**
     * If set to `false`, skip the validation call done during plan.
     * 
     */
    @Import(name="validate")
    private @Nullable Output<Boolean> validate;

    /**
     * @return If set to `false`, skip the validation call done during plan.
     * 
     */
    public Optional<Output<Boolean>> validate() {
        return Optional.ofNullable(this.validate);
    }

    private RoleState() {}

    private RoleState(RoleState $) {
        this.name = $.name;
        this.permissions = $.permissions;
        this.userCount = $.userCount;
        this.validate = $.validate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleState $;

        public Builder() {
            $ = new RoleState();
        }

        public Builder(RoleState defaults) {
            $ = new RoleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the permission.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the permission.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param permissions Set of objects containing the permission ID and the name of the permissions granted to this role.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<RolePermissionArgs>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions Set of objects containing the permission ID and the name of the permissions granted to this role.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<RolePermissionArgs> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions Set of objects containing the permission ID and the name of the permissions granted to this role.
         * 
         * @return builder
         * 
         */
        public Builder permissions(RolePermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }

        /**
         * @param userCount Number of users that have this role.
         * 
         * @return builder
         * 
         */
        public Builder userCount(@Nullable Output<Integer> userCount) {
            $.userCount = userCount;
            return this;
        }

        /**
         * @param userCount Number of users that have this role.
         * 
         * @return builder
         * 
         */
        public Builder userCount(Integer userCount) {
            return userCount(Output.of(userCount));
        }

        /**
         * @param validate If set to `false`, skip the validation call done during plan.
         * 
         * @return builder
         * 
         */
        public Builder validate(@Nullable Output<Boolean> validate) {
            $.validate = validate;
            return this;
        }

        /**
         * @param validate If set to `false`, skip the validation call done during plan.
         * 
         * @return builder
         * 
         */
        public Builder validate(Boolean validate) {
            return validate(Output.of(validate));
        }

        public RoleState build() {
            return $;
        }
    }

}
