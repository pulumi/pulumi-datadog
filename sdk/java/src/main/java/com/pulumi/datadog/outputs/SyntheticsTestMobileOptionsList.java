// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.SyntheticsTestMobileOptionsListBinding;
import com.pulumi.datadog.outputs.SyntheticsTestMobileOptionsListCi;
import com.pulumi.datadog.outputs.SyntheticsTestMobileOptionsListMobileApplication;
import com.pulumi.datadog.outputs.SyntheticsTestMobileOptionsListMonitorOptions;
import com.pulumi.datadog.outputs.SyntheticsTestMobileOptionsListRetry;
import com.pulumi.datadog.outputs.SyntheticsTestMobileOptionsListScheduling;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SyntheticsTestMobileOptionsList {
    private @Nullable Boolean allowApplicationCrash;
    private @Nullable List<SyntheticsTestMobileOptionsListBinding> bindings;
    /**
     * @return CI/CD options for a Synthetic test.
     * 
     */
    private @Nullable SyntheticsTestMobileOptionsListCi ci;
    private @Nullable Integer defaultStepTimeout;
    private List<String> deviceIds;
    private @Nullable Boolean disableAutoAcceptAlert;
    /**
     * @return Minimum amount of time in failure required to trigger an alert (in seconds). Default is `0`.
     * 
     */
    private @Nullable Integer minFailureDuration;
    private SyntheticsTestMobileOptionsListMobileApplication mobileApplication;
    /**
     * @return The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
     * 
     */
    private @Nullable String monitorName;
    private @Nullable SyntheticsTestMobileOptionsListMonitorOptions monitorOptions;
    private @Nullable Integer monitorPriority;
    /**
     * @return Prevents saving screenshots of the steps.
     * 
     */
    private @Nullable Boolean noScreenshot;
    /**
     * @return A list of role identifiers pulled from the Roles API to restrict read and write access.
     * 
     */
    private @Nullable List<String> restrictedRoles;
    private @Nullable SyntheticsTestMobileOptionsListRetry retry;
    /**
     * @return Object containing timeframes and timezone used for advanced scheduling.
     * 
     */
    private @Nullable SyntheticsTestMobileOptionsListScheduling scheduling;
    /**
     * @return How often the test should run (in seconds).
     * 
     */
    private Integer tickEvery;
    private @Nullable Integer verbosity;

    private SyntheticsTestMobileOptionsList() {}
    public Optional<Boolean> allowApplicationCrash() {
        return Optional.ofNullable(this.allowApplicationCrash);
    }
    public List<SyntheticsTestMobileOptionsListBinding> bindings() {
        return this.bindings == null ? List.of() : this.bindings;
    }
    /**
     * @return CI/CD options for a Synthetic test.
     * 
     */
    public Optional<SyntheticsTestMobileOptionsListCi> ci() {
        return Optional.ofNullable(this.ci);
    }
    public Optional<Integer> defaultStepTimeout() {
        return Optional.ofNullable(this.defaultStepTimeout);
    }
    public List<String> deviceIds() {
        return this.deviceIds;
    }
    public Optional<Boolean> disableAutoAcceptAlert() {
        return Optional.ofNullable(this.disableAutoAcceptAlert);
    }
    /**
     * @return Minimum amount of time in failure required to trigger an alert (in seconds). Default is `0`.
     * 
     */
    public Optional<Integer> minFailureDuration() {
        return Optional.ofNullable(this.minFailureDuration);
    }
    public SyntheticsTestMobileOptionsListMobileApplication mobileApplication() {
        return this.mobileApplication;
    }
    /**
     * @return The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
     * 
     */
    public Optional<String> monitorName() {
        return Optional.ofNullable(this.monitorName);
    }
    public Optional<SyntheticsTestMobileOptionsListMonitorOptions> monitorOptions() {
        return Optional.ofNullable(this.monitorOptions);
    }
    public Optional<Integer> monitorPriority() {
        return Optional.ofNullable(this.monitorPriority);
    }
    /**
     * @return Prevents saving screenshots of the steps.
     * 
     */
    public Optional<Boolean> noScreenshot() {
        return Optional.ofNullable(this.noScreenshot);
    }
    /**
     * @return A list of role identifiers pulled from the Roles API to restrict read and write access.
     * 
     */
    public List<String> restrictedRoles() {
        return this.restrictedRoles == null ? List.of() : this.restrictedRoles;
    }
    public Optional<SyntheticsTestMobileOptionsListRetry> retry() {
        return Optional.ofNullable(this.retry);
    }
    /**
     * @return Object containing timeframes and timezone used for advanced scheduling.
     * 
     */
    public Optional<SyntheticsTestMobileOptionsListScheduling> scheduling() {
        return Optional.ofNullable(this.scheduling);
    }
    /**
     * @return How often the test should run (in seconds).
     * 
     */
    public Integer tickEvery() {
        return this.tickEvery;
    }
    public Optional<Integer> verbosity() {
        return Optional.ofNullable(this.verbosity);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyntheticsTestMobileOptionsList defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowApplicationCrash;
        private @Nullable List<SyntheticsTestMobileOptionsListBinding> bindings;
        private @Nullable SyntheticsTestMobileOptionsListCi ci;
        private @Nullable Integer defaultStepTimeout;
        private List<String> deviceIds;
        private @Nullable Boolean disableAutoAcceptAlert;
        private @Nullable Integer minFailureDuration;
        private SyntheticsTestMobileOptionsListMobileApplication mobileApplication;
        private @Nullable String monitorName;
        private @Nullable SyntheticsTestMobileOptionsListMonitorOptions monitorOptions;
        private @Nullable Integer monitorPriority;
        private @Nullable Boolean noScreenshot;
        private @Nullable List<String> restrictedRoles;
        private @Nullable SyntheticsTestMobileOptionsListRetry retry;
        private @Nullable SyntheticsTestMobileOptionsListScheduling scheduling;
        private Integer tickEvery;
        private @Nullable Integer verbosity;
        public Builder() {}
        public Builder(SyntheticsTestMobileOptionsList defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowApplicationCrash = defaults.allowApplicationCrash;
    	      this.bindings = defaults.bindings;
    	      this.ci = defaults.ci;
    	      this.defaultStepTimeout = defaults.defaultStepTimeout;
    	      this.deviceIds = defaults.deviceIds;
    	      this.disableAutoAcceptAlert = defaults.disableAutoAcceptAlert;
    	      this.minFailureDuration = defaults.minFailureDuration;
    	      this.mobileApplication = defaults.mobileApplication;
    	      this.monitorName = defaults.monitorName;
    	      this.monitorOptions = defaults.monitorOptions;
    	      this.monitorPriority = defaults.monitorPriority;
    	      this.noScreenshot = defaults.noScreenshot;
    	      this.restrictedRoles = defaults.restrictedRoles;
    	      this.retry = defaults.retry;
    	      this.scheduling = defaults.scheduling;
    	      this.tickEvery = defaults.tickEvery;
    	      this.verbosity = defaults.verbosity;
        }

        @CustomType.Setter
        public Builder allowApplicationCrash(@Nullable Boolean allowApplicationCrash) {

            this.allowApplicationCrash = allowApplicationCrash;
            return this;
        }
        @CustomType.Setter
        public Builder bindings(@Nullable List<SyntheticsTestMobileOptionsListBinding> bindings) {

            this.bindings = bindings;
            return this;
        }
        public Builder bindings(SyntheticsTestMobileOptionsListBinding... bindings) {
            return bindings(List.of(bindings));
        }
        @CustomType.Setter
        public Builder ci(@Nullable SyntheticsTestMobileOptionsListCi ci) {

            this.ci = ci;
            return this;
        }
        @CustomType.Setter
        public Builder defaultStepTimeout(@Nullable Integer defaultStepTimeout) {

            this.defaultStepTimeout = defaultStepTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder deviceIds(List<String> deviceIds) {
            if (deviceIds == null) {
              throw new MissingRequiredPropertyException("SyntheticsTestMobileOptionsList", "deviceIds");
            }
            this.deviceIds = deviceIds;
            return this;
        }
        public Builder deviceIds(String... deviceIds) {
            return deviceIds(List.of(deviceIds));
        }
        @CustomType.Setter
        public Builder disableAutoAcceptAlert(@Nullable Boolean disableAutoAcceptAlert) {

            this.disableAutoAcceptAlert = disableAutoAcceptAlert;
            return this;
        }
        @CustomType.Setter
        public Builder minFailureDuration(@Nullable Integer minFailureDuration) {

            this.minFailureDuration = minFailureDuration;
            return this;
        }
        @CustomType.Setter
        public Builder mobileApplication(SyntheticsTestMobileOptionsListMobileApplication mobileApplication) {
            if (mobileApplication == null) {
              throw new MissingRequiredPropertyException("SyntheticsTestMobileOptionsList", "mobileApplication");
            }
            this.mobileApplication = mobileApplication;
            return this;
        }
        @CustomType.Setter
        public Builder monitorName(@Nullable String monitorName) {

            this.monitorName = monitorName;
            return this;
        }
        @CustomType.Setter
        public Builder monitorOptions(@Nullable SyntheticsTestMobileOptionsListMonitorOptions monitorOptions) {

            this.monitorOptions = monitorOptions;
            return this;
        }
        @CustomType.Setter
        public Builder monitorPriority(@Nullable Integer monitorPriority) {

            this.monitorPriority = monitorPriority;
            return this;
        }
        @CustomType.Setter
        public Builder noScreenshot(@Nullable Boolean noScreenshot) {

            this.noScreenshot = noScreenshot;
            return this;
        }
        @CustomType.Setter
        public Builder restrictedRoles(@Nullable List<String> restrictedRoles) {

            this.restrictedRoles = restrictedRoles;
            return this;
        }
        public Builder restrictedRoles(String... restrictedRoles) {
            return restrictedRoles(List.of(restrictedRoles));
        }
        @CustomType.Setter
        public Builder retry(@Nullable SyntheticsTestMobileOptionsListRetry retry) {

            this.retry = retry;
            return this;
        }
        @CustomType.Setter
        public Builder scheduling(@Nullable SyntheticsTestMobileOptionsListScheduling scheduling) {

            this.scheduling = scheduling;
            return this;
        }
        @CustomType.Setter
        public Builder tickEvery(Integer tickEvery) {
            if (tickEvery == null) {
              throw new MissingRequiredPropertyException("SyntheticsTestMobileOptionsList", "tickEvery");
            }
            this.tickEvery = tickEvery;
            return this;
        }
        @CustomType.Setter
        public Builder verbosity(@Nullable Integer verbosity) {

            this.verbosity = verbosity;
            return this;
        }
        public SyntheticsTestMobileOptionsList build() {
            final var _resultValue = new SyntheticsTestMobileOptionsList();
            _resultValue.allowApplicationCrash = allowApplicationCrash;
            _resultValue.bindings = bindings;
            _resultValue.ci = ci;
            _resultValue.defaultStepTimeout = defaultStepTimeout;
            _resultValue.deviceIds = deviceIds;
            _resultValue.disableAutoAcceptAlert = disableAutoAcceptAlert;
            _resultValue.minFailureDuration = minFailureDuration;
            _resultValue.mobileApplication = mobileApplication;
            _resultValue.monitorName = monitorName;
            _resultValue.monitorOptions = monitorOptions;
            _resultValue.monitorPriority = monitorPriority;
            _resultValue.noScreenshot = noScreenshot;
            _resultValue.restrictedRoles = restrictedRoles;
            _resultValue.retry = retry;
            _resultValue.scheduling = scheduling;
            _resultValue.tickEvery = tickEvery;
            _resultValue.verbosity = verbosity;
            return _resultValue;
        }
    }
}
