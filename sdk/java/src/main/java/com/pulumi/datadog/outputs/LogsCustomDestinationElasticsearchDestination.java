// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.LogsCustomDestinationElasticsearchDestinationBasicAuth;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LogsCustomDestinationElasticsearchDestination {
    /**
     * @return Basic access authentication.
     * 
     */
    private LogsCustomDestinationElasticsearchDestinationBasicAuth basicAuth;
    /**
     * @return The destination for which logs will be forwarded to. Must have HTTPS scheme. Forwarding back to Datadog is not allowed.
     * 
     */
    private String endpoint;
    /**
     * @return Name of the Elasticsearch index (must follow [Elasticsearch&#39;s criteria](https://www.elastic.co/guide/en/elasticsearch/reference/8.11/indices-create-index.html#indices-create-api-path-params)).
     * 
     */
    private String indexName;
    /**
     * @return Date pattern with US locale and UTC timezone to be appended to the index name after adding &#39;-&#39;
     * 						(that is, &#39;${index_name}-${indexPattern}&#39;).
     * 						You can customize the index rotation naming pattern by choosing one of these options:
     * 						- Hourly: &#39;yyyy-MM-dd-HH&#39; (as an example, it would render: &#39;2022-10-19-09&#39;)
     * 						- Daily: &#39;yyyy-MM-dd&#39; (as an example, it would render: &#39;2022-10-19&#39;)
     * 						- Weekly: &#39;yyyy-&#39;W&#39;ww&#39; (as an example, it would render: &#39;2022-W42&#39;)
     * 						- Monthly: &#39;yyyy-MM&#39; (as an example, it would render: &#39;2022-10&#39;)
     * 						If this field is missing or is blank, it means that the index name will always be the same
     * 						(that is, no rotation).
     * 
     */
    private @Nullable String indexRotation;

    private LogsCustomDestinationElasticsearchDestination() {}
    /**
     * @return Basic access authentication.
     * 
     */
    public LogsCustomDestinationElasticsearchDestinationBasicAuth basicAuth() {
        return this.basicAuth;
    }
    /**
     * @return The destination for which logs will be forwarded to. Must have HTTPS scheme. Forwarding back to Datadog is not allowed.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return Name of the Elasticsearch index (must follow [Elasticsearch&#39;s criteria](https://www.elastic.co/guide/en/elasticsearch/reference/8.11/indices-create-index.html#indices-create-api-path-params)).
     * 
     */
    public String indexName() {
        return this.indexName;
    }
    /**
     * @return Date pattern with US locale and UTC timezone to be appended to the index name after adding &#39;-&#39;
     * 						(that is, &#39;${index_name}-${indexPattern}&#39;).
     * 						You can customize the index rotation naming pattern by choosing one of these options:
     * 						- Hourly: &#39;yyyy-MM-dd-HH&#39; (as an example, it would render: &#39;2022-10-19-09&#39;)
     * 						- Daily: &#39;yyyy-MM-dd&#39; (as an example, it would render: &#39;2022-10-19&#39;)
     * 						- Weekly: &#39;yyyy-&#39;W&#39;ww&#39; (as an example, it would render: &#39;2022-W42&#39;)
     * 						- Monthly: &#39;yyyy-MM&#39; (as an example, it would render: &#39;2022-10&#39;)
     * 						If this field is missing or is blank, it means that the index name will always be the same
     * 						(that is, no rotation).
     * 
     */
    public Optional<String> indexRotation() {
        return Optional.ofNullable(this.indexRotation);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogsCustomDestinationElasticsearchDestination defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private LogsCustomDestinationElasticsearchDestinationBasicAuth basicAuth;
        private String endpoint;
        private String indexName;
        private @Nullable String indexRotation;
        public Builder() {}
        public Builder(LogsCustomDestinationElasticsearchDestination defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.basicAuth = defaults.basicAuth;
    	      this.endpoint = defaults.endpoint;
    	      this.indexName = defaults.indexName;
    	      this.indexRotation = defaults.indexRotation;
        }

        @CustomType.Setter
        public Builder basicAuth(LogsCustomDestinationElasticsearchDestinationBasicAuth basicAuth) {
            if (basicAuth == null) {
              throw new MissingRequiredPropertyException("LogsCustomDestinationElasticsearchDestination", "basicAuth");
            }
            this.basicAuth = basicAuth;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("LogsCustomDestinationElasticsearchDestination", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder indexName(String indexName) {
            if (indexName == null) {
              throw new MissingRequiredPropertyException("LogsCustomDestinationElasticsearchDestination", "indexName");
            }
            this.indexName = indexName;
            return this;
        }
        @CustomType.Setter
        public Builder indexRotation(@Nullable String indexRotation) {

            this.indexRotation = indexRotation;
            return this;
        }
        public LogsCustomDestinationElasticsearchDestination build() {
            final var _resultValue = new LogsCustomDestinationElasticsearchDestination();
            _resultValue.basicAuth = basicAuth;
            _resultValue.endpoint = endpoint;
            _resultValue.indexName = indexName;
            _resultValue.indexRotation = indexRotation;
            return _resultValue;
        }
    }
}
