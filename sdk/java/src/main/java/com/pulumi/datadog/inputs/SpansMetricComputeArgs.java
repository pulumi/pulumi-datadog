// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SpansMetricComputeArgs extends com.pulumi.resources.ResourceArgs {

    public static final SpansMetricComputeArgs Empty = new SpansMetricComputeArgs();

    /**
     * The type of aggregation to use. This field can&#39;t be updated after creation.
     * 
     */
    @Import(name="aggregationType", required=true)
    private Output<String> aggregationType;

    /**
     * @return The type of aggregation to use. This field can&#39;t be updated after creation.
     * 
     */
    public Output<String> aggregationType() {
        return this.aggregationType;
    }

    /**
     * Toggle to include or exclude percentile aggregations for distribution metrics. Only present when the `aggregation_type` is `distribution`.
     * 
     */
    @Import(name="includePercentiles")
    private @Nullable Output<Boolean> includePercentiles;

    /**
     * @return Toggle to include or exclude percentile aggregations for distribution metrics. Only present when the `aggregation_type` is `distribution`.
     * 
     */
    public Optional<Output<Boolean>> includePercentiles() {
        return Optional.ofNullable(this.includePercentiles);
    }

    /**
     * The path to the value the span-based metric will aggregate on (only used if the aggregation type is a &#34;distribution&#34;). This field can&#39;t be updated after creation.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The path to the value the span-based metric will aggregate on (only used if the aggregation type is a &#34;distribution&#34;). This field can&#39;t be updated after creation.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    private SpansMetricComputeArgs() {}

    private SpansMetricComputeArgs(SpansMetricComputeArgs $) {
        this.aggregationType = $.aggregationType;
        this.includePercentiles = $.includePercentiles;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpansMetricComputeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpansMetricComputeArgs $;

        public Builder() {
            $ = new SpansMetricComputeArgs();
        }

        public Builder(SpansMetricComputeArgs defaults) {
            $ = new SpansMetricComputeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregationType The type of aggregation to use. This field can&#39;t be updated after creation.
         * 
         * @return builder
         * 
         */
        public Builder aggregationType(Output<String> aggregationType) {
            $.aggregationType = aggregationType;
            return this;
        }

        /**
         * @param aggregationType The type of aggregation to use. This field can&#39;t be updated after creation.
         * 
         * @return builder
         * 
         */
        public Builder aggregationType(String aggregationType) {
            return aggregationType(Output.of(aggregationType));
        }

        /**
         * @param includePercentiles Toggle to include or exclude percentile aggregations for distribution metrics. Only present when the `aggregation_type` is `distribution`.
         * 
         * @return builder
         * 
         */
        public Builder includePercentiles(@Nullable Output<Boolean> includePercentiles) {
            $.includePercentiles = includePercentiles;
            return this;
        }

        /**
         * @param includePercentiles Toggle to include or exclude percentile aggregations for distribution metrics. Only present when the `aggregation_type` is `distribution`.
         * 
         * @return builder
         * 
         */
        public Builder includePercentiles(Boolean includePercentiles) {
            return includePercentiles(Output.of(includePercentiles));
        }

        /**
         * @param path The path to the value the span-based metric will aggregate on (only used if the aggregation type is a &#34;distribution&#34;). This field can&#39;t be updated after creation.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path to the value the span-based metric will aggregate on (only used if the aggregation type is a &#34;distribution&#34;). This field can&#39;t be updated after creation.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        public SpansMetricComputeArgs build() {
            $.aggregationType = Objects.requireNonNull($.aggregationType, "expected parameter 'aggregationType' to be non-null");
            return $;
        }
    }

}
