// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitorJsonArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitorJsonArgs Empty = new MonitorJsonArgs();

    /**
     * The JSON formatted definition of the monitor.
     * 
     */
    @Import(name="monitor", required=true)
    private Output<String> monitor;

    /**
     * @return The JSON formatted definition of the monitor.
     * 
     */
    public Output<String> monitor() {
        return this.monitor;
    }

    /**
     * The URL of the monitor.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL of the monitor.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private MonitorJsonArgs() {}

    private MonitorJsonArgs(MonitorJsonArgs $) {
        this.monitor = $.monitor;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorJsonArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorJsonArgs $;

        public Builder() {
            $ = new MonitorJsonArgs();
        }

        public Builder(MonitorJsonArgs defaults) {
            $ = new MonitorJsonArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param monitor The JSON formatted definition of the monitor.
         * 
         * @return builder
         * 
         */
        public Builder monitor(Output<String> monitor) {
            $.monitor = monitor;
            return this;
        }

        /**
         * @param monitor The JSON formatted definition of the monitor.
         * 
         * @return builder
         * 
         */
        public Builder monitor(String monitor) {
            return monitor(Output.of(monitor));
        }

        /**
         * @param url The URL of the monitor.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL of the monitor.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public MonitorJsonArgs build() {
            if ($.monitor == null) {
                throw new MissingRequiredPropertyException("MonitorJsonArgs", "monitor");
            }
            return $;
        }
    }

}
