// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogsArchiveGcsArchiveArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogsArchiveGcsArchiveArgs Empty = new LogsArchiveGcsArchiveArgs();

    /**
     * Name of your GCS bucket.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return Name of your GCS bucket.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * Your client email.
     * 
     */
    @Import(name="clientEmail", required=true)
    private Output<String> clientEmail;

    /**
     * @return Your client email.
     * 
     */
    public Output<String> clientEmail() {
        return this.clientEmail;
    }

    /**
     * Path where the archive is stored.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Path where the archive is stored.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Your project id.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Your project id.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    private LogsArchiveGcsArchiveArgs() {}

    private LogsArchiveGcsArchiveArgs(LogsArchiveGcsArchiveArgs $) {
        this.bucket = $.bucket;
        this.clientEmail = $.clientEmail;
        this.path = $.path;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogsArchiveGcsArchiveArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogsArchiveGcsArchiveArgs $;

        public Builder() {
            $ = new LogsArchiveGcsArchiveArgs();
        }

        public Builder(LogsArchiveGcsArchiveArgs defaults) {
            $ = new LogsArchiveGcsArchiveArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket Name of your GCS bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Name of your GCS bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param clientEmail Your client email.
         * 
         * @return builder
         * 
         */
        public Builder clientEmail(Output<String> clientEmail) {
            $.clientEmail = clientEmail;
            return this;
        }

        /**
         * @param clientEmail Your client email.
         * 
         * @return builder
         * 
         */
        public Builder clientEmail(String clientEmail) {
            return clientEmail(Output.of(clientEmail));
        }

        /**
         * @param path Path where the archive is stored.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Path where the archive is stored.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param projectId Your project id.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Your project id.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public LogsArchiveGcsArchiveArgs build() {
            if ($.bucket == null) {
                throw new MissingRequiredPropertyException("LogsArchiveGcsArchiveArgs", "bucket");
            }
            if ($.clientEmail == null) {
                throw new MissingRequiredPropertyException("LogsArchiveGcsArchiveArgs", "clientEmail");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("LogsArchiveGcsArchiveArgs", "projectId");
            }
            return $;
        }
    }

}
