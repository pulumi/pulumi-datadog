// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.GetTagPipelineRulesetRuleReferenceTableFieldPair;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetTagPipelineRulesetRuleReferenceTable {
    /**
     * @return Whether the reference table lookup is case insensitive.
     * 
     */
    private Boolean caseInsensitivity;
    /**
     * @return The field pairs for the reference table.
     * 
     */
    private @Nullable List<GetTagPipelineRulesetRuleReferenceTableFieldPair> fieldPairs;
    /**
     * @return Whether to apply the reference table only if the key doesn&#39;t exist.
     * 
     */
    private Boolean ifNotExists;
    /**
     * @return The source keys for the reference table lookup.
     * 
     */
    private List<String> sourceKeys;
    /**
     * @return The name of the reference table.
     * 
     */
    private String tableName;

    private GetTagPipelineRulesetRuleReferenceTable() {}
    /**
     * @return Whether the reference table lookup is case insensitive.
     * 
     */
    public Boolean caseInsensitivity() {
        return this.caseInsensitivity;
    }
    /**
     * @return The field pairs for the reference table.
     * 
     */
    public List<GetTagPipelineRulesetRuleReferenceTableFieldPair> fieldPairs() {
        return this.fieldPairs == null ? List.of() : this.fieldPairs;
    }
    /**
     * @return Whether to apply the reference table only if the key doesn&#39;t exist.
     * 
     */
    public Boolean ifNotExists() {
        return this.ifNotExists;
    }
    /**
     * @return The source keys for the reference table lookup.
     * 
     */
    public List<String> sourceKeys() {
        return this.sourceKeys;
    }
    /**
     * @return The name of the reference table.
     * 
     */
    public String tableName() {
        return this.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTagPipelineRulesetRuleReferenceTable defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean caseInsensitivity;
        private @Nullable List<GetTagPipelineRulesetRuleReferenceTableFieldPair> fieldPairs;
        private Boolean ifNotExists;
        private List<String> sourceKeys;
        private String tableName;
        public Builder() {}
        public Builder(GetTagPipelineRulesetRuleReferenceTable defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caseInsensitivity = defaults.caseInsensitivity;
    	      this.fieldPairs = defaults.fieldPairs;
    	      this.ifNotExists = defaults.ifNotExists;
    	      this.sourceKeys = defaults.sourceKeys;
    	      this.tableName = defaults.tableName;
        }

        @CustomType.Setter
        public Builder caseInsensitivity(Boolean caseInsensitivity) {
            if (caseInsensitivity == null) {
              throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleReferenceTable", "caseInsensitivity");
            }
            this.caseInsensitivity = caseInsensitivity;
            return this;
        }
        @CustomType.Setter
        public Builder fieldPairs(@Nullable List<GetTagPipelineRulesetRuleReferenceTableFieldPair> fieldPairs) {

            this.fieldPairs = fieldPairs;
            return this;
        }
        public Builder fieldPairs(GetTagPipelineRulesetRuleReferenceTableFieldPair... fieldPairs) {
            return fieldPairs(List.of(fieldPairs));
        }
        @CustomType.Setter
        public Builder ifNotExists(Boolean ifNotExists) {
            if (ifNotExists == null) {
              throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleReferenceTable", "ifNotExists");
            }
            this.ifNotExists = ifNotExists;
            return this;
        }
        @CustomType.Setter
        public Builder sourceKeys(List<String> sourceKeys) {
            if (sourceKeys == null) {
              throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleReferenceTable", "sourceKeys");
            }
            this.sourceKeys = sourceKeys;
            return this;
        }
        public Builder sourceKeys(String... sourceKeys) {
            return sourceKeys(List.of(sourceKeys));
        }
        @CustomType.Setter
        public Builder tableName(String tableName) {
            if (tableName == null) {
              throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleReferenceTable", "tableName");
            }
            this.tableName = tableName;
            return this;
        }
        public GetTagPipelineRulesetRuleReferenceTable build() {
            final var _resultValue = new GetTagPipelineRulesetRuleReferenceTable();
            _resultValue.caseInsensitivity = caseInsensitivity;
            _resultValue.fieldPairs = fieldPairs;
            _resultValue.ifNotExists = ifNotExists;
            _resultValue.sourceKeys = sourceKeys;
            _resultValue.tableName = tableName;
            return _resultValue;
        }
    }
}
