// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.GetIncidentNotificationRuleConditionArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetIncidentNotificationRuleArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetIncidentNotificationRuleArgs Empty = new GetIncidentNotificationRuleArgs();

    /**
     * The conditions that trigger this notification rule.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<GetIncidentNotificationRuleConditionArgs>> conditions;

    /**
     * @return The conditions that trigger this notification rule.
     * 
     */
    public Optional<Output<List<GetIncidentNotificationRuleConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * The ID of the incident notification rule.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The ID of the incident notification rule.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    private GetIncidentNotificationRuleArgs() {}

    private GetIncidentNotificationRuleArgs(GetIncidentNotificationRuleArgs $) {
        this.conditions = $.conditions;
        this.id = $.id;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetIncidentNotificationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetIncidentNotificationRuleArgs $;

        public Builder() {
            $ = new GetIncidentNotificationRuleArgs();
        }

        public Builder(GetIncidentNotificationRuleArgs defaults) {
            $ = new GetIncidentNotificationRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditions The conditions that trigger this notification rule.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<GetIncidentNotificationRuleConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions The conditions that trigger this notification rule.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<GetIncidentNotificationRuleConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions The conditions that trigger this notification rule.
         * 
         * @return builder
         * 
         */
        public Builder conditions(GetIncidentNotificationRuleConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param id The ID of the incident notification rule.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the incident notification rule.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        public GetIncidentNotificationRuleArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetIncidentNotificationRuleArgs", "id");
            }
            return $;
        }
    }

}
