// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionArgs;
import com.pulumi.datadog.inputs.DashboardWidgetSplitGraphDefinitionSplitConfigArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetSplitGraphDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetSplitGraphDefinitionArgs Empty = new DashboardWidgetSplitGraphDefinitionArgs();

    /**
     * Normalize y axes across graphs.
     * 
     */
    @Import(name="hasUniformYAxes")
    private @Nullable Output<Boolean> hasUniformYAxes;

    /**
     * @return Normalize y axes across graphs.
     * 
     */
    public Optional<Output<Boolean>> hasUniformYAxes() {
        return Optional.ofNullable(this.hasUniformYAxes);
    }

    /**
     * The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
     * 
     */
    @Import(name="liveSpan")
    private @Nullable Output<String> liveSpan;

    /**
     * @return The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
     * 
     */
    public Optional<Output<String>> liveSpan() {
        return Optional.ofNullable(this.liveSpan);
    }

    /**
     * The query used to size the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
     * 
     */
    @Import(name="size", required=true)
    private Output<String> size;

    /**
     * @return The query used to size the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
     * 
     */
    public Output<String> size() {
        return this.size;
    }

    /**
     * The original widget we are splitting on.
     * 
     */
    @Import(name="sourceWidgetDefinition", required=true)
    private Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionArgs> sourceWidgetDefinition;

    /**
     * @return The original widget we are splitting on.
     * 
     */
    public Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionArgs> sourceWidgetDefinition() {
        return this.sourceWidgetDefinition;
    }

    /**
     * Encapsulates all user choices about how to split a graph.
     * 
     */
    @Import(name="splitConfig", required=true)
    private Output<DashboardWidgetSplitGraphDefinitionSplitConfigArgs> splitConfig;

    /**
     * @return Encapsulates all user choices about how to split a graph.
     * 
     */
    public Output<DashboardWidgetSplitGraphDefinitionSplitConfigArgs> splitConfig() {
        return this.splitConfig;
    }

    /**
     * The title of the widget.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return The title of the widget.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    private DashboardWidgetSplitGraphDefinitionArgs() {}

    private DashboardWidgetSplitGraphDefinitionArgs(DashboardWidgetSplitGraphDefinitionArgs $) {
        this.hasUniformYAxes = $.hasUniformYAxes;
        this.liveSpan = $.liveSpan;
        this.size = $.size;
        this.sourceWidgetDefinition = $.sourceWidgetDefinition;
        this.splitConfig = $.splitConfig;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetSplitGraphDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetSplitGraphDefinitionArgs $;

        public Builder() {
            $ = new DashboardWidgetSplitGraphDefinitionArgs();
        }

        public Builder(DashboardWidgetSplitGraphDefinitionArgs defaults) {
            $ = new DashboardWidgetSplitGraphDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hasUniformYAxes Normalize y axes across graphs.
         * 
         * @return builder
         * 
         */
        public Builder hasUniformYAxes(@Nullable Output<Boolean> hasUniformYAxes) {
            $.hasUniformYAxes = hasUniformYAxes;
            return this;
        }

        /**
         * @param hasUniformYAxes Normalize y axes across graphs.
         * 
         * @return builder
         * 
         */
        public Builder hasUniformYAxes(Boolean hasUniformYAxes) {
            return hasUniformYAxes(Output.of(hasUniformYAxes));
        }

        /**
         * @param liveSpan The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
         * 
         * @return builder
         * 
         */
        public Builder liveSpan(@Nullable Output<String> liveSpan) {
            $.liveSpan = liveSpan;
            return this;
        }

        /**
         * @param liveSpan The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
         * 
         * @return builder
         * 
         */
        public Builder liveSpan(String liveSpan) {
            return liveSpan(Output.of(liveSpan));
        }

        /**
         * @param size The query used to size the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
         * 
         * @return builder
         * 
         */
        public Builder size(Output<String> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The query used to size the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
         * 
         * @return builder
         * 
         */
        public Builder size(String size) {
            return size(Output.of(size));
        }

        /**
         * @param sourceWidgetDefinition The original widget we are splitting on.
         * 
         * @return builder
         * 
         */
        public Builder sourceWidgetDefinition(Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionArgs> sourceWidgetDefinition) {
            $.sourceWidgetDefinition = sourceWidgetDefinition;
            return this;
        }

        /**
         * @param sourceWidgetDefinition The original widget we are splitting on.
         * 
         * @return builder
         * 
         */
        public Builder sourceWidgetDefinition(DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionArgs sourceWidgetDefinition) {
            return sourceWidgetDefinition(Output.of(sourceWidgetDefinition));
        }

        /**
         * @param splitConfig Encapsulates all user choices about how to split a graph.
         * 
         * @return builder
         * 
         */
        public Builder splitConfig(Output<DashboardWidgetSplitGraphDefinitionSplitConfigArgs> splitConfig) {
            $.splitConfig = splitConfig;
            return this;
        }

        /**
         * @param splitConfig Encapsulates all user choices about how to split a graph.
         * 
         * @return builder
         * 
         */
        public Builder splitConfig(DashboardWidgetSplitGraphDefinitionSplitConfigArgs splitConfig) {
            return splitConfig(Output.of(splitConfig));
        }

        /**
         * @param title The title of the widget.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The title of the widget.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public DashboardWidgetSplitGraphDefinitionArgs build() {
            if ($.size == null) {
                throw new MissingRequiredPropertyException("DashboardWidgetSplitGraphDefinitionArgs", "size");
            }
            if ($.sourceWidgetDefinition == null) {
                throw new MissingRequiredPropertyException("DashboardWidgetSplitGraphDefinitionArgs", "sourceWidgetDefinition");
            }
            if ($.splitConfig == null) {
                throw new MissingRequiredPropertyException("DashboardWidgetSplitGraphDefinitionArgs", "splitConfig");
            }
            return $;
        }
    }

}
