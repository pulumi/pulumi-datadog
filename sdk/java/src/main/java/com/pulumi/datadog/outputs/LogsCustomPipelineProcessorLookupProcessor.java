// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LogsCustomPipelineProcessorLookupProcessor {
    /**
     * @return Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
     * 
     */
    private @Nullable String defaultLookup;
    /**
     * @return Boolean value to enable your pipeline.
     * 
     */
    private @Nullable Boolean isEnabled;
    /**
     * @return List of entries of the lookup table using `key,value` format.
     * 
     */
    private List<String> lookupTables;
    /**
     * @return Your pipeline name.
     * 
     */
    private @Nullable String name;
    /**
     * @return Name of the log attribute to parse.
     * 
     */
    private String source;
    /**
     * @return Name of the attribute that contains the result of the arithmetic operation.
     * 
     */
    private String target;

    private LogsCustomPipelineProcessorLookupProcessor() {}
    /**
     * @return Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
     * 
     */
    public Optional<String> defaultLookup() {
        return Optional.ofNullable(this.defaultLookup);
    }
    /**
     * @return Boolean value to enable your pipeline.
     * 
     */
    public Optional<Boolean> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }
    /**
     * @return List of entries of the lookup table using `key,value` format.
     * 
     */
    public List<String> lookupTables() {
        return this.lookupTables;
    }
    /**
     * @return Your pipeline name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Name of the log attribute to parse.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return Name of the attribute that contains the result of the arithmetic operation.
     * 
     */
    public String target() {
        return this.target;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogsCustomPipelineProcessorLookupProcessor defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String defaultLookup;
        private @Nullable Boolean isEnabled;
        private List<String> lookupTables;
        private @Nullable String name;
        private String source;
        private String target;
        public Builder() {}
        public Builder(LogsCustomPipelineProcessorLookupProcessor defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultLookup = defaults.defaultLookup;
    	      this.isEnabled = defaults.isEnabled;
    	      this.lookupTables = defaults.lookupTables;
    	      this.name = defaults.name;
    	      this.source = defaults.source;
    	      this.target = defaults.target;
        }

        @CustomType.Setter
        public Builder defaultLookup(@Nullable String defaultLookup) {
            this.defaultLookup = defaultLookup;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(@Nullable Boolean isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder lookupTables(List<String> lookupTables) {
            this.lookupTables = Objects.requireNonNull(lookupTables);
            return this;
        }
        public Builder lookupTables(String... lookupTables) {
            return lookupTables(List.of(lookupTables));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }
        @CustomType.Setter
        public Builder target(String target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }
        public LogsCustomPipelineProcessorLookupProcessor build() {
            final var _resultValue = new LogsCustomPipelineProcessorLookupProcessor();
            _resultValue.defaultLookup = defaultLookup;
            _resultValue.isEnabled = isEnabled;
            _resultValue.lookupTables = lookupTables;
            _resultValue.name = name;
            _resultValue.source = source;
            _resultValue.target = target;
            return _resultValue;
        }
    }
}
