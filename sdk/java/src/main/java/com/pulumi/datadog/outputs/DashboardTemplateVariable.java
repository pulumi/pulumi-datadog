// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardTemplateVariable {
    /**
     * @return The list of values that the template variable drop-down is be limited to
     * 
     */
    private @Nullable List<String> availableValues;
    /**
     * @return The default value for the template variable on dashboard load. Cannot be used in conjunction with `defaults`. **Deprecated.** Use `defaults` instead.
     * 
     * @deprecated
     * Use `defaults` instead.
     * 
     */
    @Deprecated /* Use `defaults` instead. */
    private @Nullable String default_;
    /**
     * @return One or many default values for template variables on load. If more than one default is specified, they will be unioned together with `OR`. Cannot be used in conjunction with `default`.
     * 
     */
    private @Nullable List<String> defaults;
    /**
     * @return The name of the variable.
     * 
     */
    private String name;
    /**
     * @return The tag prefix associated with the variable. Only tags with this prefix appear in the variable dropdown.
     * 
     */
    private @Nullable String prefix;

    private DashboardTemplateVariable() {}
    /**
     * @return The list of values that the template variable drop-down is be limited to
     * 
     */
    public List<String> availableValues() {
        return this.availableValues == null ? List.of() : this.availableValues;
    }
    /**
     * @return The default value for the template variable on dashboard load. Cannot be used in conjunction with `defaults`. **Deprecated.** Use `defaults` instead.
     * 
     * @deprecated
     * Use `defaults` instead.
     * 
     */
    @Deprecated /* Use `defaults` instead. */
    public Optional<String> default_() {
        return Optional.ofNullable(this.default_);
    }
    /**
     * @return One or many default values for template variables on load. If more than one default is specified, they will be unioned together with `OR`. Cannot be used in conjunction with `default`.
     * 
     */
    public List<String> defaults() {
        return this.defaults == null ? List.of() : this.defaults;
    }
    /**
     * @return The name of the variable.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The tag prefix associated with the variable. Only tags with this prefix appear in the variable dropdown.
     * 
     */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardTemplateVariable defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> availableValues;
        private @Nullable String default_;
        private @Nullable List<String> defaults;
        private String name;
        private @Nullable String prefix;
        public Builder() {}
        public Builder(DashboardTemplateVariable defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableValues = defaults.availableValues;
    	      this.default_ = defaults.default_;
    	      this.defaults = defaults.defaults;
    	      this.name = defaults.name;
    	      this.prefix = defaults.prefix;
        }

        @CustomType.Setter
        public Builder availableValues(@Nullable List<String> availableValues) {
            this.availableValues = availableValues;
            return this;
        }
        public Builder availableValues(String... availableValues) {
            return availableValues(List.of(availableValues));
        }
        @CustomType.Setter("default")
        public Builder default_(@Nullable String default_) {
            this.default_ = default_;
            return this;
        }
        @CustomType.Setter
        public Builder defaults(@Nullable List<String> defaults) {
            this.defaults = defaults;
            return this;
        }
        public Builder defaults(String... defaults) {
            return defaults(List.of(defaults));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }
        public DashboardTemplateVariable build() {
            final var _resultValue = new DashboardTemplateVariable();
            _resultValue.availableValues = availableValues;
            _resultValue.default_ = default_;
            _resultValue.defaults = defaults;
            _resultValue.name = name;
            _resultValue.prefix = prefix;
            return _resultValue;
        }
    }
}
