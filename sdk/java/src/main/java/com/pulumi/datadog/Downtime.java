// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.datadog.DowntimeArgs;
import com.pulumi.datadog.Utilities;
import com.pulumi.datadog.inputs.DowntimeState;
import com.pulumi.datadog.outputs.DowntimeRecurrence;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Datadog downtime resource. This can be used to create and manage Datadog downtimes.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.datadog.Downtime;
 * import com.pulumi.datadog.DowntimeArgs;
 * import com.pulumi.datadog.inputs.DowntimeRecurrenceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new Downtime(&#34;foo&#34;, DowntimeArgs.builder()        
 *             .end(1483365600)
 *             .recurrence(DowntimeRecurrenceArgs.builder()
 *                 .period(1)
 *                 .type(&#34;days&#34;)
 *                 .build())
 *             .scopes(&#34;*&#34;)
 *             .start(1483308000)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import datadog:index/downtime:Downtime bytes_received_localhost 2081
 * ```
 * 
 */
@ResourceType(type="datadog:index/downtime:Downtime")
public class Downtime extends com.pulumi.resources.CustomResource {
    /**
     * When true indicates this downtime is being actively applied
     * 
     */
    @Export(name="active", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> active;

    /**
     * @return When true indicates this downtime is being actively applied
     * 
     */
    public Output<Boolean> active() {
        return this.active;
    }
    /**
     * The id corresponding to the downtime object definition of the active child for the original parent recurring downtime. This field will only exist on recurring downtimes.
     * 
     */
    @Export(name="activeChildId", refs={Integer.class}, tree="[0]")
    private Output<Integer> activeChildId;

    /**
     * @return The id corresponding to the downtime object definition of the active child for the original parent recurring downtime. This field will only exist on recurring downtimes.
     * 
     */
    public Output<Integer> activeChildId() {
        return this.activeChildId;
    }
    /**
     * When true indicates this downtime is not being applied
     * 
     */
    @Export(name="disabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> disabled;

    /**
     * @return When true indicates this downtime is not being applied
     * 
     */
    public Output<Boolean> disabled() {
        return this.disabled;
    }
    /**
     * Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
     * 
     */
    @Export(name="end", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> end;

    /**
     * @return Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
     * 
     */
    public Output<Optional<Integer>> end() {
        return Codegen.optional(this.end);
    }
    /**
     * String representing date and time to end the downtime in RFC3339 format.
     * 
     */
    @Export(name="endDate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> endDate;

    /**
     * @return String representing date and time to end the downtime in RFC3339 format.
     * 
     */
    public Output<Optional<String>> endDate() {
        return Codegen.optional(this.endDate);
    }
    /**
     * An optional message to provide when creating the downtime, can include notification handles
     * 
     */
    @Export(name="message", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> message;

    /**
     * @return An optional message to provide when creating the downtime, can include notification handles
     * 
     */
    public Output<Optional<String>> message() {
        return Codegen.optional(this.message);
    }
    /**
     * When specified, this downtime will only apply to this monitor
     * 
     */
    @Export(name="monitorId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> monitorId;

    /**
     * @return When specified, this downtime will only apply to this monitor
     * 
     */
    public Output<Optional<Integer>> monitorId() {
        return Codegen.optional(this.monitorId);
    }
    /**
     * A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
     * 
     */
    @Export(name="monitorTags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> monitorTags;

    /**
     * @return A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
     * 
     */
    public Output<Optional<List<String>>> monitorTags() {
        return Codegen.optional(this.monitorTags);
    }
    /**
     * When true the first recovery notification during the downtime will be muted
     * 
     */
    @Export(name="muteFirstRecoveryNotification", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> muteFirstRecoveryNotification;

    /**
     * @return When true the first recovery notification during the downtime will be muted
     * 
     */
    public Output<Optional<Boolean>> muteFirstRecoveryNotification() {
        return Codegen.optional(this.muteFirstRecoveryNotification);
    }
    /**
     * Optional recurring schedule for this downtime
     * 
     */
    @Export(name="recurrence", refs={DowntimeRecurrence.class}, tree="[0]")
    private Output</* @Nullable */ DowntimeRecurrence> recurrence;

    /**
     * @return Optional recurring schedule for this downtime
     * 
     */
    public Output<Optional<DowntimeRecurrence>> recurrence() {
        return Codegen.optional(this.recurrence);
    }
    /**
     * specify the group scope to which this downtime applies. For everything use &#39;*&#39;
     * 
     */
    @Export(name="scopes", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> scopes;

    /**
     * @return specify the group scope to which this downtime applies. For everything use &#39;*&#39;
     * 
     */
    public Output<List<String>> scopes() {
        return this.scopes;
    }
    /**
     * Specify when this downtime should start. Accepts a Unix timestamp in UTC.
     * 
     */
    @Export(name="start", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> start;

    /**
     * @return Specify when this downtime should start. Accepts a Unix timestamp in UTC.
     * 
     */
    public Output<Optional<Integer>> start() {
        return Codegen.optional(this.start);
    }
    /**
     * String representing date and time to start the downtime in RFC3339 format.
     * 
     */
    @Export(name="startDate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> startDate;

    /**
     * @return String representing date and time to start the downtime in RFC3339 format.
     * 
     */
    public Output<Optional<String>> startDate() {
        return Codegen.optional(this.startDate);
    }
    /**
     * The timezone for the downtime, default UTC. Follows IANA timezone database identifiers.
     * 
     */
    @Export(name="timezone", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timezone;

    /**
     * @return The timezone for the downtime, default UTC. Follows IANA timezone database identifiers.
     * 
     */
    public Output<Optional<String>> timezone() {
        return Codegen.optional(this.timezone);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Downtime(String name) {
        this(name, DowntimeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Downtime(String name, DowntimeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Downtime(String name, DowntimeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("datadog:index/downtime:Downtime", name, args == null ? DowntimeArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Downtime(String name, Output<String> id, @Nullable DowntimeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("datadog:index/downtime:Downtime", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Downtime get(String name, Output<String> id, @Nullable DowntimeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Downtime(name, id, state, options);
    }
}
