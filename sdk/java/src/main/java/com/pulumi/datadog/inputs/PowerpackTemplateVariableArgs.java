// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PowerpackTemplateVariableArgs extends com.pulumi.resources.ResourceArgs {

    public static final PowerpackTemplateVariableArgs Empty = new PowerpackTemplateVariableArgs();

    /**
     * One or many default values for powerpack template variables on load. If more than one default is specified, they will be unioned together with `OR`.
     * 
     */
    @Import(name="defaults")
    private @Nullable Output<List<String>> defaults;

    /**
     * @return One or many default values for powerpack template variables on load. If more than one default is specified, they will be unioned together with `OR`.
     * 
     */
    public Optional<Output<List<String>>> defaults() {
        return Optional.ofNullable(this.defaults);
    }

    /**
     * The name of the powerpack template variable.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the powerpack template variable.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private PowerpackTemplateVariableArgs() {}

    private PowerpackTemplateVariableArgs(PowerpackTemplateVariableArgs $) {
        this.defaults = $.defaults;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PowerpackTemplateVariableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PowerpackTemplateVariableArgs $;

        public Builder() {
            $ = new PowerpackTemplateVariableArgs();
        }

        public Builder(PowerpackTemplateVariableArgs defaults) {
            $ = new PowerpackTemplateVariableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaults One or many default values for powerpack template variables on load. If more than one default is specified, they will be unioned together with `OR`.
         * 
         * @return builder
         * 
         */
        public Builder defaults(@Nullable Output<List<String>> defaults) {
            $.defaults = defaults;
            return this;
        }

        /**
         * @param defaults One or many default values for powerpack template variables on load. If more than one default is specified, they will be unioned together with `OR`.
         * 
         * @return builder
         * 
         */
        public Builder defaults(List<String> defaults) {
            return defaults(Output.of(defaults));
        }

        /**
         * @param defaults One or many default values for powerpack template variables on load. If more than one default is specified, they will be unioned together with `OR`.
         * 
         * @return builder
         * 
         */
        public Builder defaults(String... defaults) {
            return defaults(List.of(defaults));
        }

        /**
         * @param name The name of the powerpack template variable.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the powerpack template variable.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public PowerpackTemplateVariableArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("PowerpackTemplateVariableArgs", "name");
            }
            return $;
        }
    }

}
