// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetServiceLevelObjectiveResult {
    /**
     * @return A SLO ID to limit the search.
     * 
     */
    private @Nullable String id;
    /**
     * @return Filter results based on SLO numerator and denominator.
     * 
     */
    private @Nullable String metricsQuery;
    /**
     * @return Name of the Datadog service level objective
     * 
     */
    private String name;
    /**
     * @return Filter results based on SLO names.
     * 
     */
    private @Nullable String nameQuery;
    /**
     * @return Filter results based on a single SLO tag.
     * 
     */
    private @Nullable String tagsQuery;
    /**
     * @return The type of the service level objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/service-level-objectives/#create-a-slo-object). Available values are: `metric` and `monitor`.
     * 
     */
    private String type;

    private GetServiceLevelObjectiveResult() {}
    /**
     * @return A SLO ID to limit the search.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Filter results based on SLO numerator and denominator.
     * 
     */
    public Optional<String> metricsQuery() {
        return Optional.ofNullable(this.metricsQuery);
    }
    /**
     * @return Name of the Datadog service level objective
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Filter results based on SLO names.
     * 
     */
    public Optional<String> nameQuery() {
        return Optional.ofNullable(this.nameQuery);
    }
    /**
     * @return Filter results based on a single SLO tag.
     * 
     */
    public Optional<String> tagsQuery() {
        return Optional.ofNullable(this.tagsQuery);
    }
    /**
     * @return The type of the service level objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/service-level-objectives/#create-a-slo-object). Available values are: `metric` and `monitor`.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceLevelObjectiveResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String id;
        private @Nullable String metricsQuery;
        private String name;
        private @Nullable String nameQuery;
        private @Nullable String tagsQuery;
        private String type;
        public Builder() {}
        public Builder(GetServiceLevelObjectiveResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.metricsQuery = defaults.metricsQuery;
    	      this.name = defaults.name;
    	      this.nameQuery = defaults.nameQuery;
    	      this.tagsQuery = defaults.tagsQuery;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder metricsQuery(@Nullable String metricsQuery) {
            this.metricsQuery = metricsQuery;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nameQuery(@Nullable String nameQuery) {
            this.nameQuery = nameQuery;
            return this;
        }
        @CustomType.Setter
        public Builder tagsQuery(@Nullable String tagsQuery) {
            this.tagsQuery = tagsQuery;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetServiceLevelObjectiveResult build() {
            final var o = new GetServiceLevelObjectiveResult();
            o.id = id;
            o.metricsQuery = metricsQuery;
            o.name = name;
            o.nameQuery = nameQuery;
            o.tagsQuery = tagsQuery;
            o.type = type;
            return o;
        }
    }
}
