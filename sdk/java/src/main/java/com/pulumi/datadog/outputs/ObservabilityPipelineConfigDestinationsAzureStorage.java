// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ObservabilityPipelineConfigDestinationsAzureStorage {
    /**
     * @return Optional prefix for blobs written to the container.
     * 
     */
    private @Nullable String blobPrefix;
    /**
     * @return The name of the Azure Blob Storage container to store logs in.
     * 
     */
    private String containerName;
    /**
     * @return The unique identifier for this component.
     * 
     */
    private String id;
    /**
     * @return A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    private List<String> inputs;

    private ObservabilityPipelineConfigDestinationsAzureStorage() {}
    /**
     * @return Optional prefix for blobs written to the container.
     * 
     */
    public Optional<String> blobPrefix() {
        return Optional.ofNullable(this.blobPrefix);
    }
    /**
     * @return The name of the Azure Blob Storage container to store logs in.
     * 
     */
    public String containerName() {
        return this.containerName;
    }
    /**
     * @return The unique identifier for this component.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    public List<String> inputs() {
        return this.inputs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObservabilityPipelineConfigDestinationsAzureStorage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String blobPrefix;
        private String containerName;
        private String id;
        private List<String> inputs;
        public Builder() {}
        public Builder(ObservabilityPipelineConfigDestinationsAzureStorage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blobPrefix = defaults.blobPrefix;
    	      this.containerName = defaults.containerName;
    	      this.id = defaults.id;
    	      this.inputs = defaults.inputs;
        }

        @CustomType.Setter
        public Builder blobPrefix(@Nullable String blobPrefix) {

            this.blobPrefix = blobPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder containerName(String containerName) {
            if (containerName == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsAzureStorage", "containerName");
            }
            this.containerName = containerName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsAzureStorage", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inputs(List<String> inputs) {
            if (inputs == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsAzureStorage", "inputs");
            }
            this.inputs = inputs;
            return this;
        }
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }
        public ObservabilityPipelineConfigDestinationsAzureStorage build() {
            final var _resultValue = new ObservabilityPipelineConfigDestinationsAzureStorage();
            _resultValue.blobPrefix = blobPrefix;
            _resultValue.containerName = containerName;
            _resultValue.id = id;
            _resultValue.inputs = inputs;
            return _resultValue;
        }
    }
}
