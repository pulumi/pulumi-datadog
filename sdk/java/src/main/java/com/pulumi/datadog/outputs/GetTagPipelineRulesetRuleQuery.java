// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.GetTagPipelineRulesetRuleQueryAddition;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTagPipelineRulesetRuleQuery {
    /**
     * @return The addition configuration for the query.
     * 
     */
    private @Nullable GetTagPipelineRulesetRuleQueryAddition addition;
    /**
     * @return Whether the query matching is case insensitive.
     * 
     */
    private Boolean caseInsensitivity;
    /**
     * @return Whether to apply the query only if the key doesn&#39;t exist.
     * 
     */
    private Boolean ifNotExists;
    /**
     * @return The query string.
     * 
     */
    private String query;

    private GetTagPipelineRulesetRuleQuery() {}
    /**
     * @return The addition configuration for the query.
     * 
     */
    public Optional<GetTagPipelineRulesetRuleQueryAddition> addition() {
        return Optional.ofNullable(this.addition);
    }
    /**
     * @return Whether the query matching is case insensitive.
     * 
     */
    public Boolean caseInsensitivity() {
        return this.caseInsensitivity;
    }
    /**
     * @return Whether to apply the query only if the key doesn&#39;t exist.
     * 
     */
    public Boolean ifNotExists() {
        return this.ifNotExists;
    }
    /**
     * @return The query string.
     * 
     */
    public String query() {
        return this.query;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTagPipelineRulesetRuleQuery defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable GetTagPipelineRulesetRuleQueryAddition addition;
        private Boolean caseInsensitivity;
        private Boolean ifNotExists;
        private String query;
        public Builder() {}
        public Builder(GetTagPipelineRulesetRuleQuery defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addition = defaults.addition;
    	      this.caseInsensitivity = defaults.caseInsensitivity;
    	      this.ifNotExists = defaults.ifNotExists;
    	      this.query = defaults.query;
        }

        @CustomType.Setter
        public Builder addition(@Nullable GetTagPipelineRulesetRuleQueryAddition addition) {

            this.addition = addition;
            return this;
        }
        @CustomType.Setter
        public Builder caseInsensitivity(Boolean caseInsensitivity) {
            if (caseInsensitivity == null) {
              throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleQuery", "caseInsensitivity");
            }
            this.caseInsensitivity = caseInsensitivity;
            return this;
        }
        @CustomType.Setter
        public Builder ifNotExists(Boolean ifNotExists) {
            if (ifNotExists == null) {
              throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleQuery", "ifNotExists");
            }
            this.ifNotExists = ifNotExists;
            return this;
        }
        @CustomType.Setter
        public Builder query(String query) {
            if (query == null) {
              throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleQuery", "query");
            }
            this.query = query;
            return this;
        }
        public GetTagPipelineRulesetRuleQuery build() {
            final var _resultValue = new GetTagPipelineRulesetRuleQuery();
            _resultValue.addition = addition;
            _resultValue.caseInsensitivity = caseInsensitivity;
            _resultValue.ifNotExists = ifNotExists;
            _resultValue.query = query;
            return _resultValue;
        }
    }
}
