// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ChildOrganizationApiKeyArgs;
import com.pulumi.datadog.inputs.ChildOrganizationApplicationKeyArgs;
import com.pulumi.datadog.inputs.ChildOrganizationSettingArgs;
import com.pulumi.datadog.inputs.ChildOrganizationUserArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChildOrganizationState extends com.pulumi.resources.ResourceArgs {

    public static final ChildOrganizationState Empty = new ChildOrganizationState();

    /**
     * Datadog API key.
     * 
     */
    @Import(name="apiKeys")
    private @Nullable Output<List<ChildOrganizationApiKeyArgs>> apiKeys;

    /**
     * @return Datadog API key.
     * 
     */
    public Optional<Output<List<ChildOrganizationApiKeyArgs>>> apiKeys() {
        return Optional.ofNullable(this.apiKeys);
    }

    /**
     * An application key with its associated metadata.
     * 
     */
    @Import(name="applicationKeys")
    private @Nullable Output<List<ChildOrganizationApplicationKeyArgs>> applicationKeys;

    /**
     * @return An application key with its associated metadata.
     * 
     */
    public Optional<Output<List<ChildOrganizationApplicationKeyArgs>>> applicationKeys() {
        return Optional.ofNullable(this.applicationKeys);
    }

    /**
     * Description of the organization.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the organization.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name for Child Organization after creation.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name for Child Organization after creation.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The `publicId` of the organization you are operating within.
     * 
     */
    @Import(name="publicId")
    private @Nullable Output<String> publicId;

    /**
     * @return The `publicId` of the organization you are operating within.
     * 
     */
    public Optional<Output<String>> publicId() {
        return Optional.ofNullable(this.publicId);
    }

    /**
     * Organization settings
     * 
     */
    @Import(name="settings")
    private @Nullable Output<List<ChildOrganizationSettingArgs>> settings;

    /**
     * @return Organization settings
     * 
     */
    public Optional<Output<List<ChildOrganizationSettingArgs>>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * Information about a user
     * 
     */
    @Import(name="users")
    private @Nullable Output<List<ChildOrganizationUserArgs>> users;

    /**
     * @return Information about a user
     * 
     */
    public Optional<Output<List<ChildOrganizationUserArgs>>> users() {
        return Optional.ofNullable(this.users);
    }

    private ChildOrganizationState() {}

    private ChildOrganizationState(ChildOrganizationState $) {
        this.apiKeys = $.apiKeys;
        this.applicationKeys = $.applicationKeys;
        this.description = $.description;
        this.name = $.name;
        this.publicId = $.publicId;
        this.settings = $.settings;
        this.users = $.users;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChildOrganizationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChildOrganizationState $;

        public Builder() {
            $ = new ChildOrganizationState();
        }

        public Builder(ChildOrganizationState defaults) {
            $ = new ChildOrganizationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKeys Datadog API key.
         * 
         * @return builder
         * 
         */
        public Builder apiKeys(@Nullable Output<List<ChildOrganizationApiKeyArgs>> apiKeys) {
            $.apiKeys = apiKeys;
            return this;
        }

        /**
         * @param apiKeys Datadog API key.
         * 
         * @return builder
         * 
         */
        public Builder apiKeys(List<ChildOrganizationApiKeyArgs> apiKeys) {
            return apiKeys(Output.of(apiKeys));
        }

        /**
         * @param apiKeys Datadog API key.
         * 
         * @return builder
         * 
         */
        public Builder apiKeys(ChildOrganizationApiKeyArgs... apiKeys) {
            return apiKeys(List.of(apiKeys));
        }

        /**
         * @param applicationKeys An application key with its associated metadata.
         * 
         * @return builder
         * 
         */
        public Builder applicationKeys(@Nullable Output<List<ChildOrganizationApplicationKeyArgs>> applicationKeys) {
            $.applicationKeys = applicationKeys;
            return this;
        }

        /**
         * @param applicationKeys An application key with its associated metadata.
         * 
         * @return builder
         * 
         */
        public Builder applicationKeys(List<ChildOrganizationApplicationKeyArgs> applicationKeys) {
            return applicationKeys(Output.of(applicationKeys));
        }

        /**
         * @param applicationKeys An application key with its associated metadata.
         * 
         * @return builder
         * 
         */
        public Builder applicationKeys(ChildOrganizationApplicationKeyArgs... applicationKeys) {
            return applicationKeys(List.of(applicationKeys));
        }

        /**
         * @param description Description of the organization.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the organization.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name for Child Organization after creation.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name for Child Organization after creation.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param publicId The `publicId` of the organization you are operating within.
         * 
         * @return builder
         * 
         */
        public Builder publicId(@Nullable Output<String> publicId) {
            $.publicId = publicId;
            return this;
        }

        /**
         * @param publicId The `publicId` of the organization you are operating within.
         * 
         * @return builder
         * 
         */
        public Builder publicId(String publicId) {
            return publicId(Output.of(publicId));
        }

        /**
         * @param settings Organization settings
         * 
         * @return builder
         * 
         */
        public Builder settings(@Nullable Output<List<ChildOrganizationSettingArgs>> settings) {
            $.settings = settings;
            return this;
        }

        /**
         * @param settings Organization settings
         * 
         * @return builder
         * 
         */
        public Builder settings(List<ChildOrganizationSettingArgs> settings) {
            return settings(Output.of(settings));
        }

        /**
         * @param settings Organization settings
         * 
         * @return builder
         * 
         */
        public Builder settings(ChildOrganizationSettingArgs... settings) {
            return settings(List.of(settings));
        }

        /**
         * @param users Information about a user
         * 
         * @return builder
         * 
         */
        public Builder users(@Nullable Output<List<ChildOrganizationUserArgs>> users) {
            $.users = users;
            return this;
        }

        /**
         * @param users Information about a user
         * 
         * @return builder
         * 
         */
        public Builder users(List<ChildOrganizationUserArgs> users) {
            return users(Output.of(users));
        }

        /**
         * @param users Information about a user
         * 
         * @return builder
         * 
         */
        public Builder users(ChildOrganizationUserArgs... users) {
            return users(List.of(users));
        }

        public ChildOrganizationState build() {
            return $;
        }
    }

}
