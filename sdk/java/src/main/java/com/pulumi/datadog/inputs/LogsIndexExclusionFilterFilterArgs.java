// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogsIndexExclusionFilterFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogsIndexExclusionFilterFilterArgs Empty = new LogsIndexExclusionFilterFilterArgs();

    /**
     * Only logs matching the filter criteria and the query of the parent index will be considered for this exclusion filter.
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return Only logs matching the filter criteria and the query of the parent index will be considered for this exclusion filter.
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * The fraction of logs excluded by the exclusion filter, when active.
     * 
     */
    @Import(name="sampleRate")
    private @Nullable Output<Double> sampleRate;

    /**
     * @return The fraction of logs excluded by the exclusion filter, when active.
     * 
     */
    public Optional<Output<Double>> sampleRate() {
        return Optional.ofNullable(this.sampleRate);
    }

    private LogsIndexExclusionFilterFilterArgs() {}

    private LogsIndexExclusionFilterFilterArgs(LogsIndexExclusionFilterFilterArgs $) {
        this.query = $.query;
        this.sampleRate = $.sampleRate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogsIndexExclusionFilterFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogsIndexExclusionFilterFilterArgs $;

        public Builder() {
            $ = new LogsIndexExclusionFilterFilterArgs();
        }

        public Builder(LogsIndexExclusionFilterFilterArgs defaults) {
            $ = new LogsIndexExclusionFilterFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param query Only logs matching the filter criteria and the query of the parent index will be considered for this exclusion filter.
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query Only logs matching the filter criteria and the query of the parent index will be considered for this exclusion filter.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param sampleRate The fraction of logs excluded by the exclusion filter, when active.
         * 
         * @return builder
         * 
         */
        public Builder sampleRate(@Nullable Output<Double> sampleRate) {
            $.sampleRate = sampleRate;
            return this;
        }

        /**
         * @param sampleRate The fraction of logs excluded by the exclusion filter, when active.
         * 
         * @return builder
         * 
         */
        public Builder sampleRate(Double sampleRate) {
            return sampleRate(Output.of(sampleRate));
        }

        public LogsIndexExclusionFilterFilterArgs build() {
            return $;
        }
    }

}
