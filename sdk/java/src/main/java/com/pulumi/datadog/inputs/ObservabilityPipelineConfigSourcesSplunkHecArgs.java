// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesSplunkHecTlsArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigSourcesSplunkHecArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigSourcesSplunkHecArgs Empty = new ObservabilityPipelineConfigSourcesSplunkHecArgs();

    /**
     * The unique identifier for this component. Used to reference this component in other parts of the pipeline (e.g., as input to downstream components).
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique identifier for this component. Used to reference this component in other parts of the pipeline (e.g., as input to downstream components).
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    @Import(name="tls")
    private @Nullable Output<ObservabilityPipelineConfigSourcesSplunkHecTlsArgs> tls;

    /**
     * @return Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigSourcesSplunkHecTlsArgs>> tls() {
        return Optional.ofNullable(this.tls);
    }

    private ObservabilityPipelineConfigSourcesSplunkHecArgs() {}

    private ObservabilityPipelineConfigSourcesSplunkHecArgs(ObservabilityPipelineConfigSourcesSplunkHecArgs $) {
        this.id = $.id;
        this.tls = $.tls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigSourcesSplunkHecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigSourcesSplunkHecArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigSourcesSplunkHecArgs();
        }

        public Builder(ObservabilityPipelineConfigSourcesSplunkHecArgs defaults) {
            $ = new ObservabilityPipelineConfigSourcesSplunkHecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The unique identifier for this component. Used to reference this component in other parts of the pipeline (e.g., as input to downstream components).
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier for this component. Used to reference this component in other parts of the pipeline (e.g., as input to downstream components).
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(@Nullable Output<ObservabilityPipelineConfigSourcesSplunkHecTlsArgs> tls) {
            $.tls = tls;
            return this;
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(ObservabilityPipelineConfigSourcesSplunkHecTlsArgs tls) {
            return tls(Output.of(tls));
        }

        public ObservabilityPipelineConfigSourcesSplunkHecArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigSourcesSplunkHecArgs", "id");
            }
            return $;
        }
    }

}
