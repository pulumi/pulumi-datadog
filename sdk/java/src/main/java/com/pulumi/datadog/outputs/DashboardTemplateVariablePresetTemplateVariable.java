// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardTemplateVariablePresetTemplateVariable {
    /**
     * @return The name of the variable.
     * 
     */
    private @Nullable String name;
    /**
     * @return The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
     * 
     * @deprecated
     * Use `values` instead.
     * 
     */
    @Deprecated /* Use `values` instead. */
    private @Nullable String value;
    /**
     * @return One or many template variable values within the saved view, which will be unioned together using `OR` if more than one is specified. Cannot be used in conjunction with `value`.
     * 
     */
    private @Nullable List<String> values;

    private DashboardTemplateVariablePresetTemplateVariable() {}
    /**
     * @return The name of the variable.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
     * 
     * @deprecated
     * Use `values` instead.
     * 
     */
    @Deprecated /* Use `values` instead. */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }
    /**
     * @return One or many template variable values within the saved view, which will be unioned together using `OR` if more than one is specified. Cannot be used in conjunction with `value`.
     * 
     */
    public List<String> values() {
        return this.values == null ? List.of() : this.values;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardTemplateVariablePresetTemplateVariable defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String name;
        private @Nullable String value;
        private @Nullable List<String> values;
        public Builder() {}
        public Builder(DashboardTemplateVariablePresetTemplateVariable defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.value = defaults.value;
    	      this.values = defaults.values;
        }

        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {

            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder values(@Nullable List<String> values) {

            this.values = values;
            return this;
        }
        public Builder values(String... values) {
            return values(List.of(values));
        }
        public DashboardTemplateVariablePresetTemplateVariable build() {
            final var _resultValue = new DashboardTemplateVariablePresetTemplateVariable();
            _resultValue.name = name;
            _resultValue.value = value;
            _resultValue.values = values;
            return _resultValue;
        }
    }
}
