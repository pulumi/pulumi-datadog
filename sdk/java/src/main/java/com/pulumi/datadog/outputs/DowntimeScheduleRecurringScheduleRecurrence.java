// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DowntimeScheduleRecurringScheduleRecurrence {
    /**
     * @return The length of the downtime. Must begin with an integer and end with one of &#39;m&#39;, &#39;h&#39;, d&#39;, or &#39;w&#39;.
     * 
     */
    private String duration;
    /**
     * @return The `RRULE` standard for defining recurring events. For example, to have a recurring event on the first day of each month, set the type to `rrule` and set the `FREQ` to `MONTHLY` and `BYMONTHDAY` to `1`. Most common `rrule` options from the [iCalendar Spec](https://tools.ietf.org/html/rfc5545) are supported.  **Note**: Attributes specifying the duration in `RRULE` are not supported (for example, `DTSTART`, `DTEND`, `DURATION`). More examples available in this [downtime guide](https://docs.datadoghq.com/monitors/guide/suppress-alert-with-downtimes/?tab=api).
     * 
     */
    private String rrule;
    /**
     * @return ISO-8601 Datetime to start the downtime. Must not include a UTC offset. If not provided, the downtime starts the moment it is created.
     * 
     */
    private @Nullable String start;

    private DowntimeScheduleRecurringScheduleRecurrence() {}
    /**
     * @return The length of the downtime. Must begin with an integer and end with one of &#39;m&#39;, &#39;h&#39;, d&#39;, or &#39;w&#39;.
     * 
     */
    public String duration() {
        return this.duration;
    }
    /**
     * @return The `RRULE` standard for defining recurring events. For example, to have a recurring event on the first day of each month, set the type to `rrule` and set the `FREQ` to `MONTHLY` and `BYMONTHDAY` to `1`. Most common `rrule` options from the [iCalendar Spec](https://tools.ietf.org/html/rfc5545) are supported.  **Note**: Attributes specifying the duration in `RRULE` are not supported (for example, `DTSTART`, `DTEND`, `DURATION`). More examples available in this [downtime guide](https://docs.datadoghq.com/monitors/guide/suppress-alert-with-downtimes/?tab=api).
     * 
     */
    public String rrule() {
        return this.rrule;
    }
    /**
     * @return ISO-8601 Datetime to start the downtime. Must not include a UTC offset. If not provided, the downtime starts the moment it is created.
     * 
     */
    public Optional<String> start() {
        return Optional.ofNullable(this.start);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DowntimeScheduleRecurringScheduleRecurrence defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String duration;
        private String rrule;
        private @Nullable String start;
        public Builder() {}
        public Builder(DowntimeScheduleRecurringScheduleRecurrence defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.duration = defaults.duration;
    	      this.rrule = defaults.rrule;
    	      this.start = defaults.start;
        }

        @CustomType.Setter
        public Builder duration(String duration) {
            if (duration == null) {
              throw new MissingRequiredPropertyException("DowntimeScheduleRecurringScheduleRecurrence", "duration");
            }
            this.duration = duration;
            return this;
        }
        @CustomType.Setter
        public Builder rrule(String rrule) {
            if (rrule == null) {
              throw new MissingRequiredPropertyException("DowntimeScheduleRecurringScheduleRecurrence", "rrule");
            }
            this.rrule = rrule;
            return this;
        }
        @CustomType.Setter
        public Builder start(@Nullable String start) {

            this.start = start;
            return this;
        }
        public DowntimeScheduleRecurringScheduleRecurrence build() {
            final var _resultValue = new DowntimeScheduleRecurringScheduleRecurrence();
            _resultValue.duration = duration;
            _resultValue.rrule = rrule;
            _resultValue.start = start;
            return _resultValue;
        }
    }
}
