// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.GetMonitorSchedulingOptionCustomScheduleRecurrence;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMonitorSchedulingOptionCustomSchedule {
    private List<GetMonitorSchedulingOptionCustomScheduleRecurrence> recurrences;

    private GetMonitorSchedulingOptionCustomSchedule() {}
    public List<GetMonitorSchedulingOptionCustomScheduleRecurrence> recurrences() {
        return this.recurrences;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitorSchedulingOptionCustomSchedule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetMonitorSchedulingOptionCustomScheduleRecurrence> recurrences;
        public Builder() {}
        public Builder(GetMonitorSchedulingOptionCustomSchedule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.recurrences = defaults.recurrences;
        }

        @CustomType.Setter
        public Builder recurrences(List<GetMonitorSchedulingOptionCustomScheduleRecurrence> recurrences) {
            if (recurrences == null) {
              throw new MissingRequiredPropertyException("GetMonitorSchedulingOptionCustomSchedule", "recurrences");
            }
            this.recurrences = recurrences;
            return this;
        }
        public Builder recurrences(GetMonitorSchedulingOptionCustomScheduleRecurrence... recurrences) {
            return recurrences(List.of(recurrences));
        }
        public GetMonitorSchedulingOptionCustomSchedule build() {
            final var _resultValue = new GetMonitorSchedulingOptionCustomSchedule();
            _resultValue.recurrences = recurrences;
            return _resultValue;
        }
    }
}
