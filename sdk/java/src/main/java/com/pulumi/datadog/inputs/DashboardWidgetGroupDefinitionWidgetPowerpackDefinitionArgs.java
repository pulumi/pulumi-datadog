// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionTemplateVariablesArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionArgs Empty = new DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionArgs();

    /**
     * The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
     * 
     */
    @Import(name="backgroundColor")
    private @Nullable Output<String> backgroundColor;

    /**
     * @return The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
     * 
     */
    public Optional<Output<String>> backgroundColor() {
        return Optional.ofNullable(this.backgroundColor);
    }

    /**
     * The image URL to display as a banner for the group.
     * 
     */
    @Import(name="bannerImg")
    private @Nullable Output<String> bannerImg;

    /**
     * @return The image URL to display as a banner for the group.
     * 
     */
    public Optional<Output<String>> bannerImg() {
        return Optional.ofNullable(this.bannerImg);
    }

    /**
     * UUID of the associated powerpack.
     * 
     */
    @Import(name="powerpackId", required=true)
    private Output<String> powerpackId;

    /**
     * @return UUID of the associated powerpack.
     * 
     */
    public Output<String> powerpackId() {
        return this.powerpackId;
    }

    /**
     * Whether to show the title or not. Defaults to `true`.
     * 
     */
    @Import(name="showTitle")
    private @Nullable Output<Boolean> showTitle;

    /**
     * @return Whether to show the title or not. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> showTitle() {
        return Optional.ofNullable(this.showTitle);
    }

    /**
     * The list of template variables for this powerpack.
     * 
     */
    @Import(name="templateVariables")
    private @Nullable Output<DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionTemplateVariablesArgs> templateVariables;

    /**
     * @return The list of template variables for this powerpack.
     * 
     */
    public Optional<Output<DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionTemplateVariablesArgs>> templateVariables() {
        return Optional.ofNullable(this.templateVariables);
    }

    /**
     * The title of the widget.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return The title of the widget.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    private DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionArgs() {}

    private DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionArgs(DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionArgs $) {
        this.backgroundColor = $.backgroundColor;
        this.bannerImg = $.bannerImg;
        this.powerpackId = $.powerpackId;
        this.showTitle = $.showTitle;
        this.templateVariables = $.templateVariables;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionArgs $;

        public Builder() {
            $ = new DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionArgs();
        }

        public Builder(DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionArgs defaults) {
            $ = new DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backgroundColor The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
         * 
         * @return builder
         * 
         */
        public Builder backgroundColor(@Nullable Output<String> backgroundColor) {
            $.backgroundColor = backgroundColor;
            return this;
        }

        /**
         * @param backgroundColor The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
         * 
         * @return builder
         * 
         */
        public Builder backgroundColor(String backgroundColor) {
            return backgroundColor(Output.of(backgroundColor));
        }

        /**
         * @param bannerImg The image URL to display as a banner for the group.
         * 
         * @return builder
         * 
         */
        public Builder bannerImg(@Nullable Output<String> bannerImg) {
            $.bannerImg = bannerImg;
            return this;
        }

        /**
         * @param bannerImg The image URL to display as a banner for the group.
         * 
         * @return builder
         * 
         */
        public Builder bannerImg(String bannerImg) {
            return bannerImg(Output.of(bannerImg));
        }

        /**
         * @param powerpackId UUID of the associated powerpack.
         * 
         * @return builder
         * 
         */
        public Builder powerpackId(Output<String> powerpackId) {
            $.powerpackId = powerpackId;
            return this;
        }

        /**
         * @param powerpackId UUID of the associated powerpack.
         * 
         * @return builder
         * 
         */
        public Builder powerpackId(String powerpackId) {
            return powerpackId(Output.of(powerpackId));
        }

        /**
         * @param showTitle Whether to show the title or not. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder showTitle(@Nullable Output<Boolean> showTitle) {
            $.showTitle = showTitle;
            return this;
        }

        /**
         * @param showTitle Whether to show the title or not. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder showTitle(Boolean showTitle) {
            return showTitle(Output.of(showTitle));
        }

        /**
         * @param templateVariables The list of template variables for this powerpack.
         * 
         * @return builder
         * 
         */
        public Builder templateVariables(@Nullable Output<DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionTemplateVariablesArgs> templateVariables) {
            $.templateVariables = templateVariables;
            return this;
        }

        /**
         * @param templateVariables The list of template variables for this powerpack.
         * 
         * @return builder
         * 
         */
        public Builder templateVariables(DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionTemplateVariablesArgs templateVariables) {
            return templateVariables(Output.of(templateVariables));
        }

        /**
         * @param title The title of the widget.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The title of the widget.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionArgs build() {
            if ($.powerpackId == null) {
                throw new MissingRequiredPropertyException("DashboardWidgetGroupDefinitionWidgetPowerpackDefinitionArgs", "powerpackId");
            }
            return $;
        }
    }

}
