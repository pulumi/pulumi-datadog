// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.SecurityMonitoringRuleCaseArgs;
import com.pulumi.datadog.inputs.SecurityMonitoringRuleFilterArgs;
import com.pulumi.datadog.inputs.SecurityMonitoringRuleOptionsArgs;
import com.pulumi.datadog.inputs.SecurityMonitoringRuleQueryArgs;
import com.pulumi.datadog.inputs.SecurityMonitoringRuleSignalQueryArgs;
import com.pulumi.datadog.inputs.SecurityMonitoringRuleThirdPartyCaseArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityMonitoringRuleState extends com.pulumi.resources.ResourceArgs {

    public static final SecurityMonitoringRuleState Empty = new SecurityMonitoringRuleState();

    /**
     * Cases for generating signals.
     * 
     */
    @Import(name="cases")
    private @Nullable Output<List<SecurityMonitoringRuleCaseArgs>> cases;

    /**
     * @return Cases for generating signals.
     * 
     */
    public Optional<Output<List<SecurityMonitoringRuleCaseArgs>>> cases() {
        return Optional.ofNullable(this.cases);
    }

    /**
     * Whether the rule is enabled. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the rule is enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Additional queries to filter matched events before they are processed. **Note**: This field is deprecated for log detection, signal correlation, and workload security rules.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<SecurityMonitoringRuleFilterArgs>> filters;

    /**
     * @return Additional queries to filter matched events before they are processed. **Note**: This field is deprecated for log detection, signal correlation, and workload security rules.
     * 
     */
    public Optional<Output<List<SecurityMonitoringRuleFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Whether the notifications include the triggering group-by values in their title. Defaults to `false`.
     * 
     */
    @Import(name="hasExtendedTitle")
    private @Nullable Output<Boolean> hasExtendedTitle;

    /**
     * @return Whether the notifications include the triggering group-by values in their title. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> hasExtendedTitle() {
        return Optional.ofNullable(this.hasExtendedTitle);
    }

    /**
     * Message for generated signals.
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return Message for generated signals.
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * The name of the rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Options on rules.
     * 
     */
    @Import(name="options")
    private @Nullable Output<SecurityMonitoringRuleOptionsArgs> options;

    /**
     * @return Options on rules.
     * 
     */
    public Optional<Output<SecurityMonitoringRuleOptionsArgs>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * Queries for selecting logs which are part of the rule.
     * 
     */
    @Import(name="queries")
    private @Nullable Output<List<SecurityMonitoringRuleQueryArgs>> queries;

    /**
     * @return Queries for selecting logs which are part of the rule.
     * 
     */
    public Optional<Output<List<SecurityMonitoringRuleQueryArgs>>> queries() {
        return Optional.ofNullable(this.queries);
    }

    /**
     * Queries for selecting logs which are part of the rule.
     * 
     */
    @Import(name="signalQueries")
    private @Nullable Output<List<SecurityMonitoringRuleSignalQueryArgs>> signalQueries;

    /**
     * @return Queries for selecting logs which are part of the rule.
     * 
     */
    public Optional<Output<List<SecurityMonitoringRuleSignalQueryArgs>>> signalQueries() {
        return Optional.ofNullable(this.signalQueries);
    }

    /**
     * Tags for generated signals.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags for generated signals.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Cases for generating signals for third-party rules. Only required and accepted for third-party rules
     * 
     */
    @Import(name="thirdPartyCases")
    private @Nullable Output<List<SecurityMonitoringRuleThirdPartyCaseArgs>> thirdPartyCases;

    /**
     * @return Cases for generating signals for third-party rules. Only required and accepted for third-party rules
     * 
     */
    public Optional<Output<List<SecurityMonitoringRuleThirdPartyCaseArgs>>> thirdPartyCases() {
        return Optional.ofNullable(this.thirdPartyCases);
    }

    /**
     * The rule type. Valid values are `application_security`, `log_detection`, `workload_security`, `signal_correlation`. Defaults to `&#34;log_detection&#34;`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The rule type. Valid values are `application_security`, `log_detection`, `workload_security`, `signal_correlation`. Defaults to `&#34;log_detection&#34;`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Whether or not to validate the Rule.
     * 
     */
    @Import(name="validate")
    private @Nullable Output<Boolean> validate;

    /**
     * @return Whether or not to validate the Rule.
     * 
     */
    public Optional<Output<Boolean>> validate() {
        return Optional.ofNullable(this.validate);
    }

    private SecurityMonitoringRuleState() {}

    private SecurityMonitoringRuleState(SecurityMonitoringRuleState $) {
        this.cases = $.cases;
        this.enabled = $.enabled;
        this.filters = $.filters;
        this.hasExtendedTitle = $.hasExtendedTitle;
        this.message = $.message;
        this.name = $.name;
        this.options = $.options;
        this.queries = $.queries;
        this.signalQueries = $.signalQueries;
        this.tags = $.tags;
        this.thirdPartyCases = $.thirdPartyCases;
        this.type = $.type;
        this.validate = $.validate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityMonitoringRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityMonitoringRuleState $;

        public Builder() {
            $ = new SecurityMonitoringRuleState();
        }

        public Builder(SecurityMonitoringRuleState defaults) {
            $ = new SecurityMonitoringRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cases Cases for generating signals.
         * 
         * @return builder
         * 
         */
        public Builder cases(@Nullable Output<List<SecurityMonitoringRuleCaseArgs>> cases) {
            $.cases = cases;
            return this;
        }

        /**
         * @param cases Cases for generating signals.
         * 
         * @return builder
         * 
         */
        public Builder cases(List<SecurityMonitoringRuleCaseArgs> cases) {
            return cases(Output.of(cases));
        }

        /**
         * @param cases Cases for generating signals.
         * 
         * @return builder
         * 
         */
        public Builder cases(SecurityMonitoringRuleCaseArgs... cases) {
            return cases(List.of(cases));
        }

        /**
         * @param enabled Whether the rule is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the rule is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param filters Additional queries to filter matched events before they are processed. **Note**: This field is deprecated for log detection, signal correlation, and workload security rules.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<SecurityMonitoringRuleFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Additional queries to filter matched events before they are processed. **Note**: This field is deprecated for log detection, signal correlation, and workload security rules.
         * 
         * @return builder
         * 
         */
        public Builder filters(List<SecurityMonitoringRuleFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters Additional queries to filter matched events before they are processed. **Note**: This field is deprecated for log detection, signal correlation, and workload security rules.
         * 
         * @return builder
         * 
         */
        public Builder filters(SecurityMonitoringRuleFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param hasExtendedTitle Whether the notifications include the triggering group-by values in their title. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder hasExtendedTitle(@Nullable Output<Boolean> hasExtendedTitle) {
            $.hasExtendedTitle = hasExtendedTitle;
            return this;
        }

        /**
         * @param hasExtendedTitle Whether the notifications include the triggering group-by values in their title. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder hasExtendedTitle(Boolean hasExtendedTitle) {
            return hasExtendedTitle(Output.of(hasExtendedTitle));
        }

        /**
         * @param message Message for generated signals.
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message Message for generated signals.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param name The name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param options Options on rules.
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<SecurityMonitoringRuleOptionsArgs> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options Options on rules.
         * 
         * @return builder
         * 
         */
        public Builder options(SecurityMonitoringRuleOptionsArgs options) {
            return options(Output.of(options));
        }

        /**
         * @param queries Queries for selecting logs which are part of the rule.
         * 
         * @return builder
         * 
         */
        public Builder queries(@Nullable Output<List<SecurityMonitoringRuleQueryArgs>> queries) {
            $.queries = queries;
            return this;
        }

        /**
         * @param queries Queries for selecting logs which are part of the rule.
         * 
         * @return builder
         * 
         */
        public Builder queries(List<SecurityMonitoringRuleQueryArgs> queries) {
            return queries(Output.of(queries));
        }

        /**
         * @param queries Queries for selecting logs which are part of the rule.
         * 
         * @return builder
         * 
         */
        public Builder queries(SecurityMonitoringRuleQueryArgs... queries) {
            return queries(List.of(queries));
        }

        /**
         * @param signalQueries Queries for selecting logs which are part of the rule.
         * 
         * @return builder
         * 
         */
        public Builder signalQueries(@Nullable Output<List<SecurityMonitoringRuleSignalQueryArgs>> signalQueries) {
            $.signalQueries = signalQueries;
            return this;
        }

        /**
         * @param signalQueries Queries for selecting logs which are part of the rule.
         * 
         * @return builder
         * 
         */
        public Builder signalQueries(List<SecurityMonitoringRuleSignalQueryArgs> signalQueries) {
            return signalQueries(Output.of(signalQueries));
        }

        /**
         * @param signalQueries Queries for selecting logs which are part of the rule.
         * 
         * @return builder
         * 
         */
        public Builder signalQueries(SecurityMonitoringRuleSignalQueryArgs... signalQueries) {
            return signalQueries(List.of(signalQueries));
        }

        /**
         * @param tags Tags for generated signals.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags for generated signals.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags for generated signals.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param thirdPartyCases Cases for generating signals for third-party rules. Only required and accepted for third-party rules
         * 
         * @return builder
         * 
         */
        public Builder thirdPartyCases(@Nullable Output<List<SecurityMonitoringRuleThirdPartyCaseArgs>> thirdPartyCases) {
            $.thirdPartyCases = thirdPartyCases;
            return this;
        }

        /**
         * @param thirdPartyCases Cases for generating signals for third-party rules. Only required and accepted for third-party rules
         * 
         * @return builder
         * 
         */
        public Builder thirdPartyCases(List<SecurityMonitoringRuleThirdPartyCaseArgs> thirdPartyCases) {
            return thirdPartyCases(Output.of(thirdPartyCases));
        }

        /**
         * @param thirdPartyCases Cases for generating signals for third-party rules. Only required and accepted for third-party rules
         * 
         * @return builder
         * 
         */
        public Builder thirdPartyCases(SecurityMonitoringRuleThirdPartyCaseArgs... thirdPartyCases) {
            return thirdPartyCases(List.of(thirdPartyCases));
        }

        /**
         * @param type The rule type. Valid values are `application_security`, `log_detection`, `workload_security`, `signal_correlation`. Defaults to `&#34;log_detection&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The rule type. Valid values are `application_security`, `log_detection`, `workload_security`, `signal_correlation`. Defaults to `&#34;log_detection&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param validate Whether or not to validate the Rule.
         * 
         * @return builder
         * 
         */
        public Builder validate(@Nullable Output<Boolean> validate) {
            $.validate = validate;
            return this;
        }

        /**
         * @param validate Whether or not to validate the Rule.
         * 
         * @return builder
         * 
         */
        public Builder validate(Boolean validate) {
            return validate(Output.of(validate));
        }

        public SecurityMonitoringRuleState build() {
            return $;
        }
    }

}
