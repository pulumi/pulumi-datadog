// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.SyntheticsGlobalVariableParseTestOptionsParserArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticsGlobalVariableParseTestOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticsGlobalVariableParseTestOptionsArgs Empty = new SyntheticsGlobalVariableParseTestOptionsArgs();

    /**
     * Required when type = `http_header`. Defines the header to use to extract the value
     * 
     */
    @Import(name="field")
    private @Nullable Output<String> field;

    /**
     * @return Required when type = `http_header`. Defines the header to use to extract the value
     * 
     */
    public Optional<Output<String>> field() {
        return Optional.ofNullable(this.field);
    }

    /**
     * When type is `local_variable`, name of the local variable to use to extract the value.
     * 
     */
    @Import(name="localVariableName")
    private @Nullable Output<String> localVariableName;

    /**
     * @return When type is `local_variable`, name of the local variable to use to extract the value.
     * 
     */
    public Optional<Output<String>> localVariableName() {
        return Optional.ofNullable(this.localVariableName);
    }

    @Import(name="parser")
    private @Nullable Output<SyntheticsGlobalVariableParseTestOptionsParserArgs> parser;

    public Optional<Output<SyntheticsGlobalVariableParseTestOptionsParserArgs>> parser() {
        return Optional.ofNullable(this.parser);
    }

    /**
     * Defines the source to use to extract the value. Valid values are `http_body`, `http_header`, `http_status_code`, `local_variable`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Defines the source to use to extract the value. Valid values are `http_body`, `http_header`, `http_status_code`, `local_variable`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private SyntheticsGlobalVariableParseTestOptionsArgs() {}

    private SyntheticsGlobalVariableParseTestOptionsArgs(SyntheticsGlobalVariableParseTestOptionsArgs $) {
        this.field = $.field;
        this.localVariableName = $.localVariableName;
        this.parser = $.parser;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticsGlobalVariableParseTestOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticsGlobalVariableParseTestOptionsArgs $;

        public Builder() {
            $ = new SyntheticsGlobalVariableParseTestOptionsArgs();
        }

        public Builder(SyntheticsGlobalVariableParseTestOptionsArgs defaults) {
            $ = new SyntheticsGlobalVariableParseTestOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param field Required when type = `http_header`. Defines the header to use to extract the value
         * 
         * @return builder
         * 
         */
        public Builder field(@Nullable Output<String> field) {
            $.field = field;
            return this;
        }

        /**
         * @param field Required when type = `http_header`. Defines the header to use to extract the value
         * 
         * @return builder
         * 
         */
        public Builder field(String field) {
            return field(Output.of(field));
        }

        /**
         * @param localVariableName When type is `local_variable`, name of the local variable to use to extract the value.
         * 
         * @return builder
         * 
         */
        public Builder localVariableName(@Nullable Output<String> localVariableName) {
            $.localVariableName = localVariableName;
            return this;
        }

        /**
         * @param localVariableName When type is `local_variable`, name of the local variable to use to extract the value.
         * 
         * @return builder
         * 
         */
        public Builder localVariableName(String localVariableName) {
            return localVariableName(Output.of(localVariableName));
        }

        public Builder parser(@Nullable Output<SyntheticsGlobalVariableParseTestOptionsParserArgs> parser) {
            $.parser = parser;
            return this;
        }

        public Builder parser(SyntheticsGlobalVariableParseTestOptionsParserArgs parser) {
            return parser(Output.of(parser));
        }

        /**
         * @param type Defines the source to use to extract the value. Valid values are `http_body`, `http_header`, `http_status_code`, `local_variable`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Defines the source to use to extract the value. Valid values are `http_body`, `http_header`, `http_status_code`, `local_variable`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public SyntheticsGlobalVariableParseTestOptionsArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("SyntheticsGlobalVariableParseTestOptionsArgs", "type");
            }
            return $;
        }
    }

}
