// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.GetCustomAllocationRuleCostsToAllocate;
import com.pulumi.datadog.outputs.GetCustomAllocationRuleStrategy;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCustomAllocationRuleResult {
    private @Nullable List<GetCustomAllocationRuleCostsToAllocate> costsToAllocates;
    /**
     * @return The timestamp (in ISO 8601 format) when the rule was created.
     * 
     */
    private String created;
    /**
     * @return Whether the custom allocation rule is enabled.
     * 
     */
    private Boolean enabled;
    /**
     * @return The ID of this resource.
     * 
     */
    private String id;
    /**
     * @return The UUID of the user who last modified the rule.
     * 
     */
    private String lastModifiedUserUuid;
    /**
     * @return The order of the rule in the list of custom allocation rules.
     * 
     */
    private Integer orderId;
    /**
     * @return List of cloud providers the rule applies to (e.g., `aws`, `azure`, `gcp`).
     * 
     */
    private List<String> providernames;
    /**
     * @return Whether the rule was rejected by Datadog due to runtime errors. This field can be updated well after the rule was created. If rejected this rule is treated as disabled until modified where the rejection status is reset.
     * 
     */
    private Boolean rejected;
    /**
     * @return The ID of the custom allocation rule to retrieve.
     * 
     */
    private @Nullable Integer ruleId;
    /**
     * @return The unique name of the custom allocation rule.
     * 
     */
    private String ruleName;
    private @Nullable GetCustomAllocationRuleStrategy strategy;
    /**
     * @return The type of the custom allocation rule. This is always `shared` currently.
     * 
     */
    private String type;
    /**
     * @return The timestamp (in ISO 8601 format) when the rule was last updated.
     * 
     */
    private String updated;
    /**
     * @return The version number of the rule.
     * 
     */
    private String version;

    private GetCustomAllocationRuleResult() {}
    public List<GetCustomAllocationRuleCostsToAllocate> costsToAllocates() {
        return this.costsToAllocates == null ? List.of() : this.costsToAllocates;
    }
    /**
     * @return The timestamp (in ISO 8601 format) when the rule was created.
     * 
     */
    public String created() {
        return this.created;
    }
    /**
     * @return Whether the custom allocation rule is enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The UUID of the user who last modified the rule.
     * 
     */
    public String lastModifiedUserUuid() {
        return this.lastModifiedUserUuid;
    }
    /**
     * @return The order of the rule in the list of custom allocation rules.
     * 
     */
    public Integer orderId() {
        return this.orderId;
    }
    /**
     * @return List of cloud providers the rule applies to (e.g., `aws`, `azure`, `gcp`).
     * 
     */
    public List<String> providernames() {
        return this.providernames;
    }
    /**
     * @return Whether the rule was rejected by Datadog due to runtime errors. This field can be updated well after the rule was created. If rejected this rule is treated as disabled until modified where the rejection status is reset.
     * 
     */
    public Boolean rejected() {
        return this.rejected;
    }
    /**
     * @return The ID of the custom allocation rule to retrieve.
     * 
     */
    public Optional<Integer> ruleId() {
        return Optional.ofNullable(this.ruleId);
    }
    /**
     * @return The unique name of the custom allocation rule.
     * 
     */
    public String ruleName() {
        return this.ruleName;
    }
    public Optional<GetCustomAllocationRuleStrategy> strategy() {
        return Optional.ofNullable(this.strategy);
    }
    /**
     * @return The type of the custom allocation rule. This is always `shared` currently.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The timestamp (in ISO 8601 format) when the rule was last updated.
     * 
     */
    public String updated() {
        return this.updated;
    }
    /**
     * @return The version number of the rule.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCustomAllocationRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetCustomAllocationRuleCostsToAllocate> costsToAllocates;
        private String created;
        private Boolean enabled;
        private String id;
        private String lastModifiedUserUuid;
        private Integer orderId;
        private List<String> providernames;
        private Boolean rejected;
        private @Nullable Integer ruleId;
        private String ruleName;
        private @Nullable GetCustomAllocationRuleStrategy strategy;
        private String type;
        private String updated;
        private String version;
        public Builder() {}
        public Builder(GetCustomAllocationRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.costsToAllocates = defaults.costsToAllocates;
    	      this.created = defaults.created;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.lastModifiedUserUuid = defaults.lastModifiedUserUuid;
    	      this.orderId = defaults.orderId;
    	      this.providernames = defaults.providernames;
    	      this.rejected = defaults.rejected;
    	      this.ruleId = defaults.ruleId;
    	      this.ruleName = defaults.ruleName;
    	      this.strategy = defaults.strategy;
    	      this.type = defaults.type;
    	      this.updated = defaults.updated;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder costsToAllocates(@Nullable List<GetCustomAllocationRuleCostsToAllocate> costsToAllocates) {

            this.costsToAllocates = costsToAllocates;
            return this;
        }
        public Builder costsToAllocates(GetCustomAllocationRuleCostsToAllocate... costsToAllocates) {
            return costsToAllocates(List.of(costsToAllocates));
        }
        @CustomType.Setter
        public Builder created(String created) {
            if (created == null) {
              throw new MissingRequiredPropertyException("GetCustomAllocationRuleResult", "created");
            }
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetCustomAllocationRuleResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCustomAllocationRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastModifiedUserUuid(String lastModifiedUserUuid) {
            if (lastModifiedUserUuid == null) {
              throw new MissingRequiredPropertyException("GetCustomAllocationRuleResult", "lastModifiedUserUuid");
            }
            this.lastModifiedUserUuid = lastModifiedUserUuid;
            return this;
        }
        @CustomType.Setter
        public Builder orderId(Integer orderId) {
            if (orderId == null) {
              throw new MissingRequiredPropertyException("GetCustomAllocationRuleResult", "orderId");
            }
            this.orderId = orderId;
            return this;
        }
        @CustomType.Setter
        public Builder providernames(List<String> providernames) {
            if (providernames == null) {
              throw new MissingRequiredPropertyException("GetCustomAllocationRuleResult", "providernames");
            }
            this.providernames = providernames;
            return this;
        }
        public Builder providernames(String... providernames) {
            return providernames(List.of(providernames));
        }
        @CustomType.Setter
        public Builder rejected(Boolean rejected) {
            if (rejected == null) {
              throw new MissingRequiredPropertyException("GetCustomAllocationRuleResult", "rejected");
            }
            this.rejected = rejected;
            return this;
        }
        @CustomType.Setter
        public Builder ruleId(@Nullable Integer ruleId) {

            this.ruleId = ruleId;
            return this;
        }
        @CustomType.Setter
        public Builder ruleName(String ruleName) {
            if (ruleName == null) {
              throw new MissingRequiredPropertyException("GetCustomAllocationRuleResult", "ruleName");
            }
            this.ruleName = ruleName;
            return this;
        }
        @CustomType.Setter
        public Builder strategy(@Nullable GetCustomAllocationRuleStrategy strategy) {

            this.strategy = strategy;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetCustomAllocationRuleResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder updated(String updated) {
            if (updated == null) {
              throw new MissingRequiredPropertyException("GetCustomAllocationRuleResult", "updated");
            }
            this.updated = updated;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCustomAllocationRuleResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetCustomAllocationRuleResult build() {
            final var _resultValue = new GetCustomAllocationRuleResult();
            _resultValue.costsToAllocates = costsToAllocates;
            _resultValue.created = created;
            _resultValue.enabled = enabled;
            _resultValue.id = id;
            _resultValue.lastModifiedUserUuid = lastModifiedUserUuid;
            _resultValue.orderId = orderId;
            _resultValue.providernames = providernames;
            _resultValue.rejected = rejected;
            _resultValue.ruleId = ruleId;
            _resultValue.ruleName = ruleName;
            _resultValue.strategy = strategy;
            _resultValue.type = type;
            _resultValue.updated = updated;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
