// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.CustomAllocationRuleStrategyAllocatedByAllocatedTagArgs;
import java.lang.Double;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomAllocationRuleStrategyAllocatedByArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomAllocationRuleStrategyAllocatedByArgs Empty = new CustomAllocationRuleStrategyAllocatedByArgs();

    @Import(name="allocatedTags")
    private @Nullable Output<List<CustomAllocationRuleStrategyAllocatedByAllocatedTagArgs>> allocatedTags;

    public Optional<Output<List<CustomAllocationRuleStrategyAllocatedByAllocatedTagArgs>>> allocatedTags() {
        return Optional.ofNullable(this.allocatedTags);
    }

    /**
     * The percentage of costs to allocate to this target as a decimal (e.g., 0.33 for 33%). Used when `method` is `percent`.
     * 
     */
    @Import(name="percentage")
    private @Nullable Output<Double> percentage;

    /**
     * @return The percentage of costs to allocate to this target as a decimal (e.g., 0.33 for 33%). Used when `method` is `percent`.
     * 
     */
    public Optional<Output<Double>> percentage() {
        return Optional.ofNullable(this.percentage);
    }

    private CustomAllocationRuleStrategyAllocatedByArgs() {}

    private CustomAllocationRuleStrategyAllocatedByArgs(CustomAllocationRuleStrategyAllocatedByArgs $) {
        this.allocatedTags = $.allocatedTags;
        this.percentage = $.percentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomAllocationRuleStrategyAllocatedByArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomAllocationRuleStrategyAllocatedByArgs $;

        public Builder() {
            $ = new CustomAllocationRuleStrategyAllocatedByArgs();
        }

        public Builder(CustomAllocationRuleStrategyAllocatedByArgs defaults) {
            $ = new CustomAllocationRuleStrategyAllocatedByArgs(Objects.requireNonNull(defaults));
        }

        public Builder allocatedTags(@Nullable Output<List<CustomAllocationRuleStrategyAllocatedByAllocatedTagArgs>> allocatedTags) {
            $.allocatedTags = allocatedTags;
            return this;
        }

        public Builder allocatedTags(List<CustomAllocationRuleStrategyAllocatedByAllocatedTagArgs> allocatedTags) {
            return allocatedTags(Output.of(allocatedTags));
        }

        public Builder allocatedTags(CustomAllocationRuleStrategyAllocatedByAllocatedTagArgs... allocatedTags) {
            return allocatedTags(List.of(allocatedTags));
        }

        /**
         * @param percentage The percentage of costs to allocate to this target as a decimal (e.g., 0.33 for 33%). Used when `method` is `percent`.
         * 
         * @return builder
         * 
         */
        public Builder percentage(@Nullable Output<Double> percentage) {
            $.percentage = percentage;
            return this;
        }

        /**
         * @param percentage The percentage of costs to allocate to this target as a decimal (e.g., 0.33 for 33%). Used when `method` is `percent`.
         * 
         * @return builder
         * 
         */
        public Builder percentage(Double percentage) {
            return percentage(Output.of(percentage));
        }

        public CustomAllocationRuleStrategyAllocatedByArgs build() {
            return $;
        }
    }

}
