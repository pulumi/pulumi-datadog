// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsParseGrokRuleMatchRule;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsParseGrokRuleSupportRule;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class ObservabilityPipelineConfigProcessorsParseGrokRule {
    /**
     * @return A list of Grok parsing rules that define how to extract fields from the source field. Each rule must contain a name and a valid Grok pattern.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsParseGrokRuleMatchRule> matchRules;
    /**
     * @return The name of the field in the log event to apply the Grok rules to.
     * 
     */
    private String source;
    /**
     * @return A list of helper Grok rules that can be referenced by the parsing rules.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsParseGrokRuleSupportRule> supportRules;

    private ObservabilityPipelineConfigProcessorsParseGrokRule() {}
    /**
     * @return A list of Grok parsing rules that define how to extract fields from the source field. Each rule must contain a name and a valid Grok pattern.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsParseGrokRuleMatchRule> matchRules() {
        return this.matchRules == null ? List.of() : this.matchRules;
    }
    /**
     * @return The name of the field in the log event to apply the Grok rules to.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return A list of helper Grok rules that can be referenced by the parsing rules.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsParseGrokRuleSupportRule> supportRules() {
        return this.supportRules == null ? List.of() : this.supportRules;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObservabilityPipelineConfigProcessorsParseGrokRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ObservabilityPipelineConfigProcessorsParseGrokRuleMatchRule> matchRules;
        private String source;
        private @Nullable List<ObservabilityPipelineConfigProcessorsParseGrokRuleSupportRule> supportRules;
        public Builder() {}
        public Builder(ObservabilityPipelineConfigProcessorsParseGrokRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.matchRules = defaults.matchRules;
    	      this.source = defaults.source;
    	      this.supportRules = defaults.supportRules;
        }

        @CustomType.Setter
        public Builder matchRules(@Nullable List<ObservabilityPipelineConfigProcessorsParseGrokRuleMatchRule> matchRules) {

            this.matchRules = matchRules;
            return this;
        }
        public Builder matchRules(ObservabilityPipelineConfigProcessorsParseGrokRuleMatchRule... matchRules) {
            return matchRules(List.of(matchRules));
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsParseGrokRule", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder supportRules(@Nullable List<ObservabilityPipelineConfigProcessorsParseGrokRuleSupportRule> supportRules) {

            this.supportRules = supportRules;
            return this;
        }
        public Builder supportRules(ObservabilityPipelineConfigProcessorsParseGrokRuleSupportRule... supportRules) {
            return supportRules(List.of(supportRules));
        }
        public ObservabilityPipelineConfigProcessorsParseGrokRule build() {
            final var _resultValue = new ObservabilityPipelineConfigProcessorsParseGrokRule();
            _resultValue.matchRules = matchRules;
            _resultValue.source = source;
            _resultValue.supportRules = supportRules;
            return _resultValue;
        }
    }
}
