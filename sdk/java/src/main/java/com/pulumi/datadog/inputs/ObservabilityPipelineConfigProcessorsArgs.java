// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigProcessorsAddFieldArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigProcessorsFilterArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigProcessorsParseJsonArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigProcessorsQuotaArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigProcessorsRemoveFieldArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigProcessorsRenameFieldArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigProcessorsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigProcessorsArgs Empty = new ObservabilityPipelineConfigProcessorsArgs();

    /**
     * The `add_fields` processor adds static key-value fields to logs.
     * 
     */
    @Import(name="addFields")
    private @Nullable Output<List<ObservabilityPipelineConfigProcessorsAddFieldArgs>> addFields;

    /**
     * @return The `add_fields` processor adds static key-value fields to logs.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigProcessorsAddFieldArgs>>> addFields() {
        return Optional.ofNullable(this.addFields);
    }

    /**
     * The `filter` processor allows conditional processing of logs based on a Datadog search query. Logs that match the `include` query are passed through; others are discarded.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<ObservabilityPipelineConfigProcessorsFilterArgs>> filters;

    /**
     * @return The `filter` processor allows conditional processing of logs based on a Datadog search query. Logs that match the `include` query are passed through; others are discarded.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigProcessorsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The `parse_json` processor extracts JSON from a specified field and flattens it into the event. This is useful when logs contain embedded JSON as a string.
     * 
     */
    @Import(name="parseJsons")
    private @Nullable Output<List<ObservabilityPipelineConfigProcessorsParseJsonArgs>> parseJsons;

    /**
     * @return The `parse_json` processor extracts JSON from a specified field and flattens it into the event. This is useful when logs contain embedded JSON as a string.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigProcessorsParseJsonArgs>>> parseJsons() {
        return Optional.ofNullable(this.parseJsons);
    }

    /**
     * The `quota` measures logging traffic for logs that match a specified filter. When the configured daily quota is met, the processor can drop or alert.
     * 
     */
    @Import(name="quotas")
    private @Nullable Output<List<ObservabilityPipelineConfigProcessorsQuotaArgs>> quotas;

    /**
     * @return The `quota` measures logging traffic for logs that match a specified filter. When the configured daily quota is met, the processor can drop or alert.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigProcessorsQuotaArgs>>> quotas() {
        return Optional.ofNullable(this.quotas);
    }

    /**
     * The `remove_fields` processor deletes specified fields from logs.
     * 
     */
    @Import(name="removeFields")
    private @Nullable Output<List<ObservabilityPipelineConfigProcessorsRemoveFieldArgs>> removeFields;

    /**
     * @return The `remove_fields` processor deletes specified fields from logs.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigProcessorsRemoveFieldArgs>>> removeFields() {
        return Optional.ofNullable(this.removeFields);
    }

    /**
     * The `rename_fields` processor changes field names.
     * 
     */
    @Import(name="renameFields")
    private @Nullable Output<List<ObservabilityPipelineConfigProcessorsRenameFieldArgs>> renameFields;

    /**
     * @return The `rename_fields` processor changes field names.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigProcessorsRenameFieldArgs>>> renameFields() {
        return Optional.ofNullable(this.renameFields);
    }

    private ObservabilityPipelineConfigProcessorsArgs() {}

    private ObservabilityPipelineConfigProcessorsArgs(ObservabilityPipelineConfigProcessorsArgs $) {
        this.addFields = $.addFields;
        this.filters = $.filters;
        this.parseJsons = $.parseJsons;
        this.quotas = $.quotas;
        this.removeFields = $.removeFields;
        this.renameFields = $.renameFields;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigProcessorsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigProcessorsArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigProcessorsArgs();
        }

        public Builder(ObservabilityPipelineConfigProcessorsArgs defaults) {
            $ = new ObservabilityPipelineConfigProcessorsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addFields The `add_fields` processor adds static key-value fields to logs.
         * 
         * @return builder
         * 
         */
        public Builder addFields(@Nullable Output<List<ObservabilityPipelineConfigProcessorsAddFieldArgs>> addFields) {
            $.addFields = addFields;
            return this;
        }

        /**
         * @param addFields The `add_fields` processor adds static key-value fields to logs.
         * 
         * @return builder
         * 
         */
        public Builder addFields(List<ObservabilityPipelineConfigProcessorsAddFieldArgs> addFields) {
            return addFields(Output.of(addFields));
        }

        /**
         * @param addFields The `add_fields` processor adds static key-value fields to logs.
         * 
         * @return builder
         * 
         */
        public Builder addFields(ObservabilityPipelineConfigProcessorsAddFieldArgs... addFields) {
            return addFields(List.of(addFields));
        }

        /**
         * @param filters The `filter` processor allows conditional processing of logs based on a Datadog search query. Logs that match the `include` query are passed through; others are discarded.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<ObservabilityPipelineConfigProcessorsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters The `filter` processor allows conditional processing of logs based on a Datadog search query. Logs that match the `include` query are passed through; others are discarded.
         * 
         * @return builder
         * 
         */
        public Builder filters(List<ObservabilityPipelineConfigProcessorsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters The `filter` processor allows conditional processing of logs based on a Datadog search query. Logs that match the `include` query are passed through; others are discarded.
         * 
         * @return builder
         * 
         */
        public Builder filters(ObservabilityPipelineConfigProcessorsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param parseJsons The `parse_json` processor extracts JSON from a specified field and flattens it into the event. This is useful when logs contain embedded JSON as a string.
         * 
         * @return builder
         * 
         */
        public Builder parseJsons(@Nullable Output<List<ObservabilityPipelineConfigProcessorsParseJsonArgs>> parseJsons) {
            $.parseJsons = parseJsons;
            return this;
        }

        /**
         * @param parseJsons The `parse_json` processor extracts JSON from a specified field and flattens it into the event. This is useful when logs contain embedded JSON as a string.
         * 
         * @return builder
         * 
         */
        public Builder parseJsons(List<ObservabilityPipelineConfigProcessorsParseJsonArgs> parseJsons) {
            return parseJsons(Output.of(parseJsons));
        }

        /**
         * @param parseJsons The `parse_json` processor extracts JSON from a specified field and flattens it into the event. This is useful when logs contain embedded JSON as a string.
         * 
         * @return builder
         * 
         */
        public Builder parseJsons(ObservabilityPipelineConfigProcessorsParseJsonArgs... parseJsons) {
            return parseJsons(List.of(parseJsons));
        }

        /**
         * @param quotas The `quota` measures logging traffic for logs that match a specified filter. When the configured daily quota is met, the processor can drop or alert.
         * 
         * @return builder
         * 
         */
        public Builder quotas(@Nullable Output<List<ObservabilityPipelineConfigProcessorsQuotaArgs>> quotas) {
            $.quotas = quotas;
            return this;
        }

        /**
         * @param quotas The `quota` measures logging traffic for logs that match a specified filter. When the configured daily quota is met, the processor can drop or alert.
         * 
         * @return builder
         * 
         */
        public Builder quotas(List<ObservabilityPipelineConfigProcessorsQuotaArgs> quotas) {
            return quotas(Output.of(quotas));
        }

        /**
         * @param quotas The `quota` measures logging traffic for logs that match a specified filter. When the configured daily quota is met, the processor can drop or alert.
         * 
         * @return builder
         * 
         */
        public Builder quotas(ObservabilityPipelineConfigProcessorsQuotaArgs... quotas) {
            return quotas(List.of(quotas));
        }

        /**
         * @param removeFields The `remove_fields` processor deletes specified fields from logs.
         * 
         * @return builder
         * 
         */
        public Builder removeFields(@Nullable Output<List<ObservabilityPipelineConfigProcessorsRemoveFieldArgs>> removeFields) {
            $.removeFields = removeFields;
            return this;
        }

        /**
         * @param removeFields The `remove_fields` processor deletes specified fields from logs.
         * 
         * @return builder
         * 
         */
        public Builder removeFields(List<ObservabilityPipelineConfigProcessorsRemoveFieldArgs> removeFields) {
            return removeFields(Output.of(removeFields));
        }

        /**
         * @param removeFields The `remove_fields` processor deletes specified fields from logs.
         * 
         * @return builder
         * 
         */
        public Builder removeFields(ObservabilityPipelineConfigProcessorsRemoveFieldArgs... removeFields) {
            return removeFields(List.of(removeFields));
        }

        /**
         * @param renameFields The `rename_fields` processor changes field names.
         * 
         * @return builder
         * 
         */
        public Builder renameFields(@Nullable Output<List<ObservabilityPipelineConfigProcessorsRenameFieldArgs>> renameFields) {
            $.renameFields = renameFields;
            return this;
        }

        /**
         * @param renameFields The `rename_fields` processor changes field names.
         * 
         * @return builder
         * 
         */
        public Builder renameFields(List<ObservabilityPipelineConfigProcessorsRenameFieldArgs> renameFields) {
            return renameFields(Output.of(renameFields));
        }

        /**
         * @param renameFields The `rename_fields` processor changes field names.
         * 
         * @return builder
         * 
         */
        public Builder renameFields(ObservabilityPipelineConfigProcessorsRenameFieldArgs... renameFields) {
            return renameFields(List.of(renameFields));
        }

        public ObservabilityPipelineConfigProcessorsArgs build() {
            return $;
        }
    }

}
