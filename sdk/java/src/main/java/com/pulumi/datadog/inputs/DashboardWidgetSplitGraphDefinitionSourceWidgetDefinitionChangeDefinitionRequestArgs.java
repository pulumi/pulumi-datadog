// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestApmQueryArgs;
import com.pulumi.datadog.inputs.DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestFormulaArgs;
import com.pulumi.datadog.inputs.DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestLogQueryArgs;
import com.pulumi.datadog.inputs.DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestProcessQueryArgs;
import com.pulumi.datadog.inputs.DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestQueryArgs;
import com.pulumi.datadog.inputs.DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestRumQueryArgs;
import com.pulumi.datadog.inputs.DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestSecurityQueryArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestArgs Empty = new DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestArgs();

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="apmQuery")
    private @Nullable Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestApmQueryArgs> apmQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestApmQueryArgs>> apmQuery() {
        return Optional.ofNullable(this.apmQuery);
    }

    /**
     * Whether to show absolute or relative change. Valid values are `absolute`, `relative`.
     * 
     */
    @Import(name="changeType")
    private @Nullable Output<String> changeType;

    /**
     * @return Whether to show absolute or relative change. Valid values are `absolute`, `relative`.
     * 
     */
    public Optional<Output<String>> changeType() {
        return Optional.ofNullable(this.changeType);
    }

    /**
     * Choose from when to compare current data to. Valid values are `hour_before`, `day_before`, `week_before`, `month_before`.
     * 
     */
    @Import(name="compareTo")
    private @Nullable Output<String> compareTo;

    /**
     * @return Choose from when to compare current data to. Valid values are `hour_before`, `day_before`, `week_before`, `month_before`.
     * 
     */
    public Optional<Output<String>> compareTo() {
        return Optional.ofNullable(this.compareTo);
    }

    @Import(name="formulas")
    private @Nullable Output<List<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestFormulaArgs>> formulas;

    public Optional<Output<List<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestFormulaArgs>>> formulas() {
        return Optional.ofNullable(this.formulas);
    }

    /**
     * A Boolean indicating whether an increase in the value is good (displayed in green) or not (displayed in red).
     * 
     */
    @Import(name="increaseGood")
    private @Nullable Output<Boolean> increaseGood;

    /**
     * @return A Boolean indicating whether an increase in the value is good (displayed in green) or not (displayed in red).
     * 
     */
    public Optional<Output<Boolean>> increaseGood() {
        return Optional.ofNullable(this.increaseGood);
    }

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="logQuery")
    private @Nullable Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestLogQueryArgs> logQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestLogQueryArgs>> logQuery() {
        return Optional.ofNullable(this.logQuery);
    }

    /**
     * What to order by. Valid values are `change`, `name`, `present`, `past`.
     * 
     */
    @Import(name="orderBy")
    private @Nullable Output<String> orderBy;

    /**
     * @return What to order by. Valid values are `change`, `name`, `present`, `past`.
     * 
     */
    public Optional<Output<String>> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }

    /**
     * Widget sorting method. Valid values are `asc`, `desc`.
     * 
     */
    @Import(name="orderDir")
    private @Nullable Output<String> orderDir;

    /**
     * @return Widget sorting method. Valid values are `asc`, `desc`.
     * 
     */
    public Optional<Output<String>> orderDir() {
        return Optional.ofNullable(this.orderDir);
    }

    /**
     * The process query to use in the widget. The structure of this block is described below.
     * 
     */
    @Import(name="processQuery")
    private @Nullable Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestProcessQueryArgs> processQuery;

    /**
     * @return The process query to use in the widget. The structure of this block is described below.
     * 
     */
    public Optional<Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestProcessQueryArgs>> processQuery() {
        return Optional.ofNullable(this.processQuery);
    }

    /**
     * The metric query to use for this widget.
     * 
     */
    @Import(name="q")
    private @Nullable Output<String> q;

    /**
     * @return The metric query to use for this widget.
     * 
     */
    public Optional<Output<String>> q() {
        return Optional.ofNullable(this.q);
    }

    @Import(name="queries")
    private @Nullable Output<List<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestQueryArgs>> queries;

    public Optional<Output<List<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestQueryArgs>>> queries() {
        return Optional.ofNullable(this.queries);
    }

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="rumQuery")
    private @Nullable Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestRumQueryArgs> rumQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestRumQueryArgs>> rumQuery() {
        return Optional.ofNullable(this.rumQuery);
    }

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="securityQuery")
    private @Nullable Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestSecurityQueryArgs> securityQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestSecurityQueryArgs>> securityQuery() {
        return Optional.ofNullable(this.securityQuery);
    }

    /**
     * If set to `true`, displays the current value.
     * 
     */
    @Import(name="showPresent")
    private @Nullable Output<Boolean> showPresent;

    /**
     * @return If set to `true`, displays the current value.
     * 
     */
    public Optional<Output<Boolean>> showPresent() {
        return Optional.ofNullable(this.showPresent);
    }

    private DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestArgs() {}

    private DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestArgs(DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestArgs $) {
        this.apmQuery = $.apmQuery;
        this.changeType = $.changeType;
        this.compareTo = $.compareTo;
        this.formulas = $.formulas;
        this.increaseGood = $.increaseGood;
        this.logQuery = $.logQuery;
        this.orderBy = $.orderBy;
        this.orderDir = $.orderDir;
        this.processQuery = $.processQuery;
        this.q = $.q;
        this.queries = $.queries;
        this.rumQuery = $.rumQuery;
        this.securityQuery = $.securityQuery;
        this.showPresent = $.showPresent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestArgs $;

        public Builder() {
            $ = new DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestArgs();
        }

        public Builder(DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestArgs defaults) {
            $ = new DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apmQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder apmQuery(@Nullable Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestApmQueryArgs> apmQuery) {
            $.apmQuery = apmQuery;
            return this;
        }

        /**
         * @param apmQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder apmQuery(DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestApmQueryArgs apmQuery) {
            return apmQuery(Output.of(apmQuery));
        }

        /**
         * @param changeType Whether to show absolute or relative change. Valid values are `absolute`, `relative`.
         * 
         * @return builder
         * 
         */
        public Builder changeType(@Nullable Output<String> changeType) {
            $.changeType = changeType;
            return this;
        }

        /**
         * @param changeType Whether to show absolute or relative change. Valid values are `absolute`, `relative`.
         * 
         * @return builder
         * 
         */
        public Builder changeType(String changeType) {
            return changeType(Output.of(changeType));
        }

        /**
         * @param compareTo Choose from when to compare current data to. Valid values are `hour_before`, `day_before`, `week_before`, `month_before`.
         * 
         * @return builder
         * 
         */
        public Builder compareTo(@Nullable Output<String> compareTo) {
            $.compareTo = compareTo;
            return this;
        }

        /**
         * @param compareTo Choose from when to compare current data to. Valid values are `hour_before`, `day_before`, `week_before`, `month_before`.
         * 
         * @return builder
         * 
         */
        public Builder compareTo(String compareTo) {
            return compareTo(Output.of(compareTo));
        }

        public Builder formulas(@Nullable Output<List<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestFormulaArgs>> formulas) {
            $.formulas = formulas;
            return this;
        }

        public Builder formulas(List<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestFormulaArgs> formulas) {
            return formulas(Output.of(formulas));
        }

        public Builder formulas(DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestFormulaArgs... formulas) {
            return formulas(List.of(formulas));
        }

        /**
         * @param increaseGood A Boolean indicating whether an increase in the value is good (displayed in green) or not (displayed in red).
         * 
         * @return builder
         * 
         */
        public Builder increaseGood(@Nullable Output<Boolean> increaseGood) {
            $.increaseGood = increaseGood;
            return this;
        }

        /**
         * @param increaseGood A Boolean indicating whether an increase in the value is good (displayed in green) or not (displayed in red).
         * 
         * @return builder
         * 
         */
        public Builder increaseGood(Boolean increaseGood) {
            return increaseGood(Output.of(increaseGood));
        }

        /**
         * @param logQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder logQuery(@Nullable Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestLogQueryArgs> logQuery) {
            $.logQuery = logQuery;
            return this;
        }

        /**
         * @param logQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder logQuery(DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestLogQueryArgs logQuery) {
            return logQuery(Output.of(logQuery));
        }

        /**
         * @param orderBy What to order by. Valid values are `change`, `name`, `present`, `past`.
         * 
         * @return builder
         * 
         */
        public Builder orderBy(@Nullable Output<String> orderBy) {
            $.orderBy = orderBy;
            return this;
        }

        /**
         * @param orderBy What to order by. Valid values are `change`, `name`, `present`, `past`.
         * 
         * @return builder
         * 
         */
        public Builder orderBy(String orderBy) {
            return orderBy(Output.of(orderBy));
        }

        /**
         * @param orderDir Widget sorting method. Valid values are `asc`, `desc`.
         * 
         * @return builder
         * 
         */
        public Builder orderDir(@Nullable Output<String> orderDir) {
            $.orderDir = orderDir;
            return this;
        }

        /**
         * @param orderDir Widget sorting method. Valid values are `asc`, `desc`.
         * 
         * @return builder
         * 
         */
        public Builder orderDir(String orderDir) {
            return orderDir(Output.of(orderDir));
        }

        /**
         * @param processQuery The process query to use in the widget. The structure of this block is described below.
         * 
         * @return builder
         * 
         */
        public Builder processQuery(@Nullable Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestProcessQueryArgs> processQuery) {
            $.processQuery = processQuery;
            return this;
        }

        /**
         * @param processQuery The process query to use in the widget. The structure of this block is described below.
         * 
         * @return builder
         * 
         */
        public Builder processQuery(DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestProcessQueryArgs processQuery) {
            return processQuery(Output.of(processQuery));
        }

        /**
         * @param q The metric query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder q(@Nullable Output<String> q) {
            $.q = q;
            return this;
        }

        /**
         * @param q The metric query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder q(String q) {
            return q(Output.of(q));
        }

        public Builder queries(@Nullable Output<List<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestQueryArgs>> queries) {
            $.queries = queries;
            return this;
        }

        public Builder queries(List<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestQueryArgs> queries) {
            return queries(Output.of(queries));
        }

        public Builder queries(DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestQueryArgs... queries) {
            return queries(List.of(queries));
        }

        /**
         * @param rumQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder rumQuery(@Nullable Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestRumQueryArgs> rumQuery) {
            $.rumQuery = rumQuery;
            return this;
        }

        /**
         * @param rumQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder rumQuery(DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestRumQueryArgs rumQuery) {
            return rumQuery(Output.of(rumQuery));
        }

        /**
         * @param securityQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder securityQuery(@Nullable Output<DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestSecurityQueryArgs> securityQuery) {
            $.securityQuery = securityQuery;
            return this;
        }

        /**
         * @param securityQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder securityQuery(DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestSecurityQueryArgs securityQuery) {
            return securityQuery(Output.of(securityQuery));
        }

        /**
         * @param showPresent If set to `true`, displays the current value.
         * 
         * @return builder
         * 
         */
        public Builder showPresent(@Nullable Output<Boolean> showPresent) {
            $.showPresent = showPresent;
            return this;
        }

        /**
         * @param showPresent If set to `true`, displays the current value.
         * 
         * @return builder
         * 
         */
        public Builder showPresent(Boolean showPresent) {
            return showPresent(Output.of(showPresent));
        }

        public DashboardWidgetSplitGraphDefinitionSourceWidgetDefinitionChangeDefinitionRequestArgs build() {
            return $;
        }
    }

}
