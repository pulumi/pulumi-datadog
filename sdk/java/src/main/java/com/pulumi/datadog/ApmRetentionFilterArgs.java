// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ApmRetentionFilterFilterArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApmRetentionFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApmRetentionFilterArgs Empty = new ApmRetentionFilterArgs();

    /**
     * the status of the retention filter.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return the status of the retention filter.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The spans filter. Spans matching this filter will be indexed and stored.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<ApmRetentionFilterFilterArgs> filter;

    /**
     * @return The spans filter. Spans matching this filter will be indexed and stored.
     * 
     */
    public Optional<Output<ApmRetentionFilterFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * The type of the retention filter, currently only spans-processing-sampling is available. Valid values are `spans-sampling-processor`.
     * 
     */
    @Import(name="filterType", required=true)
    private Output<String> filterType;

    /**
     * @return The type of the retention filter, currently only spans-processing-sampling is available. Valid values are `spans-sampling-processor`.
     * 
     */
    public Output<String> filterType() {
        return this.filterType;
    }

    /**
     * The name of the retention filter.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the retention filter.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Sample rate to apply to spans going through this retention filter as a string, a value of 1.0 keeps all spans matching the query.
     * 
     */
    @Import(name="rate", required=true)
    private Output<String> rate;

    /**
     * @return Sample rate to apply to spans going through this retention filter as a string, a value of 1.0 keeps all spans matching the query.
     * 
     */
    public Output<String> rate() {
        return this.rate;
    }

    private ApmRetentionFilterArgs() {}

    private ApmRetentionFilterArgs(ApmRetentionFilterArgs $) {
        this.enabled = $.enabled;
        this.filter = $.filter;
        this.filterType = $.filterType;
        this.name = $.name;
        this.rate = $.rate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApmRetentionFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApmRetentionFilterArgs $;

        public Builder() {
            $ = new ApmRetentionFilterArgs();
        }

        public Builder(ApmRetentionFilterArgs defaults) {
            $ = new ApmRetentionFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled the status of the retention filter.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled the status of the retention filter.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param filter The spans filter. Spans matching this filter will be indexed and stored.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<ApmRetentionFilterFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter The spans filter. Spans matching this filter will be indexed and stored.
         * 
         * @return builder
         * 
         */
        public Builder filter(ApmRetentionFilterFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param filterType The type of the retention filter, currently only spans-processing-sampling is available. Valid values are `spans-sampling-processor`.
         * 
         * @return builder
         * 
         */
        public Builder filterType(Output<String> filterType) {
            $.filterType = filterType;
            return this;
        }

        /**
         * @param filterType The type of the retention filter, currently only spans-processing-sampling is available. Valid values are `spans-sampling-processor`.
         * 
         * @return builder
         * 
         */
        public Builder filterType(String filterType) {
            return filterType(Output.of(filterType));
        }

        /**
         * @param name The name of the retention filter.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the retention filter.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param rate Sample rate to apply to spans going through this retention filter as a string, a value of 1.0 keeps all spans matching the query.
         * 
         * @return builder
         * 
         */
        public Builder rate(Output<String> rate) {
            $.rate = rate;
            return this;
        }

        /**
         * @param rate Sample rate to apply to spans going through this retention filter as a string, a value of 1.0 keeps all spans matching the query.
         * 
         * @return builder
         * 
         */
        public Builder rate(String rate) {
            return rate(Output.of(rate));
        }

        public ApmRetentionFilterArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("ApmRetentionFilterArgs", "enabled");
            }
            if ($.filterType == null) {
                throw new MissingRequiredPropertyException("ApmRetentionFilterArgs", "filterType");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ApmRetentionFilterArgs", "name");
            }
            if ($.rate == null) {
                throw new MissingRequiredPropertyException("ApmRetentionFilterArgs", "rate");
            }
            return $;
        }
    }

}
