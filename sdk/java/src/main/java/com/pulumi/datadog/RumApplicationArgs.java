// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RumApplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final RumApplicationArgs Empty = new RumApplicationArgs();

    /**
     * Name of the RUM application.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the RUM application.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Controls the retention policy for Product Analytics data derived from RUM events. Valid values are `MAX`, `NONE`.
     * 
     */
    @Import(name="productAnalyticsRetentionState")
    private @Nullable Output<String> productAnalyticsRetentionState;

    /**
     * @return Controls the retention policy for Product Analytics data derived from RUM events. Valid values are `MAX`, `NONE`.
     * 
     */
    public Optional<Output<String>> productAnalyticsRetentionState() {
        return Optional.ofNullable(this.productAnalyticsRetentionState);
    }

    /**
     * Configures which RUM events are processed and stored for the application. Valid values are `ALL`, `ERROR_FOCUSED_MODE`, `NONE`.
     * 
     */
    @Import(name="rumEventProcessingState")
    private @Nullable Output<String> rumEventProcessingState;

    /**
     * @return Configures which RUM events are processed and stored for the application. Valid values are `ALL`, `ERROR_FOCUSED_MODE`, `NONE`.
     * 
     */
    public Optional<Output<String>> rumEventProcessingState() {
        return Optional.ofNullable(this.rumEventProcessingState);
    }

    /**
     * Type of the RUM application. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`. Defaults to `&#34;browser&#34;`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of the RUM application. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`. Defaults to `&#34;browser&#34;`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private RumApplicationArgs() {}

    private RumApplicationArgs(RumApplicationArgs $) {
        this.name = $.name;
        this.productAnalyticsRetentionState = $.productAnalyticsRetentionState;
        this.rumEventProcessingState = $.rumEventProcessingState;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RumApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RumApplicationArgs $;

        public Builder() {
            $ = new RumApplicationArgs();
        }

        public Builder(RumApplicationArgs defaults) {
            $ = new RumApplicationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the RUM application.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the RUM application.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param productAnalyticsRetentionState Controls the retention policy for Product Analytics data derived from RUM events. Valid values are `MAX`, `NONE`.
         * 
         * @return builder
         * 
         */
        public Builder productAnalyticsRetentionState(@Nullable Output<String> productAnalyticsRetentionState) {
            $.productAnalyticsRetentionState = productAnalyticsRetentionState;
            return this;
        }

        /**
         * @param productAnalyticsRetentionState Controls the retention policy for Product Analytics data derived from RUM events. Valid values are `MAX`, `NONE`.
         * 
         * @return builder
         * 
         */
        public Builder productAnalyticsRetentionState(String productAnalyticsRetentionState) {
            return productAnalyticsRetentionState(Output.of(productAnalyticsRetentionState));
        }

        /**
         * @param rumEventProcessingState Configures which RUM events are processed and stored for the application. Valid values are `ALL`, `ERROR_FOCUSED_MODE`, `NONE`.
         * 
         * @return builder
         * 
         */
        public Builder rumEventProcessingState(@Nullable Output<String> rumEventProcessingState) {
            $.rumEventProcessingState = rumEventProcessingState;
            return this;
        }

        /**
         * @param rumEventProcessingState Configures which RUM events are processed and stored for the application. Valid values are `ALL`, `ERROR_FOCUSED_MODE`, `NONE`.
         * 
         * @return builder
         * 
         */
        public Builder rumEventProcessingState(String rumEventProcessingState) {
            return rumEventProcessingState(Output.of(rumEventProcessingState));
        }

        /**
         * @param type Type of the RUM application. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`. Defaults to `&#34;browser&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the RUM application. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`. Defaults to `&#34;browser&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RumApplicationArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("RumApplicationArgs", "name");
            }
            return $;
        }
    }

}
