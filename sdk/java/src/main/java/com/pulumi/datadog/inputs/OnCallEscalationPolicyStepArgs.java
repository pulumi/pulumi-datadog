// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.OnCallEscalationPolicyStepTargetArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OnCallEscalationPolicyStepArgs extends com.pulumi.resources.ResourceArgs {

    public static final OnCallEscalationPolicyStepArgs Empty = new OnCallEscalationPolicyStepArgs();

    /**
     * Specifies how this escalation step will assign targets. Can be `default` (page all targets at once) or `round-robin`. Valid values are `default`, `round-robin`. Defaults to `&#34;default&#34;`.
     * 
     */
    @Import(name="assignment")
    private @Nullable Output<String> assignment;

    /**
     * @return Specifies how this escalation step will assign targets. Can be `default` (page all targets at once) or `round-robin`. Valid values are `default`, `round-robin`. Defaults to `&#34;default&#34;`.
     * 
     */
    public Optional<Output<String>> assignment() {
        return Optional.ofNullable(this.assignment);
    }

    /**
     * Defines how many seconds to wait before escalating to the next step. Value must be between 60 and 36000.
     * 
     */
    @Import(name="escalateAfterSeconds", required=true)
    private Output<Integer> escalateAfterSeconds;

    /**
     * @return Defines how many seconds to wait before escalating to the next step. Value must be between 60 and 36000.
     * 
     */
    public Output<Integer> escalateAfterSeconds() {
        return this.escalateAfterSeconds;
    }

    /**
     * The ID of this step.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of this step.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * List of targets for the step.
     * 
     */
    @Import(name="targets", required=true)
    private Output<List<OnCallEscalationPolicyStepTargetArgs>> targets;

    /**
     * @return List of targets for the step.
     * 
     */
    public Output<List<OnCallEscalationPolicyStepTargetArgs>> targets() {
        return this.targets;
    }

    private OnCallEscalationPolicyStepArgs() {}

    private OnCallEscalationPolicyStepArgs(OnCallEscalationPolicyStepArgs $) {
        this.assignment = $.assignment;
        this.escalateAfterSeconds = $.escalateAfterSeconds;
        this.id = $.id;
        this.targets = $.targets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OnCallEscalationPolicyStepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OnCallEscalationPolicyStepArgs $;

        public Builder() {
            $ = new OnCallEscalationPolicyStepArgs();
        }

        public Builder(OnCallEscalationPolicyStepArgs defaults) {
            $ = new OnCallEscalationPolicyStepArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignment Specifies how this escalation step will assign targets. Can be `default` (page all targets at once) or `round-robin`. Valid values are `default`, `round-robin`. Defaults to `&#34;default&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder assignment(@Nullable Output<String> assignment) {
            $.assignment = assignment;
            return this;
        }

        /**
         * @param assignment Specifies how this escalation step will assign targets. Can be `default` (page all targets at once) or `round-robin`. Valid values are `default`, `round-robin`. Defaults to `&#34;default&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder assignment(String assignment) {
            return assignment(Output.of(assignment));
        }

        /**
         * @param escalateAfterSeconds Defines how many seconds to wait before escalating to the next step. Value must be between 60 and 36000.
         * 
         * @return builder
         * 
         */
        public Builder escalateAfterSeconds(Output<Integer> escalateAfterSeconds) {
            $.escalateAfterSeconds = escalateAfterSeconds;
            return this;
        }

        /**
         * @param escalateAfterSeconds Defines how many seconds to wait before escalating to the next step. Value must be between 60 and 36000.
         * 
         * @return builder
         * 
         */
        public Builder escalateAfterSeconds(Integer escalateAfterSeconds) {
            return escalateAfterSeconds(Output.of(escalateAfterSeconds));
        }

        /**
         * @param id The ID of this step.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of this step.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param targets List of targets for the step.
         * 
         * @return builder
         * 
         */
        public Builder targets(Output<List<OnCallEscalationPolicyStepTargetArgs>> targets) {
            $.targets = targets;
            return this;
        }

        /**
         * @param targets List of targets for the step.
         * 
         * @return builder
         * 
         */
        public Builder targets(List<OnCallEscalationPolicyStepTargetArgs> targets) {
            return targets(Output.of(targets));
        }

        /**
         * @param targets List of targets for the step.
         * 
         * @return builder
         * 
         */
        public Builder targets(OnCallEscalationPolicyStepTargetArgs... targets) {
            return targets(List.of(targets));
        }

        public OnCallEscalationPolicyStepArgs build() {
            if ($.escalateAfterSeconds == null) {
                throw new MissingRequiredPropertyException("OnCallEscalationPolicyStepArgs", "escalateAfterSeconds");
            }
            if ($.targets == null) {
                throw new MissingRequiredPropertyException("OnCallEscalationPolicyStepArgs", "targets");
            }
            return $;
        }
    }

}
