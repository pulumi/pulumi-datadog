// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class SecurityMonitoringRuleReferenceTable {
    /**
     * @return Whether to include or exclude logs that match the reference table.
     * 
     */
    private Boolean checkPresence;
    /**
     * @return The name of the column in the reference table.
     * 
     */
    private String columnName;
    /**
     * @return The field in the log that should be matched against the reference table.
     * 
     */
    private String logFieldPath;
    /**
     * @return The name of the query to filter.
     * 
     */
    private String ruleQueryName;
    /**
     * @return The name of the reference table.
     * 
     */
    private String tableName;

    private SecurityMonitoringRuleReferenceTable() {}
    /**
     * @return Whether to include or exclude logs that match the reference table.
     * 
     */
    public Boolean checkPresence() {
        return this.checkPresence;
    }
    /**
     * @return The name of the column in the reference table.
     * 
     */
    public String columnName() {
        return this.columnName;
    }
    /**
     * @return The field in the log that should be matched against the reference table.
     * 
     */
    public String logFieldPath() {
        return this.logFieldPath;
    }
    /**
     * @return The name of the query to filter.
     * 
     */
    public String ruleQueryName() {
        return this.ruleQueryName;
    }
    /**
     * @return The name of the reference table.
     * 
     */
    public String tableName() {
        return this.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityMonitoringRuleReferenceTable defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean checkPresence;
        private String columnName;
        private String logFieldPath;
        private String ruleQueryName;
        private String tableName;
        public Builder() {}
        public Builder(SecurityMonitoringRuleReferenceTable defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checkPresence = defaults.checkPresence;
    	      this.columnName = defaults.columnName;
    	      this.logFieldPath = defaults.logFieldPath;
    	      this.ruleQueryName = defaults.ruleQueryName;
    	      this.tableName = defaults.tableName;
        }

        @CustomType.Setter
        public Builder checkPresence(Boolean checkPresence) {
            if (checkPresence == null) {
              throw new MissingRequiredPropertyException("SecurityMonitoringRuleReferenceTable", "checkPresence");
            }
            this.checkPresence = checkPresence;
            return this;
        }
        @CustomType.Setter
        public Builder columnName(String columnName) {
            if (columnName == null) {
              throw new MissingRequiredPropertyException("SecurityMonitoringRuleReferenceTable", "columnName");
            }
            this.columnName = columnName;
            return this;
        }
        @CustomType.Setter
        public Builder logFieldPath(String logFieldPath) {
            if (logFieldPath == null) {
              throw new MissingRequiredPropertyException("SecurityMonitoringRuleReferenceTable", "logFieldPath");
            }
            this.logFieldPath = logFieldPath;
            return this;
        }
        @CustomType.Setter
        public Builder ruleQueryName(String ruleQueryName) {
            if (ruleQueryName == null) {
              throw new MissingRequiredPropertyException("SecurityMonitoringRuleReferenceTable", "ruleQueryName");
            }
            this.ruleQueryName = ruleQueryName;
            return this;
        }
        @CustomType.Setter
        public Builder tableName(String tableName) {
            if (tableName == null) {
              throw new MissingRequiredPropertyException("SecurityMonitoringRuleReferenceTable", "tableName");
            }
            this.tableName = tableName;
            return this;
        }
        public SecurityMonitoringRuleReferenceTable build() {
            final var _resultValue = new SecurityMonitoringRuleReferenceTable();
            _resultValue.checkPresence = checkPresence;
            _resultValue.columnName = columnName;
            _resultValue.logFieldPath = logFieldPath;
            _resultValue.ruleQueryName = ruleQueryName;
            _resultValue.tableName = tableName;
            return _resultValue;
        }
    }
}
