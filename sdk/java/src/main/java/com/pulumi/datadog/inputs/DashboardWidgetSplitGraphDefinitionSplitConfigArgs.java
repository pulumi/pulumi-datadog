// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.DashboardWidgetSplitGraphDefinitionSplitConfigSortArgs;
import com.pulumi.datadog.inputs.DashboardWidgetSplitGraphDefinitionSplitConfigSplitDimensionsArgs;
import com.pulumi.datadog.inputs.DashboardWidgetSplitGraphDefinitionSplitConfigStaticSplitArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetSplitGraphDefinitionSplitConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetSplitGraphDefinitionSplitConfigArgs Empty = new DashboardWidgetSplitGraphDefinitionSplitConfigArgs();

    /**
     * The maximum number of items in the group.
     * 
     */
    @Import(name="limit")
    private @Nullable Output<Integer> limit;

    /**
     * @return The maximum number of items in the group.
     * 
     */
    public Optional<Output<Integer>> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * The options for sorting group by results.
     * 
     */
    @Import(name="sort", required=true)
    private Output<DashboardWidgetSplitGraphDefinitionSplitConfigSortArgs> sort;

    /**
     * @return The options for sorting group by results.
     * 
     */
    public Output<DashboardWidgetSplitGraphDefinitionSplitConfigSortArgs> sort() {
        return this.sort;
    }

    /**
     * The property by which the graph splits
     * 
     */
    @Import(name="splitDimensions", required=true)
    private Output<DashboardWidgetSplitGraphDefinitionSplitConfigSplitDimensionsArgs> splitDimensions;

    /**
     * @return The property by which the graph splits
     * 
     */
    public Output<DashboardWidgetSplitGraphDefinitionSplitConfigSplitDimensionsArgs> splitDimensions() {
        return this.splitDimensions;
    }

    /**
     * The property by which the graph splits
     * 
     */
    @Import(name="staticSplits")
    private @Nullable Output<List<DashboardWidgetSplitGraphDefinitionSplitConfigStaticSplitArgs>> staticSplits;

    /**
     * @return The property by which the graph splits
     * 
     */
    public Optional<Output<List<DashboardWidgetSplitGraphDefinitionSplitConfigStaticSplitArgs>>> staticSplits() {
        return Optional.ofNullable(this.staticSplits);
    }

    private DashboardWidgetSplitGraphDefinitionSplitConfigArgs() {}

    private DashboardWidgetSplitGraphDefinitionSplitConfigArgs(DashboardWidgetSplitGraphDefinitionSplitConfigArgs $) {
        this.limit = $.limit;
        this.sort = $.sort;
        this.splitDimensions = $.splitDimensions;
        this.staticSplits = $.staticSplits;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetSplitGraphDefinitionSplitConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetSplitGraphDefinitionSplitConfigArgs $;

        public Builder() {
            $ = new DashboardWidgetSplitGraphDefinitionSplitConfigArgs();
        }

        public Builder(DashboardWidgetSplitGraphDefinitionSplitConfigArgs defaults) {
            $ = new DashboardWidgetSplitGraphDefinitionSplitConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param limit The maximum number of items in the group.
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable Output<Integer> limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param limit The maximum number of items in the group.
         * 
         * @return builder
         * 
         */
        public Builder limit(Integer limit) {
            return limit(Output.of(limit));
        }

        /**
         * @param sort The options for sorting group by results.
         * 
         * @return builder
         * 
         */
        public Builder sort(Output<DashboardWidgetSplitGraphDefinitionSplitConfigSortArgs> sort) {
            $.sort = sort;
            return this;
        }

        /**
         * @param sort The options for sorting group by results.
         * 
         * @return builder
         * 
         */
        public Builder sort(DashboardWidgetSplitGraphDefinitionSplitConfigSortArgs sort) {
            return sort(Output.of(sort));
        }

        /**
         * @param splitDimensions The property by which the graph splits
         * 
         * @return builder
         * 
         */
        public Builder splitDimensions(Output<DashboardWidgetSplitGraphDefinitionSplitConfigSplitDimensionsArgs> splitDimensions) {
            $.splitDimensions = splitDimensions;
            return this;
        }

        /**
         * @param splitDimensions The property by which the graph splits
         * 
         * @return builder
         * 
         */
        public Builder splitDimensions(DashboardWidgetSplitGraphDefinitionSplitConfigSplitDimensionsArgs splitDimensions) {
            return splitDimensions(Output.of(splitDimensions));
        }

        /**
         * @param staticSplits The property by which the graph splits
         * 
         * @return builder
         * 
         */
        public Builder staticSplits(@Nullable Output<List<DashboardWidgetSplitGraphDefinitionSplitConfigStaticSplitArgs>> staticSplits) {
            $.staticSplits = staticSplits;
            return this;
        }

        /**
         * @param staticSplits The property by which the graph splits
         * 
         * @return builder
         * 
         */
        public Builder staticSplits(List<DashboardWidgetSplitGraphDefinitionSplitConfigStaticSplitArgs> staticSplits) {
            return staticSplits(Output.of(staticSplits));
        }

        /**
         * @param staticSplits The property by which the graph splits
         * 
         * @return builder
         * 
         */
        public Builder staticSplits(DashboardWidgetSplitGraphDefinitionSplitConfigStaticSplitArgs... staticSplits) {
            return staticSplits(List.of(staticSplits));
        }

        public DashboardWidgetSplitGraphDefinitionSplitConfigArgs build() {
            if ($.sort == null) {
                throw new MissingRequiredPropertyException("DashboardWidgetSplitGraphDefinitionSplitConfigArgs", "sort");
            }
            if ($.splitDimensions == null) {
                throw new MissingRequiredPropertyException("DashboardWidgetSplitGraphDefinitionSplitConfigArgs", "splitDimensions");
            }
            return $;
        }
    }

}
