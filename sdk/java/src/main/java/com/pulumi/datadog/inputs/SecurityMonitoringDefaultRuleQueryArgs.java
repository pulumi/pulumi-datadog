// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.SecurityMonitoringDefaultRuleQueryAgentRuleArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityMonitoringDefaultRuleQueryArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityMonitoringDefaultRuleQueryArgs Empty = new SecurityMonitoringDefaultRuleQueryArgs();

    /**
     * **Deprecated**. It won&#39;t be applied anymore. **Deprecated.** `agent_rule` has been deprecated in favor of new Agent Rule resource.
     * 
     * @deprecated
     * `agent_rule` has been deprecated in favor of new Agent Rule resource.
     * 
     */
    @Deprecated /* `agent_rule` has been deprecated in favor of new Agent Rule resource. */
    @Import(name="agentRules")
    private @Nullable Output<List<SecurityMonitoringDefaultRuleQueryAgentRuleArgs>> agentRules;

    /**
     * @return **Deprecated**. It won&#39;t be applied anymore. **Deprecated.** `agent_rule` has been deprecated in favor of new Agent Rule resource.
     * 
     * @deprecated
     * `agent_rule` has been deprecated in favor of new Agent Rule resource.
     * 
     */
    @Deprecated /* `agent_rule` has been deprecated in favor of new Agent Rule resource. */
    public Optional<Output<List<SecurityMonitoringDefaultRuleQueryAgentRuleArgs>>> agentRules() {
        return Optional.ofNullable(this.agentRules);
    }

    /**
     * The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are `count`, `cardinality`, `sum`, `max`, `new_value`, `geo_data`, `event_count`, `none`.
     * 
     */
    @Import(name="aggregation")
    private @Nullable Output<String> aggregation;

    /**
     * @return The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are `count`, `cardinality`, `sum`, `max`, `new_value`, `geo_data`, `event_count`, `none`.
     * 
     */
    public Optional<Output<String>> aggregation() {
        return Optional.ofNullable(this.aggregation);
    }

    /**
     * Query extension to append to the logs query.
     * 
     */
    @Import(name="customQueryExtension")
    private @Nullable Output<String> customQueryExtension;

    /**
     * @return Query extension to append to the logs query.
     * 
     */
    public Optional<Output<String>> customQueryExtension() {
        return Optional.ofNullable(this.customQueryExtension);
    }

    /**
     * Source of events. Valid values are `logs`, `audit`, `app_sec_spans`, `spans`, `security_runtime`, `network`, `events`.
     * 
     */
    @Import(name="dataSource")
    private @Nullable Output<String> dataSource;

    /**
     * @return Source of events. Valid values are `logs`, `audit`, `app_sec_spans`, `spans`, `security_runtime`, `network`, `events`.
     * 
     */
    public Optional<Output<String>> dataSource() {
        return Optional.ofNullable(this.dataSource);
    }

    /**
     * Field for which the cardinality is measured. Sent as an array.
     * 
     */
    @Import(name="distinctFields")
    private @Nullable Output<List<String>> distinctFields;

    /**
     * @return Field for which the cardinality is measured. Sent as an array.
     * 
     */
    public Optional<Output<List<String>>> distinctFields() {
        return Optional.ofNullable(this.distinctFields);
    }

    /**
     * Fields to group by.
     * 
     */
    @Import(name="groupByFields")
    private @Nullable Output<List<String>> groupByFields;

    /**
     * @return Fields to group by.
     * 
     */
    public Optional<Output<List<String>>> groupByFields() {
        return Optional.ofNullable(this.groupByFields);
    }

    /**
     * When false, events without a group-by value are ignored by the rule. When true, events with missing group-by fields are processed with `N/A`, replacing the missing values.
     * 
     */
    @Import(name="hasOptionalGroupByFields")
    private @Nullable Output<Boolean> hasOptionalGroupByFields;

    /**
     * @return When false, events without a group-by value are ignored by the rule. When true, events with missing group-by fields are processed with `N/A`, replacing the missing values.
     * 
     */
    public Optional<Output<Boolean>> hasOptionalGroupByFields() {
        return Optional.ofNullable(this.hasOptionalGroupByFields);
    }

    /**
     * The target field to aggregate over when using the `sum`, `max`, or `geo_data` aggregations. **Deprecated.** Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
     * 
     * @deprecated
     * Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
     * 
     */
    @Deprecated /* Configure `metrics` instead. This attribute will be removed in the next major version of the provider. */
    @Import(name="metric")
    private @Nullable Output<String> metric;

    /**
     * @return The target field to aggregate over when using the `sum`, `max`, or `geo_data` aggregations. **Deprecated.** Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
     * 
     * @deprecated
     * Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
     * 
     */
    @Deprecated /* Configure `metrics` instead. This attribute will be removed in the next major version of the provider. */
    public Optional<Output<String>> metric() {
        return Optional.ofNullable(this.metric);
    }

    /**
     * Group of target fields to aggregate over when using the `sum`, `max`, `geo_data`, or `new_value` aggregations. The `sum`, `max`, and `geo_data` aggregations only accept one value in this list, whereas the `new_value` aggregation accepts up to five values.
     * 
     */
    @Import(name="metrics")
    private @Nullable Output<List<String>> metrics;

    /**
     * @return Group of target fields to aggregate over when using the `sum`, `max`, `geo_data`, or `new_value` aggregations. The `sum`, `max`, and `geo_data` aggregations only accept one value in this list, whereas the `new_value` aggregation accepts up to five values.
     * 
     */
    public Optional<Output<List<String>>> metrics() {
        return Optional.ofNullable(this.metrics);
    }

    /**
     * Name of the query. Not compatible with `new_value` aggregations.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the query. Not compatible with `new_value` aggregations.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Query to run on logs.
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return Query to run on logs.
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    private SecurityMonitoringDefaultRuleQueryArgs() {}

    private SecurityMonitoringDefaultRuleQueryArgs(SecurityMonitoringDefaultRuleQueryArgs $) {
        this.agentRules = $.agentRules;
        this.aggregation = $.aggregation;
        this.customQueryExtension = $.customQueryExtension;
        this.dataSource = $.dataSource;
        this.distinctFields = $.distinctFields;
        this.groupByFields = $.groupByFields;
        this.hasOptionalGroupByFields = $.hasOptionalGroupByFields;
        this.metric = $.metric;
        this.metrics = $.metrics;
        this.name = $.name;
        this.query = $.query;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityMonitoringDefaultRuleQueryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityMonitoringDefaultRuleQueryArgs $;

        public Builder() {
            $ = new SecurityMonitoringDefaultRuleQueryArgs();
        }

        public Builder(SecurityMonitoringDefaultRuleQueryArgs defaults) {
            $ = new SecurityMonitoringDefaultRuleQueryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentRules **Deprecated**. It won&#39;t be applied anymore. **Deprecated.** `agent_rule` has been deprecated in favor of new Agent Rule resource.
         * 
         * @return builder
         * 
         * @deprecated
         * `agent_rule` has been deprecated in favor of new Agent Rule resource.
         * 
         */
        @Deprecated /* `agent_rule` has been deprecated in favor of new Agent Rule resource. */
        public Builder agentRules(@Nullable Output<List<SecurityMonitoringDefaultRuleQueryAgentRuleArgs>> agentRules) {
            $.agentRules = agentRules;
            return this;
        }

        /**
         * @param agentRules **Deprecated**. It won&#39;t be applied anymore. **Deprecated.** `agent_rule` has been deprecated in favor of new Agent Rule resource.
         * 
         * @return builder
         * 
         * @deprecated
         * `agent_rule` has been deprecated in favor of new Agent Rule resource.
         * 
         */
        @Deprecated /* `agent_rule` has been deprecated in favor of new Agent Rule resource. */
        public Builder agentRules(List<SecurityMonitoringDefaultRuleQueryAgentRuleArgs> agentRules) {
            return agentRules(Output.of(agentRules));
        }

        /**
         * @param agentRules **Deprecated**. It won&#39;t be applied anymore. **Deprecated.** `agent_rule` has been deprecated in favor of new Agent Rule resource.
         * 
         * @return builder
         * 
         * @deprecated
         * `agent_rule` has been deprecated in favor of new Agent Rule resource.
         * 
         */
        @Deprecated /* `agent_rule` has been deprecated in favor of new Agent Rule resource. */
        public Builder agentRules(SecurityMonitoringDefaultRuleQueryAgentRuleArgs... agentRules) {
            return agentRules(List.of(agentRules));
        }

        /**
         * @param aggregation The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are `count`, `cardinality`, `sum`, `max`, `new_value`, `geo_data`, `event_count`, `none`.
         * 
         * @return builder
         * 
         */
        public Builder aggregation(@Nullable Output<String> aggregation) {
            $.aggregation = aggregation;
            return this;
        }

        /**
         * @param aggregation The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are `count`, `cardinality`, `sum`, `max`, `new_value`, `geo_data`, `event_count`, `none`.
         * 
         * @return builder
         * 
         */
        public Builder aggregation(String aggregation) {
            return aggregation(Output.of(aggregation));
        }

        /**
         * @param customQueryExtension Query extension to append to the logs query.
         * 
         * @return builder
         * 
         */
        public Builder customQueryExtension(@Nullable Output<String> customQueryExtension) {
            $.customQueryExtension = customQueryExtension;
            return this;
        }

        /**
         * @param customQueryExtension Query extension to append to the logs query.
         * 
         * @return builder
         * 
         */
        public Builder customQueryExtension(String customQueryExtension) {
            return customQueryExtension(Output.of(customQueryExtension));
        }

        /**
         * @param dataSource Source of events. Valid values are `logs`, `audit`, `app_sec_spans`, `spans`, `security_runtime`, `network`, `events`.
         * 
         * @return builder
         * 
         */
        public Builder dataSource(@Nullable Output<String> dataSource) {
            $.dataSource = dataSource;
            return this;
        }

        /**
         * @param dataSource Source of events. Valid values are `logs`, `audit`, `app_sec_spans`, `spans`, `security_runtime`, `network`, `events`.
         * 
         * @return builder
         * 
         */
        public Builder dataSource(String dataSource) {
            return dataSource(Output.of(dataSource));
        }

        /**
         * @param distinctFields Field for which the cardinality is measured. Sent as an array.
         * 
         * @return builder
         * 
         */
        public Builder distinctFields(@Nullable Output<List<String>> distinctFields) {
            $.distinctFields = distinctFields;
            return this;
        }

        /**
         * @param distinctFields Field for which the cardinality is measured. Sent as an array.
         * 
         * @return builder
         * 
         */
        public Builder distinctFields(List<String> distinctFields) {
            return distinctFields(Output.of(distinctFields));
        }

        /**
         * @param distinctFields Field for which the cardinality is measured. Sent as an array.
         * 
         * @return builder
         * 
         */
        public Builder distinctFields(String... distinctFields) {
            return distinctFields(List.of(distinctFields));
        }

        /**
         * @param groupByFields Fields to group by.
         * 
         * @return builder
         * 
         */
        public Builder groupByFields(@Nullable Output<List<String>> groupByFields) {
            $.groupByFields = groupByFields;
            return this;
        }

        /**
         * @param groupByFields Fields to group by.
         * 
         * @return builder
         * 
         */
        public Builder groupByFields(List<String> groupByFields) {
            return groupByFields(Output.of(groupByFields));
        }

        /**
         * @param groupByFields Fields to group by.
         * 
         * @return builder
         * 
         */
        public Builder groupByFields(String... groupByFields) {
            return groupByFields(List.of(groupByFields));
        }

        /**
         * @param hasOptionalGroupByFields When false, events without a group-by value are ignored by the rule. When true, events with missing group-by fields are processed with `N/A`, replacing the missing values.
         * 
         * @return builder
         * 
         */
        public Builder hasOptionalGroupByFields(@Nullable Output<Boolean> hasOptionalGroupByFields) {
            $.hasOptionalGroupByFields = hasOptionalGroupByFields;
            return this;
        }

        /**
         * @param hasOptionalGroupByFields When false, events without a group-by value are ignored by the rule. When true, events with missing group-by fields are processed with `N/A`, replacing the missing values.
         * 
         * @return builder
         * 
         */
        public Builder hasOptionalGroupByFields(Boolean hasOptionalGroupByFields) {
            return hasOptionalGroupByFields(Output.of(hasOptionalGroupByFields));
        }

        /**
         * @param metric The target field to aggregate over when using the `sum`, `max`, or `geo_data` aggregations. **Deprecated.** Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
         * 
         * @return builder
         * 
         * @deprecated
         * Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
         * 
         */
        @Deprecated /* Configure `metrics` instead. This attribute will be removed in the next major version of the provider. */
        public Builder metric(@Nullable Output<String> metric) {
            $.metric = metric;
            return this;
        }

        /**
         * @param metric The target field to aggregate over when using the `sum`, `max`, or `geo_data` aggregations. **Deprecated.** Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
         * 
         * @return builder
         * 
         * @deprecated
         * Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
         * 
         */
        @Deprecated /* Configure `metrics` instead. This attribute will be removed in the next major version of the provider. */
        public Builder metric(String metric) {
            return metric(Output.of(metric));
        }

        /**
         * @param metrics Group of target fields to aggregate over when using the `sum`, `max`, `geo_data`, or `new_value` aggregations. The `sum`, `max`, and `geo_data` aggregations only accept one value in this list, whereas the `new_value` aggregation accepts up to five values.
         * 
         * @return builder
         * 
         */
        public Builder metrics(@Nullable Output<List<String>> metrics) {
            $.metrics = metrics;
            return this;
        }

        /**
         * @param metrics Group of target fields to aggregate over when using the `sum`, `max`, `geo_data`, or `new_value` aggregations. The `sum`, `max`, and `geo_data` aggregations only accept one value in this list, whereas the `new_value` aggregation accepts up to five values.
         * 
         * @return builder
         * 
         */
        public Builder metrics(List<String> metrics) {
            return metrics(Output.of(metrics));
        }

        /**
         * @param metrics Group of target fields to aggregate over when using the `sum`, `max`, `geo_data`, or `new_value` aggregations. The `sum`, `max`, and `geo_data` aggregations only accept one value in this list, whereas the `new_value` aggregation accepts up to five values.
         * 
         * @return builder
         * 
         */
        public Builder metrics(String... metrics) {
            return metrics(List.of(metrics));
        }

        /**
         * @param name Name of the query. Not compatible with `new_value` aggregations.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the query. Not compatible with `new_value` aggregations.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param query Query to run on logs.
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query Query to run on logs.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        public SecurityMonitoringDefaultRuleQueryArgs build() {
            return $;
        }
    }

}
