// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.datadog.ServiceDefinitionYamlArgs;
import com.pulumi.datadog.Utilities;
import com.pulumi.datadog.inputs.ServiceDefinitionYamlState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a Datadog service definition resource. This can be used to create and manage Datadog service definitions in the service catalog using the YAML/JSON definition.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.datadog.ServiceDefinitionYaml;
 * import com.pulumi.datadog.ServiceDefinitionYamlArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Service Definition with v2.2 Schema Definition
 *         var serviceDefinitionV22 = new ServiceDefinitionYaml("serviceDefinitionV22", ServiceDefinitionYamlArgs.builder()
 *             .serviceDefinition("""
 * schema-version: v2.2
 * dd-service: shopping-cart
 * team: e-commerce-team
 * contacts:
 *   - name: Support Email
 *     type: email
 *     contact: team{@literal @}shopping.com
 *   - name: Support Slack
 *     type: slack
 *     contact: https://www.slack.com/archives/shopping-cart
 * description: shopping cart service responsible for managing shopping carts
 * tier: high
 * lifecycle: production
 * application: e-commerce
 * languages: 
 *   - go
 *   - python
 * type: web 
 * ci-pipeline-fingerprints:
 *   - fp1 
 *   - fp2 
 * links:
 *   - name: shopping-cart runbook
 *     type: runbook
 *     url: https://runbook/shopping-cart
 *   - name: shopping-cart architecture
 *     type: doc
 *     provider: gdoc
 *     url: https://google.drive/shopping-cart-architecture
 *   - name: shopping-cart service Wiki
 *     type: doc
 *     provider: wiki
 *     url: https://wiki/shopping-cart
 *   - name: shopping-cart source code
 *     type: repo
 *     provider: github
 *     url: http://github/shopping-cart
 * tags:
 *   - business-unit:retail
 *   - cost-center:engineering
 * integrations:
 *   pagerduty: 
 *     service-url: https://www.pagerduty.com/service-directory/Pshopping-cart
 * extensions:
 *   mycompany.com/shopping-cart:
 *     customField: customValue
 *             """)
 *             .build());
 * 
 *         // Service Definition with v2.1 Schema Definition
 *         var serviceDefinitionV21 = new ServiceDefinitionYaml("serviceDefinitionV21", ServiceDefinitionYamlArgs.builder()
 *             .serviceDefinition("""
 * schema-version: v2.1
 * dd-service: shopping-cart
 * team: e-commerce-team
 * contacts:
 *   - name: Support Email
 *     type: email
 *     contact: team{@literal @}shopping.com
 *   - name: Support Slack
 *     type: slack
 *     contact: https://www.slack.com/archives/shopping-cart
 * description: shopping cart service responsible for managing shopping carts
 * tier: high
 * lifecycle: production
 * application: e-commerce
 * links:
 *   - name: shopping-cart runbook
 *     type: runbook
 *     url: https://runbook/shopping-cart
 *   - name: shopping-cart architecture
 *     type: doc
 *     provider: gdoc
 *     url: https://google.drive/shopping-cart-architecture
 *   - name: shopping-cart service Wiki
 *     type: doc
 *     provider: wiki
 *     url: https://wiki/shopping-cart
 *   - name: shopping-cart source code
 *     type: repo
 *     provider: github
 *     url: http://github/shopping-cart
 * tags:
 *   - business-unit:retail
 *   - cost-center:engineering
 * integrations:
 *   pagerduty: 
 *     service-url: https://www.pagerduty.com/service-directory/Pshopping-cart
 * extensions:
 *   mycompany.com/shopping-cart:
 *     customField: customValue
 *             """)
 *             .build());
 * 
 *         // Service Definition with v2 Schema Definition
 *         var serviceDefinitionV2 = new ServiceDefinitionYaml("serviceDefinitionV2", ServiceDefinitionYamlArgs.builder()
 *             .serviceDefinition("""
 * schema-version: v2
 * dd-service: shopping-cart
 * team: E Commerce
 * contacts:
 *   - name: Support Email
 *     type: email
 *     contact: team{@literal @}shopping.com
 *   - name: Support Slack
 *     type: slack
 *     contact: https://www.slack.com/archives/shopping-cart
 * repos:
 *   - name: shopping-cart source code
 *     provider: github
 *     url: http://github/shopping-cart
 * docs:
 *   - name: shopping-cart architecture
 *     provider: gdoc
 *     url: https://google.drive/shopping-cart-architecture
 *   - name: shopping-cart service Wiki
 *     provider: wiki
 *     url: https://wiki/shopping-cart
 * links:
 *   - name: shopping-cart runbook
 *     type: runbook
 *     url: https://runbook/shopping-cart
 * tags:
 *   - business-unit:retail
 *   - cost-center:engineering
 * integrations:
 *   pagerduty: https://www.pagerduty.com/service-directory/Pshopping-cart
 * extensions:
 *   datadoghq.com/shopping-cart:
 *     customField: customValue
 *             """)
 *             .build());
 * 
 *         // Service Definition with backstage.io Schema
 *         var serviceDefinitionBackstage = new ServiceDefinitionYaml("serviceDefinitionBackstage", ServiceDefinitionYamlArgs.builder()
 *             .serviceDefinition("""
 * apiVersion: backstage.io/v1alpha1
 * kind: Component
 * metadata:
 *   annotations:
 *     backstage.io/techdocs-ref: http://a/b/c
 *     some.annotation: value
 *   namespace: default
 *   name: shopping-cart
 *   title: Shopping Cart
 *   description: A shopping cart service
 *   tags: ["taga:valuea", "tagb:valueb"]
 *   links:
 *     - title: Wiki
 *       url: https://wiki/shopping-cart
 *       icon: help
 *   ignore-attribute:
 *     id: 1
 *     value: "value"
 * spec:
 *   type: service
 *   lifecycle: production
 *   owner: e-commerce
 *   system: retail
 *             """)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import datadog:index/serviceDefinitionYaml:ServiceDefinitionYaml service_definition &#34;&lt;dd-service&gt;&#34;
 * ```
 * 
 */
@ResourceType(type="datadog:index/serviceDefinitionYaml:ServiceDefinitionYaml")
public class ServiceDefinitionYaml extends com.pulumi.resources.CustomResource {
    /**
     * The YAML/JSON formatted definition of the service
     * 
     */
    @Export(name="serviceDefinition", refs={String.class}, tree="[0]")
    private Output<String> serviceDefinition;

    /**
     * @return The YAML/JSON formatted definition of the service
     * 
     */
    public Output<String> serviceDefinition() {
        return this.serviceDefinition;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServiceDefinitionYaml(String name) {
        this(name, ServiceDefinitionYamlArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServiceDefinitionYaml(String name, ServiceDefinitionYamlArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServiceDefinitionYaml(String name, ServiceDefinitionYamlArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("datadog:index/serviceDefinitionYaml:ServiceDefinitionYaml", name, args == null ? ServiceDefinitionYamlArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ServiceDefinitionYaml(String name, Output<String> id, @Nullable ServiceDefinitionYamlState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("datadog:index/serviceDefinitionYaml:ServiceDefinitionYaml", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServiceDefinitionYaml get(String name, Output<String> id, @Nullable ServiceDefinitionYamlState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ServiceDefinitionYaml(name, id, state, options);
    }
}
