// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.PowerpackWidgetQueryTableDefinitionRequestApmQueryArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetQueryTableDefinitionRequestApmStatsQueryArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetQueryTableDefinitionRequestConditionalFormatArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetQueryTableDefinitionRequestFormulaArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetQueryTableDefinitionRequestLogQueryArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetQueryTableDefinitionRequestProcessQueryArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetQueryTableDefinitionRequestQueryArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetQueryTableDefinitionRequestRumQueryArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetQueryTableDefinitionRequestSecurityQueryArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetQueryTableDefinitionRequestTextFormatArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PowerpackWidgetQueryTableDefinitionRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final PowerpackWidgetQueryTableDefinitionRequestArgs Empty = new PowerpackWidgetQueryTableDefinitionRequestArgs();

    /**
     * The aggregator to use for time aggregation. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
     * 
     */
    @Import(name="aggregator")
    private @Nullable Output<String> aggregator;

    /**
     * @return The aggregator to use for time aggregation. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
     * 
     */
    public Optional<Output<String>> aggregator() {
        return Optional.ofNullable(this.aggregator);
    }

    /**
     * The alias for the column name (defaults to metric name).
     * 
     */
    @Import(name="alias")
    private @Nullable Output<String> alias;

    /**
     * @return The alias for the column name (defaults to metric name).
     * 
     */
    public Optional<Output<String>> alias() {
        return Optional.ofNullable(this.alias);
    }

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="apmQuery")
    private @Nullable Output<PowerpackWidgetQueryTableDefinitionRequestApmQueryArgs> apmQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<PowerpackWidgetQueryTableDefinitionRequestApmQueryArgs>> apmQuery() {
        return Optional.ofNullable(this.apmQuery);
    }

    @Import(name="apmStatsQuery")
    private @Nullable Output<PowerpackWidgetQueryTableDefinitionRequestApmStatsQueryArgs> apmStatsQuery;

    public Optional<Output<PowerpackWidgetQueryTableDefinitionRequestApmStatsQueryArgs>> apmStatsQuery() {
        return Optional.ofNullable(this.apmStatsQuery);
    }

    /**
     * A list of display modes for each table cell. List items one of `number`, `bar`. Valid values are `number`, `bar`.
     * 
     */
    @Import(name="cellDisplayModes")
    private @Nullable Output<List<String>> cellDisplayModes;

    /**
     * @return A list of display modes for each table cell. List items one of `number`, `bar`. Valid values are `number`, `bar`.
     * 
     */
    public Optional<Output<List<String>>> cellDisplayModes() {
        return Optional.ofNullable(this.cellDisplayModes);
    }

    /**
     * Conditional formats allow you to set the color of your widget content or background, depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
     * 
     */
    @Import(name="conditionalFormats")
    private @Nullable Output<List<PowerpackWidgetQueryTableDefinitionRequestConditionalFormatArgs>> conditionalFormats;

    /**
     * @return Conditional formats allow you to set the color of your widget content or background, depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
     * 
     */
    public Optional<Output<List<PowerpackWidgetQueryTableDefinitionRequestConditionalFormatArgs>>> conditionalFormats() {
        return Optional.ofNullable(this.conditionalFormats);
    }

    @Import(name="formulas")
    private @Nullable Output<List<PowerpackWidgetQueryTableDefinitionRequestFormulaArgs>> formulas;

    public Optional<Output<List<PowerpackWidgetQueryTableDefinitionRequestFormulaArgs>>> formulas() {
        return Optional.ofNullable(this.formulas);
    }

    /**
     * The number of lines to show in the table.
     * 
     */
    @Import(name="limit")
    private @Nullable Output<Integer> limit;

    /**
     * @return The number of lines to show in the table.
     * 
     */
    public Optional<Output<Integer>> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="logQuery")
    private @Nullable Output<PowerpackWidgetQueryTableDefinitionRequestLogQueryArgs> logQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<PowerpackWidgetQueryTableDefinitionRequestLogQueryArgs>> logQuery() {
        return Optional.ofNullable(this.logQuery);
    }

    /**
     * The sort order for the rows. Valid values are `asc`, `desc`.
     * 
     */
    @Import(name="order")
    private @Nullable Output<String> order;

    /**
     * @return The sort order for the rows. Valid values are `asc`, `desc`.
     * 
     */
    public Optional<Output<String>> order() {
        return Optional.ofNullable(this.order);
    }

    /**
     * The process query to use in the widget. The structure of this block is described below.
     * 
     */
    @Import(name="processQuery")
    private @Nullable Output<PowerpackWidgetQueryTableDefinitionRequestProcessQueryArgs> processQuery;

    /**
     * @return The process query to use in the widget. The structure of this block is described below.
     * 
     */
    public Optional<Output<PowerpackWidgetQueryTableDefinitionRequestProcessQueryArgs>> processQuery() {
        return Optional.ofNullable(this.processQuery);
    }

    /**
     * The metric query to use for this widget.
     * 
     */
    @Import(name="q")
    private @Nullable Output<String> q;

    /**
     * @return The metric query to use for this widget.
     * 
     */
    public Optional<Output<String>> q() {
        return Optional.ofNullable(this.q);
    }

    @Import(name="queries")
    private @Nullable Output<List<PowerpackWidgetQueryTableDefinitionRequestQueryArgs>> queries;

    public Optional<Output<List<PowerpackWidgetQueryTableDefinitionRequestQueryArgs>>> queries() {
        return Optional.ofNullable(this.queries);
    }

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="rumQuery")
    private @Nullable Output<PowerpackWidgetQueryTableDefinitionRequestRumQueryArgs> rumQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<PowerpackWidgetQueryTableDefinitionRequestRumQueryArgs>> rumQuery() {
        return Optional.ofNullable(this.rumQuery);
    }

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="securityQuery")
    private @Nullable Output<PowerpackWidgetQueryTableDefinitionRequestSecurityQueryArgs> securityQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<PowerpackWidgetQueryTableDefinitionRequestSecurityQueryArgs>> securityQuery() {
        return Optional.ofNullable(this.securityQuery);
    }

    /**
     * Text formats define how to format text in table widget content. Multiple `text_formats` blocks are allowed using the structure below. This resource is in beta and is subject to change.
     * 
     */
    @Import(name="textFormats")
    private @Nullable Output<List<PowerpackWidgetQueryTableDefinitionRequestTextFormatArgs>> textFormats;

    /**
     * @return Text formats define how to format text in table widget content. Multiple `text_formats` blocks are allowed using the structure below. This resource is in beta and is subject to change.
     * 
     */
    public Optional<Output<List<PowerpackWidgetQueryTableDefinitionRequestTextFormatArgs>>> textFormats() {
        return Optional.ofNullable(this.textFormats);
    }

    private PowerpackWidgetQueryTableDefinitionRequestArgs() {}

    private PowerpackWidgetQueryTableDefinitionRequestArgs(PowerpackWidgetQueryTableDefinitionRequestArgs $) {
        this.aggregator = $.aggregator;
        this.alias = $.alias;
        this.apmQuery = $.apmQuery;
        this.apmStatsQuery = $.apmStatsQuery;
        this.cellDisplayModes = $.cellDisplayModes;
        this.conditionalFormats = $.conditionalFormats;
        this.formulas = $.formulas;
        this.limit = $.limit;
        this.logQuery = $.logQuery;
        this.order = $.order;
        this.processQuery = $.processQuery;
        this.q = $.q;
        this.queries = $.queries;
        this.rumQuery = $.rumQuery;
        this.securityQuery = $.securityQuery;
        this.textFormats = $.textFormats;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PowerpackWidgetQueryTableDefinitionRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PowerpackWidgetQueryTableDefinitionRequestArgs $;

        public Builder() {
            $ = new PowerpackWidgetQueryTableDefinitionRequestArgs();
        }

        public Builder(PowerpackWidgetQueryTableDefinitionRequestArgs defaults) {
            $ = new PowerpackWidgetQueryTableDefinitionRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregator The aggregator to use for time aggregation. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
         * 
         * @return builder
         * 
         */
        public Builder aggregator(@Nullable Output<String> aggregator) {
            $.aggregator = aggregator;
            return this;
        }

        /**
         * @param aggregator The aggregator to use for time aggregation. Valid values are `avg`, `last`, `max`, `min`, `sum`, `percentile`.
         * 
         * @return builder
         * 
         */
        public Builder aggregator(String aggregator) {
            return aggregator(Output.of(aggregator));
        }

        /**
         * @param alias The alias for the column name (defaults to metric name).
         * 
         * @return builder
         * 
         */
        public Builder alias(@Nullable Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias The alias for the column name (defaults to metric name).
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param apmQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder apmQuery(@Nullable Output<PowerpackWidgetQueryTableDefinitionRequestApmQueryArgs> apmQuery) {
            $.apmQuery = apmQuery;
            return this;
        }

        /**
         * @param apmQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder apmQuery(PowerpackWidgetQueryTableDefinitionRequestApmQueryArgs apmQuery) {
            return apmQuery(Output.of(apmQuery));
        }

        public Builder apmStatsQuery(@Nullable Output<PowerpackWidgetQueryTableDefinitionRequestApmStatsQueryArgs> apmStatsQuery) {
            $.apmStatsQuery = apmStatsQuery;
            return this;
        }

        public Builder apmStatsQuery(PowerpackWidgetQueryTableDefinitionRequestApmStatsQueryArgs apmStatsQuery) {
            return apmStatsQuery(Output.of(apmStatsQuery));
        }

        /**
         * @param cellDisplayModes A list of display modes for each table cell. List items one of `number`, `bar`. Valid values are `number`, `bar`.
         * 
         * @return builder
         * 
         */
        public Builder cellDisplayModes(@Nullable Output<List<String>> cellDisplayModes) {
            $.cellDisplayModes = cellDisplayModes;
            return this;
        }

        /**
         * @param cellDisplayModes A list of display modes for each table cell. List items one of `number`, `bar`. Valid values are `number`, `bar`.
         * 
         * @return builder
         * 
         */
        public Builder cellDisplayModes(List<String> cellDisplayModes) {
            return cellDisplayModes(Output.of(cellDisplayModes));
        }

        /**
         * @param cellDisplayModes A list of display modes for each table cell. List items one of `number`, `bar`. Valid values are `number`, `bar`.
         * 
         * @return builder
         * 
         */
        public Builder cellDisplayModes(String... cellDisplayModes) {
            return cellDisplayModes(List.of(cellDisplayModes));
        }

        /**
         * @param conditionalFormats Conditional formats allow you to set the color of your widget content or background, depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
         * 
         * @return builder
         * 
         */
        public Builder conditionalFormats(@Nullable Output<List<PowerpackWidgetQueryTableDefinitionRequestConditionalFormatArgs>> conditionalFormats) {
            $.conditionalFormats = conditionalFormats;
            return this;
        }

        /**
         * @param conditionalFormats Conditional formats allow you to set the color of your widget content or background, depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
         * 
         * @return builder
         * 
         */
        public Builder conditionalFormats(List<PowerpackWidgetQueryTableDefinitionRequestConditionalFormatArgs> conditionalFormats) {
            return conditionalFormats(Output.of(conditionalFormats));
        }

        /**
         * @param conditionalFormats Conditional formats allow you to set the color of your widget content or background, depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
         * 
         * @return builder
         * 
         */
        public Builder conditionalFormats(PowerpackWidgetQueryTableDefinitionRequestConditionalFormatArgs... conditionalFormats) {
            return conditionalFormats(List.of(conditionalFormats));
        }

        public Builder formulas(@Nullable Output<List<PowerpackWidgetQueryTableDefinitionRequestFormulaArgs>> formulas) {
            $.formulas = formulas;
            return this;
        }

        public Builder formulas(List<PowerpackWidgetQueryTableDefinitionRequestFormulaArgs> formulas) {
            return formulas(Output.of(formulas));
        }

        public Builder formulas(PowerpackWidgetQueryTableDefinitionRequestFormulaArgs... formulas) {
            return formulas(List.of(formulas));
        }

        /**
         * @param limit The number of lines to show in the table.
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable Output<Integer> limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param limit The number of lines to show in the table.
         * 
         * @return builder
         * 
         */
        public Builder limit(Integer limit) {
            return limit(Output.of(limit));
        }

        /**
         * @param logQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder logQuery(@Nullable Output<PowerpackWidgetQueryTableDefinitionRequestLogQueryArgs> logQuery) {
            $.logQuery = logQuery;
            return this;
        }

        /**
         * @param logQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder logQuery(PowerpackWidgetQueryTableDefinitionRequestLogQueryArgs logQuery) {
            return logQuery(Output.of(logQuery));
        }

        /**
         * @param order The sort order for the rows. Valid values are `asc`, `desc`.
         * 
         * @return builder
         * 
         */
        public Builder order(@Nullable Output<String> order) {
            $.order = order;
            return this;
        }

        /**
         * @param order The sort order for the rows. Valid values are `asc`, `desc`.
         * 
         * @return builder
         * 
         */
        public Builder order(String order) {
            return order(Output.of(order));
        }

        /**
         * @param processQuery The process query to use in the widget. The structure of this block is described below.
         * 
         * @return builder
         * 
         */
        public Builder processQuery(@Nullable Output<PowerpackWidgetQueryTableDefinitionRequestProcessQueryArgs> processQuery) {
            $.processQuery = processQuery;
            return this;
        }

        /**
         * @param processQuery The process query to use in the widget. The structure of this block is described below.
         * 
         * @return builder
         * 
         */
        public Builder processQuery(PowerpackWidgetQueryTableDefinitionRequestProcessQueryArgs processQuery) {
            return processQuery(Output.of(processQuery));
        }

        /**
         * @param q The metric query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder q(@Nullable Output<String> q) {
            $.q = q;
            return this;
        }

        /**
         * @param q The metric query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder q(String q) {
            return q(Output.of(q));
        }

        public Builder queries(@Nullable Output<List<PowerpackWidgetQueryTableDefinitionRequestQueryArgs>> queries) {
            $.queries = queries;
            return this;
        }

        public Builder queries(List<PowerpackWidgetQueryTableDefinitionRequestQueryArgs> queries) {
            return queries(Output.of(queries));
        }

        public Builder queries(PowerpackWidgetQueryTableDefinitionRequestQueryArgs... queries) {
            return queries(List.of(queries));
        }

        /**
         * @param rumQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder rumQuery(@Nullable Output<PowerpackWidgetQueryTableDefinitionRequestRumQueryArgs> rumQuery) {
            $.rumQuery = rumQuery;
            return this;
        }

        /**
         * @param rumQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder rumQuery(PowerpackWidgetQueryTableDefinitionRequestRumQueryArgs rumQuery) {
            return rumQuery(Output.of(rumQuery));
        }

        /**
         * @param securityQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder securityQuery(@Nullable Output<PowerpackWidgetQueryTableDefinitionRequestSecurityQueryArgs> securityQuery) {
            $.securityQuery = securityQuery;
            return this;
        }

        /**
         * @param securityQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder securityQuery(PowerpackWidgetQueryTableDefinitionRequestSecurityQueryArgs securityQuery) {
            return securityQuery(Output.of(securityQuery));
        }

        /**
         * @param textFormats Text formats define how to format text in table widget content. Multiple `text_formats` blocks are allowed using the structure below. This resource is in beta and is subject to change.
         * 
         * @return builder
         * 
         */
        public Builder textFormats(@Nullable Output<List<PowerpackWidgetQueryTableDefinitionRequestTextFormatArgs>> textFormats) {
            $.textFormats = textFormats;
            return this;
        }

        /**
         * @param textFormats Text formats define how to format text in table widget content. Multiple `text_formats` blocks are allowed using the structure below. This resource is in beta and is subject to change.
         * 
         * @return builder
         * 
         */
        public Builder textFormats(List<PowerpackWidgetQueryTableDefinitionRequestTextFormatArgs> textFormats) {
            return textFormats(Output.of(textFormats));
        }

        /**
         * @param textFormats Text formats define how to format text in table widget content. Multiple `text_formats` blocks are allowed using the structure below. This resource is in beta and is subject to change.
         * 
         * @return builder
         * 
         */
        public Builder textFormats(PowerpackWidgetQueryTableDefinitionRequestTextFormatArgs... textFormats) {
            return textFormats(List.of(textFormats));
        }

        public PowerpackWidgetQueryTableDefinitionRequestArgs build() {
            return $;
        }
    }

}
