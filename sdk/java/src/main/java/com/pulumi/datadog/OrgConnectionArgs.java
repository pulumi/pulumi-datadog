// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class OrgConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrgConnectionArgs Empty = new OrgConnectionArgs();

    /**
     * Set of connection types to enable for this connection (., metrics, logs).
     * 
     */
    @Import(name="connectionTypes", required=true)
    private Output<List<String>> connectionTypes;

    /**
     * @return Set of connection types to enable for this connection (., metrics, logs).
     * 
     */
    public Output<List<String>> connectionTypes() {
        return this.connectionTypes;
    }

    /**
     * UUID of the sink (destination) organization. Must be a valid UUID.
     * 
     */
    @Import(name="sinkOrgId", required=true)
    private Output<String> sinkOrgId;

    /**
     * @return UUID of the sink (destination) organization. Must be a valid UUID.
     * 
     */
    public Output<String> sinkOrgId() {
        return this.sinkOrgId;
    }

    private OrgConnectionArgs() {}

    private OrgConnectionArgs(OrgConnectionArgs $) {
        this.connectionTypes = $.connectionTypes;
        this.sinkOrgId = $.sinkOrgId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrgConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrgConnectionArgs $;

        public Builder() {
            $ = new OrgConnectionArgs();
        }

        public Builder(OrgConnectionArgs defaults) {
            $ = new OrgConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionTypes Set of connection types to enable for this connection (., metrics, logs).
         * 
         * @return builder
         * 
         */
        public Builder connectionTypes(Output<List<String>> connectionTypes) {
            $.connectionTypes = connectionTypes;
            return this;
        }

        /**
         * @param connectionTypes Set of connection types to enable for this connection (., metrics, logs).
         * 
         * @return builder
         * 
         */
        public Builder connectionTypes(List<String> connectionTypes) {
            return connectionTypes(Output.of(connectionTypes));
        }

        /**
         * @param connectionTypes Set of connection types to enable for this connection (., metrics, logs).
         * 
         * @return builder
         * 
         */
        public Builder connectionTypes(String... connectionTypes) {
            return connectionTypes(List.of(connectionTypes));
        }

        /**
         * @param sinkOrgId UUID of the sink (destination) organization. Must be a valid UUID.
         * 
         * @return builder
         * 
         */
        public Builder sinkOrgId(Output<String> sinkOrgId) {
            $.sinkOrgId = sinkOrgId;
            return this;
        }

        /**
         * @param sinkOrgId UUID of the sink (destination) organization. Must be a valid UUID.
         * 
         * @return builder
         * 
         */
        public Builder sinkOrgId(String sinkOrgId) {
            return sinkOrgId(Output.of(sinkOrgId));
        }

        public OrgConnectionArgs build() {
            if ($.connectionTypes == null) {
                throw new MissingRequiredPropertyException("OrgConnectionArgs", "connectionTypes");
            }
            if ($.sinkOrgId == null) {
                throw new MissingRequiredPropertyException("OrgConnectionArgs", "sinkOrgId");
            }
            return $;
        }
    }

}
