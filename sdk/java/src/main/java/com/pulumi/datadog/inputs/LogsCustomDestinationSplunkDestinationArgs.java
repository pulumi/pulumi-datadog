// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class LogsCustomDestinationSplunkDestinationArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogsCustomDestinationSplunkDestinationArgs Empty = new LogsCustomDestinationSplunkDestinationArgs();

    /**
     * Access token of the Splunk HTTP Event Collector. This field is not returned by the API.
     * 
     */
    @Import(name="accessToken", required=true)
    private Output<String> accessToken;

    /**
     * @return Access token of the Splunk HTTP Event Collector. This field is not returned by the API.
     * 
     */
    public Output<String> accessToken() {
        return this.accessToken;
    }

    /**
     * The destination for which logs will be forwarded to. Must have HTTPS scheme. Forwarding back to Datadog is not allowed.
     * 
     */
    @Import(name="endpoint", required=true)
    private Output<String> endpoint;

    /**
     * @return The destination for which logs will be forwarded to. Must have HTTPS scheme. Forwarding back to Datadog is not allowed.
     * 
     */
    public Output<String> endpoint() {
        return this.endpoint;
    }

    private LogsCustomDestinationSplunkDestinationArgs() {}

    private LogsCustomDestinationSplunkDestinationArgs(LogsCustomDestinationSplunkDestinationArgs $) {
        this.accessToken = $.accessToken;
        this.endpoint = $.endpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogsCustomDestinationSplunkDestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogsCustomDestinationSplunkDestinationArgs $;

        public Builder() {
            $ = new LogsCustomDestinationSplunkDestinationArgs();
        }

        public Builder(LogsCustomDestinationSplunkDestinationArgs defaults) {
            $ = new LogsCustomDestinationSplunkDestinationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessToken Access token of the Splunk HTTP Event Collector. This field is not returned by the API.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(Output<String> accessToken) {
            $.accessToken = accessToken;
            return this;
        }

        /**
         * @param accessToken Access token of the Splunk HTTP Event Collector. This field is not returned by the API.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(String accessToken) {
            return accessToken(Output.of(accessToken));
        }

        /**
         * @param endpoint The destination for which logs will be forwarded to. Must have HTTPS scheme. Forwarding back to Datadog is not allowed.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The destination for which logs will be forwarded to. Must have HTTPS scheme. Forwarding back to Datadog is not allowed.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        public LogsCustomDestinationSplunkDestinationArgs build() {
            if ($.accessToken == null) {
                throw new MissingRequiredPropertyException("LogsCustomDestinationSplunkDestinationArgs", "accessToken");
            }
            if ($.endpoint == null) {
                throw new MissingRequiredPropertyException("LogsCustomDestinationSplunkDestinationArgs", "endpoint");
            }
            return $;
        }
    }

}
