// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LogsArchiveGcsArchive {
    /**
     * @return Name of your GCS bucket.
     * 
     */
    private String bucket;
    /**
     * @return Your client email.
     * 
     */
    private String clientEmail;
    /**
     * @return Path where the archive is stored.
     * 
     */
    private @Nullable String path;
    /**
     * @return Your project id.
     * 
     */
    private String projectId;

    private LogsArchiveGcsArchive() {}
    /**
     * @return Name of your GCS bucket.
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return Your client email.
     * 
     */
    public String clientEmail() {
        return this.clientEmail;
    }
    /**
     * @return Path where the archive is stored.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return Your project id.
     * 
     */
    public String projectId() {
        return this.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogsArchiveGcsArchive defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bucket;
        private String clientEmail;
        private @Nullable String path;
        private String projectId;
        public Builder() {}
        public Builder(LogsArchiveGcsArchive defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.clientEmail = defaults.clientEmail;
    	      this.path = defaults.path;
    	      this.projectId = defaults.projectId;
        }

        @CustomType.Setter
        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        @CustomType.Setter
        public Builder clientEmail(String clientEmail) {
            this.clientEmail = Objects.requireNonNull(clientEmail);
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        public LogsArchiveGcsArchive build() {
            final var _resultValue = new LogsArchiveGcsArchive();
            _resultValue.bucket = bucket;
            _resultValue.clientEmail = clientEmail;
            _resultValue.path = path;
            _resultValue.projectId = projectId;
            return _resultValue;
        }
    }
}
