// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetTagPipelineRulesetRuleMapping extends com.pulumi.resources.InvokeArgs {

    public static final GetTagPipelineRulesetRuleMapping Empty = new GetTagPipelineRulesetRuleMapping();

    /**
     * The destination key for the mapping.
     * 
     */
    @Import(name="destinationKey", required=true)
    private String destinationKey;

    /**
     * @return The destination key for the mapping.
     * 
     */
    public String destinationKey() {
        return this.destinationKey;
    }

    /**
     * Whether to apply the mapping only if the destination key doesn&#39;t exist.
     * 
     */
    @Import(name="ifNotExists", required=true)
    private Boolean ifNotExists;

    /**
     * @return Whether to apply the mapping only if the destination key doesn&#39;t exist.
     * 
     */
    public Boolean ifNotExists() {
        return this.ifNotExists;
    }

    /**
     * The source keys for the mapping.
     * 
     */
    @Import(name="sourceKeys", required=true)
    private List<String> sourceKeys;

    /**
     * @return The source keys for the mapping.
     * 
     */
    public List<String> sourceKeys() {
        return this.sourceKeys;
    }

    private GetTagPipelineRulesetRuleMapping() {}

    private GetTagPipelineRulesetRuleMapping(GetTagPipelineRulesetRuleMapping $) {
        this.destinationKey = $.destinationKey;
        this.ifNotExists = $.ifNotExists;
        this.sourceKeys = $.sourceKeys;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTagPipelineRulesetRuleMapping defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTagPipelineRulesetRuleMapping $;

        public Builder() {
            $ = new GetTagPipelineRulesetRuleMapping();
        }

        public Builder(GetTagPipelineRulesetRuleMapping defaults) {
            $ = new GetTagPipelineRulesetRuleMapping(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationKey The destination key for the mapping.
         * 
         * @return builder
         * 
         */
        public Builder destinationKey(String destinationKey) {
            $.destinationKey = destinationKey;
            return this;
        }

        /**
         * @param ifNotExists Whether to apply the mapping only if the destination key doesn&#39;t exist.
         * 
         * @return builder
         * 
         */
        public Builder ifNotExists(Boolean ifNotExists) {
            $.ifNotExists = ifNotExists;
            return this;
        }

        /**
         * @param sourceKeys The source keys for the mapping.
         * 
         * @return builder
         * 
         */
        public Builder sourceKeys(List<String> sourceKeys) {
            $.sourceKeys = sourceKeys;
            return this;
        }

        /**
         * @param sourceKeys The source keys for the mapping.
         * 
         * @return builder
         * 
         */
        public Builder sourceKeys(String... sourceKeys) {
            return sourceKeys(List.of(sourceKeys));
        }

        public GetTagPipelineRulesetRuleMapping build() {
            if ($.destinationKey == null) {
                throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleMapping", "destinationKey");
            }
            if ($.ifNotExists == null) {
                throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleMapping", "ifNotExists");
            }
            if ($.sourceKeys == null) {
                throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleMapping", "sourceKeys");
            }
            return $;
        }
    }

}
