// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.SyntheticsTestMobileStepParamsElement;
import com.pulumi.datadog.outputs.SyntheticsTestMobileStepParamsPosition;
import com.pulumi.datadog.outputs.SyntheticsTestMobileStepParamsVariable;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SyntheticsTestMobileStepParams {
    /**
     * @return Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.
     * 
     */
    private @Nullable String check;
    /**
     * @return Delay between each key stroke for a &#34;type test&#34; step.
     * 
     */
    private @Nullable Integer delay;
    /**
     * @return Valid values are `up`, `down`, `left`, `right`.
     * 
     */
    private @Nullable String direction;
    /**
     * @return Element to use for the step, JSON encoded string.
     * 
     */
    private @Nullable SyntheticsTestMobileStepParamsElement element;
    private @Nullable Boolean enable;
    private @Nullable Integer maxScrolls;
    private @Nullable List<SyntheticsTestMobileStepParamsPosition> positions;
    /**
     * @return ID of the Synthetics test to use as subtest.
     * 
     */
    private @Nullable String subtestPublicId;
    /**
     * @return Value of the step.
     * 
     */
    private @Nullable String value;
    /**
     * @return Details of the variable to extract.
     * 
     */
    private @Nullable SyntheticsTestMobileStepParamsVariable variable;
    private @Nullable Boolean withEnter;
    /**
     * @return X coordinates for a &#34;scroll step&#34;.
     * 
     */
    private @Nullable Double x;
    /**
     * @return Y coordinates for a &#34;scroll step&#34;.
     * 
     */
    private @Nullable Double y;

    private SyntheticsTestMobileStepParams() {}
    /**
     * @return Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.
     * 
     */
    public Optional<String> check() {
        return Optional.ofNullable(this.check);
    }
    /**
     * @return Delay between each key stroke for a &#34;type test&#34; step.
     * 
     */
    public Optional<Integer> delay() {
        return Optional.ofNullable(this.delay);
    }
    /**
     * @return Valid values are `up`, `down`, `left`, `right`.
     * 
     */
    public Optional<String> direction() {
        return Optional.ofNullable(this.direction);
    }
    /**
     * @return Element to use for the step, JSON encoded string.
     * 
     */
    public Optional<SyntheticsTestMobileStepParamsElement> element() {
        return Optional.ofNullable(this.element);
    }
    public Optional<Boolean> enable() {
        return Optional.ofNullable(this.enable);
    }
    public Optional<Integer> maxScrolls() {
        return Optional.ofNullable(this.maxScrolls);
    }
    public List<SyntheticsTestMobileStepParamsPosition> positions() {
        return this.positions == null ? List.of() : this.positions;
    }
    /**
     * @return ID of the Synthetics test to use as subtest.
     * 
     */
    public Optional<String> subtestPublicId() {
        return Optional.ofNullable(this.subtestPublicId);
    }
    /**
     * @return Value of the step.
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }
    /**
     * @return Details of the variable to extract.
     * 
     */
    public Optional<SyntheticsTestMobileStepParamsVariable> variable() {
        return Optional.ofNullable(this.variable);
    }
    public Optional<Boolean> withEnter() {
        return Optional.ofNullable(this.withEnter);
    }
    /**
     * @return X coordinates for a &#34;scroll step&#34;.
     * 
     */
    public Optional<Double> x() {
        return Optional.ofNullable(this.x);
    }
    /**
     * @return Y coordinates for a &#34;scroll step&#34;.
     * 
     */
    public Optional<Double> y() {
        return Optional.ofNullable(this.y);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyntheticsTestMobileStepParams defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String check;
        private @Nullable Integer delay;
        private @Nullable String direction;
        private @Nullable SyntheticsTestMobileStepParamsElement element;
        private @Nullable Boolean enable;
        private @Nullable Integer maxScrolls;
        private @Nullable List<SyntheticsTestMobileStepParamsPosition> positions;
        private @Nullable String subtestPublicId;
        private @Nullable String value;
        private @Nullable SyntheticsTestMobileStepParamsVariable variable;
        private @Nullable Boolean withEnter;
        private @Nullable Double x;
        private @Nullable Double y;
        public Builder() {}
        public Builder(SyntheticsTestMobileStepParams defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.check = defaults.check;
    	      this.delay = defaults.delay;
    	      this.direction = defaults.direction;
    	      this.element = defaults.element;
    	      this.enable = defaults.enable;
    	      this.maxScrolls = defaults.maxScrolls;
    	      this.positions = defaults.positions;
    	      this.subtestPublicId = defaults.subtestPublicId;
    	      this.value = defaults.value;
    	      this.variable = defaults.variable;
    	      this.withEnter = defaults.withEnter;
    	      this.x = defaults.x;
    	      this.y = defaults.y;
        }

        @CustomType.Setter
        public Builder check(@Nullable String check) {

            this.check = check;
            return this;
        }
        @CustomType.Setter
        public Builder delay(@Nullable Integer delay) {

            this.delay = delay;
            return this;
        }
        @CustomType.Setter
        public Builder direction(@Nullable String direction) {

            this.direction = direction;
            return this;
        }
        @CustomType.Setter
        public Builder element(@Nullable SyntheticsTestMobileStepParamsElement element) {

            this.element = element;
            return this;
        }
        @CustomType.Setter
        public Builder enable(@Nullable Boolean enable) {

            this.enable = enable;
            return this;
        }
        @CustomType.Setter
        public Builder maxScrolls(@Nullable Integer maxScrolls) {

            this.maxScrolls = maxScrolls;
            return this;
        }
        @CustomType.Setter
        public Builder positions(@Nullable List<SyntheticsTestMobileStepParamsPosition> positions) {

            this.positions = positions;
            return this;
        }
        public Builder positions(SyntheticsTestMobileStepParamsPosition... positions) {
            return positions(List.of(positions));
        }
        @CustomType.Setter
        public Builder subtestPublicId(@Nullable String subtestPublicId) {

            this.subtestPublicId = subtestPublicId;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {

            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder variable(@Nullable SyntheticsTestMobileStepParamsVariable variable) {

            this.variable = variable;
            return this;
        }
        @CustomType.Setter
        public Builder withEnter(@Nullable Boolean withEnter) {

            this.withEnter = withEnter;
            return this;
        }
        @CustomType.Setter
        public Builder x(@Nullable Double x) {

            this.x = x;
            return this;
        }
        @CustomType.Setter
        public Builder y(@Nullable Double y) {

            this.y = y;
            return this;
        }
        public SyntheticsTestMobileStepParams build() {
            final var _resultValue = new SyntheticsTestMobileStepParams();
            _resultValue.check = check;
            _resultValue.delay = delay;
            _resultValue.direction = direction;
            _resultValue.element = element;
            _resultValue.enable = enable;
            _resultValue.maxScrolls = maxScrolls;
            _resultValue.positions = positions;
            _resultValue.subtestPublicId = subtestPublicId;
            _resultValue.value = value;
            _resultValue.variable = variable;
            _resultValue.withEnter = withEnter;
            _resultValue.x = x;
            _resultValue.y = y;
            return _resultValue;
        }
    }
}
