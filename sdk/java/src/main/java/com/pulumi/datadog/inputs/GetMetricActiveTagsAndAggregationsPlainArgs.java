// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMetricActiveTagsAndAggregationsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMetricActiveTagsAndAggregationsPlainArgs Empty = new GetMetricActiveTagsAndAggregationsPlainArgs();

    /**
     * The metric for which to fetch tags.
     * 
     */
    @Import(name="metric", required=true)
    private String metric;

    /**
     * @return The metric for which to fetch tags.
     * 
     */
    public String metric() {
        return this.metric;
    }

    /**
     * The number of seconds to look back from now.
     * 
     */
    @Import(name="window")
    private @Nullable Integer window;

    /**
     * @return The number of seconds to look back from now.
     * 
     */
    public Optional<Integer> window() {
        return Optional.ofNullable(this.window);
    }

    private GetMetricActiveTagsAndAggregationsPlainArgs() {}

    private GetMetricActiveTagsAndAggregationsPlainArgs(GetMetricActiveTagsAndAggregationsPlainArgs $) {
        this.metric = $.metric;
        this.window = $.window;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMetricActiveTagsAndAggregationsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMetricActiveTagsAndAggregationsPlainArgs $;

        public Builder() {
            $ = new GetMetricActiveTagsAndAggregationsPlainArgs();
        }

        public Builder(GetMetricActiveTagsAndAggregationsPlainArgs defaults) {
            $ = new GetMetricActiveTagsAndAggregationsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param metric The metric for which to fetch tags.
         * 
         * @return builder
         * 
         */
        public Builder metric(String metric) {
            $.metric = metric;
            return this;
        }

        /**
         * @param window The number of seconds to look back from now.
         * 
         * @return builder
         * 
         */
        public Builder window(@Nullable Integer window) {
            $.window = window;
            return this;
        }

        public GetMetricActiveTagsAndAggregationsPlainArgs build() {
            if ($.metric == null) {
                throw new MissingRequiredPropertyException("GetMetricActiveTagsAndAggregationsPlainArgs", "metric");
            }
            return $;
        }
    }

}
