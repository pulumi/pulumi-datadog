// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.DashboardWidgetHostmapDefinitionCustomLink;
import com.pulumi.datadog.outputs.DashboardWidgetHostmapDefinitionRequest;
import com.pulumi.datadog.outputs.DashboardWidgetHostmapDefinitionStyle;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardWidgetHostmapDefinition {
    /**
     * @return A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
     * 
     */
    private @Nullable List<DashboardWidgetHostmapDefinitionCustomLink> customLinks;
    /**
     * @return The check group to use in the widget.
     * 
     */
    private @Nullable List<String> groups;
    /**
     * @return A Boolean indicating whether to show ungrouped nodes.
     * 
     */
    private @Nullable Boolean noGroupHosts;
    /**
     * @return A Boolean indicating whether to show nodes with no metrics.
     * 
     */
    private @Nullable Boolean noMetricHosts;
    /**
     * @return The type of node used. Valid values are `host`, `container`.
     * 
     */
    private @Nullable String nodeType;
    /**
     * @return A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
     * 
     */
    private @Nullable DashboardWidgetHostmapDefinitionRequest request;
    /**
     * @return The list of tags to filter nodes by.
     * 
     */
    private @Nullable List<String> scopes;
    /**
     * @return Styling options for widget formulas.
     * 
     */
    private @Nullable DashboardWidgetHostmapDefinitionStyle style;
    /**
     * @return The title of the widget.
     * 
     */
    private @Nullable String title;
    /**
     * @return The alignment of the widget&#39;s title. Valid values are `center`, `left`, `right`.
     * 
     */
    private @Nullable String titleAlign;
    /**
     * @return The size of the widget&#39;s title (defaults to 16).
     * 
     */
    private @Nullable String titleSize;

    private DashboardWidgetHostmapDefinition() {}
    /**
     * @return A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
     * 
     */
    public List<DashboardWidgetHostmapDefinitionCustomLink> customLinks() {
        return this.customLinks == null ? List.of() : this.customLinks;
    }
    /**
     * @return The check group to use in the widget.
     * 
     */
    public List<String> groups() {
        return this.groups == null ? List.of() : this.groups;
    }
    /**
     * @return A Boolean indicating whether to show ungrouped nodes.
     * 
     */
    public Optional<Boolean> noGroupHosts() {
        return Optional.ofNullable(this.noGroupHosts);
    }
    /**
     * @return A Boolean indicating whether to show nodes with no metrics.
     * 
     */
    public Optional<Boolean> noMetricHosts() {
        return Optional.ofNullable(this.noMetricHosts);
    }
    /**
     * @return The type of node used. Valid values are `host`, `container`.
     * 
     */
    public Optional<String> nodeType() {
        return Optional.ofNullable(this.nodeType);
    }
    /**
     * @return A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
     * 
     */
    public Optional<DashboardWidgetHostmapDefinitionRequest> request() {
        return Optional.ofNullable(this.request);
    }
    /**
     * @return The list of tags to filter nodes by.
     * 
     */
    public List<String> scopes() {
        return this.scopes == null ? List.of() : this.scopes;
    }
    /**
     * @return Styling options for widget formulas.
     * 
     */
    public Optional<DashboardWidgetHostmapDefinitionStyle> style() {
        return Optional.ofNullable(this.style);
    }
    /**
     * @return The title of the widget.
     * 
     */
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }
    /**
     * @return The alignment of the widget&#39;s title. Valid values are `center`, `left`, `right`.
     * 
     */
    public Optional<String> titleAlign() {
        return Optional.ofNullable(this.titleAlign);
    }
    /**
     * @return The size of the widget&#39;s title (defaults to 16).
     * 
     */
    public Optional<String> titleSize() {
        return Optional.ofNullable(this.titleSize);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardWidgetHostmapDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<DashboardWidgetHostmapDefinitionCustomLink> customLinks;
        private @Nullable List<String> groups;
        private @Nullable Boolean noGroupHosts;
        private @Nullable Boolean noMetricHosts;
        private @Nullable String nodeType;
        private @Nullable DashboardWidgetHostmapDefinitionRequest request;
        private @Nullable List<String> scopes;
        private @Nullable DashboardWidgetHostmapDefinitionStyle style;
        private @Nullable String title;
        private @Nullable String titleAlign;
        private @Nullable String titleSize;
        public Builder() {}
        public Builder(DashboardWidgetHostmapDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customLinks = defaults.customLinks;
    	      this.groups = defaults.groups;
    	      this.noGroupHosts = defaults.noGroupHosts;
    	      this.noMetricHosts = defaults.noMetricHosts;
    	      this.nodeType = defaults.nodeType;
    	      this.request = defaults.request;
    	      this.scopes = defaults.scopes;
    	      this.style = defaults.style;
    	      this.title = defaults.title;
    	      this.titleAlign = defaults.titleAlign;
    	      this.titleSize = defaults.titleSize;
        }

        @CustomType.Setter
        public Builder customLinks(@Nullable List<DashboardWidgetHostmapDefinitionCustomLink> customLinks) {

            this.customLinks = customLinks;
            return this;
        }
        public Builder customLinks(DashboardWidgetHostmapDefinitionCustomLink... customLinks) {
            return customLinks(List.of(customLinks));
        }
        @CustomType.Setter
        public Builder groups(@Nullable List<String> groups) {

            this.groups = groups;
            return this;
        }
        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }
        @CustomType.Setter
        public Builder noGroupHosts(@Nullable Boolean noGroupHosts) {

            this.noGroupHosts = noGroupHosts;
            return this;
        }
        @CustomType.Setter
        public Builder noMetricHosts(@Nullable Boolean noMetricHosts) {

            this.noMetricHosts = noMetricHosts;
            return this;
        }
        @CustomType.Setter
        public Builder nodeType(@Nullable String nodeType) {

            this.nodeType = nodeType;
            return this;
        }
        @CustomType.Setter
        public Builder request(@Nullable DashboardWidgetHostmapDefinitionRequest request) {

            this.request = request;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(@Nullable List<String> scopes) {

            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder style(@Nullable DashboardWidgetHostmapDefinitionStyle style) {

            this.style = style;
            return this;
        }
        @CustomType.Setter
        public Builder title(@Nullable String title) {

            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder titleAlign(@Nullable String titleAlign) {

            this.titleAlign = titleAlign;
            return this;
        }
        @CustomType.Setter
        public Builder titleSize(@Nullable String titleSize) {

            this.titleSize = titleSize;
            return this;
        }
        public DashboardWidgetHostmapDefinition build() {
            final var _resultValue = new DashboardWidgetHostmapDefinition();
            _resultValue.customLinks = customLinks;
            _resultValue.groups = groups;
            _resultValue.noGroupHosts = noGroupHosts;
            _resultValue.noMetricHosts = noMetricHosts;
            _resultValue.nodeType = nodeType;
            _resultValue.request = request;
            _resultValue.scopes = scopes;
            _resultValue.style = style;
            _resultValue.title = title;
            _resultValue.titleAlign = titleAlign;
            _resultValue.titleSize = titleSize;
            return _resultValue;
        }
    }
}
