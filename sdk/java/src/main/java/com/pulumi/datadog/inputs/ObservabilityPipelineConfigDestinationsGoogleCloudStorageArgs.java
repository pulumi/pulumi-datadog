// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigDestinationsGoogleCloudStorageAuthArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigDestinationsGoogleCloudStorageMetadataArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigDestinationsGoogleCloudStorageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigDestinationsGoogleCloudStorageArgs Empty = new ObservabilityPipelineConfigDestinationsGoogleCloudStorageArgs();

    /**
     * Access control list setting for objects written to the bucket.
     * 
     */
    @Import(name="acl", required=true)
    private Output<String> acl;

    /**
     * @return Access control list setting for objects written to the bucket.
     * 
     */
    public Output<String> acl() {
        return this.acl;
    }

    /**
     * GCP credentials used to authenticate with Google Cloud Storage.
     * 
     */
    @Import(name="auth")
    private @Nullable Output<ObservabilityPipelineConfigDestinationsGoogleCloudStorageAuthArgs> auth;

    /**
     * @return GCP credentials used to authenticate with Google Cloud Storage.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigDestinationsGoogleCloudStorageAuthArgs>> auth() {
        return Optional.ofNullable(this.auth);
    }

    /**
     * Name of the GCS bucket.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return Name of the GCS bucket.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * Unique identifier for the destination component.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return Unique identifier for the destination component.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    @Import(name="inputs", required=true)
    private Output<List<String>> inputs;

    /**
     * @return A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    public Output<List<String>> inputs() {
        return this.inputs;
    }

    /**
     * Optional prefix for object keys within the GCS bucket.
     * 
     */
    @Import(name="keyPrefix")
    private @Nullable Output<String> keyPrefix;

    /**
     * @return Optional prefix for object keys within the GCS bucket.
     * 
     */
    public Optional<Output<String>> keyPrefix() {
        return Optional.ofNullable(this.keyPrefix);
    }

    /**
     * Custom metadata key-value pairs added to each object.
     * 
     */
    @Import(name="metadatas")
    private @Nullable Output<List<ObservabilityPipelineConfigDestinationsGoogleCloudStorageMetadataArgs>> metadatas;

    /**
     * @return Custom metadata key-value pairs added to each object.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigDestinationsGoogleCloudStorageMetadataArgs>>> metadatas() {
        return Optional.ofNullable(this.metadatas);
    }

    /**
     * Storage class used for objects stored in GCS.
     * 
     */
    @Import(name="storageClass", required=true)
    private Output<String> storageClass;

    /**
     * @return Storage class used for objects stored in GCS.
     * 
     */
    public Output<String> storageClass() {
        return this.storageClass;
    }

    private ObservabilityPipelineConfigDestinationsGoogleCloudStorageArgs() {}

    private ObservabilityPipelineConfigDestinationsGoogleCloudStorageArgs(ObservabilityPipelineConfigDestinationsGoogleCloudStorageArgs $) {
        this.acl = $.acl;
        this.auth = $.auth;
        this.bucket = $.bucket;
        this.id = $.id;
        this.inputs = $.inputs;
        this.keyPrefix = $.keyPrefix;
        this.metadatas = $.metadatas;
        this.storageClass = $.storageClass;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigDestinationsGoogleCloudStorageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigDestinationsGoogleCloudStorageArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigDestinationsGoogleCloudStorageArgs();
        }

        public Builder(ObservabilityPipelineConfigDestinationsGoogleCloudStorageArgs defaults) {
            $ = new ObservabilityPipelineConfigDestinationsGoogleCloudStorageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acl Access control list setting for objects written to the bucket.
         * 
         * @return builder
         * 
         */
        public Builder acl(Output<String> acl) {
            $.acl = acl;
            return this;
        }

        /**
         * @param acl Access control list setting for objects written to the bucket.
         * 
         * @return builder
         * 
         */
        public Builder acl(String acl) {
            return acl(Output.of(acl));
        }

        /**
         * @param auth GCP credentials used to authenticate with Google Cloud Storage.
         * 
         * @return builder
         * 
         */
        public Builder auth(@Nullable Output<ObservabilityPipelineConfigDestinationsGoogleCloudStorageAuthArgs> auth) {
            $.auth = auth;
            return this;
        }

        /**
         * @param auth GCP credentials used to authenticate with Google Cloud Storage.
         * 
         * @return builder
         * 
         */
        public Builder auth(ObservabilityPipelineConfigDestinationsGoogleCloudStorageAuthArgs auth) {
            return auth(Output.of(auth));
        }

        /**
         * @param bucket Name of the GCS bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Name of the GCS bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param id Unique identifier for the destination component.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique identifier for the destination component.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(Output<List<String>> inputs) {
            $.inputs = inputs;
            return this;
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(List<String> inputs) {
            return inputs(Output.of(inputs));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }

        /**
         * @param keyPrefix Optional prefix for object keys within the GCS bucket.
         * 
         * @return builder
         * 
         */
        public Builder keyPrefix(@Nullable Output<String> keyPrefix) {
            $.keyPrefix = keyPrefix;
            return this;
        }

        /**
         * @param keyPrefix Optional prefix for object keys within the GCS bucket.
         * 
         * @return builder
         * 
         */
        public Builder keyPrefix(String keyPrefix) {
            return keyPrefix(Output.of(keyPrefix));
        }

        /**
         * @param metadatas Custom metadata key-value pairs added to each object.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(@Nullable Output<List<ObservabilityPipelineConfigDestinationsGoogleCloudStorageMetadataArgs>> metadatas) {
            $.metadatas = metadatas;
            return this;
        }

        /**
         * @param metadatas Custom metadata key-value pairs added to each object.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(List<ObservabilityPipelineConfigDestinationsGoogleCloudStorageMetadataArgs> metadatas) {
            return metadatas(Output.of(metadatas));
        }

        /**
         * @param metadatas Custom metadata key-value pairs added to each object.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(ObservabilityPipelineConfigDestinationsGoogleCloudStorageMetadataArgs... metadatas) {
            return metadatas(List.of(metadatas));
        }

        /**
         * @param storageClass Storage class used for objects stored in GCS.
         * 
         * @return builder
         * 
         */
        public Builder storageClass(Output<String> storageClass) {
            $.storageClass = storageClass;
            return this;
        }

        /**
         * @param storageClass Storage class used for objects stored in GCS.
         * 
         * @return builder
         * 
         */
        public Builder storageClass(String storageClass) {
            return storageClass(Output.of(storageClass));
        }

        public ObservabilityPipelineConfigDestinationsGoogleCloudStorageArgs build() {
            if ($.acl == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsGoogleCloudStorageArgs", "acl");
            }
            if ($.bucket == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsGoogleCloudStorageArgs", "bucket");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsGoogleCloudStorageArgs", "id");
            }
            if ($.inputs == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsGoogleCloudStorageArgs", "inputs");
            }
            if ($.storageClass == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsGoogleCloudStorageArgs", "storageClass");
            }
            return $;
        }
    }

}
