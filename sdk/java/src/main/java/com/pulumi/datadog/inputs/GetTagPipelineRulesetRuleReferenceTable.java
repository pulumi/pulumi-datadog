// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.GetTagPipelineRulesetRuleReferenceTableFieldPair;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTagPipelineRulesetRuleReferenceTable extends com.pulumi.resources.InvokeArgs {

    public static final GetTagPipelineRulesetRuleReferenceTable Empty = new GetTagPipelineRulesetRuleReferenceTable();

    /**
     * Whether the reference table lookup is case insensitive.
     * 
     */
    @Import(name="caseInsensitivity", required=true)
    private Boolean caseInsensitivity;

    /**
     * @return Whether the reference table lookup is case insensitive.
     * 
     */
    public Boolean caseInsensitivity() {
        return this.caseInsensitivity;
    }

    /**
     * The field pairs for the reference table.
     * 
     */
    @Import(name="fieldPairs")
    private @Nullable List<GetTagPipelineRulesetRuleReferenceTableFieldPair> fieldPairs;

    /**
     * @return The field pairs for the reference table.
     * 
     */
    public Optional<List<GetTagPipelineRulesetRuleReferenceTableFieldPair>> fieldPairs() {
        return Optional.ofNullable(this.fieldPairs);
    }

    /**
     * Whether to apply the reference table only if the key doesn&#39;t exist.
     * 
     */
    @Import(name="ifNotExists", required=true)
    private Boolean ifNotExists;

    /**
     * @return Whether to apply the reference table only if the key doesn&#39;t exist.
     * 
     */
    public Boolean ifNotExists() {
        return this.ifNotExists;
    }

    /**
     * The source keys for the reference table lookup.
     * 
     */
    @Import(name="sourceKeys", required=true)
    private List<String> sourceKeys;

    /**
     * @return The source keys for the reference table lookup.
     * 
     */
    public List<String> sourceKeys() {
        return this.sourceKeys;
    }

    /**
     * The name of the reference table.
     * 
     */
    @Import(name="tableName", required=true)
    private String tableName;

    /**
     * @return The name of the reference table.
     * 
     */
    public String tableName() {
        return this.tableName;
    }

    private GetTagPipelineRulesetRuleReferenceTable() {}

    private GetTagPipelineRulesetRuleReferenceTable(GetTagPipelineRulesetRuleReferenceTable $) {
        this.caseInsensitivity = $.caseInsensitivity;
        this.fieldPairs = $.fieldPairs;
        this.ifNotExists = $.ifNotExists;
        this.sourceKeys = $.sourceKeys;
        this.tableName = $.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTagPipelineRulesetRuleReferenceTable defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTagPipelineRulesetRuleReferenceTable $;

        public Builder() {
            $ = new GetTagPipelineRulesetRuleReferenceTable();
        }

        public Builder(GetTagPipelineRulesetRuleReferenceTable defaults) {
            $ = new GetTagPipelineRulesetRuleReferenceTable(Objects.requireNonNull(defaults));
        }

        /**
         * @param caseInsensitivity Whether the reference table lookup is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder caseInsensitivity(Boolean caseInsensitivity) {
            $.caseInsensitivity = caseInsensitivity;
            return this;
        }

        /**
         * @param fieldPairs The field pairs for the reference table.
         * 
         * @return builder
         * 
         */
        public Builder fieldPairs(@Nullable List<GetTagPipelineRulesetRuleReferenceTableFieldPair> fieldPairs) {
            $.fieldPairs = fieldPairs;
            return this;
        }

        /**
         * @param fieldPairs The field pairs for the reference table.
         * 
         * @return builder
         * 
         */
        public Builder fieldPairs(GetTagPipelineRulesetRuleReferenceTableFieldPair... fieldPairs) {
            return fieldPairs(List.of(fieldPairs));
        }

        /**
         * @param ifNotExists Whether to apply the reference table only if the key doesn&#39;t exist.
         * 
         * @return builder
         * 
         */
        public Builder ifNotExists(Boolean ifNotExists) {
            $.ifNotExists = ifNotExists;
            return this;
        }

        /**
         * @param sourceKeys The source keys for the reference table lookup.
         * 
         * @return builder
         * 
         */
        public Builder sourceKeys(List<String> sourceKeys) {
            $.sourceKeys = sourceKeys;
            return this;
        }

        /**
         * @param sourceKeys The source keys for the reference table lookup.
         * 
         * @return builder
         * 
         */
        public Builder sourceKeys(String... sourceKeys) {
            return sourceKeys(List.of(sourceKeys));
        }

        /**
         * @param tableName The name of the reference table.
         * 
         * @return builder
         * 
         */
        public Builder tableName(String tableName) {
            $.tableName = tableName;
            return this;
        }

        public GetTagPipelineRulesetRuleReferenceTable build() {
            if ($.caseInsensitivity == null) {
                throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleReferenceTable", "caseInsensitivity");
            }
            if ($.ifNotExists == null) {
                throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleReferenceTable", "ifNotExists");
            }
            if ($.sourceKeys == null) {
                throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleReferenceTable", "sourceKeys");
            }
            if ($.tableName == null) {
                throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleReferenceTable", "tableName");
            }
            return $;
        }
    }

}
