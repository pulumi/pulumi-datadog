// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.ServiceLevelObjectiveSliSpecificationTimeSliceQuery;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceLevelObjectiveSliSpecificationTimeSlice {
    /**
     * @return The comparator used to compare the SLI value to the threshold. Valid values are `&gt;`, `&gt;=`, `&lt;`, `&lt;=`.
     * 
     */
    private String comparator;
    /**
     * @return A timeseries query, containing named data-source-specific queries and a formula involving the named queries.
     * 
     */
    private ServiceLevelObjectiveSliSpecificationTimeSliceQuery query;
    /**
     * @return The interval used when querying data, which defines the size of a time slice. Valid values are `60`, `300`. Defaults to `300`.
     * 
     */
    private @Nullable Integer queryIntervalSeconds;
    /**
     * @return The threshold value to which each SLI value will be compared.
     * 
     */
    private Double threshold;

    private ServiceLevelObjectiveSliSpecificationTimeSlice() {}
    /**
     * @return The comparator used to compare the SLI value to the threshold. Valid values are `&gt;`, `&gt;=`, `&lt;`, `&lt;=`.
     * 
     */
    public String comparator() {
        return this.comparator;
    }
    /**
     * @return A timeseries query, containing named data-source-specific queries and a formula involving the named queries.
     * 
     */
    public ServiceLevelObjectiveSliSpecificationTimeSliceQuery query() {
        return this.query;
    }
    /**
     * @return The interval used when querying data, which defines the size of a time slice. Valid values are `60`, `300`. Defaults to `300`.
     * 
     */
    public Optional<Integer> queryIntervalSeconds() {
        return Optional.ofNullable(this.queryIntervalSeconds);
    }
    /**
     * @return The threshold value to which each SLI value will be compared.
     * 
     */
    public Double threshold() {
        return this.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceLevelObjectiveSliSpecificationTimeSlice defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String comparator;
        private ServiceLevelObjectiveSliSpecificationTimeSliceQuery query;
        private @Nullable Integer queryIntervalSeconds;
        private Double threshold;
        public Builder() {}
        public Builder(ServiceLevelObjectiveSliSpecificationTimeSlice defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comparator = defaults.comparator;
    	      this.query = defaults.query;
    	      this.queryIntervalSeconds = defaults.queryIntervalSeconds;
    	      this.threshold = defaults.threshold;
        }

        @CustomType.Setter
        public Builder comparator(String comparator) {
            if (comparator == null) {
              throw new MissingRequiredPropertyException("ServiceLevelObjectiveSliSpecificationTimeSlice", "comparator");
            }
            this.comparator = comparator;
            return this;
        }
        @CustomType.Setter
        public Builder query(ServiceLevelObjectiveSliSpecificationTimeSliceQuery query) {
            if (query == null) {
              throw new MissingRequiredPropertyException("ServiceLevelObjectiveSliSpecificationTimeSlice", "query");
            }
            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder queryIntervalSeconds(@Nullable Integer queryIntervalSeconds) {

            this.queryIntervalSeconds = queryIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(Double threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("ServiceLevelObjectiveSliSpecificationTimeSlice", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        public ServiceLevelObjectiveSliSpecificationTimeSlice build() {
            final var _resultValue = new ServiceLevelObjectiveSliSpecificationTimeSlice();
            _resultValue.comparator = comparator;
            _resultValue.query = query;
            _resultValue.queryIntervalSeconds = queryIntervalSeconds;
            _resultValue.threshold = threshold;
            return _resultValue;
        }
    }
}
