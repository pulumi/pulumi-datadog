// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.DashboardWidgetSplitGraphDefinitionSplitConfigSort;
import com.pulumi.datadog.outputs.DashboardWidgetSplitGraphDefinitionSplitConfigSplitDimensions;
import com.pulumi.datadog.outputs.DashboardWidgetSplitGraphDefinitionSplitConfigStaticSplit;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardWidgetSplitGraphDefinitionSplitConfig {
    /**
     * @return The maximum number of items in the group.
     * 
     */
    private @Nullable Integer limit;
    /**
     * @return The options for sorting group by results.
     * 
     */
    private DashboardWidgetSplitGraphDefinitionSplitConfigSort sort;
    /**
     * @return The property by which the graph splits
     * 
     */
    private DashboardWidgetSplitGraphDefinitionSplitConfigSplitDimensions splitDimensions;
    /**
     * @return The property by which the graph splits
     * 
     */
    private @Nullable List<DashboardWidgetSplitGraphDefinitionSplitConfigStaticSplit> staticSplits;

    private DashboardWidgetSplitGraphDefinitionSplitConfig() {}
    /**
     * @return The maximum number of items in the group.
     * 
     */
    public Optional<Integer> limit() {
        return Optional.ofNullable(this.limit);
    }
    /**
     * @return The options for sorting group by results.
     * 
     */
    public DashboardWidgetSplitGraphDefinitionSplitConfigSort sort() {
        return this.sort;
    }
    /**
     * @return The property by which the graph splits
     * 
     */
    public DashboardWidgetSplitGraphDefinitionSplitConfigSplitDimensions splitDimensions() {
        return this.splitDimensions;
    }
    /**
     * @return The property by which the graph splits
     * 
     */
    public List<DashboardWidgetSplitGraphDefinitionSplitConfigStaticSplit> staticSplits() {
        return this.staticSplits == null ? List.of() : this.staticSplits;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardWidgetSplitGraphDefinitionSplitConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer limit;
        private DashboardWidgetSplitGraphDefinitionSplitConfigSort sort;
        private DashboardWidgetSplitGraphDefinitionSplitConfigSplitDimensions splitDimensions;
        private @Nullable List<DashboardWidgetSplitGraphDefinitionSplitConfigStaticSplit> staticSplits;
        public Builder() {}
        public Builder(DashboardWidgetSplitGraphDefinitionSplitConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.limit = defaults.limit;
    	      this.sort = defaults.sort;
    	      this.splitDimensions = defaults.splitDimensions;
    	      this.staticSplits = defaults.staticSplits;
        }

        @CustomType.Setter
        public Builder limit(@Nullable Integer limit) {

            this.limit = limit;
            return this;
        }
        @CustomType.Setter
        public Builder sort(DashboardWidgetSplitGraphDefinitionSplitConfigSort sort) {
            if (sort == null) {
              throw new MissingRequiredPropertyException("DashboardWidgetSplitGraphDefinitionSplitConfig", "sort");
            }
            this.sort = sort;
            return this;
        }
        @CustomType.Setter
        public Builder splitDimensions(DashboardWidgetSplitGraphDefinitionSplitConfigSplitDimensions splitDimensions) {
            if (splitDimensions == null) {
              throw new MissingRequiredPropertyException("DashboardWidgetSplitGraphDefinitionSplitConfig", "splitDimensions");
            }
            this.splitDimensions = splitDimensions;
            return this;
        }
        @CustomType.Setter
        public Builder staticSplits(@Nullable List<DashboardWidgetSplitGraphDefinitionSplitConfigStaticSplit> staticSplits) {

            this.staticSplits = staticSplits;
            return this;
        }
        public Builder staticSplits(DashboardWidgetSplitGraphDefinitionSplitConfigStaticSplit... staticSplits) {
            return staticSplits(List.of(staticSplits));
        }
        public DashboardWidgetSplitGraphDefinitionSplitConfig build() {
            final var _resultValue = new DashboardWidgetSplitGraphDefinitionSplitConfig();
            _resultValue.limit = limit;
            _resultValue.sort = sort;
            _resultValue.splitDimensions = splitDimensions;
            _resultValue.staticSplits = staticSplits;
            return _resultValue;
        }
    }
}
