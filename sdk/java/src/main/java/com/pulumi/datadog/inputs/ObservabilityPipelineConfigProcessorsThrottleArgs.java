// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigProcessorsThrottleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigProcessorsThrottleArgs Empty = new ObservabilityPipelineConfigProcessorsThrottleArgs();

    /**
     * Optional list of fields used to group events before applying throttling.
     * 
     */
    @Import(name="groupBies")
    private @Nullable Output<List<String>> groupBies;

    /**
     * @return Optional list of fields used to group events before applying throttling.
     * 
     */
    public Optional<Output<List<String>>> groupBies() {
        return Optional.ofNullable(this.groupBies);
    }

    /**
     * The unique identifier for this processor.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique identifier for this processor.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * A Datadog search query used to determine which logs this processor targets.
     * 
     */
    @Import(name="include", required=true)
    private Output<String> include;

    /**
     * @return A Datadog search query used to determine which logs this processor targets.
     * 
     */
    public Output<String> include() {
        return this.include;
    }

    /**
     * A list of component IDs whose output is used as the input for this processor.
     * 
     */
    @Import(name="inputs", required=true)
    private Output<List<String>> inputs;

    /**
     * @return A list of component IDs whose output is used as the input for this processor.
     * 
     */
    public Output<List<String>> inputs() {
        return this.inputs;
    }

    /**
     * The number of events to allow before throttling is applied.
     * 
     */
    @Import(name="threshold", required=true)
    private Output<Integer> threshold;

    /**
     * @return The number of events to allow before throttling is applied.
     * 
     */
    public Output<Integer> threshold() {
        return this.threshold;
    }

    /**
     * The time window in seconds over which the threshold applies.
     * 
     */
    @Import(name="window", required=true)
    private Output<Double> window;

    /**
     * @return The time window in seconds over which the threshold applies.
     * 
     */
    public Output<Double> window() {
        return this.window;
    }

    private ObservabilityPipelineConfigProcessorsThrottleArgs() {}

    private ObservabilityPipelineConfigProcessorsThrottleArgs(ObservabilityPipelineConfigProcessorsThrottleArgs $) {
        this.groupBies = $.groupBies;
        this.id = $.id;
        this.include = $.include;
        this.inputs = $.inputs;
        this.threshold = $.threshold;
        this.window = $.window;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigProcessorsThrottleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigProcessorsThrottleArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigProcessorsThrottleArgs();
        }

        public Builder(ObservabilityPipelineConfigProcessorsThrottleArgs defaults) {
            $ = new ObservabilityPipelineConfigProcessorsThrottleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupBies Optional list of fields used to group events before applying throttling.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(@Nullable Output<List<String>> groupBies) {
            $.groupBies = groupBies;
            return this;
        }

        /**
         * @param groupBies Optional list of fields used to group events before applying throttling.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(List<String> groupBies) {
            return groupBies(Output.of(groupBies));
        }

        /**
         * @param groupBies Optional list of fields used to group events before applying throttling.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }

        /**
         * @param id The unique identifier for this processor.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier for this processor.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param include A Datadog search query used to determine which logs this processor targets.
         * 
         * @return builder
         * 
         */
        public Builder include(Output<String> include) {
            $.include = include;
            return this;
        }

        /**
         * @param include A Datadog search query used to determine which logs this processor targets.
         * 
         * @return builder
         * 
         */
        public Builder include(String include) {
            return include(Output.of(include));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the input for this processor.
         * 
         * @return builder
         * 
         */
        public Builder inputs(Output<List<String>> inputs) {
            $.inputs = inputs;
            return this;
        }

        /**
         * @param inputs A list of component IDs whose output is used as the input for this processor.
         * 
         * @return builder
         * 
         */
        public Builder inputs(List<String> inputs) {
            return inputs(Output.of(inputs));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the input for this processor.
         * 
         * @return builder
         * 
         */
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }

        /**
         * @param threshold The number of events to allow before throttling is applied.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Output<Integer> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold The number of events to allow before throttling is applied.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Integer threshold) {
            return threshold(Output.of(threshold));
        }

        /**
         * @param window The time window in seconds over which the threshold applies.
         * 
         * @return builder
         * 
         */
        public Builder window(Output<Double> window) {
            $.window = window;
            return this;
        }

        /**
         * @param window The time window in seconds over which the threshold applies.
         * 
         * @return builder
         * 
         */
        public Builder window(Double window) {
            return window(Output.of(window));
        }

        public ObservabilityPipelineConfigProcessorsThrottleArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsThrottleArgs", "id");
            }
            if ($.include == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsThrottleArgs", "include");
            }
            if ($.inputs == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsThrottleArgs", "inputs");
            }
            if ($.threshold == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsThrottleArgs", "threshold");
            }
            if ($.window == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsThrottleArgs", "window");
            }
            return $;
        }
    }

}
