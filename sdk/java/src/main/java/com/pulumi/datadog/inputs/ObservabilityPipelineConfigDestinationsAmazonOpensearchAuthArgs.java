// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigDestinationsAmazonOpensearchAuthArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigDestinationsAmazonOpensearchAuthArgs Empty = new ObservabilityPipelineConfigDestinationsAmazonOpensearchAuthArgs();

    /**
     * ARN of the role to assume.
     * 
     */
    @Import(name="assumeRole")
    private @Nullable Output<String> assumeRole;

    /**
     * @return ARN of the role to assume.
     * 
     */
    public Optional<Output<String>> assumeRole() {
        return Optional.ofNullable(this.assumeRole);
    }

    /**
     * AWS region override (if applicable).
     * 
     */
    @Import(name="awsRegion")
    private @Nullable Output<String> awsRegion;

    /**
     * @return AWS region override (if applicable).
     * 
     */
    public Optional<Output<String>> awsRegion() {
        return Optional.ofNullable(this.awsRegion);
    }

    /**
     * External ID for assumed role.
     * 
     */
    @Import(name="externalId")
    private @Nullable Output<String> externalId;

    /**
     * @return External ID for assumed role.
     * 
     */
    public Optional<Output<String>> externalId() {
        return Optional.ofNullable(this.externalId);
    }

    /**
     * Session name for assumed role.
     * 
     */
    @Import(name="sessionName")
    private @Nullable Output<String> sessionName;

    /**
     * @return Session name for assumed role.
     * 
     */
    public Optional<Output<String>> sessionName() {
        return Optional.ofNullable(this.sessionName);
    }

    /**
     * The authentication strategy to use (e.g. aws or basic).
     * 
     */
    @Import(name="strategy", required=true)
    private Output<String> strategy;

    /**
     * @return The authentication strategy to use (e.g. aws or basic).
     * 
     */
    public Output<String> strategy() {
        return this.strategy;
    }

    private ObservabilityPipelineConfigDestinationsAmazonOpensearchAuthArgs() {}

    private ObservabilityPipelineConfigDestinationsAmazonOpensearchAuthArgs(ObservabilityPipelineConfigDestinationsAmazonOpensearchAuthArgs $) {
        this.assumeRole = $.assumeRole;
        this.awsRegion = $.awsRegion;
        this.externalId = $.externalId;
        this.sessionName = $.sessionName;
        this.strategy = $.strategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigDestinationsAmazonOpensearchAuthArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigDestinationsAmazonOpensearchAuthArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigDestinationsAmazonOpensearchAuthArgs();
        }

        public Builder(ObservabilityPipelineConfigDestinationsAmazonOpensearchAuthArgs defaults) {
            $ = new ObservabilityPipelineConfigDestinationsAmazonOpensearchAuthArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assumeRole ARN of the role to assume.
         * 
         * @return builder
         * 
         */
        public Builder assumeRole(@Nullable Output<String> assumeRole) {
            $.assumeRole = assumeRole;
            return this;
        }

        /**
         * @param assumeRole ARN of the role to assume.
         * 
         * @return builder
         * 
         */
        public Builder assumeRole(String assumeRole) {
            return assumeRole(Output.of(assumeRole));
        }

        /**
         * @param awsRegion AWS region override (if applicable).
         * 
         * @return builder
         * 
         */
        public Builder awsRegion(@Nullable Output<String> awsRegion) {
            $.awsRegion = awsRegion;
            return this;
        }

        /**
         * @param awsRegion AWS region override (if applicable).
         * 
         * @return builder
         * 
         */
        public Builder awsRegion(String awsRegion) {
            return awsRegion(Output.of(awsRegion));
        }

        /**
         * @param externalId External ID for assumed role.
         * 
         * @return builder
         * 
         */
        public Builder externalId(@Nullable Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        /**
         * @param externalId External ID for assumed role.
         * 
         * @return builder
         * 
         */
        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        /**
         * @param sessionName Session name for assumed role.
         * 
         * @return builder
         * 
         */
        public Builder sessionName(@Nullable Output<String> sessionName) {
            $.sessionName = sessionName;
            return this;
        }

        /**
         * @param sessionName Session name for assumed role.
         * 
         * @return builder
         * 
         */
        public Builder sessionName(String sessionName) {
            return sessionName(Output.of(sessionName));
        }

        /**
         * @param strategy The authentication strategy to use (e.g. aws or basic).
         * 
         * @return builder
         * 
         */
        public Builder strategy(Output<String> strategy) {
            $.strategy = strategy;
            return this;
        }

        /**
         * @param strategy The authentication strategy to use (e.g. aws or basic).
         * 
         * @return builder
         * 
         */
        public Builder strategy(String strategy) {
            return strategy(Output.of(strategy));
        }

        public ObservabilityPipelineConfigDestinationsAmazonOpensearchAuthArgs build() {
            if ($.strategy == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsAmazonOpensearchAuthArgs", "strategy");
            }
            return $;
        }
    }

}
