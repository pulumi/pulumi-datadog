// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions;
import com.pulumi.datadog.outputs.GetSecurityMonitoringRulesRuleOptionsNewValueOptions;
import com.pulumi.datadog.outputs.GetSecurityMonitoringRulesRuleOptionsThirdPartyRuleOptions;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecurityMonitoringRulesRuleOptions {
    /**
     * @return If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `log_detection`.
     * 
     */
    private @Nullable Boolean decreaseCriticalityBasedOnEnv;
    /**
     * @return The detection method.
     * 
     */
    private @Nullable String detectionMethod;
    /**
     * @return A time window is specified to match when at least one of the cases matches true. This is a sliding window and evaluates in real time.
     * 
     */
    private @Nullable Integer evaluationWindow;
    /**
     * @return Options for rules using the impossible travel detection method.
     * 
     */
    private @Nullable GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions impossibleTravelOptions;
    /**
     * @return Once a signal is generated, the signal will remain “open” if a case is matched at least once within this keep alive window (in seconds).
     * 
     */
    private @Nullable Integer keepAlive;
    /**
     * @return A signal will “close” regardless of the query being matched once the time exceeds the maximum duration (in seconds). This time is calculated from the first seen timestamp.
     * 
     */
    private @Nullable Integer maxSignalDuration;
    /**
     * @return New value rules specific options.
     * 
     */
    private @Nullable GetSecurityMonitoringRulesRuleOptionsNewValueOptions newValueOptions;
    /**
     * @return Options for rules using the third-party detection method.
     * 
     */
    private @Nullable GetSecurityMonitoringRulesRuleOptionsThirdPartyRuleOptions thirdPartyRuleOptions;

    private GetSecurityMonitoringRulesRuleOptions() {}
    /**
     * @return If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `log_detection`.
     * 
     */
    public Optional<Boolean> decreaseCriticalityBasedOnEnv() {
        return Optional.ofNullable(this.decreaseCriticalityBasedOnEnv);
    }
    /**
     * @return The detection method.
     * 
     */
    public Optional<String> detectionMethod() {
        return Optional.ofNullable(this.detectionMethod);
    }
    /**
     * @return A time window is specified to match when at least one of the cases matches true. This is a sliding window and evaluates in real time.
     * 
     */
    public Optional<Integer> evaluationWindow() {
        return Optional.ofNullable(this.evaluationWindow);
    }
    /**
     * @return Options for rules using the impossible travel detection method.
     * 
     */
    public Optional<GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions> impossibleTravelOptions() {
        return Optional.ofNullable(this.impossibleTravelOptions);
    }
    /**
     * @return Once a signal is generated, the signal will remain “open” if a case is matched at least once within this keep alive window (in seconds).
     * 
     */
    public Optional<Integer> keepAlive() {
        return Optional.ofNullable(this.keepAlive);
    }
    /**
     * @return A signal will “close” regardless of the query being matched once the time exceeds the maximum duration (in seconds). This time is calculated from the first seen timestamp.
     * 
     */
    public Optional<Integer> maxSignalDuration() {
        return Optional.ofNullable(this.maxSignalDuration);
    }
    /**
     * @return New value rules specific options.
     * 
     */
    public Optional<GetSecurityMonitoringRulesRuleOptionsNewValueOptions> newValueOptions() {
        return Optional.ofNullable(this.newValueOptions);
    }
    /**
     * @return Options for rules using the third-party detection method.
     * 
     */
    public Optional<GetSecurityMonitoringRulesRuleOptionsThirdPartyRuleOptions> thirdPartyRuleOptions() {
        return Optional.ofNullable(this.thirdPartyRuleOptions);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityMonitoringRulesRuleOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean decreaseCriticalityBasedOnEnv;
        private @Nullable String detectionMethod;
        private @Nullable Integer evaluationWindow;
        private @Nullable GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions impossibleTravelOptions;
        private @Nullable Integer keepAlive;
        private @Nullable Integer maxSignalDuration;
        private @Nullable GetSecurityMonitoringRulesRuleOptionsNewValueOptions newValueOptions;
        private @Nullable GetSecurityMonitoringRulesRuleOptionsThirdPartyRuleOptions thirdPartyRuleOptions;
        public Builder() {}
        public Builder(GetSecurityMonitoringRulesRuleOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.decreaseCriticalityBasedOnEnv = defaults.decreaseCriticalityBasedOnEnv;
    	      this.detectionMethod = defaults.detectionMethod;
    	      this.evaluationWindow = defaults.evaluationWindow;
    	      this.impossibleTravelOptions = defaults.impossibleTravelOptions;
    	      this.keepAlive = defaults.keepAlive;
    	      this.maxSignalDuration = defaults.maxSignalDuration;
    	      this.newValueOptions = defaults.newValueOptions;
    	      this.thirdPartyRuleOptions = defaults.thirdPartyRuleOptions;
        }

        @CustomType.Setter
        public Builder decreaseCriticalityBasedOnEnv(@Nullable Boolean decreaseCriticalityBasedOnEnv) {

            this.decreaseCriticalityBasedOnEnv = decreaseCriticalityBasedOnEnv;
            return this;
        }
        @CustomType.Setter
        public Builder detectionMethod(@Nullable String detectionMethod) {

            this.detectionMethod = detectionMethod;
            return this;
        }
        @CustomType.Setter
        public Builder evaluationWindow(@Nullable Integer evaluationWindow) {

            this.evaluationWindow = evaluationWindow;
            return this;
        }
        @CustomType.Setter
        public Builder impossibleTravelOptions(@Nullable GetSecurityMonitoringRulesRuleOptionsImpossibleTravelOptions impossibleTravelOptions) {

            this.impossibleTravelOptions = impossibleTravelOptions;
            return this;
        }
        @CustomType.Setter
        public Builder keepAlive(@Nullable Integer keepAlive) {

            this.keepAlive = keepAlive;
            return this;
        }
        @CustomType.Setter
        public Builder maxSignalDuration(@Nullable Integer maxSignalDuration) {

            this.maxSignalDuration = maxSignalDuration;
            return this;
        }
        @CustomType.Setter
        public Builder newValueOptions(@Nullable GetSecurityMonitoringRulesRuleOptionsNewValueOptions newValueOptions) {

            this.newValueOptions = newValueOptions;
            return this;
        }
        @CustomType.Setter
        public Builder thirdPartyRuleOptions(@Nullable GetSecurityMonitoringRulesRuleOptionsThirdPartyRuleOptions thirdPartyRuleOptions) {

            this.thirdPartyRuleOptions = thirdPartyRuleOptions;
            return this;
        }
        public GetSecurityMonitoringRulesRuleOptions build() {
            final var _resultValue = new GetSecurityMonitoringRulesRuleOptions();
            _resultValue.decreaseCriticalityBasedOnEnv = decreaseCriticalityBasedOnEnv;
            _resultValue.detectionMethod = detectionMethod;
            _resultValue.evaluationWindow = evaluationWindow;
            _resultValue.impossibleTravelOptions = impossibleTravelOptions;
            _resultValue.keepAlive = keepAlive;
            _resultValue.maxSignalDuration = maxSignalDuration;
            _resultValue.newValueOptions = newValueOptions;
            _resultValue.thirdPartyRuleOptions = thirdPartyRuleOptions;
            return _resultValue;
        }
    }
}
