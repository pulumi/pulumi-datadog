// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs Empty = new DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs();

    /**
     * The color palette to apply to the widget.
     * 
     */
    @Import(name="palette", required=true)
    private Output<String> palette;

    /**
     * @return The color palette to apply to the widget.
     * 
     */
    public Output<String> palette() {
        return this.palette;
    }

    /**
     * A Boolean indicating whether to flip the palette tones.
     * 
     */
    @Import(name="paletteFlip", required=true)
    private Output<Boolean> paletteFlip;

    /**
     * @return A Boolean indicating whether to flip the palette tones.
     * 
     */
    public Output<Boolean> paletteFlip() {
        return this.paletteFlip;
    }

    private DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs() {}

    private DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs(DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs $) {
        this.palette = $.palette;
        this.paletteFlip = $.paletteFlip;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs $;

        public Builder() {
            $ = new DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs();
        }

        public Builder(DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs defaults) {
            $ = new DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param palette The color palette to apply to the widget.
         * 
         * @return builder
         * 
         */
        public Builder palette(Output<String> palette) {
            $.palette = palette;
            return this;
        }

        /**
         * @param palette The color palette to apply to the widget.
         * 
         * @return builder
         * 
         */
        public Builder palette(String palette) {
            return palette(Output.of(palette));
        }

        /**
         * @param paletteFlip A Boolean indicating whether to flip the palette tones.
         * 
         * @return builder
         * 
         */
        public Builder paletteFlip(Output<Boolean> paletteFlip) {
            $.paletteFlip = paletteFlip;
            return this;
        }

        /**
         * @param paletteFlip A Boolean indicating whether to flip the palette tones.
         * 
         * @return builder
         * 
         */
        public Builder paletteFlip(Boolean paletteFlip) {
            return paletteFlip(Output.of(paletteFlip));
        }

        public DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs build() {
            if ($.palette == null) {
                throw new MissingRequiredPropertyException("DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs", "palette");
            }
            if ($.paletteFlip == null) {
                throw new MissingRequiredPropertyException("DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs", "paletteFlip");
            }
            return $;
        }
    }

}
