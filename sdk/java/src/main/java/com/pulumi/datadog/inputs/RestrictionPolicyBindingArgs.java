// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class RestrictionPolicyBindingArgs extends com.pulumi.resources.ResourceArgs {

    public static final RestrictionPolicyBindingArgs Empty = new RestrictionPolicyBindingArgs();

    /**
     * An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `org`. The org ID can be obtained through the api/v2/users API.
     * 
     */
    @Import(name="principals", required=true)
    private Output<List<String>> principals;

    /**
     * @return An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `org`. The org ID can be obtained through the api/v2/users API.
     * 
     */
    public Output<List<String>> principals() {
        return this.principals;
    }

    /**
     * The role/level of access. See this page for more details https://docs.datadoghq.com/api/latest/restriction-policies/#supported-relations-for-resources
     * 
     */
    @Import(name="relation", required=true)
    private Output<String> relation;

    /**
     * @return The role/level of access. See this page for more details https://docs.datadoghq.com/api/latest/restriction-policies/#supported-relations-for-resources
     * 
     */
    public Output<String> relation() {
        return this.relation;
    }

    private RestrictionPolicyBindingArgs() {}

    private RestrictionPolicyBindingArgs(RestrictionPolicyBindingArgs $) {
        this.principals = $.principals;
        this.relation = $.relation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RestrictionPolicyBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RestrictionPolicyBindingArgs $;

        public Builder() {
            $ = new RestrictionPolicyBindingArgs();
        }

        public Builder(RestrictionPolicyBindingArgs defaults) {
            $ = new RestrictionPolicyBindingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param principals An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `org`. The org ID can be obtained through the api/v2/users API.
         * 
         * @return builder
         * 
         */
        public Builder principals(Output<List<String>> principals) {
            $.principals = principals;
            return this;
        }

        /**
         * @param principals An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `org`. The org ID can be obtained through the api/v2/users API.
         * 
         * @return builder
         * 
         */
        public Builder principals(List<String> principals) {
            return principals(Output.of(principals));
        }

        /**
         * @param principals An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `org`. The org ID can be obtained through the api/v2/users API.
         * 
         * @return builder
         * 
         */
        public Builder principals(String... principals) {
            return principals(List.of(principals));
        }

        /**
         * @param relation The role/level of access. See this page for more details https://docs.datadoghq.com/api/latest/restriction-policies/#supported-relations-for-resources
         * 
         * @return builder
         * 
         */
        public Builder relation(Output<String> relation) {
            $.relation = relation;
            return this;
        }

        /**
         * @param relation The role/level of access. See this page for more details https://docs.datadoghq.com/api/latest/restriction-policies/#supported-relations-for-resources
         * 
         * @return builder
         * 
         */
        public Builder relation(String relation) {
            return relation(Output.of(relation));
        }

        public RestrictionPolicyBindingArgs build() {
            if ($.principals == null) {
                throw new MissingRequiredPropertyException("RestrictionPolicyBindingArgs", "principals");
            }
            if ($.relation == null) {
                throw new MissingRequiredPropertyException("RestrictionPolicyBindingArgs", "relation");
            }
            return $;
        }
    }

}
