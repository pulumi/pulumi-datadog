// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigSourcesKafkaLibrdkafkaOption;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigSourcesKafkaSasl;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigSourcesKafkaTls;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ObservabilityPipelineConfigSourcesKafka {
    /**
     * @return The Kafka consumer group ID.
     * 
     */
    private String groupId;
    /**
     * @return The unique ID of the source.
     * 
     */
    private String id;
    /**
     * @return Advanced librdkafka client configuration options.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigSourcesKafkaLibrdkafkaOption> librdkafkaOptions;
    /**
     * @return SASL authentication settings.
     * 
     */
    private @Nullable ObservabilityPipelineConfigSourcesKafkaSasl sasl;
    /**
     * @return Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    private @Nullable ObservabilityPipelineConfigSourcesKafkaTls tls;
    /**
     * @return A list of Kafka topic names to subscribe to. The source ingests messages from each topic specified.
     * 
     */
    private List<String> topics;

    private ObservabilityPipelineConfigSourcesKafka() {}
    /**
     * @return The Kafka consumer group ID.
     * 
     */
    public String groupId() {
        return this.groupId;
    }
    /**
     * @return The unique ID of the source.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Advanced librdkafka client configuration options.
     * 
     */
    public List<ObservabilityPipelineConfigSourcesKafkaLibrdkafkaOption> librdkafkaOptions() {
        return this.librdkafkaOptions == null ? List.of() : this.librdkafkaOptions;
    }
    /**
     * @return SASL authentication settings.
     * 
     */
    public Optional<ObservabilityPipelineConfigSourcesKafkaSasl> sasl() {
        return Optional.ofNullable(this.sasl);
    }
    /**
     * @return Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    public Optional<ObservabilityPipelineConfigSourcesKafkaTls> tls() {
        return Optional.ofNullable(this.tls);
    }
    /**
     * @return A list of Kafka topic names to subscribe to. The source ingests messages from each topic specified.
     * 
     */
    public List<String> topics() {
        return this.topics;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObservabilityPipelineConfigSourcesKafka defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String groupId;
        private String id;
        private @Nullable List<ObservabilityPipelineConfigSourcesKafkaLibrdkafkaOption> librdkafkaOptions;
        private @Nullable ObservabilityPipelineConfigSourcesKafkaSasl sasl;
        private @Nullable ObservabilityPipelineConfigSourcesKafkaTls tls;
        private List<String> topics;
        public Builder() {}
        public Builder(ObservabilityPipelineConfigSourcesKafka defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.groupId = defaults.groupId;
    	      this.id = defaults.id;
    	      this.librdkafkaOptions = defaults.librdkafkaOptions;
    	      this.sasl = defaults.sasl;
    	      this.tls = defaults.tls;
    	      this.topics = defaults.topics;
        }

        @CustomType.Setter
        public Builder groupId(String groupId) {
            if (groupId == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigSourcesKafka", "groupId");
            }
            this.groupId = groupId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigSourcesKafka", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder librdkafkaOptions(@Nullable List<ObservabilityPipelineConfigSourcesKafkaLibrdkafkaOption> librdkafkaOptions) {

            this.librdkafkaOptions = librdkafkaOptions;
            return this;
        }
        public Builder librdkafkaOptions(ObservabilityPipelineConfigSourcesKafkaLibrdkafkaOption... librdkafkaOptions) {
            return librdkafkaOptions(List.of(librdkafkaOptions));
        }
        @CustomType.Setter
        public Builder sasl(@Nullable ObservabilityPipelineConfigSourcesKafkaSasl sasl) {

            this.sasl = sasl;
            return this;
        }
        @CustomType.Setter
        public Builder tls(@Nullable ObservabilityPipelineConfigSourcesKafkaTls tls) {

            this.tls = tls;
            return this;
        }
        @CustomType.Setter
        public Builder topics(List<String> topics) {
            if (topics == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigSourcesKafka", "topics");
            }
            this.topics = topics;
            return this;
        }
        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }
        public ObservabilityPipelineConfigSourcesKafka build() {
            final var _resultValue = new ObservabilityPipelineConfigSourcesKafka();
            _resultValue.groupId = groupId;
            _resultValue.id = id;
            _resultValue.librdkafkaOptions = librdkafkaOptions;
            _resultValue.sasl = sasl;
            _resultValue.tls = tls;
            _resultValue.topics = topics;
            return _resultValue;
        }
    }
}
