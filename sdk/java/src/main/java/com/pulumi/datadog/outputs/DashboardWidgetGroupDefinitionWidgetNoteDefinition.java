// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardWidgetGroupDefinitionWidgetNoteDefinition {
    /**
     * @return The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
     * 
     */
    private @Nullable String backgroundColor;
    /**
     * @return The content of the note.
     * 
     */
    private String content;
    /**
     * @return The size of the text in the widget.
     * 
     */
    private @Nullable String fontSize;
    /**
     * @return Whether to add padding or not.
     * 
     */
    private @Nullable Boolean hasPadding;
    /**
     * @return Whether to show a tick or not.
     * 
     */
    private @Nullable Boolean showTick;
    /**
     * @return The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
     * 
     */
    private @Nullable String textAlign;
    /**
     * @return When `tick = true`, a string indicating on which side of the widget the tick should be displayed. Valid values are `bottom`, `left`, `right`, `top`.
     * 
     */
    private @Nullable String tickEdge;
    /**
     * @return When `tick = true`, a string with a percent sign indicating the position of the tick, for example: `tick_pos = &#34;50%&#34;` is centered alignment.
     * 
     */
    private @Nullable String tickPos;
    /**
     * @return The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
     * 
     */
    private @Nullable String verticalAlign;

    private DashboardWidgetGroupDefinitionWidgetNoteDefinition() {}
    /**
     * @return The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
     * 
     */
    public Optional<String> backgroundColor() {
        return Optional.ofNullable(this.backgroundColor);
    }
    /**
     * @return The content of the note.
     * 
     */
    public String content() {
        return this.content;
    }
    /**
     * @return The size of the text in the widget.
     * 
     */
    public Optional<String> fontSize() {
        return Optional.ofNullable(this.fontSize);
    }
    /**
     * @return Whether to add padding or not.
     * 
     */
    public Optional<Boolean> hasPadding() {
        return Optional.ofNullable(this.hasPadding);
    }
    /**
     * @return Whether to show a tick or not.
     * 
     */
    public Optional<Boolean> showTick() {
        return Optional.ofNullable(this.showTick);
    }
    /**
     * @return The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
     * 
     */
    public Optional<String> textAlign() {
        return Optional.ofNullable(this.textAlign);
    }
    /**
     * @return When `tick = true`, a string indicating on which side of the widget the tick should be displayed. Valid values are `bottom`, `left`, `right`, `top`.
     * 
     */
    public Optional<String> tickEdge() {
        return Optional.ofNullable(this.tickEdge);
    }
    /**
     * @return When `tick = true`, a string with a percent sign indicating the position of the tick, for example: `tick_pos = &#34;50%&#34;` is centered alignment.
     * 
     */
    public Optional<String> tickPos() {
        return Optional.ofNullable(this.tickPos);
    }
    /**
     * @return The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
     * 
     */
    public Optional<String> verticalAlign() {
        return Optional.ofNullable(this.verticalAlign);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardWidgetGroupDefinitionWidgetNoteDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String backgroundColor;
        private String content;
        private @Nullable String fontSize;
        private @Nullable Boolean hasPadding;
        private @Nullable Boolean showTick;
        private @Nullable String textAlign;
        private @Nullable String tickEdge;
        private @Nullable String tickPos;
        private @Nullable String verticalAlign;
        public Builder() {}
        public Builder(DashboardWidgetGroupDefinitionWidgetNoteDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backgroundColor = defaults.backgroundColor;
    	      this.content = defaults.content;
    	      this.fontSize = defaults.fontSize;
    	      this.hasPadding = defaults.hasPadding;
    	      this.showTick = defaults.showTick;
    	      this.textAlign = defaults.textAlign;
    	      this.tickEdge = defaults.tickEdge;
    	      this.tickPos = defaults.tickPos;
    	      this.verticalAlign = defaults.verticalAlign;
        }

        @CustomType.Setter
        public Builder backgroundColor(@Nullable String backgroundColor) {

            this.backgroundColor = backgroundColor;
            return this;
        }
        @CustomType.Setter
        public Builder content(String content) {
            if (content == null) {
              throw new MissingRequiredPropertyException("DashboardWidgetGroupDefinitionWidgetNoteDefinition", "content");
            }
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder fontSize(@Nullable String fontSize) {

            this.fontSize = fontSize;
            return this;
        }
        @CustomType.Setter
        public Builder hasPadding(@Nullable Boolean hasPadding) {

            this.hasPadding = hasPadding;
            return this;
        }
        @CustomType.Setter
        public Builder showTick(@Nullable Boolean showTick) {

            this.showTick = showTick;
            return this;
        }
        @CustomType.Setter
        public Builder textAlign(@Nullable String textAlign) {

            this.textAlign = textAlign;
            return this;
        }
        @CustomType.Setter
        public Builder tickEdge(@Nullable String tickEdge) {

            this.tickEdge = tickEdge;
            return this;
        }
        @CustomType.Setter
        public Builder tickPos(@Nullable String tickPos) {

            this.tickPos = tickPos;
            return this;
        }
        @CustomType.Setter
        public Builder verticalAlign(@Nullable String verticalAlign) {

            this.verticalAlign = verticalAlign;
            return this;
        }
        public DashboardWidgetGroupDefinitionWidgetNoteDefinition build() {
            final var _resultValue = new DashboardWidgetGroupDefinitionWidgetNoteDefinition();
            _resultValue.backgroundColor = backgroundColor;
            _resultValue.content = content;
            _resultValue.fontSize = fontSize;
            _resultValue.hasPadding = hasPadding;
            _resultValue.showTick = showTick;
            _resultValue.textAlign = textAlign;
            _resultValue.tickEdge = tickEdge;
            _resultValue.tickPos = tickPos;
            _resultValue.verticalAlign = verticalAlign;
            return _resultValue;
        }
    }
}
