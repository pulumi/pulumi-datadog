// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.AppsecWafExclusionFilterRulesTargetArgs;
import com.pulumi.datadog.inputs.AppsecWafExclusionFilterScopeArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppsecWafExclusionFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppsecWafExclusionFilterArgs Empty = new AppsecWafExclusionFilterArgs();

    /**
     * A description for the exclusion filter.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return A description for the exclusion filter.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Indicates whether the exclusion filter is enabled.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Indicates whether the exclusion filter is enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The event query matched by the legacy exclusion filter. Cannot be created nor updated.
     * 
     */
    @Import(name="eventQuery")
    private @Nullable Output<String> eventQuery;

    /**
     * @return The event query matched by the legacy exclusion filter. Cannot be created nor updated.
     * 
     */
    public Optional<Output<String>> eventQuery() {
        return Optional.ofNullable(this.eventQuery);
    }

    /**
     * The client IP addresses matched by the exclusion filter (CIDR notation is supported).
     * 
     */
    @Import(name="ipLists")
    private @Nullable Output<List<String>> ipLists;

    /**
     * @return The client IP addresses matched by the exclusion filter (CIDR notation is supported).
     * 
     */
    public Optional<Output<List<String>>> ipLists() {
        return Optional.ofNullable(this.ipLists);
    }

    /**
     * The action taken when the exclusion filter matches. When set to `monitor`, security traces are emitted but the requests are not blocked. By default, security traces are not emitted and the requests are not blocked.
     * 
     */
    @Import(name="onMatch")
    private @Nullable Output<String> onMatch;

    /**
     * @return The action taken when the exclusion filter matches. When set to `monitor`, security traces are emitted but the requests are not blocked. By default, security traces are not emitted and the requests are not blocked.
     * 
     */
    public Optional<Output<String>> onMatch() {
        return Optional.ofNullable(this.onMatch);
    }

    /**
     * A list of parameters matched by the exclusion filter in the HTTP query string and HTTP request body. Nested parameters can be matched by joining fields with a dot character.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<List<String>> parameters;

    /**
     * @return A list of parameters matched by the exclusion filter in the HTTP query string and HTTP request body. Nested parameters can be matched by joining fields with a dot character.
     * 
     */
    public Optional<Output<List<String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The HTTP path glob expression matched by the exclusion filter.
     * 
     */
    @Import(name="pathGlob")
    private @Nullable Output<String> pathGlob;

    /**
     * @return The HTTP path glob expression matched by the exclusion filter.
     * 
     */
    public Optional<Output<String>> pathGlob() {
        return Optional.ofNullable(this.pathGlob);
    }

    @Import(name="rulesTargets")
    private @Nullable Output<List<AppsecWafExclusionFilterRulesTargetArgs>> rulesTargets;

    public Optional<Output<List<AppsecWafExclusionFilterRulesTargetArgs>>> rulesTargets() {
        return Optional.ofNullable(this.rulesTargets);
    }

    @Import(name="scopes")
    private @Nullable Output<List<AppsecWafExclusionFilterScopeArgs>> scopes;

    public Optional<Output<List<AppsecWafExclusionFilterScopeArgs>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    private AppsecWafExclusionFilterArgs() {}

    private AppsecWafExclusionFilterArgs(AppsecWafExclusionFilterArgs $) {
        this.description = $.description;
        this.enabled = $.enabled;
        this.eventQuery = $.eventQuery;
        this.ipLists = $.ipLists;
        this.onMatch = $.onMatch;
        this.parameters = $.parameters;
        this.pathGlob = $.pathGlob;
        this.rulesTargets = $.rulesTargets;
        this.scopes = $.scopes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppsecWafExclusionFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppsecWafExclusionFilterArgs $;

        public Builder() {
            $ = new AppsecWafExclusionFilterArgs();
        }

        public Builder(AppsecWafExclusionFilterArgs defaults) {
            $ = new AppsecWafExclusionFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description for the exclusion filter.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the exclusion filter.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Indicates whether the exclusion filter is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Indicates whether the exclusion filter is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param eventQuery The event query matched by the legacy exclusion filter. Cannot be created nor updated.
         * 
         * @return builder
         * 
         */
        public Builder eventQuery(@Nullable Output<String> eventQuery) {
            $.eventQuery = eventQuery;
            return this;
        }

        /**
         * @param eventQuery The event query matched by the legacy exclusion filter. Cannot be created nor updated.
         * 
         * @return builder
         * 
         */
        public Builder eventQuery(String eventQuery) {
            return eventQuery(Output.of(eventQuery));
        }

        /**
         * @param ipLists The client IP addresses matched by the exclusion filter (CIDR notation is supported).
         * 
         * @return builder
         * 
         */
        public Builder ipLists(@Nullable Output<List<String>> ipLists) {
            $.ipLists = ipLists;
            return this;
        }

        /**
         * @param ipLists The client IP addresses matched by the exclusion filter (CIDR notation is supported).
         * 
         * @return builder
         * 
         */
        public Builder ipLists(List<String> ipLists) {
            return ipLists(Output.of(ipLists));
        }

        /**
         * @param ipLists The client IP addresses matched by the exclusion filter (CIDR notation is supported).
         * 
         * @return builder
         * 
         */
        public Builder ipLists(String... ipLists) {
            return ipLists(List.of(ipLists));
        }

        /**
         * @param onMatch The action taken when the exclusion filter matches. When set to `monitor`, security traces are emitted but the requests are not blocked. By default, security traces are not emitted and the requests are not blocked.
         * 
         * @return builder
         * 
         */
        public Builder onMatch(@Nullable Output<String> onMatch) {
            $.onMatch = onMatch;
            return this;
        }

        /**
         * @param onMatch The action taken when the exclusion filter matches. When set to `monitor`, security traces are emitted but the requests are not blocked. By default, security traces are not emitted and the requests are not blocked.
         * 
         * @return builder
         * 
         */
        public Builder onMatch(String onMatch) {
            return onMatch(Output.of(onMatch));
        }

        /**
         * @param parameters A list of parameters matched by the exclusion filter in the HTTP query string and HTTP request body. Nested parameters can be matched by joining fields with a dot character.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<List<String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters A list of parameters matched by the exclusion filter in the HTTP query string and HTTP request body. Nested parameters can be matched by joining fields with a dot character.
         * 
         * @return builder
         * 
         */
        public Builder parameters(List<String> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param parameters A list of parameters matched by the exclusion filter in the HTTP query string and HTTP request body. Nested parameters can be matched by joining fields with a dot character.
         * 
         * @return builder
         * 
         */
        public Builder parameters(String... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @param pathGlob The HTTP path glob expression matched by the exclusion filter.
         * 
         * @return builder
         * 
         */
        public Builder pathGlob(@Nullable Output<String> pathGlob) {
            $.pathGlob = pathGlob;
            return this;
        }

        /**
         * @param pathGlob The HTTP path glob expression matched by the exclusion filter.
         * 
         * @return builder
         * 
         */
        public Builder pathGlob(String pathGlob) {
            return pathGlob(Output.of(pathGlob));
        }

        public Builder rulesTargets(@Nullable Output<List<AppsecWafExclusionFilterRulesTargetArgs>> rulesTargets) {
            $.rulesTargets = rulesTargets;
            return this;
        }

        public Builder rulesTargets(List<AppsecWafExclusionFilterRulesTargetArgs> rulesTargets) {
            return rulesTargets(Output.of(rulesTargets));
        }

        public Builder rulesTargets(AppsecWafExclusionFilterRulesTargetArgs... rulesTargets) {
            return rulesTargets(List.of(rulesTargets));
        }

        public Builder scopes(@Nullable Output<List<AppsecWafExclusionFilterScopeArgs>> scopes) {
            $.scopes = scopes;
            return this;
        }

        public Builder scopes(List<AppsecWafExclusionFilterScopeArgs> scopes) {
            return scopes(Output.of(scopes));
        }

        public Builder scopes(AppsecWafExclusionFilterScopeArgs... scopes) {
            return scopes(List.of(scopes));
        }

        public AppsecWafExclusionFilterArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("AppsecWafExclusionFilterArgs", "description");
            }
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("AppsecWafExclusionFilterArgs", "enabled");
            }
            return $;
        }
    }

}
