// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.CostBudgetEntryArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CostBudgetArgs extends com.pulumi.resources.ResourceArgs {

    public static final CostBudgetArgs Empty = new CostBudgetArgs();

    /**
     * The ID of the budget.
     * 
     */
    @Import(name="budgetId")
    private @Nullable Output<String> budgetId;

    /**
     * @return The ID of the budget.
     * 
     */
    public Optional<Output<String>> budgetId() {
        return Optional.ofNullable(this.budgetId);
    }

    /**
     * The month when the budget ends (YYYYMM).
     * 
     */
    @Import(name="endMonth", required=true)
    private Output<Integer> endMonth;

    /**
     * @return The month when the budget ends (YYYYMM).
     * 
     */
    public Output<Integer> endMonth() {
        return this.endMonth;
    }

    /**
     * The entries of the budget.
     * 
     */
    @Import(name="entries")
    private @Nullable Output<List<CostBudgetEntryArgs>> entries;

    /**
     * @return The entries of the budget.
     * 
     */
    public Optional<Output<List<CostBudgetEntryArgs>>> entries() {
        return Optional.ofNullable(this.entries);
    }

    /**
     * The cost query used to track against the budget.
     * 
     */
    @Import(name="metricsQuery", required=true)
    private Output<String> metricsQuery;

    /**
     * @return The cost query used to track against the budget.
     * 
     */
    public Output<String> metricsQuery() {
        return this.metricsQuery;
    }

    /**
     * The name of the budget.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the budget.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The month when the budget starts (YYYYMM).
     * 
     */
    @Import(name="startMonth", required=true)
    private Output<Integer> startMonth;

    /**
     * @return The month when the budget starts (YYYYMM).
     * 
     */
    public Output<Integer> startMonth() {
        return this.startMonth;
    }

    private CostBudgetArgs() {}

    private CostBudgetArgs(CostBudgetArgs $) {
        this.budgetId = $.budgetId;
        this.endMonth = $.endMonth;
        this.entries = $.entries;
        this.metricsQuery = $.metricsQuery;
        this.name = $.name;
        this.startMonth = $.startMonth;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CostBudgetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CostBudgetArgs $;

        public Builder() {
            $ = new CostBudgetArgs();
        }

        public Builder(CostBudgetArgs defaults) {
            $ = new CostBudgetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param budgetId The ID of the budget.
         * 
         * @return builder
         * 
         */
        public Builder budgetId(@Nullable Output<String> budgetId) {
            $.budgetId = budgetId;
            return this;
        }

        /**
         * @param budgetId The ID of the budget.
         * 
         * @return builder
         * 
         */
        public Builder budgetId(String budgetId) {
            return budgetId(Output.of(budgetId));
        }

        /**
         * @param endMonth The month when the budget ends (YYYYMM).
         * 
         * @return builder
         * 
         */
        public Builder endMonth(Output<Integer> endMonth) {
            $.endMonth = endMonth;
            return this;
        }

        /**
         * @param endMonth The month when the budget ends (YYYYMM).
         * 
         * @return builder
         * 
         */
        public Builder endMonth(Integer endMonth) {
            return endMonth(Output.of(endMonth));
        }

        /**
         * @param entries The entries of the budget.
         * 
         * @return builder
         * 
         */
        public Builder entries(@Nullable Output<List<CostBudgetEntryArgs>> entries) {
            $.entries = entries;
            return this;
        }

        /**
         * @param entries The entries of the budget.
         * 
         * @return builder
         * 
         */
        public Builder entries(List<CostBudgetEntryArgs> entries) {
            return entries(Output.of(entries));
        }

        /**
         * @param entries The entries of the budget.
         * 
         * @return builder
         * 
         */
        public Builder entries(CostBudgetEntryArgs... entries) {
            return entries(List.of(entries));
        }

        /**
         * @param metricsQuery The cost query used to track against the budget.
         * 
         * @return builder
         * 
         */
        public Builder metricsQuery(Output<String> metricsQuery) {
            $.metricsQuery = metricsQuery;
            return this;
        }

        /**
         * @param metricsQuery The cost query used to track against the budget.
         * 
         * @return builder
         * 
         */
        public Builder metricsQuery(String metricsQuery) {
            return metricsQuery(Output.of(metricsQuery));
        }

        /**
         * @param name The name of the budget.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the budget.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param startMonth The month when the budget starts (YYYYMM).
         * 
         * @return builder
         * 
         */
        public Builder startMonth(Output<Integer> startMonth) {
            $.startMonth = startMonth;
            return this;
        }

        /**
         * @param startMonth The month when the budget starts (YYYYMM).
         * 
         * @return builder
         * 
         */
        public Builder startMonth(Integer startMonth) {
            return startMonth(Output.of(startMonth));
        }

        public CostBudgetArgs build() {
            if ($.endMonth == null) {
                throw new MissingRequiredPropertyException("CostBudgetArgs", "endMonth");
            }
            if ($.metricsQuery == null) {
                throw new MissingRequiredPropertyException("CostBudgetArgs", "metricsQuery");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("CostBudgetArgs", "name");
            }
            if ($.startMonth == null) {
                throw new MissingRequiredPropertyException("CostBudgetArgs", "startMonth");
            }
            return $;
        }
    }

}
