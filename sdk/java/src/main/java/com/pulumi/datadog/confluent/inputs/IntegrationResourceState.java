// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.confluent.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationResourceState extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationResourceState Empty = new IntegrationResourceState();

    /**
     * Confluent Account ID.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Confluent Account ID.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The ID associated with a Confluent resource.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return The ID associated with a Confluent resource.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * The resource type of the Resource. Can be `kafka`, `connector`, `ksql`, or `schema_registry`.
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return The resource type of the Resource. Can be `kafka`, `connector`, `ksql`, or `schema_registry`.
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private IntegrationResourceState() {}

    private IntegrationResourceState(IntegrationResourceState $) {
        this.accountId = $.accountId;
        this.resourceId = $.resourceId;
        this.resourceType = $.resourceType;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationResourceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationResourceState $;

        public Builder() {
            $ = new IntegrationResourceState();
        }

        public Builder(IntegrationResourceState defaults) {
            $ = new IntegrationResourceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Confluent Account ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Confluent Account ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param resourceId The ID associated with a Confluent resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The ID associated with a Confluent resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param resourceType The resource type of the Resource. Can be `kafka`, `connector`, `ksql`, or `schema_registry`.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The resource type of the Resource. Can be `kafka`, `connector`, `ksql`, or `schema_registry`.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param tags A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public IntegrationResourceState build() {
            return $;
        }
    }

}
