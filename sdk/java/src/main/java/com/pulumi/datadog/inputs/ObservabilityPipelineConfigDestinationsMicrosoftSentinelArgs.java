// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs Empty = new ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs();

    /**
     * Azure AD client ID used for authentication.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return Azure AD client ID used for authentication.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * The immutable ID of the Data Collection Rule (DCR).
     * 
     */
    @Import(name="dcrImmutableId", required=true)
    private Output<String> dcrImmutableId;

    /**
     * @return The immutable ID of the Data Collection Rule (DCR).
     * 
     */
    public Output<String> dcrImmutableId() {
        return this.dcrImmutableId;
    }

    /**
     * The unique identifier for this component.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique identifier for this component.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    @Import(name="inputs", required=true)
    private Output<List<String>> inputs;

    /**
     * @return A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    public Output<List<String>> inputs() {
        return this.inputs;
    }

    /**
     * The name of the Log Analytics table where logs will be sent.
     * 
     */
    @Import(name="table", required=true)
    private Output<String> table;

    /**
     * @return The name of the Log Analytics table where logs will be sent.
     * 
     */
    public Output<String> table() {
        return this.table;
    }

    /**
     * Azure AD tenant ID.
     * 
     */
    @Import(name="tenantId", required=true)
    private Output<String> tenantId;

    /**
     * @return Azure AD tenant ID.
     * 
     */
    public Output<String> tenantId() {
        return this.tenantId;
    }

    private ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs() {}

    private ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs(ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs $) {
        this.clientId = $.clientId;
        this.dcrImmutableId = $.dcrImmutableId;
        this.id = $.id;
        this.inputs = $.inputs;
        this.table = $.table;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs();
        }

        public Builder(ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs defaults) {
            $ = new ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId Azure AD client ID used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Azure AD client ID used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param dcrImmutableId The immutable ID of the Data Collection Rule (DCR).
         * 
         * @return builder
         * 
         */
        public Builder dcrImmutableId(Output<String> dcrImmutableId) {
            $.dcrImmutableId = dcrImmutableId;
            return this;
        }

        /**
         * @param dcrImmutableId The immutable ID of the Data Collection Rule (DCR).
         * 
         * @return builder
         * 
         */
        public Builder dcrImmutableId(String dcrImmutableId) {
            return dcrImmutableId(Output.of(dcrImmutableId));
        }

        /**
         * @param id The unique identifier for this component.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier for this component.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(Output<List<String>> inputs) {
            $.inputs = inputs;
            return this;
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(List<String> inputs) {
            return inputs(Output.of(inputs));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }

        /**
         * @param table The name of the Log Analytics table where logs will be sent.
         * 
         * @return builder
         * 
         */
        public Builder table(Output<String> table) {
            $.table = table;
            return this;
        }

        /**
         * @param table The name of the Log Analytics table where logs will be sent.
         * 
         * @return builder
         * 
         */
        public Builder table(String table) {
            return table(Output.of(table));
        }

        /**
         * @param tenantId Azure AD tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId Azure AD tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs build() {
            if ($.clientId == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs", "clientId");
            }
            if ($.dcrImmutableId == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs", "dcrImmutableId");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs", "id");
            }
            if ($.inputs == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs", "inputs");
            }
            if ($.table == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs", "table");
            }
            if ($.tenantId == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsMicrosoftSentinelArgs", "tenantId");
            }
            return $;
        }
    }

}
