// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class SensitiveDataScannerRuleIncludedKeywordConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SensitiveDataScannerRuleIncludedKeywordConfigurationArgs Empty = new SensitiveDataScannerRuleIncludedKeywordConfigurationArgs();

    /**
     * Number of characters before the match to find a keyword validating the match. It must be between 1 and 50 (inclusive).
     * 
     */
    @Import(name="characterCount", required=true)
    private Output<Integer> characterCount;

    /**
     * @return Number of characters before the match to find a keyword validating the match. It must be between 1 and 50 (inclusive).
     * 
     */
    public Output<Integer> characterCount() {
        return this.characterCount;
    }

    /**
     * Keyword list that is checked during scanning in order to validate a match. The number of keywords in the list must be lower than or equal to 30.
     * 
     */
    @Import(name="keywords", required=true)
    private Output<List<String>> keywords;

    /**
     * @return Keyword list that is checked during scanning in order to validate a match. The number of keywords in the list must be lower than or equal to 30.
     * 
     */
    public Output<List<String>> keywords() {
        return this.keywords;
    }

    private SensitiveDataScannerRuleIncludedKeywordConfigurationArgs() {}

    private SensitiveDataScannerRuleIncludedKeywordConfigurationArgs(SensitiveDataScannerRuleIncludedKeywordConfigurationArgs $) {
        this.characterCount = $.characterCount;
        this.keywords = $.keywords;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SensitiveDataScannerRuleIncludedKeywordConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SensitiveDataScannerRuleIncludedKeywordConfigurationArgs $;

        public Builder() {
            $ = new SensitiveDataScannerRuleIncludedKeywordConfigurationArgs();
        }

        public Builder(SensitiveDataScannerRuleIncludedKeywordConfigurationArgs defaults) {
            $ = new SensitiveDataScannerRuleIncludedKeywordConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param characterCount Number of characters before the match to find a keyword validating the match. It must be between 1 and 50 (inclusive).
         * 
         * @return builder
         * 
         */
        public Builder characterCount(Output<Integer> characterCount) {
            $.characterCount = characterCount;
            return this;
        }

        /**
         * @param characterCount Number of characters before the match to find a keyword validating the match. It must be between 1 and 50 (inclusive).
         * 
         * @return builder
         * 
         */
        public Builder characterCount(Integer characterCount) {
            return characterCount(Output.of(characterCount));
        }

        /**
         * @param keywords Keyword list that is checked during scanning in order to validate a match. The number of keywords in the list must be lower than or equal to 30.
         * 
         * @return builder
         * 
         */
        public Builder keywords(Output<List<String>> keywords) {
            $.keywords = keywords;
            return this;
        }

        /**
         * @param keywords Keyword list that is checked during scanning in order to validate a match. The number of keywords in the list must be lower than or equal to 30.
         * 
         * @return builder
         * 
         */
        public Builder keywords(List<String> keywords) {
            return keywords(Output.of(keywords));
        }

        /**
         * @param keywords Keyword list that is checked during scanning in order to validate a match. The number of keywords in the list must be lower than or equal to 30.
         * 
         * @return builder
         * 
         */
        public Builder keywords(String... keywords) {
            return keywords(List.of(keywords));
        }

        public SensitiveDataScannerRuleIncludedKeywordConfigurationArgs build() {
            if ($.characterCount == null) {
                throw new MissingRequiredPropertyException("SensitiveDataScannerRuleIncludedKeywordConfigurationArgs", "characterCount");
            }
            if ($.keywords == null) {
                throw new MissingRequiredPropertyException("SensitiveDataScannerRuleIncludedKeywordConfigurationArgs", "keywords");
            }
            return $;
        }
    }

}
