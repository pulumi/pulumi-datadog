// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.DashboardWidgetSplitGraphDefinitionSourceWidgetDefinition;
import com.pulumi.datadog.outputs.DashboardWidgetSplitGraphDefinitionSplitConfig;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardWidgetSplitGraphDefinition {
    /**
     * @return Normalize y axes across graphs.
     * 
     */
    private @Nullable Boolean hasUniformYAxes;
    /**
     * @return The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
     * 
     */
    private @Nullable String liveSpan;
    /**
     * @return Size of the individual graphs in the split.
     * 
     */
    private String size;
    /**
     * @return The original widget we are splitting on.
     * 
     */
    private DashboardWidgetSplitGraphDefinitionSourceWidgetDefinition sourceWidgetDefinition;
    /**
     * @return Encapsulates all user choices about how to split a graph.
     * 
     */
    private DashboardWidgetSplitGraphDefinitionSplitConfig splitConfig;
    /**
     * @return The title of the widget.
     * 
     */
    private @Nullable String title;

    private DashboardWidgetSplitGraphDefinition() {}
    /**
     * @return Normalize y axes across graphs.
     * 
     */
    public Optional<Boolean> hasUniformYAxes() {
        return Optional.ofNullable(this.hasUniformYAxes);
    }
    /**
     * @return The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
     * 
     */
    public Optional<String> liveSpan() {
        return Optional.ofNullable(this.liveSpan);
    }
    /**
     * @return Size of the individual graphs in the split.
     * 
     */
    public String size() {
        return this.size;
    }
    /**
     * @return The original widget we are splitting on.
     * 
     */
    public DashboardWidgetSplitGraphDefinitionSourceWidgetDefinition sourceWidgetDefinition() {
        return this.sourceWidgetDefinition;
    }
    /**
     * @return Encapsulates all user choices about how to split a graph.
     * 
     */
    public DashboardWidgetSplitGraphDefinitionSplitConfig splitConfig() {
        return this.splitConfig;
    }
    /**
     * @return The title of the widget.
     * 
     */
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardWidgetSplitGraphDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean hasUniformYAxes;
        private @Nullable String liveSpan;
        private String size;
        private DashboardWidgetSplitGraphDefinitionSourceWidgetDefinition sourceWidgetDefinition;
        private DashboardWidgetSplitGraphDefinitionSplitConfig splitConfig;
        private @Nullable String title;
        public Builder() {}
        public Builder(DashboardWidgetSplitGraphDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hasUniformYAxes = defaults.hasUniformYAxes;
    	      this.liveSpan = defaults.liveSpan;
    	      this.size = defaults.size;
    	      this.sourceWidgetDefinition = defaults.sourceWidgetDefinition;
    	      this.splitConfig = defaults.splitConfig;
    	      this.title = defaults.title;
        }

        @CustomType.Setter
        public Builder hasUniformYAxes(@Nullable Boolean hasUniformYAxes) {

            this.hasUniformYAxes = hasUniformYAxes;
            return this;
        }
        @CustomType.Setter
        public Builder liveSpan(@Nullable String liveSpan) {

            this.liveSpan = liveSpan;
            return this;
        }
        @CustomType.Setter
        public Builder size(String size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("DashboardWidgetSplitGraphDefinition", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder sourceWidgetDefinition(DashboardWidgetSplitGraphDefinitionSourceWidgetDefinition sourceWidgetDefinition) {
            if (sourceWidgetDefinition == null) {
              throw new MissingRequiredPropertyException("DashboardWidgetSplitGraphDefinition", "sourceWidgetDefinition");
            }
            this.sourceWidgetDefinition = sourceWidgetDefinition;
            return this;
        }
        @CustomType.Setter
        public Builder splitConfig(DashboardWidgetSplitGraphDefinitionSplitConfig splitConfig) {
            if (splitConfig == null) {
              throw new MissingRequiredPropertyException("DashboardWidgetSplitGraphDefinition", "splitConfig");
            }
            this.splitConfig = splitConfig;
            return this;
        }
        @CustomType.Setter
        public Builder title(@Nullable String title) {

            this.title = title;
            return this;
        }
        public DashboardWidgetSplitGraphDefinition build() {
            final var _resultValue = new DashboardWidgetSplitGraphDefinition();
            _resultValue.hasUniformYAxes = hasUniformYAxes;
            _resultValue.liveSpan = liveSpan;
            _resultValue.size = size;
            _resultValue.sourceWidgetDefinition = sourceWidgetDefinition;
            _resultValue.splitConfig = splitConfig;
            _resultValue.title = title;
            return _resultValue;
        }
    }
}
