// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.TagPipelineRulesetRuleArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagPipelineRulesetState extends com.pulumi.resources.ResourceArgs {

    public static final TagPipelineRulesetState Empty = new TagPipelineRulesetState();

    /**
     * Whether the ruleset is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the ruleset is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The name of the ruleset.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the ruleset.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The position of the ruleset in the pipeline.
     * 
     */
    @Import(name="position")
    private @Nullable Output<Integer> position;

    /**
     * @return The position of the ruleset in the pipeline.
     * 
     */
    public Optional<Output<Integer>> position() {
        return Optional.ofNullable(this.position);
    }

    /**
     * The rules in the ruleset.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<TagPipelineRulesetRuleArgs>> rules;

    /**
     * @return The rules in the ruleset.
     * 
     */
    public Optional<Output<List<TagPipelineRulesetRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * The version of the ruleset.
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The version of the ruleset.
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private TagPipelineRulesetState() {}

    private TagPipelineRulesetState(TagPipelineRulesetState $) {
        this.enabled = $.enabled;
        this.name = $.name;
        this.position = $.position;
        this.rules = $.rules;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagPipelineRulesetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagPipelineRulesetState $;

        public Builder() {
            $ = new TagPipelineRulesetState();
        }

        public Builder(TagPipelineRulesetState defaults) {
            $ = new TagPipelineRulesetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Whether the ruleset is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the ruleset is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name The name of the ruleset.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the ruleset.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param position The position of the ruleset in the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder position(@Nullable Output<Integer> position) {
            $.position = position;
            return this;
        }

        /**
         * @param position The position of the ruleset in the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder position(Integer position) {
            return position(Output.of(position));
        }

        /**
         * @param rules The rules in the ruleset.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<TagPipelineRulesetRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules The rules in the ruleset.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<TagPipelineRulesetRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules The rules in the ruleset.
         * 
         * @return builder
         * 
         */
        public Builder rules(TagPipelineRulesetRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param version The version of the ruleset.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the ruleset.
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public TagPipelineRulesetState build() {
            return $;
        }
    }

}
