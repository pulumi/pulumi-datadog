// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.GetCustomAllocationRuleStrategyAllocatedBy;
import com.pulumi.datadog.inputs.GetCustomAllocationRuleStrategyAllocatedByFilter;
import com.pulumi.datadog.inputs.GetCustomAllocationRuleStrategyBasedOnCost;
import com.pulumi.datadog.inputs.GetCustomAllocationRuleStrategyBasedOnTimeseries;
import com.pulumi.datadog.inputs.GetCustomAllocationRuleStrategyEvaluateGroupedByFilter;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCustomAllocationRuleStrategy extends com.pulumi.resources.InvokeArgs {

    public static final GetCustomAllocationRuleStrategy Empty = new GetCustomAllocationRuleStrategy();

    @Import(name="allocatedBies")
    private @Nullable List<GetCustomAllocationRuleStrategyAllocatedBy> allocatedBies;

    public Optional<List<GetCustomAllocationRuleStrategyAllocatedBy>> allocatedBies() {
        return Optional.ofNullable(this.allocatedBies);
    }

    @Import(name="allocatedByFilters")
    private @Nullable List<GetCustomAllocationRuleStrategyAllocatedByFilter> allocatedByFilters;

    public Optional<List<GetCustomAllocationRuleStrategyAllocatedByFilter>> allocatedByFilters() {
        return Optional.ofNullable(this.allocatedByFilters);
    }

    /**
     * List of tag keys used to allocate costs.
     * 
     */
    @Import(name="allocatedByTagKeys", required=true)
    private List<String> allocatedByTagKeys;

    /**
     * @return List of tag keys used to allocate costs.
     * 
     */
    public List<String> allocatedByTagKeys() {
        return this.allocatedByTagKeys;
    }

    @Import(name="basedOnCosts")
    private @Nullable List<GetCustomAllocationRuleStrategyBasedOnCost> basedOnCosts;

    public Optional<List<GetCustomAllocationRuleStrategyBasedOnCost>> basedOnCosts() {
        return Optional.ofNullable(this.basedOnCosts);
    }

    @Import(name="basedOnTimeseries")
    private @Nullable GetCustomAllocationRuleStrategyBasedOnTimeseries basedOnTimeseries;

    public Optional<GetCustomAllocationRuleStrategyBasedOnTimeseries> basedOnTimeseries() {
        return Optional.ofNullable(this.basedOnTimeseries);
    }

    @Import(name="evaluateGroupedByFilters")
    private @Nullable List<GetCustomAllocationRuleStrategyEvaluateGroupedByFilter> evaluateGroupedByFilters;

    public Optional<List<GetCustomAllocationRuleStrategyEvaluateGroupedByFilter>> evaluateGroupedByFilters() {
        return Optional.ofNullable(this.evaluateGroupedByFilters);
    }

    /**
     * List of tag keys used to group costs before allocation.
     * 
     */
    @Import(name="evaluateGroupedByTagKeys", required=true)
    private List<String> evaluateGroupedByTagKeys;

    /**
     * @return List of tag keys used to group costs before allocation.
     * 
     */
    public List<String> evaluateGroupedByTagKeys() {
        return this.evaluateGroupedByTagKeys;
    }

    /**
     * The granularity level for cost allocation (`daily` or `monthly`).
     * 
     */
    @Import(name="granularity", required=true)
    private String granularity;

    /**
     * @return The granularity level for cost allocation (`daily` or `monthly`).
     * 
     */
    public String granularity() {
        return this.granularity;
    }

    /**
     * The allocation method. Valid values are `even`, `proportional`, `proportionalTimeseries`, or `percent`.
     * 
     */
    @Import(name="method", required=true)
    private String method;

    /**
     * @return The allocation method. Valid values are `even`, `proportional`, `proportionalTimeseries`, or `percent`.
     * 
     */
    public String method() {
        return this.method;
    }

    private GetCustomAllocationRuleStrategy() {}

    private GetCustomAllocationRuleStrategy(GetCustomAllocationRuleStrategy $) {
        this.allocatedBies = $.allocatedBies;
        this.allocatedByFilters = $.allocatedByFilters;
        this.allocatedByTagKeys = $.allocatedByTagKeys;
        this.basedOnCosts = $.basedOnCosts;
        this.basedOnTimeseries = $.basedOnTimeseries;
        this.evaluateGroupedByFilters = $.evaluateGroupedByFilters;
        this.evaluateGroupedByTagKeys = $.evaluateGroupedByTagKeys;
        this.granularity = $.granularity;
        this.method = $.method;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCustomAllocationRuleStrategy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCustomAllocationRuleStrategy $;

        public Builder() {
            $ = new GetCustomAllocationRuleStrategy();
        }

        public Builder(GetCustomAllocationRuleStrategy defaults) {
            $ = new GetCustomAllocationRuleStrategy(Objects.requireNonNull(defaults));
        }

        public Builder allocatedBies(@Nullable List<GetCustomAllocationRuleStrategyAllocatedBy> allocatedBies) {
            $.allocatedBies = allocatedBies;
            return this;
        }

        public Builder allocatedBies(GetCustomAllocationRuleStrategyAllocatedBy... allocatedBies) {
            return allocatedBies(List.of(allocatedBies));
        }

        public Builder allocatedByFilters(@Nullable List<GetCustomAllocationRuleStrategyAllocatedByFilter> allocatedByFilters) {
            $.allocatedByFilters = allocatedByFilters;
            return this;
        }

        public Builder allocatedByFilters(GetCustomAllocationRuleStrategyAllocatedByFilter... allocatedByFilters) {
            return allocatedByFilters(List.of(allocatedByFilters));
        }

        /**
         * @param allocatedByTagKeys List of tag keys used to allocate costs.
         * 
         * @return builder
         * 
         */
        public Builder allocatedByTagKeys(List<String> allocatedByTagKeys) {
            $.allocatedByTagKeys = allocatedByTagKeys;
            return this;
        }

        /**
         * @param allocatedByTagKeys List of tag keys used to allocate costs.
         * 
         * @return builder
         * 
         */
        public Builder allocatedByTagKeys(String... allocatedByTagKeys) {
            return allocatedByTagKeys(List.of(allocatedByTagKeys));
        }

        public Builder basedOnCosts(@Nullable List<GetCustomAllocationRuleStrategyBasedOnCost> basedOnCosts) {
            $.basedOnCosts = basedOnCosts;
            return this;
        }

        public Builder basedOnCosts(GetCustomAllocationRuleStrategyBasedOnCost... basedOnCosts) {
            return basedOnCosts(List.of(basedOnCosts));
        }

        public Builder basedOnTimeseries(@Nullable GetCustomAllocationRuleStrategyBasedOnTimeseries basedOnTimeseries) {
            $.basedOnTimeseries = basedOnTimeseries;
            return this;
        }

        public Builder evaluateGroupedByFilters(@Nullable List<GetCustomAllocationRuleStrategyEvaluateGroupedByFilter> evaluateGroupedByFilters) {
            $.evaluateGroupedByFilters = evaluateGroupedByFilters;
            return this;
        }

        public Builder evaluateGroupedByFilters(GetCustomAllocationRuleStrategyEvaluateGroupedByFilter... evaluateGroupedByFilters) {
            return evaluateGroupedByFilters(List.of(evaluateGroupedByFilters));
        }

        /**
         * @param evaluateGroupedByTagKeys List of tag keys used to group costs before allocation.
         * 
         * @return builder
         * 
         */
        public Builder evaluateGroupedByTagKeys(List<String> evaluateGroupedByTagKeys) {
            $.evaluateGroupedByTagKeys = evaluateGroupedByTagKeys;
            return this;
        }

        /**
         * @param evaluateGroupedByTagKeys List of tag keys used to group costs before allocation.
         * 
         * @return builder
         * 
         */
        public Builder evaluateGroupedByTagKeys(String... evaluateGroupedByTagKeys) {
            return evaluateGroupedByTagKeys(List.of(evaluateGroupedByTagKeys));
        }

        /**
         * @param granularity The granularity level for cost allocation (`daily` or `monthly`).
         * 
         * @return builder
         * 
         */
        public Builder granularity(String granularity) {
            $.granularity = granularity;
            return this;
        }

        /**
         * @param method The allocation method. Valid values are `even`, `proportional`, `proportionalTimeseries`, or `percent`.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            $.method = method;
            return this;
        }

        public GetCustomAllocationRuleStrategy build() {
            if ($.allocatedByTagKeys == null) {
                throw new MissingRequiredPropertyException("GetCustomAllocationRuleStrategy", "allocatedByTagKeys");
            }
            if ($.evaluateGroupedByTagKeys == null) {
                throw new MissingRequiredPropertyException("GetCustomAllocationRuleStrategy", "evaluateGroupedByTagKeys");
            }
            if ($.granularity == null) {
                throw new MissingRequiredPropertyException("GetCustomAllocationRuleStrategy", "granularity");
            }
            if ($.method == null) {
                throw new MissingRequiredPropertyException("GetCustomAllocationRuleStrategy", "method");
            }
            return $;
        }
    }

}
