// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetTeamsTeamArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetTeamsTeamArgs Empty = new GetTeamsTeamArgs();

    /**
     * Free-form markdown description/content for the team&#39;s homepage.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Free-form markdown description/content for the team&#39;s homepage.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The team&#39;s handle.
     * 
     */
    @Import(name="handle", required=true)
    private Output<String> handle;

    /**
     * @return The team&#39;s handle.
     * 
     */
    public Output<String> handle() {
        return this.handle;
    }

    /**
     * The team&#39;s identifier.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The team&#39;s identifier.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The number of links belonging to the team.
     * 
     */
    @Import(name="linkCount", required=true)
    private Output<Integer> linkCount;

    /**
     * @return The number of links belonging to the team.
     * 
     */
    public Output<Integer> linkCount() {
        return this.linkCount;
    }

    /**
     * The name of the team.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the team.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * A brief summary of the team, derived from the `description`.
     * 
     */
    @Import(name="summary", required=true)
    private Output<String> summary;

    /**
     * @return A brief summary of the team, derived from the `description`.
     * 
     */
    public Output<String> summary() {
        return this.summary;
    }

    /**
     * The number of users belonging to the team.
     * 
     */
    @Import(name="userCount", required=true)
    private Output<Integer> userCount;

    /**
     * @return The number of users belonging to the team.
     * 
     */
    public Output<Integer> userCount() {
        return this.userCount;
    }

    private GetTeamsTeamArgs() {}

    private GetTeamsTeamArgs(GetTeamsTeamArgs $) {
        this.description = $.description;
        this.handle = $.handle;
        this.id = $.id;
        this.linkCount = $.linkCount;
        this.name = $.name;
        this.summary = $.summary;
        this.userCount = $.userCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTeamsTeamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTeamsTeamArgs $;

        public Builder() {
            $ = new GetTeamsTeamArgs();
        }

        public Builder(GetTeamsTeamArgs defaults) {
            $ = new GetTeamsTeamArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Free-form markdown description/content for the team&#39;s homepage.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Free-form markdown description/content for the team&#39;s homepage.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param handle The team&#39;s handle.
         * 
         * @return builder
         * 
         */
        public Builder handle(Output<String> handle) {
            $.handle = handle;
            return this;
        }

        /**
         * @param handle The team&#39;s handle.
         * 
         * @return builder
         * 
         */
        public Builder handle(String handle) {
            return handle(Output.of(handle));
        }

        /**
         * @param id The team&#39;s identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The team&#39;s identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param linkCount The number of links belonging to the team.
         * 
         * @return builder
         * 
         */
        public Builder linkCount(Output<Integer> linkCount) {
            $.linkCount = linkCount;
            return this;
        }

        /**
         * @param linkCount The number of links belonging to the team.
         * 
         * @return builder
         * 
         */
        public Builder linkCount(Integer linkCount) {
            return linkCount(Output.of(linkCount));
        }

        /**
         * @param name The name of the team.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the team.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param summary A brief summary of the team, derived from the `description`.
         * 
         * @return builder
         * 
         */
        public Builder summary(Output<String> summary) {
            $.summary = summary;
            return this;
        }

        /**
         * @param summary A brief summary of the team, derived from the `description`.
         * 
         * @return builder
         * 
         */
        public Builder summary(String summary) {
            return summary(Output.of(summary));
        }

        /**
         * @param userCount The number of users belonging to the team.
         * 
         * @return builder
         * 
         */
        public Builder userCount(Output<Integer> userCount) {
            $.userCount = userCount;
            return this;
        }

        /**
         * @param userCount The number of users belonging to the team.
         * 
         * @return builder
         * 
         */
        public Builder userCount(Integer userCount) {
            return userCount(Output.of(userCount));
        }

        public GetTeamsTeamArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("GetTeamsTeamArgs", "description");
            }
            if ($.handle == null) {
                throw new MissingRequiredPropertyException("GetTeamsTeamArgs", "handle");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetTeamsTeamArgs", "id");
            }
            if ($.linkCount == null) {
                throw new MissingRequiredPropertyException("GetTeamsTeamArgs", "linkCount");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetTeamsTeamArgs", "name");
            }
            if ($.summary == null) {
                throw new MissingRequiredPropertyException("GetTeamsTeamArgs", "summary");
            }
            if ($.userCount == null) {
                throw new MissingRequiredPropertyException("GetTeamsTeamArgs", "userCount");
            }
            return $;
        }
    }

}
