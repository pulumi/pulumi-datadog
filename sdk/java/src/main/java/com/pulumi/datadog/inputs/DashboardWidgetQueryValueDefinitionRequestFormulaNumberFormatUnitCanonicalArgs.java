// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetQueryValueDefinitionRequestFormulaNumberFormatUnitCanonicalArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetQueryValueDefinitionRequestFormulaNumberFormatUnitCanonicalArgs Empty = new DashboardWidgetQueryValueDefinitionRequestFormulaNumberFormatUnitCanonicalArgs();

    /**
     * per unit name. If you want to represent megabytes/s, you set &#39;unit*name&#39; = &#39;megabyte&#39; and &#39;per*unit_name = &#39;second&#39;
     * 
     */
    @Import(name="perUnitName")
    private @Nullable Output<String> perUnitName;

    /**
     * @return per unit name. If you want to represent megabytes/s, you set &#39;unit*name&#39; = &#39;megabyte&#39; and &#39;per*unit_name = &#39;second&#39;
     * 
     */
    public Optional<Output<String>> perUnitName() {
        return Optional.ofNullable(this.perUnitName);
    }

    /**
     * Unit name. It should be in singular form (&#39;megabyte&#39; and not &#39;megabytes&#39;)
     * 
     */
    @Import(name="unitName", required=true)
    private Output<String> unitName;

    /**
     * @return Unit name. It should be in singular form (&#39;megabyte&#39; and not &#39;megabytes&#39;)
     * 
     */
    public Output<String> unitName() {
        return this.unitName;
    }

    private DashboardWidgetQueryValueDefinitionRequestFormulaNumberFormatUnitCanonicalArgs() {}

    private DashboardWidgetQueryValueDefinitionRequestFormulaNumberFormatUnitCanonicalArgs(DashboardWidgetQueryValueDefinitionRequestFormulaNumberFormatUnitCanonicalArgs $) {
        this.perUnitName = $.perUnitName;
        this.unitName = $.unitName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetQueryValueDefinitionRequestFormulaNumberFormatUnitCanonicalArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetQueryValueDefinitionRequestFormulaNumberFormatUnitCanonicalArgs $;

        public Builder() {
            $ = new DashboardWidgetQueryValueDefinitionRequestFormulaNumberFormatUnitCanonicalArgs();
        }

        public Builder(DashboardWidgetQueryValueDefinitionRequestFormulaNumberFormatUnitCanonicalArgs defaults) {
            $ = new DashboardWidgetQueryValueDefinitionRequestFormulaNumberFormatUnitCanonicalArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param perUnitName per unit name. If you want to represent megabytes/s, you set &#39;unit*name&#39; = &#39;megabyte&#39; and &#39;per*unit_name = &#39;second&#39;
         * 
         * @return builder
         * 
         */
        public Builder perUnitName(@Nullable Output<String> perUnitName) {
            $.perUnitName = perUnitName;
            return this;
        }

        /**
         * @param perUnitName per unit name. If you want to represent megabytes/s, you set &#39;unit*name&#39; = &#39;megabyte&#39; and &#39;per*unit_name = &#39;second&#39;
         * 
         * @return builder
         * 
         */
        public Builder perUnitName(String perUnitName) {
            return perUnitName(Output.of(perUnitName));
        }

        /**
         * @param unitName Unit name. It should be in singular form (&#39;megabyte&#39; and not &#39;megabytes&#39;)
         * 
         * @return builder
         * 
         */
        public Builder unitName(Output<String> unitName) {
            $.unitName = unitName;
            return this;
        }

        /**
         * @param unitName Unit name. It should be in singular form (&#39;megabyte&#39; and not &#39;megabytes&#39;)
         * 
         * @return builder
         * 
         */
        public Builder unitName(String unitName) {
            return unitName(Output.of(unitName));
        }

        public DashboardWidgetQueryValueDefinitionRequestFormulaNumberFormatUnitCanonicalArgs build() {
            if ($.unitName == null) {
                throw new MissingRequiredPropertyException("DashboardWidgetQueryValueDefinitionRequestFormulaNumberFormatUnitCanonicalArgs", "unitName");
            }
            return $;
        }
    }

}
