// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.GetTagPipelineRulesetRuleQueryAdditionArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTagPipelineRulesetRuleQueryArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetTagPipelineRulesetRuleQueryArgs Empty = new GetTagPipelineRulesetRuleQueryArgs();

    /**
     * The addition configuration for the query.
     * 
     */
    @Import(name="addition")
    private @Nullable Output<GetTagPipelineRulesetRuleQueryAdditionArgs> addition;

    /**
     * @return The addition configuration for the query.
     * 
     */
    public Optional<Output<GetTagPipelineRulesetRuleQueryAdditionArgs>> addition() {
        return Optional.ofNullable(this.addition);
    }

    /**
     * Whether the query matching is case insensitive.
     * 
     */
    @Import(name="caseInsensitivity", required=true)
    private Output<Boolean> caseInsensitivity;

    /**
     * @return Whether the query matching is case insensitive.
     * 
     */
    public Output<Boolean> caseInsensitivity() {
        return this.caseInsensitivity;
    }

    /**
     * Whether to apply the query only if the key doesn&#39;t exist.
     * 
     */
    @Import(name="ifNotExists", required=true)
    private Output<Boolean> ifNotExists;

    /**
     * @return Whether to apply the query only if the key doesn&#39;t exist.
     * 
     */
    public Output<Boolean> ifNotExists() {
        return this.ifNotExists;
    }

    /**
     * The query string.
     * 
     */
    @Import(name="query", required=true)
    private Output<String> query;

    /**
     * @return The query string.
     * 
     */
    public Output<String> query() {
        return this.query;
    }

    private GetTagPipelineRulesetRuleQueryArgs() {}

    private GetTagPipelineRulesetRuleQueryArgs(GetTagPipelineRulesetRuleQueryArgs $) {
        this.addition = $.addition;
        this.caseInsensitivity = $.caseInsensitivity;
        this.ifNotExists = $.ifNotExists;
        this.query = $.query;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTagPipelineRulesetRuleQueryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTagPipelineRulesetRuleQueryArgs $;

        public Builder() {
            $ = new GetTagPipelineRulesetRuleQueryArgs();
        }

        public Builder(GetTagPipelineRulesetRuleQueryArgs defaults) {
            $ = new GetTagPipelineRulesetRuleQueryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addition The addition configuration for the query.
         * 
         * @return builder
         * 
         */
        public Builder addition(@Nullable Output<GetTagPipelineRulesetRuleQueryAdditionArgs> addition) {
            $.addition = addition;
            return this;
        }

        /**
         * @param addition The addition configuration for the query.
         * 
         * @return builder
         * 
         */
        public Builder addition(GetTagPipelineRulesetRuleQueryAdditionArgs addition) {
            return addition(Output.of(addition));
        }

        /**
         * @param caseInsensitivity Whether the query matching is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder caseInsensitivity(Output<Boolean> caseInsensitivity) {
            $.caseInsensitivity = caseInsensitivity;
            return this;
        }

        /**
         * @param caseInsensitivity Whether the query matching is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder caseInsensitivity(Boolean caseInsensitivity) {
            return caseInsensitivity(Output.of(caseInsensitivity));
        }

        /**
         * @param ifNotExists Whether to apply the query only if the key doesn&#39;t exist.
         * 
         * @return builder
         * 
         */
        public Builder ifNotExists(Output<Boolean> ifNotExists) {
            $.ifNotExists = ifNotExists;
            return this;
        }

        /**
         * @param ifNotExists Whether to apply the query only if the key doesn&#39;t exist.
         * 
         * @return builder
         * 
         */
        public Builder ifNotExists(Boolean ifNotExists) {
            return ifNotExists(Output.of(ifNotExists));
        }

        /**
         * @param query The query string.
         * 
         * @return builder
         * 
         */
        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query The query string.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        public GetTagPipelineRulesetRuleQueryArgs build() {
            if ($.caseInsensitivity == null) {
                throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleQueryArgs", "caseInsensitivity");
            }
            if ($.ifNotExists == null) {
                throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleQueryArgs", "ifNotExists");
            }
            if ($.query == null) {
                throw new MissingRequiredPropertyException("GetTagPipelineRulesetRuleQueryArgs", "query");
            }
            return $;
        }
    }

}
