// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class DomainAllowlistArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainAllowlistArgs Empty = new DomainAllowlistArgs();

    /**
     * The domains within the domain allowlist.
     * 
     */
    @Import(name="domains", required=true)
    private Output<List<String>> domains;

    /**
     * @return The domains within the domain allowlist.
     * 
     */
    public Output<List<String>> domains() {
        return this.domains;
    }

    /**
     * Whether the Email Domain Allowlist is enabled.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether the Email Domain Allowlist is enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    private DomainAllowlistArgs() {}

    private DomainAllowlistArgs(DomainAllowlistArgs $) {
        this.domains = $.domains;
        this.enabled = $.enabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainAllowlistArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainAllowlistArgs $;

        public Builder() {
            $ = new DomainAllowlistArgs();
        }

        public Builder(DomainAllowlistArgs defaults) {
            $ = new DomainAllowlistArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domains The domains within the domain allowlist.
         * 
         * @return builder
         * 
         */
        public Builder domains(Output<List<String>> domains) {
            $.domains = domains;
            return this;
        }

        /**
         * @param domains The domains within the domain allowlist.
         * 
         * @return builder
         * 
         */
        public Builder domains(List<String> domains) {
            return domains(Output.of(domains));
        }

        /**
         * @param domains The domains within the domain allowlist.
         * 
         * @return builder
         * 
         */
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }

        /**
         * @param enabled Whether the Email Domain Allowlist is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the Email Domain Allowlist is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public DomainAllowlistArgs build() {
            if ($.domains == null) {
                throw new MissingRequiredPropertyException("DomainAllowlistArgs", "domains");
            }
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("DomainAllowlistArgs", "enabled");
            }
            return $;
        }
    }

}
