// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    /**
     * Whether the user is disabled.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Whether the user is disabled.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Email address for user.
     * 
     */
    @Import(name="email", required=true)
    private Output<String> email;

    /**
     * @return Email address for user.
     * 
     */
    public Output<String> email() {
        return this.email;
    }

    /**
     * Name for user.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name for user.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list a role IDs to assign to the user.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<String>> roles;

    /**
     * @return A list a role IDs to assign to the user.
     * 
     */
    public Optional<Output<List<String>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * Whether an invitation email should be sent when the user is created.
     * 
     */
    @Import(name="sendUserInvitation")
    private @Nullable Output<Boolean> sendUserInvitation;

    /**
     * @return Whether an invitation email should be sent when the user is created.
     * 
     */
    public Optional<Output<Boolean>> sendUserInvitation() {
        return Optional.ofNullable(this.sendUserInvitation);
    }

    private UserArgs() {}

    private UserArgs(UserArgs $) {
        this.disabled = $.disabled;
        this.email = $.email;
        this.name = $.name;
        this.roles = $.roles;
        this.sendUserInvitation = $.sendUserInvitation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserArgs $;

        public Builder() {
            $ = new UserArgs();
        }

        public Builder(UserArgs defaults) {
            $ = new UserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disabled Whether the user is disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Whether the user is disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param email Email address for user.
         * 
         * @return builder
         * 
         */
        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Email address for user.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param name Name for user.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name for user.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param roles A list a role IDs to assign to the user.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles A list a role IDs to assign to the user.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles A list a role IDs to assign to the user.
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param sendUserInvitation Whether an invitation email should be sent when the user is created.
         * 
         * @return builder
         * 
         */
        public Builder sendUserInvitation(@Nullable Output<Boolean> sendUserInvitation) {
            $.sendUserInvitation = sendUserInvitation;
            return this;
        }

        /**
         * @param sendUserInvitation Whether an invitation email should be sent when the user is created.
         * 
         * @return builder
         * 
         */
        public Builder sendUserInvitation(Boolean sendUserInvitation) {
            return sendUserInvitation(Output.of(sendUserInvitation));
        }

        public UserArgs build() {
            if ($.email == null) {
                throw new MissingRequiredPropertyException("UserArgs", "email");
            }
            return $;
        }
    }

}
