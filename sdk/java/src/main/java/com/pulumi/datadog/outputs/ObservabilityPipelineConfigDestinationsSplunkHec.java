// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ObservabilityPipelineConfigDestinationsSplunkHec {
    /**
     * @return If `true`, Splunk tries to extract timestamps from incoming log events.
     * 
     */
    private @Nullable Boolean autoExtractTimestamp;
    /**
     * @return Encoding format for log events. Valid values: `json`, `raw_message`.
     * 
     */
    private @Nullable String encoding;
    /**
     * @return The unique identifier for this component. Used to reference this component in other parts of the pipeline (e.g., as input to downstream components).
     * 
     */
    private String id;
    /**
     * @return Optional name of the Splunk index where logs are written.
     * 
     */
    private @Nullable String index;
    /**
     * @return A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    private List<String> inputs;
    /**
     * @return The Splunk sourcetype to assign to log events.
     * 
     */
    private @Nullable String sourcetype;

    private ObservabilityPipelineConfigDestinationsSplunkHec() {}
    /**
     * @return If `true`, Splunk tries to extract timestamps from incoming log events.
     * 
     */
    public Optional<Boolean> autoExtractTimestamp() {
        return Optional.ofNullable(this.autoExtractTimestamp);
    }
    /**
     * @return Encoding format for log events. Valid values: `json`, `raw_message`.
     * 
     */
    public Optional<String> encoding() {
        return Optional.ofNullable(this.encoding);
    }
    /**
     * @return The unique identifier for this component. Used to reference this component in other parts of the pipeline (e.g., as input to downstream components).
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Optional name of the Splunk index where logs are written.
     * 
     */
    public Optional<String> index() {
        return Optional.ofNullable(this.index);
    }
    /**
     * @return A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    public List<String> inputs() {
        return this.inputs;
    }
    /**
     * @return The Splunk sourcetype to assign to log events.
     * 
     */
    public Optional<String> sourcetype() {
        return Optional.ofNullable(this.sourcetype);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObservabilityPipelineConfigDestinationsSplunkHec defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean autoExtractTimestamp;
        private @Nullable String encoding;
        private String id;
        private @Nullable String index;
        private List<String> inputs;
        private @Nullable String sourcetype;
        public Builder() {}
        public Builder(ObservabilityPipelineConfigDestinationsSplunkHec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoExtractTimestamp = defaults.autoExtractTimestamp;
    	      this.encoding = defaults.encoding;
    	      this.id = defaults.id;
    	      this.index = defaults.index;
    	      this.inputs = defaults.inputs;
    	      this.sourcetype = defaults.sourcetype;
        }

        @CustomType.Setter
        public Builder autoExtractTimestamp(@Nullable Boolean autoExtractTimestamp) {

            this.autoExtractTimestamp = autoExtractTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder encoding(@Nullable String encoding) {

            this.encoding = encoding;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsSplunkHec", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder index(@Nullable String index) {

            this.index = index;
            return this;
        }
        @CustomType.Setter
        public Builder inputs(List<String> inputs) {
            if (inputs == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsSplunkHec", "inputs");
            }
            this.inputs = inputs;
            return this;
        }
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }
        @CustomType.Setter
        public Builder sourcetype(@Nullable String sourcetype) {

            this.sourcetype = sourcetype;
            return this;
        }
        public ObservabilityPipelineConfigDestinationsSplunkHec build() {
            final var _resultValue = new ObservabilityPipelineConfigDestinationsSplunkHec();
            _resultValue.autoExtractTimestamp = autoExtractTimestamp;
            _resultValue.encoding = encoding;
            _resultValue.id = id;
            _resultValue.index = index;
            _resultValue.inputs = inputs;
            _resultValue.sourcetype = sourcetype;
            return _resultValue;
        }
    }
}
