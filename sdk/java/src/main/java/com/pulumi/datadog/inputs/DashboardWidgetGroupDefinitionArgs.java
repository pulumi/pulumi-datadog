// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.DashboardWidgetGroupDefinitionWidgetArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetGroupDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetGroupDefinitionArgs Empty = new DashboardWidgetGroupDefinitionArgs();

    /**
     * The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
     * 
     */
    @Import(name="backgroundColor")
    private @Nullable Output<String> backgroundColor;

    /**
     * @return The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
     * 
     */
    public Optional<Output<String>> backgroundColor() {
        return Optional.ofNullable(this.backgroundColor);
    }

    /**
     * The image URL to display as a banner for the group.
     * 
     */
    @Import(name="bannerImg")
    private @Nullable Output<String> bannerImg;

    /**
     * @return The image URL to display as a banner for the group.
     * 
     */
    public Optional<Output<String>> bannerImg() {
        return Optional.ofNullable(this.bannerImg);
    }

    /**
     * The layout type of the group. Valid values are `ordered`.
     * 
     */
    @Import(name="layoutType", required=true)
    private Output<String> layoutType;

    /**
     * @return The layout type of the group. Valid values are `ordered`.
     * 
     */
    public Output<String> layoutType() {
        return this.layoutType;
    }

    /**
     * Whether to show the title or not. Defaults to `true`.
     * 
     */
    @Import(name="showTitle")
    private @Nullable Output<Boolean> showTitle;

    /**
     * @return Whether to show the title or not. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> showTitle() {
        return Optional.ofNullable(this.showTitle);
    }

    /**
     * The title of the widget.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return The title of the widget.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * The list of widgets in this group.
     * 
     */
    @Import(name="widgets")
    private @Nullable Output<List<DashboardWidgetGroupDefinitionWidgetArgs>> widgets;

    /**
     * @return The list of widgets in this group.
     * 
     */
    public Optional<Output<List<DashboardWidgetGroupDefinitionWidgetArgs>>> widgets() {
        return Optional.ofNullable(this.widgets);
    }

    private DashboardWidgetGroupDefinitionArgs() {}

    private DashboardWidgetGroupDefinitionArgs(DashboardWidgetGroupDefinitionArgs $) {
        this.backgroundColor = $.backgroundColor;
        this.bannerImg = $.bannerImg;
        this.layoutType = $.layoutType;
        this.showTitle = $.showTitle;
        this.title = $.title;
        this.widgets = $.widgets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetGroupDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetGroupDefinitionArgs $;

        public Builder() {
            $ = new DashboardWidgetGroupDefinitionArgs();
        }

        public Builder(DashboardWidgetGroupDefinitionArgs defaults) {
            $ = new DashboardWidgetGroupDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backgroundColor The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
         * 
         * @return builder
         * 
         */
        public Builder backgroundColor(@Nullable Output<String> backgroundColor) {
            $.backgroundColor = backgroundColor;
            return this;
        }

        /**
         * @param backgroundColor The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
         * 
         * @return builder
         * 
         */
        public Builder backgroundColor(String backgroundColor) {
            return backgroundColor(Output.of(backgroundColor));
        }

        /**
         * @param bannerImg The image URL to display as a banner for the group.
         * 
         * @return builder
         * 
         */
        public Builder bannerImg(@Nullable Output<String> bannerImg) {
            $.bannerImg = bannerImg;
            return this;
        }

        /**
         * @param bannerImg The image URL to display as a banner for the group.
         * 
         * @return builder
         * 
         */
        public Builder bannerImg(String bannerImg) {
            return bannerImg(Output.of(bannerImg));
        }

        /**
         * @param layoutType The layout type of the group. Valid values are `ordered`.
         * 
         * @return builder
         * 
         */
        public Builder layoutType(Output<String> layoutType) {
            $.layoutType = layoutType;
            return this;
        }

        /**
         * @param layoutType The layout type of the group. Valid values are `ordered`.
         * 
         * @return builder
         * 
         */
        public Builder layoutType(String layoutType) {
            return layoutType(Output.of(layoutType));
        }

        /**
         * @param showTitle Whether to show the title or not. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder showTitle(@Nullable Output<Boolean> showTitle) {
            $.showTitle = showTitle;
            return this;
        }

        /**
         * @param showTitle Whether to show the title or not. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder showTitle(Boolean showTitle) {
            return showTitle(Output.of(showTitle));
        }

        /**
         * @param title The title of the widget.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The title of the widget.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param widgets The list of widgets in this group.
         * 
         * @return builder
         * 
         */
        public Builder widgets(@Nullable Output<List<DashboardWidgetGroupDefinitionWidgetArgs>> widgets) {
            $.widgets = widgets;
            return this;
        }

        /**
         * @param widgets The list of widgets in this group.
         * 
         * @return builder
         * 
         */
        public Builder widgets(List<DashboardWidgetGroupDefinitionWidgetArgs> widgets) {
            return widgets(Output.of(widgets));
        }

        /**
         * @param widgets The list of widgets in this group.
         * 
         * @return builder
         * 
         */
        public Builder widgets(DashboardWidgetGroupDefinitionWidgetArgs... widgets) {
            return widgets(List.of(widgets));
        }

        public DashboardWidgetGroupDefinitionArgs build() {
            if ($.layoutType == null) {
                throw new MissingRequiredPropertyException("DashboardWidgetGroupDefinitionArgs", "layoutType");
            }
            return $;
        }
    }

}
