// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.LogsMetricComputeArgs;
import com.pulumi.datadog.inputs.LogsMetricFilterArgs;
import com.pulumi.datadog.inputs.LogsMetricGroupByArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogsMetricArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogsMetricArgs Empty = new LogsMetricArgs();

    /**
     * The compute rule to compute the log-based metric. This field can&#39;t be updated after creation.
     * 
     */
    @Import(name="compute", required=true)
    private Output<LogsMetricComputeArgs> compute;

    /**
     * @return The compute rule to compute the log-based metric. This field can&#39;t be updated after creation.
     * 
     */
    public Output<LogsMetricComputeArgs> compute() {
        return this.compute;
    }

    /**
     * The log-based metric filter. Logs matching this filter will be aggregated in this metric.
     * 
     */
    @Import(name="filter", required=true)
    private Output<LogsMetricFilterArgs> filter;

    /**
     * @return The log-based metric filter. Logs matching this filter will be aggregated in this metric.
     * 
     */
    public Output<LogsMetricFilterArgs> filter() {
        return this.filter;
    }

    /**
     * The rules for the group by.
     * 
     */
    @Import(name="groupBies")
    private @Nullable Output<List<LogsMetricGroupByArgs>> groupBies;

    /**
     * @return The rules for the group by.
     * 
     */
    public Optional<Output<List<LogsMetricGroupByArgs>>> groupBies() {
        return Optional.ofNullable(this.groupBies);
    }

    /**
     * The name of the log-based metric. This field can&#39;t be updated after creation.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the log-based metric. This field can&#39;t be updated after creation.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private LogsMetricArgs() {}

    private LogsMetricArgs(LogsMetricArgs $) {
        this.compute = $.compute;
        this.filter = $.filter;
        this.groupBies = $.groupBies;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogsMetricArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogsMetricArgs $;

        public Builder() {
            $ = new LogsMetricArgs();
        }

        public Builder(LogsMetricArgs defaults) {
            $ = new LogsMetricArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compute The compute rule to compute the log-based metric. This field can&#39;t be updated after creation.
         * 
         * @return builder
         * 
         */
        public Builder compute(Output<LogsMetricComputeArgs> compute) {
            $.compute = compute;
            return this;
        }

        /**
         * @param compute The compute rule to compute the log-based metric. This field can&#39;t be updated after creation.
         * 
         * @return builder
         * 
         */
        public Builder compute(LogsMetricComputeArgs compute) {
            return compute(Output.of(compute));
        }

        /**
         * @param filter The log-based metric filter. Logs matching this filter will be aggregated in this metric.
         * 
         * @return builder
         * 
         */
        public Builder filter(Output<LogsMetricFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter The log-based metric filter. Logs matching this filter will be aggregated in this metric.
         * 
         * @return builder
         * 
         */
        public Builder filter(LogsMetricFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param groupBies The rules for the group by.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(@Nullable Output<List<LogsMetricGroupByArgs>> groupBies) {
            $.groupBies = groupBies;
            return this;
        }

        /**
         * @param groupBies The rules for the group by.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(List<LogsMetricGroupByArgs> groupBies) {
            return groupBies(Output.of(groupBies));
        }

        /**
         * @param groupBies The rules for the group by.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(LogsMetricGroupByArgs... groupBies) {
            return groupBies(List.of(groupBies));
        }

        /**
         * @param name The name of the log-based metric. This field can&#39;t be updated after creation.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the log-based metric. This field can&#39;t be updated after creation.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public LogsMetricArgs build() {
            if ($.compute == null) {
                throw new MissingRequiredPropertyException("LogsMetricArgs", "compute");
            }
            if ($.filter == null) {
                throw new MissingRequiredPropertyException("LogsMetricArgs", "filter");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("LogsMetricArgs", "name");
            }
            return $;
        }
    }

}
