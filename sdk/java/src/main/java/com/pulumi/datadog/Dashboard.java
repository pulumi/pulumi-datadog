// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.datadog.DashboardArgs;
import com.pulumi.datadog.Utilities;
import com.pulumi.datadog.inputs.DashboardState;
import com.pulumi.datadog.outputs.DashboardTemplateVariable;
import com.pulumi.datadog.outputs.DashboardTemplateVariablePreset;
import com.pulumi.datadog.outputs.DashboardWidget;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Datadog dashboard resource. This can be used to create and manage Datadog dashboards.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.datadog.Dashboard;
 * import com.pulumi.datadog.DashboardArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetAlertGraphDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetAlertValueDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetChangeDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetDistributionDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetCheckStatusDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetHeatmapDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetHeatmapDefinitionYaxisArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetHostmapDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetHostmapDefinitionRequestArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetHostmapDefinitionStyleArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetNoteDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetQueryValueDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetQueryTableDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetScatterplotDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetScatterplotDefinitionRequestArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetScatterplotDefinitionXaxisArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetScatterplotDefinitionYaxisArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetServicemapDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetTimeseriesDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetTimeseriesDefinitionYaxisArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetToplistDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetGroupDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetServiceLevelObjectiveDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardTemplateVariableArgs;
 * import com.pulumi.datadog.inputs.DashboardTemplateVariablePresetArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetEventStreamDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetWidgetLayoutArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetEventTimelineDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetFreeTextDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetIframeDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetImageDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetLogStreamDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetLogStreamDefinitionSortArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetManageStatusDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetTraceServiceDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetPowerpackDefinitionArgs;
 * import com.pulumi.datadog.inputs.DashboardWidgetPowerpackDefinitionTemplateVariablesArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Example Ordered Layout
 *         var orderedDashboard = new Dashboard(&#34;orderedDashboard&#34;, DashboardArgs.builder()        
 *             .title(&#34;Ordered Layout Dashboard&#34;)
 *             .description(&#34;Created using the Datadog provider in Pulumi&#34;)
 *             .layoutType(&#34;ordered&#34;)
 *             .isReadOnly(true)
 *             .widgets(            
 *                 DashboardWidgetArgs.builder()
 *                     .alertGraphDefinition(DashboardWidgetAlertGraphDefinitionArgs.builder()
 *                         .alertId(&#34;895605&#34;)
 *                         .vizType(&#34;timeseries&#34;)
 *                         .title(&#34;Widget Title&#34;)
 *                         .liveSpan(&#34;1h&#34;)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .alertValueDefinition(DashboardWidgetAlertValueDefinitionArgs.builder()
 *                         .alertId(&#34;895605&#34;)
 *                         .precision(3)
 *                         .unit(&#34;b&#34;)
 *                         .textAlign(&#34;center&#34;)
 *                         .title(&#34;Widget Title&#34;)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .alertValueDefinition(DashboardWidgetAlertValueDefinitionArgs.builder()
 *                         .alertId(&#34;895605&#34;)
 *                         .precision(3)
 *                         .unit(&#34;b&#34;)
 *                         .textAlign(&#34;center&#34;)
 *                         .title(&#34;Widget Title&#34;)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .changeDefinition(DashboardWidgetChangeDefinitionArgs.builder()
 *                         .requests(DashboardWidgetChangeDefinitionRequestArgs.builder()
 *                             .q(&#34;avg:system.load.1{env:staging} by {account}&#34;)
 *                             .changeType(&#34;absolute&#34;)
 *                             .compareTo(&#34;week_before&#34;)
 *                             .increaseGood(true)
 *                             .orderBy(&#34;name&#34;)
 *                             .orderDir(&#34;desc&#34;)
 *                             .showPresent(true)
 *                             .build())
 *                         .title(&#34;Widget Title&#34;)
 *                         .liveSpan(&#34;1h&#34;)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .distributionDefinition(DashboardWidgetDistributionDefinitionArgs.builder()
 *                         .requests(DashboardWidgetDistributionDefinitionRequestArgs.builder()
 *                             .q(&#34;avg:system.load.1{env:staging} by {account}&#34;)
 *                             .style(DashboardWidgetDistributionDefinitionRequestStyleArgs.builder()
 *                                 .palette(&#34;warm&#34;)
 *                                 .build())
 *                             .build())
 *                         .title(&#34;Widget Title&#34;)
 *                         .liveSpan(&#34;1h&#34;)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .checkStatusDefinition(DashboardWidgetCheckStatusDefinitionArgs.builder()
 *                         .check(&#34;aws.ecs.agent_connected&#34;)
 *                         .grouping(&#34;cluster&#34;)
 *                         .groupBies(                        
 *                             &#34;account&#34;,
 *                             &#34;cluster&#34;)
 *                         .tags(                        
 *                             &#34;account:demo&#34;,
 *                             &#34;cluster:awseb-ruthebdog-env-8-dn3m6u3gvk&#34;)
 *                         .title(&#34;Widget Title&#34;)
 *                         .liveSpan(&#34;1h&#34;)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .heatmapDefinition(DashboardWidgetHeatmapDefinitionArgs.builder()
 *                         .requests(DashboardWidgetHeatmapDefinitionRequestArgs.builder()
 *                             .q(&#34;avg:system.load.1{env:staging} by {account}&#34;)
 *                             .style(DashboardWidgetHeatmapDefinitionRequestStyleArgs.builder()
 *                                 .palette(&#34;warm&#34;)
 *                                 .build())
 *                             .build())
 *                         .yaxis(DashboardWidgetHeatmapDefinitionYaxisArgs.builder()
 *                             .min(1)
 *                             .max(2)
 *                             .includeZero(true)
 *                             .scale(&#34;sqrt&#34;)
 *                             .build())
 *                         .title(&#34;Widget Title&#34;)
 *                         .liveSpan(&#34;1h&#34;)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .hostmapDefinition(DashboardWidgetHostmapDefinitionArgs.builder()
 *                         .request(DashboardWidgetHostmapDefinitionRequestArgs.builder()
 *                             .fills(DashboardWidgetHostmapDefinitionRequestFillArgs.builder()
 *                                 .q(&#34;avg:system.load.1{*} by {host}&#34;)
 *                                 .build())
 *                             .sizes(DashboardWidgetHostmapDefinitionRequestSizeArgs.builder()
 *                                 .q(&#34;avg:memcache.uptime{*} by {host}&#34;)
 *                                 .build())
 *                             .build())
 *                         .nodeType(&#34;container&#34;)
 *                         .groups(                        
 *                             &#34;host&#34;,
 *                             &#34;region&#34;)
 *                         .noGroupHosts(true)
 *                         .noMetricHosts(true)
 *                         .scopes(                        
 *                             &#34;region:us-east-1&#34;,
 *                             &#34;aws_account:727006795293&#34;)
 *                         .style(DashboardWidgetHostmapDefinitionStyleArgs.builder()
 *                             .palette(&#34;yellow_to_green&#34;)
 *                             .paletteFlip(true)
 *                             .fillMin(&#34;10&#34;)
 *                             .fillMax(&#34;20&#34;)
 *                             .build())
 *                         .title(&#34;Widget Title&#34;)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .noteDefinition(DashboardWidgetNoteDefinitionArgs.builder()
 *                         .content(&#34;note text&#34;)
 *                         .backgroundColor(&#34;pink&#34;)
 *                         .fontSize(&#34;14&#34;)
 *                         .textAlign(&#34;center&#34;)
 *                         .showTick(true)
 *                         .tickEdge(&#34;left&#34;)
 *                         .tickPos(&#34;50%&#34;)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .queryValueDefinition(DashboardWidgetQueryValueDefinitionArgs.builder()
 *                         .requests(DashboardWidgetQueryValueDefinitionRequestArgs.builder()
 *                             .q(&#34;avg:system.load.1{env:staging} by {account}&#34;)
 *                             .aggregator(&#34;sum&#34;)
 *                             .conditionalFormats(                            
 *                                 DashboardWidgetQueryValueDefinitionRequestConditionalFormatArgs.builder()
 *                                     .comparator(&#34;&lt;&#34;)
 *                                     .value(&#34;2&#34;)
 *                                     .palette(&#34;white_on_green&#34;)
 *                                     .build(),
 *                                 DashboardWidgetQueryValueDefinitionRequestConditionalFormatArgs.builder()
 *                                     .comparator(&#34;&gt;&#34;)
 *                                     .value(&#34;2.2&#34;)
 *                                     .palette(&#34;white_on_red&#34;)
 *                                     .build())
 *                             .build())
 *                         .autoscale(true)
 *                         .customUnit(&#34;xx&#34;)
 *                         .precision(&#34;4&#34;)
 *                         .textAlign(&#34;right&#34;)
 *                         .title(&#34;Widget Title&#34;)
 *                         .liveSpan(&#34;1h&#34;)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .queryTableDefinition(DashboardWidgetQueryTableDefinitionArgs.builder()
 *                         .requests(DashboardWidgetQueryTableDefinitionRequestArgs.builder()
 *                             .q(&#34;avg:system.load.1{env:staging} by {account}&#34;)
 *                             .aggregator(&#34;sum&#34;)
 *                             .limit(&#34;10&#34;)
 *                             .conditionalFormats(                            
 *                                 DashboardWidgetQueryTableDefinitionRequestConditionalFormatArgs.builder()
 *                                     .comparator(&#34;&lt;&#34;)
 *                                     .value(&#34;2&#34;)
 *                                     .palette(&#34;white_on_green&#34;)
 *                                     .build(),
 *                                 DashboardWidgetQueryTableDefinitionRequestConditionalFormatArgs.builder()
 *                                     .comparator(&#34;&gt;&#34;)
 *                                     .value(&#34;2.2&#34;)
 *                                     .palette(&#34;white_on_red&#34;)
 *                                     .build())
 *                             .build())
 *                         .title(&#34;Widget Title&#34;)
 *                         .liveSpan(&#34;1h&#34;)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .scatterplotDefinition(DashboardWidgetScatterplotDefinitionArgs.builder()
 *                         .request(DashboardWidgetScatterplotDefinitionRequestArgs.builder()
 *                             .xes(DashboardWidgetScatterplotDefinitionRequestXArgs.builder()
 *                                 .q(&#34;avg:system.cpu.user{*} by {service, account}&#34;)
 *                                 .aggregator(&#34;max&#34;)
 *                                 .build())
 *                             .ys(DashboardWidgetScatterplotDefinitionRequestYArgs.builder()
 *                                 .q(&#34;avg:system.mem.used{*} by {service, account}&#34;)
 *                                 .aggregator(&#34;min&#34;)
 *                                 .build())
 *                             .build())
 *                         .colorByGroups(                        
 *                             &#34;account&#34;,
 *                             &#34;apm-role-group&#34;)
 *                         .xaxis(DashboardWidgetScatterplotDefinitionXaxisArgs.builder()
 *                             .includeZero(true)
 *                             .label(&#34;x&#34;)
 *                             .min(&#34;1&#34;)
 *                             .max(&#34;2000&#34;)
 *                             .scale(&#34;pow&#34;)
 *                             .build())
 *                         .yaxis(DashboardWidgetScatterplotDefinitionYaxisArgs.builder()
 *                             .includeZero(false)
 *                             .label(&#34;y&#34;)
 *                             .min(&#34;5&#34;)
 *                             .max(&#34;2222&#34;)
 *                             .scale(&#34;log&#34;)
 *                             .build())
 *                         .title(&#34;Widget Title&#34;)
 *                         .liveSpan(&#34;1h&#34;)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .servicemapDefinition(DashboardWidgetServicemapDefinitionArgs.builder()
 *                         .service(&#34;master-db&#34;)
 *                         .filters(                        
 *                             &#34;env:prod&#34;,
 *                             &#34;datacenter:dc1&#34;)
 *                         .title(&#34;env: prod, datacenter:dc1, service: master-db&#34;)
 *                         .titleSize(&#34;16&#34;)
 *                         .titleAlign(&#34;left&#34;)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .timeseriesDefinition(DashboardWidgetTimeseriesDefinitionArgs.builder()
 *                         .requests(                        
 *                             DashboardWidgetTimeseriesDefinitionRequestArgs.builder()
 *                                 .q(&#34;avg:system.cpu.user{app:general} by {env}&#34;)
 *                                 .displayType(&#34;line&#34;)
 *                                 .style(DashboardWidgetTimeseriesDefinitionRequestStyleArgs.builder()
 *                                     .palette(&#34;warm&#34;)
 *                                     .lineType(&#34;dashed&#34;)
 *                                     .lineWidth(&#34;thin&#34;)
 *                                     .build())
 *                                 .metadatas(DashboardWidgetTimeseriesDefinitionRequestMetadataArgs.builder()
 *                                     .expression(&#34;avg:system.cpu.user{app:general} by {env}&#34;)
 *                                     .aliasName(&#34;Alpha&#34;)
 *                                     .build())
 *                                 .build(),
 *                             DashboardWidgetTimeseriesDefinitionRequestArgs.builder()
 *                                 .logQuery(DashboardWidgetTimeseriesDefinitionRequestLogQueryArgs.builder()
 *                                     .index(&#34;mcnulty&#34;)
 *                                     .computeQuery(DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeQueryArgs.builder()
 *                                         .aggregation(&#34;avg&#34;)
 *                                         .facet(&#34;@duration&#34;)
 *                                         .interval(5000)
 *                                         .build())
 *                                     .searchQuery(&#34;status:info&#34;)
 *                                     .groupBies(DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs.builder()
 *                                         .facet(&#34;host&#34;)
 *                                         .limit(10)
 *                                         .sortQuery(DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryArgs.builder()
 *                                             .aggregation(&#34;avg&#34;)
 *                                             .order(&#34;desc&#34;)
 *                                             .facet(&#34;@duration&#34;)
 *                                             .build())
 *                                         .build())
 *                                     .build())
 *                                 .displayType(&#34;area&#34;)
 *                                 .build(),
 *                             DashboardWidgetTimeseriesDefinitionRequestArgs.builder()
 *                                 .apmQuery(DashboardWidgetTimeseriesDefinitionRequestApmQueryArgs.builder()
 *                                     .index(&#34;apm-search&#34;)
 *                                     .computeQuery(DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeQueryArgs.builder()
 *                                         .aggregation(&#34;avg&#34;)
 *                                         .facet(&#34;@duration&#34;)
 *                                         .interval(5000)
 *                                         .build())
 *                                     .searchQuery(&#34;type:web&#34;)
 *                                     .groupBies(DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs.builder()
 *                                         .facet(&#34;resource_name&#34;)
 *                                         .limit(50)
 *                                         .sortQuery(DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryArgs.builder()
 *                                             .aggregation(&#34;avg&#34;)
 *                                             .order(&#34;desc&#34;)
 *                                             .facet(&#34;@string_query.interval&#34;)
 *                                             .build())
 *                                         .build())
 *                                     .build())
 *                                 .displayType(&#34;bars&#34;)
 *                                 .build(),
 *                             DashboardWidgetTimeseriesDefinitionRequestArgs.builder()
 *                                 .processQuery(DashboardWidgetTimeseriesDefinitionRequestProcessQueryArgs.builder()
 *                                     .metric(&#34;process.stat.cpu.total_pct&#34;)
 *                                     .searchBy(&#34;error&#34;)
 *                                     .filterBies(&#34;active&#34;)
 *                                     .limit(50)
 *                                     .build())
 *                                 .displayType(&#34;area&#34;)
 *                                 .build())
 *                         .markers(                        
 *                             DashboardWidgetTimeseriesDefinitionMarkerArgs.builder()
 *                                 .displayType(&#34;error dashed&#34;)
 *                                 .label(&#34; z=6 &#34;)
 *                                 .value(&#34;y = 4&#34;)
 *                                 .build(),
 *                             DashboardWidgetTimeseriesDefinitionMarkerArgs.builder()
 *                                 .displayType(&#34;ok solid&#34;)
 *                                 .value(&#34;10 &lt; y &lt; 999&#34;)
 *                                 .label(&#34; x=8 &#34;)
 *                                 .build())
 *                         .title(&#34;Widget Title&#34;)
 *                         .showLegend(true)
 *                         .legendSize(&#34;2&#34;)
 *                         .liveSpan(&#34;1h&#34;)
 *                         .events(                        
 *                             DashboardWidgetTimeseriesDefinitionEventArgs.builder()
 *                                 .q(&#34;sources:test tags:1&#34;)
 *                                 .build(),
 *                             DashboardWidgetTimeseriesDefinitionEventArgs.builder()
 *                                 .q(&#34;sources:test tags:2&#34;)
 *                                 .build())
 *                         .yaxis(DashboardWidgetTimeseriesDefinitionYaxisArgs.builder()
 *                             .scale(&#34;log&#34;)
 *                             .includeZero(false)
 *                             .max(100)
 *                             .build())
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .toplistDefinition(DashboardWidgetToplistDefinitionArgs.builder()
 *                         .requests(DashboardWidgetToplistDefinitionRequestArgs.builder()
 *                             .q(&#34;avg:system.cpu.user{app:general} by {env}&#34;)
 *                             .conditionalFormats(                            
 *                                 DashboardWidgetToplistDefinitionRequestConditionalFormatArgs.builder()
 *                                     .comparator(&#34;&lt;&#34;)
 *                                     .value(&#34;2&#34;)
 *                                     .palette(&#34;white_on_green&#34;)
 *                                     .build(),
 *                                 DashboardWidgetToplistDefinitionRequestConditionalFormatArgs.builder()
 *                                     .comparator(&#34;&gt;&#34;)
 *                                     .value(&#34;2.2&#34;)
 *                                     .palette(&#34;white_on_red&#34;)
 *                                     .build())
 *                             .build())
 *                         .title(&#34;Widget Title&#34;)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .groupDefinition(DashboardWidgetGroupDefinitionArgs.builder()
 *                         .layoutType(&#34;ordered&#34;)
 *                         .title(&#34;Group Widget&#34;)
 *                         .widgets(                        
 *                             DashboardWidgetGroupDefinitionWidgetArgs.builder()
 *                                 .noteDefinition(DashboardWidgetGroupDefinitionWidgetNoteDefinitionArgs.builder()
 *                                     .content(&#34;cluster note widget&#34;)
 *                                     .backgroundColor(&#34;pink&#34;)
 *                                     .fontSize(&#34;14&#34;)
 *                                     .textAlign(&#34;center&#34;)
 *                                     .showTick(true)
 *                                     .tickEdge(&#34;left&#34;)
 *                                     .tickPos(&#34;50%&#34;)
 *                                     .build())
 *                                 .build(),
 *                             DashboardWidgetGroupDefinitionWidgetArgs.builder()
 *                                 .alertGraphDefinition(DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionArgs.builder()
 *                                     .alertId(&#34;123&#34;)
 *                                     .vizType(&#34;toplist&#34;)
 *                                     .title(&#34;Alert Graph&#34;)
 *                                     .liveSpan(&#34;1h&#34;)
 *                                     .build())
 *                                 .build())
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .serviceLevelObjectiveDefinition(DashboardWidgetServiceLevelObjectiveDefinitionArgs.builder()
 *                         .title(&#34;Widget Title&#34;)
 *                         .viewType(&#34;detail&#34;)
 *                         .sloId(&#34;56789&#34;)
 *                         .showErrorBudget(true)
 *                         .viewMode(&#34;overall&#34;)
 *                         .timeWindows(                        
 *                             &#34;7d&#34;,
 *                             &#34;previous_week&#34;)
 *                         .build())
 *                     .build())
 *             .templateVariables(            
 *                 DashboardTemplateVariableArgs.builder()
 *                     .name(&#34;var_1&#34;)
 *                     .prefix(&#34;host&#34;)
 *                     .default_(&#34;aws&#34;)
 *                     .build(),
 *                 DashboardTemplateVariableArgs.builder()
 *                     .name(&#34;var_2&#34;)
 *                     .prefix(&#34;service_name&#34;)
 *                     .default_(&#34;autoscaling&#34;)
 *                     .build())
 *             .templateVariablePresets(DashboardTemplateVariablePresetArgs.builder()
 *                 .name(&#34;preset_1&#34;)
 *                 .templateVariables(                
 *                     DashboardTemplateVariablePresetTemplateVariableArgs.builder()
 *                         .name(&#34;var_1&#34;)
 *                         .value(&#34;host.dc&#34;)
 *                         .build(),
 *                     DashboardTemplateVariablePresetTemplateVariableArgs.builder()
 *                         .name(&#34;var_2&#34;)
 *                         .value(&#34;my_service&#34;)
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *         // Example Free Layout
 *         var freeDashboard = new Dashboard(&#34;freeDashboard&#34;, DashboardArgs.builder()        
 *             .title(&#34;Free Layout Dashboard&#34;)
 *             .description(&#34;Created using the Datadog provider in Pulumi&#34;)
 *             .layoutType(&#34;free&#34;)
 *             .isReadOnly(false)
 *             .widgets(            
 *                 DashboardWidgetArgs.builder()
 *                     .eventStreamDefinition(DashboardWidgetEventStreamDefinitionArgs.builder()
 *                         .query(&#34;*&#34;)
 *                         .eventSize(&#34;l&#34;)
 *                         .title(&#34;Widget Title&#34;)
 *                         .titleSize(16)
 *                         .titleAlign(&#34;left&#34;)
 *                         .liveSpan(&#34;1h&#34;)
 *                         .build())
 *                     .widgetLayout(DashboardWidgetWidgetLayoutArgs.builder()
 *                         .height(43)
 *                         .width(32)
 *                         .x(0)
 *                         .y(0)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .eventTimelineDefinition(DashboardWidgetEventTimelineDefinitionArgs.builder()
 *                         .query(&#34;*&#34;)
 *                         .title(&#34;Widget Title&#34;)
 *                         .titleSize(16)
 *                         .titleAlign(&#34;left&#34;)
 *                         .liveSpan(&#34;1h&#34;)
 *                         .build())
 *                     .widgetLayout(DashboardWidgetWidgetLayoutArgs.builder()
 *                         .height(9)
 *                         .width(66)
 *                         .x(33)
 *                         .y(60)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .freeTextDefinition(DashboardWidgetFreeTextDefinitionArgs.builder()
 *                         .text(&#34;free text content&#34;)
 *                         .color(&#34;#d00&#34;)
 *                         .fontSize(&#34;36&#34;)
 *                         .textAlign(&#34;left&#34;)
 *                         .build())
 *                     .widgetLayout(DashboardWidgetWidgetLayoutArgs.builder()
 *                         .height(20)
 *                         .width(34)
 *                         .x(33)
 *                         .y(0)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .iframeDefinition(DashboardWidgetIframeDefinitionArgs.builder()
 *                         .url(&#34;http://google.com&#34;)
 *                         .build())
 *                     .widgetLayout(DashboardWidgetWidgetLayoutArgs.builder()
 *                         .height(46)
 *                         .width(39)
 *                         .x(101)
 *                         .y(0)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .imageDefinition(DashboardWidgetImageDefinitionArgs.builder()
 *                         .url(&#34;https://images.pexels.com/photos/67636/rose-blue-flower-rose-blooms-67636.jpeg?auto=compress&amp;cs=tinysrgb&amp;h=350&#34;)
 *                         .sizing(&#34;fit&#34;)
 *                         .margin(&#34;small&#34;)
 *                         .build())
 *                     .widgetLayout(DashboardWidgetWidgetLayoutArgs.builder()
 *                         .height(20)
 *                         .width(30)
 *                         .x(69)
 *                         .y(0)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .logStreamDefinition(DashboardWidgetLogStreamDefinitionArgs.builder()
 *                         .indexes(&#34;main&#34;)
 *                         .query(&#34;error&#34;)
 *                         .columns(                        
 *                             &#34;core_host&#34;,
 *                             &#34;core_service&#34;,
 *                             &#34;tag_source&#34;)
 *                         .showDateColumn(true)
 *                         .showMessageColumn(true)
 *                         .messageDisplay(&#34;expanded-md&#34;)
 *                         .sort(DashboardWidgetLogStreamDefinitionSortArgs.builder()
 *                             .column(&#34;time&#34;)
 *                             .order(&#34;desc&#34;)
 *                             .build())
 *                         .build())
 *                     .widgetLayout(DashboardWidgetWidgetLayoutArgs.builder()
 *                         .height(36)
 *                         .width(32)
 *                         .x(0)
 *                         .y(45)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .manageStatusDefinition(DashboardWidgetManageStatusDefinitionArgs.builder()
 *                         .colorPreference(&#34;text&#34;)
 *                         .displayFormat(&#34;countsAndList&#34;)
 *                         .hideZeroCounts(true)
 *                         .query(&#34;type:metric&#34;)
 *                         .showLastTriggered(false)
 *                         .sort(&#34;status,asc&#34;)
 *                         .summaryType(&#34;monitors&#34;)
 *                         .title(&#34;Widget Title&#34;)
 *                         .titleSize(16)
 *                         .titleAlign(&#34;left&#34;)
 *                         .build())
 *                     .widgetLayout(DashboardWidgetWidgetLayoutArgs.builder()
 *                         .height(40)
 *                         .width(30)
 *                         .x(101)
 *                         .y(48)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .traceServiceDefinition(DashboardWidgetTraceServiceDefinitionArgs.builder()
 *                         .displayFormat(&#34;three_column&#34;)
 *                         .env(&#34;datadog.com&#34;)
 *                         .service(&#34;alerting-cassandra&#34;)
 *                         .showBreakdown(true)
 *                         .showDistribution(true)
 *                         .showErrors(true)
 *                         .showHits(true)
 *                         .showLatency(false)
 *                         .showResourceList(false)
 *                         .sizeFormat(&#34;large&#34;)
 *                         .spanName(&#34;cassandra.query&#34;)
 *                         .title(&#34;alerting-cassandra #env:datadog.com&#34;)
 *                         .titleAlign(&#34;center&#34;)
 *                         .titleSize(&#34;13&#34;)
 *                         .liveSpan(&#34;1h&#34;)
 *                         .build())
 *                     .widgetLayout(DashboardWidgetWidgetLayoutArgs.builder()
 *                         .height(38)
 *                         .width(66)
 *                         .x(33)
 *                         .y(21)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .timeseriesDefinition(DashboardWidgetTimeseriesDefinitionArgs.builder()
 *                         .requests(DashboardWidgetTimeseriesDefinitionRequestArgs.builder()
 *                             .formulas(                            
 *                                 DashboardWidgetTimeseriesDefinitionRequestFormulaArgs.builder()
 *                                     .formulaExpression(&#34;my_query_1 + my_query_2&#34;)
 *                                     .alias(&#34;my ff query&#34;)
 *                                     .build(),
 *                                 DashboardWidgetTimeseriesDefinitionRequestFormulaArgs.builder()
 *                                     .formulaExpression(&#34;my_query_1 * my_query_2&#34;)
 *                                     .limit(DashboardWidgetTimeseriesDefinitionRequestFormulaLimitArgs.builder()
 *                                         .count(5)
 *                                         .order(&#34;desc&#34;)
 *                                         .build())
 *                                     .alias(&#34;my second ff query&#34;)
 *                                     .build())
 *                             .queries(                            
 *                                 DashboardWidgetTimeseriesDefinitionRequestQueryArgs.builder()
 *                                     .metricQuery(DashboardWidgetTimeseriesDefinitionRequestQueryMetricQueryArgs.builder()
 *                                         .dataSource(&#34;metrics&#34;)
 *                                         .query(&#34;avg:system.cpu.user{app:general} by {env}&#34;)
 *                                         .name(&#34;my_query_1&#34;)
 *                                         .aggregator(&#34;sum&#34;)
 *                                         .build())
 *                                     .build(),
 *                                 DashboardWidgetTimeseriesDefinitionRequestQueryArgs.builder()
 *                                     .metricQuery(DashboardWidgetTimeseriesDefinitionRequestQueryMetricQueryArgs.builder()
 *                                         .query(&#34;avg:system.cpu.user{app:general} by {env}&#34;)
 *                                         .name(&#34;my_query_2&#34;)
 *                                         .aggregator(&#34;sum&#34;)
 *                                         .build())
 *                                     .build())
 *                             .build())
 *                         .build())
 *                     .widgetLayout(DashboardWidgetWidgetLayoutArgs.builder()
 *                         .height(16)
 *                         .width(25)
 *                         .x(58)
 *                         .y(83)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .timeseriesDefinition(DashboardWidgetTimeseriesDefinitionArgs.builder()
 *                         .requests(                        
 *                             DashboardWidgetTimeseriesDefinitionRequestArgs.builder()
 *                                 .queries(DashboardWidgetTimeseriesDefinitionRequestQueryArgs.builder()
 *                                     .eventQuery(DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryArgs.builder()
 *                                         .name(&#34;my-query&#34;)
 *                                         .dataSource(&#34;logs&#34;)
 *                                         .indexes(&#34;days-3&#34;)
 *                                         .computes(DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryComputeArgs.builder()
 *                                             .aggregation(&#34;count&#34;)
 *                                             .build())
 *                                         .groupBies(DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupByArgs.builder()
 *                                             .facet(&#34;host&#34;)
 *                                             .sort(DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortArgs.builder()
 *                                                 .metric(&#34;@lambda.max_memory_used&#34;)
 *                                                 .aggregation(&#34;avg&#34;)
 *                                                 .build())
 *                                             .limit(10)
 *                                             .build())
 *                                         .build())
 *                                     .build())
 *                                 .build(),
 *                             DashboardWidgetTimeseriesDefinitionRequestArgs.builder()
 *                                 .displayType(&#34;overlay&#34;)
 *                                 .queries(DashboardWidgetTimeseriesDefinitionRequestQueryArgs.builder()
 *                                     .metricQuery(DashboardWidgetTimeseriesDefinitionRequestQueryMetricQueryArgs.builder()
 *                                         .name(&#34;MyOverlay&#34;)
 *                                         .dataSource(&#34;metrics&#34;)
 *                                         .query(&#34;avg:system.cpu.user{host:COMP-QJWVM2FYT4}&#34;)
 *                                         .build())
 *                                     .build())
 *                                 .build())
 *                         .build())
 *                     .widgetLayout(DashboardWidgetWidgetLayoutArgs.builder()
 *                         .height(16)
 *                         .width(28)
 *                         .x(29)
 *                         .y(83)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .timeseriesDefinition(DashboardWidgetTimeseriesDefinitionArgs.builder()
 *                         .requests(DashboardWidgetTimeseriesDefinitionRequestArgs.builder()
 *                             .queries(DashboardWidgetTimeseriesDefinitionRequestQueryArgs.builder()
 *                                 .processQuery(DashboardWidgetTimeseriesDefinitionRequestQueryProcessQueryArgs.builder()
 *                                     .dataSource(&#34;process&#34;)
 *                                     .textFilter(&#34;abc&#34;)
 *                                     .metric(&#34;process.stat.cpu.total_pct&#34;)
 *                                     .limit(10)
 *                                     .tagFilters(&#34;some_filter&#34;)
 *                                     .name(&#34;my_process_query&#34;)
 *                                     .sort(&#34;asc&#34;)
 *                                     .isNormalizedCpu(true)
 *                                     .aggregator(&#34;sum&#34;)
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .widgetLayout(DashboardWidgetWidgetLayoutArgs.builder()
 *                         .height(16)
 *                         .width(28)
 *                         .x(0)
 *                         .y(83)
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .timeseriesDefinition(DashboardWidgetTimeseriesDefinitionArgs.builder()
 *                         .requests(DashboardWidgetTimeseriesDefinitionRequestArgs.builder()
 *                             .formulas(DashboardWidgetTimeseriesDefinitionRequestFormulaArgs.builder()
 *                                 .formulaExpression(&#34;query1&#34;)
 *                                 .alias(&#34;my cloud cost query&#34;)
 *                                 .build())
 *                             .queries(DashboardWidgetTimeseriesDefinitionRequestQueryArgs.builder()
 *                                 .cloudCostQuery(DashboardWidgetTimeseriesDefinitionRequestQueryCloudCostQueryArgs.builder()
 *                                     .dataSource(&#34;cloud_cost&#34;)
 *                                     .query(&#34;sum:aws.cost.amortized{*}&#34;)
 *                                     .name(&#34;query1&#34;)
 *                                     .aggregator(&#34;sum&#34;)
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build(),
 *                 DashboardWidgetArgs.builder()
 *                     .powerpackDefinition(DashboardWidgetPowerpackDefinitionArgs.builder()
 *                         .powerpackId(&#34;00000000-0000-0000-0000-000000000000&#34;)
 *                         .backgroundColor(&#34;blue&#34;)
 *                         .bannerImg(&#34;https://example.org/example.png&#34;)
 *                         .showTitle(true)
 *                         .title(&#34;Powerpack Widget&#34;)
 *                         .templateVariables(DashboardWidgetPowerpackDefinitionTemplateVariablesArgs.builder()
 *                             .controlledExternallies(DashboardWidgetPowerpackDefinitionTemplateVariablesControlledExternallyArgs.builder()
 *                                 .name(&#34;var_2&#34;)
 *                                 .values(&#34;autoscaling&#34;)
 *                                 .prefix(&#34;service_name&#34;)
 *                                 .build())
 *                             .controlledByPowerpacks(DashboardWidgetPowerpackDefinitionTemplateVariablesControlledByPowerpackArgs.builder()
 *                                 .name(&#34;var_3&#34;)
 *                                 .prefix(&#34;timeframe&#34;)
 *                                 .values(                                
 *                                     &#34;default&#34;,
 *                                     &#34;values&#34;,
 *                                     &#34;here&#34;)
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *             .templateVariables(            
 *                 DashboardTemplateVariableArgs.builder()
 *                     .name(&#34;var_1&#34;)
 *                     .prefix(&#34;host&#34;)
 *                     .default_(&#34;aws&#34;)
 *                     .build(),
 *                 DashboardTemplateVariableArgs.builder()
 *                     .name(&#34;var_2&#34;)
 *                     .prefix(&#34;service_name&#34;)
 *                     .default_(&#34;autoscaling&#34;)
 *                     .build())
 *             .templateVariablePresets(DashboardTemplateVariablePresetArgs.builder()
 *                 .name(&#34;preset_1&#34;)
 *                 .templateVariables(                
 *                     DashboardTemplateVariablePresetTemplateVariableArgs.builder()
 *                         .name(&#34;var_1&#34;)
 *                         .value(&#34;host.dc&#34;)
 *                         .build(),
 *                     DashboardTemplateVariablePresetTemplateVariableArgs.builder()
 *                         .name(&#34;var_2&#34;)
 *                         .value(&#34;my_service&#34;)
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import datadog:index/dashboard:Dashboard my_service_dashboard sv7-gyh-kas
 * ```
 * 
 */
@ResourceType(type="datadog:index/dashboard:Dashboard")
public class Dashboard extends com.pulumi.resources.CustomResource {
    /**
     * A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
     * dashboard lists using Terraform as it causes inconsistent behavior.
     * 
     */
    @Export(name="dashboardLists", refs={List.class,Integer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Integer>> dashboardLists;

    /**
     * @return A list of dashboard lists this dashboard belongs to. This attribute should not be set if managing the corresponding
     * dashboard lists using Terraform as it causes inconsistent behavior.
     * 
     */
    public Output<Optional<List<Integer>>> dashboardLists() {
        return Codegen.optional(this.dashboardLists);
    }
    /**
     * A list of dashboard lists this dashboard should be removed from. Internal only.
     * 
     */
    @Export(name="dashboardListsRemoveds", refs={List.class,Integer.class}, tree="[0,1]")
    private Output<List<Integer>> dashboardListsRemoveds;

    /**
     * @return A list of dashboard lists this dashboard should be removed from. Internal only.
     * 
     */
    public Output<List<Integer>> dashboardListsRemoveds() {
        return this.dashboardListsRemoveds;
    }
    /**
     * The description of the dashboard.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the dashboard.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Whether this dashboard is read-only. **Deprecated.** Prefer using `restricted_roles` to define which roles are required to edit the dashboard. Defaults to `false`.
     * 
     * @deprecated
     * Prefer using `restricted_roles` to define which roles are required to edit the dashboard.
     * 
     */
    @Deprecated /* Prefer using `restricted_roles` to define which roles are required to edit the dashboard. */
    @Export(name="isReadOnly", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isReadOnly;

    /**
     * @return Whether this dashboard is read-only. **Deprecated.** Prefer using `restricted_roles` to define which roles are required to edit the dashboard. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> isReadOnly() {
        return Codegen.optional(this.isReadOnly);
    }
    /**
     * The layout type of the group. Valid values are `ordered`.
     * 
     */
    @Export(name="layoutType", refs={String.class}, tree="[0]")
    private Output<String> layoutType;

    /**
     * @return The layout type of the group. Valid values are `ordered`.
     * 
     */
    public Output<String> layoutType() {
        return this.layoutType;
    }
    /**
     * The list of handles for the users to notify when changes are made to this dashboard.
     * 
     */
    @Export(name="notifyLists", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> notifyLists;

    /**
     * @return The list of handles for the users to notify when changes are made to this dashboard.
     * 
     */
    public Output<Optional<List<String>>> notifyLists() {
        return Codegen.optional(this.notifyLists);
    }
    /**
     * The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it&#39;s set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
     * 
     */
    @Export(name="reflowType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> reflowType;

    /**
     * @return The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it&#39;s set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
     * 
     */
    public Output<Optional<String>> reflowType() {
        return Codegen.optional(this.reflowType);
    }
    /**
     * UUIDs of roles whose associated users are authorized to edit the dashboard.
     * 
     */
    @Export(name="restrictedRoles", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> restrictedRoles;

    /**
     * @return UUIDs of roles whose associated users are authorized to edit the dashboard.
     * 
     */
    public Output<Optional<List<String>>> restrictedRoles() {
        return Codegen.optional(this.restrictedRoles);
    }
    /**
     * A list of tags to use in the widget.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return A list of tags to use in the widget.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The list of selectable template variable presets for this dashboard.
     * 
     */
    @Export(name="templateVariablePresets", refs={List.class,DashboardTemplateVariablePreset.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DashboardTemplateVariablePreset>> templateVariablePresets;

    /**
     * @return The list of selectable template variable presets for this dashboard.
     * 
     */
    public Output<Optional<List<DashboardTemplateVariablePreset>>> templateVariablePresets() {
        return Codegen.optional(this.templateVariablePresets);
    }
    /**
     * The template variable names and assumed values under the given preset
     * 
     */
    @Export(name="templateVariables", refs={List.class,DashboardTemplateVariable.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DashboardTemplateVariable>> templateVariables;

    /**
     * @return The template variable names and assumed values under the given preset
     * 
     */
    public Output<Optional<List<DashboardTemplateVariable>>> templateVariables() {
        return Codegen.optional(this.templateVariables);
    }
    /**
     * The title of the widget.
     * 
     */
    @Export(name="title", refs={String.class}, tree="[0]")
    private Output<String> title;

    /**
     * @return The title of the widget.
     * 
     */
    public Output<String> title() {
        return this.title;
    }
    /**
     * The URL to use as a data source for the widget.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return The URL to use as a data source for the widget.
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * The list of widgets in this group.
     * 
     */
    @Export(name="widgets", refs={List.class,DashboardWidget.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DashboardWidget>> widgets;

    /**
     * @return The list of widgets in this group.
     * 
     */
    public Output<Optional<List<DashboardWidget>>> widgets() {
        return Codegen.optional(this.widgets);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Dashboard(String name) {
        this(name, DashboardArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Dashboard(String name, DashboardArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Dashboard(String name, DashboardArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("datadog:index/dashboard:Dashboard", name, args == null ? DashboardArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Dashboard(String name, Output<String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("datadog:index/dashboard:Dashboard", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Dashboard get(String name, Output<String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Dashboard(name, id, state, options);
    }
}
