// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.aws.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class IntegrationAccountLogsConfigLambdaForwarderLogSourceConfigTagFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationAccountLogsConfigLambdaForwarderLogSourceConfigTagFilterArgs Empty = new IntegrationAccountLogsConfigLambdaForwarderLogSourceConfigTagFilterArgs();

    /**
     * The AWS service for which the tag filters defined in `tags` will be applied.
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return The AWS service for which the tag filters defined in `tags` will be applied.
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    /**
     * The AWS resource tags to filter on for the service specified by `source`.
     * 
     */
    @Import(name="tags", required=true)
    private Output<List<String>> tags;

    /**
     * @return The AWS resource tags to filter on for the service specified by `source`.
     * 
     */
    public Output<List<String>> tags() {
        return this.tags;
    }

    private IntegrationAccountLogsConfigLambdaForwarderLogSourceConfigTagFilterArgs() {}

    private IntegrationAccountLogsConfigLambdaForwarderLogSourceConfigTagFilterArgs(IntegrationAccountLogsConfigLambdaForwarderLogSourceConfigTagFilterArgs $) {
        this.source = $.source;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationAccountLogsConfigLambdaForwarderLogSourceConfigTagFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationAccountLogsConfigLambdaForwarderLogSourceConfigTagFilterArgs $;

        public Builder() {
            $ = new IntegrationAccountLogsConfigLambdaForwarderLogSourceConfigTagFilterArgs();
        }

        public Builder(IntegrationAccountLogsConfigLambdaForwarderLogSourceConfigTagFilterArgs defaults) {
            $ = new IntegrationAccountLogsConfigLambdaForwarderLogSourceConfigTagFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param source The AWS service for which the tag filters defined in `tags` will be applied.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The AWS service for which the tag filters defined in `tags` will be applied.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param tags The AWS resource tags to filter on for the service specified by `source`.
         * 
         * @return builder
         * 
         */
        public Builder tags(Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The AWS resource tags to filter on for the service specified by `source`.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The AWS resource tags to filter on for the service specified by `source`.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public IntegrationAccountLogsConfigLambdaForwarderLogSourceConfigTagFilterArgs build() {
            if ($.source == null) {
                throw new MissingRequiredPropertyException("IntegrationAccountLogsConfigLambdaForwarderLogSourceConfigTagFilterArgs", "source");
            }
            if ($.tags == null) {
                throw new MissingRequiredPropertyException("IntegrationAccountLogsConfigLambdaForwarderLogSourceConfigTagFilterArgs", "tags");
            }
            return $;
        }
    }

}
