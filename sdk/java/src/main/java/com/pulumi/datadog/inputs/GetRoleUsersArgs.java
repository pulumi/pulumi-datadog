// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRoleUsersArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRoleUsersArgs Empty = new GetRoleUsersArgs();

    /**
     * When true, `filter_keyword` string is exact matched against the user&#39;s `name`.
     * 
     */
    @Import(name="exactMatch")
    private @Nullable Output<Boolean> exactMatch;

    /**
     * @return When true, `filter_keyword` string is exact matched against the user&#39;s `name`.
     * 
     */
    public Optional<Output<Boolean>> exactMatch() {
        return Optional.ofNullable(this.exactMatch);
    }

    /**
     * Search query, can be user name.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<String> filter;

    /**
     * @return Search query, can be user name.
     * 
     */
    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * The role&#39;s identifier.
     * 
     */
    @Import(name="roleId", required=true)
    private Output<String> roleId;

    /**
     * @return The role&#39;s identifier.
     * 
     */
    public Output<String> roleId() {
        return this.roleId;
    }

    private GetRoleUsersArgs() {}

    private GetRoleUsersArgs(GetRoleUsersArgs $) {
        this.exactMatch = $.exactMatch;
        this.filter = $.filter;
        this.roleId = $.roleId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRoleUsersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRoleUsersArgs $;

        public Builder() {
            $ = new GetRoleUsersArgs();
        }

        public Builder(GetRoleUsersArgs defaults) {
            $ = new GetRoleUsersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param exactMatch When true, `filter_keyword` string is exact matched against the user&#39;s `name`.
         * 
         * @return builder
         * 
         */
        public Builder exactMatch(@Nullable Output<Boolean> exactMatch) {
            $.exactMatch = exactMatch;
            return this;
        }

        /**
         * @param exactMatch When true, `filter_keyword` string is exact matched against the user&#39;s `name`.
         * 
         * @return builder
         * 
         */
        public Builder exactMatch(Boolean exactMatch) {
            return exactMatch(Output.of(exactMatch));
        }

        /**
         * @param filter Search query, can be user name.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter Search query, can be user name.
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param roleId The role&#39;s identifier.
         * 
         * @return builder
         * 
         */
        public Builder roleId(Output<String> roleId) {
            $.roleId = roleId;
            return this;
        }

        /**
         * @param roleId The role&#39;s identifier.
         * 
         * @return builder
         * 
         */
        public Builder roleId(String roleId) {
            return roleId(Output.of(roleId));
        }

        public GetRoleUsersArgs build() {
            if ($.roleId == null) {
                throw new MissingRequiredPropertyException("GetRoleUsersArgs", "roleId");
            }
            return $;
        }
    }

}
