// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.GetHostsHostList;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetHostsResult {
    /**
     * @return String to filter search results.
     * 
     */
    private @Nullable String filter;
    /**
     * @return Number of seconds since UNIX epoch from which you want to search your hosts.
     * 
     */
    private @Nullable Integer from;
    /**
     * @return List of hosts (1000 Max).
     * 
     */
    private List<GetHostsHostList> hostLists;
    /**
     * @return The ID of this resource.
     * 
     */
    private String id;
    /**
     * @return Include information on the muted status of hosts and when the mute expires.
     * 
     */
    private @Nullable Boolean includeMutedHostsData;
    /**
     * @return Direction of sort.
     * 
     */
    private @Nullable String sortDir;
    /**
     * @return Sort hosts by this field.
     * 
     */
    private @Nullable String sortField;
    /**
     * @return Number of host matching the query.
     * 
     */
    private Integer totalMatching;
    /**
     * @return Number of host returned.
     * 
     */
    private Integer totalReturned;

    private GetHostsResult() {}
    /**
     * @return String to filter search results.
     * 
     */
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return Number of seconds since UNIX epoch from which you want to search your hosts.
     * 
     */
    public Optional<Integer> from() {
        return Optional.ofNullable(this.from);
    }
    /**
     * @return List of hosts (1000 Max).
     * 
     */
    public List<GetHostsHostList> hostLists() {
        return this.hostLists;
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Include information on the muted status of hosts and when the mute expires.
     * 
     */
    public Optional<Boolean> includeMutedHostsData() {
        return Optional.ofNullable(this.includeMutedHostsData);
    }
    /**
     * @return Direction of sort.
     * 
     */
    public Optional<String> sortDir() {
        return Optional.ofNullable(this.sortDir);
    }
    /**
     * @return Sort hosts by this field.
     * 
     */
    public Optional<String> sortField() {
        return Optional.ofNullable(this.sortField);
    }
    /**
     * @return Number of host matching the query.
     * 
     */
    public Integer totalMatching() {
        return this.totalMatching;
    }
    /**
     * @return Number of host returned.
     * 
     */
    public Integer totalReturned() {
        return this.totalReturned;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHostsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String filter;
        private @Nullable Integer from;
        private List<GetHostsHostList> hostLists;
        private String id;
        private @Nullable Boolean includeMutedHostsData;
        private @Nullable String sortDir;
        private @Nullable String sortField;
        private Integer totalMatching;
        private Integer totalReturned;
        public Builder() {}
        public Builder(GetHostsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filter = defaults.filter;
    	      this.from = defaults.from;
    	      this.hostLists = defaults.hostLists;
    	      this.id = defaults.id;
    	      this.includeMutedHostsData = defaults.includeMutedHostsData;
    	      this.sortDir = defaults.sortDir;
    	      this.sortField = defaults.sortField;
    	      this.totalMatching = defaults.totalMatching;
    	      this.totalReturned = defaults.totalReturned;
        }

        @CustomType.Setter
        public Builder filter(@Nullable String filter) {

            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder from(@Nullable Integer from) {

            this.from = from;
            return this;
        }
        @CustomType.Setter
        public Builder hostLists(List<GetHostsHostList> hostLists) {
            if (hostLists == null) {
              throw new MissingRequiredPropertyException("GetHostsResult", "hostLists");
            }
            this.hostLists = hostLists;
            return this;
        }
        public Builder hostLists(GetHostsHostList... hostLists) {
            return hostLists(List.of(hostLists));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetHostsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder includeMutedHostsData(@Nullable Boolean includeMutedHostsData) {

            this.includeMutedHostsData = includeMutedHostsData;
            return this;
        }
        @CustomType.Setter
        public Builder sortDir(@Nullable String sortDir) {

            this.sortDir = sortDir;
            return this;
        }
        @CustomType.Setter
        public Builder sortField(@Nullable String sortField) {

            this.sortField = sortField;
            return this;
        }
        @CustomType.Setter
        public Builder totalMatching(Integer totalMatching) {
            if (totalMatching == null) {
              throw new MissingRequiredPropertyException("GetHostsResult", "totalMatching");
            }
            this.totalMatching = totalMatching;
            return this;
        }
        @CustomType.Setter
        public Builder totalReturned(Integer totalReturned) {
            if (totalReturned == null) {
              throw new MissingRequiredPropertyException("GetHostsResult", "totalReturned");
            }
            this.totalReturned = totalReturned;
            return this;
        }
        public GetHostsResult build() {
            final var _resultValue = new GetHostsResult();
            _resultValue.filter = filter;
            _resultValue.from = from;
            _resultValue.hostLists = hostLists;
            _resultValue.id = id;
            _resultValue.includeMutedHostsData = includeMutedHostsData;
            _resultValue.sortDir = sortDir;
            _resultValue.sortField = sortField;
            _resultValue.totalMatching = totalMatching;
            _resultValue.totalReturned = totalReturned;
            return _resultValue;
        }
    }
}
