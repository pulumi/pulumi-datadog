// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationAccountArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationAccountArgs Empty = new IntegrationAccountArgs();

    /**
     * The API key (or token) for the Cloudflare account.
     * 
     */
    @Import(name="apiKey", required=true)
    private Output<String> apiKey;

    /**
     * @return The API key (or token) for the Cloudflare account.
     * 
     */
    public Output<String> apiKey() {
        return this.apiKey;
    }

    /**
     * The email associated with the Cloudflare account. If an API key is provided (and not a token), this field is also required.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return The email associated with the Cloudflare account. If an API key is provided (and not a token), this field is also required.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * The name of the Cloudflare account.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the Cloudflare account.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private IntegrationAccountArgs() {}

    private IntegrationAccountArgs(IntegrationAccountArgs $) {
        this.apiKey = $.apiKey;
        this.email = $.email;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationAccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationAccountArgs $;

        public Builder() {
            $ = new IntegrationAccountArgs();
        }

        public Builder(IntegrationAccountArgs defaults) {
            $ = new IntegrationAccountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKey The API key (or token) for the Cloudflare account.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(Output<String> apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param apiKey The API key (or token) for the Cloudflare account.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(String apiKey) {
            return apiKey(Output.of(apiKey));
        }

        /**
         * @param email The email associated with the Cloudflare account. If an API key is provided (and not a token), this field is also required.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The email associated with the Cloudflare account. If an API key is provided (and not a token), this field is also required.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param name The name of the Cloudflare account.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Cloudflare account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public IntegrationAccountArgs build() {
            if ($.apiKey == null) {
                throw new MissingRequiredPropertyException("IntegrationAccountArgs", "apiKey");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("IntegrationAccountArgs", "name");
            }
            return $;
        }
    }

}
