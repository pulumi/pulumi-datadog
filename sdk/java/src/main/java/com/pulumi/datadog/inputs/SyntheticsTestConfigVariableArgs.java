// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticsTestConfigVariableArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticsTestConfigVariableArgs Empty = new SyntheticsTestConfigVariableArgs();

    @Import(name="example")
    private @Nullable Output<String> example;

    public Optional<Output<String>> example() {
        return Optional.ofNullable(this.example);
    }

    /**
     * When type = `global`, ID of the global variable to use.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return When type = `global`, ID of the global variable to use.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the variable.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the variable.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="pattern")
    private @Nullable Output<String> pattern;

    public Optional<Output<String>> pattern() {
        return Optional.ofNullable(this.pattern);
    }

    /**
     * Whether the value of this variable will be obfuscated in test results. Defaults to `false`.
     * 
     */
    @Import(name="secure")
    private @Nullable Output<Boolean> secure;

    /**
     * @return Whether the value of this variable will be obfuscated in test results. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> secure() {
        return Optional.ofNullable(this.secure);
    }

    /**
     * Type of test configuration variable. Valid values are `global`, `text`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of test configuration variable. Valid values are `global`, `text`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private SyntheticsTestConfigVariableArgs() {}

    private SyntheticsTestConfigVariableArgs(SyntheticsTestConfigVariableArgs $) {
        this.example = $.example;
        this.id = $.id;
        this.name = $.name;
        this.pattern = $.pattern;
        this.secure = $.secure;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticsTestConfigVariableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticsTestConfigVariableArgs $;

        public Builder() {
            $ = new SyntheticsTestConfigVariableArgs();
        }

        public Builder(SyntheticsTestConfigVariableArgs defaults) {
            $ = new SyntheticsTestConfigVariableArgs(Objects.requireNonNull(defaults));
        }

        public Builder example(@Nullable Output<String> example) {
            $.example = example;
            return this;
        }

        public Builder example(String example) {
            return example(Output.of(example));
        }

        /**
         * @param id When type = `global`, ID of the global variable to use.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id When type = `global`, ID of the global variable to use.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Name of the variable.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the variable.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder pattern(@Nullable Output<String> pattern) {
            $.pattern = pattern;
            return this;
        }

        public Builder pattern(String pattern) {
            return pattern(Output.of(pattern));
        }

        /**
         * @param secure Whether the value of this variable will be obfuscated in test results. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder secure(@Nullable Output<Boolean> secure) {
            $.secure = secure;
            return this;
        }

        /**
         * @param secure Whether the value of this variable will be obfuscated in test results. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder secure(Boolean secure) {
            return secure(Output.of(secure));
        }

        /**
         * @param type Type of test configuration variable. Valid values are `global`, `text`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of test configuration variable. Valid values are `global`, `text`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public SyntheticsTestConfigVariableArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
