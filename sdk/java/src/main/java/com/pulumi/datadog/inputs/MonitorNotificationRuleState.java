// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.MonitorNotificationRuleFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitorNotificationRuleState extends com.pulumi.resources.ResourceArgs {

    public static final MonitorNotificationRuleState Empty = new MonitorNotificationRuleState();

    @Import(name="filter")
    private @Nullable Output<MonitorNotificationRuleFilterArgs> filter;

    public Optional<Output<MonitorNotificationRuleFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * The name of the monitor notification rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the monitor notification rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of recipients to notify.
     * 
     */
    @Import(name="recipients")
    private @Nullable Output<List<String>> recipients;

    /**
     * @return List of recipients to notify.
     * 
     */
    public Optional<Output<List<String>>> recipients() {
        return Optional.ofNullable(this.recipients);
    }

    private MonitorNotificationRuleState() {}

    private MonitorNotificationRuleState(MonitorNotificationRuleState $) {
        this.filter = $.filter;
        this.name = $.name;
        this.recipients = $.recipients;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorNotificationRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorNotificationRuleState $;

        public Builder() {
            $ = new MonitorNotificationRuleState();
        }

        public Builder(MonitorNotificationRuleState defaults) {
            $ = new MonitorNotificationRuleState(Objects.requireNonNull(defaults));
        }

        public Builder filter(@Nullable Output<MonitorNotificationRuleFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(MonitorNotificationRuleFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param name The name of the monitor notification rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the monitor notification rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param recipients List of recipients to notify.
         * 
         * @return builder
         * 
         */
        public Builder recipients(@Nullable Output<List<String>> recipients) {
            $.recipients = recipients;
            return this;
        }

        /**
         * @param recipients List of recipients to notify.
         * 
         * @return builder
         * 
         */
        public Builder recipients(List<String> recipients) {
            return recipients(Output.of(recipients));
        }

        /**
         * @param recipients List of recipients to notify.
         * 
         * @return builder
         * 
         */
        public Builder recipients(String... recipients) {
            return recipients(List.of(recipients));
        }

        public MonitorNotificationRuleState build() {
            return $;
        }
    }

}
