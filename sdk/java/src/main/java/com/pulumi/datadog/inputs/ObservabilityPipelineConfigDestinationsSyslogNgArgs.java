// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigDestinationsSyslogNgTlsArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigDestinationsSyslogNgArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigDestinationsSyslogNgArgs Empty = new ObservabilityPipelineConfigDestinationsSyslogNgArgs();

    /**
     * The unique identifier for this component.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique identifier for this component.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    @Import(name="inputs", required=true)
    private Output<List<String>> inputs;

    /**
     * @return A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    public Output<List<String>> inputs() {
        return this.inputs;
    }

    /**
     * Optional socket keepalive duration in milliseconds.
     * 
     */
    @Import(name="keepalive")
    private @Nullable Output<Integer> keepalive;

    /**
     * @return Optional socket keepalive duration in milliseconds.
     * 
     */
    public Optional<Output<Integer>> keepalive() {
        return Optional.ofNullable(this.keepalive);
    }

    /**
     * Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    @Import(name="tls")
    private @Nullable Output<ObservabilityPipelineConfigDestinationsSyslogNgTlsArgs> tls;

    /**
     * @return Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigDestinationsSyslogNgTlsArgs>> tls() {
        return Optional.ofNullable(this.tls);
    }

    private ObservabilityPipelineConfigDestinationsSyslogNgArgs() {}

    private ObservabilityPipelineConfigDestinationsSyslogNgArgs(ObservabilityPipelineConfigDestinationsSyslogNgArgs $) {
        this.id = $.id;
        this.inputs = $.inputs;
        this.keepalive = $.keepalive;
        this.tls = $.tls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigDestinationsSyslogNgArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigDestinationsSyslogNgArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigDestinationsSyslogNgArgs();
        }

        public Builder(ObservabilityPipelineConfigDestinationsSyslogNgArgs defaults) {
            $ = new ObservabilityPipelineConfigDestinationsSyslogNgArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The unique identifier for this component.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier for this component.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(Output<List<String>> inputs) {
            $.inputs = inputs;
            return this;
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(List<String> inputs) {
            return inputs(Output.of(inputs));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }

        /**
         * @param keepalive Optional socket keepalive duration in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder keepalive(@Nullable Output<Integer> keepalive) {
            $.keepalive = keepalive;
            return this;
        }

        /**
         * @param keepalive Optional socket keepalive duration in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder keepalive(Integer keepalive) {
            return keepalive(Output.of(keepalive));
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(@Nullable Output<ObservabilityPipelineConfigDestinationsSyslogNgTlsArgs> tls) {
            $.tls = tls;
            return this;
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(ObservabilityPipelineConfigDestinationsSyslogNgTlsArgs tls) {
            return tls(Output.of(tls));
        }

        public ObservabilityPipelineConfigDestinationsSyslogNgArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsSyslogNgArgs", "id");
            }
            if ($.inputs == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsSyslogNgArgs", "inputs");
            }
            return $;
        }
    }

}
