// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.GetIncidentNotificationRuleCondition;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetIncidentNotificationRuleResult {
    /**
     * @return The conditions that trigger this notification rule.
     * 
     */
    private @Nullable List<GetIncidentNotificationRuleCondition> conditions;
    /**
     * @return Timestamp when the notification rule was created.
     * 
     */
    private String created;
    /**
     * @return Whether the notification rule is enabled.
     * 
     */
    private Boolean enabled;
    /**
     * @return The notification handles (targets) for this rule.
     * 
     */
    private List<String> handles;
    /**
     * @return The ID of the incident notification rule.
     * 
     */
    private String id;
    /**
     * @return The ID of the incident type this notification rule is associated with.
     * 
     */
    private String incidentType;
    /**
     * @return Timestamp when the notification rule was last modified.
     * 
     */
    private String modified;
    /**
     * @return The ID of the notification template used by this rule.
     * 
     */
    private String notificationTemplate;
    /**
     * @return List of incident fields that trigger re-notification when changed.
     * 
     */
    private List<String> renotifyOns;
    /**
     * @return The trigger event for this notification rule.
     * 
     */
    private String trigger;
    /**
     * @return The visibility of the notification rule. Valid values are: all, organization, private.
     * 
     */
    private String visibility;

    private GetIncidentNotificationRuleResult() {}
    /**
     * @return The conditions that trigger this notification rule.
     * 
     */
    public List<GetIncidentNotificationRuleCondition> conditions() {
        return this.conditions == null ? List.of() : this.conditions;
    }
    /**
     * @return Timestamp when the notification rule was created.
     * 
     */
    public String created() {
        return this.created;
    }
    /**
     * @return Whether the notification rule is enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The notification handles (targets) for this rule.
     * 
     */
    public List<String> handles() {
        return this.handles;
    }
    /**
     * @return The ID of the incident notification rule.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the incident type this notification rule is associated with.
     * 
     */
    public String incidentType() {
        return this.incidentType;
    }
    /**
     * @return Timestamp when the notification rule was last modified.
     * 
     */
    public String modified() {
        return this.modified;
    }
    /**
     * @return The ID of the notification template used by this rule.
     * 
     */
    public String notificationTemplate() {
        return this.notificationTemplate;
    }
    /**
     * @return List of incident fields that trigger re-notification when changed.
     * 
     */
    public List<String> renotifyOns() {
        return this.renotifyOns;
    }
    /**
     * @return The trigger event for this notification rule.
     * 
     */
    public String trigger() {
        return this.trigger;
    }
    /**
     * @return The visibility of the notification rule. Valid values are: all, organization, private.
     * 
     */
    public String visibility() {
        return this.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIncidentNotificationRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetIncidentNotificationRuleCondition> conditions;
        private String created;
        private Boolean enabled;
        private List<String> handles;
        private String id;
        private String incidentType;
        private String modified;
        private String notificationTemplate;
        private List<String> renotifyOns;
        private String trigger;
        private String visibility;
        public Builder() {}
        public Builder(GetIncidentNotificationRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditions = defaults.conditions;
    	      this.created = defaults.created;
    	      this.enabled = defaults.enabled;
    	      this.handles = defaults.handles;
    	      this.id = defaults.id;
    	      this.incidentType = defaults.incidentType;
    	      this.modified = defaults.modified;
    	      this.notificationTemplate = defaults.notificationTemplate;
    	      this.renotifyOns = defaults.renotifyOns;
    	      this.trigger = defaults.trigger;
    	      this.visibility = defaults.visibility;
        }

        @CustomType.Setter
        public Builder conditions(@Nullable List<GetIncidentNotificationRuleCondition> conditions) {

            this.conditions = conditions;
            return this;
        }
        public Builder conditions(GetIncidentNotificationRuleCondition... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder created(String created) {
            if (created == null) {
              throw new MissingRequiredPropertyException("GetIncidentNotificationRuleResult", "created");
            }
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetIncidentNotificationRuleResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder handles(List<String> handles) {
            if (handles == null) {
              throw new MissingRequiredPropertyException("GetIncidentNotificationRuleResult", "handles");
            }
            this.handles = handles;
            return this;
        }
        public Builder handles(String... handles) {
            return handles(List.of(handles));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetIncidentNotificationRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder incidentType(String incidentType) {
            if (incidentType == null) {
              throw new MissingRequiredPropertyException("GetIncidentNotificationRuleResult", "incidentType");
            }
            this.incidentType = incidentType;
            return this;
        }
        @CustomType.Setter
        public Builder modified(String modified) {
            if (modified == null) {
              throw new MissingRequiredPropertyException("GetIncidentNotificationRuleResult", "modified");
            }
            this.modified = modified;
            return this;
        }
        @CustomType.Setter
        public Builder notificationTemplate(String notificationTemplate) {
            if (notificationTemplate == null) {
              throw new MissingRequiredPropertyException("GetIncidentNotificationRuleResult", "notificationTemplate");
            }
            this.notificationTemplate = notificationTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder renotifyOns(List<String> renotifyOns) {
            if (renotifyOns == null) {
              throw new MissingRequiredPropertyException("GetIncidentNotificationRuleResult", "renotifyOns");
            }
            this.renotifyOns = renotifyOns;
            return this;
        }
        public Builder renotifyOns(String... renotifyOns) {
            return renotifyOns(List.of(renotifyOns));
        }
        @CustomType.Setter
        public Builder trigger(String trigger) {
            if (trigger == null) {
              throw new MissingRequiredPropertyException("GetIncidentNotificationRuleResult", "trigger");
            }
            this.trigger = trigger;
            return this;
        }
        @CustomType.Setter
        public Builder visibility(String visibility) {
            if (visibility == null) {
              throw new MissingRequiredPropertyException("GetIncidentNotificationRuleResult", "visibility");
            }
            this.visibility = visibility;
            return this;
        }
        public GetIncidentNotificationRuleResult build() {
            final var _resultValue = new GetIncidentNotificationRuleResult();
            _resultValue.conditions = conditions;
            _resultValue.created = created;
            _resultValue.enabled = enabled;
            _resultValue.handles = handles;
            _resultValue.id = id;
            _resultValue.incidentType = incidentType;
            _resultValue.modified = modified;
            _resultValue.notificationTemplate = notificationTemplate;
            _resultValue.renotifyOns = renotifyOns;
            _resultValue.trigger = trigger;
            _resultValue.visibility = visibility;
            return _resultValue;
        }
    }
}
