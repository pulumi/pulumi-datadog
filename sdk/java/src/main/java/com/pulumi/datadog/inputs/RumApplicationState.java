// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RumApplicationState extends com.pulumi.resources.ResourceArgs {

    public static final RumApplicationState Empty = new RumApplicationState();

    /**
     * The client token.
     * 
     */
    @Import(name="clientToken")
    private @Nullable Output<String> clientToken;

    /**
     * @return The client token.
     * 
     */
    public Optional<Output<String>> clientToken() {
        return Optional.ofNullable(this.clientToken);
    }

    /**
     * Name of the RUM application.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the RUM application.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Type of the RUM application. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`. Defaults to `&#34;browser&#34;`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of the RUM application. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`. Defaults to `&#34;browser&#34;`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private RumApplicationState() {}

    private RumApplicationState(RumApplicationState $) {
        this.clientToken = $.clientToken;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RumApplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RumApplicationState $;

        public Builder() {
            $ = new RumApplicationState();
        }

        public Builder(RumApplicationState defaults) {
            $ = new RumApplicationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientToken The client token.
         * 
         * @return builder
         * 
         */
        public Builder clientToken(@Nullable Output<String> clientToken) {
            $.clientToken = clientToken;
            return this;
        }

        /**
         * @param clientToken The client token.
         * 
         * @return builder
         * 
         */
        public Builder clientToken(String clientToken) {
            return clientToken(Output.of(clientToken));
        }

        /**
         * @param name Name of the RUM application.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the RUM application.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type Type of the RUM application. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`. Defaults to `&#34;browser&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the RUM application. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`. Defaults to `&#34;browser&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RumApplicationState build() {
            return $;
        }
    }

}
