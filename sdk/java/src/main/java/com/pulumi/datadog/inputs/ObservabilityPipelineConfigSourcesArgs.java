// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesAmazonDataFirehoseArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesAmazonS3Args;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesDatadogAgentArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesFluentBitArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesFluentdArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesGooglePubsubArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesHttpClientArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesHttpServerArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesKafkaArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesLogstashArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesRsyslogArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesSocketArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesSplunkHecArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesSplunkTcpArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesSumoLogicArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesSyslogNgArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigSourcesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigSourcesArgs Empty = new ObservabilityPipelineConfigSourcesArgs();

    /**
     * The `amazonDataFirehose` source ingests logs from AWS Data Firehose.
     * 
     */
    @Import(name="amazonDataFirehoses")
    private @Nullable Output<List<ObservabilityPipelineConfigSourcesAmazonDataFirehoseArgs>> amazonDataFirehoses;

    /**
     * @return The `amazonDataFirehose` source ingests logs from AWS Data Firehose.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigSourcesAmazonDataFirehoseArgs>>> amazonDataFirehoses() {
        return Optional.ofNullable(this.amazonDataFirehoses);
    }

    /**
     * The `amazonS3` source ingests logs from an Amazon S3 bucket. It supports AWS authentication and TLS encryption.
     * 
     */
    @Import(name="amazonS3s")
    private @Nullable Output<List<ObservabilityPipelineConfigSourcesAmazonS3Args>> amazonS3s;

    /**
     * @return The `amazonS3` source ingests logs from an Amazon S3 bucket. It supports AWS authentication and TLS encryption.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigSourcesAmazonS3Args>>> amazonS3s() {
        return Optional.ofNullable(this.amazonS3s);
    }

    /**
     * The `datadogAgent` source collects logs from the Datadog Agent.
     * 
     */
    @Import(name="datadogAgents")
    private @Nullable Output<List<ObservabilityPipelineConfigSourcesDatadogAgentArgs>> datadogAgents;

    /**
     * @return The `datadogAgent` source collects logs from the Datadog Agent.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigSourcesDatadogAgentArgs>>> datadogAgents() {
        return Optional.ofNullable(this.datadogAgents);
    }

    /**
     * The `fluent` source ingests logs from Fluent Bit.
     * 
     */
    @Import(name="fluentBits")
    private @Nullable Output<List<ObservabilityPipelineConfigSourcesFluentBitArgs>> fluentBits;

    /**
     * @return The `fluent` source ingests logs from Fluent Bit.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigSourcesFluentBitArgs>>> fluentBits() {
        return Optional.ofNullable(this.fluentBits);
    }

    /**
     * The `fluent` source ingests logs from a Fluentd-compatible service.
     * 
     */
    @Import(name="fluentds")
    private @Nullable Output<List<ObservabilityPipelineConfigSourcesFluentdArgs>> fluentds;

    /**
     * @return The `fluent` source ingests logs from a Fluentd-compatible service.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigSourcesFluentdArgs>>> fluentds() {
        return Optional.ofNullable(this.fluentds);
    }

    /**
     * The `googlePubsub` source ingests logs from a Google Cloud Pub/Sub subscription.
     * 
     */
    @Import(name="googlePubsubs")
    private @Nullable Output<List<ObservabilityPipelineConfigSourcesGooglePubsubArgs>> googlePubsubs;

    /**
     * @return The `googlePubsub` source ingests logs from a Google Cloud Pub/Sub subscription.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigSourcesGooglePubsubArgs>>> googlePubsubs() {
        return Optional.ofNullable(this.googlePubsubs);
    }

    /**
     * The `httpClient` source scrapes logs from HTTP endpoints at regular intervals.
     * 
     */
    @Import(name="httpClients")
    private @Nullable Output<List<ObservabilityPipelineConfigSourcesHttpClientArgs>> httpClients;

    /**
     * @return The `httpClient` source scrapes logs from HTTP endpoints at regular intervals.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigSourcesHttpClientArgs>>> httpClients() {
        return Optional.ofNullable(this.httpClients);
    }

    /**
     * The `httpServer` source collects logs over HTTP POST from external services.
     * 
     */
    @Import(name="httpServers")
    private @Nullable Output<List<ObservabilityPipelineConfigSourcesHttpServerArgs>> httpServers;

    /**
     * @return The `httpServer` source collects logs over HTTP POST from external services.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigSourcesHttpServerArgs>>> httpServers() {
        return Optional.ofNullable(this.httpServers);
    }

    /**
     * The `kafka` source ingests data from Apache Kafka topics.
     * 
     */
    @Import(name="kafkas")
    private @Nullable Output<List<ObservabilityPipelineConfigSourcesKafkaArgs>> kafkas;

    /**
     * @return The `kafka` source ingests data from Apache Kafka topics.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigSourcesKafkaArgs>>> kafkas() {
        return Optional.ofNullable(this.kafkas);
    }

    /**
     * The `logstash` source ingests logs from a Logstash forwarder.
     * 
     */
    @Import(name="logstashes")
    private @Nullable Output<List<ObservabilityPipelineConfigSourcesLogstashArgs>> logstashes;

    /**
     * @return The `logstash` source ingests logs from a Logstash forwarder.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigSourcesLogstashArgs>>> logstashes() {
        return Optional.ofNullable(this.logstashes);
    }

    /**
     * The `rsyslog` source listens for logs over TCP or UDP from an `rsyslog` server using the syslog protocol.
     * 
     */
    @Import(name="rsyslogs")
    private @Nullable Output<List<ObservabilityPipelineConfigSourcesRsyslogArgs>> rsyslogs;

    /**
     * @return The `rsyslog` source listens for logs over TCP or UDP from an `rsyslog` server using the syslog protocol.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigSourcesRsyslogArgs>>> rsyslogs() {
        return Optional.ofNullable(this.rsyslogs);
    }

    /**
     * The `socket` source ingests logs over TCP or UDP.
     * 
     */
    @Import(name="sockets")
    private @Nullable Output<List<ObservabilityPipelineConfigSourcesSocketArgs>> sockets;

    /**
     * @return The `socket` source ingests logs over TCP or UDP.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigSourcesSocketArgs>>> sockets() {
        return Optional.ofNullable(this.sockets);
    }

    /**
     * The `splunkHec` source implements the Splunk HTTP Event Collector (HEC) API.
     * 
     */
    @Import(name="splunkHecs")
    private @Nullable Output<List<ObservabilityPipelineConfigSourcesSplunkHecArgs>> splunkHecs;

    /**
     * @return The `splunkHec` source implements the Splunk HTTP Event Collector (HEC) API.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigSourcesSplunkHecArgs>>> splunkHecs() {
        return Optional.ofNullable(this.splunkHecs);
    }

    /**
     * The `splunkTcp` source receives logs from a Splunk Universal Forwarder over TCP. TLS is supported for secure transmission.
     * 
     */
    @Import(name="splunkTcps")
    private @Nullable Output<List<ObservabilityPipelineConfigSourcesSplunkTcpArgs>> splunkTcps;

    /**
     * @return The `splunkTcp` source receives logs from a Splunk Universal Forwarder over TCP. TLS is supported for secure transmission.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigSourcesSplunkTcpArgs>>> splunkTcps() {
        return Optional.ofNullable(this.splunkTcps);
    }

    /**
     * The `sumoLogic` source receives logs from Sumo Logic collectors.
     * 
     */
    @Import(name="sumoLogics")
    private @Nullable Output<List<ObservabilityPipelineConfigSourcesSumoLogicArgs>> sumoLogics;

    /**
     * @return The `sumoLogic` source receives logs from Sumo Logic collectors.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigSourcesSumoLogicArgs>>> sumoLogics() {
        return Optional.ofNullable(this.sumoLogics);
    }

    /**
     * The `syslogNg` source listens for logs over TCP or UDP from a `syslog-ng` server using the syslog protocol.
     * 
     */
    @Import(name="syslogNgs")
    private @Nullable Output<List<ObservabilityPipelineConfigSourcesSyslogNgArgs>> syslogNgs;

    /**
     * @return The `syslogNg` source listens for logs over TCP or UDP from a `syslog-ng` server using the syslog protocol.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigSourcesSyslogNgArgs>>> syslogNgs() {
        return Optional.ofNullable(this.syslogNgs);
    }

    private ObservabilityPipelineConfigSourcesArgs() {}

    private ObservabilityPipelineConfigSourcesArgs(ObservabilityPipelineConfigSourcesArgs $) {
        this.amazonDataFirehoses = $.amazonDataFirehoses;
        this.amazonS3s = $.amazonS3s;
        this.datadogAgents = $.datadogAgents;
        this.fluentBits = $.fluentBits;
        this.fluentds = $.fluentds;
        this.googlePubsubs = $.googlePubsubs;
        this.httpClients = $.httpClients;
        this.httpServers = $.httpServers;
        this.kafkas = $.kafkas;
        this.logstashes = $.logstashes;
        this.rsyslogs = $.rsyslogs;
        this.sockets = $.sockets;
        this.splunkHecs = $.splunkHecs;
        this.splunkTcps = $.splunkTcps;
        this.sumoLogics = $.sumoLogics;
        this.syslogNgs = $.syslogNgs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigSourcesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigSourcesArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigSourcesArgs();
        }

        public Builder(ObservabilityPipelineConfigSourcesArgs defaults) {
            $ = new ObservabilityPipelineConfigSourcesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param amazonDataFirehoses The `amazonDataFirehose` source ingests logs from AWS Data Firehose.
         * 
         * @return builder
         * 
         */
        public Builder amazonDataFirehoses(@Nullable Output<List<ObservabilityPipelineConfigSourcesAmazonDataFirehoseArgs>> amazonDataFirehoses) {
            $.amazonDataFirehoses = amazonDataFirehoses;
            return this;
        }

        /**
         * @param amazonDataFirehoses The `amazonDataFirehose` source ingests logs from AWS Data Firehose.
         * 
         * @return builder
         * 
         */
        public Builder amazonDataFirehoses(List<ObservabilityPipelineConfigSourcesAmazonDataFirehoseArgs> amazonDataFirehoses) {
            return amazonDataFirehoses(Output.of(amazonDataFirehoses));
        }

        /**
         * @param amazonDataFirehoses The `amazonDataFirehose` source ingests logs from AWS Data Firehose.
         * 
         * @return builder
         * 
         */
        public Builder amazonDataFirehoses(ObservabilityPipelineConfigSourcesAmazonDataFirehoseArgs... amazonDataFirehoses) {
            return amazonDataFirehoses(List.of(amazonDataFirehoses));
        }

        /**
         * @param amazonS3s The `amazonS3` source ingests logs from an Amazon S3 bucket. It supports AWS authentication and TLS encryption.
         * 
         * @return builder
         * 
         */
        public Builder amazonS3s(@Nullable Output<List<ObservabilityPipelineConfigSourcesAmazonS3Args>> amazonS3s) {
            $.amazonS3s = amazonS3s;
            return this;
        }

        /**
         * @param amazonS3s The `amazonS3` source ingests logs from an Amazon S3 bucket. It supports AWS authentication and TLS encryption.
         * 
         * @return builder
         * 
         */
        public Builder amazonS3s(List<ObservabilityPipelineConfigSourcesAmazonS3Args> amazonS3s) {
            return amazonS3s(Output.of(amazonS3s));
        }

        /**
         * @param amazonS3s The `amazonS3` source ingests logs from an Amazon S3 bucket. It supports AWS authentication and TLS encryption.
         * 
         * @return builder
         * 
         */
        public Builder amazonS3s(ObservabilityPipelineConfigSourcesAmazonS3Args... amazonS3s) {
            return amazonS3s(List.of(amazonS3s));
        }

        /**
         * @param datadogAgents The `datadogAgent` source collects logs from the Datadog Agent.
         * 
         * @return builder
         * 
         */
        public Builder datadogAgents(@Nullable Output<List<ObservabilityPipelineConfigSourcesDatadogAgentArgs>> datadogAgents) {
            $.datadogAgents = datadogAgents;
            return this;
        }

        /**
         * @param datadogAgents The `datadogAgent` source collects logs from the Datadog Agent.
         * 
         * @return builder
         * 
         */
        public Builder datadogAgents(List<ObservabilityPipelineConfigSourcesDatadogAgentArgs> datadogAgents) {
            return datadogAgents(Output.of(datadogAgents));
        }

        /**
         * @param datadogAgents The `datadogAgent` source collects logs from the Datadog Agent.
         * 
         * @return builder
         * 
         */
        public Builder datadogAgents(ObservabilityPipelineConfigSourcesDatadogAgentArgs... datadogAgents) {
            return datadogAgents(List.of(datadogAgents));
        }

        /**
         * @param fluentBits The `fluent` source ingests logs from Fluent Bit.
         * 
         * @return builder
         * 
         */
        public Builder fluentBits(@Nullable Output<List<ObservabilityPipelineConfigSourcesFluentBitArgs>> fluentBits) {
            $.fluentBits = fluentBits;
            return this;
        }

        /**
         * @param fluentBits The `fluent` source ingests logs from Fluent Bit.
         * 
         * @return builder
         * 
         */
        public Builder fluentBits(List<ObservabilityPipelineConfigSourcesFluentBitArgs> fluentBits) {
            return fluentBits(Output.of(fluentBits));
        }

        /**
         * @param fluentBits The `fluent` source ingests logs from Fluent Bit.
         * 
         * @return builder
         * 
         */
        public Builder fluentBits(ObservabilityPipelineConfigSourcesFluentBitArgs... fluentBits) {
            return fluentBits(List.of(fluentBits));
        }

        /**
         * @param fluentds The `fluent` source ingests logs from a Fluentd-compatible service.
         * 
         * @return builder
         * 
         */
        public Builder fluentds(@Nullable Output<List<ObservabilityPipelineConfigSourcesFluentdArgs>> fluentds) {
            $.fluentds = fluentds;
            return this;
        }

        /**
         * @param fluentds The `fluent` source ingests logs from a Fluentd-compatible service.
         * 
         * @return builder
         * 
         */
        public Builder fluentds(List<ObservabilityPipelineConfigSourcesFluentdArgs> fluentds) {
            return fluentds(Output.of(fluentds));
        }

        /**
         * @param fluentds The `fluent` source ingests logs from a Fluentd-compatible service.
         * 
         * @return builder
         * 
         */
        public Builder fluentds(ObservabilityPipelineConfigSourcesFluentdArgs... fluentds) {
            return fluentds(List.of(fluentds));
        }

        /**
         * @param googlePubsubs The `googlePubsub` source ingests logs from a Google Cloud Pub/Sub subscription.
         * 
         * @return builder
         * 
         */
        public Builder googlePubsubs(@Nullable Output<List<ObservabilityPipelineConfigSourcesGooglePubsubArgs>> googlePubsubs) {
            $.googlePubsubs = googlePubsubs;
            return this;
        }

        /**
         * @param googlePubsubs The `googlePubsub` source ingests logs from a Google Cloud Pub/Sub subscription.
         * 
         * @return builder
         * 
         */
        public Builder googlePubsubs(List<ObservabilityPipelineConfigSourcesGooglePubsubArgs> googlePubsubs) {
            return googlePubsubs(Output.of(googlePubsubs));
        }

        /**
         * @param googlePubsubs The `googlePubsub` source ingests logs from a Google Cloud Pub/Sub subscription.
         * 
         * @return builder
         * 
         */
        public Builder googlePubsubs(ObservabilityPipelineConfigSourcesGooglePubsubArgs... googlePubsubs) {
            return googlePubsubs(List.of(googlePubsubs));
        }

        /**
         * @param httpClients The `httpClient` source scrapes logs from HTTP endpoints at regular intervals.
         * 
         * @return builder
         * 
         */
        public Builder httpClients(@Nullable Output<List<ObservabilityPipelineConfigSourcesHttpClientArgs>> httpClients) {
            $.httpClients = httpClients;
            return this;
        }

        /**
         * @param httpClients The `httpClient` source scrapes logs from HTTP endpoints at regular intervals.
         * 
         * @return builder
         * 
         */
        public Builder httpClients(List<ObservabilityPipelineConfigSourcesHttpClientArgs> httpClients) {
            return httpClients(Output.of(httpClients));
        }

        /**
         * @param httpClients The `httpClient` source scrapes logs from HTTP endpoints at regular intervals.
         * 
         * @return builder
         * 
         */
        public Builder httpClients(ObservabilityPipelineConfigSourcesHttpClientArgs... httpClients) {
            return httpClients(List.of(httpClients));
        }

        /**
         * @param httpServers The `httpServer` source collects logs over HTTP POST from external services.
         * 
         * @return builder
         * 
         */
        public Builder httpServers(@Nullable Output<List<ObservabilityPipelineConfigSourcesHttpServerArgs>> httpServers) {
            $.httpServers = httpServers;
            return this;
        }

        /**
         * @param httpServers The `httpServer` source collects logs over HTTP POST from external services.
         * 
         * @return builder
         * 
         */
        public Builder httpServers(List<ObservabilityPipelineConfigSourcesHttpServerArgs> httpServers) {
            return httpServers(Output.of(httpServers));
        }

        /**
         * @param httpServers The `httpServer` source collects logs over HTTP POST from external services.
         * 
         * @return builder
         * 
         */
        public Builder httpServers(ObservabilityPipelineConfigSourcesHttpServerArgs... httpServers) {
            return httpServers(List.of(httpServers));
        }

        /**
         * @param kafkas The `kafka` source ingests data from Apache Kafka topics.
         * 
         * @return builder
         * 
         */
        public Builder kafkas(@Nullable Output<List<ObservabilityPipelineConfigSourcesKafkaArgs>> kafkas) {
            $.kafkas = kafkas;
            return this;
        }

        /**
         * @param kafkas The `kafka` source ingests data from Apache Kafka topics.
         * 
         * @return builder
         * 
         */
        public Builder kafkas(List<ObservabilityPipelineConfigSourcesKafkaArgs> kafkas) {
            return kafkas(Output.of(kafkas));
        }

        /**
         * @param kafkas The `kafka` source ingests data from Apache Kafka topics.
         * 
         * @return builder
         * 
         */
        public Builder kafkas(ObservabilityPipelineConfigSourcesKafkaArgs... kafkas) {
            return kafkas(List.of(kafkas));
        }

        /**
         * @param logstashes The `logstash` source ingests logs from a Logstash forwarder.
         * 
         * @return builder
         * 
         */
        public Builder logstashes(@Nullable Output<List<ObservabilityPipelineConfigSourcesLogstashArgs>> logstashes) {
            $.logstashes = logstashes;
            return this;
        }

        /**
         * @param logstashes The `logstash` source ingests logs from a Logstash forwarder.
         * 
         * @return builder
         * 
         */
        public Builder logstashes(List<ObservabilityPipelineConfigSourcesLogstashArgs> logstashes) {
            return logstashes(Output.of(logstashes));
        }

        /**
         * @param logstashes The `logstash` source ingests logs from a Logstash forwarder.
         * 
         * @return builder
         * 
         */
        public Builder logstashes(ObservabilityPipelineConfigSourcesLogstashArgs... logstashes) {
            return logstashes(List.of(logstashes));
        }

        /**
         * @param rsyslogs The `rsyslog` source listens for logs over TCP or UDP from an `rsyslog` server using the syslog protocol.
         * 
         * @return builder
         * 
         */
        public Builder rsyslogs(@Nullable Output<List<ObservabilityPipelineConfigSourcesRsyslogArgs>> rsyslogs) {
            $.rsyslogs = rsyslogs;
            return this;
        }

        /**
         * @param rsyslogs The `rsyslog` source listens for logs over TCP or UDP from an `rsyslog` server using the syslog protocol.
         * 
         * @return builder
         * 
         */
        public Builder rsyslogs(List<ObservabilityPipelineConfigSourcesRsyslogArgs> rsyslogs) {
            return rsyslogs(Output.of(rsyslogs));
        }

        /**
         * @param rsyslogs The `rsyslog` source listens for logs over TCP or UDP from an `rsyslog` server using the syslog protocol.
         * 
         * @return builder
         * 
         */
        public Builder rsyslogs(ObservabilityPipelineConfigSourcesRsyslogArgs... rsyslogs) {
            return rsyslogs(List.of(rsyslogs));
        }

        /**
         * @param sockets The `socket` source ingests logs over TCP or UDP.
         * 
         * @return builder
         * 
         */
        public Builder sockets(@Nullable Output<List<ObservabilityPipelineConfigSourcesSocketArgs>> sockets) {
            $.sockets = sockets;
            return this;
        }

        /**
         * @param sockets The `socket` source ingests logs over TCP or UDP.
         * 
         * @return builder
         * 
         */
        public Builder sockets(List<ObservabilityPipelineConfigSourcesSocketArgs> sockets) {
            return sockets(Output.of(sockets));
        }

        /**
         * @param sockets The `socket` source ingests logs over TCP or UDP.
         * 
         * @return builder
         * 
         */
        public Builder sockets(ObservabilityPipelineConfigSourcesSocketArgs... sockets) {
            return sockets(List.of(sockets));
        }

        /**
         * @param splunkHecs The `splunkHec` source implements the Splunk HTTP Event Collector (HEC) API.
         * 
         * @return builder
         * 
         */
        public Builder splunkHecs(@Nullable Output<List<ObservabilityPipelineConfigSourcesSplunkHecArgs>> splunkHecs) {
            $.splunkHecs = splunkHecs;
            return this;
        }

        /**
         * @param splunkHecs The `splunkHec` source implements the Splunk HTTP Event Collector (HEC) API.
         * 
         * @return builder
         * 
         */
        public Builder splunkHecs(List<ObservabilityPipelineConfigSourcesSplunkHecArgs> splunkHecs) {
            return splunkHecs(Output.of(splunkHecs));
        }

        /**
         * @param splunkHecs The `splunkHec` source implements the Splunk HTTP Event Collector (HEC) API.
         * 
         * @return builder
         * 
         */
        public Builder splunkHecs(ObservabilityPipelineConfigSourcesSplunkHecArgs... splunkHecs) {
            return splunkHecs(List.of(splunkHecs));
        }

        /**
         * @param splunkTcps The `splunkTcp` source receives logs from a Splunk Universal Forwarder over TCP. TLS is supported for secure transmission.
         * 
         * @return builder
         * 
         */
        public Builder splunkTcps(@Nullable Output<List<ObservabilityPipelineConfigSourcesSplunkTcpArgs>> splunkTcps) {
            $.splunkTcps = splunkTcps;
            return this;
        }

        /**
         * @param splunkTcps The `splunkTcp` source receives logs from a Splunk Universal Forwarder over TCP. TLS is supported for secure transmission.
         * 
         * @return builder
         * 
         */
        public Builder splunkTcps(List<ObservabilityPipelineConfigSourcesSplunkTcpArgs> splunkTcps) {
            return splunkTcps(Output.of(splunkTcps));
        }

        /**
         * @param splunkTcps The `splunkTcp` source receives logs from a Splunk Universal Forwarder over TCP. TLS is supported for secure transmission.
         * 
         * @return builder
         * 
         */
        public Builder splunkTcps(ObservabilityPipelineConfigSourcesSplunkTcpArgs... splunkTcps) {
            return splunkTcps(List.of(splunkTcps));
        }

        /**
         * @param sumoLogics The `sumoLogic` source receives logs from Sumo Logic collectors.
         * 
         * @return builder
         * 
         */
        public Builder sumoLogics(@Nullable Output<List<ObservabilityPipelineConfigSourcesSumoLogicArgs>> sumoLogics) {
            $.sumoLogics = sumoLogics;
            return this;
        }

        /**
         * @param sumoLogics The `sumoLogic` source receives logs from Sumo Logic collectors.
         * 
         * @return builder
         * 
         */
        public Builder sumoLogics(List<ObservabilityPipelineConfigSourcesSumoLogicArgs> sumoLogics) {
            return sumoLogics(Output.of(sumoLogics));
        }

        /**
         * @param sumoLogics The `sumoLogic` source receives logs from Sumo Logic collectors.
         * 
         * @return builder
         * 
         */
        public Builder sumoLogics(ObservabilityPipelineConfigSourcesSumoLogicArgs... sumoLogics) {
            return sumoLogics(List.of(sumoLogics));
        }

        /**
         * @param syslogNgs The `syslogNg` source listens for logs over TCP or UDP from a `syslog-ng` server using the syslog protocol.
         * 
         * @return builder
         * 
         */
        public Builder syslogNgs(@Nullable Output<List<ObservabilityPipelineConfigSourcesSyslogNgArgs>> syslogNgs) {
            $.syslogNgs = syslogNgs;
            return this;
        }

        /**
         * @param syslogNgs The `syslogNg` source listens for logs over TCP or UDP from a `syslog-ng` server using the syslog protocol.
         * 
         * @return builder
         * 
         */
        public Builder syslogNgs(List<ObservabilityPipelineConfigSourcesSyslogNgArgs> syslogNgs) {
            return syslogNgs(Output.of(syslogNgs));
        }

        /**
         * @param syslogNgs The `syslogNg` source listens for logs over TCP or UDP from a `syslog-ng` server using the syslog protocol.
         * 
         * @return builder
         * 
         */
        public Builder syslogNgs(ObservabilityPipelineConfigSourcesSyslogNgArgs... syslogNgs) {
            return syslogNgs(List.of(syslogNgs));
        }

        public ObservabilityPipelineConfigSourcesArgs build() {
            return $;
        }
    }

}
