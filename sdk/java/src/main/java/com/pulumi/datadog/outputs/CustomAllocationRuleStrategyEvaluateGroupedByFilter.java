// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CustomAllocationRuleStrategyEvaluateGroupedByFilter {
    /**
     * @return The condition to match. Valid values are `=`, `!=`, `is`, `is not`, `like`, `in`, `not in`.
     * 
     */
    private @Nullable String condition;
    /**
     * @return The tag key to filter on when grouping costs for evaluation.
     * 
     */
    private @Nullable String tag;
    /**
     * @return The single tag value to match when grouping. Use with conditions like `=`, `!=`, `is`, `is not`, `like`.
     * 
     */
    private @Nullable String value;
    /**
     * @return A list of tag values to match when grouping. Use with `in` or `not in` conditions.
     * 
     */
    private @Nullable List<String> values;

    private CustomAllocationRuleStrategyEvaluateGroupedByFilter() {}
    /**
     * @return The condition to match. Valid values are `=`, `!=`, `is`, `is not`, `like`, `in`, `not in`.
     * 
     */
    public Optional<String> condition() {
        return Optional.ofNullable(this.condition);
    }
    /**
     * @return The tag key to filter on when grouping costs for evaluation.
     * 
     */
    public Optional<String> tag() {
        return Optional.ofNullable(this.tag);
    }
    /**
     * @return The single tag value to match when grouping. Use with conditions like `=`, `!=`, `is`, `is not`, `like`.
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }
    /**
     * @return A list of tag values to match when grouping. Use with `in` or `not in` conditions.
     * 
     */
    public List<String> values() {
        return this.values == null ? List.of() : this.values;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomAllocationRuleStrategyEvaluateGroupedByFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String condition;
        private @Nullable String tag;
        private @Nullable String value;
        private @Nullable List<String> values;
        public Builder() {}
        public Builder(CustomAllocationRuleStrategyEvaluateGroupedByFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.tag = defaults.tag;
    	      this.value = defaults.value;
    	      this.values = defaults.values;
        }

        @CustomType.Setter
        public Builder condition(@Nullable String condition) {

            this.condition = condition;
            return this;
        }
        @CustomType.Setter
        public Builder tag(@Nullable String tag) {

            this.tag = tag;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {

            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder values(@Nullable List<String> values) {

            this.values = values;
            return this;
        }
        public Builder values(String... values) {
            return values(List.of(values));
        }
        public CustomAllocationRuleStrategyEvaluateGroupedByFilter build() {
            final var _resultValue = new CustomAllocationRuleStrategyEvaluateGroupedByFilter();
            _resultValue.condition = condition;
            _resultValue.tag = tag;
            _resultValue.value = value;
            _resultValue.values = values;
            return _resultValue;
        }
    }
}
