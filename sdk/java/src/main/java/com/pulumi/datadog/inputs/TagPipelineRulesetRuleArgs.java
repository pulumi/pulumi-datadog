// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.TagPipelineRulesetRuleMappingArgs;
import com.pulumi.datadog.inputs.TagPipelineRulesetRuleQueryArgs;
import com.pulumi.datadog.inputs.TagPipelineRulesetRuleReferenceTableArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagPipelineRulesetRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final TagPipelineRulesetRuleArgs Empty = new TagPipelineRulesetRuleArgs();

    /**
     * Whether the rule is enabled.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether the rule is enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The mapping configuration for the rule.
     * 
     */
    @Import(name="mapping")
    private @Nullable Output<TagPipelineRulesetRuleMappingArgs> mapping;

    /**
     * @return The mapping configuration for the rule.
     * 
     */
    public Optional<Output<TagPipelineRulesetRuleMappingArgs>> mapping() {
        return Optional.ofNullable(this.mapping);
    }

    /**
     * Rule metadata key-value pairs.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    /**
     * @return Rule metadata key-value pairs.
     * 
     */
    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The name of the rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The query configuration for the rule.
     * 
     */
    @Import(name="query")
    private @Nullable Output<TagPipelineRulesetRuleQueryArgs> query;

    /**
     * @return The query configuration for the rule.
     * 
     */
    public Optional<Output<TagPipelineRulesetRuleQueryArgs>> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * The reference table configuration for the rule.
     * 
     */
    @Import(name="referenceTable")
    private @Nullable Output<TagPipelineRulesetRuleReferenceTableArgs> referenceTable;

    /**
     * @return The reference table configuration for the rule.
     * 
     */
    public Optional<Output<TagPipelineRulesetRuleReferenceTableArgs>> referenceTable() {
        return Optional.ofNullable(this.referenceTable);
    }

    private TagPipelineRulesetRuleArgs() {}

    private TagPipelineRulesetRuleArgs(TagPipelineRulesetRuleArgs $) {
        this.enabled = $.enabled;
        this.mapping = $.mapping;
        this.metadata = $.metadata;
        this.name = $.name;
        this.query = $.query;
        this.referenceTable = $.referenceTable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagPipelineRulesetRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagPipelineRulesetRuleArgs $;

        public Builder() {
            $ = new TagPipelineRulesetRuleArgs();
        }

        public Builder(TagPipelineRulesetRuleArgs defaults) {
            $ = new TagPipelineRulesetRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Whether the rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param mapping The mapping configuration for the rule.
         * 
         * @return builder
         * 
         */
        public Builder mapping(@Nullable Output<TagPipelineRulesetRuleMappingArgs> mapping) {
            $.mapping = mapping;
            return this;
        }

        /**
         * @param mapping The mapping configuration for the rule.
         * 
         * @return builder
         * 
         */
        public Builder mapping(TagPipelineRulesetRuleMappingArgs mapping) {
            return mapping(Output.of(mapping));
        }

        /**
         * @param metadata Rule metadata key-value pairs.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Rule metadata key-value pairs.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param name The name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param query The query configuration for the rule.
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<TagPipelineRulesetRuleQueryArgs> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query The query configuration for the rule.
         * 
         * @return builder
         * 
         */
        public Builder query(TagPipelineRulesetRuleQueryArgs query) {
            return query(Output.of(query));
        }

        /**
         * @param referenceTable The reference table configuration for the rule.
         * 
         * @return builder
         * 
         */
        public Builder referenceTable(@Nullable Output<TagPipelineRulesetRuleReferenceTableArgs> referenceTable) {
            $.referenceTable = referenceTable;
            return this;
        }

        /**
         * @param referenceTable The reference table configuration for the rule.
         * 
         * @return builder
         * 
         */
        public Builder referenceTable(TagPipelineRulesetRuleReferenceTableArgs referenceTable) {
            return referenceTable(Output.of(referenceTable));
        }

        public TagPipelineRulesetRuleArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("TagPipelineRulesetRuleArgs", "enabled");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("TagPipelineRulesetRuleArgs", "name");
            }
            return $;
        }
    }

}
