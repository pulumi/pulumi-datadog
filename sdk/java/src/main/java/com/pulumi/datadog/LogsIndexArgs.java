// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.LogsIndexExclusionFilterArgs;
import com.pulumi.datadog.inputs.LogsIndexFilterArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogsIndexArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogsIndexArgs Empty = new LogsIndexArgs();

    /**
     * The number of log events you can send in this index per day before you are rate-limited.
     * 
     */
    @Import(name="dailyLimit")
    private @Nullable Output<Integer> dailyLimit;

    /**
     * @return The number of log events you can send in this index per day before you are rate-limited.
     * 
     */
    public Optional<Output<Integer>> dailyLimit() {
        return Optional.ofNullable(this.dailyLimit);
    }

    /**
     * If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index&#39;s current daily_limit is maintained.
     * 
     */
    @Import(name="disableDailyLimit")
    private @Nullable Output<Boolean> disableDailyLimit;

    /**
     * @return If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index&#39;s current daily_limit is maintained.
     * 
     */
    public Optional<Output<Boolean>> disableDailyLimit() {
        return Optional.ofNullable(this.disableDailyLimit);
    }

    /**
     * List of exclusion filters.
     * 
     */
    @Import(name="exclusionFilters")
    private @Nullable Output<List<LogsIndexExclusionFilterArgs>> exclusionFilters;

    /**
     * @return List of exclusion filters.
     * 
     */
    public Optional<Output<List<LogsIndexExclusionFilterArgs>>> exclusionFilters() {
        return Optional.ofNullable(this.exclusionFilters);
    }

    /**
     * Logs filter
     * 
     */
    @Import(name="filters", required=true)
    private Output<List<LogsIndexFilterArgs>> filters;

    /**
     * @return Logs filter
     * 
     */
    public Output<List<LogsIndexFilterArgs>> filters() {
        return this.filters;
    }

    /**
     * The name of the exclusion filter.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the exclusion filter.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The number of days before logs are deleted from this index.
     * 
     */
    @Import(name="retentionDays")
    private @Nullable Output<Integer> retentionDays;

    /**
     * @return The number of days before logs are deleted from this index.
     * 
     */
    public Optional<Output<Integer>> retentionDays() {
        return Optional.ofNullable(this.retentionDays);
    }

    private LogsIndexArgs() {}

    private LogsIndexArgs(LogsIndexArgs $) {
        this.dailyLimit = $.dailyLimit;
        this.disableDailyLimit = $.disableDailyLimit;
        this.exclusionFilters = $.exclusionFilters;
        this.filters = $.filters;
        this.name = $.name;
        this.retentionDays = $.retentionDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogsIndexArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogsIndexArgs $;

        public Builder() {
            $ = new LogsIndexArgs();
        }

        public Builder(LogsIndexArgs defaults) {
            $ = new LogsIndexArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dailyLimit The number of log events you can send in this index per day before you are rate-limited.
         * 
         * @return builder
         * 
         */
        public Builder dailyLimit(@Nullable Output<Integer> dailyLimit) {
            $.dailyLimit = dailyLimit;
            return this;
        }

        /**
         * @param dailyLimit The number of log events you can send in this index per day before you are rate-limited.
         * 
         * @return builder
         * 
         */
        public Builder dailyLimit(Integer dailyLimit) {
            return dailyLimit(Output.of(dailyLimit));
        }

        /**
         * @param disableDailyLimit If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index&#39;s current daily_limit is maintained.
         * 
         * @return builder
         * 
         */
        public Builder disableDailyLimit(@Nullable Output<Boolean> disableDailyLimit) {
            $.disableDailyLimit = disableDailyLimit;
            return this;
        }

        /**
         * @param disableDailyLimit If true, sets the daily*limit value to null and the index is not limited on a daily basis (any specified daily*limit value in the request is ignored). If false or omitted, the index&#39;s current daily_limit is maintained.
         * 
         * @return builder
         * 
         */
        public Builder disableDailyLimit(Boolean disableDailyLimit) {
            return disableDailyLimit(Output.of(disableDailyLimit));
        }

        /**
         * @param exclusionFilters List of exclusion filters.
         * 
         * @return builder
         * 
         */
        public Builder exclusionFilters(@Nullable Output<List<LogsIndexExclusionFilterArgs>> exclusionFilters) {
            $.exclusionFilters = exclusionFilters;
            return this;
        }

        /**
         * @param exclusionFilters List of exclusion filters.
         * 
         * @return builder
         * 
         */
        public Builder exclusionFilters(List<LogsIndexExclusionFilterArgs> exclusionFilters) {
            return exclusionFilters(Output.of(exclusionFilters));
        }

        /**
         * @param exclusionFilters List of exclusion filters.
         * 
         * @return builder
         * 
         */
        public Builder exclusionFilters(LogsIndexExclusionFilterArgs... exclusionFilters) {
            return exclusionFilters(List.of(exclusionFilters));
        }

        /**
         * @param filters Logs filter
         * 
         * @return builder
         * 
         */
        public Builder filters(Output<List<LogsIndexFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Logs filter
         * 
         * @return builder
         * 
         */
        public Builder filters(List<LogsIndexFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters Logs filter
         * 
         * @return builder
         * 
         */
        public Builder filters(LogsIndexFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param name The name of the exclusion filter.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the exclusion filter.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param retentionDays The number of days before logs are deleted from this index.
         * 
         * @return builder
         * 
         */
        public Builder retentionDays(@Nullable Output<Integer> retentionDays) {
            $.retentionDays = retentionDays;
            return this;
        }

        /**
         * @param retentionDays The number of days before logs are deleted from this index.
         * 
         * @return builder
         * 
         */
        public Builder retentionDays(Integer retentionDays) {
            return retentionDays(Output.of(retentionDays));
        }

        public LogsIndexArgs build() {
            $.filters = Objects.requireNonNull($.filters, "expected parameter 'filters' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
