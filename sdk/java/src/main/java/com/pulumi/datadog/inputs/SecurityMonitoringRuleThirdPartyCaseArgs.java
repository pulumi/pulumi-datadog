// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityMonitoringRuleThirdPartyCaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityMonitoringRuleThirdPartyCaseArgs Empty = new SecurityMonitoringRuleThirdPartyCaseArgs();

    /**
     * Name of the case.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the case.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Notification targets for each rule case.
     * 
     */
    @Import(name="notifications")
    private @Nullable Output<List<String>> notifications;

    /**
     * @return Notification targets for each rule case.
     * 
     */
    public Optional<Output<List<String>>> notifications() {
        return Optional.ofNullable(this.notifications);
    }

    /**
     * A query to associate a third-party event to this case.
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return A query to associate a third-party event to this case.
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * Severity of the Security Signal. Valid values are `info`, `low`, `medium`, `high`, `critical`.
     * 
     */
    @Import(name="status", required=true)
    private Output<String> status;

    /**
     * @return Severity of the Security Signal. Valid values are `info`, `low`, `medium`, `high`, `critical`.
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    private SecurityMonitoringRuleThirdPartyCaseArgs() {}

    private SecurityMonitoringRuleThirdPartyCaseArgs(SecurityMonitoringRuleThirdPartyCaseArgs $) {
        this.name = $.name;
        this.notifications = $.notifications;
        this.query = $.query;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityMonitoringRuleThirdPartyCaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityMonitoringRuleThirdPartyCaseArgs $;

        public Builder() {
            $ = new SecurityMonitoringRuleThirdPartyCaseArgs();
        }

        public Builder(SecurityMonitoringRuleThirdPartyCaseArgs defaults) {
            $ = new SecurityMonitoringRuleThirdPartyCaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the case.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the case.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notifications Notification targets for each rule case.
         * 
         * @return builder
         * 
         */
        public Builder notifications(@Nullable Output<List<String>> notifications) {
            $.notifications = notifications;
            return this;
        }

        /**
         * @param notifications Notification targets for each rule case.
         * 
         * @return builder
         * 
         */
        public Builder notifications(List<String> notifications) {
            return notifications(Output.of(notifications));
        }

        /**
         * @param notifications Notification targets for each rule case.
         * 
         * @return builder
         * 
         */
        public Builder notifications(String... notifications) {
            return notifications(List.of(notifications));
        }

        /**
         * @param query A query to associate a third-party event to this case.
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query A query to associate a third-party event to this case.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param status Severity of the Security Signal. Valid values are `info`, `low`, `medium`, `high`, `critical`.
         * 
         * @return builder
         * 
         */
        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Severity of the Security Signal. Valid values are `info`, `low`, `medium`, `high`, `critical`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public SecurityMonitoringRuleThirdPartyCaseArgs build() {
            if ($.status == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringRuleThirdPartyCaseArgs", "status");
            }
            return $;
        }
    }

}
