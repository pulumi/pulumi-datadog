// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetTeamsTeam extends com.pulumi.resources.InvokeArgs {

    public static final GetTeamsTeam Empty = new GetTeamsTeam();

    /**
     * Free-form markdown description/content for the team&#39;s homepage.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    /**
     * @return Free-form markdown description/content for the team&#39;s homepage.
     * 
     */
    public String description() {
        return this.description;
    }

    /**
     * The team&#39;s handle.
     * 
     */
    @Import(name="handle", required=true)
    private String handle;

    /**
     * @return The team&#39;s handle.
     * 
     */
    public String handle() {
        return this.handle;
    }

    /**
     * The team&#39;s identifier.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return The team&#39;s identifier.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * The number of links belonging to the team.
     * 
     */
    @Import(name="linkCount", required=true)
    private Integer linkCount;

    /**
     * @return The number of links belonging to the team.
     * 
     */
    public Integer linkCount() {
        return this.linkCount;
    }

    /**
     * The name of the team.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the team.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * A brief summary of the team, derived from the `description`.
     * 
     */
    @Import(name="summary", required=true)
    private String summary;

    /**
     * @return A brief summary of the team, derived from the `description`.
     * 
     */
    public String summary() {
        return this.summary;
    }

    /**
     * The number of users belonging to the team.
     * 
     */
    @Import(name="userCount", required=true)
    private Integer userCount;

    /**
     * @return The number of users belonging to the team.
     * 
     */
    public Integer userCount() {
        return this.userCount;
    }

    private GetTeamsTeam() {}

    private GetTeamsTeam(GetTeamsTeam $) {
        this.description = $.description;
        this.handle = $.handle;
        this.id = $.id;
        this.linkCount = $.linkCount;
        this.name = $.name;
        this.summary = $.summary;
        this.userCount = $.userCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTeamsTeam defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTeamsTeam $;

        public Builder() {
            $ = new GetTeamsTeam();
        }

        public Builder(GetTeamsTeam defaults) {
            $ = new GetTeamsTeam(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Free-form markdown description/content for the team&#39;s homepage.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            $.description = description;
            return this;
        }

        /**
         * @param handle The team&#39;s handle.
         * 
         * @return builder
         * 
         */
        public Builder handle(String handle) {
            $.handle = handle;
            return this;
        }

        /**
         * @param id The team&#39;s identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param linkCount The number of links belonging to the team.
         * 
         * @return builder
         * 
         */
        public Builder linkCount(Integer linkCount) {
            $.linkCount = linkCount;
            return this;
        }

        /**
         * @param name The name of the team.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param summary A brief summary of the team, derived from the `description`.
         * 
         * @return builder
         * 
         */
        public Builder summary(String summary) {
            $.summary = summary;
            return this;
        }

        /**
         * @param userCount The number of users belonging to the team.
         * 
         * @return builder
         * 
         */
        public Builder userCount(Integer userCount) {
            $.userCount = userCount;
            return this;
        }

        public GetTeamsTeam build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("GetTeamsTeam", "description");
            }
            if ($.handle == null) {
                throw new MissingRequiredPropertyException("GetTeamsTeam", "handle");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetTeamsTeam", "id");
            }
            if ($.linkCount == null) {
                throw new MissingRequiredPropertyException("GetTeamsTeam", "linkCount");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetTeamsTeam", "name");
            }
            if ($.summary == null) {
                throw new MissingRequiredPropertyException("GetTeamsTeam", "summary");
            }
            if ($.userCount == null) {
                throw new MissingRequiredPropertyException("GetTeamsTeam", "userCount");
            }
            return $;
        }
    }

}
