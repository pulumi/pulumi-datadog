// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigProcessorsParseGrokRuleMatchRuleArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigProcessorsParseGrokRuleSupportRuleArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigProcessorsParseGrokRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigProcessorsParseGrokRuleArgs Empty = new ObservabilityPipelineConfigProcessorsParseGrokRuleArgs();

    /**
     * A list of Grok parsing rules that define how to extract fields from the source field. Each rule must contain a name and a valid Grok pattern.
     * 
     */
    @Import(name="matchRules")
    private @Nullable Output<List<ObservabilityPipelineConfigProcessorsParseGrokRuleMatchRuleArgs>> matchRules;

    /**
     * @return A list of Grok parsing rules that define how to extract fields from the source field. Each rule must contain a name and a valid Grok pattern.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigProcessorsParseGrokRuleMatchRuleArgs>>> matchRules() {
        return Optional.ofNullable(this.matchRules);
    }

    /**
     * The name of the field in the log event to apply the Grok rules to.
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return The name of the field in the log event to apply the Grok rules to.
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    /**
     * A list of helper Grok rules that can be referenced by the parsing rules.
     * 
     */
    @Import(name="supportRules")
    private @Nullable Output<List<ObservabilityPipelineConfigProcessorsParseGrokRuleSupportRuleArgs>> supportRules;

    /**
     * @return A list of helper Grok rules that can be referenced by the parsing rules.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigProcessorsParseGrokRuleSupportRuleArgs>>> supportRules() {
        return Optional.ofNullable(this.supportRules);
    }

    private ObservabilityPipelineConfigProcessorsParseGrokRuleArgs() {}

    private ObservabilityPipelineConfigProcessorsParseGrokRuleArgs(ObservabilityPipelineConfigProcessorsParseGrokRuleArgs $) {
        this.matchRules = $.matchRules;
        this.source = $.source;
        this.supportRules = $.supportRules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigProcessorsParseGrokRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigProcessorsParseGrokRuleArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigProcessorsParseGrokRuleArgs();
        }

        public Builder(ObservabilityPipelineConfigProcessorsParseGrokRuleArgs defaults) {
            $ = new ObservabilityPipelineConfigProcessorsParseGrokRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param matchRules A list of Grok parsing rules that define how to extract fields from the source field. Each rule must contain a name and a valid Grok pattern.
         * 
         * @return builder
         * 
         */
        public Builder matchRules(@Nullable Output<List<ObservabilityPipelineConfigProcessorsParseGrokRuleMatchRuleArgs>> matchRules) {
            $.matchRules = matchRules;
            return this;
        }

        /**
         * @param matchRules A list of Grok parsing rules that define how to extract fields from the source field. Each rule must contain a name and a valid Grok pattern.
         * 
         * @return builder
         * 
         */
        public Builder matchRules(List<ObservabilityPipelineConfigProcessorsParseGrokRuleMatchRuleArgs> matchRules) {
            return matchRules(Output.of(matchRules));
        }

        /**
         * @param matchRules A list of Grok parsing rules that define how to extract fields from the source field. Each rule must contain a name and a valid Grok pattern.
         * 
         * @return builder
         * 
         */
        public Builder matchRules(ObservabilityPipelineConfigProcessorsParseGrokRuleMatchRuleArgs... matchRules) {
            return matchRules(List.of(matchRules));
        }

        /**
         * @param source The name of the field in the log event to apply the Grok rules to.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The name of the field in the log event to apply the Grok rules to.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param supportRules A list of helper Grok rules that can be referenced by the parsing rules.
         * 
         * @return builder
         * 
         */
        public Builder supportRules(@Nullable Output<List<ObservabilityPipelineConfigProcessorsParseGrokRuleSupportRuleArgs>> supportRules) {
            $.supportRules = supportRules;
            return this;
        }

        /**
         * @param supportRules A list of helper Grok rules that can be referenced by the parsing rules.
         * 
         * @return builder
         * 
         */
        public Builder supportRules(List<ObservabilityPipelineConfigProcessorsParseGrokRuleSupportRuleArgs> supportRules) {
            return supportRules(Output.of(supportRules));
        }

        /**
         * @param supportRules A list of helper Grok rules that can be referenced by the parsing rules.
         * 
         * @return builder
         * 
         */
        public Builder supportRules(ObservabilityPipelineConfigProcessorsParseGrokRuleSupportRuleArgs... supportRules) {
            return supportRules(List.of(supportRules));
        }

        public ObservabilityPipelineConfigProcessorsParseGrokRuleArgs build() {
            if ($.source == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsParseGrokRuleArgs", "source");
            }
            return $;
        }
    }

}
