// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesHttpClientTlsArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigSourcesHttpClientArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigSourcesHttpClientArgs Empty = new ObservabilityPipelineConfigSourcesHttpClientArgs();

    /**
     * Optional authentication strategy for HTTP requests.
     * 
     */
    @Import(name="authStrategy")
    private @Nullable Output<String> authStrategy;

    /**
     * @return Optional authentication strategy for HTTP requests.
     * 
     */
    public Optional<Output<String>> authStrategy() {
        return Optional.ofNullable(this.authStrategy);
    }

    /**
     * The decoding format used to interpret incoming logs.
     * 
     */
    @Import(name="decoding", required=true)
    private Output<String> decoding;

    /**
     * @return The decoding format used to interpret incoming logs.
     * 
     */
    public Output<String> decoding() {
        return this.decoding;
    }

    /**
     * The unique identifier for this component. Used to reference this component in other parts of the pipeline (e.g., as input to downstream components).
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique identifier for this component. Used to reference this component in other parts of the pipeline (e.g., as input to downstream components).
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The interval (in seconds) between HTTP scrape requests.
     * 
     */
    @Import(name="scrapeIntervalSecs")
    private @Nullable Output<Integer> scrapeIntervalSecs;

    /**
     * @return The interval (in seconds) between HTTP scrape requests.
     * 
     */
    public Optional<Output<Integer>> scrapeIntervalSecs() {
        return Optional.ofNullable(this.scrapeIntervalSecs);
    }

    /**
     * The timeout (in seconds) for each scrape request.
     * 
     */
    @Import(name="scrapeTimeoutSecs")
    private @Nullable Output<Integer> scrapeTimeoutSecs;

    /**
     * @return The timeout (in seconds) for each scrape request.
     * 
     */
    public Optional<Output<Integer>> scrapeTimeoutSecs() {
        return Optional.ofNullable(this.scrapeTimeoutSecs);
    }

    /**
     * Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    @Import(name="tls")
    private @Nullable Output<ObservabilityPipelineConfigSourcesHttpClientTlsArgs> tls;

    /**
     * @return Configuration for enabling TLS encryption between the pipeline component and external services.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigSourcesHttpClientTlsArgs>> tls() {
        return Optional.ofNullable(this.tls);
    }

    private ObservabilityPipelineConfigSourcesHttpClientArgs() {}

    private ObservabilityPipelineConfigSourcesHttpClientArgs(ObservabilityPipelineConfigSourcesHttpClientArgs $) {
        this.authStrategy = $.authStrategy;
        this.decoding = $.decoding;
        this.id = $.id;
        this.scrapeIntervalSecs = $.scrapeIntervalSecs;
        this.scrapeTimeoutSecs = $.scrapeTimeoutSecs;
        this.tls = $.tls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigSourcesHttpClientArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigSourcesHttpClientArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigSourcesHttpClientArgs();
        }

        public Builder(ObservabilityPipelineConfigSourcesHttpClientArgs defaults) {
            $ = new ObservabilityPipelineConfigSourcesHttpClientArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authStrategy Optional authentication strategy for HTTP requests.
         * 
         * @return builder
         * 
         */
        public Builder authStrategy(@Nullable Output<String> authStrategy) {
            $.authStrategy = authStrategy;
            return this;
        }

        /**
         * @param authStrategy Optional authentication strategy for HTTP requests.
         * 
         * @return builder
         * 
         */
        public Builder authStrategy(String authStrategy) {
            return authStrategy(Output.of(authStrategy));
        }

        /**
         * @param decoding The decoding format used to interpret incoming logs.
         * 
         * @return builder
         * 
         */
        public Builder decoding(Output<String> decoding) {
            $.decoding = decoding;
            return this;
        }

        /**
         * @param decoding The decoding format used to interpret incoming logs.
         * 
         * @return builder
         * 
         */
        public Builder decoding(String decoding) {
            return decoding(Output.of(decoding));
        }

        /**
         * @param id The unique identifier for this component. Used to reference this component in other parts of the pipeline (e.g., as input to downstream components).
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier for this component. Used to reference this component in other parts of the pipeline (e.g., as input to downstream components).
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param scrapeIntervalSecs The interval (in seconds) between HTTP scrape requests.
         * 
         * @return builder
         * 
         */
        public Builder scrapeIntervalSecs(@Nullable Output<Integer> scrapeIntervalSecs) {
            $.scrapeIntervalSecs = scrapeIntervalSecs;
            return this;
        }

        /**
         * @param scrapeIntervalSecs The interval (in seconds) between HTTP scrape requests.
         * 
         * @return builder
         * 
         */
        public Builder scrapeIntervalSecs(Integer scrapeIntervalSecs) {
            return scrapeIntervalSecs(Output.of(scrapeIntervalSecs));
        }

        /**
         * @param scrapeTimeoutSecs The timeout (in seconds) for each scrape request.
         * 
         * @return builder
         * 
         */
        public Builder scrapeTimeoutSecs(@Nullable Output<Integer> scrapeTimeoutSecs) {
            $.scrapeTimeoutSecs = scrapeTimeoutSecs;
            return this;
        }

        /**
         * @param scrapeTimeoutSecs The timeout (in seconds) for each scrape request.
         * 
         * @return builder
         * 
         */
        public Builder scrapeTimeoutSecs(Integer scrapeTimeoutSecs) {
            return scrapeTimeoutSecs(Output.of(scrapeTimeoutSecs));
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(@Nullable Output<ObservabilityPipelineConfigSourcesHttpClientTlsArgs> tls) {
            $.tls = tls;
            return this;
        }

        /**
         * @param tls Configuration for enabling TLS encryption between the pipeline component and external services.
         * 
         * @return builder
         * 
         */
        public Builder tls(ObservabilityPipelineConfigSourcesHttpClientTlsArgs tls) {
            return tls(Output.of(tls));
        }

        public ObservabilityPipelineConfigSourcesHttpClientArgs build() {
            if ($.decoding == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigSourcesHttpClientArgs", "decoding");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigSourcesHttpClientArgs", "id");
            }
            return $;
        }
    }

}
