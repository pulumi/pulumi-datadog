// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetQueryTableDefinitionRequestTextFormatTextFormatReplaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetQueryTableDefinitionRequestTextFormatTextFormatReplaceArgs Empty = new DashboardWidgetQueryTableDefinitionRequestTextFormatTextFormatReplaceArgs();

    /**
     * Text that will be replaced. Must be used with type `substring`.
     * 
     */
    @Import(name="substring")
    private @Nullable Output<String> substring;

    /**
     * @return Text that will be replaced. Must be used with type `substring`.
     * 
     */
    public Optional<Output<String>> substring() {
        return Optional.ofNullable(this.substring);
    }

    /**
     * Table widget text format replace all type.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Table widget text format replace all type.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Table Widget Match String.
     * 
     */
    @Import(name="with", required=true)
    private Output<String> with;

    /**
     * @return Table Widget Match String.
     * 
     */
    public Output<String> with() {
        return this.with;
    }

    private DashboardWidgetQueryTableDefinitionRequestTextFormatTextFormatReplaceArgs() {}

    private DashboardWidgetQueryTableDefinitionRequestTextFormatTextFormatReplaceArgs(DashboardWidgetQueryTableDefinitionRequestTextFormatTextFormatReplaceArgs $) {
        this.substring = $.substring;
        this.type = $.type;
        this.with = $.with;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetQueryTableDefinitionRequestTextFormatTextFormatReplaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetQueryTableDefinitionRequestTextFormatTextFormatReplaceArgs $;

        public Builder() {
            $ = new DashboardWidgetQueryTableDefinitionRequestTextFormatTextFormatReplaceArgs();
        }

        public Builder(DashboardWidgetQueryTableDefinitionRequestTextFormatTextFormatReplaceArgs defaults) {
            $ = new DashboardWidgetQueryTableDefinitionRequestTextFormatTextFormatReplaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param substring Text that will be replaced. Must be used with type `substring`.
         * 
         * @return builder
         * 
         */
        public Builder substring(@Nullable Output<String> substring) {
            $.substring = substring;
            return this;
        }

        /**
         * @param substring Text that will be replaced. Must be used with type `substring`.
         * 
         * @return builder
         * 
         */
        public Builder substring(String substring) {
            return substring(Output.of(substring));
        }

        /**
         * @param type Table widget text format replace all type.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Table widget text format replace all type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param with Table Widget Match String.
         * 
         * @return builder
         * 
         */
        public Builder with(Output<String> with) {
            $.with = with;
            return this;
        }

        /**
         * @param with Table Widget Match String.
         * 
         * @return builder
         * 
         */
        public Builder with(String with) {
            return with(Output.of(with));
        }

        public DashboardWidgetQueryTableDefinitionRequestTextFormatTextFormatReplaceArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("DashboardWidgetQueryTableDefinitionRequestTextFormatTextFormatReplaceArgs", "type");
            }
            if ($.with == null) {
                throw new MissingRequiredPropertyException("DashboardWidgetQueryTableDefinitionRequestTextFormatTextFormatReplaceArgs", "with");
            }
            return $;
        }
    }

}
