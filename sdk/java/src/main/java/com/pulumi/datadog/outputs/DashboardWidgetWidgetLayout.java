// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardWidgetWidgetLayout {
    /**
     * @return The height of the widget.
     * 
     */
    private Integer height;
    /**
     * @return Whether the widget should be the first one on the second column in high density or not. Only for the new dashboard layout and only one widget in the dashboard should have this property set to `true`.
     * 
     */
    private @Nullable Boolean isColumnBreak;
    /**
     * @return Widget column width. Valid values are `auto`, `compact`, `full`.
     * 
     */
    private Integer width;
    /**
     * @return The query used for the X-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
     * 
     */
    private Integer x;
    /**
     * @return The query used for the Y-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
     * 
     */
    private Integer y;

    private DashboardWidgetWidgetLayout() {}
    /**
     * @return The height of the widget.
     * 
     */
    public Integer height() {
        return this.height;
    }
    /**
     * @return Whether the widget should be the first one on the second column in high density or not. Only for the new dashboard layout and only one widget in the dashboard should have this property set to `true`.
     * 
     */
    public Optional<Boolean> isColumnBreak() {
        return Optional.ofNullable(this.isColumnBreak);
    }
    /**
     * @return Widget column width. Valid values are `auto`, `compact`, `full`.
     * 
     */
    public Integer width() {
        return this.width;
    }
    /**
     * @return The query used for the X-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
     * 
     */
    public Integer x() {
        return this.x;
    }
    /**
     * @return The query used for the Y-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
     * 
     */
    public Integer y() {
        return this.y;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardWidgetWidgetLayout defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer height;
        private @Nullable Boolean isColumnBreak;
        private Integer width;
        private Integer x;
        private Integer y;
        public Builder() {}
        public Builder(DashboardWidgetWidgetLayout defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.height = defaults.height;
    	      this.isColumnBreak = defaults.isColumnBreak;
    	      this.width = defaults.width;
    	      this.x = defaults.x;
    	      this.y = defaults.y;
        }

        @CustomType.Setter
        public Builder height(Integer height) {
            this.height = Objects.requireNonNull(height);
            return this;
        }
        @CustomType.Setter
        public Builder isColumnBreak(@Nullable Boolean isColumnBreak) {
            this.isColumnBreak = isColumnBreak;
            return this;
        }
        @CustomType.Setter
        public Builder width(Integer width) {
            this.width = Objects.requireNonNull(width);
            return this;
        }
        @CustomType.Setter
        public Builder x(Integer x) {
            this.x = Objects.requireNonNull(x);
            return this;
        }
        @CustomType.Setter
        public Builder y(Integer y) {
            this.y = Objects.requireNonNull(y);
            return this;
        }
        public DashboardWidgetWidgetLayout build() {
            final var o = new DashboardWidgetWidgetLayout();
            o.height = height;
            o.isColumnBreak = isColumnBreak;
            o.width = width;
            o.x = x;
            o.y = y;
            return o;
        }
    }
}
