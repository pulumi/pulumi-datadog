// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardWidgetWidgetLayout {
    /**
     * @return The height of the widget.
     * 
     */
    private Integer height;
    /**
     * @return Whether the widget should be the first one on the second column in high density or not. Only one widget in the dashboard should have this property set to `true`.
     * 
     */
    private @Nullable Boolean isColumnBreak;
    /**
     * @return The width of the widget.
     * 
     */
    private Integer width;
    /**
     * @return The position of the widget on the x (horizontal) axis. Must be greater than or equal to 0.
     * 
     */
    private Integer x;
    /**
     * @return The position of the widget on the y (vertical) axis. Must be greater than or equal to 0.
     * 
     */
    private Integer y;

    private DashboardWidgetWidgetLayout() {}
    /**
     * @return The height of the widget.
     * 
     */
    public Integer height() {
        return this.height;
    }
    /**
     * @return Whether the widget should be the first one on the second column in high density or not. Only one widget in the dashboard should have this property set to `true`.
     * 
     */
    public Optional<Boolean> isColumnBreak() {
        return Optional.ofNullable(this.isColumnBreak);
    }
    /**
     * @return The width of the widget.
     * 
     */
    public Integer width() {
        return this.width;
    }
    /**
     * @return The position of the widget on the x (horizontal) axis. Must be greater than or equal to 0.
     * 
     */
    public Integer x() {
        return this.x;
    }
    /**
     * @return The position of the widget on the y (vertical) axis. Must be greater than or equal to 0.
     * 
     */
    public Integer y() {
        return this.y;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardWidgetWidgetLayout defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer height;
        private @Nullable Boolean isColumnBreak;
        private Integer width;
        private Integer x;
        private Integer y;
        public Builder() {}
        public Builder(DashboardWidgetWidgetLayout defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.height = defaults.height;
    	      this.isColumnBreak = defaults.isColumnBreak;
    	      this.width = defaults.width;
    	      this.x = defaults.x;
    	      this.y = defaults.y;
        }

        @CustomType.Setter
        public Builder height(Integer height) {
            if (height == null) {
              throw new MissingRequiredPropertyException("DashboardWidgetWidgetLayout", "height");
            }
            this.height = height;
            return this;
        }
        @CustomType.Setter
        public Builder isColumnBreak(@Nullable Boolean isColumnBreak) {

            this.isColumnBreak = isColumnBreak;
            return this;
        }
        @CustomType.Setter
        public Builder width(Integer width) {
            if (width == null) {
              throw new MissingRequiredPropertyException("DashboardWidgetWidgetLayout", "width");
            }
            this.width = width;
            return this;
        }
        @CustomType.Setter
        public Builder x(Integer x) {
            if (x == null) {
              throw new MissingRequiredPropertyException("DashboardWidgetWidgetLayout", "x");
            }
            this.x = x;
            return this;
        }
        @CustomType.Setter
        public Builder y(Integer y) {
            if (y == null) {
              throw new MissingRequiredPropertyException("DashboardWidgetWidgetLayout", "y");
            }
            this.y = y;
            return this;
        }
        public DashboardWidgetWidgetLayout build() {
            final var _resultValue = new DashboardWidgetWidgetLayout();
            _resultValue.height = height;
            _resultValue.isColumnBreak = isColumnBreak;
            _resultValue.width = width;
            _resultValue.x = x;
            _resultValue.y = y;
            return _resultValue;
        }
    }
}
