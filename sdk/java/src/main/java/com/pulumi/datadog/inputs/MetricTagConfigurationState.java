// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.MetricTagConfigurationAggregationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricTagConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final MetricTagConfigurationState Empty = new MetricTagConfigurationState();

    /**
     * A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metric_type` of count, rate, or gauge.
     * 
     */
    @Import(name="aggregations")
    private @Nullable Output<List<MetricTagConfigurationAggregationArgs>> aggregations;

    /**
     * @return A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metric_type` of count, rate, or gauge.
     * 
     */
    public Optional<Output<List<MetricTagConfigurationAggregationArgs>>> aggregations() {
        return Optional.ofNullable(this.aggregations);
    }

    /**
     * Toggle to include/exclude tags as queryable for your metric. Can only be applied to metrics that have one or more tags configured. Defaults to `false`.
     * 
     */
    @Import(name="excludeTagsMode")
    private @Nullable Output<Boolean> excludeTagsMode;

    /**
     * @return Toggle to include/exclude tags as queryable for your metric. Can only be applied to metrics that have one or more tags configured. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> excludeTagsMode() {
        return Optional.ofNullable(this.excludeTagsMode);
    }

    /**
     * Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metric_type` of distribution.
     * 
     */
    @Import(name="includePercentiles")
    private @Nullable Output<Boolean> includePercentiles;

    /**
     * @return Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metric_type` of distribution.
     * 
     */
    public Optional<Output<Boolean>> includePercentiles() {
        return Optional.ofNullable(this.includePercentiles);
    }

    /**
     * The metric name for this resource.
     * 
     */
    @Import(name="metricName")
    private @Nullable Output<String> metricName;

    /**
     * @return The metric name for this resource.
     * 
     */
    public Optional<Output<String>> metricName() {
        return Optional.ofNullable(this.metricName);
    }

    /**
     * The metric&#39;s type. This field can&#39;t be updated after creation. Valid values are `gauge`, `count`, `rate`, `distribution`.
     * 
     */
    @Import(name="metricType")
    private @Nullable Output<String> metricType;

    /**
     * @return The metric&#39;s type. This field can&#39;t be updated after creation. Valid values are `gauge`, `count`, `rate`, `distribution`.
     * 
     */
    public Optional<Output<String>> metricType() {
        return Optional.ofNullable(this.metricType);
    }

    /**
     * A list of tag keys that will be queryable for your metric.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of tag keys that will be queryable for your metric.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private MetricTagConfigurationState() {}

    private MetricTagConfigurationState(MetricTagConfigurationState $) {
        this.aggregations = $.aggregations;
        this.excludeTagsMode = $.excludeTagsMode;
        this.includePercentiles = $.includePercentiles;
        this.metricName = $.metricName;
        this.metricType = $.metricType;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricTagConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricTagConfigurationState $;

        public Builder() {
            $ = new MetricTagConfigurationState();
        }

        public Builder(MetricTagConfigurationState defaults) {
            $ = new MetricTagConfigurationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregations A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metric_type` of count, rate, or gauge.
         * 
         * @return builder
         * 
         */
        public Builder aggregations(@Nullable Output<List<MetricTagConfigurationAggregationArgs>> aggregations) {
            $.aggregations = aggregations;
            return this;
        }

        /**
         * @param aggregations A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metric_type` of count, rate, or gauge.
         * 
         * @return builder
         * 
         */
        public Builder aggregations(List<MetricTagConfigurationAggregationArgs> aggregations) {
            return aggregations(Output.of(aggregations));
        }

        /**
         * @param aggregations A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metric_type` of count, rate, or gauge.
         * 
         * @return builder
         * 
         */
        public Builder aggregations(MetricTagConfigurationAggregationArgs... aggregations) {
            return aggregations(List.of(aggregations));
        }

        /**
         * @param excludeTagsMode Toggle to include/exclude tags as queryable for your metric. Can only be applied to metrics that have one or more tags configured. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder excludeTagsMode(@Nullable Output<Boolean> excludeTagsMode) {
            $.excludeTagsMode = excludeTagsMode;
            return this;
        }

        /**
         * @param excludeTagsMode Toggle to include/exclude tags as queryable for your metric. Can only be applied to metrics that have one or more tags configured. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder excludeTagsMode(Boolean excludeTagsMode) {
            return excludeTagsMode(Output.of(excludeTagsMode));
        }

        /**
         * @param includePercentiles Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metric_type` of distribution.
         * 
         * @return builder
         * 
         */
        public Builder includePercentiles(@Nullable Output<Boolean> includePercentiles) {
            $.includePercentiles = includePercentiles;
            return this;
        }

        /**
         * @param includePercentiles Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metric_type` of distribution.
         * 
         * @return builder
         * 
         */
        public Builder includePercentiles(Boolean includePercentiles) {
            return includePercentiles(Output.of(includePercentiles));
        }

        /**
         * @param metricName The metric name for this resource.
         * 
         * @return builder
         * 
         */
        public Builder metricName(@Nullable Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param metricName The metric name for this resource.
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        /**
         * @param metricType The metric&#39;s type. This field can&#39;t be updated after creation. Valid values are `gauge`, `count`, `rate`, `distribution`.
         * 
         * @return builder
         * 
         */
        public Builder metricType(@Nullable Output<String> metricType) {
            $.metricType = metricType;
            return this;
        }

        /**
         * @param metricType The metric&#39;s type. This field can&#39;t be updated after creation. Valid values are `gauge`, `count`, `rate`, `distribution`.
         * 
         * @return builder
         * 
         */
        public Builder metricType(String metricType) {
            return metricType(Output.of(metricType));
        }

        /**
         * @param tags A list of tag keys that will be queryable for your metric.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tag keys that will be queryable for your metric.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of tag keys that will be queryable for your metric.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public MetricTagConfigurationState build() {
            return $;
        }
    }

}
