// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamLinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final TeamLinkArgs Empty = new TeamLinkArgs();

    /**
     * The link&#39;s label.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return The link&#39;s label.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * The link&#39;s position, used to sort links for the team.
     * 
     */
    @Import(name="position")
    private @Nullable Output<Integer> position;

    /**
     * @return The link&#39;s position, used to sort links for the team.
     * 
     */
    public Optional<Output<Integer>> position() {
        return Optional.ofNullable(this.position);
    }

    /**
     * ID of the team the link is associated with.
     * 
     */
    @Import(name="teamId", required=true)
    private Output<String> teamId;

    /**
     * @return ID of the team the link is associated with.
     * 
     */
    public Output<String> teamId() {
        return this.teamId;
    }

    /**
     * The URL for the link.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return The URL for the link.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    private TeamLinkArgs() {}

    private TeamLinkArgs(TeamLinkArgs $) {
        this.label = $.label;
        this.position = $.position;
        this.teamId = $.teamId;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamLinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamLinkArgs $;

        public Builder() {
            $ = new TeamLinkArgs();
        }

        public Builder(TeamLinkArgs defaults) {
            $ = new TeamLinkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param label The link&#39;s label.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The link&#39;s label.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param position The link&#39;s position, used to sort links for the team.
         * 
         * @return builder
         * 
         */
        public Builder position(@Nullable Output<Integer> position) {
            $.position = position;
            return this;
        }

        /**
         * @param position The link&#39;s position, used to sort links for the team.
         * 
         * @return builder
         * 
         */
        public Builder position(Integer position) {
            return position(Output.of(position));
        }

        /**
         * @param teamId ID of the team the link is associated with.
         * 
         * @return builder
         * 
         */
        public Builder teamId(Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId ID of the team the link is associated with.
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        /**
         * @param url The URL for the link.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL for the link.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public TeamLinkArgs build() {
            if ($.label == null) {
                throw new MissingRequiredPropertyException("TeamLinkArgs", "label");
            }
            if ($.teamId == null) {
                throw new MissingRequiredPropertyException("TeamLinkArgs", "teamId");
            }
            if ($.url == null) {
                throw new MissingRequiredPropertyException("TeamLinkArgs", "url");
            }
            return $;
        }
    }

}
