// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ObservabilityPipelineConfigDestinationsNewRelicArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigDestinationsNewRelicArgs Empty = new ObservabilityPipelineConfigDestinationsNewRelicArgs();

    /**
     * The unique identifier for this component.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique identifier for this component.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    @Import(name="inputs", required=true)
    private Output<List<String>> inputs;

    /**
     * @return A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    public Output<List<String>> inputs() {
        return this.inputs;
    }

    /**
     * The New Relic region.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The New Relic region.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    private ObservabilityPipelineConfigDestinationsNewRelicArgs() {}

    private ObservabilityPipelineConfigDestinationsNewRelicArgs(ObservabilityPipelineConfigDestinationsNewRelicArgs $) {
        this.id = $.id;
        this.inputs = $.inputs;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigDestinationsNewRelicArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigDestinationsNewRelicArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigDestinationsNewRelicArgs();
        }

        public Builder(ObservabilityPipelineConfigDestinationsNewRelicArgs defaults) {
            $ = new ObservabilityPipelineConfigDestinationsNewRelicArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The unique identifier for this component.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier for this component.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(Output<List<String>> inputs) {
            $.inputs = inputs;
            return this;
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(List<String> inputs) {
            return inputs(Output.of(inputs));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }

        /**
         * @param region The New Relic region.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The New Relic region.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public ObservabilityPipelineConfigDestinationsNewRelicArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsNewRelicArgs", "id");
            }
            if ($.inputs == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsNewRelicArgs", "inputs");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigDestinationsNewRelicArgs", "region");
            }
            return $;
        }
    }

}
