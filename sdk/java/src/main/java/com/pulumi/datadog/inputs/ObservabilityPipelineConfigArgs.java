// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigDestinationsArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigProcessorsArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigSourcesArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigArgs Empty = new ObservabilityPipelineConfigArgs();

    /**
     * List of destinations.
     * 
     */
    @Import(name="destinations")
    private @Nullable Output<ObservabilityPipelineConfigDestinationsArgs> destinations;

    /**
     * @return List of destinations.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigDestinationsArgs>> destinations() {
        return Optional.ofNullable(this.destinations);
    }

    /**
     * List of processors.
     * 
     */
    @Import(name="processors")
    private @Nullable Output<ObservabilityPipelineConfigProcessorsArgs> processors;

    /**
     * @return List of processors.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigProcessorsArgs>> processors() {
        return Optional.ofNullable(this.processors);
    }

    /**
     * List of sources.
     * 
     */
    @Import(name="sources")
    private @Nullable Output<ObservabilityPipelineConfigSourcesArgs> sources;

    /**
     * @return List of sources.
     * 
     */
    public Optional<Output<ObservabilityPipelineConfigSourcesArgs>> sources() {
        return Optional.ofNullable(this.sources);
    }

    private ObservabilityPipelineConfigArgs() {}

    private ObservabilityPipelineConfigArgs(ObservabilityPipelineConfigArgs $) {
        this.destinations = $.destinations;
        this.processors = $.processors;
        this.sources = $.sources;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigArgs();
        }

        public Builder(ObservabilityPipelineConfigArgs defaults) {
            $ = new ObservabilityPipelineConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinations List of destinations.
         * 
         * @return builder
         * 
         */
        public Builder destinations(@Nullable Output<ObservabilityPipelineConfigDestinationsArgs> destinations) {
            $.destinations = destinations;
            return this;
        }

        /**
         * @param destinations List of destinations.
         * 
         * @return builder
         * 
         */
        public Builder destinations(ObservabilityPipelineConfigDestinationsArgs destinations) {
            return destinations(Output.of(destinations));
        }

        /**
         * @param processors List of processors.
         * 
         * @return builder
         * 
         */
        public Builder processors(@Nullable Output<ObservabilityPipelineConfigProcessorsArgs> processors) {
            $.processors = processors;
            return this;
        }

        /**
         * @param processors List of processors.
         * 
         * @return builder
         * 
         */
        public Builder processors(ObservabilityPipelineConfigProcessorsArgs processors) {
            return processors(Output.of(processors));
        }

        /**
         * @param sources List of sources.
         * 
         * @return builder
         * 
         */
        public Builder sources(@Nullable Output<ObservabilityPipelineConfigSourcesArgs> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources List of sources.
         * 
         * @return builder
         * 
         */
        public Builder sources(ObservabilityPipelineConfigSourcesArgs sources) {
            return sources(Output.of(sources));
        }

        public ObservabilityPipelineConfigArgs build() {
            return $;
        }
    }

}
