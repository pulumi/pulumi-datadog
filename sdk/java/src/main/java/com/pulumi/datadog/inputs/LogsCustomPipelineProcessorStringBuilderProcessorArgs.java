// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogsCustomPipelineProcessorStringBuilderProcessorArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogsCustomPipelineProcessorStringBuilderProcessorArgs Empty = new LogsCustomPipelineProcessorStringBuilderProcessorArgs();

    /**
     * If the processor is enabled or not.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return If the processor is enabled or not.
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * If it replaces all missing attributes of template by an empty string.
     * 
     */
    @Import(name="isReplaceMissing")
    private @Nullable Output<Boolean> isReplaceMissing;

    /**
     * @return If it replaces all missing attributes of template by an empty string.
     * 
     */
    public Optional<Output<Boolean>> isReplaceMissing() {
        return Optional.ofNullable(this.isReplaceMissing);
    }

    /**
     * The name of the processor.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the processor.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the attribute that contains the result of the template.
     * 
     */
    @Import(name="target", required=true)
    private Output<String> target;

    /**
     * @return The name of the attribute that contains the result of the template.
     * 
     */
    public Output<String> target() {
        return this.target;
    }

    /**
     * The formula with one or more attributes and raw text.
     * 
     */
    @Import(name="template", required=true)
    private Output<String> template;

    /**
     * @return The formula with one or more attributes and raw text.
     * 
     */
    public Output<String> template() {
        return this.template;
    }

    private LogsCustomPipelineProcessorStringBuilderProcessorArgs() {}

    private LogsCustomPipelineProcessorStringBuilderProcessorArgs(LogsCustomPipelineProcessorStringBuilderProcessorArgs $) {
        this.isEnabled = $.isEnabled;
        this.isReplaceMissing = $.isReplaceMissing;
        this.name = $.name;
        this.target = $.target;
        this.template = $.template;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogsCustomPipelineProcessorStringBuilderProcessorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogsCustomPipelineProcessorStringBuilderProcessorArgs $;

        public Builder() {
            $ = new LogsCustomPipelineProcessorStringBuilderProcessorArgs();
        }

        public Builder(LogsCustomPipelineProcessorStringBuilderProcessorArgs defaults) {
            $ = new LogsCustomPipelineProcessorStringBuilderProcessorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isEnabled If the processor is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled If the processor is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param isReplaceMissing If it replaces all missing attributes of template by an empty string.
         * 
         * @return builder
         * 
         */
        public Builder isReplaceMissing(@Nullable Output<Boolean> isReplaceMissing) {
            $.isReplaceMissing = isReplaceMissing;
            return this;
        }

        /**
         * @param isReplaceMissing If it replaces all missing attributes of template by an empty string.
         * 
         * @return builder
         * 
         */
        public Builder isReplaceMissing(Boolean isReplaceMissing) {
            return isReplaceMissing(Output.of(isReplaceMissing));
        }

        /**
         * @param name The name of the processor.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the processor.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param target The name of the attribute that contains the result of the template.
         * 
         * @return builder
         * 
         */
        public Builder target(Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target The name of the attribute that contains the result of the template.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        /**
         * @param template The formula with one or more attributes and raw text.
         * 
         * @return builder
         * 
         */
        public Builder template(Output<String> template) {
            $.template = template;
            return this;
        }

        /**
         * @param template The formula with one or more attributes and raw text.
         * 
         * @return builder
         * 
         */
        public Builder template(String template) {
            return template(Output.of(template));
        }

        public LogsCustomPipelineProcessorStringBuilderProcessorArgs build() {
            if ($.target == null) {
                throw new MissingRequiredPropertyException("LogsCustomPipelineProcessorStringBuilderProcessorArgs", "target");
            }
            if ($.template == null) {
                throw new MissingRequiredPropertyException("LogsCustomPipelineProcessorStringBuilderProcessorArgs", "template");
            }
            return $;
        }
    }

}
