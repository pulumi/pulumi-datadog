// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.SecurityNotificationRuleSelectorsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityNotificationRuleState extends com.pulumi.resources.ResourceArgs {

    public static final SecurityNotificationRuleState Empty = new SecurityNotificationRuleState();

    /**
     * Indicates when this rule was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<Integer> createdAt;

    /**
     * @return Indicates when this rule was created.
     * 
     */
    public Optional<Output<Integer>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The handle of the rule creator.
     * 
     */
    @Import(name="createdByHandle")
    private @Nullable Output<String> createdByHandle;

    /**
     * @return The handle of the rule creator.
     * 
     */
    public Optional<Output<String>> createdByHandle() {
        return Optional.ofNullable(this.createdByHandle);
    }

    /**
     * The name of the rule creator.
     * 
     */
    @Import(name="createdByName")
    private @Nullable Output<String> createdByName;

    /**
     * @return The name of the rule creator.
     * 
     */
    public Optional<Output<String>> createdByName() {
        return Optional.ofNullable(this.createdByName);
    }

    /**
     * Indicates whether the rule is enabled. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Indicates whether the rule is enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Indicates when this rule was last modified.
     * 
     */
    @Import(name="modifiedAt")
    private @Nullable Output<Integer> modifiedAt;

    /**
     * @return Indicates when this rule was last modified.
     * 
     */
    public Optional<Output<Integer>> modifiedAt() {
        return Optional.ofNullable(this.modifiedAt);
    }

    /**
     * The handle of the rule last modifier.
     * 
     */
    @Import(name="modifiedByHandle")
    private @Nullable Output<String> modifiedByHandle;

    /**
     * @return The handle of the rule last modifier.
     * 
     */
    public Optional<Output<String>> modifiedByHandle() {
        return Optional.ofNullable(this.modifiedByHandle);
    }

    /**
     * The name of the rule last modifier.
     * 
     */
    @Import(name="modifiedByName")
    private @Nullable Output<String> modifiedByName;

    /**
     * @return The name of the rule last modifier.
     * 
     */
    public Optional<Output<String>> modifiedByName() {
        return Optional.ofNullable(this.modifiedByName);
    }

    /**
     * The name of the rule (must be unique).
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the rule (must be unique).
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Defines selectors to filter security issues that generate notifications.
     * 
     */
    @Import(name="selectors")
    private @Nullable Output<SecurityNotificationRuleSelectorsArgs> selectors;

    /**
     * @return Defines selectors to filter security issues that generate notifications.
     * 
     */
    public Optional<Output<SecurityNotificationRuleSelectorsArgs>> selectors() {
        return Optional.ofNullable(this.selectors);
    }

    /**
     * The list of handle targets for the notifications.
     * 
     */
    @Import(name="targets")
    private @Nullable Output<List<String>> targets;

    /**
     * @return The list of handle targets for the notifications.
     * 
     */
    public Optional<Output<List<String>>> targets() {
        return Optional.ofNullable(this.targets);
    }

    /**
     * Specifies the time period, in seconds, used to aggregate the notification. Defaults to `0`.
     * 
     */
    @Import(name="timeAggregation")
    private @Nullable Output<Integer> timeAggregation;

    /**
     * @return Specifies the time period, in seconds, used to aggregate the notification. Defaults to `0`.
     * 
     */
    public Optional<Output<Integer>> timeAggregation() {
        return Optional.ofNullable(this.timeAggregation);
    }

    /**
     * The rule version (incremented at each update).
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The rule version (incremented at each update).
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private SecurityNotificationRuleState() {}

    private SecurityNotificationRuleState(SecurityNotificationRuleState $) {
        this.createdAt = $.createdAt;
        this.createdByHandle = $.createdByHandle;
        this.createdByName = $.createdByName;
        this.enabled = $.enabled;
        this.modifiedAt = $.modifiedAt;
        this.modifiedByHandle = $.modifiedByHandle;
        this.modifiedByName = $.modifiedByName;
        this.name = $.name;
        this.selectors = $.selectors;
        this.targets = $.targets;
        this.timeAggregation = $.timeAggregation;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityNotificationRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityNotificationRuleState $;

        public Builder() {
            $ = new SecurityNotificationRuleState();
        }

        public Builder(SecurityNotificationRuleState defaults) {
            $ = new SecurityNotificationRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt Indicates when this rule was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<Integer> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Indicates when this rule was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(Integer createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param createdByHandle The handle of the rule creator.
         * 
         * @return builder
         * 
         */
        public Builder createdByHandle(@Nullable Output<String> createdByHandle) {
            $.createdByHandle = createdByHandle;
            return this;
        }

        /**
         * @param createdByHandle The handle of the rule creator.
         * 
         * @return builder
         * 
         */
        public Builder createdByHandle(String createdByHandle) {
            return createdByHandle(Output.of(createdByHandle));
        }

        /**
         * @param createdByName The name of the rule creator.
         * 
         * @return builder
         * 
         */
        public Builder createdByName(@Nullable Output<String> createdByName) {
            $.createdByName = createdByName;
            return this;
        }

        /**
         * @param createdByName The name of the rule creator.
         * 
         * @return builder
         * 
         */
        public Builder createdByName(String createdByName) {
            return createdByName(Output.of(createdByName));
        }

        /**
         * @param enabled Indicates whether the rule is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Indicates whether the rule is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param modifiedAt Indicates when this rule was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedAt(@Nullable Output<Integer> modifiedAt) {
            $.modifiedAt = modifiedAt;
            return this;
        }

        /**
         * @param modifiedAt Indicates when this rule was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedAt(Integer modifiedAt) {
            return modifiedAt(Output.of(modifiedAt));
        }

        /**
         * @param modifiedByHandle The handle of the rule last modifier.
         * 
         * @return builder
         * 
         */
        public Builder modifiedByHandle(@Nullable Output<String> modifiedByHandle) {
            $.modifiedByHandle = modifiedByHandle;
            return this;
        }

        /**
         * @param modifiedByHandle The handle of the rule last modifier.
         * 
         * @return builder
         * 
         */
        public Builder modifiedByHandle(String modifiedByHandle) {
            return modifiedByHandle(Output.of(modifiedByHandle));
        }

        /**
         * @param modifiedByName The name of the rule last modifier.
         * 
         * @return builder
         * 
         */
        public Builder modifiedByName(@Nullable Output<String> modifiedByName) {
            $.modifiedByName = modifiedByName;
            return this;
        }

        /**
         * @param modifiedByName The name of the rule last modifier.
         * 
         * @return builder
         * 
         */
        public Builder modifiedByName(String modifiedByName) {
            return modifiedByName(Output.of(modifiedByName));
        }

        /**
         * @param name The name of the rule (must be unique).
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the rule (must be unique).
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param selectors Defines selectors to filter security issues that generate notifications.
         * 
         * @return builder
         * 
         */
        public Builder selectors(@Nullable Output<SecurityNotificationRuleSelectorsArgs> selectors) {
            $.selectors = selectors;
            return this;
        }

        /**
         * @param selectors Defines selectors to filter security issues that generate notifications.
         * 
         * @return builder
         * 
         */
        public Builder selectors(SecurityNotificationRuleSelectorsArgs selectors) {
            return selectors(Output.of(selectors));
        }

        /**
         * @param targets The list of handle targets for the notifications.
         * 
         * @return builder
         * 
         */
        public Builder targets(@Nullable Output<List<String>> targets) {
            $.targets = targets;
            return this;
        }

        /**
         * @param targets The list of handle targets for the notifications.
         * 
         * @return builder
         * 
         */
        public Builder targets(List<String> targets) {
            return targets(Output.of(targets));
        }

        /**
         * @param targets The list of handle targets for the notifications.
         * 
         * @return builder
         * 
         */
        public Builder targets(String... targets) {
            return targets(List.of(targets));
        }

        /**
         * @param timeAggregation Specifies the time period, in seconds, used to aggregate the notification. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder timeAggregation(@Nullable Output<Integer> timeAggregation) {
            $.timeAggregation = timeAggregation;
            return this;
        }

        /**
         * @param timeAggregation Specifies the time period, in seconds, used to aggregate the notification. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder timeAggregation(Integer timeAggregation) {
            return timeAggregation(Output.of(timeAggregation));
        }

        /**
         * @param version The rule version (incremented at each update).
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The rule version (incremented at each update).
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public SecurityNotificationRuleState build() {
            return $;
        }
    }

}
