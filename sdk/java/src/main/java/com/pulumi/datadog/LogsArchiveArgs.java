// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.LogsArchiveAzureArchiveArgs;
import com.pulumi.datadog.inputs.LogsArchiveGcsArchiveArgs;
import com.pulumi.datadog.inputs.LogsArchiveS3ArchiveArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogsArchiveArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogsArchiveArgs Empty = new LogsArchiveArgs();

    /**
     * Definition of an azure archive.
     * 
     */
    @Import(name="azureArchive")
    private @Nullable Output<LogsArchiveAzureArchiveArgs> azureArchive;

    /**
     * @return Definition of an azure archive.
     * 
     */
    public Optional<Output<LogsArchiveAzureArchiveArgs>> azureArchive() {
        return Optional.ofNullable(this.azureArchive);
    }

    /**
     * Definition of a GCS archive.
     * 
     */
    @Import(name="gcsArchive")
    private @Nullable Output<LogsArchiveGcsArchiveArgs> gcsArchive;

    /**
     * @return Definition of a GCS archive.
     * 
     */
    public Optional<Output<LogsArchiveGcsArchiveArgs>> gcsArchive() {
        return Optional.ofNullable(this.gcsArchive);
    }

    /**
     * To store the tags in the archive, set the value `true`. If it is set to `false`, the tags will be dropped when the logs are sent to the archive. Defaults to `false`.
     * 
     */
    @Import(name="includeTags")
    private @Nullable Output<Boolean> includeTags;

    /**
     * @return To store the tags in the archive, set the value `true`. If it is set to `false`, the tags will be dropped when the logs are sent to the archive. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> includeTags() {
        return Optional.ofNullable(this.includeTags);
    }

    /**
     * Your archive name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Your archive name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The archive query/filter. Logs matching this query are included in the archive.
     * 
     */
    @Import(name="query", required=true)
    private Output<String> query;

    /**
     * @return The archive query/filter. Logs matching this query are included in the archive.
     * 
     */
    public Output<String> query() {
        return this.query;
    }

    /**
     * To limit the rehydration scan size for the archive, set a value in GB.
     * 
     */
    @Import(name="rehydrationMaxScanSizeInGb")
    private @Nullable Output<Integer> rehydrationMaxScanSizeInGb;

    /**
     * @return To limit the rehydration scan size for the archive, set a value in GB.
     * 
     */
    public Optional<Output<Integer>> rehydrationMaxScanSizeInGb() {
        return Optional.ofNullable(this.rehydrationMaxScanSizeInGb);
    }

    /**
     * An array of tags to add to rehydrated logs from an archive.
     * 
     */
    @Import(name="rehydrationTags")
    private @Nullable Output<List<String>> rehydrationTags;

    /**
     * @return An array of tags to add to rehydrated logs from an archive.
     * 
     */
    public Optional<Output<List<String>>> rehydrationTags() {
        return Optional.ofNullable(this.rehydrationTags);
    }

    /**
     * Definition of an s3 archive.
     * 
     */
    @Import(name="s3Archive")
    private @Nullable Output<LogsArchiveS3ArchiveArgs> s3Archive;

    /**
     * @return Definition of an s3 archive.
     * 
     */
    public Optional<Output<LogsArchiveS3ArchiveArgs>> s3Archive() {
        return Optional.ofNullable(this.s3Archive);
    }

    private LogsArchiveArgs() {}

    private LogsArchiveArgs(LogsArchiveArgs $) {
        this.azureArchive = $.azureArchive;
        this.gcsArchive = $.gcsArchive;
        this.includeTags = $.includeTags;
        this.name = $.name;
        this.query = $.query;
        this.rehydrationMaxScanSizeInGb = $.rehydrationMaxScanSizeInGb;
        this.rehydrationTags = $.rehydrationTags;
        this.s3Archive = $.s3Archive;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogsArchiveArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogsArchiveArgs $;

        public Builder() {
            $ = new LogsArchiveArgs();
        }

        public Builder(LogsArchiveArgs defaults) {
            $ = new LogsArchiveArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureArchive Definition of an azure archive.
         * 
         * @return builder
         * 
         */
        public Builder azureArchive(@Nullable Output<LogsArchiveAzureArchiveArgs> azureArchive) {
            $.azureArchive = azureArchive;
            return this;
        }

        /**
         * @param azureArchive Definition of an azure archive.
         * 
         * @return builder
         * 
         */
        public Builder azureArchive(LogsArchiveAzureArchiveArgs azureArchive) {
            return azureArchive(Output.of(azureArchive));
        }

        /**
         * @param gcsArchive Definition of a GCS archive.
         * 
         * @return builder
         * 
         */
        public Builder gcsArchive(@Nullable Output<LogsArchiveGcsArchiveArgs> gcsArchive) {
            $.gcsArchive = gcsArchive;
            return this;
        }

        /**
         * @param gcsArchive Definition of a GCS archive.
         * 
         * @return builder
         * 
         */
        public Builder gcsArchive(LogsArchiveGcsArchiveArgs gcsArchive) {
            return gcsArchive(Output.of(gcsArchive));
        }

        /**
         * @param includeTags To store the tags in the archive, set the value `true`. If it is set to `false`, the tags will be dropped when the logs are sent to the archive. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder includeTags(@Nullable Output<Boolean> includeTags) {
            $.includeTags = includeTags;
            return this;
        }

        /**
         * @param includeTags To store the tags in the archive, set the value `true`. If it is set to `false`, the tags will be dropped when the logs are sent to the archive. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder includeTags(Boolean includeTags) {
            return includeTags(Output.of(includeTags));
        }

        /**
         * @param name Your archive name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Your archive name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param query The archive query/filter. Logs matching this query are included in the archive.
         * 
         * @return builder
         * 
         */
        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query The archive query/filter. Logs matching this query are included in the archive.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param rehydrationMaxScanSizeInGb To limit the rehydration scan size for the archive, set a value in GB.
         * 
         * @return builder
         * 
         */
        public Builder rehydrationMaxScanSizeInGb(@Nullable Output<Integer> rehydrationMaxScanSizeInGb) {
            $.rehydrationMaxScanSizeInGb = rehydrationMaxScanSizeInGb;
            return this;
        }

        /**
         * @param rehydrationMaxScanSizeInGb To limit the rehydration scan size for the archive, set a value in GB.
         * 
         * @return builder
         * 
         */
        public Builder rehydrationMaxScanSizeInGb(Integer rehydrationMaxScanSizeInGb) {
            return rehydrationMaxScanSizeInGb(Output.of(rehydrationMaxScanSizeInGb));
        }

        /**
         * @param rehydrationTags An array of tags to add to rehydrated logs from an archive.
         * 
         * @return builder
         * 
         */
        public Builder rehydrationTags(@Nullable Output<List<String>> rehydrationTags) {
            $.rehydrationTags = rehydrationTags;
            return this;
        }

        /**
         * @param rehydrationTags An array of tags to add to rehydrated logs from an archive.
         * 
         * @return builder
         * 
         */
        public Builder rehydrationTags(List<String> rehydrationTags) {
            return rehydrationTags(Output.of(rehydrationTags));
        }

        /**
         * @param rehydrationTags An array of tags to add to rehydrated logs from an archive.
         * 
         * @return builder
         * 
         */
        public Builder rehydrationTags(String... rehydrationTags) {
            return rehydrationTags(List.of(rehydrationTags));
        }

        /**
         * @param s3Archive Definition of an s3 archive.
         * 
         * @return builder
         * 
         */
        public Builder s3Archive(@Nullable Output<LogsArchiveS3ArchiveArgs> s3Archive) {
            $.s3Archive = s3Archive;
            return this;
        }

        /**
         * @param s3Archive Definition of an s3 archive.
         * 
         * @return builder
         * 
         */
        public Builder s3Archive(LogsArchiveS3ArchiveArgs s3Archive) {
            return s3Archive(Output.of(s3Archive));
        }

        public LogsArchiveArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.query = Objects.requireNonNull($.query, "expected parameter 'query' to be non-null");
            return $;
        }
    }

}
