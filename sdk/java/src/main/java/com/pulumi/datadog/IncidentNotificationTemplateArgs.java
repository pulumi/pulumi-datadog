// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class IncidentNotificationTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final IncidentNotificationTemplateArgs Empty = new IncidentNotificationTemplateArgs();

    /**
     * The category of the notification template. Valid values are `alert`, `incident`, `recovery`.
     * 
     */
    @Import(name="category", required=true)
    private Output<String> category;

    /**
     * @return The category of the notification template. Valid values are `alert`, `incident`, `recovery`.
     * 
     */
    public Output<String> category() {
        return this.category;
    }

    /**
     * The content body of the notification template.
     * 
     */
    @Import(name="content", required=true)
    private Output<String> content;

    /**
     * @return The content body of the notification template.
     * 
     */
    public Output<String> content() {
        return this.content;
    }

    /**
     * The ID of the incident type this notification template is associated with.
     * 
     */
    @Import(name="incidentType", required=true)
    private Output<String> incidentType;

    /**
     * @return The ID of the incident type this notification template is associated with.
     * 
     */
    public Output<String> incidentType() {
        return this.incidentType;
    }

    /**
     * The name of the notification template.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the notification template.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The subject line of the notification template.
     * 
     */
    @Import(name="subject", required=true)
    private Output<String> subject;

    /**
     * @return The subject line of the notification template.
     * 
     */
    public Output<String> subject() {
        return this.subject;
    }

    private IncidentNotificationTemplateArgs() {}

    private IncidentNotificationTemplateArgs(IncidentNotificationTemplateArgs $) {
        this.category = $.category;
        this.content = $.content;
        this.incidentType = $.incidentType;
        this.name = $.name;
        this.subject = $.subject;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IncidentNotificationTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IncidentNotificationTemplateArgs $;

        public Builder() {
            $ = new IncidentNotificationTemplateArgs();
        }

        public Builder(IncidentNotificationTemplateArgs defaults) {
            $ = new IncidentNotificationTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param category The category of the notification template. Valid values are `alert`, `incident`, `recovery`.
         * 
         * @return builder
         * 
         */
        public Builder category(Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category The category of the notification template. Valid values are `alert`, `incident`, `recovery`.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param content The content body of the notification template.
         * 
         * @return builder
         * 
         */
        public Builder content(Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content The content body of the notification template.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param incidentType The ID of the incident type this notification template is associated with.
         * 
         * @return builder
         * 
         */
        public Builder incidentType(Output<String> incidentType) {
            $.incidentType = incidentType;
            return this;
        }

        /**
         * @param incidentType The ID of the incident type this notification template is associated with.
         * 
         * @return builder
         * 
         */
        public Builder incidentType(String incidentType) {
            return incidentType(Output.of(incidentType));
        }

        /**
         * @param name The name of the notification template.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the notification template.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param subject The subject line of the notification template.
         * 
         * @return builder
         * 
         */
        public Builder subject(Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject The subject line of the notification template.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        public IncidentNotificationTemplateArgs build() {
            if ($.category == null) {
                throw new MissingRequiredPropertyException("IncidentNotificationTemplateArgs", "category");
            }
            if ($.content == null) {
                throw new MissingRequiredPropertyException("IncidentNotificationTemplateArgs", "content");
            }
            if ($.incidentType == null) {
                throw new MissingRequiredPropertyException("IncidentNotificationTemplateArgs", "incidentType");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("IncidentNotificationTemplateArgs", "name");
            }
            if ($.subject == null) {
                throw new MissingRequiredPropertyException("IncidentNotificationTemplateArgs", "subject");
            }
            return $;
        }
    }

}
