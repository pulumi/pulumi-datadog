// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardWidgetTraceServiceDefinition {
    /**
     * @return The display setting to use. Valid values are `counts`, `countsAndList`, `list`.
     * 
     */
    private @Nullable String displayFormat;
    /**
     * @return APM environment.
     * 
     */
    private String env;
    /**
     * @return The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
     * 
     */
    private @Nullable String liveSpan;
    /**
     * @return APM service.
     * 
     */
    private String service;
    /**
     * @return Whether to show the latency breakdown or not.
     * 
     */
    private @Nullable Boolean showBreakdown;
    /**
     * @return Whether to show the latency distribution or not.
     * 
     */
    private @Nullable Boolean showDistribution;
    /**
     * @return Whether to show the error metrics or not.
     * 
     */
    private @Nullable Boolean showErrors;
    /**
     * @return Whether to show the hits metrics or not
     * 
     */
    private @Nullable Boolean showHits;
    /**
     * @return Whether to show the latency metrics or not.
     * 
     */
    private @Nullable Boolean showLatency;
    /**
     * @return Whether to show the resource list or not.
     * 
     */
    private @Nullable Boolean showResourceList;
    /**
     * @return The size of the widget. Valid values are `small`, `medium`, `large`.
     * 
     */
    private @Nullable String sizeFormat;
    /**
     * @return APM span name
     * 
     */
    private String spanName;
    /**
     * @return The title of the widget.
     * 
     */
    private @Nullable String title;
    /**
     * @return The alignment of the widget&#39;s title. Valid values are `center`, `left`, `right`.
     * 
     */
    private @Nullable String titleAlign;
    /**
     * @return The size of the widget&#39;s title (defaults to 16).
     * 
     */
    private @Nullable String titleSize;

    private DashboardWidgetTraceServiceDefinition() {}
    /**
     * @return The display setting to use. Valid values are `counts`, `countsAndList`, `list`.
     * 
     */
    public Optional<String> displayFormat() {
        return Optional.ofNullable(this.displayFormat);
    }
    /**
     * @return APM environment.
     * 
     */
    public String env() {
        return this.env;
    }
    /**
     * @return The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
     * 
     */
    public Optional<String> liveSpan() {
        return Optional.ofNullable(this.liveSpan);
    }
    /**
     * @return APM service.
     * 
     */
    public String service() {
        return this.service;
    }
    /**
     * @return Whether to show the latency breakdown or not.
     * 
     */
    public Optional<Boolean> showBreakdown() {
        return Optional.ofNullable(this.showBreakdown);
    }
    /**
     * @return Whether to show the latency distribution or not.
     * 
     */
    public Optional<Boolean> showDistribution() {
        return Optional.ofNullable(this.showDistribution);
    }
    /**
     * @return Whether to show the error metrics or not.
     * 
     */
    public Optional<Boolean> showErrors() {
        return Optional.ofNullable(this.showErrors);
    }
    /**
     * @return Whether to show the hits metrics or not
     * 
     */
    public Optional<Boolean> showHits() {
        return Optional.ofNullable(this.showHits);
    }
    /**
     * @return Whether to show the latency metrics or not.
     * 
     */
    public Optional<Boolean> showLatency() {
        return Optional.ofNullable(this.showLatency);
    }
    /**
     * @return Whether to show the resource list or not.
     * 
     */
    public Optional<Boolean> showResourceList() {
        return Optional.ofNullable(this.showResourceList);
    }
    /**
     * @return The size of the widget. Valid values are `small`, `medium`, `large`.
     * 
     */
    public Optional<String> sizeFormat() {
        return Optional.ofNullable(this.sizeFormat);
    }
    /**
     * @return APM span name
     * 
     */
    public String spanName() {
        return this.spanName;
    }
    /**
     * @return The title of the widget.
     * 
     */
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }
    /**
     * @return The alignment of the widget&#39;s title. Valid values are `center`, `left`, `right`.
     * 
     */
    public Optional<String> titleAlign() {
        return Optional.ofNullable(this.titleAlign);
    }
    /**
     * @return The size of the widget&#39;s title (defaults to 16).
     * 
     */
    public Optional<String> titleSize() {
        return Optional.ofNullable(this.titleSize);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardWidgetTraceServiceDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String displayFormat;
        private String env;
        private @Nullable String liveSpan;
        private String service;
        private @Nullable Boolean showBreakdown;
        private @Nullable Boolean showDistribution;
        private @Nullable Boolean showErrors;
        private @Nullable Boolean showHits;
        private @Nullable Boolean showLatency;
        private @Nullable Boolean showResourceList;
        private @Nullable String sizeFormat;
        private String spanName;
        private @Nullable String title;
        private @Nullable String titleAlign;
        private @Nullable String titleSize;
        public Builder() {}
        public Builder(DashboardWidgetTraceServiceDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayFormat = defaults.displayFormat;
    	      this.env = defaults.env;
    	      this.liveSpan = defaults.liveSpan;
    	      this.service = defaults.service;
    	      this.showBreakdown = defaults.showBreakdown;
    	      this.showDistribution = defaults.showDistribution;
    	      this.showErrors = defaults.showErrors;
    	      this.showHits = defaults.showHits;
    	      this.showLatency = defaults.showLatency;
    	      this.showResourceList = defaults.showResourceList;
    	      this.sizeFormat = defaults.sizeFormat;
    	      this.spanName = defaults.spanName;
    	      this.title = defaults.title;
    	      this.titleAlign = defaults.titleAlign;
    	      this.titleSize = defaults.titleSize;
        }

        @CustomType.Setter
        public Builder displayFormat(@Nullable String displayFormat) {

            this.displayFormat = displayFormat;
            return this;
        }
        @CustomType.Setter
        public Builder env(String env) {
            if (env == null) {
              throw new MissingRequiredPropertyException("DashboardWidgetTraceServiceDefinition", "env");
            }
            this.env = env;
            return this;
        }
        @CustomType.Setter
        public Builder liveSpan(@Nullable String liveSpan) {

            this.liveSpan = liveSpan;
            return this;
        }
        @CustomType.Setter
        public Builder service(String service) {
            if (service == null) {
              throw new MissingRequiredPropertyException("DashboardWidgetTraceServiceDefinition", "service");
            }
            this.service = service;
            return this;
        }
        @CustomType.Setter
        public Builder showBreakdown(@Nullable Boolean showBreakdown) {

            this.showBreakdown = showBreakdown;
            return this;
        }
        @CustomType.Setter
        public Builder showDistribution(@Nullable Boolean showDistribution) {

            this.showDistribution = showDistribution;
            return this;
        }
        @CustomType.Setter
        public Builder showErrors(@Nullable Boolean showErrors) {

            this.showErrors = showErrors;
            return this;
        }
        @CustomType.Setter
        public Builder showHits(@Nullable Boolean showHits) {

            this.showHits = showHits;
            return this;
        }
        @CustomType.Setter
        public Builder showLatency(@Nullable Boolean showLatency) {

            this.showLatency = showLatency;
            return this;
        }
        @CustomType.Setter
        public Builder showResourceList(@Nullable Boolean showResourceList) {

            this.showResourceList = showResourceList;
            return this;
        }
        @CustomType.Setter
        public Builder sizeFormat(@Nullable String sizeFormat) {

            this.sizeFormat = sizeFormat;
            return this;
        }
        @CustomType.Setter
        public Builder spanName(String spanName) {
            if (spanName == null) {
              throw new MissingRequiredPropertyException("DashboardWidgetTraceServiceDefinition", "spanName");
            }
            this.spanName = spanName;
            return this;
        }
        @CustomType.Setter
        public Builder title(@Nullable String title) {

            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder titleAlign(@Nullable String titleAlign) {

            this.titleAlign = titleAlign;
            return this;
        }
        @CustomType.Setter
        public Builder titleSize(@Nullable String titleSize) {

            this.titleSize = titleSize;
            return this;
        }
        public DashboardWidgetTraceServiceDefinition build() {
            final var _resultValue = new DashboardWidgetTraceServiceDefinition();
            _resultValue.displayFormat = displayFormat;
            _resultValue.env = env;
            _resultValue.liveSpan = liveSpan;
            _resultValue.service = service;
            _resultValue.showBreakdown = showBreakdown;
            _resultValue.showDistribution = showDistribution;
            _resultValue.showErrors = showErrors;
            _resultValue.showHits = showHits;
            _resultValue.showLatency = showLatency;
            _resultValue.showResourceList = showResourceList;
            _resultValue.sizeFormat = sizeFormat;
            _resultValue.spanName = spanName;
            _resultValue.title = title;
            _resultValue.titleAlign = titleAlign;
            _resultValue.titleSize = titleSize;
            return _resultValue;
        }
    }
}
