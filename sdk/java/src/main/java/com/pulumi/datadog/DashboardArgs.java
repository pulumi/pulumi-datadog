// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.DashboardTemplateVariableArgs;
import com.pulumi.datadog.inputs.DashboardTemplateVariablePresetArgs;
import com.pulumi.datadog.inputs.DashboardWidgetArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardArgs Empty = new DashboardArgs();

    @Import(name="dashboardLists")
    private @Nullable Output<List<Integer>> dashboardLists;

    public Optional<Output<List<Integer>>> dashboardLists() {
        return Optional.ofNullable(this.dashboardLists);
    }

    /**
     * The description of the dashboard.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the dashboard.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether this dashboard is read-only. **Deprecated.** Prefer using `restricted_roles` to define which roles are required to edit the dashboard. Defaults to `false`.
     * 
     * @deprecated
     * Prefer using `restricted_roles` to define which roles are required to edit the dashboard.
     * 
     */
    @Deprecated /* Prefer using `restricted_roles` to define which roles are required to edit the dashboard. */
    @Import(name="isReadOnly")
    private @Nullable Output<Boolean> isReadOnly;

    /**
     * @return Whether this dashboard is read-only. **Deprecated.** Prefer using `restricted_roles` to define which roles are required to edit the dashboard. Defaults to `false`.
     * 
     * @deprecated
     * Prefer using `restricted_roles` to define which roles are required to edit the dashboard.
     * 
     */
    @Deprecated /* Prefer using `restricted_roles` to define which roles are required to edit the dashboard. */
    public Optional<Output<Boolean>> isReadOnly() {
        return Optional.ofNullable(this.isReadOnly);
    }

    /**
     * The layout type of the dashboard. Valid values are `ordered`, `free`.
     * 
     */
    @Import(name="layoutType", required=true)
    private Output<String> layoutType;

    /**
     * @return The layout type of the dashboard. Valid values are `ordered`, `free`.
     * 
     */
    public Output<String> layoutType() {
        return this.layoutType;
    }

    /**
     * The list of handles for the users to notify when changes are made to this dashboard.
     * 
     */
    @Import(name="notifyLists")
    private @Nullable Output<List<String>> notifyLists;

    /**
     * @return The list of handles for the users to notify when changes are made to this dashboard.
     * 
     */
    public Optional<Output<List<String>>> notifyLists() {
        return Optional.ofNullable(this.notifyLists);
    }

    /**
     * The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it&#39;s set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
     * 
     */
    @Import(name="reflowType")
    private @Nullable Output<String> reflowType;

    /**
     * @return The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it&#39;s set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
     * 
     */
    public Optional<Output<String>> reflowType() {
        return Optional.ofNullable(this.reflowType);
    }

    /**
     * UUIDs of roles whose associated users are authorized to edit the dashboard.
     * 
     */
    @Import(name="restrictedRoles")
    private @Nullable Output<List<String>> restrictedRoles;

    /**
     * @return UUIDs of roles whose associated users are authorized to edit the dashboard.
     * 
     */
    public Optional<Output<List<String>>> restrictedRoles() {
        return Optional.ofNullable(this.restrictedRoles);
    }

    /**
     * A list of tags assigned to the Dashboard. Only team names of the form `team:&lt;name&gt;` are supported.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of tags assigned to the Dashboard. Only team names of the form `team:&lt;name&gt;` are supported.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The list of selectable template variable presets for this dashboard.
     * 
     */
    @Import(name="templateVariablePresets")
    private @Nullable Output<List<DashboardTemplateVariablePresetArgs>> templateVariablePresets;

    /**
     * @return The list of selectable template variable presets for this dashboard.
     * 
     */
    public Optional<Output<List<DashboardTemplateVariablePresetArgs>>> templateVariablePresets() {
        return Optional.ofNullable(this.templateVariablePresets);
    }

    /**
     * The list of template variables for this dashboard.
     * 
     */
    @Import(name="templateVariables")
    private @Nullable Output<List<DashboardTemplateVariableArgs>> templateVariables;

    /**
     * @return The list of template variables for this dashboard.
     * 
     */
    public Optional<Output<List<DashboardTemplateVariableArgs>>> templateVariables() {
        return Optional.ofNullable(this.templateVariables);
    }

    /**
     * The title of the dashboard.
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return The title of the dashboard.
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    /**
     * The URL of the dashboard.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL of the dashboard.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * The list of widgets to display on the dashboard.
     * 
     */
    @Import(name="widgets")
    private @Nullable Output<List<DashboardWidgetArgs>> widgets;

    /**
     * @return The list of widgets to display on the dashboard.
     * 
     */
    public Optional<Output<List<DashboardWidgetArgs>>> widgets() {
        return Optional.ofNullable(this.widgets);
    }

    private DashboardArgs() {}

    private DashboardArgs(DashboardArgs $) {
        this.dashboardLists = $.dashboardLists;
        this.description = $.description;
        this.isReadOnly = $.isReadOnly;
        this.layoutType = $.layoutType;
        this.notifyLists = $.notifyLists;
        this.reflowType = $.reflowType;
        this.restrictedRoles = $.restrictedRoles;
        this.tags = $.tags;
        this.templateVariablePresets = $.templateVariablePresets;
        this.templateVariables = $.templateVariables;
        this.title = $.title;
        this.url = $.url;
        this.widgets = $.widgets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardArgs $;

        public Builder() {
            $ = new DashboardArgs();
        }

        public Builder(DashboardArgs defaults) {
            $ = new DashboardArgs(Objects.requireNonNull(defaults));
        }

        public Builder dashboardLists(@Nullable Output<List<Integer>> dashboardLists) {
            $.dashboardLists = dashboardLists;
            return this;
        }

        public Builder dashboardLists(List<Integer> dashboardLists) {
            return dashboardLists(Output.of(dashboardLists));
        }

        public Builder dashboardLists(Integer... dashboardLists) {
            return dashboardLists(List.of(dashboardLists));
        }

        /**
         * @param description The description of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isReadOnly Whether this dashboard is read-only. **Deprecated.** Prefer using `restricted_roles` to define which roles are required to edit the dashboard. Defaults to `false`.
         * 
         * @return builder
         * 
         * @deprecated
         * Prefer using `restricted_roles` to define which roles are required to edit the dashboard.
         * 
         */
        @Deprecated /* Prefer using `restricted_roles` to define which roles are required to edit the dashboard. */
        public Builder isReadOnly(@Nullable Output<Boolean> isReadOnly) {
            $.isReadOnly = isReadOnly;
            return this;
        }

        /**
         * @param isReadOnly Whether this dashboard is read-only. **Deprecated.** Prefer using `restricted_roles` to define which roles are required to edit the dashboard. Defaults to `false`.
         * 
         * @return builder
         * 
         * @deprecated
         * Prefer using `restricted_roles` to define which roles are required to edit the dashboard.
         * 
         */
        @Deprecated /* Prefer using `restricted_roles` to define which roles are required to edit the dashboard. */
        public Builder isReadOnly(Boolean isReadOnly) {
            return isReadOnly(Output.of(isReadOnly));
        }

        /**
         * @param layoutType The layout type of the dashboard. Valid values are `ordered`, `free`.
         * 
         * @return builder
         * 
         */
        public Builder layoutType(Output<String> layoutType) {
            $.layoutType = layoutType;
            return this;
        }

        /**
         * @param layoutType The layout type of the dashboard. Valid values are `ordered`, `free`.
         * 
         * @return builder
         * 
         */
        public Builder layoutType(String layoutType) {
            return layoutType(Output.of(layoutType));
        }

        /**
         * @param notifyLists The list of handles for the users to notify when changes are made to this dashboard.
         * 
         * @return builder
         * 
         */
        public Builder notifyLists(@Nullable Output<List<String>> notifyLists) {
            $.notifyLists = notifyLists;
            return this;
        }

        /**
         * @param notifyLists The list of handles for the users to notify when changes are made to this dashboard.
         * 
         * @return builder
         * 
         */
        public Builder notifyLists(List<String> notifyLists) {
            return notifyLists(Output.of(notifyLists));
        }

        /**
         * @param notifyLists The list of handles for the users to notify when changes are made to this dashboard.
         * 
         * @return builder
         * 
         */
        public Builder notifyLists(String... notifyLists) {
            return notifyLists(List.of(notifyLists));
        }

        /**
         * @param reflowType The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it&#39;s set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
         * 
         * @return builder
         * 
         */
        public Builder reflowType(@Nullable Output<String> reflowType) {
            $.reflowType = reflowType;
            return this;
        }

        /**
         * @param reflowType The reflow type of a new dashboard layout. Set this only when layout type is `ordered`. If set to `fixed`, the dashboard expects all widgets to have a layout, and if it&#39;s set to `auto`, widgets should not have layouts. Valid values are `auto`, `fixed`.
         * 
         * @return builder
         * 
         */
        public Builder reflowType(String reflowType) {
            return reflowType(Output.of(reflowType));
        }

        /**
         * @param restrictedRoles UUIDs of roles whose associated users are authorized to edit the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder restrictedRoles(@Nullable Output<List<String>> restrictedRoles) {
            $.restrictedRoles = restrictedRoles;
            return this;
        }

        /**
         * @param restrictedRoles UUIDs of roles whose associated users are authorized to edit the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder restrictedRoles(List<String> restrictedRoles) {
            return restrictedRoles(Output.of(restrictedRoles));
        }

        /**
         * @param restrictedRoles UUIDs of roles whose associated users are authorized to edit the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder restrictedRoles(String... restrictedRoles) {
            return restrictedRoles(List.of(restrictedRoles));
        }

        /**
         * @param tags A list of tags assigned to the Dashboard. Only team names of the form `team:&lt;name&gt;` are supported.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags assigned to the Dashboard. Only team names of the form `team:&lt;name&gt;` are supported.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of tags assigned to the Dashboard. Only team names of the form `team:&lt;name&gt;` are supported.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param templateVariablePresets The list of selectable template variable presets for this dashboard.
         * 
         * @return builder
         * 
         */
        public Builder templateVariablePresets(@Nullable Output<List<DashboardTemplateVariablePresetArgs>> templateVariablePresets) {
            $.templateVariablePresets = templateVariablePresets;
            return this;
        }

        /**
         * @param templateVariablePresets The list of selectable template variable presets for this dashboard.
         * 
         * @return builder
         * 
         */
        public Builder templateVariablePresets(List<DashboardTemplateVariablePresetArgs> templateVariablePresets) {
            return templateVariablePresets(Output.of(templateVariablePresets));
        }

        /**
         * @param templateVariablePresets The list of selectable template variable presets for this dashboard.
         * 
         * @return builder
         * 
         */
        public Builder templateVariablePresets(DashboardTemplateVariablePresetArgs... templateVariablePresets) {
            return templateVariablePresets(List.of(templateVariablePresets));
        }

        /**
         * @param templateVariables The list of template variables for this dashboard.
         * 
         * @return builder
         * 
         */
        public Builder templateVariables(@Nullable Output<List<DashboardTemplateVariableArgs>> templateVariables) {
            $.templateVariables = templateVariables;
            return this;
        }

        /**
         * @param templateVariables The list of template variables for this dashboard.
         * 
         * @return builder
         * 
         */
        public Builder templateVariables(List<DashboardTemplateVariableArgs> templateVariables) {
            return templateVariables(Output.of(templateVariables));
        }

        /**
         * @param templateVariables The list of template variables for this dashboard.
         * 
         * @return builder
         * 
         */
        public Builder templateVariables(DashboardTemplateVariableArgs... templateVariables) {
            return templateVariables(List.of(templateVariables));
        }

        /**
         * @param title The title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param url The URL of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param widgets The list of widgets to display on the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder widgets(@Nullable Output<List<DashboardWidgetArgs>> widgets) {
            $.widgets = widgets;
            return this;
        }

        /**
         * @param widgets The list of widgets to display on the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder widgets(List<DashboardWidgetArgs> widgets) {
            return widgets(Output.of(widgets));
        }

        /**
         * @param widgets The list of widgets to display on the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder widgets(DashboardWidgetArgs... widgets) {
            return widgets(List.of(widgets));
        }

        public DashboardArgs build() {
            if ($.layoutType == null) {
                throw new MissingRequiredPropertyException("DashboardArgs", "layoutType");
            }
            if ($.title == null) {
                throw new MissingRequiredPropertyException("DashboardArgs", "title");
            }
            return $;
        }
    }

}
