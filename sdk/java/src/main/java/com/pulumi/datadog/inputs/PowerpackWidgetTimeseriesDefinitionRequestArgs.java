// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.PowerpackWidgetTimeseriesDefinitionRequestApmQueryArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetTimeseriesDefinitionRequestAuditQueryArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetTimeseriesDefinitionRequestFormulaArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetTimeseriesDefinitionRequestLogQueryArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetTimeseriesDefinitionRequestMetadataArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetTimeseriesDefinitionRequestNetworkQueryArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetTimeseriesDefinitionRequestProcessQueryArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetTimeseriesDefinitionRequestQueryArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetTimeseriesDefinitionRequestRumQueryArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetTimeseriesDefinitionRequestSecurityQueryArgs;
import com.pulumi.datadog.inputs.PowerpackWidgetTimeseriesDefinitionRequestStyleArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PowerpackWidgetTimeseriesDefinitionRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final PowerpackWidgetTimeseriesDefinitionRequestArgs Empty = new PowerpackWidgetTimeseriesDefinitionRequestArgs();

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="apmQuery")
    private @Nullable Output<PowerpackWidgetTimeseriesDefinitionRequestApmQueryArgs> apmQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<PowerpackWidgetTimeseriesDefinitionRequestApmQueryArgs>> apmQuery() {
        return Optional.ofNullable(this.apmQuery);
    }

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="auditQuery")
    private @Nullable Output<PowerpackWidgetTimeseriesDefinitionRequestAuditQueryArgs> auditQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<PowerpackWidgetTimeseriesDefinitionRequestAuditQueryArgs>> auditQuery() {
        return Optional.ofNullable(this.auditQuery);
    }

    /**
     * How to display the marker lines. Valid values are `area`, `bars`, `line`, `overlay`.
     * 
     */
    @Import(name="displayType")
    private @Nullable Output<String> displayType;

    /**
     * @return How to display the marker lines. Valid values are `area`, `bars`, `line`, `overlay`.
     * 
     */
    public Optional<Output<String>> displayType() {
        return Optional.ofNullable(this.displayType);
    }

    @Import(name="formulas")
    private @Nullable Output<List<PowerpackWidgetTimeseriesDefinitionRequestFormulaArgs>> formulas;

    public Optional<Output<List<PowerpackWidgetTimeseriesDefinitionRequestFormulaArgs>>> formulas() {
        return Optional.ofNullable(this.formulas);
    }

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="logQuery")
    private @Nullable Output<PowerpackWidgetTimeseriesDefinitionRequestLogQueryArgs> logQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<PowerpackWidgetTimeseriesDefinitionRequestLogQueryArgs>> logQuery() {
        return Optional.ofNullable(this.logQuery);
    }

    /**
     * Used to define expression aliases. Multiple `metadata` blocks are allowed using the structure below.
     * 
     */
    @Import(name="metadatas")
    private @Nullable Output<List<PowerpackWidgetTimeseriesDefinitionRequestMetadataArgs>> metadatas;

    /**
     * @return Used to define expression aliases. Multiple `metadata` blocks are allowed using the structure below.
     * 
     */
    public Optional<Output<List<PowerpackWidgetTimeseriesDefinitionRequestMetadataArgs>>> metadatas() {
        return Optional.ofNullable(this.metadatas);
    }

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="networkQuery")
    private @Nullable Output<PowerpackWidgetTimeseriesDefinitionRequestNetworkQueryArgs> networkQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<PowerpackWidgetTimeseriesDefinitionRequestNetworkQueryArgs>> networkQuery() {
        return Optional.ofNullable(this.networkQuery);
    }

    /**
     * A Boolean indicating whether the request uses the right or left Y-Axis.
     * 
     */
    @Import(name="onRightYaxis")
    private @Nullable Output<Boolean> onRightYaxis;

    /**
     * @return A Boolean indicating whether the request uses the right or left Y-Axis.
     * 
     */
    public Optional<Output<Boolean>> onRightYaxis() {
        return Optional.ofNullable(this.onRightYaxis);
    }

    /**
     * The process query to use in the widget. The structure of this block is described below.
     * 
     */
    @Import(name="processQuery")
    private @Nullable Output<PowerpackWidgetTimeseriesDefinitionRequestProcessQueryArgs> processQuery;

    /**
     * @return The process query to use in the widget. The structure of this block is described below.
     * 
     */
    public Optional<Output<PowerpackWidgetTimeseriesDefinitionRequestProcessQueryArgs>> processQuery() {
        return Optional.ofNullable(this.processQuery);
    }

    /**
     * The metric query to use for this widget.
     * 
     */
    @Import(name="q")
    private @Nullable Output<String> q;

    /**
     * @return The metric query to use for this widget.
     * 
     */
    public Optional<Output<String>> q() {
        return Optional.ofNullable(this.q);
    }

    @Import(name="queries")
    private @Nullable Output<List<PowerpackWidgetTimeseriesDefinitionRequestQueryArgs>> queries;

    public Optional<Output<List<PowerpackWidgetTimeseriesDefinitionRequestQueryArgs>>> queries() {
        return Optional.ofNullable(this.queries);
    }

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="rumQuery")
    private @Nullable Output<PowerpackWidgetTimeseriesDefinitionRequestRumQueryArgs> rumQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<PowerpackWidgetTimeseriesDefinitionRequestRumQueryArgs>> rumQuery() {
        return Optional.ofNullable(this.rumQuery);
    }

    /**
     * The query to use for this widget.
     * 
     */
    @Import(name="securityQuery")
    private @Nullable Output<PowerpackWidgetTimeseriesDefinitionRequestSecurityQueryArgs> securityQuery;

    /**
     * @return The query to use for this widget.
     * 
     */
    public Optional<Output<PowerpackWidgetTimeseriesDefinitionRequestSecurityQueryArgs>> securityQuery() {
        return Optional.ofNullable(this.securityQuery);
    }

    /**
     * The style of the widget graph. Exactly one `style` block is allowed using the structure below.
     * 
     */
    @Import(name="style")
    private @Nullable Output<PowerpackWidgetTimeseriesDefinitionRequestStyleArgs> style;

    /**
     * @return The style of the widget graph. Exactly one `style` block is allowed using the structure below.
     * 
     */
    public Optional<Output<PowerpackWidgetTimeseriesDefinitionRequestStyleArgs>> style() {
        return Optional.ofNullable(this.style);
    }

    private PowerpackWidgetTimeseriesDefinitionRequestArgs() {}

    private PowerpackWidgetTimeseriesDefinitionRequestArgs(PowerpackWidgetTimeseriesDefinitionRequestArgs $) {
        this.apmQuery = $.apmQuery;
        this.auditQuery = $.auditQuery;
        this.displayType = $.displayType;
        this.formulas = $.formulas;
        this.logQuery = $.logQuery;
        this.metadatas = $.metadatas;
        this.networkQuery = $.networkQuery;
        this.onRightYaxis = $.onRightYaxis;
        this.processQuery = $.processQuery;
        this.q = $.q;
        this.queries = $.queries;
        this.rumQuery = $.rumQuery;
        this.securityQuery = $.securityQuery;
        this.style = $.style;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PowerpackWidgetTimeseriesDefinitionRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PowerpackWidgetTimeseriesDefinitionRequestArgs $;

        public Builder() {
            $ = new PowerpackWidgetTimeseriesDefinitionRequestArgs();
        }

        public Builder(PowerpackWidgetTimeseriesDefinitionRequestArgs defaults) {
            $ = new PowerpackWidgetTimeseriesDefinitionRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apmQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder apmQuery(@Nullable Output<PowerpackWidgetTimeseriesDefinitionRequestApmQueryArgs> apmQuery) {
            $.apmQuery = apmQuery;
            return this;
        }

        /**
         * @param apmQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder apmQuery(PowerpackWidgetTimeseriesDefinitionRequestApmQueryArgs apmQuery) {
            return apmQuery(Output.of(apmQuery));
        }

        /**
         * @param auditQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder auditQuery(@Nullable Output<PowerpackWidgetTimeseriesDefinitionRequestAuditQueryArgs> auditQuery) {
            $.auditQuery = auditQuery;
            return this;
        }

        /**
         * @param auditQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder auditQuery(PowerpackWidgetTimeseriesDefinitionRequestAuditQueryArgs auditQuery) {
            return auditQuery(Output.of(auditQuery));
        }

        /**
         * @param displayType How to display the marker lines. Valid values are `area`, `bars`, `line`, `overlay`.
         * 
         * @return builder
         * 
         */
        public Builder displayType(@Nullable Output<String> displayType) {
            $.displayType = displayType;
            return this;
        }

        /**
         * @param displayType How to display the marker lines. Valid values are `area`, `bars`, `line`, `overlay`.
         * 
         * @return builder
         * 
         */
        public Builder displayType(String displayType) {
            return displayType(Output.of(displayType));
        }

        public Builder formulas(@Nullable Output<List<PowerpackWidgetTimeseriesDefinitionRequestFormulaArgs>> formulas) {
            $.formulas = formulas;
            return this;
        }

        public Builder formulas(List<PowerpackWidgetTimeseriesDefinitionRequestFormulaArgs> formulas) {
            return formulas(Output.of(formulas));
        }

        public Builder formulas(PowerpackWidgetTimeseriesDefinitionRequestFormulaArgs... formulas) {
            return formulas(List.of(formulas));
        }

        /**
         * @param logQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder logQuery(@Nullable Output<PowerpackWidgetTimeseriesDefinitionRequestLogQueryArgs> logQuery) {
            $.logQuery = logQuery;
            return this;
        }

        /**
         * @param logQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder logQuery(PowerpackWidgetTimeseriesDefinitionRequestLogQueryArgs logQuery) {
            return logQuery(Output.of(logQuery));
        }

        /**
         * @param metadatas Used to define expression aliases. Multiple `metadata` blocks are allowed using the structure below.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(@Nullable Output<List<PowerpackWidgetTimeseriesDefinitionRequestMetadataArgs>> metadatas) {
            $.metadatas = metadatas;
            return this;
        }

        /**
         * @param metadatas Used to define expression aliases. Multiple `metadata` blocks are allowed using the structure below.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(List<PowerpackWidgetTimeseriesDefinitionRequestMetadataArgs> metadatas) {
            return metadatas(Output.of(metadatas));
        }

        /**
         * @param metadatas Used to define expression aliases. Multiple `metadata` blocks are allowed using the structure below.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(PowerpackWidgetTimeseriesDefinitionRequestMetadataArgs... metadatas) {
            return metadatas(List.of(metadatas));
        }

        /**
         * @param networkQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder networkQuery(@Nullable Output<PowerpackWidgetTimeseriesDefinitionRequestNetworkQueryArgs> networkQuery) {
            $.networkQuery = networkQuery;
            return this;
        }

        /**
         * @param networkQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder networkQuery(PowerpackWidgetTimeseriesDefinitionRequestNetworkQueryArgs networkQuery) {
            return networkQuery(Output.of(networkQuery));
        }

        /**
         * @param onRightYaxis A Boolean indicating whether the request uses the right or left Y-Axis.
         * 
         * @return builder
         * 
         */
        public Builder onRightYaxis(@Nullable Output<Boolean> onRightYaxis) {
            $.onRightYaxis = onRightYaxis;
            return this;
        }

        /**
         * @param onRightYaxis A Boolean indicating whether the request uses the right or left Y-Axis.
         * 
         * @return builder
         * 
         */
        public Builder onRightYaxis(Boolean onRightYaxis) {
            return onRightYaxis(Output.of(onRightYaxis));
        }

        /**
         * @param processQuery The process query to use in the widget. The structure of this block is described below.
         * 
         * @return builder
         * 
         */
        public Builder processQuery(@Nullable Output<PowerpackWidgetTimeseriesDefinitionRequestProcessQueryArgs> processQuery) {
            $.processQuery = processQuery;
            return this;
        }

        /**
         * @param processQuery The process query to use in the widget. The structure of this block is described below.
         * 
         * @return builder
         * 
         */
        public Builder processQuery(PowerpackWidgetTimeseriesDefinitionRequestProcessQueryArgs processQuery) {
            return processQuery(Output.of(processQuery));
        }

        /**
         * @param q The metric query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder q(@Nullable Output<String> q) {
            $.q = q;
            return this;
        }

        /**
         * @param q The metric query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder q(String q) {
            return q(Output.of(q));
        }

        public Builder queries(@Nullable Output<List<PowerpackWidgetTimeseriesDefinitionRequestQueryArgs>> queries) {
            $.queries = queries;
            return this;
        }

        public Builder queries(List<PowerpackWidgetTimeseriesDefinitionRequestQueryArgs> queries) {
            return queries(Output.of(queries));
        }

        public Builder queries(PowerpackWidgetTimeseriesDefinitionRequestQueryArgs... queries) {
            return queries(List.of(queries));
        }

        /**
         * @param rumQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder rumQuery(@Nullable Output<PowerpackWidgetTimeseriesDefinitionRequestRumQueryArgs> rumQuery) {
            $.rumQuery = rumQuery;
            return this;
        }

        /**
         * @param rumQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder rumQuery(PowerpackWidgetTimeseriesDefinitionRequestRumQueryArgs rumQuery) {
            return rumQuery(Output.of(rumQuery));
        }

        /**
         * @param securityQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder securityQuery(@Nullable Output<PowerpackWidgetTimeseriesDefinitionRequestSecurityQueryArgs> securityQuery) {
            $.securityQuery = securityQuery;
            return this;
        }

        /**
         * @param securityQuery The query to use for this widget.
         * 
         * @return builder
         * 
         */
        public Builder securityQuery(PowerpackWidgetTimeseriesDefinitionRequestSecurityQueryArgs securityQuery) {
            return securityQuery(Output.of(securityQuery));
        }

        /**
         * @param style The style of the widget graph. Exactly one `style` block is allowed using the structure below.
         * 
         * @return builder
         * 
         */
        public Builder style(@Nullable Output<PowerpackWidgetTimeseriesDefinitionRequestStyleArgs> style) {
            $.style = style;
            return this;
        }

        /**
         * @param style The style of the widget graph. Exactly one `style` block is allowed using the structure below.
         * 
         * @return builder
         * 
         */
        public Builder style(PowerpackWidgetTimeseriesDefinitionRequestStyleArgs style) {
            return style(Output.of(style));
        }

        public PowerpackWidgetTimeseriesDefinitionRequestArgs build() {
            return $;
        }
    }

}
