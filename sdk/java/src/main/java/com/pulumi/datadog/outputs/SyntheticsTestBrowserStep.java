// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.SyntheticsTestBrowserStepParams;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SyntheticsTestBrowserStep {
    /**
     * @return Determines if the step should be allowed to fail.
     * 
     */
    private @Nullable Boolean allowFailure;
    /**
     * @return Force update of the &#34;element&#34; parameter for the step
     * 
     */
    private @Nullable Boolean forceElementUpdate;
    /**
     * @return Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
     * 
     */
    private @Nullable Boolean isCritical;
    /**
     * @return Name of the step.
     * 
     */
    private String name;
    /**
     * @return Prevents saving screenshots of the step.
     * 
     */
    private @Nullable Boolean noScreenshot;
    /**
     * @return Parameters for the step.
     * 
     */
    private SyntheticsTestBrowserStepParams params;
    /**
     * @return Used to override the default timeout of a step.
     * 
     */
    private @Nullable Integer timeout;
    /**
     * @return Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.
     * 
     */
    private String type;

    private SyntheticsTestBrowserStep() {}
    /**
     * @return Determines if the step should be allowed to fail.
     * 
     */
    public Optional<Boolean> allowFailure() {
        return Optional.ofNullable(this.allowFailure);
    }
    /**
     * @return Force update of the &#34;element&#34; parameter for the step
     * 
     */
    public Optional<Boolean> forceElementUpdate() {
        return Optional.ofNullable(this.forceElementUpdate);
    }
    /**
     * @return Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
     * 
     */
    public Optional<Boolean> isCritical() {
        return Optional.ofNullable(this.isCritical);
    }
    /**
     * @return Name of the step.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Prevents saving screenshots of the step.
     * 
     */
    public Optional<Boolean> noScreenshot() {
        return Optional.ofNullable(this.noScreenshot);
    }
    /**
     * @return Parameters for the step.
     * 
     */
    public SyntheticsTestBrowserStepParams params() {
        return this.params;
    }
    /**
     * @return Used to override the default timeout of a step.
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }
    /**
     * @return Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyntheticsTestBrowserStep defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowFailure;
        private @Nullable Boolean forceElementUpdate;
        private @Nullable Boolean isCritical;
        private String name;
        private @Nullable Boolean noScreenshot;
        private SyntheticsTestBrowserStepParams params;
        private @Nullable Integer timeout;
        private String type;
        public Builder() {}
        public Builder(SyntheticsTestBrowserStep defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowFailure = defaults.allowFailure;
    	      this.forceElementUpdate = defaults.forceElementUpdate;
    	      this.isCritical = defaults.isCritical;
    	      this.name = defaults.name;
    	      this.noScreenshot = defaults.noScreenshot;
    	      this.params = defaults.params;
    	      this.timeout = defaults.timeout;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder allowFailure(@Nullable Boolean allowFailure) {
            this.allowFailure = allowFailure;
            return this;
        }
        @CustomType.Setter
        public Builder forceElementUpdate(@Nullable Boolean forceElementUpdate) {
            this.forceElementUpdate = forceElementUpdate;
            return this;
        }
        @CustomType.Setter
        public Builder isCritical(@Nullable Boolean isCritical) {
            this.isCritical = isCritical;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder noScreenshot(@Nullable Boolean noScreenshot) {
            this.noScreenshot = noScreenshot;
            return this;
        }
        @CustomType.Setter
        public Builder params(SyntheticsTestBrowserStepParams params) {
            this.params = Objects.requireNonNull(params);
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public SyntheticsTestBrowserStep build() {
            final var _resultValue = new SyntheticsTestBrowserStep();
            _resultValue.allowFailure = allowFailure;
            _resultValue.forceElementUpdate = forceElementUpdate;
            _resultValue.isCritical = isCritical;
            _resultValue.name = name;
            _resultValue.noScreenshot = noScreenshot;
            _resultValue.params = params;
            _resultValue.timeout = timeout;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
