// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebhookState extends com.pulumi.resources.ResourceArgs {

    public static final WebhookState Empty = new WebhookState();

    /**
     * The headers attached to the webhook.
     * 
     */
    @Import(name="customHeaders")
    private @Nullable Output<String> customHeaders;

    /**
     * @return The headers attached to the webhook.
     * 
     */
    public Optional<Output<String>> customHeaders() {
        return Optional.ofNullable(this.customHeaders);
    }

    /**
     * Encoding type. Valid values are `json`, `form`.
     * 
     */
    @Import(name="encodeAs")
    private @Nullable Output<String> encodeAs;

    /**
     * @return Encoding type. Valid values are `json`, `form`.
     * 
     */
    public Optional<Output<String>> encodeAs() {
        return Optional.ofNullable(this.encodeAs);
    }

    /**
     * The name of the webhook. It corresponds with `&lt;WEBHOOK_NAME&gt;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the webhook. It corresponds with `&lt;WEBHOOK_NAME&gt;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The payload of the webhook.
     * 
     */
    @Import(name="payload")
    private @Nullable Output<String> payload;

    /**
     * @return The payload of the webhook.
     * 
     */
    public Optional<Output<String>> payload() {
        return Optional.ofNullable(this.payload);
    }

    /**
     * The URL of the webhook.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL of the webhook.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private WebhookState() {}

    private WebhookState(WebhookState $) {
        this.customHeaders = $.customHeaders;
        this.encodeAs = $.encodeAs;
        this.name = $.name;
        this.payload = $.payload;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebhookState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebhookState $;

        public Builder() {
            $ = new WebhookState();
        }

        public Builder(WebhookState defaults) {
            $ = new WebhookState(Objects.requireNonNull(defaults));
        }

        /**
         * @param customHeaders The headers attached to the webhook.
         * 
         * @return builder
         * 
         */
        public Builder customHeaders(@Nullable Output<String> customHeaders) {
            $.customHeaders = customHeaders;
            return this;
        }

        /**
         * @param customHeaders The headers attached to the webhook.
         * 
         * @return builder
         * 
         */
        public Builder customHeaders(String customHeaders) {
            return customHeaders(Output.of(customHeaders));
        }

        /**
         * @param encodeAs Encoding type. Valid values are `json`, `form`.
         * 
         * @return builder
         * 
         */
        public Builder encodeAs(@Nullable Output<String> encodeAs) {
            $.encodeAs = encodeAs;
            return this;
        }

        /**
         * @param encodeAs Encoding type. Valid values are `json`, `form`.
         * 
         * @return builder
         * 
         */
        public Builder encodeAs(String encodeAs) {
            return encodeAs(Output.of(encodeAs));
        }

        /**
         * @param name The name of the webhook. It corresponds with `&lt;WEBHOOK_NAME&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the webhook. It corresponds with `&lt;WEBHOOK_NAME&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param payload The payload of the webhook.
         * 
         * @return builder
         * 
         */
        public Builder payload(@Nullable Output<String> payload) {
            $.payload = payload;
            return this;
        }

        /**
         * @param payload The payload of the webhook.
         * 
         * @return builder
         * 
         */
        public Builder payload(String payload) {
            return payload(Output.of(payload));
        }

        /**
         * @param url The URL of the webhook.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL of the webhook.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public WebhookState build() {
            return $;
        }
    }

}
