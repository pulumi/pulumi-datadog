// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.IncidentNotificationRuleConditionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IncidentNotificationRuleState extends com.pulumi.resources.ResourceArgs {

    public static final IncidentNotificationRuleState Empty = new IncidentNotificationRuleState();

    /**
     * The conditions that trigger this notification rule. At least one condition is required.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<IncidentNotificationRuleConditionArgs>> conditions;

    /**
     * @return The conditions that trigger this notification rule. At least one condition is required.
     * 
     */
    public Optional<Output<List<IncidentNotificationRuleConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * Timestamp when the notification rule was created.
     * 
     */
    @Import(name="created")
    private @Nullable Output<String> created;

    /**
     * @return Timestamp when the notification rule was created.
     * 
     */
    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * Whether the notification rule is enabled. Defaults to `false`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the notification rule is enabled. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The notification handles (targets) for this rule. Examples: {@literal @}team-email{@literal @}company.com, {@literal @}slack-channel.
     * 
     */
    @Import(name="handles")
    private @Nullable Output<List<String>> handles;

    /**
     * @return The notification handles (targets) for this rule. Examples: {@literal @}team-email{@literal @}company.com, {@literal @}slack-channel.
     * 
     */
    public Optional<Output<List<String>>> handles() {
        return Optional.ofNullable(this.handles);
    }

    /**
     * The ID of the incident type this notification rule is associated with.
     * 
     */
    @Import(name="incidentType")
    private @Nullable Output<String> incidentType;

    /**
     * @return The ID of the incident type this notification rule is associated with.
     * 
     */
    public Optional<Output<String>> incidentType() {
        return Optional.ofNullable(this.incidentType);
    }

    /**
     * Timestamp when the notification rule was last modified.
     * 
     */
    @Import(name="modified")
    private @Nullable Output<String> modified;

    /**
     * @return Timestamp when the notification rule was last modified.
     * 
     */
    public Optional<Output<String>> modified() {
        return Optional.ofNullable(this.modified);
    }

    /**
     * The ID of the notification template to use for this rule.
     * 
     */
    @Import(name="notificationTemplate")
    private @Nullable Output<String> notificationTemplate;

    /**
     * @return The ID of the notification template to use for this rule.
     * 
     */
    public Optional<Output<String>> notificationTemplate() {
        return Optional.ofNullable(this.notificationTemplate);
    }

    /**
     * List of incident fields that trigger re-notification when changed. Valid values are: status, severity, customer*impact, title, description, detected, root*cause, services, state.
     * 
     */
    @Import(name="renotifyOns")
    private @Nullable Output<List<String>> renotifyOns;

    /**
     * @return List of incident fields that trigger re-notification when changed. Valid values are: status, severity, customer*impact, title, description, detected, root*cause, services, state.
     * 
     */
    public Optional<Output<List<String>>> renotifyOns() {
        return Optional.ofNullable(this.renotifyOns);
    }

    /**
     * The trigger event for this notification rule. Valid values are: incident*created*trigger, incident*saved*trigger.
     * 
     */
    @Import(name="trigger")
    private @Nullable Output<String> trigger;

    /**
     * @return The trigger event for this notification rule. Valid values are: incident*created*trigger, incident*saved*trigger.
     * 
     */
    public Optional<Output<String>> trigger() {
        return Optional.ofNullable(this.trigger);
    }

    /**
     * The visibility of the notification rule. Valid values are: all, organization, private. Defaults to organization.
     * 
     */
    @Import(name="visibility")
    private @Nullable Output<String> visibility;

    /**
     * @return The visibility of the notification rule. Valid values are: all, organization, private. Defaults to organization.
     * 
     */
    public Optional<Output<String>> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    private IncidentNotificationRuleState() {}

    private IncidentNotificationRuleState(IncidentNotificationRuleState $) {
        this.conditions = $.conditions;
        this.created = $.created;
        this.enabled = $.enabled;
        this.handles = $.handles;
        this.incidentType = $.incidentType;
        this.modified = $.modified;
        this.notificationTemplate = $.notificationTemplate;
        this.renotifyOns = $.renotifyOns;
        this.trigger = $.trigger;
        this.visibility = $.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IncidentNotificationRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IncidentNotificationRuleState $;

        public Builder() {
            $ = new IncidentNotificationRuleState();
        }

        public Builder(IncidentNotificationRuleState defaults) {
            $ = new IncidentNotificationRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditions The conditions that trigger this notification rule. At least one condition is required.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<IncidentNotificationRuleConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions The conditions that trigger this notification rule. At least one condition is required.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<IncidentNotificationRuleConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions The conditions that trigger this notification rule. At least one condition is required.
         * 
         * @return builder
         * 
         */
        public Builder conditions(IncidentNotificationRuleConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param created Timestamp when the notification rule was created.
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created Timestamp when the notification rule was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param enabled Whether the notification rule is enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the notification rule is enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param handles The notification handles (targets) for this rule. Examples: {@literal @}team-email{@literal @}company.com, {@literal @}slack-channel.
         * 
         * @return builder
         * 
         */
        public Builder handles(@Nullable Output<List<String>> handles) {
            $.handles = handles;
            return this;
        }

        /**
         * @param handles The notification handles (targets) for this rule. Examples: {@literal @}team-email{@literal @}company.com, {@literal @}slack-channel.
         * 
         * @return builder
         * 
         */
        public Builder handles(List<String> handles) {
            return handles(Output.of(handles));
        }

        /**
         * @param handles The notification handles (targets) for this rule. Examples: {@literal @}team-email{@literal @}company.com, {@literal @}slack-channel.
         * 
         * @return builder
         * 
         */
        public Builder handles(String... handles) {
            return handles(List.of(handles));
        }

        /**
         * @param incidentType The ID of the incident type this notification rule is associated with.
         * 
         * @return builder
         * 
         */
        public Builder incidentType(@Nullable Output<String> incidentType) {
            $.incidentType = incidentType;
            return this;
        }

        /**
         * @param incidentType The ID of the incident type this notification rule is associated with.
         * 
         * @return builder
         * 
         */
        public Builder incidentType(String incidentType) {
            return incidentType(Output.of(incidentType));
        }

        /**
         * @param modified Timestamp when the notification rule was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modified(@Nullable Output<String> modified) {
            $.modified = modified;
            return this;
        }

        /**
         * @param modified Timestamp when the notification rule was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modified(String modified) {
            return modified(Output.of(modified));
        }

        /**
         * @param notificationTemplate The ID of the notification template to use for this rule.
         * 
         * @return builder
         * 
         */
        public Builder notificationTemplate(@Nullable Output<String> notificationTemplate) {
            $.notificationTemplate = notificationTemplate;
            return this;
        }

        /**
         * @param notificationTemplate The ID of the notification template to use for this rule.
         * 
         * @return builder
         * 
         */
        public Builder notificationTemplate(String notificationTemplate) {
            return notificationTemplate(Output.of(notificationTemplate));
        }

        /**
         * @param renotifyOns List of incident fields that trigger re-notification when changed. Valid values are: status, severity, customer*impact, title, description, detected, root*cause, services, state.
         * 
         * @return builder
         * 
         */
        public Builder renotifyOns(@Nullable Output<List<String>> renotifyOns) {
            $.renotifyOns = renotifyOns;
            return this;
        }

        /**
         * @param renotifyOns List of incident fields that trigger re-notification when changed. Valid values are: status, severity, customer*impact, title, description, detected, root*cause, services, state.
         * 
         * @return builder
         * 
         */
        public Builder renotifyOns(List<String> renotifyOns) {
            return renotifyOns(Output.of(renotifyOns));
        }

        /**
         * @param renotifyOns List of incident fields that trigger re-notification when changed. Valid values are: status, severity, customer*impact, title, description, detected, root*cause, services, state.
         * 
         * @return builder
         * 
         */
        public Builder renotifyOns(String... renotifyOns) {
            return renotifyOns(List.of(renotifyOns));
        }

        /**
         * @param trigger The trigger event for this notification rule. Valid values are: incident*created*trigger, incident*saved*trigger.
         * 
         * @return builder
         * 
         */
        public Builder trigger(@Nullable Output<String> trigger) {
            $.trigger = trigger;
            return this;
        }

        /**
         * @param trigger The trigger event for this notification rule. Valid values are: incident*created*trigger, incident*saved*trigger.
         * 
         * @return builder
         * 
         */
        public Builder trigger(String trigger) {
            return trigger(Output.of(trigger));
        }

        /**
         * @param visibility The visibility of the notification rule. Valid values are: all, organization, private. Defaults to organization.
         * 
         * @return builder
         * 
         */
        public Builder visibility(@Nullable Output<String> visibility) {
            $.visibility = visibility;
            return this;
        }

        /**
         * @param visibility The visibility of the notification rule. Valid values are: all, organization, private. Defaults to organization.
         * 
         * @return builder
         * 
         */
        public Builder visibility(String visibility) {
            return visibility(Output.of(visibility));
        }

        public IncidentNotificationRuleState build() {
            return $;
        }
    }

}
