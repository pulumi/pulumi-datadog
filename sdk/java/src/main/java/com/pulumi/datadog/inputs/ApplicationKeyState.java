// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationKeyState extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationKeyState Empty = new ApplicationKeyState();

    /**
     * The value of the Application Key.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The value of the Application Key.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Name for Application Key.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name for Application Key.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Authorization scopes for the Application Key. Application Keys configured with no scopes have full access.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return Authorization scopes for the Application Key. Application Keys configured with no scopes have full access.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    private ApplicationKeyState() {}

    private ApplicationKeyState(ApplicationKeyState $) {
        this.key = $.key;
        this.name = $.name;
        this.scopes = $.scopes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationKeyState $;

        public Builder() {
            $ = new ApplicationKeyState();
        }

        public Builder(ApplicationKeyState defaults) {
            $ = new ApplicationKeyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param key The value of the Application Key.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The value of the Application Key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param name Name for Application Key.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name for Application Key.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param scopes Authorization scopes for the Application Key. Application Keys configured with no scopes have full access.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes Authorization scopes for the Application Key. Application Keys configured with no scopes have full access.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes Authorization scopes for the Application Key. Application Keys configured with no scopes have full access.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        public ApplicationKeyState build() {
            return $;
        }
    }

}
