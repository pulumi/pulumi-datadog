// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.GetSecurityMonitoringRulesRule;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecurityMonitoringRulesResult {
    /**
     * @return Limit the search to default rules
     * 
     */
    private @Nullable Boolean defaultOnlyFilter;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A rule name to limit the search
     * 
     */
    private @Nullable String nameFilter;
    /**
     * @return List of IDs of the matched rules.
     * 
     */
    private List<String> ruleIds;
    /**
     * @return List of rules.
     * 
     */
    private List<GetSecurityMonitoringRulesRule> rules;
    /**
     * @return A list of tags to limit the search
     * 
     */
    private @Nullable List<String> tagsFilters;
    /**
     * @return Limit the search to user rules
     * 
     */
    private @Nullable Boolean userOnlyFilter;

    private GetSecurityMonitoringRulesResult() {}
    /**
     * @return Limit the search to default rules
     * 
     */
    public Optional<Boolean> defaultOnlyFilter() {
        return Optional.ofNullable(this.defaultOnlyFilter);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A rule name to limit the search
     * 
     */
    public Optional<String> nameFilter() {
        return Optional.ofNullable(this.nameFilter);
    }
    /**
     * @return List of IDs of the matched rules.
     * 
     */
    public List<String> ruleIds() {
        return this.ruleIds;
    }
    /**
     * @return List of rules.
     * 
     */
    public List<GetSecurityMonitoringRulesRule> rules() {
        return this.rules;
    }
    /**
     * @return A list of tags to limit the search
     * 
     */
    public List<String> tagsFilters() {
        return this.tagsFilters == null ? List.of() : this.tagsFilters;
    }
    /**
     * @return Limit the search to user rules
     * 
     */
    public Optional<Boolean> userOnlyFilter() {
        return Optional.ofNullable(this.userOnlyFilter);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityMonitoringRulesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean defaultOnlyFilter;
        private String id;
        private @Nullable String nameFilter;
        private List<String> ruleIds;
        private List<GetSecurityMonitoringRulesRule> rules;
        private @Nullable List<String> tagsFilters;
        private @Nullable Boolean userOnlyFilter;
        public Builder() {}
        public Builder(GetSecurityMonitoringRulesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultOnlyFilter = defaults.defaultOnlyFilter;
    	      this.id = defaults.id;
    	      this.nameFilter = defaults.nameFilter;
    	      this.ruleIds = defaults.ruleIds;
    	      this.rules = defaults.rules;
    	      this.tagsFilters = defaults.tagsFilters;
    	      this.userOnlyFilter = defaults.userOnlyFilter;
        }

        @CustomType.Setter
        public Builder defaultOnlyFilter(@Nullable Boolean defaultOnlyFilter) {

            this.defaultOnlyFilter = defaultOnlyFilter;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecurityMonitoringRulesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder nameFilter(@Nullable String nameFilter) {

            this.nameFilter = nameFilter;
            return this;
        }
        @CustomType.Setter
        public Builder ruleIds(List<String> ruleIds) {
            if (ruleIds == null) {
              throw new MissingRequiredPropertyException("GetSecurityMonitoringRulesResult", "ruleIds");
            }
            this.ruleIds = ruleIds;
            return this;
        }
        public Builder ruleIds(String... ruleIds) {
            return ruleIds(List.of(ruleIds));
        }
        @CustomType.Setter
        public Builder rules(List<GetSecurityMonitoringRulesRule> rules) {
            if (rules == null) {
              throw new MissingRequiredPropertyException("GetSecurityMonitoringRulesResult", "rules");
            }
            this.rules = rules;
            return this;
        }
        public Builder rules(GetSecurityMonitoringRulesRule... rules) {
            return rules(List.of(rules));
        }
        @CustomType.Setter
        public Builder tagsFilters(@Nullable List<String> tagsFilters) {

            this.tagsFilters = tagsFilters;
            return this;
        }
        public Builder tagsFilters(String... tagsFilters) {
            return tagsFilters(List.of(tagsFilters));
        }
        @CustomType.Setter
        public Builder userOnlyFilter(@Nullable Boolean userOnlyFilter) {

            this.userOnlyFilter = userOnlyFilter;
            return this;
        }
        public GetSecurityMonitoringRulesResult build() {
            final var _resultValue = new GetSecurityMonitoringRulesResult();
            _resultValue.defaultOnlyFilter = defaultOnlyFilter;
            _resultValue.id = id;
            _resultValue.nameFilter = nameFilter;
            _resultValue.ruleIds = ruleIds;
            _resultValue.rules = rules;
            _resultValue.tagsFilters = tagsFilters;
            _resultValue.userOnlyFilter = userOnlyFilter;
            return _resultValue;
        }
    }
}
