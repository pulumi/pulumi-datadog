// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardWidgetEventStreamDefinition {
    /**
     * @return The size to use to display an event. Valid values are `s`, `l`.
     * 
     */
    private @Nullable String eventSize;
    /**
     * @return The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
     * 
     */
    private @Nullable String liveSpan;
    private String query;
    /**
     * @return The execution method for multi-value filters, options: `and` or `or`.
     * 
     */
    private @Nullable String tagsExecution;
    /**
     * @return The title of the widget.
     * 
     */
    private @Nullable String title;
    /**
     * @return The alignment of the widget&#39;s title. Valid values are `center`, `left`, `right`.
     * 
     */
    private @Nullable String titleAlign;
    /**
     * @return The size of the widget&#39;s title (defaults to 16).
     * 
     */
    private @Nullable String titleSize;

    private DashboardWidgetEventStreamDefinition() {}
    /**
     * @return The size to use to display an event. Valid values are `s`, `l`.
     * 
     */
    public Optional<String> eventSize() {
        return Optional.ofNullable(this.eventSize);
    }
    /**
     * @return The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
     * 
     */
    public Optional<String> liveSpan() {
        return Optional.ofNullable(this.liveSpan);
    }
    public String query() {
        return this.query;
    }
    /**
     * @return The execution method for multi-value filters, options: `and` or `or`.
     * 
     */
    public Optional<String> tagsExecution() {
        return Optional.ofNullable(this.tagsExecution);
    }
    /**
     * @return The title of the widget.
     * 
     */
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }
    /**
     * @return The alignment of the widget&#39;s title. Valid values are `center`, `left`, `right`.
     * 
     */
    public Optional<String> titleAlign() {
        return Optional.ofNullable(this.titleAlign);
    }
    /**
     * @return The size of the widget&#39;s title (defaults to 16).
     * 
     */
    public Optional<String> titleSize() {
        return Optional.ofNullable(this.titleSize);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardWidgetEventStreamDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String eventSize;
        private @Nullable String liveSpan;
        private String query;
        private @Nullable String tagsExecution;
        private @Nullable String title;
        private @Nullable String titleAlign;
        private @Nullable String titleSize;
        public Builder() {}
        public Builder(DashboardWidgetEventStreamDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eventSize = defaults.eventSize;
    	      this.liveSpan = defaults.liveSpan;
    	      this.query = defaults.query;
    	      this.tagsExecution = defaults.tagsExecution;
    	      this.title = defaults.title;
    	      this.titleAlign = defaults.titleAlign;
    	      this.titleSize = defaults.titleSize;
        }

        @CustomType.Setter
        public Builder eventSize(@Nullable String eventSize) {
            this.eventSize = eventSize;
            return this;
        }
        @CustomType.Setter
        public Builder liveSpan(@Nullable String liveSpan) {
            this.liveSpan = liveSpan;
            return this;
        }
        @CustomType.Setter
        public Builder query(String query) {
            this.query = Objects.requireNonNull(query);
            return this;
        }
        @CustomType.Setter
        public Builder tagsExecution(@Nullable String tagsExecution) {
            this.tagsExecution = tagsExecution;
            return this;
        }
        @CustomType.Setter
        public Builder title(@Nullable String title) {
            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder titleAlign(@Nullable String titleAlign) {
            this.titleAlign = titleAlign;
            return this;
        }
        @CustomType.Setter
        public Builder titleSize(@Nullable String titleSize) {
            this.titleSize = titleSize;
            return this;
        }
        public DashboardWidgetEventStreamDefinition build() {
            final var _resultValue = new DashboardWidgetEventStreamDefinition();
            _resultValue.eventSize = eventSize;
            _resultValue.liveSpan = liveSpan;
            _resultValue.query = query;
            _resultValue.tagsExecution = tagsExecution;
            _resultValue.title = title;
            _resultValue.titleAlign = titleAlign;
            _resultValue.titleSize = titleSize;
            return _resultValue;
        }
    }
}
