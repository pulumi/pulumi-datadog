// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigProcessorsSampleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigProcessorsSampleArgs Empty = new ObservabilityPipelineConfigProcessorsSampleArgs();

    /**
     * The unique identifier for this component. Used to reference this component in other parts of the pipeline (for example, as the `input` to downstream components).
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique identifier for this component. Used to reference this component in other parts of the pipeline (for example, as the `input` to downstream components).
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * A Datadog search query used to determine which logs this processor targets.
     * 
     */
    @Import(name="include", required=true)
    private Output<String> include;

    /**
     * @return A Datadog search query used to determine which logs this processor targets.
     * 
     */
    public Output<String> include() {
        return this.include;
    }

    /**
     * A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    @Import(name="inputs", required=true)
    private Output<List<String>> inputs;

    /**
     * @return A list of component IDs whose output is used as the `input` for this component.
     * 
     */
    public Output<List<String>> inputs() {
        return this.inputs;
    }

    /**
     * The percentage of logs to sample.
     * 
     */
    @Import(name="percentage")
    private @Nullable Output<Double> percentage;

    /**
     * @return The percentage of logs to sample.
     * 
     */
    public Optional<Output<Double>> percentage() {
        return Optional.ofNullable(this.percentage);
    }

    /**
     * Number of events to sample (1 in N).
     * 
     */
    @Import(name="rate")
    private @Nullable Output<Integer> rate;

    /**
     * @return Number of events to sample (1 in N).
     * 
     */
    public Optional<Output<Integer>> rate() {
        return Optional.ofNullable(this.rate);
    }

    private ObservabilityPipelineConfigProcessorsSampleArgs() {}

    private ObservabilityPipelineConfigProcessorsSampleArgs(ObservabilityPipelineConfigProcessorsSampleArgs $) {
        this.id = $.id;
        this.include = $.include;
        this.inputs = $.inputs;
        this.percentage = $.percentage;
        this.rate = $.rate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigProcessorsSampleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigProcessorsSampleArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigProcessorsSampleArgs();
        }

        public Builder(ObservabilityPipelineConfigProcessorsSampleArgs defaults) {
            $ = new ObservabilityPipelineConfigProcessorsSampleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The unique identifier for this component. Used to reference this component in other parts of the pipeline (for example, as the `input` to downstream components).
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier for this component. Used to reference this component in other parts of the pipeline (for example, as the `input` to downstream components).
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param include A Datadog search query used to determine which logs this processor targets.
         * 
         * @return builder
         * 
         */
        public Builder include(Output<String> include) {
            $.include = include;
            return this;
        }

        /**
         * @param include A Datadog search query used to determine which logs this processor targets.
         * 
         * @return builder
         * 
         */
        public Builder include(String include) {
            return include(Output.of(include));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(Output<List<String>> inputs) {
            $.inputs = inputs;
            return this;
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(List<String> inputs) {
            return inputs(Output.of(inputs));
        }

        /**
         * @param inputs A list of component IDs whose output is used as the `input` for this component.
         * 
         * @return builder
         * 
         */
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }

        /**
         * @param percentage The percentage of logs to sample.
         * 
         * @return builder
         * 
         */
        public Builder percentage(@Nullable Output<Double> percentage) {
            $.percentage = percentage;
            return this;
        }

        /**
         * @param percentage The percentage of logs to sample.
         * 
         * @return builder
         * 
         */
        public Builder percentage(Double percentage) {
            return percentage(Output.of(percentage));
        }

        /**
         * @param rate Number of events to sample (1 in N).
         * 
         * @return builder
         * 
         */
        public Builder rate(@Nullable Output<Integer> rate) {
            $.rate = rate;
            return this;
        }

        /**
         * @param rate Number of events to sample (1 in N).
         * 
         * @return builder
         * 
         */
        public Builder rate(Integer rate) {
            return rate(Output.of(rate));
        }

        public ObservabilityPipelineConfigProcessorsSampleArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsSampleArgs", "id");
            }
            if ($.include == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsSampleArgs", "include");
            }
            if ($.inputs == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsSampleArgs", "inputs");
            }
            return $;
        }
    }

}
