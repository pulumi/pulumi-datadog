// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityMonitoringSuppressionState extends com.pulumi.resources.ResourceArgs {

    public static final SecurityMonitoringSuppressionState Empty = new SecurityMonitoringSuppressionState();

    /**
     * A description for the suppression rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the suppression rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the suppression rule is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the suppression rule is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won&#39;t suppress signals anymore.
     * 
     */
    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    /**
     * @return A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won&#39;t suppress signals anymore.
     * 
     */
    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * The name of the suppression rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the suppression rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
     * 
     */
    @Import(name="ruleQuery")
    private @Nullable Output<String> ruleQuery;

    /**
     * @return The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
     * 
     */
    public Optional<Output<String>> ruleQuery() {
        return Optional.ofNullable(this.ruleQuery);
    }

    /**
     * The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
     * 
     */
    @Import(name="suppressionQuery")
    private @Nullable Output<String> suppressionQuery;

    /**
     * @return The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
     * 
     */
    public Optional<Output<String>> suppressionQuery() {
        return Optional.ofNullable(this.suppressionQuery);
    }

    private SecurityMonitoringSuppressionState() {}

    private SecurityMonitoringSuppressionState(SecurityMonitoringSuppressionState $) {
        this.description = $.description;
        this.enabled = $.enabled;
        this.expirationDate = $.expirationDate;
        this.name = $.name;
        this.ruleQuery = $.ruleQuery;
        this.suppressionQuery = $.suppressionQuery;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityMonitoringSuppressionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityMonitoringSuppressionState $;

        public Builder() {
            $ = new SecurityMonitoringSuppressionState();
        }

        public Builder(SecurityMonitoringSuppressionState defaults) {
            $ = new SecurityMonitoringSuppressionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description for the suppression rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the suppression rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Whether the suppression rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the suppression rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param expirationDate A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won&#39;t suppress signals anymore.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won&#39;t suppress signals anymore.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param name The name of the suppression rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the suppression rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ruleQuery The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
         * 
         * @return builder
         * 
         */
        public Builder ruleQuery(@Nullable Output<String> ruleQuery) {
            $.ruleQuery = ruleQuery;
            return this;
        }

        /**
         * @param ruleQuery The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
         * 
         * @return builder
         * 
         */
        public Builder ruleQuery(String ruleQuery) {
            return ruleQuery(Output.of(ruleQuery));
        }

        /**
         * @param suppressionQuery The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
         * 
         * @return builder
         * 
         */
        public Builder suppressionQuery(@Nullable Output<String> suppressionQuery) {
            $.suppressionQuery = suppressionQuery;
            return this;
        }

        /**
         * @param suppressionQuery The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. Same syntax as the queries to search signals in the signal explorer.
         * 
         * @return builder
         * 
         */
        public Builder suppressionQuery(String suppressionQuery) {
            return suppressionQuery(Output.of(suppressionQuery));
        }

        public SecurityMonitoringSuppressionState build() {
            return $;
        }
    }

}
