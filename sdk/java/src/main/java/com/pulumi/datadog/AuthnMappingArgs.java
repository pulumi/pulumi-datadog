// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class AuthnMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthnMappingArgs Empty = new AuthnMappingArgs();

    /**
     * Identity provider key.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return Identity provider key.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * The ID of a role to attach to all users with the corresponding key and value.
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return The ID of a role to attach to all users with the corresponding key and value.
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    /**
     * Identity provider value.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return Identity provider value.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private AuthnMappingArgs() {}

    private AuthnMappingArgs(AuthnMappingArgs $) {
        this.key = $.key;
        this.role = $.role;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthnMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthnMappingArgs $;

        public Builder() {
            $ = new AuthnMappingArgs();
        }

        public Builder(AuthnMappingArgs defaults) {
            $ = new AuthnMappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param key Identity provider key.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Identity provider key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param role The ID of a role to attach to all users with the corresponding key and value.
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The ID of a role to attach to all users with the corresponding key and value.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param value Identity provider value.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Identity provider value.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public AuthnMappingArgs build() {
            if ($.key == null) {
                throw new MissingRequiredPropertyException("AuthnMappingArgs", "key");
            }
            if ($.role == null) {
                throw new MissingRequiredPropertyException("AuthnMappingArgs", "role");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("AuthnMappingArgs", "value");
            }
            return $;
        }
    }

}
