// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.SecurityMonitoringRuleOptionsThirdPartyRuleOptionsRootQuery;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecurityMonitoringRuleOptionsThirdPartyRuleOptions {
    /**
     * @return Notification targets for the default rule case, when none of the third-party cases match.
     * 
     */
    private @Nullable List<String> defaultNotifications;
    /**
     * @return Severity of the default rule case, when none of the third-party cases match. Valid values are `info`, `low`, `medium`, `high`, `critical`.
     * 
     */
    private String defaultStatus;
    /**
     * @return Queries to be combined with third-party case queries. Each of them can have different group by fields, to aggregate differently based on the type of alert.
     * 
     */
    private List<SecurityMonitoringRuleOptionsThirdPartyRuleOptionsRootQuery> rootQueries;
    /**
     * @return A template for the signal title; if omitted, the title is generated based on the case name.
     * 
     */
    private @Nullable String signalTitleTemplate;

    private SecurityMonitoringRuleOptionsThirdPartyRuleOptions() {}
    /**
     * @return Notification targets for the default rule case, when none of the third-party cases match.
     * 
     */
    public List<String> defaultNotifications() {
        return this.defaultNotifications == null ? List.of() : this.defaultNotifications;
    }
    /**
     * @return Severity of the default rule case, when none of the third-party cases match. Valid values are `info`, `low`, `medium`, `high`, `critical`.
     * 
     */
    public String defaultStatus() {
        return this.defaultStatus;
    }
    /**
     * @return Queries to be combined with third-party case queries. Each of them can have different group by fields, to aggregate differently based on the type of alert.
     * 
     */
    public List<SecurityMonitoringRuleOptionsThirdPartyRuleOptionsRootQuery> rootQueries() {
        return this.rootQueries;
    }
    /**
     * @return A template for the signal title; if omitted, the title is generated based on the case name.
     * 
     */
    public Optional<String> signalTitleTemplate() {
        return Optional.ofNullable(this.signalTitleTemplate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityMonitoringRuleOptionsThirdPartyRuleOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> defaultNotifications;
        private String defaultStatus;
        private List<SecurityMonitoringRuleOptionsThirdPartyRuleOptionsRootQuery> rootQueries;
        private @Nullable String signalTitleTemplate;
        public Builder() {}
        public Builder(SecurityMonitoringRuleOptionsThirdPartyRuleOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultNotifications = defaults.defaultNotifications;
    	      this.defaultStatus = defaults.defaultStatus;
    	      this.rootQueries = defaults.rootQueries;
    	      this.signalTitleTemplate = defaults.signalTitleTemplate;
        }

        @CustomType.Setter
        public Builder defaultNotifications(@Nullable List<String> defaultNotifications) {

            this.defaultNotifications = defaultNotifications;
            return this;
        }
        public Builder defaultNotifications(String... defaultNotifications) {
            return defaultNotifications(List.of(defaultNotifications));
        }
        @CustomType.Setter
        public Builder defaultStatus(String defaultStatus) {
            if (defaultStatus == null) {
              throw new MissingRequiredPropertyException("SecurityMonitoringRuleOptionsThirdPartyRuleOptions", "defaultStatus");
            }
            this.defaultStatus = defaultStatus;
            return this;
        }
        @CustomType.Setter
        public Builder rootQueries(List<SecurityMonitoringRuleOptionsThirdPartyRuleOptionsRootQuery> rootQueries) {
            if (rootQueries == null) {
              throw new MissingRequiredPropertyException("SecurityMonitoringRuleOptionsThirdPartyRuleOptions", "rootQueries");
            }
            this.rootQueries = rootQueries;
            return this;
        }
        public Builder rootQueries(SecurityMonitoringRuleOptionsThirdPartyRuleOptionsRootQuery... rootQueries) {
            return rootQueries(List.of(rootQueries));
        }
        @CustomType.Setter
        public Builder signalTitleTemplate(@Nullable String signalTitleTemplate) {

            this.signalTitleTemplate = signalTitleTemplate;
            return this;
        }
        public SecurityMonitoringRuleOptionsThirdPartyRuleOptions build() {
            final var _resultValue = new SecurityMonitoringRuleOptionsThirdPartyRuleOptions();
            _resultValue.defaultNotifications = defaultNotifications;
            _resultValue.defaultStatus = defaultStatus;
            _resultValue.rootQueries = rootQueries;
            _resultValue.signalTitleTemplate = signalTitleTemplate;
            return _resultValue;
        }
    }
}
