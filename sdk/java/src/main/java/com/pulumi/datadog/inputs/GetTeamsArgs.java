// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.GetTeamsTeamArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTeamsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTeamsArgs Empty = new GetTeamsArgs();

    /**
     * Search query. Can be team name, team handle, or email of team member.
     * 
     */
    @Import(name="filterKeyword")
    private @Nullable Output<String> filterKeyword;

    /**
     * @return Search query. Can be team name, team handle, or email of team member.
     * 
     */
    public Optional<Output<String>> filterKeyword() {
        return Optional.ofNullable(this.filterKeyword);
    }

    /**
     * When true, only returns teams the current user belongs to.
     * 
     */
    @Import(name="filterMe")
    private @Nullable Output<Boolean> filterMe;

    /**
     * @return When true, only returns teams the current user belongs to.
     * 
     */
    public Optional<Output<Boolean>> filterMe() {
        return Optional.ofNullable(this.filterMe);
    }

    /**
     * List of teams
     * 
     */
    @Import(name="teams")
    private @Nullable Output<List<GetTeamsTeamArgs>> teams;

    /**
     * @return List of teams
     * 
     */
    public Optional<Output<List<GetTeamsTeamArgs>>> teams() {
        return Optional.ofNullable(this.teams);
    }

    private GetTeamsArgs() {}

    private GetTeamsArgs(GetTeamsArgs $) {
        this.filterKeyword = $.filterKeyword;
        this.filterMe = $.filterMe;
        this.teams = $.teams;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTeamsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTeamsArgs $;

        public Builder() {
            $ = new GetTeamsArgs();
        }

        public Builder(GetTeamsArgs defaults) {
            $ = new GetTeamsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filterKeyword Search query. Can be team name, team handle, or email of team member.
         * 
         * @return builder
         * 
         */
        public Builder filterKeyword(@Nullable Output<String> filterKeyword) {
            $.filterKeyword = filterKeyword;
            return this;
        }

        /**
         * @param filterKeyword Search query. Can be team name, team handle, or email of team member.
         * 
         * @return builder
         * 
         */
        public Builder filterKeyword(String filterKeyword) {
            return filterKeyword(Output.of(filterKeyword));
        }

        /**
         * @param filterMe When true, only returns teams the current user belongs to.
         * 
         * @return builder
         * 
         */
        public Builder filterMe(@Nullable Output<Boolean> filterMe) {
            $.filterMe = filterMe;
            return this;
        }

        /**
         * @param filterMe When true, only returns teams the current user belongs to.
         * 
         * @return builder
         * 
         */
        public Builder filterMe(Boolean filterMe) {
            return filterMe(Output.of(filterMe));
        }

        /**
         * @param teams List of teams
         * 
         * @return builder
         * 
         */
        public Builder teams(@Nullable Output<List<GetTeamsTeamArgs>> teams) {
            $.teams = teams;
            return this;
        }

        /**
         * @param teams List of teams
         * 
         * @return builder
         * 
         */
        public Builder teams(List<GetTeamsTeamArgs> teams) {
            return teams(Output.of(teams));
        }

        /**
         * @param teams List of teams
         * 
         * @return builder
         * 
         */
        public Builder teams(GetTeamsTeamArgs... teams) {
            return teams(List.of(teams));
        }

        public GetTeamsArgs build() {
            return $;
        }
    }

}
