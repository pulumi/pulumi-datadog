// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticsTestBrowserVariableArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticsTestBrowserVariableArgs Empty = new SyntheticsTestBrowserVariableArgs();

    /**
     * Example for the variable. Defaults to `&#34;&#34;`.
     * 
     */
    @Import(name="example")
    private @Nullable Output<String> example;

    /**
     * @return Example for the variable. Defaults to `&#34;&#34;`.
     * 
     */
    public Optional<Output<String>> example() {
        return Optional.ofNullable(this.example);
    }

    /**
     * ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the variable.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the variable.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Pattern of the variable. Defaults to `&#34;&#34;`.
     * 
     */
    @Import(name="pattern")
    private @Nullable Output<String> pattern;

    /**
     * @return Pattern of the variable. Defaults to `&#34;&#34;`.
     * 
     */
    public Optional<Output<String>> pattern() {
        return Optional.ofNullable(this.pattern);
    }

    /**
     * Determines whether or not the browser test variable is obfuscated. Can only be used with a browser variable of type `text`
     * 
     */
    @Import(name="secure")
    private @Nullable Output<Boolean> secure;

    /**
     * @return Determines whether or not the browser test variable is obfuscated. Can only be used with a browser variable of type `text`
     * 
     */
    public Optional<Output<Boolean>> secure() {
        return Optional.ofNullable(this.secure);
    }

    /**
     * Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private SyntheticsTestBrowserVariableArgs() {}

    private SyntheticsTestBrowserVariableArgs(SyntheticsTestBrowserVariableArgs $) {
        this.example = $.example;
        this.id = $.id;
        this.name = $.name;
        this.pattern = $.pattern;
        this.secure = $.secure;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticsTestBrowserVariableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticsTestBrowserVariableArgs $;

        public Builder() {
            $ = new SyntheticsTestBrowserVariableArgs();
        }

        public Builder(SyntheticsTestBrowserVariableArgs defaults) {
            $ = new SyntheticsTestBrowserVariableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param example Example for the variable. Defaults to `&#34;&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder example(@Nullable Output<String> example) {
            $.example = example;
            return this;
        }

        /**
         * @param example Example for the variable. Defaults to `&#34;&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder example(String example) {
            return example(Output.of(example));
        }

        /**
         * @param id ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Name of the variable.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the variable.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pattern Pattern of the variable. Defaults to `&#34;&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder pattern(@Nullable Output<String> pattern) {
            $.pattern = pattern;
            return this;
        }

        /**
         * @param pattern Pattern of the variable. Defaults to `&#34;&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder pattern(String pattern) {
            return pattern(Output.of(pattern));
        }

        /**
         * @param secure Determines whether or not the browser test variable is obfuscated. Can only be used with a browser variable of type `text`
         * 
         * @return builder
         * 
         */
        public Builder secure(@Nullable Output<Boolean> secure) {
            $.secure = secure;
            return this;
        }

        /**
         * @param secure Determines whether or not the browser test variable is obfuscated. Can only be used with a browser variable of type `text`
         * 
         * @return builder
         * 
         */
        public Builder secure(Boolean secure) {
            return secure(Output.of(secure));
        }

        /**
         * @param type Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public SyntheticsTestBrowserVariableArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("SyntheticsTestBrowserVariableArgs", "name");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("SyntheticsTestBrowserVariableArgs", "type");
            }
            return $;
        }
    }

}
