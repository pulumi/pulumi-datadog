// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamState extends com.pulumi.resources.ResourceArgs {

    public static final TeamState Empty = new TeamState();

    /**
     * Free-form markdown description/content for the team&#39;s homepage.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Free-form markdown description/content for the team&#39;s homepage.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The team&#39;s identifier
     * 
     */
    @Import(name="handle")
    private @Nullable Output<String> handle;

    /**
     * @return The team&#39;s identifier
     * 
     */
    public Optional<Output<String>> handle() {
        return Optional.ofNullable(this.handle);
    }

    /**
     * The number of links belonging to the team.
     * 
     */
    @Import(name="linkCount")
    private @Nullable Output<Integer> linkCount;

    /**
     * @return The number of links belonging to the team.
     * 
     */
    public Optional<Output<Integer>> linkCount() {
        return Optional.ofNullable(this.linkCount);
    }

    /**
     * The name of the team.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the team.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A brief summary of the team, derived from the `description`.
     * 
     */
    @Import(name="summary")
    private @Nullable Output<String> summary;

    /**
     * @return A brief summary of the team, derived from the `description`.
     * 
     */
    public Optional<Output<String>> summary() {
        return Optional.ofNullable(this.summary);
    }

    /**
     * The number of users belonging to the team.
     * 
     */
    @Import(name="userCount")
    private @Nullable Output<Integer> userCount;

    /**
     * @return The number of users belonging to the team.
     * 
     */
    public Optional<Output<Integer>> userCount() {
        return Optional.ofNullable(this.userCount);
    }

    private TeamState() {}

    private TeamState(TeamState $) {
        this.description = $.description;
        this.handle = $.handle;
        this.linkCount = $.linkCount;
        this.name = $.name;
        this.summary = $.summary;
        this.userCount = $.userCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamState $;

        public Builder() {
            $ = new TeamState();
        }

        public Builder(TeamState defaults) {
            $ = new TeamState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Free-form markdown description/content for the team&#39;s homepage.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Free-form markdown description/content for the team&#39;s homepage.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param handle The team&#39;s identifier
         * 
         * @return builder
         * 
         */
        public Builder handle(@Nullable Output<String> handle) {
            $.handle = handle;
            return this;
        }

        /**
         * @param handle The team&#39;s identifier
         * 
         * @return builder
         * 
         */
        public Builder handle(String handle) {
            return handle(Output.of(handle));
        }

        /**
         * @param linkCount The number of links belonging to the team.
         * 
         * @return builder
         * 
         */
        public Builder linkCount(@Nullable Output<Integer> linkCount) {
            $.linkCount = linkCount;
            return this;
        }

        /**
         * @param linkCount The number of links belonging to the team.
         * 
         * @return builder
         * 
         */
        public Builder linkCount(Integer linkCount) {
            return linkCount(Output.of(linkCount));
        }

        /**
         * @param name The name of the team.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the team.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param summary A brief summary of the team, derived from the `description`.
         * 
         * @return builder
         * 
         */
        public Builder summary(@Nullable Output<String> summary) {
            $.summary = summary;
            return this;
        }

        /**
         * @param summary A brief summary of the team, derived from the `description`.
         * 
         * @return builder
         * 
         */
        public Builder summary(String summary) {
            return summary(Output.of(summary));
        }

        /**
         * @param userCount The number of users belonging to the team.
         * 
         * @return builder
         * 
         */
        public Builder userCount(@Nullable Output<Integer> userCount) {
            $.userCount = userCount;
            return this;
        }

        /**
         * @param userCount The number of users belonging to the team.
         * 
         * @return builder
         * 
         */
        public Builder userCount(Integer userCount) {
            return userCount(Output.of(userCount));
        }

        public TeamState build() {
            return $;
        }
    }

}
