// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.datadog.SyntheticsTestArgs;
import com.pulumi.datadog.Utilities;
import com.pulumi.datadog.inputs.SyntheticsTestState;
import com.pulumi.datadog.outputs.SyntheticsTestApiStep;
import com.pulumi.datadog.outputs.SyntheticsTestAssertion;
import com.pulumi.datadog.outputs.SyntheticsTestBrowserStep;
import com.pulumi.datadog.outputs.SyntheticsTestBrowserVariable;
import com.pulumi.datadog.outputs.SyntheticsTestConfigVariable;
import com.pulumi.datadog.outputs.SyntheticsTestOptionsList;
import com.pulumi.datadog.outputs.SyntheticsTestRequestBasicauth;
import com.pulumi.datadog.outputs.SyntheticsTestRequestClientCertificate;
import com.pulumi.datadog.outputs.SyntheticsTestRequestDefinition;
import com.pulumi.datadog.outputs.SyntheticsTestRequestFile;
import com.pulumi.datadog.outputs.SyntheticsTestRequestProxy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Datadog synthetics test resource. This can be used to create and manage Datadog synthetics test.
 * 
 * #### *Warning*
 * Starting from version 3.1.0+, the direct usage of global variables in the configuration is deprecated, in favor of
 * local variables of type `global`. As an example, if you were previously using `{{ GLOBAL_VAR }}` directly in your
 * configuration, add a `config_variable` of type `global` with the `id` matching the `id` of the global variable `GLOBAL_VAR`, which can be found in the Synthetics UI or from the output of the `datadog.SyntheticsGlobalVariable` resource. The name can be chosen freely.
 * 
 * In practice, it means going from (simplified configuration):
 * 
 * to
 * 
 * which you can now use in your request definition:
 * 
 * ## Import
 * 
 * Synthetics tests can be imported using their public string ID, e.g.
 * 
 * ```sh
 * $ pulumi import datadog:index/syntheticsTest:SyntheticsTest fizz abc-123-xyz
 * ```
 * 
 */
@ResourceType(type="datadog:index/syntheticsTest:SyntheticsTest")
public class SyntheticsTest extends com.pulumi.resources.CustomResource {
    /**
     * Steps for multi-step api tests
     * 
     */
    @Export(name="apiSteps", refs={List.class,SyntheticsTestApiStep.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticsTestApiStep>> apiSteps;

    /**
     * @return Steps for multi-step api tests
     * 
     */
    public Output<Optional<List<SyntheticsTestApiStep>>> apiSteps() {
        return Codegen.optional(this.apiSteps);
    }
    /**
     * Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
     * 
     */
    @Export(name="assertions", refs={List.class,SyntheticsTestAssertion.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticsTestAssertion>> assertions;

    /**
     * @return Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
     * 
     */
    public Output<Optional<List<SyntheticsTestAssertion>>> assertions() {
        return Codegen.optional(this.assertions);
    }
    /**
     * Steps for browser tests.
     * 
     */
    @Export(name="browserSteps", refs={List.class,SyntheticsTestBrowserStep.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticsTestBrowserStep>> browserSteps;

    /**
     * @return Steps for browser tests.
     * 
     */
    public Output<Optional<List<SyntheticsTestBrowserStep>>> browserSteps() {
        return Codegen.optional(this.browserSteps);
    }
    /**
     * Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
     * 
     */
    @Export(name="browserVariables", refs={List.class,SyntheticsTestBrowserVariable.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticsTestBrowserVariable>> browserVariables;

    /**
     * @return Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
     * 
     */
    public Output<Optional<List<SyntheticsTestBrowserVariable>>> browserVariables() {
        return Codegen.optional(this.browserVariables);
    }
    /**
     * Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
     * 
     */
    @Export(name="configVariables", refs={List.class,SyntheticsTestConfigVariable.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticsTestConfigVariable>> configVariables;

    /**
     * @return Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
     * 
     */
    public Output<Optional<List<SyntheticsTestConfigVariable>>> configVariables() {
        return Codegen.optional(this.configVariables);
    }
    /**
     * Required if `type = &#34;browser&#34;`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
     * 
     */
    @Export(name="deviceIds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> deviceIds;

    /**
     * @return Required if `type = &#34;browser&#34;`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
     * 
     */
    public Output<Optional<List<String>>> deviceIds() {
        return Codegen.optional(this.deviceIds);
    }
    /**
     * A boolean indicating whether this synthetics test can be deleted even if it&#39;s referenced by other resources (for example, SLOs and composite monitors).
     * 
     */
    @Export(name="forceDeleteDependencies", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceDeleteDependencies;

    /**
     * @return A boolean indicating whether this synthetics test can be deleted even if it&#39;s referenced by other resources (for example, SLOs and composite monitors).
     * 
     */
    public Output<Optional<Boolean>> forceDeleteDependencies() {
        return Codegen.optional(this.forceDeleteDependencies);
    }
    /**
     * Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
     * 
     */
    @Export(name="locations", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> locations;

    /**
     * @return Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
     * 
     */
    public Output<List<String>> locations() {
        return this.locations;
    }
    /**
     * A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `{@literal @}username` notation as events. Defaults to `&#34;&#34;`.
     * 
     */
    @Export(name="message", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> message;

    /**
     * @return A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `{@literal @}username` notation as events. Defaults to `&#34;&#34;`.
     * 
     */
    public Output<Optional<String>> message() {
        return Codegen.optional(this.message);
    }
    /**
     * ID of the monitor associated with the Datadog synthetics test.
     * 
     */
    @Export(name="monitorId", refs={Integer.class}, tree="[0]")
    private Output<Integer> monitorId;

    /**
     * @return ID of the monitor associated with the Datadog synthetics test.
     * 
     */
    public Output<Integer> monitorId() {
        return this.monitorId;
    }
    /**
     * Name of Datadog synthetics test.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of Datadog synthetics test.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="optionsList", refs={SyntheticsTestOptionsList.class}, tree="[0]")
    private Output</* @Nullable */ SyntheticsTestOptionsList> optionsList;

    public Output<Optional<SyntheticsTestOptionsList>> optionsList() {
        return Codegen.optional(this.optionsList);
    }
    /**
     * The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
     * 
     */
    @Export(name="requestBasicauth", refs={SyntheticsTestRequestBasicauth.class}, tree="[0]")
    private Output</* @Nullable */ SyntheticsTestRequestBasicauth> requestBasicauth;

    /**
     * @return The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
     * 
     */
    public Output<Optional<SyntheticsTestRequestBasicauth>> requestBasicauth() {
        return Codegen.optional(this.requestBasicauth);
    }
    /**
     * Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
     * 
     */
    @Export(name="requestClientCertificate", refs={SyntheticsTestRequestClientCertificate.class}, tree="[0]")
    private Output</* @Nullable */ SyntheticsTestRequestClientCertificate> requestClientCertificate;

    /**
     * @return Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
     * 
     */
    public Output<Optional<SyntheticsTestRequestClientCertificate>> requestClientCertificate() {
        return Codegen.optional(this.requestClientCertificate);
    }
    /**
     * Required if `type = &#34;api&#34;`. The synthetics test request.
     * 
     */
    @Export(name="requestDefinition", refs={SyntheticsTestRequestDefinition.class}, tree="[0]")
    private Output</* @Nullable */ SyntheticsTestRequestDefinition> requestDefinition;

    /**
     * @return Required if `type = &#34;api&#34;`. The synthetics test request.
     * 
     */
    public Output<Optional<SyntheticsTestRequestDefinition>> requestDefinition() {
        return Codegen.optional(this.requestDefinition);
    }
    /**
     * Files to be used as part of the request in the test.
     * 
     */
    @Export(name="requestFiles", refs={List.class,SyntheticsTestRequestFile.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticsTestRequestFile>> requestFiles;

    /**
     * @return Files to be used as part of the request in the test.
     * 
     */
    public Output<Optional<List<SyntheticsTestRequestFile>>> requestFiles() {
        return Codegen.optional(this.requestFiles);
    }
    /**
     * Header name and value map.
     * 
     */
    @Export(name="requestHeaders", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> requestHeaders;

    /**
     * @return Header name and value map.
     * 
     */
    public Output<Optional<Map<String,Object>>> requestHeaders() {
        return Codegen.optional(this.requestHeaders);
    }
    /**
     * Metadata to include when performing the gRPC test.
     * 
     */
    @Export(name="requestMetadata", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> requestMetadata;

    /**
     * @return Metadata to include when performing the gRPC test.
     * 
     */
    public Output<Optional<Map<String,Object>>> requestMetadata() {
        return Codegen.optional(this.requestMetadata);
    }
    /**
     * The proxy to perform the test.
     * 
     */
    @Export(name="requestProxy", refs={SyntheticsTestRequestProxy.class}, tree="[0]")
    private Output</* @Nullable */ SyntheticsTestRequestProxy> requestProxy;

    /**
     * @return The proxy to perform the test.
     * 
     */
    public Output<Optional<SyntheticsTestRequestProxy>> requestProxy() {
        return Codegen.optional(this.requestProxy);
    }
    /**
     * Query arguments name and value map.
     * 
     */
    @Export(name="requestQuery", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> requestQuery;

    /**
     * @return Query arguments name and value map.
     * 
     */
    public Output<Optional<Map<String,Object>>> requestQuery() {
        return Codegen.optional(this.requestQuery);
    }
    /**
     * Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
     * 
     */
    @Export(name="setCookie", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> setCookie;

    /**
     * @return Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
     * 
     */
    public Output<Optional<String>> setCookie() {
        return Codegen.optional(this.setCookie);
    }
    /**
     * Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
     * 
     */
    @Export(name="subtype", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> subtype;

    /**
     * @return The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
     * 
     */
    public Output<Optional<String>> subtype() {
        return Codegen.optional(this.subtype);
    }
    /**
     * A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Synthetics test type. Valid values are `api`, `browser`.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Synthetics test type. Valid values are `api`, `browser`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Variables defined from JavaScript code for API HTTP tests.
     * 
     */
    @Export(name="variablesFromScript", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> variablesFromScript;

    /**
     * @return Variables defined from JavaScript code for API HTTP tests.
     * 
     */
    public Output<Optional<String>> variablesFromScript() {
        return Codegen.optional(this.variablesFromScript);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SyntheticsTest(String name) {
        this(name, SyntheticsTestArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SyntheticsTest(String name, SyntheticsTestArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SyntheticsTest(String name, SyntheticsTestArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("datadog:index/syntheticsTest:SyntheticsTest", name, args == null ? SyntheticsTestArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SyntheticsTest(String name, Output<String> id, @Nullable SyntheticsTestState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("datadog:index/syntheticsTest:SyntheticsTest", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SyntheticsTest get(String name, Output<String> id, @Nullable SyntheticsTestState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SyntheticsTest(name, id, state, options);
    }
}
