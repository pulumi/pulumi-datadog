// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.datadog.SyntheticsTestArgs;
import com.pulumi.datadog.Utilities;
import com.pulumi.datadog.inputs.SyntheticsTestState;
import com.pulumi.datadog.outputs.SyntheticsTestApiStep;
import com.pulumi.datadog.outputs.SyntheticsTestAssertion;
import com.pulumi.datadog.outputs.SyntheticsTestBrowserStep;
import com.pulumi.datadog.outputs.SyntheticsTestBrowserVariable;
import com.pulumi.datadog.outputs.SyntheticsTestConfigVariable;
import com.pulumi.datadog.outputs.SyntheticsTestOptionsList;
import com.pulumi.datadog.outputs.SyntheticsTestRequestBasicauth;
import com.pulumi.datadog.outputs.SyntheticsTestRequestClientCertificate;
import com.pulumi.datadog.outputs.SyntheticsTestRequestDefinition;
import com.pulumi.datadog.outputs.SyntheticsTestRequestFile;
import com.pulumi.datadog.outputs.SyntheticsTestRequestProxy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Datadog synthetics test resource. This can be used to create and manage Datadog synthetics test.
 * 
 * #### *Warning*
 * Starting from version 3.1.0+, the direct usage of global variables in the configuration is deprecated, in favor of
 * local variables of type `global`. As an example, if you were previously using `{{ GLOBAL_VAR }}` directly in your
 * configuration, add a `config_variable` of type `global` with the `id` matching the `id` of the global variable `GLOBAL_VAR`, which can be found in the Synthetics UI or from the output of the `datadog.SyntheticsGlobalVariable` resource. The name can be chosen freely.
 * 
 * In practice, it means going from (simplified configuration):
 * 
 * to
 * 
 * which you can now use in your request definition:
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.datadog.SyntheticsTest;
 * import com.pulumi.datadog.SyntheticsTestArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestRequestDefinitionArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestAssertionArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestOptionsListArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestOptionsListRetryArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestOptionsListMonitorOptionsArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestConfigVariableArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestApiStepArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestApiStepRequestDefinitionArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestBrowserStepArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestBrowserStepParamsArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestBrowserVariableArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         // Example Usage (Synthetics API test)
 *         // Create a new Datadog Synthetics API/HTTP test on https://www.example.org
 *         var testUptime = new SyntheticsTest("testUptime", SyntheticsTestArgs.builder()
 *             .name("An Uptime test on example.org")
 *             .type("api")
 *             .subtype("http")
 *             .status("live")
 *             .message("Notify }{@literal @}{@code pagerduty")
 *             .locations("aws:eu-central-1")
 *             .tags(            
 *                 "foo:bar",
 *                 "foo",
 *                 "env:test")
 *             .requestDefinition(SyntheticsTestRequestDefinitionArgs.builder()
 *                 .method("GET")
 *                 .url("https://www.example.org")
 *                 .build())
 *             .requestHeaders(Map.of("Content-Type", "application/json"))
 *             .assertions(SyntheticsTestAssertionArgs.builder()
 *                 .type("statusCode")
 *                 .operator("is")
 *                 .target("200")
 *                 .build())
 *             .optionsList(SyntheticsTestOptionsListArgs.builder()
 *                 .tickEvery(900)
 *                 .retry(SyntheticsTestOptionsListRetryArgs.builder()
 *                     .count(2)
 *                     .interval(300)
 *                     .build())
 *                 .monitorOptions(SyntheticsTestOptionsListMonitorOptionsArgs.builder()
 *                     .renotifyInterval(120)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         // Example Usage (Authenticated API test)
 *         // Create a new Datadog Synthetics API/HTTP test on https://www.example.org
 *         var testApi = new SyntheticsTest("testApi", SyntheticsTestArgs.builder()
 *             .name("An API test on example.org")
 *             .type("api")
 *             .subtype("http")
 *             .status("live")
 *             .message("Notify }{@literal @}{@code pagerduty")
 *             .locations("aws:eu-central-1")
 *             .tags(            
 *                 "foo:bar",
 *                 "foo",
 *                 "env:test")
 *             .requestDefinition(SyntheticsTestRequestDefinitionArgs.builder()
 *                 .method("GET")
 *                 .url("https://www.example.org")
 *                 .build())
 *             .requestHeaders(Map.ofEntries(
 *                 Map.entry("Content-Type", "application/json"),
 *                 Map.entry("Authentication", "Token: 1234566789")
 *             ))
 *             .assertions(SyntheticsTestAssertionArgs.builder()
 *                 .type("statusCode")
 *                 .operator("is")
 *                 .target("200")
 *                 .build())
 *             .optionsList(SyntheticsTestOptionsListArgs.builder()
 *                 .tickEvery(900)
 *                 .retry(SyntheticsTestOptionsListRetryArgs.builder()
 *                     .count(2)
 *                     .interval(300)
 *                     .build())
 *                 .monitorOptions(SyntheticsTestOptionsListMonitorOptionsArgs.builder()
 *                     .renotifyInterval(120)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         // Example Usage (Synthetics SSL test)
 *         // Create a new Datadog Synthetics API/SSL test on example.org
 *         var testSsl = new SyntheticsTest("testSsl", SyntheticsTestArgs.builder()
 *             .name("An API test on example.org")
 *             .type("api")
 *             .subtype("ssl")
 *             .status("live")
 *             .message("Notify }{@literal @}{@code pagerduty")
 *             .locations("aws:eu-central-1")
 *             .tags(            
 *                 "foo:bar",
 *                 "foo",
 *                 "env:test")
 *             .requestDefinition(SyntheticsTestRequestDefinitionArgs.builder()
 *                 .host("example.org")
 *                 .port("443")
 *                 .build())
 *             .assertions(SyntheticsTestAssertionArgs.builder()
 *                 .type("certificate")
 *                 .operator("isInMoreThan")
 *                 .target(30)
 *                 .build())
 *             .optionsList(SyntheticsTestOptionsListArgs.builder()
 *                 .tickEvery(900)
 *                 .acceptSelfSigned(true)
 *                 .build())
 *             .build());
 * 
 *         // Example Usage (Synthetics TCP test)
 *         // Create a new Datadog Synthetics API/TCP test on example.org
 *         var testTcp = new SyntheticsTest("testTcp", SyntheticsTestArgs.builder()
 *             .name("An API test on example.org")
 *             .type("api")
 *             .subtype("tcp")
 *             .status("live")
 *             .message("Notify }{@literal @}{@code pagerduty")
 *             .locations("aws:eu-central-1")
 *             .tags(            
 *                 "foo:bar",
 *                 "foo",
 *                 "env:test")
 *             .requestDefinition(SyntheticsTestRequestDefinitionArgs.builder()
 *                 .host("example.org")
 *                 .port("443")
 *                 .build())
 *             .assertions(SyntheticsTestAssertionArgs.builder()
 *                 .type("responseTime")
 *                 .operator("lessThan")
 *                 .target(2000)
 *                 .build())
 *             .configVariables(SyntheticsTestConfigVariableArgs.builder()
 *                 .type("global")
 *                 .name("MY_GLOBAL_VAR")
 *                 .id("76636cd1-82e2-4aeb-9cfe-51366a8198a2")
 *                 .build())
 *             .optionsList(SyntheticsTestOptionsListArgs.builder()
 *                 .tickEvery(900)
 *                 .build())
 *             .build());
 * 
 *         // Example Usage (Synthetics DNS test)
 *         // Create a new Datadog Synthetics API/DNS test on example.org
 *         var testDns = new SyntheticsTest("testDns", SyntheticsTestArgs.builder()
 *             .name("An API test on example.org")
 *             .type("api")
 *             .subtype("dns")
 *             .status("live")
 *             .message("Notify }{@literal @}{@code pagerduty")
 *             .locations("aws:eu-central-1")
 *             .tags(            
 *                 "foo:bar",
 *                 "foo",
 *                 "env:test")
 *             .requestDefinition(SyntheticsTestRequestDefinitionArgs.builder()
 *                 .host("example.org")
 *                 .build())
 *             .assertions(SyntheticsTestAssertionArgs.builder()
 *                 .type("recordSome")
 *                 .operator("is")
 *                 .property("A")
 *                 .target("0.0.0.0")
 *                 .build())
 *             .optionsList(SyntheticsTestOptionsListArgs.builder()
 *                 .tickEvery(900)
 *                 .build())
 *             .build());
 * 
 *         // Example Usage (Synthetics Multistep API test)
 *         // Create a new Datadog Synthetics Multistep API test
 *         var testMultiStep = new SyntheticsTest("testMultiStep", SyntheticsTestArgs.builder()
 *             .name("Multistep API test")
 *             .type("api")
 *             .subtype("multi")
 *             .status("live")
 *             .locations("aws:eu-central-1")
 *             .tags(            
 *                 "foo:bar",
 *                 "foo",
 *                 "env:test")
 *             .apiSteps(            
 *                 SyntheticsTestApiStepArgs.builder()
 *                     .name("An API test on example.org")
 *                     .subtype("http")
 *                     .assertions(SyntheticsTestApiStepAssertionArgs.builder()
 *                         .type("statusCode")
 *                         .operator("is")
 *                         .target("200")
 *                         .build())
 *                     .requestDefinition(SyntheticsTestApiStepRequestDefinitionArgs.builder()
 *                         .method("GET")
 *                         .url("https://www.example.org")
 *                         .build())
 *                     .requestHeaders(Map.ofEntries(
 *                         Map.entry("Content-Type", "application/json"),
 *                         Map.entry("Authentication", "Token: 1234566789")
 *                     ))
 *                     .build(),
 *                 SyntheticsTestApiStepArgs.builder()
 *                     .name("An API test on example.org")
 *                     .subtype("http")
 *                     .assertions(SyntheticsTestApiStepAssertionArgs.builder()
 *                         .type("statusCode")
 *                         .operator("is")
 *                         .target("200")
 *                         .build())
 *                     .requestDefinition(SyntheticsTestApiStepRequestDefinitionArgs.builder()
 *                         .method("GET")
 *                         .url("http://example.org")
 *                         .build())
 *                     .build(),
 *                 SyntheticsTestApiStepArgs.builder()
 *                     .name("A gRPC health check on example.org")
 *                     .subtype("grpc")
 *                     .assertions(SyntheticsTestApiStepAssertionArgs.builder()
 *                         .type("statusCode")
 *                         .operator("is")
 *                         .target("200")
 *                         .build())
 *                     .requestDefinition(SyntheticsTestApiStepRequestDefinitionArgs.builder()
 *                         .host("example.org")
 *                         .port("443")
 *                         .callType("healthcheck")
 *                         .service("greeter.Greeter")
 *                         .build())
 *                     .build(),
 *                 SyntheticsTestApiStepArgs.builder()
 *                     .name("A gRPC behavior check on example.org")
 *                     .subtype("grpc")
 *                     .assertions(SyntheticsTestApiStepAssertionArgs.builder()
 *                         .type("statusCode")
 *                         .operator("is")
 *                         .target("200")
 *                         .build())
 *                     .requestDefinition(SyntheticsTestApiStepRequestDefinitionArgs.builder()
 *                         .host("example.org")
 *                         .port("443")
 *                         .callType("unary")
 *                         .service("greeter.Greeter")
 *                         .method("SayHello")
 *                         .message("}{{@code \"name\": \"John\"}}{@code ")
 *                         .plainProtoFile("""
 * syntax = "proto3";
 * 
 * package greeter;
 * 
 * // The greeting service definition.
 * service Greeter }{{@code
 *   // Sends a greeting
 *   rpc SayHello (HelloRequest) returns (HelloReply) }{}{@code
 * }}{@code
 * 
 * // The request message containing the user's name.
 * message HelloRequest }{{@code
 *   string name = 1;
 * }}{@code
 * 
 * // The response message containing the greetings
 * message HelloReply }{{@code
 *   string message = 1;
 * }}{@code
 *                         """)
 *                         .build())
 *                     .build())
 *             .optionsList(SyntheticsTestOptionsListArgs.builder()
 *                 .tickEvery(900)
 *                 .acceptSelfSigned(true)
 *                 .build())
 *             .build());
 * 
 *         // Example Usage (Synthetics Browser test)
 *         // Create a new Datadog Synthetics Browser test starting on https://www.example.org
 *         var testBrowser = new SyntheticsTest("testBrowser", SyntheticsTestArgs.builder()
 *             .name("A Browser test on example.org")
 *             .type("browser")
 *             .status("paused")
 *             .message("Notify }{@literal @}{@code qa")
 *             .deviceIds("laptop_large")
 *             .locations("aws:eu-central-1")
 *             .tags()
 *             .requestDefinition(SyntheticsTestRequestDefinitionArgs.builder()
 *                 .method("GET")
 *                 .url("https://www.example.org")
 *                 .build())
 *             .browserSteps(            
 *                 SyntheticsTestBrowserStepArgs.builder()
 *                     .name("Check current url")
 *                     .type("assertCurrentUrl")
 *                     .params(SyntheticsTestBrowserStepParamsArgs.builder()
 *                         .check("contains")
 *                         .value("datadoghq")
 *                         .build())
 *                     .build(),
 *                 SyntheticsTestBrowserStepArgs.builder()
 *                     .name("Test a downloaded file")
 *                     .type("assertFileDownload")
 *                     .params(SyntheticsTestBrowserStepParamsArgs.builder()
 *                         .file(serializeJson(
 *                             jsonObject(
 *                                 jsonProperty("md5", "abcdef1234567890"),
 *                                 jsonProperty("sizeCheck", jsonObject(
 *                                     jsonProperty("type", "equals"),
 *                                     jsonProperty("value", 1)
 *                                 )),
 *                                 jsonProperty("nameCheck", jsonObject(
 *                                     jsonProperty("type", "contains"),
 *                                     jsonProperty("value", ".xls")
 *                                 ))
 *                             )))
 *                         .build())
 *                     .build())
 *             .browserVariables(            
 *                 SyntheticsTestBrowserVariableArgs.builder()
 *                     .type("text")
 *                     .name("MY_PATTERN_VAR")
 *                     .pattern("}{{{@code numeric(3)}}}{@code ")
 *                     .example("597")
 *                     .build(),
 *                 SyntheticsTestBrowserVariableArgs.builder()
 *                     .type("email")
 *                     .name("MY_EMAIL_VAR")
 *                     .pattern("jd8-afe-ydv.}{{{@code  numeric(10) }}}{@literal @}{@code synthetics.dtdg.co")
 *                     .example("jd8-afe-ydv.4546132139}{@literal @}{@code synthetics.dtdg.co")
 *                     .build(),
 *                 SyntheticsTestBrowserVariableArgs.builder()
 *                     .type("global")
 *                     .name("MY_GLOBAL_VAR")
 *                     .id("76636cd1-82e2-4aeb-9cfe-51366a8198a2")
 *                     .build())
 *             .optionsList(SyntheticsTestOptionsListArgs.builder()
 *                 .tickEvery(3600)
 *                 .build())
 *             .build());
 * 
 *         // Example Usage (GRPC API behavior check test)
 *         // Create a new Datadog GRPC API test calling host example.org on port 443
 *         // targeting service `greeter.Greeter` with the method `SayHello`
 *         // and the message }{{@code "name": "John"}}{@code
 *         var testGrpcUnary = new SyntheticsTest("testGrpcUnary", SyntheticsTestArgs.builder()
 *             .name("GRPC API behavior check test")
 *             .type("api")
 *             .subtype("grpc")
 *             .status("live")
 *             .locations("aws:eu-central-1")
 *             .tags(            
 *                 "foo:bar",
 *                 "foo",
 *                 "env:test")
 *             .requestDefinition(SyntheticsTestRequestDefinitionArgs.builder()
 *                 .host("example.org")
 *                 .port("443")
 *                 .callType("unary")
 *                 .service("greeter.Greeter")
 *                 .method("SayHello")
 *                 .message("}{{@code \"name\": \"John\"}}{@code ")
 *                 .plainProtoFile("""
 * syntax = "proto3";
 * 
 * package greeter;
 * 
 * // The greeting service definition.
 * service Greeter }{{@code
 *   // Sends a greeting
 *   rpc SayHello (HelloRequest) returns (HelloReply) }{}{@code
 * }}{@code
 * 
 * // The request message containing the user's name.
 * message HelloRequest }{{@code
 *   string name = 1;
 * }}{@code
 * 
 * // The response message containing the greetings
 * message HelloReply }{{@code
 *   string message = 1;
 * }}{@code
 *                 """)
 *                 .build())
 *             .requestMetadata(Map.of("header", "value"))
 *             .assertions(            
 *                 SyntheticsTestAssertionArgs.builder()
 *                     .type("responseTime")
 *                     .operator("lessThan")
 *                     .target("2000")
 *                     .build(),
 *                 SyntheticsTestAssertionArgs.builder()
 *                     .operator("is")
 *                     .type("grpcHealthcheckStatus")
 *                     .target(1)
 *                     .build(),
 *                 SyntheticsTestAssertionArgs.builder()
 *                     .operator("is")
 *                     .type("grpcProto")
 *                     .target("proto target")
 *                     .build(),
 *                 SyntheticsTestAssertionArgs.builder()
 *                     .operator("is")
 *                     .property("property")
 *                     .type("grpcMetadata")
 *                     .target("123")
 *                     .build())
 *             .optionsList(SyntheticsTestOptionsListArgs.builder()
 *                 .tickEvery(900)
 *                 .build())
 *             .build());
 * 
 *         // Example Usage (GRPC API health check test)
 *         // Create a new Datadog GRPC API test calling host example.org on port 443
 *         // testing the overall health of the service
 *         var testGrpcHealth = new SyntheticsTest("testGrpcHealth", SyntheticsTestArgs.builder()
 *             .name("GRPC API health check test")
 *             .type("api")
 *             .subtype("grpc")
 *             .status("live")
 *             .locations("aws:eu-central-1")
 *             .tags(            
 *                 "foo:bar",
 *                 "foo",
 *                 "env:test")
 *             .requestDefinition(SyntheticsTestRequestDefinitionArgs.builder()
 *                 .host("example.org")
 *                 .port("443")
 *                 .callType("healthcheck")
 *                 .service("greeter.Greeter")
 *                 .build())
 *             .assertions(            
 *                 SyntheticsTestAssertionArgs.builder()
 *                     .type("responseTime")
 *                     .operator("lessThan")
 *                     .target("2000")
 *                     .build(),
 *                 SyntheticsTestAssertionArgs.builder()
 *                     .operator("is")
 *                     .type("grpcHealthcheckStatus")
 *                     .target(1)
 *                     .build())
 *             .optionsList(SyntheticsTestOptionsListArgs.builder()
 *                 .tickEvery(900)
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Synthetics tests can be imported using their public string ID, e.g.
 * 
 * ```sh
 * $ pulumi import datadog:index/syntheticsTest:SyntheticsTest fizz abc-123-xyz
 * ```
 * 
 */
@ResourceType(type="datadog:index/syntheticsTest:SyntheticsTest")
public class SyntheticsTest extends com.pulumi.resources.CustomResource {
    /**
     * Steps for multi-step api tests
     * 
     */
    @Export(name="apiSteps", refs={List.class,SyntheticsTestApiStep.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticsTestApiStep>> apiSteps;

    /**
     * @return Steps for multi-step api tests
     * 
     */
    public Output<Optional<List<SyntheticsTestApiStep>>> apiSteps() {
        return Codegen.optional(this.apiSteps);
    }
    /**
     * Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
     * 
     */
    @Export(name="assertions", refs={List.class,SyntheticsTestAssertion.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticsTestAssertion>> assertions;

    /**
     * @return Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
     * 
     */
    public Output<Optional<List<SyntheticsTestAssertion>>> assertions() {
        return Codegen.optional(this.assertions);
    }
    /**
     * Steps for browser tests.
     * 
     */
    @Export(name="browserSteps", refs={List.class,SyntheticsTestBrowserStep.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticsTestBrowserStep>> browserSteps;

    /**
     * @return Steps for browser tests.
     * 
     */
    public Output<Optional<List<SyntheticsTestBrowserStep>>> browserSteps() {
        return Codegen.optional(this.browserSteps);
    }
    /**
     * Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
     * 
     */
    @Export(name="browserVariables", refs={List.class,SyntheticsTestBrowserVariable.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticsTestBrowserVariable>> browserVariables;

    /**
     * @return Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
     * 
     */
    public Output<Optional<List<SyntheticsTestBrowserVariable>>> browserVariables() {
        return Codegen.optional(this.browserVariables);
    }
    /**
     * Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
     * 
     */
    @Export(name="configVariables", refs={List.class,SyntheticsTestConfigVariable.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticsTestConfigVariable>> configVariables;

    /**
     * @return Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
     * 
     */
    public Output<Optional<List<SyntheticsTestConfigVariable>>> configVariables() {
        return Codegen.optional(this.configVariables);
    }
    /**
     * Required if `type = &#34;browser&#34;`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
     * 
     */
    @Export(name="deviceIds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> deviceIds;

    /**
     * @return Required if `type = &#34;browser&#34;`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
     * 
     */
    public Output<Optional<List<String>>> deviceIds() {
        return Codegen.optional(this.deviceIds);
    }
    /**
     * A boolean indicating whether this synthetics test can be deleted even if it&#39;s referenced by other resources (for example, SLOs and composite monitors).
     * 
     */
    @Export(name="forceDeleteDependencies", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceDeleteDependencies;

    /**
     * @return A boolean indicating whether this synthetics test can be deleted even if it&#39;s referenced by other resources (for example, SLOs and composite monitors).
     * 
     */
    public Output<Optional<Boolean>> forceDeleteDependencies() {
        return Codegen.optional(this.forceDeleteDependencies);
    }
    /**
     * Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
     * 
     */
    @Export(name="locations", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> locations;

    /**
     * @return Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
     * 
     */
    public Output<List<String>> locations() {
        return this.locations;
    }
    /**
     * A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `{@literal @}username` notation as events. Defaults to `&#34;&#34;`.
     * 
     */
    @Export(name="message", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> message;

    /**
     * @return A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `{@literal @}username` notation as events. Defaults to `&#34;&#34;`.
     * 
     */
    public Output<Optional<String>> message() {
        return Codegen.optional(this.message);
    }
    /**
     * ID of the monitor associated with the Datadog synthetics test.
     * 
     */
    @Export(name="monitorId", refs={Integer.class}, tree="[0]")
    private Output<Integer> monitorId;

    /**
     * @return ID of the monitor associated with the Datadog synthetics test.
     * 
     */
    public Output<Integer> monitorId() {
        return this.monitorId;
    }
    /**
     * Name of Datadog synthetics test.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of Datadog synthetics test.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="optionsList", refs={SyntheticsTestOptionsList.class}, tree="[0]")
    private Output</* @Nullable */ SyntheticsTestOptionsList> optionsList;

    public Output<Optional<SyntheticsTestOptionsList>> optionsList() {
        return Codegen.optional(this.optionsList);
    }
    /**
     * The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
     * 
     */
    @Export(name="requestBasicauth", refs={SyntheticsTestRequestBasicauth.class}, tree="[0]")
    private Output</* @Nullable */ SyntheticsTestRequestBasicauth> requestBasicauth;

    /**
     * @return The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
     * 
     */
    public Output<Optional<SyntheticsTestRequestBasicauth>> requestBasicauth() {
        return Codegen.optional(this.requestBasicauth);
    }
    /**
     * Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
     * 
     */
    @Export(name="requestClientCertificate", refs={SyntheticsTestRequestClientCertificate.class}, tree="[0]")
    private Output</* @Nullable */ SyntheticsTestRequestClientCertificate> requestClientCertificate;

    /**
     * @return Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
     * 
     */
    public Output<Optional<SyntheticsTestRequestClientCertificate>> requestClientCertificate() {
        return Codegen.optional(this.requestClientCertificate);
    }
    /**
     * Required if `type = &#34;api&#34;`. The synthetics test request.
     * 
     */
    @Export(name="requestDefinition", refs={SyntheticsTestRequestDefinition.class}, tree="[0]")
    private Output</* @Nullable */ SyntheticsTestRequestDefinition> requestDefinition;

    /**
     * @return Required if `type = &#34;api&#34;`. The synthetics test request.
     * 
     */
    public Output<Optional<SyntheticsTestRequestDefinition>> requestDefinition() {
        return Codegen.optional(this.requestDefinition);
    }
    /**
     * Files to be used as part of the request in the test.
     * 
     */
    @Export(name="requestFiles", refs={List.class,SyntheticsTestRequestFile.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticsTestRequestFile>> requestFiles;

    /**
     * @return Files to be used as part of the request in the test.
     * 
     */
    public Output<Optional<List<SyntheticsTestRequestFile>>> requestFiles() {
        return Codegen.optional(this.requestFiles);
    }
    /**
     * Header name and value map.
     * 
     */
    @Export(name="requestHeaders", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> requestHeaders;

    /**
     * @return Header name and value map.
     * 
     */
    public Output<Optional<Map<String,String>>> requestHeaders() {
        return Codegen.optional(this.requestHeaders);
    }
    /**
     * Metadata to include when performing the gRPC request.
     * 
     */
    @Export(name="requestMetadata", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> requestMetadata;

    /**
     * @return Metadata to include when performing the gRPC request.
     * 
     */
    public Output<Optional<Map<String,String>>> requestMetadata() {
        return Codegen.optional(this.requestMetadata);
    }
    /**
     * The proxy to perform the test.
     * 
     */
    @Export(name="requestProxy", refs={SyntheticsTestRequestProxy.class}, tree="[0]")
    private Output</* @Nullable */ SyntheticsTestRequestProxy> requestProxy;

    /**
     * @return The proxy to perform the test.
     * 
     */
    public Output<Optional<SyntheticsTestRequestProxy>> requestProxy() {
        return Codegen.optional(this.requestProxy);
    }
    /**
     * Query arguments name and value map.
     * 
     */
    @Export(name="requestQuery", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> requestQuery;

    /**
     * @return Query arguments name and value map.
     * 
     */
    public Output<Optional<Map<String,String>>> requestQuery() {
        return Codegen.optional(this.requestQuery);
    }
    /**
     * Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
     * 
     */
    @Export(name="setCookie", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> setCookie;

    /**
     * @return Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
     * 
     */
    public Output<Optional<String>> setCookie() {
        return Codegen.optional(this.setCookie);
    }
    /**
     * Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
     * 
     */
    @Export(name="subtype", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> subtype;

    /**
     * @return The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
     * 
     */
    public Output<Optional<String>> subtype() {
        return Codegen.optional(this.subtype);
    }
    /**
     * A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Synthetics test type. Valid values are `api`, `browser`.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Synthetics test type. Valid values are `api`, `browser`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Variables defined from JavaScript code for API HTTP tests.
     * 
     */
    @Export(name="variablesFromScript", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> variablesFromScript;

    /**
     * @return Variables defined from JavaScript code for API HTTP tests.
     * 
     */
    public Output<Optional<String>> variablesFromScript() {
        return Codegen.optional(this.variablesFromScript);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SyntheticsTest(java.lang.String name) {
        this(name, SyntheticsTestArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SyntheticsTest(java.lang.String name, SyntheticsTestArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SyntheticsTest(java.lang.String name, SyntheticsTestArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("datadog:index/syntheticsTest:SyntheticsTest", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private SyntheticsTest(java.lang.String name, Output<java.lang.String> id, @Nullable SyntheticsTestState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("datadog:index/syntheticsTest:SyntheticsTest", name, state, makeResourceOptions(options, id), false);
    }

    private static SyntheticsTestArgs makeArgs(SyntheticsTestArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SyntheticsTestArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SyntheticsTest get(java.lang.String name, Output<java.lang.String> id, @Nullable SyntheticsTestState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SyntheticsTest(name, id, state, options);
    }
}
