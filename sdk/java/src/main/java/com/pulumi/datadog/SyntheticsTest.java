// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.datadog.SyntheticsTestArgs;
import com.pulumi.datadog.Utilities;
import com.pulumi.datadog.inputs.SyntheticsTestState;
import com.pulumi.datadog.outputs.SyntheticsTestApiStep;
import com.pulumi.datadog.outputs.SyntheticsTestAssertion;
import com.pulumi.datadog.outputs.SyntheticsTestBrowserStep;
import com.pulumi.datadog.outputs.SyntheticsTestBrowserVariable;
import com.pulumi.datadog.outputs.SyntheticsTestConfigVariable;
import com.pulumi.datadog.outputs.SyntheticsTestOptionsList;
import com.pulumi.datadog.outputs.SyntheticsTestRequestBasicauth;
import com.pulumi.datadog.outputs.SyntheticsTestRequestClientCertificate;
import com.pulumi.datadog.outputs.SyntheticsTestRequestDefinition;
import com.pulumi.datadog.outputs.SyntheticsTestRequestProxy;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Datadog synthetics test resource. This can be used to create and manage Datadog synthetics test.
 * 
 * #### *Warning*
 * Starting from version 3.1.0+, the direct usage of global variables in the configuration is deprecated, in favor of
 * local variables of type `global`. As an example, if you were previously using `{{ GLOBAL_VAR }}` directly in your
 * configuration, add a `config_variable` of type `global` with the `id` matching the `id` of the global variable `GLOBAL_VAR`, which can be found in the Synthetics UI or from the output of the `datadog.SyntheticsGlobalVariable` resource. The name can be chosen freely.
 * 
 * In practice, it means going from (simplified configuration):
 * 
 * to
 * 
 * which you can now use in your request definition:
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.datadog.SyntheticsTest;
 * import com.pulumi.datadog.SyntheticsTestArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestRequestDefinitionArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestAssertionArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestOptionsListArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestOptionsListRetryArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestOptionsListMonitorOptionsArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestConfigVariableArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestApiStepArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestApiStepRequestDefinitionArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestBrowserStepArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestBrowserStepParamsArgs;
 * import com.pulumi.datadog.inputs.SyntheticsTestBrowserVariableArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Example Usage (Synthetics API test)
 *         // Create a new Datadog Synthetics API/HTTP test on https://www.example.org
 *         var testUptime = new SyntheticsTest(&#34;testUptime&#34;, SyntheticsTestArgs.builder()        
 *             .name(&#34;An Uptime test on example.org&#34;)
 *             .type(&#34;api&#34;)
 *             .subtype(&#34;http&#34;)
 *             .status(&#34;live&#34;)
 *             .message(&#34;Notify @pagerduty&#34;)
 *             .locations(&#34;aws:eu-central-1&#34;)
 *             .tags(            
 *                 &#34;foo:bar&#34;,
 *                 &#34;foo&#34;,
 *                 &#34;env:test&#34;)
 *             .requestDefinition(SyntheticsTestRequestDefinitionArgs.builder()
 *                 .method(&#34;GET&#34;)
 *                 .url(&#34;https://www.example.org&#34;)
 *                 .build())
 *             .requestHeaders(Map.of(&#34;Content-Type&#34;, &#34;application/json&#34;))
 *             .assertions(SyntheticsTestAssertionArgs.builder()
 *                 .type(&#34;statusCode&#34;)
 *                 .operator(&#34;is&#34;)
 *                 .target(&#34;200&#34;)
 *                 .build())
 *             .optionsList(SyntheticsTestOptionsListArgs.builder()
 *                 .tickEvery(900)
 *                 .retry(SyntheticsTestOptionsListRetryArgs.builder()
 *                     .count(2)
 *                     .interval(300)
 *                     .build())
 *                 .monitorOptions(SyntheticsTestOptionsListMonitorOptionsArgs.builder()
 *                     .renotifyInterval(120)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         // Example Usage (Authenticated API test)
 *         // Create a new Datadog Synthetics API/HTTP test on https://www.example.org
 *         var testApi = new SyntheticsTest(&#34;testApi&#34;, SyntheticsTestArgs.builder()        
 *             .name(&#34;An API test on example.org&#34;)
 *             .type(&#34;api&#34;)
 *             .subtype(&#34;http&#34;)
 *             .status(&#34;live&#34;)
 *             .message(&#34;Notify @pagerduty&#34;)
 *             .locations(&#34;aws:eu-central-1&#34;)
 *             .tags(            
 *                 &#34;foo:bar&#34;,
 *                 &#34;foo&#34;,
 *                 &#34;env:test&#34;)
 *             .requestDefinition(SyntheticsTestRequestDefinitionArgs.builder()
 *                 .method(&#34;GET&#34;)
 *                 .url(&#34;https://www.example.org&#34;)
 *                 .build())
 *             .requestHeaders(Map.ofEntries(
 *                 Map.entry(&#34;Content-Type&#34;, &#34;application/json&#34;),
 *                 Map.entry(&#34;Authentication&#34;, &#34;Token: 1234566789&#34;)
 *             ))
 *             .assertions(SyntheticsTestAssertionArgs.builder()
 *                 .type(&#34;statusCode&#34;)
 *                 .operator(&#34;is&#34;)
 *                 .target(&#34;200&#34;)
 *                 .build())
 *             .optionsList(SyntheticsTestOptionsListArgs.builder()
 *                 .tickEvery(900)
 *                 .retry(SyntheticsTestOptionsListRetryArgs.builder()
 *                     .count(2)
 *                     .interval(300)
 *                     .build())
 *                 .monitorOptions(SyntheticsTestOptionsListMonitorOptionsArgs.builder()
 *                     .renotifyInterval(120)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         // Example Usage (Synthetics SSL test)
 *         // Create a new Datadog Synthetics API/SSL test on example.org
 *         var testSsl = new SyntheticsTest(&#34;testSsl&#34;, SyntheticsTestArgs.builder()        
 *             .name(&#34;An API test on example.org&#34;)
 *             .type(&#34;api&#34;)
 *             .subtype(&#34;ssl&#34;)
 *             .status(&#34;live&#34;)
 *             .message(&#34;Notify @pagerduty&#34;)
 *             .locations(&#34;aws:eu-central-1&#34;)
 *             .tags(            
 *                 &#34;foo:bar&#34;,
 *                 &#34;foo&#34;,
 *                 &#34;env:test&#34;)
 *             .requestDefinition(SyntheticsTestRequestDefinitionArgs.builder()
 *                 .host(&#34;example.org&#34;)
 *                 .port(443)
 *                 .build())
 *             .assertions(SyntheticsTestAssertionArgs.builder()
 *                 .type(&#34;certificate&#34;)
 *                 .operator(&#34;isInMoreThan&#34;)
 *                 .target(30)
 *                 .build())
 *             .optionsList(SyntheticsTestOptionsListArgs.builder()
 *                 .tickEvery(900)
 *                 .acceptSelfSigned(true)
 *                 .build())
 *             .build());
 * 
 *         // Example Usage (Synthetics TCP test)
 *         // Create a new Datadog Synthetics API/TCP test on example.org
 *         var testTcp = new SyntheticsTest(&#34;testTcp&#34;, SyntheticsTestArgs.builder()        
 *             .name(&#34;An API test on example.org&#34;)
 *             .type(&#34;api&#34;)
 *             .subtype(&#34;tcp&#34;)
 *             .status(&#34;live&#34;)
 *             .message(&#34;Notify @pagerduty&#34;)
 *             .locations(&#34;aws:eu-central-1&#34;)
 *             .tags(            
 *                 &#34;foo:bar&#34;,
 *                 &#34;foo&#34;,
 *                 &#34;env:test&#34;)
 *             .requestDefinition(SyntheticsTestRequestDefinitionArgs.builder()
 *                 .host(&#34;example.org&#34;)
 *                 .port(443)
 *                 .build())
 *             .assertions(SyntheticsTestAssertionArgs.builder()
 *                 .type(&#34;responseTime&#34;)
 *                 .operator(&#34;lessThan&#34;)
 *                 .target(2000)
 *                 .build())
 *             .configVariables(SyntheticsTestConfigVariableArgs.builder()
 *                 .type(&#34;global&#34;)
 *                 .name(&#34;MY_GLOBAL_VAR&#34;)
 *                 .id(&#34;76636cd1-82e2-4aeb-9cfe-51366a8198a2&#34;)
 *                 .build())
 *             .optionsList(SyntheticsTestOptionsListArgs.builder()
 *                 .tickEvery(900)
 *                 .build())
 *             .build());
 * 
 *         // Example Usage (Synthetics DNS test)
 *         // Create a new Datadog Synthetics API/DNS test on example.org
 *         var testDns = new SyntheticsTest(&#34;testDns&#34;, SyntheticsTestArgs.builder()        
 *             .name(&#34;An API test on example.org&#34;)
 *             .type(&#34;api&#34;)
 *             .subtype(&#34;dns&#34;)
 *             .status(&#34;live&#34;)
 *             .message(&#34;Notify @pagerduty&#34;)
 *             .locations(&#34;aws:eu-central-1&#34;)
 *             .tags(            
 *                 &#34;foo:bar&#34;,
 *                 &#34;foo&#34;,
 *                 &#34;env:test&#34;)
 *             .requestDefinition(SyntheticsTestRequestDefinitionArgs.builder()
 *                 .host(&#34;example.org&#34;)
 *                 .build())
 *             .assertions(SyntheticsTestAssertionArgs.builder()
 *                 .type(&#34;recordSome&#34;)
 *                 .operator(&#34;is&#34;)
 *                 .property(&#34;A&#34;)
 *                 .target(&#34;0.0.0.0&#34;)
 *                 .build())
 *             .optionsList(SyntheticsTestOptionsListArgs.builder()
 *                 .tickEvery(900)
 *                 .build())
 *             .build());
 * 
 *         // Example Usage (Synthetics Multistep API test)
 *         // Create a new Datadog Synthetics Multistep API test
 *         var testMultiStep = new SyntheticsTest(&#34;testMultiStep&#34;, SyntheticsTestArgs.builder()        
 *             .name(&#34;Multistep API test&#34;)
 *             .type(&#34;api&#34;)
 *             .subtype(&#34;multi&#34;)
 *             .status(&#34;live&#34;)
 *             .locations(&#34;aws:eu-central-1&#34;)
 *             .tags(            
 *                 &#34;foo:bar&#34;,
 *                 &#34;foo&#34;,
 *                 &#34;env:test&#34;)
 *             .apiSteps(            
 *                 SyntheticsTestApiStepArgs.builder()
 *                     .name(&#34;An API test on example.org&#34;)
 *                     .subtype(&#34;http&#34;)
 *                     .assertions(SyntheticsTestApiStepAssertionArgs.builder()
 *                         .type(&#34;statusCode&#34;)
 *                         .operator(&#34;is&#34;)
 *                         .target(&#34;200&#34;)
 *                         .build())
 *                     .requestDefinition(SyntheticsTestApiStepRequestDefinitionArgs.builder()
 *                         .method(&#34;GET&#34;)
 *                         .url(&#34;https://example.org&#34;)
 *                         .build())
 *                     .requestHeaders(Map.ofEntries(
 *                         Map.entry(&#34;Content-Type&#34;, &#34;application/json&#34;),
 *                         Map.entry(&#34;Authentication&#34;, &#34;Token: 1234566789&#34;)
 *                     ))
 *                     .build(),
 *                 SyntheticsTestApiStepArgs.builder()
 *                     .name(&#34;An API test on example.org&#34;)
 *                     .subtype(&#34;http&#34;)
 *                     .assertions(SyntheticsTestApiStepAssertionArgs.builder()
 *                         .type(&#34;statusCode&#34;)
 *                         .operator(&#34;is&#34;)
 *                         .target(&#34;200&#34;)
 *                         .build())
 *                     .requestDefinition(SyntheticsTestApiStepRequestDefinitionArgs.builder()
 *                         .method(&#34;GET&#34;)
 *                         .url(&#34;http://example.org&#34;)
 *                         .build())
 *                     .build())
 *             .optionsList(SyntheticsTestOptionsListArgs.builder()
 *                 .tickEvery(900)
 *                 .acceptSelfSigned(true)
 *                 .build())
 *             .build());
 * 
 *         // Example Usage (Synthetics Browser test)
 *         // Create a new Datadog Synthetics Browser test starting on https://www.example.org
 *         var testBrowser = new SyntheticsTest(&#34;testBrowser&#34;, SyntheticsTestArgs.builder()        
 *             .name(&#34;A Browser test on example.org&#34;)
 *             .type(&#34;browser&#34;)
 *             .status(&#34;paused&#34;)
 *             .message(&#34;Notify @qa&#34;)
 *             .deviceIds(&#34;laptop_large&#34;)
 *             .locations(&#34;aws:eu-central-1&#34;)
 *             .tags()
 *             .requestDefinition(SyntheticsTestRequestDefinitionArgs.builder()
 *                 .method(&#34;GET&#34;)
 *                 .url(&#34;https://app.datadoghq.com&#34;)
 *                 .build())
 *             .browserSteps(            
 *                 SyntheticsTestBrowserStepArgs.builder()
 *                     .name(&#34;Check current url&#34;)
 *                     .type(&#34;assertCurrentUrl&#34;)
 *                     .params(SyntheticsTestBrowserStepParamsArgs.builder()
 *                         .check(&#34;contains&#34;)
 *                         .value(&#34;datadoghq&#34;)
 *                         .build())
 *                     .build(),
 *                 SyntheticsTestBrowserStepArgs.builder()
 *                     .name(&#34;Test a downloaded file&#34;)
 *                     .type(&#34;assertFileDownload&#34;)
 *                     .params(SyntheticsTestBrowserStepParamsArgs.builder()
 *                         .file(serializeJson(
 *                             jsonObject(
 *                                 jsonProperty(&#34;md5&#34;, &#34;abcdef1234567890&#34;),
 *                                 jsonProperty(&#34;sizeCheck&#34;, jsonObject(
 *                                     jsonProperty(&#34;type&#34;, &#34;equals&#34;),
 *                                     jsonProperty(&#34;value&#34;, 1)
 *                                 )),
 *                                 jsonProperty(&#34;nameCheck&#34;, jsonObject(
 *                                     jsonProperty(&#34;type&#34;, &#34;contains&#34;),
 *                                     jsonProperty(&#34;value&#34;, &#34;.xls&#34;)
 *                                 ))
 *                             )))
 *                         .build())
 *                     .build())
 *             .browserVariables(            
 *                 SyntheticsTestBrowserVariableArgs.builder()
 *                     .type(&#34;text&#34;)
 *                     .name(&#34;MY_PATTERN_VAR&#34;)
 *                     .pattern(&#34;{{numeric(3)}}&#34;)
 *                     .example(&#34;597&#34;)
 *                     .build(),
 *                 SyntheticsTestBrowserVariableArgs.builder()
 *                     .type(&#34;email&#34;)
 *                     .name(&#34;MY_EMAIL_VAR&#34;)
 *                     .pattern(&#34;jd8-afe-ydv.{{ numeric(10) }}@synthetics.dtdg.co&#34;)
 *                     .example(&#34;jd8-afe-ydv.4546132139@synthetics.dtdg.co&#34;)
 *                     .build(),
 *                 SyntheticsTestBrowserVariableArgs.builder()
 *                     .type(&#34;global&#34;)
 *                     .name(&#34;MY_GLOBAL_VAR&#34;)
 *                     .id(&#34;76636cd1-82e2-4aeb-9cfe-51366a8198a2&#34;)
 *                     .build())
 *             .optionsList(SyntheticsTestOptionsListArgs.builder()
 *                 .tickEvery(3600)
 *                 .build())
 *             .build());
 * 
 *         // Example Usage (GRPC API test)
 *         // Create a new Datadog GRPC API test starting on google.org:50050
 *         var grpc = new SyntheticsTest(&#34;grpc&#34;, SyntheticsTestArgs.builder()        
 *             .type(&#34;api&#34;)
 *             .subtype(&#34;grpc&#34;)
 *             .requestDefinition(SyntheticsTestRequestDefinitionArgs.builder()
 *                 .method(&#34;GET&#34;)
 *                 .host(&#34;google.com&#34;)
 *                 .port(50050)
 *                 .service(&#34;Hello&#34;)
 *                 .plainProtoFile(&#34;&#34;&#34;
 * syntax = &#34;proto3&#34;;
 * option java_multiple_files = true;
 * option java_package = &#34;io.grpc.examples.helloworld&#34;;
 * option java_outer_classname = &#34;HelloWorldProto&#34;;
 * option objc_class_prefix = &#34;HLW&#34;;
 * package helloworld;
 * // The greeting service definition.
 * service Greeter {
 * 	// Sends a greeting
 * 	rpc SayHello (HelloRequest) returns (HelloReply) {}
 * }
 * // The request message containing the user&#39;s name.
 * message HelloRequest {
 * 	string name = 1;
 * }
 * // The response message containing the greetings
 * message HelloReply {
 * 	string message = 1;
 * }
 *                 &#34;&#34;&#34;)
 *                 .build())
 *             .requestMetadata(Map.of(&#34;header&#34;, &#34;value&#34;))
 *             .assertions(            
 *                 SyntheticsTestAssertionArgs.builder()
 *                     .type(&#34;responseTime&#34;)
 *                     .operator(&#34;lessThan&#34;)
 *                     .target(&#34;2000&#34;)
 *                     .build(),
 *                 SyntheticsTestAssertionArgs.builder()
 *                     .operator(&#34;is&#34;)
 *                     .type(&#34;grpcHealthcheckStatus&#34;)
 *                     .target(1)
 *                     .build(),
 *                 SyntheticsTestAssertionArgs.builder()
 *                     .operator(&#34;is&#34;)
 *                     .target(&#34;proto target&#34;)
 *                     .type(&#34;grpcProto&#34;)
 *                     .build(),
 *                 SyntheticsTestAssertionArgs.builder()
 *                     .operator(&#34;is&#34;)
 *                     .target(&#34;123&#34;)
 *                     .property(&#34;property&#34;)
 *                     .type(&#34;grpcMetadata&#34;)
 *                     .build())
 *             .locations(&#34;aws:eu-central-1&#34;)
 *             .optionsList(SyntheticsTestOptionsListArgs.builder()
 *                 .tickEvery(60)
 *                 .build())
 *             .name(&#34;GRPC API test&#34;)
 *             .message(&#34;Notify @datadog.user&#34;)
 *             .tags(            
 *                 &#34;foo:bar&#34;,
 *                 &#34;baz&#34;)
 *             .status(&#34;paused&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Synthetics tests can be imported using their public string ID, e.g.
 * 
 * ```sh
 * $ pulumi import datadog:index/syntheticsTest:SyntheticsTest fizz abc-123-xyz
 * ```
 * 
 */
@ResourceType(type="datadog:index/syntheticsTest:SyntheticsTest")
public class SyntheticsTest extends com.pulumi.resources.CustomResource {
    /**
     * Steps for multistep api tests
     * 
     */
    @Export(name="apiSteps", refs={List.class,SyntheticsTestApiStep.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticsTestApiStep>> apiSteps;

    /**
     * @return Steps for multistep api tests
     * 
     */
    public Output<Optional<List<SyntheticsTestApiStep>>> apiSteps() {
        return Codegen.optional(this.apiSteps);
    }
    /**
     * Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
     * 
     */
    @Export(name="assertions", refs={List.class,SyntheticsTestAssertion.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticsTestAssertion>> assertions;

    /**
     * @return Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
     * 
     */
    public Output<Optional<List<SyntheticsTestAssertion>>> assertions() {
        return Codegen.optional(this.assertions);
    }
    /**
     * Steps for browser tests.
     * 
     */
    @Export(name="browserSteps", refs={List.class,SyntheticsTestBrowserStep.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticsTestBrowserStep>> browserSteps;

    /**
     * @return Steps for browser tests.
     * 
     */
    public Output<Optional<List<SyntheticsTestBrowserStep>>> browserSteps() {
        return Codegen.optional(this.browserSteps);
    }
    /**
     * Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
     * 
     */
    @Export(name="browserVariables", refs={List.class,SyntheticsTestBrowserVariable.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticsTestBrowserVariable>> browserVariables;

    /**
     * @return Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
     * 
     */
    public Output<Optional<List<SyntheticsTestBrowserVariable>>> browserVariables() {
        return Codegen.optional(this.browserVariables);
    }
    /**
     * Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
     * 
     */
    @Export(name="configVariables", refs={List.class,SyntheticsTestConfigVariable.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SyntheticsTestConfigVariable>> configVariables;

    /**
     * @return Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
     * 
     */
    public Output<Optional<List<SyntheticsTestConfigVariable>>> configVariables() {
        return Codegen.optional(this.configVariables);
    }
    /**
     * Required if `type = &#34;browser&#34;`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
     * 
     */
    @Export(name="deviceIds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> deviceIds;

    /**
     * @return Required if `type = &#34;browser&#34;`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
     * 
     */
    public Output<Optional<List<String>>> deviceIds() {
        return Codegen.optional(this.deviceIds);
    }
    /**
     * Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
     * 
     */
    @Export(name="locations", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> locations;

    /**
     * @return Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
     * 
     */
    public Output<List<String>> locations() {
        return this.locations;
    }
    /**
     * A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events. Defaults to `&#34;&#34;`.
     * 
     */
    @Export(name="message", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> message;

    /**
     * @return A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events. Defaults to `&#34;&#34;`.
     * 
     */
    public Output<Optional<String>> message() {
        return Codegen.optional(this.message);
    }
    /**
     * ID of the monitor associated with the Datadog synthetics test.
     * 
     */
    @Export(name="monitorId", refs={Integer.class}, tree="[0]")
    private Output<Integer> monitorId;

    /**
     * @return ID of the monitor associated with the Datadog synthetics test.
     * 
     */
    public Output<Integer> monitorId() {
        return this.monitorId;
    }
    /**
     * Name of Datadog synthetics test.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of Datadog synthetics test.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="optionsList", refs={SyntheticsTestOptionsList.class}, tree="[0]")
    private Output</* @Nullable */ SyntheticsTestOptionsList> optionsList;

    public Output<Optional<SyntheticsTestOptionsList>> optionsList() {
        return Codegen.optional(this.optionsList);
    }
    /**
     * The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
     * 
     */
    @Export(name="requestBasicauth", refs={SyntheticsTestRequestBasicauth.class}, tree="[0]")
    private Output</* @Nullable */ SyntheticsTestRequestBasicauth> requestBasicauth;

    /**
     * @return The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
     * 
     */
    public Output<Optional<SyntheticsTestRequestBasicauth>> requestBasicauth() {
        return Codegen.optional(this.requestBasicauth);
    }
    /**
     * Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
     * 
     */
    @Export(name="requestClientCertificate", refs={SyntheticsTestRequestClientCertificate.class}, tree="[0]")
    private Output</* @Nullable */ SyntheticsTestRequestClientCertificate> requestClientCertificate;

    /**
     * @return Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
     * 
     */
    public Output<Optional<SyntheticsTestRequestClientCertificate>> requestClientCertificate() {
        return Codegen.optional(this.requestClientCertificate);
    }
    /**
     * Required if `type = &#34;api&#34;`. The synthetics test request.
     * 
     */
    @Export(name="requestDefinition", refs={SyntheticsTestRequestDefinition.class}, tree="[0]")
    private Output</* @Nullable */ SyntheticsTestRequestDefinition> requestDefinition;

    /**
     * @return Required if `type = &#34;api&#34;`. The synthetics test request.
     * 
     */
    public Output<Optional<SyntheticsTestRequestDefinition>> requestDefinition() {
        return Codegen.optional(this.requestDefinition);
    }
    /**
     * Header name and value map.
     * 
     */
    @Export(name="requestHeaders", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> requestHeaders;

    /**
     * @return Header name and value map.
     * 
     */
    public Output<Optional<Map<String,Object>>> requestHeaders() {
        return Codegen.optional(this.requestHeaders);
    }
    /**
     * Metadata to include when performing the gRPC test.
     * 
     */
    @Export(name="requestMetadata", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> requestMetadata;

    /**
     * @return Metadata to include when performing the gRPC test.
     * 
     */
    public Output<Optional<Map<String,Object>>> requestMetadata() {
        return Codegen.optional(this.requestMetadata);
    }
    /**
     * The proxy to perform the test.
     * 
     */
    @Export(name="requestProxy", refs={SyntheticsTestRequestProxy.class}, tree="[0]")
    private Output</* @Nullable */ SyntheticsTestRequestProxy> requestProxy;

    /**
     * @return The proxy to perform the test.
     * 
     */
    public Output<Optional<SyntheticsTestRequestProxy>> requestProxy() {
        return Codegen.optional(this.requestProxy);
    }
    /**
     * Query arguments name and value map.
     * 
     */
    @Export(name="requestQuery", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> requestQuery;

    /**
     * @return Query arguments name and value map.
     * 
     */
    public Output<Optional<Map<String,Object>>> requestQuery() {
        return Codegen.optional(this.requestQuery);
    }
    /**
     * Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
     * 
     */
    @Export(name="setCookie", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> setCookie;

    /**
     * @return Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
     * 
     */
    public Output<Optional<String>> setCookie() {
        return Codegen.optional(this.setCookie);
    }
    /**
     * Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
     * 
     */
    @Export(name="subtype", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> subtype;

    /**
     * @return The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
     * 
     */
    public Output<Optional<String>> subtype() {
        return Codegen.optional(this.subtype);
    }
    /**
     * A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Synthetics test type. Valid values are `api`, `browser`.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Synthetics test type. Valid values are `api`, `browser`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SyntheticsTest(String name) {
        this(name, SyntheticsTestArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SyntheticsTest(String name, SyntheticsTestArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SyntheticsTest(String name, SyntheticsTestArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("datadog:index/syntheticsTest:SyntheticsTest", name, args == null ? SyntheticsTestArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SyntheticsTest(String name, Output<String> id, @Nullable SyntheticsTestState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("datadog:index/syntheticsTest:SyntheticsTest", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SyntheticsTest get(String name, Output<String> id, @Nullable SyntheticsTestState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SyntheticsTest(name, id, state, options);
    }
}
