// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.RumMetricComputeArgs;
import com.pulumi.datadog.inputs.RumMetricFilterArgs;
import com.pulumi.datadog.inputs.RumMetricGroupByArgs;
import com.pulumi.datadog.inputs.RumMetricUniquenessArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RumMetricArgs extends com.pulumi.resources.ResourceArgs {

    public static final RumMetricArgs Empty = new RumMetricArgs();

    @Import(name="compute")
    private @Nullable Output<RumMetricComputeArgs> compute;

    public Optional<Output<RumMetricComputeArgs>> compute() {
        return Optional.ofNullable(this.compute);
    }

    /**
     * The type of RUM events to filter on.
     * 
     */
    @Import(name="eventType", required=true)
    private Output<String> eventType;

    /**
     * @return The type of RUM events to filter on.
     * 
     */
    public Output<String> eventType() {
        return this.eventType;
    }

    @Import(name="filter")
    private @Nullable Output<RumMetricFilterArgs> filter;

    public Optional<Output<RumMetricFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    @Import(name="groupBies")
    private @Nullable Output<List<RumMetricGroupByArgs>> groupBies;

    public Optional<Output<List<RumMetricGroupByArgs>>> groupBies() {
        return Optional.ofNullable(this.groupBies);
    }

    /**
     * The name of the RUM-based metric. This field can&#39;t be updated after creation.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the RUM-based metric. This field can&#39;t be updated after creation.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="uniqueness")
    private @Nullable Output<RumMetricUniquenessArgs> uniqueness;

    public Optional<Output<RumMetricUniquenessArgs>> uniqueness() {
        return Optional.ofNullable(this.uniqueness);
    }

    private RumMetricArgs() {}

    private RumMetricArgs(RumMetricArgs $) {
        this.compute = $.compute;
        this.eventType = $.eventType;
        this.filter = $.filter;
        this.groupBies = $.groupBies;
        this.name = $.name;
        this.uniqueness = $.uniqueness;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RumMetricArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RumMetricArgs $;

        public Builder() {
            $ = new RumMetricArgs();
        }

        public Builder(RumMetricArgs defaults) {
            $ = new RumMetricArgs(Objects.requireNonNull(defaults));
        }

        public Builder compute(@Nullable Output<RumMetricComputeArgs> compute) {
            $.compute = compute;
            return this;
        }

        public Builder compute(RumMetricComputeArgs compute) {
            return compute(Output.of(compute));
        }

        /**
         * @param eventType The type of RUM events to filter on.
         * 
         * @return builder
         * 
         */
        public Builder eventType(Output<String> eventType) {
            $.eventType = eventType;
            return this;
        }

        /**
         * @param eventType The type of RUM events to filter on.
         * 
         * @return builder
         * 
         */
        public Builder eventType(String eventType) {
            return eventType(Output.of(eventType));
        }

        public Builder filter(@Nullable Output<RumMetricFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(RumMetricFilterArgs filter) {
            return filter(Output.of(filter));
        }

        public Builder groupBies(@Nullable Output<List<RumMetricGroupByArgs>> groupBies) {
            $.groupBies = groupBies;
            return this;
        }

        public Builder groupBies(List<RumMetricGroupByArgs> groupBies) {
            return groupBies(Output.of(groupBies));
        }

        public Builder groupBies(RumMetricGroupByArgs... groupBies) {
            return groupBies(List.of(groupBies));
        }

        /**
         * @param name The name of the RUM-based metric. This field can&#39;t be updated after creation.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the RUM-based metric. This field can&#39;t be updated after creation.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder uniqueness(@Nullable Output<RumMetricUniquenessArgs> uniqueness) {
            $.uniqueness = uniqueness;
            return this;
        }

        public Builder uniqueness(RumMetricUniquenessArgs uniqueness) {
            return uniqueness(Output.of(uniqueness));
        }

        public RumMetricArgs build() {
            if ($.eventType == null) {
                throw new MissingRequiredPropertyException("RumMetricArgs", "eventType");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("RumMetricArgs", "name");
            }
            return $;
        }
    }

}
