// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MonitorSchedulingOptionCustomScheduleRecurrence {
    /**
     * @return Must be a valid `rrule`. See API docs for supported fields
     * 
     */
    private String rrule;
    /**
     * @return Time to start recurrence cycle. Similar to DTSTART. Expected format &#39;YYYY-MM-DDThh:mm:ss&#39;
     * 
     */
    private @Nullable String start;
    /**
     * @return &#39;tz database&#39; format. Example: `America/New_York` or `UTC`
     * 
     */
    private String timezone;

    private MonitorSchedulingOptionCustomScheduleRecurrence() {}
    /**
     * @return Must be a valid `rrule`. See API docs for supported fields
     * 
     */
    public String rrule() {
        return this.rrule;
    }
    /**
     * @return Time to start recurrence cycle. Similar to DTSTART. Expected format &#39;YYYY-MM-DDThh:mm:ss&#39;
     * 
     */
    public Optional<String> start() {
        return Optional.ofNullable(this.start);
    }
    /**
     * @return &#39;tz database&#39; format. Example: `America/New_York` or `UTC`
     * 
     */
    public String timezone() {
        return this.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MonitorSchedulingOptionCustomScheduleRecurrence defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String rrule;
        private @Nullable String start;
        private String timezone;
        public Builder() {}
        public Builder(MonitorSchedulingOptionCustomScheduleRecurrence defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.rrule = defaults.rrule;
    	      this.start = defaults.start;
    	      this.timezone = defaults.timezone;
        }

        @CustomType.Setter
        public Builder rrule(String rrule) {
            if (rrule == null) {
              throw new MissingRequiredPropertyException("MonitorSchedulingOptionCustomScheduleRecurrence", "rrule");
            }
            this.rrule = rrule;
            return this;
        }
        @CustomType.Setter
        public Builder start(@Nullable String start) {

            this.start = start;
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            if (timezone == null) {
              throw new MissingRequiredPropertyException("MonitorSchedulingOptionCustomScheduleRecurrence", "timezone");
            }
            this.timezone = timezone;
            return this;
        }
        public MonitorSchedulingOptionCustomScheduleRecurrence build() {
            final var _resultValue = new MonitorSchedulingOptionCustomScheduleRecurrence();
            _resultValue.rrule = rrule;
            _resultValue.start = start;
            _resultValue.timezone = timezone;
            return _resultValue;
        }
    }
}
