// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.SecurityMonitoringRuleOptionsThirdPartyRuleOptionsRootQueryArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityMonitoringRuleOptionsThirdPartyRuleOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityMonitoringRuleOptionsThirdPartyRuleOptionsArgs Empty = new SecurityMonitoringRuleOptionsThirdPartyRuleOptionsArgs();

    /**
     * Notification targets for the default rule case, when none of the third-party cases match.
     * 
     */
    @Import(name="defaultNotifications")
    private @Nullable Output<List<String>> defaultNotifications;

    /**
     * @return Notification targets for the default rule case, when none of the third-party cases match.
     * 
     */
    public Optional<Output<List<String>>> defaultNotifications() {
        return Optional.ofNullable(this.defaultNotifications);
    }

    /**
     * Severity of the default rule case, when none of the third-party cases match. Valid values are `info`, `low`, `medium`, `high`, `critical`.
     * 
     */
    @Import(name="defaultStatus", required=true)
    private Output<String> defaultStatus;

    /**
     * @return Severity of the default rule case, when none of the third-party cases match. Valid values are `info`, `low`, `medium`, `high`, `critical`.
     * 
     */
    public Output<String> defaultStatus() {
        return this.defaultStatus;
    }

    /**
     * Queries to be combined with third-party case queries. Each of them can have different group by fields, to aggregate differently based on the type of alert.
     * 
     */
    @Import(name="rootQueries", required=true)
    private Output<List<SecurityMonitoringRuleOptionsThirdPartyRuleOptionsRootQueryArgs>> rootQueries;

    /**
     * @return Queries to be combined with third-party case queries. Each of them can have different group by fields, to aggregate differently based on the type of alert.
     * 
     */
    public Output<List<SecurityMonitoringRuleOptionsThirdPartyRuleOptionsRootQueryArgs>> rootQueries() {
        return this.rootQueries;
    }

    /**
     * A template for the signal title; if omitted, the title is generated based on the case name.
     * 
     */
    @Import(name="signalTitleTemplate")
    private @Nullable Output<String> signalTitleTemplate;

    /**
     * @return A template for the signal title; if omitted, the title is generated based on the case name.
     * 
     */
    public Optional<Output<String>> signalTitleTemplate() {
        return Optional.ofNullable(this.signalTitleTemplate);
    }

    private SecurityMonitoringRuleOptionsThirdPartyRuleOptionsArgs() {}

    private SecurityMonitoringRuleOptionsThirdPartyRuleOptionsArgs(SecurityMonitoringRuleOptionsThirdPartyRuleOptionsArgs $) {
        this.defaultNotifications = $.defaultNotifications;
        this.defaultStatus = $.defaultStatus;
        this.rootQueries = $.rootQueries;
        this.signalTitleTemplate = $.signalTitleTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityMonitoringRuleOptionsThirdPartyRuleOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityMonitoringRuleOptionsThirdPartyRuleOptionsArgs $;

        public Builder() {
            $ = new SecurityMonitoringRuleOptionsThirdPartyRuleOptionsArgs();
        }

        public Builder(SecurityMonitoringRuleOptionsThirdPartyRuleOptionsArgs defaults) {
            $ = new SecurityMonitoringRuleOptionsThirdPartyRuleOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultNotifications Notification targets for the default rule case, when none of the third-party cases match.
         * 
         * @return builder
         * 
         */
        public Builder defaultNotifications(@Nullable Output<List<String>> defaultNotifications) {
            $.defaultNotifications = defaultNotifications;
            return this;
        }

        /**
         * @param defaultNotifications Notification targets for the default rule case, when none of the third-party cases match.
         * 
         * @return builder
         * 
         */
        public Builder defaultNotifications(List<String> defaultNotifications) {
            return defaultNotifications(Output.of(defaultNotifications));
        }

        /**
         * @param defaultNotifications Notification targets for the default rule case, when none of the third-party cases match.
         * 
         * @return builder
         * 
         */
        public Builder defaultNotifications(String... defaultNotifications) {
            return defaultNotifications(List.of(defaultNotifications));
        }

        /**
         * @param defaultStatus Severity of the default rule case, when none of the third-party cases match. Valid values are `info`, `low`, `medium`, `high`, `critical`.
         * 
         * @return builder
         * 
         */
        public Builder defaultStatus(Output<String> defaultStatus) {
            $.defaultStatus = defaultStatus;
            return this;
        }

        /**
         * @param defaultStatus Severity of the default rule case, when none of the third-party cases match. Valid values are `info`, `low`, `medium`, `high`, `critical`.
         * 
         * @return builder
         * 
         */
        public Builder defaultStatus(String defaultStatus) {
            return defaultStatus(Output.of(defaultStatus));
        }

        /**
         * @param rootQueries Queries to be combined with third-party case queries. Each of them can have different group by fields, to aggregate differently based on the type of alert.
         * 
         * @return builder
         * 
         */
        public Builder rootQueries(Output<List<SecurityMonitoringRuleOptionsThirdPartyRuleOptionsRootQueryArgs>> rootQueries) {
            $.rootQueries = rootQueries;
            return this;
        }

        /**
         * @param rootQueries Queries to be combined with third-party case queries. Each of them can have different group by fields, to aggregate differently based on the type of alert.
         * 
         * @return builder
         * 
         */
        public Builder rootQueries(List<SecurityMonitoringRuleOptionsThirdPartyRuleOptionsRootQueryArgs> rootQueries) {
            return rootQueries(Output.of(rootQueries));
        }

        /**
         * @param rootQueries Queries to be combined with third-party case queries. Each of them can have different group by fields, to aggregate differently based on the type of alert.
         * 
         * @return builder
         * 
         */
        public Builder rootQueries(SecurityMonitoringRuleOptionsThirdPartyRuleOptionsRootQueryArgs... rootQueries) {
            return rootQueries(List.of(rootQueries));
        }

        /**
         * @param signalTitleTemplate A template for the signal title; if omitted, the title is generated based on the case name.
         * 
         * @return builder
         * 
         */
        public Builder signalTitleTemplate(@Nullable Output<String> signalTitleTemplate) {
            $.signalTitleTemplate = signalTitleTemplate;
            return this;
        }

        /**
         * @param signalTitleTemplate A template for the signal title; if omitted, the title is generated based on the case name.
         * 
         * @return builder
         * 
         */
        public Builder signalTitleTemplate(String signalTitleTemplate) {
            return signalTitleTemplate(Output.of(signalTitleTemplate));
        }

        public SecurityMonitoringRuleOptionsThirdPartyRuleOptionsArgs build() {
            if ($.defaultStatus == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringRuleOptionsThirdPartyRuleOptionsArgs", "defaultStatus");
            }
            if ($.rootQueries == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringRuleOptionsThirdPartyRuleOptionsArgs", "rootQueries");
            }
            return $;
        }
    }

}
