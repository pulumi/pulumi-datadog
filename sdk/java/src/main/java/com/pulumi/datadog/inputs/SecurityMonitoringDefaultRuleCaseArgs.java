// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class SecurityMonitoringDefaultRuleCaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityMonitoringDefaultRuleCaseArgs Empty = new SecurityMonitoringDefaultRuleCaseArgs();

    /**
     * Notification targets for each rule case.
     * 
     */
    @Import(name="notifications", required=true)
    private Output<List<String>> notifications;

    /**
     * @return Notification targets for each rule case.
     * 
     */
    public Output<List<String>> notifications() {
        return this.notifications;
    }

    /**
     * Status of the rule case to match. Valid values are `info`, `low`, `medium`, `high`, `critical`.
     * 
     */
    @Import(name="status", required=true)
    private Output<String> status;

    /**
     * @return Status of the rule case to match. Valid values are `info`, `low`, `medium`, `high`, `critical`.
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    private SecurityMonitoringDefaultRuleCaseArgs() {}

    private SecurityMonitoringDefaultRuleCaseArgs(SecurityMonitoringDefaultRuleCaseArgs $) {
        this.notifications = $.notifications;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityMonitoringDefaultRuleCaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityMonitoringDefaultRuleCaseArgs $;

        public Builder() {
            $ = new SecurityMonitoringDefaultRuleCaseArgs();
        }

        public Builder(SecurityMonitoringDefaultRuleCaseArgs defaults) {
            $ = new SecurityMonitoringDefaultRuleCaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param notifications Notification targets for each rule case.
         * 
         * @return builder
         * 
         */
        public Builder notifications(Output<List<String>> notifications) {
            $.notifications = notifications;
            return this;
        }

        /**
         * @param notifications Notification targets for each rule case.
         * 
         * @return builder
         * 
         */
        public Builder notifications(List<String> notifications) {
            return notifications(Output.of(notifications));
        }

        /**
         * @param notifications Notification targets for each rule case.
         * 
         * @return builder
         * 
         */
        public Builder notifications(String... notifications) {
            return notifications(List.of(notifications));
        }

        /**
         * @param status Status of the rule case to match. Valid values are `info`, `low`, `medium`, `high`, `critical`.
         * 
         * @return builder
         * 
         */
        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the rule case to match. Valid values are `info`, `low`, `medium`, `high`, `critical`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public SecurityMonitoringDefaultRuleCaseArgs build() {
            if ($.notifications == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringDefaultRuleCaseArgs", "notifications");
            }
            if ($.status == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringDefaultRuleCaseArgs", "status");
            }
            return $;
        }
    }

}
