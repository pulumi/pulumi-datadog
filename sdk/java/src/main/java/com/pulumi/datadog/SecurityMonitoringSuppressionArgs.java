// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityMonitoringSuppressionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityMonitoringSuppressionArgs Empty = new SecurityMonitoringSuppressionArgs();

    /**
     * An exclusion query on the input data of the security rules, which could be logs, Agent events, or other types of data based on the security rule. Events matching this query are ignored by any detection rules referenced in the suppression rule.
     * 
     */
    @Import(name="dataExclusionQuery")
    private @Nullable Output<String> dataExclusionQuery;

    /**
     * @return An exclusion query on the input data of the security rules, which could be logs, Agent events, or other types of data based on the security rule. Events matching this query are ignored by any detection rules referenced in the suppression rule.
     * 
     */
    public Optional<Output<String>> dataExclusionQuery() {
        return Optional.ofNullable(this.dataExclusionQuery);
    }

    /**
     * A description for the suppression rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the suppression rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the suppression rule is enabled.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether the suppression rule is enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won&#39;t suppress signals anymore.
     * 
     */
    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    /**
     * @return A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won&#39;t suppress signals anymore.
     * 
     */
    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * The name of the suppression rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the suppression rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
     * 
     */
    @Import(name="ruleQuery", required=true)
    private Output<String> ruleQuery;

    /**
     * @return The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
     * 
     */
    public Output<String> ruleQuery() {
        return this.ruleQuery;
    }

    /**
     * The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. It uses the same syntax as the queries to search signals in the Signals Explorer.
     * 
     */
    @Import(name="suppressionQuery")
    private @Nullable Output<String> suppressionQuery;

    /**
     * @return The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. It uses the same syntax as the queries to search signals in the Signals Explorer.
     * 
     */
    public Optional<Output<String>> suppressionQuery() {
        return Optional.ofNullable(this.suppressionQuery);
    }

    private SecurityMonitoringSuppressionArgs() {}

    private SecurityMonitoringSuppressionArgs(SecurityMonitoringSuppressionArgs $) {
        this.dataExclusionQuery = $.dataExclusionQuery;
        this.description = $.description;
        this.enabled = $.enabled;
        this.expirationDate = $.expirationDate;
        this.name = $.name;
        this.ruleQuery = $.ruleQuery;
        this.suppressionQuery = $.suppressionQuery;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityMonitoringSuppressionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityMonitoringSuppressionArgs $;

        public Builder() {
            $ = new SecurityMonitoringSuppressionArgs();
        }

        public Builder(SecurityMonitoringSuppressionArgs defaults) {
            $ = new SecurityMonitoringSuppressionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataExclusionQuery An exclusion query on the input data of the security rules, which could be logs, Agent events, or other types of data based on the security rule. Events matching this query are ignored by any detection rules referenced in the suppression rule.
         * 
         * @return builder
         * 
         */
        public Builder dataExclusionQuery(@Nullable Output<String> dataExclusionQuery) {
            $.dataExclusionQuery = dataExclusionQuery;
            return this;
        }

        /**
         * @param dataExclusionQuery An exclusion query on the input data of the security rules, which could be logs, Agent events, or other types of data based on the security rule. Events matching this query are ignored by any detection rules referenced in the suppression rule.
         * 
         * @return builder
         * 
         */
        public Builder dataExclusionQuery(String dataExclusionQuery) {
            return dataExclusionQuery(Output.of(dataExclusionQuery));
        }

        /**
         * @param description A description for the suppression rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the suppression rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Whether the suppression rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the suppression rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param expirationDate A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won&#39;t suppress signals anymore.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate A RFC3339 timestamp giving an expiration date for the suppression rule. After this date, it won&#39;t suppress signals anymore.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param name The name of the suppression rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the suppression rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ruleQuery The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
         * 
         * @return builder
         * 
         */
        public Builder ruleQuery(Output<String> ruleQuery) {
            $.ruleQuery = ruleQuery;
            return this;
        }

        /**
         * @param ruleQuery The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
         * 
         * @return builder
         * 
         */
        public Builder ruleQuery(String ruleQuery) {
            return ruleQuery(Output.of(ruleQuery));
        }

        /**
         * @param suppressionQuery The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. It uses the same syntax as the queries to search signals in the Signals Explorer.
         * 
         * @return builder
         * 
         */
        public Builder suppressionQuery(@Nullable Output<String> suppressionQuery) {
            $.suppressionQuery = suppressionQuery;
            return this;
        }

        /**
         * @param suppressionQuery The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered. It uses the same syntax as the queries to search signals in the Signals Explorer.
         * 
         * @return builder
         * 
         */
        public Builder suppressionQuery(String suppressionQuery) {
            return suppressionQuery(Output.of(suppressionQuery));
        }

        public SecurityMonitoringSuppressionArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringSuppressionArgs", "enabled");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringSuppressionArgs", "name");
            }
            if ($.ruleQuery == null) {
                throw new MissingRequiredPropertyException("SecurityMonitoringSuppressionArgs", "ruleQuery");
            }
            return $;
        }
    }

}
