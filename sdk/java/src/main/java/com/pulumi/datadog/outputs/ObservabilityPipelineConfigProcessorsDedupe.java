// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ObservabilityPipelineConfigProcessorsDedupe {
    /**
     * @return A list of log field paths to check for duplicates.
     * 
     */
    private List<String> fields;
    /**
     * @return The unique identifier for this processor.
     * 
     */
    private String id;
    /**
     * @return A Datadog search query used to determine which logs this processor targets.
     * 
     */
    private String include;
    /**
     * @return A list of component IDs whose output is used as the input for this processor.
     * 
     */
    private List<String> inputs;
    /**
     * @return The deduplication mode to apply to the fields.
     * 
     */
    private String mode;

    private ObservabilityPipelineConfigProcessorsDedupe() {}
    /**
     * @return A list of log field paths to check for duplicates.
     * 
     */
    public List<String> fields() {
        return this.fields;
    }
    /**
     * @return The unique identifier for this processor.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A Datadog search query used to determine which logs this processor targets.
     * 
     */
    public String include() {
        return this.include;
    }
    /**
     * @return A list of component IDs whose output is used as the input for this processor.
     * 
     */
    public List<String> inputs() {
        return this.inputs;
    }
    /**
     * @return The deduplication mode to apply to the fields.
     * 
     */
    public String mode() {
        return this.mode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObservabilityPipelineConfigProcessorsDedupe defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> fields;
        private String id;
        private String include;
        private List<String> inputs;
        private String mode;
        public Builder() {}
        public Builder(ObservabilityPipelineConfigProcessorsDedupe defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fields = defaults.fields;
    	      this.id = defaults.id;
    	      this.include = defaults.include;
    	      this.inputs = defaults.inputs;
    	      this.mode = defaults.mode;
        }

        @CustomType.Setter
        public Builder fields(List<String> fields) {
            if (fields == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsDedupe", "fields");
            }
            this.fields = fields;
            return this;
        }
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsDedupe", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder include(String include) {
            if (include == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsDedupe", "include");
            }
            this.include = include;
            return this;
        }
        @CustomType.Setter
        public Builder inputs(List<String> inputs) {
            if (inputs == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsDedupe", "inputs");
            }
            this.inputs = inputs;
            return this;
        }
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsDedupe", "mode");
            }
            this.mode = mode;
            return this;
        }
        public ObservabilityPipelineConfigProcessorsDedupe build() {
            final var _resultValue = new ObservabilityPipelineConfigProcessorsDedupe();
            _resultValue.fields = fields;
            _resultValue.id = id;
            _resultValue.include = include;
            _resultValue.inputs = inputs;
            _resultValue.mode = mode;
            return _resultValue;
        }
    }
}
