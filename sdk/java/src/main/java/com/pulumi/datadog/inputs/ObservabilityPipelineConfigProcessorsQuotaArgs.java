// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigProcessorsQuotaLimitArgs;
import com.pulumi.datadog.inputs.ObservabilityPipelineConfigProcessorsQuotaOverrideArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservabilityPipelineConfigProcessorsQuotaArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservabilityPipelineConfigProcessorsQuotaArgs Empty = new ObservabilityPipelineConfigProcessorsQuotaArgs();

    /**
     * Whether to drop events exceeding the limit.
     * 
     */
    @Import(name="dropEvents", required=true)
    private Output<Boolean> dropEvents;

    /**
     * @return Whether to drop events exceeding the limit.
     * 
     */
    public Output<Boolean> dropEvents() {
        return this.dropEvents;
    }

    /**
     * The unique ID of the processor.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique ID of the processor.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Whether to ignore when partition fields are missing.
     * 
     */
    @Import(name="ignoreWhenMissingPartitions")
    private @Nullable Output<Boolean> ignoreWhenMissingPartitions;

    /**
     * @return Whether to ignore when partition fields are missing.
     * 
     */
    public Optional<Output<Boolean>> ignoreWhenMissingPartitions() {
        return Optional.ofNullable(this.ignoreWhenMissingPartitions);
    }

    /**
     * A Datadog search query used to determine which logs this processor targets.
     * 
     */
    @Import(name="include", required=true)
    private Output<String> include;

    /**
     * @return A Datadog search query used to determine which logs this processor targets.
     * 
     */
    public Output<String> include() {
        return this.include;
    }

    /**
     * The inputs for the processor.
     * 
     */
    @Import(name="inputs", required=true)
    private Output<List<String>> inputs;

    /**
     * @return The inputs for the processor.
     * 
     */
    public Output<List<String>> inputs() {
        return this.inputs;
    }

    @Import(name="limit")
    private @Nullable Output<ObservabilityPipelineConfigProcessorsQuotaLimitArgs> limit;

    public Optional<Output<ObservabilityPipelineConfigProcessorsQuotaLimitArgs>> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * The name of the quota.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the quota.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The overrides for field-specific quotas.
     * 
     */
    @Import(name="overrides")
    private @Nullable Output<List<ObservabilityPipelineConfigProcessorsQuotaOverrideArgs>> overrides;

    /**
     * @return The overrides for field-specific quotas.
     * 
     */
    public Optional<Output<List<ObservabilityPipelineConfigProcessorsQuotaOverrideArgs>>> overrides() {
        return Optional.ofNullable(this.overrides);
    }

    /**
     * List of partition fields.
     * 
     */
    @Import(name="partitionFields")
    private @Nullable Output<List<String>> partitionFields;

    /**
     * @return List of partition fields.
     * 
     */
    public Optional<Output<List<String>>> partitionFields() {
        return Optional.ofNullable(this.partitionFields);
    }

    private ObservabilityPipelineConfigProcessorsQuotaArgs() {}

    private ObservabilityPipelineConfigProcessorsQuotaArgs(ObservabilityPipelineConfigProcessorsQuotaArgs $) {
        this.dropEvents = $.dropEvents;
        this.id = $.id;
        this.ignoreWhenMissingPartitions = $.ignoreWhenMissingPartitions;
        this.include = $.include;
        this.inputs = $.inputs;
        this.limit = $.limit;
        this.name = $.name;
        this.overrides = $.overrides;
        this.partitionFields = $.partitionFields;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservabilityPipelineConfigProcessorsQuotaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservabilityPipelineConfigProcessorsQuotaArgs $;

        public Builder() {
            $ = new ObservabilityPipelineConfigProcessorsQuotaArgs();
        }

        public Builder(ObservabilityPipelineConfigProcessorsQuotaArgs defaults) {
            $ = new ObservabilityPipelineConfigProcessorsQuotaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dropEvents Whether to drop events exceeding the limit.
         * 
         * @return builder
         * 
         */
        public Builder dropEvents(Output<Boolean> dropEvents) {
            $.dropEvents = dropEvents;
            return this;
        }

        /**
         * @param dropEvents Whether to drop events exceeding the limit.
         * 
         * @return builder
         * 
         */
        public Builder dropEvents(Boolean dropEvents) {
            return dropEvents(Output.of(dropEvents));
        }

        /**
         * @param id The unique ID of the processor.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique ID of the processor.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param ignoreWhenMissingPartitions Whether to ignore when partition fields are missing.
         * 
         * @return builder
         * 
         */
        public Builder ignoreWhenMissingPartitions(@Nullable Output<Boolean> ignoreWhenMissingPartitions) {
            $.ignoreWhenMissingPartitions = ignoreWhenMissingPartitions;
            return this;
        }

        /**
         * @param ignoreWhenMissingPartitions Whether to ignore when partition fields are missing.
         * 
         * @return builder
         * 
         */
        public Builder ignoreWhenMissingPartitions(Boolean ignoreWhenMissingPartitions) {
            return ignoreWhenMissingPartitions(Output.of(ignoreWhenMissingPartitions));
        }

        /**
         * @param include A Datadog search query used to determine which logs this processor targets.
         * 
         * @return builder
         * 
         */
        public Builder include(Output<String> include) {
            $.include = include;
            return this;
        }

        /**
         * @param include A Datadog search query used to determine which logs this processor targets.
         * 
         * @return builder
         * 
         */
        public Builder include(String include) {
            return include(Output.of(include));
        }

        /**
         * @param inputs The inputs for the processor.
         * 
         * @return builder
         * 
         */
        public Builder inputs(Output<List<String>> inputs) {
            $.inputs = inputs;
            return this;
        }

        /**
         * @param inputs The inputs for the processor.
         * 
         * @return builder
         * 
         */
        public Builder inputs(List<String> inputs) {
            return inputs(Output.of(inputs));
        }

        /**
         * @param inputs The inputs for the processor.
         * 
         * @return builder
         * 
         */
        public Builder inputs(String... inputs) {
            return inputs(List.of(inputs));
        }

        public Builder limit(@Nullable Output<ObservabilityPipelineConfigProcessorsQuotaLimitArgs> limit) {
            $.limit = limit;
            return this;
        }

        public Builder limit(ObservabilityPipelineConfigProcessorsQuotaLimitArgs limit) {
            return limit(Output.of(limit));
        }

        /**
         * @param name The name of the quota.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the quota.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param overrides The overrides for field-specific quotas.
         * 
         * @return builder
         * 
         */
        public Builder overrides(@Nullable Output<List<ObservabilityPipelineConfigProcessorsQuotaOverrideArgs>> overrides) {
            $.overrides = overrides;
            return this;
        }

        /**
         * @param overrides The overrides for field-specific quotas.
         * 
         * @return builder
         * 
         */
        public Builder overrides(List<ObservabilityPipelineConfigProcessorsQuotaOverrideArgs> overrides) {
            return overrides(Output.of(overrides));
        }

        /**
         * @param overrides The overrides for field-specific quotas.
         * 
         * @return builder
         * 
         */
        public Builder overrides(ObservabilityPipelineConfigProcessorsQuotaOverrideArgs... overrides) {
            return overrides(List.of(overrides));
        }

        /**
         * @param partitionFields List of partition fields.
         * 
         * @return builder
         * 
         */
        public Builder partitionFields(@Nullable Output<List<String>> partitionFields) {
            $.partitionFields = partitionFields;
            return this;
        }

        /**
         * @param partitionFields List of partition fields.
         * 
         * @return builder
         * 
         */
        public Builder partitionFields(List<String> partitionFields) {
            return partitionFields(Output.of(partitionFields));
        }

        /**
         * @param partitionFields List of partition fields.
         * 
         * @return builder
         * 
         */
        public Builder partitionFields(String... partitionFields) {
            return partitionFields(List.of(partitionFields));
        }

        public ObservabilityPipelineConfigProcessorsQuotaArgs build() {
            if ($.dropEvents == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsQuotaArgs", "dropEvents");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsQuotaArgs", "id");
            }
            if ($.include == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsQuotaArgs", "include");
            }
            if ($.inputs == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsQuotaArgs", "inputs");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ObservabilityPipelineConfigProcessorsQuotaArgs", "name");
            }
            return $;
        }
    }

}
