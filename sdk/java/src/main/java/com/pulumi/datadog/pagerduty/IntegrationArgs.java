// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.pagerduty;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationArgs Empty = new IntegrationArgs();

    /**
     * Your PagerDuty API token.
     * 
     */
    @Import(name="apiToken")
    private @Nullable Output<String> apiToken;

    /**
     * @return Your PagerDuty API token.
     * 
     */
    public Optional<Output<String>> apiToken() {
        return Optional.ofNullable(this.apiToken);
    }

    /**
     * Array of your schedule URLs.
     * 
     */
    @Import(name="schedules")
    private @Nullable Output<List<String>> schedules;

    /**
     * @return Array of your schedule URLs.
     * 
     */
    public Optional<Output<List<String>>> schedules() {
        return Optional.ofNullable(this.schedules);
    }

    /**
     * Your PagerDuty account’s personalized subdomain name.
     * 
     */
    @Import(name="subdomain", required=true)
    private Output<String> subdomain;

    /**
     * @return Your PagerDuty account’s personalized subdomain name.
     * 
     */
    public Output<String> subdomain() {
        return this.subdomain;
    }

    private IntegrationArgs() {}

    private IntegrationArgs(IntegrationArgs $) {
        this.apiToken = $.apiToken;
        this.schedules = $.schedules;
        this.subdomain = $.subdomain;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationArgs $;

        public Builder() {
            $ = new IntegrationArgs();
        }

        public Builder(IntegrationArgs defaults) {
            $ = new IntegrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiToken Your PagerDuty API token.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(@Nullable Output<String> apiToken) {
            $.apiToken = apiToken;
            return this;
        }

        /**
         * @param apiToken Your PagerDuty API token.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(String apiToken) {
            return apiToken(Output.of(apiToken));
        }

        /**
         * @param schedules Array of your schedule URLs.
         * 
         * @return builder
         * 
         */
        public Builder schedules(@Nullable Output<List<String>> schedules) {
            $.schedules = schedules;
            return this;
        }

        /**
         * @param schedules Array of your schedule URLs.
         * 
         * @return builder
         * 
         */
        public Builder schedules(List<String> schedules) {
            return schedules(Output.of(schedules));
        }

        /**
         * @param schedules Array of your schedule URLs.
         * 
         * @return builder
         * 
         */
        public Builder schedules(String... schedules) {
            return schedules(List.of(schedules));
        }

        /**
         * @param subdomain Your PagerDuty account’s personalized subdomain name.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(Output<String> subdomain) {
            $.subdomain = subdomain;
            return this;
        }

        /**
         * @param subdomain Your PagerDuty account’s personalized subdomain name.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(String subdomain) {
            return subdomain(Output.of(subdomain));
        }

        public IntegrationArgs build() {
            if ($.subdomain == null) {
                throw new MissingRequiredPropertyException("IntegrationArgs", "subdomain");
            }
            return $;
        }
    }

}
