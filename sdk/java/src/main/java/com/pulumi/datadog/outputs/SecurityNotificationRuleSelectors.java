// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecurityNotificationRuleSelectors {
    /**
     * @return Comprises one or several key:value pairs for filtering security issues based on tags and attributes. Defaults to `&#34;&#34;`.
     * 
     */
    private @Nullable String query;
    /**
     * @return Specifies security rule types for filtering signals and vulnerabilities that generate notifications.
     * 
     */
    private List<String> ruleTypes;
    /**
     * @return The security rules severities to consider.
     * 
     */
    private @Nullable List<String> severities;
    /**
     * @return The type of security issues the rule applies to. Use `security_signals` for rules based on security signals and `security_findings` for those based on vulnerabilities.
     * 
     */
    private String triggerSource;

    private SecurityNotificationRuleSelectors() {}
    /**
     * @return Comprises one or several key:value pairs for filtering security issues based on tags and attributes. Defaults to `&#34;&#34;`.
     * 
     */
    public Optional<String> query() {
        return Optional.ofNullable(this.query);
    }
    /**
     * @return Specifies security rule types for filtering signals and vulnerabilities that generate notifications.
     * 
     */
    public List<String> ruleTypes() {
        return this.ruleTypes;
    }
    /**
     * @return The security rules severities to consider.
     * 
     */
    public List<String> severities() {
        return this.severities == null ? List.of() : this.severities;
    }
    /**
     * @return The type of security issues the rule applies to. Use `security_signals` for rules based on security signals and `security_findings` for those based on vulnerabilities.
     * 
     */
    public String triggerSource() {
        return this.triggerSource;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityNotificationRuleSelectors defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String query;
        private List<String> ruleTypes;
        private @Nullable List<String> severities;
        private String triggerSource;
        public Builder() {}
        public Builder(SecurityNotificationRuleSelectors defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.query = defaults.query;
    	      this.ruleTypes = defaults.ruleTypes;
    	      this.severities = defaults.severities;
    	      this.triggerSource = defaults.triggerSource;
        }

        @CustomType.Setter
        public Builder query(@Nullable String query) {

            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder ruleTypes(List<String> ruleTypes) {
            if (ruleTypes == null) {
              throw new MissingRequiredPropertyException("SecurityNotificationRuleSelectors", "ruleTypes");
            }
            this.ruleTypes = ruleTypes;
            return this;
        }
        public Builder ruleTypes(String... ruleTypes) {
            return ruleTypes(List.of(ruleTypes));
        }
        @CustomType.Setter
        public Builder severities(@Nullable List<String> severities) {

            this.severities = severities;
            return this;
        }
        public Builder severities(String... severities) {
            return severities(List.of(severities));
        }
        @CustomType.Setter
        public Builder triggerSource(String triggerSource) {
            if (triggerSource == null) {
              throw new MissingRequiredPropertyException("SecurityNotificationRuleSelectors", "triggerSource");
            }
            this.triggerSource = triggerSource;
            return this;
        }
        public SecurityNotificationRuleSelectors build() {
            final var _resultValue = new SecurityNotificationRuleSelectors();
            _resultValue.query = query;
            _resultValue.ruleTypes = ruleTypes;
            _resultValue.severities = severities;
            _resultValue.triggerSource = triggerSource;
            return _resultValue;
        }
    }
}
