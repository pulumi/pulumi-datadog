// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsAddEnvVar;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsAddField;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsCustomProcessor;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsDatadogTag;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsDedupe;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsEnrichmentTable;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsFilter;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsGenerateDatadogMetric;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsOcsfMapper;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsParseGrok;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsParseJson;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsQuota;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsReduce;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsRemoveField;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsRenameField;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsSample;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsSensitiveDataScanner;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsThrottle;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class ObservabilityPipelineConfigProcessors {
    /**
     * @return The `addEnvVars` processor adds environment variable values to log events.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsAddEnvVar> addEnvVars;
    /**
     * @return The `addFields` processor adds static key-value fields to logs.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsAddField> addFields;
    /**
     * @return The `customProcessor` processor transforms events using Vector Remap Language (VRL) scripts with advanced filtering capabilities.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsCustomProcessor> customProcessors;
    private @Nullable List<ObservabilityPipelineConfigProcessorsDatadogTag> datadogTags;
    /**
     * @return The `dedupe` processor removes duplicate fields in log events.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsDedupe> dedupes;
    /**
     * @return The `enrichmentTable` processor enriches logs using a static CSV file or GeoIP database.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsEnrichmentTable> enrichmentTables;
    /**
     * @return The `filter` processor allows conditional processing of logs based on a Datadog search query. Logs that match the `include` query are passed through; others are discarded.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsFilter> filters;
    /**
     * @return The `generateDatadogMetrics` processor creates custom metrics from logs. Metrics can be counters, gauges, or distributions and optionally grouped by log fields.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsGenerateDatadogMetric> generateDatadogMetrics;
    /**
     * @return The `ocsfMapper` processor transforms logs into the OCSF schema using predefined library mappings.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsOcsfMapper> ocsfMappers;
    /**
     * @return The `parseGrok` processor extracts structured fields from unstructured log messages using Grok patterns.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsParseGrok> parseGroks;
    /**
     * @return The `parseJson` processor extracts JSON from a specified field and flattens it into the event. This is useful when logs contain embedded JSON as a string.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsParseJson> parseJsons;
    /**
     * @return The `quota` measures logging traffic for logs that match a specified filter. When the configured daily quota is met, the processor can drop or alert.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsQuota> quotas;
    /**
     * @return The `reduce` processor aggregates and merges logs based on matching keys and merge strategies.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsReduce> reduces;
    /**
     * @return The `removeFields` processor deletes specified fields from logs.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsRemoveField> removeFields;
    /**
     * @return The `renameFields` processor changes field names.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsRenameField> renameFields;
    /**
     * @return The `sample` processor allows probabilistic sampling of logs at a fixed rate.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsSample> samples;
    /**
     * @return The `sensitiveDataScanner` processor detects and optionally redacts sensitive data in log events.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsSensitiveDataScanner> sensitiveDataScanners;
    /**
     * @return The `throttle` processor limits the number of events that pass through over a given time window.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsThrottle> throttles;

    private ObservabilityPipelineConfigProcessors() {}
    /**
     * @return The `addEnvVars` processor adds environment variable values to log events.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsAddEnvVar> addEnvVars() {
        return this.addEnvVars == null ? List.of() : this.addEnvVars;
    }
    /**
     * @return The `addFields` processor adds static key-value fields to logs.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsAddField> addFields() {
        return this.addFields == null ? List.of() : this.addFields;
    }
    /**
     * @return The `customProcessor` processor transforms events using Vector Remap Language (VRL) scripts with advanced filtering capabilities.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsCustomProcessor> customProcessors() {
        return this.customProcessors == null ? List.of() : this.customProcessors;
    }
    public List<ObservabilityPipelineConfigProcessorsDatadogTag> datadogTags() {
        return this.datadogTags == null ? List.of() : this.datadogTags;
    }
    /**
     * @return The `dedupe` processor removes duplicate fields in log events.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsDedupe> dedupes() {
        return this.dedupes == null ? List.of() : this.dedupes;
    }
    /**
     * @return The `enrichmentTable` processor enriches logs using a static CSV file or GeoIP database.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsEnrichmentTable> enrichmentTables() {
        return this.enrichmentTables == null ? List.of() : this.enrichmentTables;
    }
    /**
     * @return The `filter` processor allows conditional processing of logs based on a Datadog search query. Logs that match the `include` query are passed through; others are discarded.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The `generateDatadogMetrics` processor creates custom metrics from logs. Metrics can be counters, gauges, or distributions and optionally grouped by log fields.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsGenerateDatadogMetric> generateDatadogMetrics() {
        return this.generateDatadogMetrics == null ? List.of() : this.generateDatadogMetrics;
    }
    /**
     * @return The `ocsfMapper` processor transforms logs into the OCSF schema using predefined library mappings.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsOcsfMapper> ocsfMappers() {
        return this.ocsfMappers == null ? List.of() : this.ocsfMappers;
    }
    /**
     * @return The `parseGrok` processor extracts structured fields from unstructured log messages using Grok patterns.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsParseGrok> parseGroks() {
        return this.parseGroks == null ? List.of() : this.parseGroks;
    }
    /**
     * @return The `parseJson` processor extracts JSON from a specified field and flattens it into the event. This is useful when logs contain embedded JSON as a string.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsParseJson> parseJsons() {
        return this.parseJsons == null ? List.of() : this.parseJsons;
    }
    /**
     * @return The `quota` measures logging traffic for logs that match a specified filter. When the configured daily quota is met, the processor can drop or alert.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsQuota> quotas() {
        return this.quotas == null ? List.of() : this.quotas;
    }
    /**
     * @return The `reduce` processor aggregates and merges logs based on matching keys and merge strategies.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsReduce> reduces() {
        return this.reduces == null ? List.of() : this.reduces;
    }
    /**
     * @return The `removeFields` processor deletes specified fields from logs.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsRemoveField> removeFields() {
        return this.removeFields == null ? List.of() : this.removeFields;
    }
    /**
     * @return The `renameFields` processor changes field names.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsRenameField> renameFields() {
        return this.renameFields == null ? List.of() : this.renameFields;
    }
    /**
     * @return The `sample` processor allows probabilistic sampling of logs at a fixed rate.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsSample> samples() {
        return this.samples == null ? List.of() : this.samples;
    }
    /**
     * @return The `sensitiveDataScanner` processor detects and optionally redacts sensitive data in log events.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsSensitiveDataScanner> sensitiveDataScanners() {
        return this.sensitiveDataScanners == null ? List.of() : this.sensitiveDataScanners;
    }
    /**
     * @return The `throttle` processor limits the number of events that pass through over a given time window.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsThrottle> throttles() {
        return this.throttles == null ? List.of() : this.throttles;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObservabilityPipelineConfigProcessors defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ObservabilityPipelineConfigProcessorsAddEnvVar> addEnvVars;
        private @Nullable List<ObservabilityPipelineConfigProcessorsAddField> addFields;
        private @Nullable List<ObservabilityPipelineConfigProcessorsCustomProcessor> customProcessors;
        private @Nullable List<ObservabilityPipelineConfigProcessorsDatadogTag> datadogTags;
        private @Nullable List<ObservabilityPipelineConfigProcessorsDedupe> dedupes;
        private @Nullable List<ObservabilityPipelineConfigProcessorsEnrichmentTable> enrichmentTables;
        private @Nullable List<ObservabilityPipelineConfigProcessorsFilter> filters;
        private @Nullable List<ObservabilityPipelineConfigProcessorsGenerateDatadogMetric> generateDatadogMetrics;
        private @Nullable List<ObservabilityPipelineConfigProcessorsOcsfMapper> ocsfMappers;
        private @Nullable List<ObservabilityPipelineConfigProcessorsParseGrok> parseGroks;
        private @Nullable List<ObservabilityPipelineConfigProcessorsParseJson> parseJsons;
        private @Nullable List<ObservabilityPipelineConfigProcessorsQuota> quotas;
        private @Nullable List<ObservabilityPipelineConfigProcessorsReduce> reduces;
        private @Nullable List<ObservabilityPipelineConfigProcessorsRemoveField> removeFields;
        private @Nullable List<ObservabilityPipelineConfigProcessorsRenameField> renameFields;
        private @Nullable List<ObservabilityPipelineConfigProcessorsSample> samples;
        private @Nullable List<ObservabilityPipelineConfigProcessorsSensitiveDataScanner> sensitiveDataScanners;
        private @Nullable List<ObservabilityPipelineConfigProcessorsThrottle> throttles;
        public Builder() {}
        public Builder(ObservabilityPipelineConfigProcessors defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addEnvVars = defaults.addEnvVars;
    	      this.addFields = defaults.addFields;
    	      this.customProcessors = defaults.customProcessors;
    	      this.datadogTags = defaults.datadogTags;
    	      this.dedupes = defaults.dedupes;
    	      this.enrichmentTables = defaults.enrichmentTables;
    	      this.filters = defaults.filters;
    	      this.generateDatadogMetrics = defaults.generateDatadogMetrics;
    	      this.ocsfMappers = defaults.ocsfMappers;
    	      this.parseGroks = defaults.parseGroks;
    	      this.parseJsons = defaults.parseJsons;
    	      this.quotas = defaults.quotas;
    	      this.reduces = defaults.reduces;
    	      this.removeFields = defaults.removeFields;
    	      this.renameFields = defaults.renameFields;
    	      this.samples = defaults.samples;
    	      this.sensitiveDataScanners = defaults.sensitiveDataScanners;
    	      this.throttles = defaults.throttles;
        }

        @CustomType.Setter
        public Builder addEnvVars(@Nullable List<ObservabilityPipelineConfigProcessorsAddEnvVar> addEnvVars) {

            this.addEnvVars = addEnvVars;
            return this;
        }
        public Builder addEnvVars(ObservabilityPipelineConfigProcessorsAddEnvVar... addEnvVars) {
            return addEnvVars(List.of(addEnvVars));
        }
        @CustomType.Setter
        public Builder addFields(@Nullable List<ObservabilityPipelineConfigProcessorsAddField> addFields) {

            this.addFields = addFields;
            return this;
        }
        public Builder addFields(ObservabilityPipelineConfigProcessorsAddField... addFields) {
            return addFields(List.of(addFields));
        }
        @CustomType.Setter
        public Builder customProcessors(@Nullable List<ObservabilityPipelineConfigProcessorsCustomProcessor> customProcessors) {

            this.customProcessors = customProcessors;
            return this;
        }
        public Builder customProcessors(ObservabilityPipelineConfigProcessorsCustomProcessor... customProcessors) {
            return customProcessors(List.of(customProcessors));
        }
        @CustomType.Setter
        public Builder datadogTags(@Nullable List<ObservabilityPipelineConfigProcessorsDatadogTag> datadogTags) {

            this.datadogTags = datadogTags;
            return this;
        }
        public Builder datadogTags(ObservabilityPipelineConfigProcessorsDatadogTag... datadogTags) {
            return datadogTags(List.of(datadogTags));
        }
        @CustomType.Setter
        public Builder dedupes(@Nullable List<ObservabilityPipelineConfigProcessorsDedupe> dedupes) {

            this.dedupes = dedupes;
            return this;
        }
        public Builder dedupes(ObservabilityPipelineConfigProcessorsDedupe... dedupes) {
            return dedupes(List.of(dedupes));
        }
        @CustomType.Setter
        public Builder enrichmentTables(@Nullable List<ObservabilityPipelineConfigProcessorsEnrichmentTable> enrichmentTables) {

            this.enrichmentTables = enrichmentTables;
            return this;
        }
        public Builder enrichmentTables(ObservabilityPipelineConfigProcessorsEnrichmentTable... enrichmentTables) {
            return enrichmentTables(List.of(enrichmentTables));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<ObservabilityPipelineConfigProcessorsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(ObservabilityPipelineConfigProcessorsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder generateDatadogMetrics(@Nullable List<ObservabilityPipelineConfigProcessorsGenerateDatadogMetric> generateDatadogMetrics) {

            this.generateDatadogMetrics = generateDatadogMetrics;
            return this;
        }
        public Builder generateDatadogMetrics(ObservabilityPipelineConfigProcessorsGenerateDatadogMetric... generateDatadogMetrics) {
            return generateDatadogMetrics(List.of(generateDatadogMetrics));
        }
        @CustomType.Setter
        public Builder ocsfMappers(@Nullable List<ObservabilityPipelineConfigProcessorsOcsfMapper> ocsfMappers) {

            this.ocsfMappers = ocsfMappers;
            return this;
        }
        public Builder ocsfMappers(ObservabilityPipelineConfigProcessorsOcsfMapper... ocsfMappers) {
            return ocsfMappers(List.of(ocsfMappers));
        }
        @CustomType.Setter
        public Builder parseGroks(@Nullable List<ObservabilityPipelineConfigProcessorsParseGrok> parseGroks) {

            this.parseGroks = parseGroks;
            return this;
        }
        public Builder parseGroks(ObservabilityPipelineConfigProcessorsParseGrok... parseGroks) {
            return parseGroks(List.of(parseGroks));
        }
        @CustomType.Setter
        public Builder parseJsons(@Nullable List<ObservabilityPipelineConfigProcessorsParseJson> parseJsons) {

            this.parseJsons = parseJsons;
            return this;
        }
        public Builder parseJsons(ObservabilityPipelineConfigProcessorsParseJson... parseJsons) {
            return parseJsons(List.of(parseJsons));
        }
        @CustomType.Setter
        public Builder quotas(@Nullable List<ObservabilityPipelineConfigProcessorsQuota> quotas) {

            this.quotas = quotas;
            return this;
        }
        public Builder quotas(ObservabilityPipelineConfigProcessorsQuota... quotas) {
            return quotas(List.of(quotas));
        }
        @CustomType.Setter
        public Builder reduces(@Nullable List<ObservabilityPipelineConfigProcessorsReduce> reduces) {

            this.reduces = reduces;
            return this;
        }
        public Builder reduces(ObservabilityPipelineConfigProcessorsReduce... reduces) {
            return reduces(List.of(reduces));
        }
        @CustomType.Setter
        public Builder removeFields(@Nullable List<ObservabilityPipelineConfigProcessorsRemoveField> removeFields) {

            this.removeFields = removeFields;
            return this;
        }
        public Builder removeFields(ObservabilityPipelineConfigProcessorsRemoveField... removeFields) {
            return removeFields(List.of(removeFields));
        }
        @CustomType.Setter
        public Builder renameFields(@Nullable List<ObservabilityPipelineConfigProcessorsRenameField> renameFields) {

            this.renameFields = renameFields;
            return this;
        }
        public Builder renameFields(ObservabilityPipelineConfigProcessorsRenameField... renameFields) {
            return renameFields(List.of(renameFields));
        }
        @CustomType.Setter
        public Builder samples(@Nullable List<ObservabilityPipelineConfigProcessorsSample> samples) {

            this.samples = samples;
            return this;
        }
        public Builder samples(ObservabilityPipelineConfigProcessorsSample... samples) {
            return samples(List.of(samples));
        }
        @CustomType.Setter
        public Builder sensitiveDataScanners(@Nullable List<ObservabilityPipelineConfigProcessorsSensitiveDataScanner> sensitiveDataScanners) {

            this.sensitiveDataScanners = sensitiveDataScanners;
            return this;
        }
        public Builder sensitiveDataScanners(ObservabilityPipelineConfigProcessorsSensitiveDataScanner... sensitiveDataScanners) {
            return sensitiveDataScanners(List.of(sensitiveDataScanners));
        }
        @CustomType.Setter
        public Builder throttles(@Nullable List<ObservabilityPipelineConfigProcessorsThrottle> throttles) {

            this.throttles = throttles;
            return this;
        }
        public Builder throttles(ObservabilityPipelineConfigProcessorsThrottle... throttles) {
            return throttles(List.of(throttles));
        }
        public ObservabilityPipelineConfigProcessors build() {
            final var _resultValue = new ObservabilityPipelineConfigProcessors();
            _resultValue.addEnvVars = addEnvVars;
            _resultValue.addFields = addFields;
            _resultValue.customProcessors = customProcessors;
            _resultValue.datadogTags = datadogTags;
            _resultValue.dedupes = dedupes;
            _resultValue.enrichmentTables = enrichmentTables;
            _resultValue.filters = filters;
            _resultValue.generateDatadogMetrics = generateDatadogMetrics;
            _resultValue.ocsfMappers = ocsfMappers;
            _resultValue.parseGroks = parseGroks;
            _resultValue.parseJsons = parseJsons;
            _resultValue.quotas = quotas;
            _resultValue.reduces = reduces;
            _resultValue.removeFields = removeFields;
            _resultValue.renameFields = renameFields;
            _resultValue.samples = samples;
            _resultValue.sensitiveDataScanners = sensitiveDataScanners;
            _resultValue.throttles = throttles;
            return _resultValue;
        }
    }
}
