// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsAddField;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsFilter;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsParseJson;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsQuota;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsRemoveField;
import com.pulumi.datadog.outputs.ObservabilityPipelineConfigProcessorsRenameField;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class ObservabilityPipelineConfigProcessors {
    /**
     * @return The `add_fields` processor adds static key-value fields to logs.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsAddField> addFields;
    /**
     * @return The `filter` processor allows conditional processing of logs based on a Datadog search query. Logs that match the `include` query are passed through; others are discarded.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsFilter> filters;
    /**
     * @return The `parse_json` processor extracts JSON from a specified field and flattens it into the event. This is useful when logs contain embedded JSON as a string.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsParseJson> parseJsons;
    /**
     * @return The `quota` measures logging traffic for logs that match a specified filter. When the configured daily quota is met, the processor can drop or alert.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsQuota> quotas;
    /**
     * @return The `remove_fields` processor deletes specified fields from logs.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsRemoveField> removeFields;
    /**
     * @return The `rename_fields` processor changes field names.
     * 
     */
    private @Nullable List<ObservabilityPipelineConfigProcessorsRenameField> renameFields;

    private ObservabilityPipelineConfigProcessors() {}
    /**
     * @return The `add_fields` processor adds static key-value fields to logs.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsAddField> addFields() {
        return this.addFields == null ? List.of() : this.addFields;
    }
    /**
     * @return The `filter` processor allows conditional processing of logs based on a Datadog search query. Logs that match the `include` query are passed through; others are discarded.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The `parse_json` processor extracts JSON from a specified field and flattens it into the event. This is useful when logs contain embedded JSON as a string.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsParseJson> parseJsons() {
        return this.parseJsons == null ? List.of() : this.parseJsons;
    }
    /**
     * @return The `quota` measures logging traffic for logs that match a specified filter. When the configured daily quota is met, the processor can drop or alert.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsQuota> quotas() {
        return this.quotas == null ? List.of() : this.quotas;
    }
    /**
     * @return The `remove_fields` processor deletes specified fields from logs.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsRemoveField> removeFields() {
        return this.removeFields == null ? List.of() : this.removeFields;
    }
    /**
     * @return The `rename_fields` processor changes field names.
     * 
     */
    public List<ObservabilityPipelineConfigProcessorsRenameField> renameFields() {
        return this.renameFields == null ? List.of() : this.renameFields;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObservabilityPipelineConfigProcessors defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ObservabilityPipelineConfigProcessorsAddField> addFields;
        private @Nullable List<ObservabilityPipelineConfigProcessorsFilter> filters;
        private @Nullable List<ObservabilityPipelineConfigProcessorsParseJson> parseJsons;
        private @Nullable List<ObservabilityPipelineConfigProcessorsQuota> quotas;
        private @Nullable List<ObservabilityPipelineConfigProcessorsRemoveField> removeFields;
        private @Nullable List<ObservabilityPipelineConfigProcessorsRenameField> renameFields;
        public Builder() {}
        public Builder(ObservabilityPipelineConfigProcessors defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addFields = defaults.addFields;
    	      this.filters = defaults.filters;
    	      this.parseJsons = defaults.parseJsons;
    	      this.quotas = defaults.quotas;
    	      this.removeFields = defaults.removeFields;
    	      this.renameFields = defaults.renameFields;
        }

        @CustomType.Setter
        public Builder addFields(@Nullable List<ObservabilityPipelineConfigProcessorsAddField> addFields) {

            this.addFields = addFields;
            return this;
        }
        public Builder addFields(ObservabilityPipelineConfigProcessorsAddField... addFields) {
            return addFields(List.of(addFields));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<ObservabilityPipelineConfigProcessorsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(ObservabilityPipelineConfigProcessorsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder parseJsons(@Nullable List<ObservabilityPipelineConfigProcessorsParseJson> parseJsons) {

            this.parseJsons = parseJsons;
            return this;
        }
        public Builder parseJsons(ObservabilityPipelineConfigProcessorsParseJson... parseJsons) {
            return parseJsons(List.of(parseJsons));
        }
        @CustomType.Setter
        public Builder quotas(@Nullable List<ObservabilityPipelineConfigProcessorsQuota> quotas) {

            this.quotas = quotas;
            return this;
        }
        public Builder quotas(ObservabilityPipelineConfigProcessorsQuota... quotas) {
            return quotas(List.of(quotas));
        }
        @CustomType.Setter
        public Builder removeFields(@Nullable List<ObservabilityPipelineConfigProcessorsRemoveField> removeFields) {

            this.removeFields = removeFields;
            return this;
        }
        public Builder removeFields(ObservabilityPipelineConfigProcessorsRemoveField... removeFields) {
            return removeFields(List.of(removeFields));
        }
        @CustomType.Setter
        public Builder renameFields(@Nullable List<ObservabilityPipelineConfigProcessorsRenameField> renameFields) {

            this.renameFields = renameFields;
            return this;
        }
        public Builder renameFields(ObservabilityPipelineConfigProcessorsRenameField... renameFields) {
            return renameFields(List.of(renameFields));
        }
        public ObservabilityPipelineConfigProcessors build() {
            final var _resultValue = new ObservabilityPipelineConfigProcessors();
            _resultValue.addFields = addFields;
            _resultValue.filters = filters;
            _resultValue.parseJsons = parseJsons;
            _resultValue.quotas = quotas;
            _resultValue.removeFields = removeFields;
            _resultValue.renameFields = renameFields;
            return _resultValue;
        }
    }
}
