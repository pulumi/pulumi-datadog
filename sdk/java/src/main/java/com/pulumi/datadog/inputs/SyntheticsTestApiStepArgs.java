// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.SyntheticsTestApiStepAssertionArgs;
import com.pulumi.datadog.inputs.SyntheticsTestApiStepExtractedValueArgs;
import com.pulumi.datadog.inputs.SyntheticsTestApiStepRequestBasicauthArgs;
import com.pulumi.datadog.inputs.SyntheticsTestApiStepRequestClientCertificateArgs;
import com.pulumi.datadog.inputs.SyntheticsTestApiStepRequestDefinitionArgs;
import com.pulumi.datadog.inputs.SyntheticsTestApiStepRequestFileArgs;
import com.pulumi.datadog.inputs.SyntheticsTestApiStepRequestProxyArgs;
import com.pulumi.datadog.inputs.SyntheticsTestApiStepRetryArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticsTestApiStepArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticsTestApiStepArgs Empty = new SyntheticsTestApiStepArgs();

    /**
     * Determines whether or not to continue with test if this step fails.
     * 
     */
    @Import(name="allowFailure")
    private @Nullable Output<Boolean> allowFailure;

    /**
     * @return Determines whether or not to continue with test if this step fails.
     * 
     */
    public Optional<Output<Boolean>> allowFailure() {
        return Optional.ofNullable(this.allowFailure);
    }

    /**
     * Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
     * 
     */
    @Import(name="assertions")
    private @Nullable Output<List<SyntheticsTestApiStepAssertionArgs>> assertions;

    /**
     * @return Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
     * 
     */
    public Optional<Output<List<SyntheticsTestApiStepAssertionArgs>>> assertions() {
        return Optional.ofNullable(this.assertions);
    }

    /**
     * Values to parse and save as variables from the response.
     * 
     */
    @Import(name="extractedValues")
    private @Nullable Output<List<SyntheticsTestApiStepExtractedValueArgs>> extractedValues;

    /**
     * @return Values to parse and save as variables from the response.
     * 
     */
    public Optional<Output<List<SyntheticsTestApiStepExtractedValueArgs>>> extractedValues() {
        return Optional.ofNullable(this.extractedValues);
    }

    /**
     * Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
     * 
     */
    @Import(name="isCritical")
    private @Nullable Output<Boolean> isCritical;

    /**
     * @return Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
     * 
     */
    public Optional<Output<Boolean>> isCritical() {
        return Optional.ofNullable(this.isCritical);
    }

    /**
     * The name of the step.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the step.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
     * 
     */
    @Import(name="requestBasicauth")
    private @Nullable Output<SyntheticsTestApiStepRequestBasicauthArgs> requestBasicauth;

    /**
     * @return The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
     * 
     */
    public Optional<Output<SyntheticsTestApiStepRequestBasicauthArgs>> requestBasicauth() {
        return Optional.ofNullable(this.requestBasicauth);
    }

    /**
     * Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
     * 
     */
    @Import(name="requestClientCertificate")
    private @Nullable Output<SyntheticsTestApiStepRequestClientCertificateArgs> requestClientCertificate;

    /**
     * @return Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
     * 
     */
    public Optional<Output<SyntheticsTestApiStepRequestClientCertificateArgs>> requestClientCertificate() {
        return Optional.ofNullable(this.requestClientCertificate);
    }

    /**
     * The request for the api step.
     * 
     */
    @Import(name="requestDefinition")
    private @Nullable Output<SyntheticsTestApiStepRequestDefinitionArgs> requestDefinition;

    /**
     * @return The request for the api step.
     * 
     */
    public Optional<Output<SyntheticsTestApiStepRequestDefinitionArgs>> requestDefinition() {
        return Optional.ofNullable(this.requestDefinition);
    }

    /**
     * Files to be used as part of the request in the test.
     * 
     */
    @Import(name="requestFiles")
    private @Nullable Output<List<SyntheticsTestApiStepRequestFileArgs>> requestFiles;

    /**
     * @return Files to be used as part of the request in the test.
     * 
     */
    public Optional<Output<List<SyntheticsTestApiStepRequestFileArgs>>> requestFiles() {
        return Optional.ofNullable(this.requestFiles);
    }

    /**
     * Header name and value map.
     * 
     */
    @Import(name="requestHeaders")
    private @Nullable Output<Map<String,String>> requestHeaders;

    /**
     * @return Header name and value map.
     * 
     */
    public Optional<Output<Map<String,String>>> requestHeaders() {
        return Optional.ofNullable(this.requestHeaders);
    }

    /**
     * Metadata to include when performing the gRPC request.
     * 
     */
    @Import(name="requestMetadata")
    private @Nullable Output<Map<String,String>> requestMetadata;

    /**
     * @return Metadata to include when performing the gRPC request.
     * 
     */
    public Optional<Output<Map<String,String>>> requestMetadata() {
        return Optional.ofNullable(this.requestMetadata);
    }

    /**
     * The proxy to perform the test.
     * 
     */
    @Import(name="requestProxy")
    private @Nullable Output<SyntheticsTestApiStepRequestProxyArgs> requestProxy;

    /**
     * @return The proxy to perform the test.
     * 
     */
    public Optional<Output<SyntheticsTestApiStepRequestProxyArgs>> requestProxy() {
        return Optional.ofNullable(this.requestProxy);
    }

    /**
     * Query arguments name and value map.
     * 
     */
    @Import(name="requestQuery")
    private @Nullable Output<Map<String,String>> requestQuery;

    /**
     * @return Query arguments name and value map.
     * 
     */
    public Optional<Output<Map<String,String>>> requestQuery() {
        return Optional.ofNullable(this.requestQuery);
    }

    @Import(name="retry")
    private @Nullable Output<SyntheticsTestApiStepRetryArgs> retry;

    public Optional<Output<SyntheticsTestApiStepRetryArgs>> retry() {
        return Optional.ofNullable(this.retry);
    }

    /**
     * The subtype of the Synthetic multi-step API test step. Valid values are `http`, `grpc`, `wait`. Defaults to `&#34;http&#34;`.
     * 
     */
    @Import(name="subtype")
    private @Nullable Output<String> subtype;

    /**
     * @return The subtype of the Synthetic multi-step API test step. Valid values are `http`, `grpc`, `wait`. Defaults to `&#34;http&#34;`.
     * 
     */
    public Optional<Output<String>> subtype() {
        return Optional.ofNullable(this.subtype);
    }

    /**
     * The time to wait in seconds. Minimum value: 0. Maximum value: 180.
     * 
     */
    @Import(name="value")
    private @Nullable Output<Integer> value;

    /**
     * @return The time to wait in seconds. Minimum value: 0. Maximum value: 180.
     * 
     */
    public Optional<Output<Integer>> value() {
        return Optional.ofNullable(this.value);
    }

    private SyntheticsTestApiStepArgs() {}

    private SyntheticsTestApiStepArgs(SyntheticsTestApiStepArgs $) {
        this.allowFailure = $.allowFailure;
        this.assertions = $.assertions;
        this.extractedValues = $.extractedValues;
        this.isCritical = $.isCritical;
        this.name = $.name;
        this.requestBasicauth = $.requestBasicauth;
        this.requestClientCertificate = $.requestClientCertificate;
        this.requestDefinition = $.requestDefinition;
        this.requestFiles = $.requestFiles;
        this.requestHeaders = $.requestHeaders;
        this.requestMetadata = $.requestMetadata;
        this.requestProxy = $.requestProxy;
        this.requestQuery = $.requestQuery;
        this.retry = $.retry;
        this.subtype = $.subtype;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticsTestApiStepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticsTestApiStepArgs $;

        public Builder() {
            $ = new SyntheticsTestApiStepArgs();
        }

        public Builder(SyntheticsTestApiStepArgs defaults) {
            $ = new SyntheticsTestApiStepArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowFailure Determines whether or not to continue with test if this step fails.
         * 
         * @return builder
         * 
         */
        public Builder allowFailure(@Nullable Output<Boolean> allowFailure) {
            $.allowFailure = allowFailure;
            return this;
        }

        /**
         * @param allowFailure Determines whether or not to continue with test if this step fails.
         * 
         * @return builder
         * 
         */
        public Builder allowFailure(Boolean allowFailure) {
            return allowFailure(Output.of(allowFailure));
        }

        /**
         * @param assertions Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
         * 
         * @return builder
         * 
         */
        public Builder assertions(@Nullable Output<List<SyntheticsTestApiStepAssertionArgs>> assertions) {
            $.assertions = assertions;
            return this;
        }

        /**
         * @param assertions Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
         * 
         * @return builder
         * 
         */
        public Builder assertions(List<SyntheticsTestApiStepAssertionArgs> assertions) {
            return assertions(Output.of(assertions));
        }

        /**
         * @param assertions Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
         * 
         * @return builder
         * 
         */
        public Builder assertions(SyntheticsTestApiStepAssertionArgs... assertions) {
            return assertions(List.of(assertions));
        }

        /**
         * @param extractedValues Values to parse and save as variables from the response.
         * 
         * @return builder
         * 
         */
        public Builder extractedValues(@Nullable Output<List<SyntheticsTestApiStepExtractedValueArgs>> extractedValues) {
            $.extractedValues = extractedValues;
            return this;
        }

        /**
         * @param extractedValues Values to parse and save as variables from the response.
         * 
         * @return builder
         * 
         */
        public Builder extractedValues(List<SyntheticsTestApiStepExtractedValueArgs> extractedValues) {
            return extractedValues(Output.of(extractedValues));
        }

        /**
         * @param extractedValues Values to parse and save as variables from the response.
         * 
         * @return builder
         * 
         */
        public Builder extractedValues(SyntheticsTestApiStepExtractedValueArgs... extractedValues) {
            return extractedValues(List.of(extractedValues));
        }

        /**
         * @param isCritical Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
         * 
         * @return builder
         * 
         */
        public Builder isCritical(@Nullable Output<Boolean> isCritical) {
            $.isCritical = isCritical;
            return this;
        }

        /**
         * @param isCritical Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
         * 
         * @return builder
         * 
         */
        public Builder isCritical(Boolean isCritical) {
            return isCritical(Output.of(isCritical));
        }

        /**
         * @param name The name of the step.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the step.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param requestBasicauth The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
         * 
         * @return builder
         * 
         */
        public Builder requestBasicauth(@Nullable Output<SyntheticsTestApiStepRequestBasicauthArgs> requestBasicauth) {
            $.requestBasicauth = requestBasicauth;
            return this;
        }

        /**
         * @param requestBasicauth The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
         * 
         * @return builder
         * 
         */
        public Builder requestBasicauth(SyntheticsTestApiStepRequestBasicauthArgs requestBasicauth) {
            return requestBasicauth(Output.of(requestBasicauth));
        }

        /**
         * @param requestClientCertificate Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
         * 
         * @return builder
         * 
         */
        public Builder requestClientCertificate(@Nullable Output<SyntheticsTestApiStepRequestClientCertificateArgs> requestClientCertificate) {
            $.requestClientCertificate = requestClientCertificate;
            return this;
        }

        /**
         * @param requestClientCertificate Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
         * 
         * @return builder
         * 
         */
        public Builder requestClientCertificate(SyntheticsTestApiStepRequestClientCertificateArgs requestClientCertificate) {
            return requestClientCertificate(Output.of(requestClientCertificate));
        }

        /**
         * @param requestDefinition The request for the api step.
         * 
         * @return builder
         * 
         */
        public Builder requestDefinition(@Nullable Output<SyntheticsTestApiStepRequestDefinitionArgs> requestDefinition) {
            $.requestDefinition = requestDefinition;
            return this;
        }

        /**
         * @param requestDefinition The request for the api step.
         * 
         * @return builder
         * 
         */
        public Builder requestDefinition(SyntheticsTestApiStepRequestDefinitionArgs requestDefinition) {
            return requestDefinition(Output.of(requestDefinition));
        }

        /**
         * @param requestFiles Files to be used as part of the request in the test.
         * 
         * @return builder
         * 
         */
        public Builder requestFiles(@Nullable Output<List<SyntheticsTestApiStepRequestFileArgs>> requestFiles) {
            $.requestFiles = requestFiles;
            return this;
        }

        /**
         * @param requestFiles Files to be used as part of the request in the test.
         * 
         * @return builder
         * 
         */
        public Builder requestFiles(List<SyntheticsTestApiStepRequestFileArgs> requestFiles) {
            return requestFiles(Output.of(requestFiles));
        }

        /**
         * @param requestFiles Files to be used as part of the request in the test.
         * 
         * @return builder
         * 
         */
        public Builder requestFiles(SyntheticsTestApiStepRequestFileArgs... requestFiles) {
            return requestFiles(List.of(requestFiles));
        }

        /**
         * @param requestHeaders Header name and value map.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(@Nullable Output<Map<String,String>> requestHeaders) {
            $.requestHeaders = requestHeaders;
            return this;
        }

        /**
         * @param requestHeaders Header name and value map.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(Map<String,String> requestHeaders) {
            return requestHeaders(Output.of(requestHeaders));
        }

        /**
         * @param requestMetadata Metadata to include when performing the gRPC request.
         * 
         * @return builder
         * 
         */
        public Builder requestMetadata(@Nullable Output<Map<String,String>> requestMetadata) {
            $.requestMetadata = requestMetadata;
            return this;
        }

        /**
         * @param requestMetadata Metadata to include when performing the gRPC request.
         * 
         * @return builder
         * 
         */
        public Builder requestMetadata(Map<String,String> requestMetadata) {
            return requestMetadata(Output.of(requestMetadata));
        }

        /**
         * @param requestProxy The proxy to perform the test.
         * 
         * @return builder
         * 
         */
        public Builder requestProxy(@Nullable Output<SyntheticsTestApiStepRequestProxyArgs> requestProxy) {
            $.requestProxy = requestProxy;
            return this;
        }

        /**
         * @param requestProxy The proxy to perform the test.
         * 
         * @return builder
         * 
         */
        public Builder requestProxy(SyntheticsTestApiStepRequestProxyArgs requestProxy) {
            return requestProxy(Output.of(requestProxy));
        }

        /**
         * @param requestQuery Query arguments name and value map.
         * 
         * @return builder
         * 
         */
        public Builder requestQuery(@Nullable Output<Map<String,String>> requestQuery) {
            $.requestQuery = requestQuery;
            return this;
        }

        /**
         * @param requestQuery Query arguments name and value map.
         * 
         * @return builder
         * 
         */
        public Builder requestQuery(Map<String,String> requestQuery) {
            return requestQuery(Output.of(requestQuery));
        }

        public Builder retry(@Nullable Output<SyntheticsTestApiStepRetryArgs> retry) {
            $.retry = retry;
            return this;
        }

        public Builder retry(SyntheticsTestApiStepRetryArgs retry) {
            return retry(Output.of(retry));
        }

        /**
         * @param subtype The subtype of the Synthetic multi-step API test step. Valid values are `http`, `grpc`, `wait`. Defaults to `&#34;http&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder subtype(@Nullable Output<String> subtype) {
            $.subtype = subtype;
            return this;
        }

        /**
         * @param subtype The subtype of the Synthetic multi-step API test step. Valid values are `http`, `grpc`, `wait`. Defaults to `&#34;http&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder subtype(String subtype) {
            return subtype(Output.of(subtype));
        }

        /**
         * @param value The time to wait in seconds. Minimum value: 0. Maximum value: 180.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<Integer> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The time to wait in seconds. Minimum value: 0. Maximum value: 180.
         * 
         * @return builder
         * 
         */
        public Builder value(Integer value) {
            return value(Output.of(value));
        }

        public SyntheticsTestApiStepArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("SyntheticsTestApiStepArgs", "name");
            }
            return $;
        }
    }

}
