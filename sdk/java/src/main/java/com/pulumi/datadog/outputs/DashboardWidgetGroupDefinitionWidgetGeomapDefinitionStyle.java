// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyle {
    /**
     * @return The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
     * 
     */
    private String palette;
    /**
     * @return A Boolean indicating whether to flip the palette tones.
     * 
     */
    private Boolean paletteFlip;

    private DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyle() {}
    /**
     * @return The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
     * 
     */
    public String palette() {
        return this.palette;
    }
    /**
     * @return A Boolean indicating whether to flip the palette tones.
     * 
     */
    public Boolean paletteFlip() {
        return this.paletteFlip;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyle defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String palette;
        private Boolean paletteFlip;
        public Builder() {}
        public Builder(DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyle defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.palette = defaults.palette;
    	      this.paletteFlip = defaults.paletteFlip;
        }

        @CustomType.Setter
        public Builder palette(String palette) {
            this.palette = Objects.requireNonNull(palette);
            return this;
        }
        @CustomType.Setter
        public Builder paletteFlip(Boolean paletteFlip) {
            this.paletteFlip = Objects.requireNonNull(paletteFlip);
            return this;
        }
        public DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyle build() {
            final var _resultValue = new DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyle();
            _resultValue.palette = palette;
            _resultValue.paletteFlip = paletteFlip;
            return _resultValue;
        }
    }
}
