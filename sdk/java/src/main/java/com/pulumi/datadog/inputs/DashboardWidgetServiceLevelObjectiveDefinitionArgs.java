// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetServiceLevelObjectiveDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetServiceLevelObjectiveDefinitionArgs Empty = new DashboardWidgetServiceLevelObjectiveDefinitionArgs();

    @Import(name="additionalQueryFilters")
    private @Nullable Output<String> additionalQueryFilters;

    public Optional<Output<String>> additionalQueryFilters() {
        return Optional.ofNullable(this.additionalQueryFilters);
    }

    @Import(name="globalTimeTarget")
    private @Nullable Output<String> globalTimeTarget;

    public Optional<Output<String>> globalTimeTarget() {
        return Optional.ofNullable(this.globalTimeTarget);
    }

    @Import(name="showErrorBudget")
    private @Nullable Output<Boolean> showErrorBudget;

    public Optional<Output<Boolean>> showErrorBudget() {
        return Optional.ofNullable(this.showErrorBudget);
    }

    @Import(name="sloId", required=true)
    private Output<String> sloId;

    public Output<String> sloId() {
        return this.sloId;
    }

    @Import(name="timeWindows", required=true)
    private Output<List<String>> timeWindows;

    public Output<List<String>> timeWindows() {
        return this.timeWindows;
    }

    /**
     * The title of the dashboard.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return The title of the dashboard.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    @Import(name="titleAlign")
    private @Nullable Output<String> titleAlign;

    public Optional<Output<String>> titleAlign() {
        return Optional.ofNullable(this.titleAlign);
    }

    @Import(name="titleSize")
    private @Nullable Output<String> titleSize;

    public Optional<Output<String>> titleSize() {
        return Optional.ofNullable(this.titleSize);
    }

    @Import(name="viewMode", required=true)
    private Output<String> viewMode;

    public Output<String> viewMode() {
        return this.viewMode;
    }

    @Import(name="viewType", required=true)
    private Output<String> viewType;

    public Output<String> viewType() {
        return this.viewType;
    }

    private DashboardWidgetServiceLevelObjectiveDefinitionArgs() {}

    private DashboardWidgetServiceLevelObjectiveDefinitionArgs(DashboardWidgetServiceLevelObjectiveDefinitionArgs $) {
        this.additionalQueryFilters = $.additionalQueryFilters;
        this.globalTimeTarget = $.globalTimeTarget;
        this.showErrorBudget = $.showErrorBudget;
        this.sloId = $.sloId;
        this.timeWindows = $.timeWindows;
        this.title = $.title;
        this.titleAlign = $.titleAlign;
        this.titleSize = $.titleSize;
        this.viewMode = $.viewMode;
        this.viewType = $.viewType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetServiceLevelObjectiveDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetServiceLevelObjectiveDefinitionArgs $;

        public Builder() {
            $ = new DashboardWidgetServiceLevelObjectiveDefinitionArgs();
        }

        public Builder(DashboardWidgetServiceLevelObjectiveDefinitionArgs defaults) {
            $ = new DashboardWidgetServiceLevelObjectiveDefinitionArgs(Objects.requireNonNull(defaults));
        }

        public Builder additionalQueryFilters(@Nullable Output<String> additionalQueryFilters) {
            $.additionalQueryFilters = additionalQueryFilters;
            return this;
        }

        public Builder additionalQueryFilters(String additionalQueryFilters) {
            return additionalQueryFilters(Output.of(additionalQueryFilters));
        }

        public Builder globalTimeTarget(@Nullable Output<String> globalTimeTarget) {
            $.globalTimeTarget = globalTimeTarget;
            return this;
        }

        public Builder globalTimeTarget(String globalTimeTarget) {
            return globalTimeTarget(Output.of(globalTimeTarget));
        }

        public Builder showErrorBudget(@Nullable Output<Boolean> showErrorBudget) {
            $.showErrorBudget = showErrorBudget;
            return this;
        }

        public Builder showErrorBudget(Boolean showErrorBudget) {
            return showErrorBudget(Output.of(showErrorBudget));
        }

        public Builder sloId(Output<String> sloId) {
            $.sloId = sloId;
            return this;
        }

        public Builder sloId(String sloId) {
            return sloId(Output.of(sloId));
        }

        public Builder timeWindows(Output<List<String>> timeWindows) {
            $.timeWindows = timeWindows;
            return this;
        }

        public Builder timeWindows(List<String> timeWindows) {
            return timeWindows(Output.of(timeWindows));
        }

        public Builder timeWindows(String... timeWindows) {
            return timeWindows(List.of(timeWindows));
        }

        /**
         * @param title The title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public Builder titleAlign(@Nullable Output<String> titleAlign) {
            $.titleAlign = titleAlign;
            return this;
        }

        public Builder titleAlign(String titleAlign) {
            return titleAlign(Output.of(titleAlign));
        }

        public Builder titleSize(@Nullable Output<String> titleSize) {
            $.titleSize = titleSize;
            return this;
        }

        public Builder titleSize(String titleSize) {
            return titleSize(Output.of(titleSize));
        }

        public Builder viewMode(Output<String> viewMode) {
            $.viewMode = viewMode;
            return this;
        }

        public Builder viewMode(String viewMode) {
            return viewMode(Output.of(viewMode));
        }

        public Builder viewType(Output<String> viewType) {
            $.viewType = viewType;
            return this;
        }

        public Builder viewType(String viewType) {
            return viewType(Output.of(viewType));
        }

        public DashboardWidgetServiceLevelObjectiveDefinitionArgs build() {
            $.sloId = Objects.requireNonNull($.sloId, "expected parameter 'sloId' to be non-null");
            $.timeWindows = Objects.requireNonNull($.timeWindows, "expected parameter 'timeWindows' to be non-null");
            $.viewMode = Objects.requireNonNull($.viewMode, "expected parameter 'viewMode' to be non-null");
            $.viewType = Objects.requireNonNull($.viewType, "expected parameter 'viewType' to be non-null");
            return $;
        }
    }

}
