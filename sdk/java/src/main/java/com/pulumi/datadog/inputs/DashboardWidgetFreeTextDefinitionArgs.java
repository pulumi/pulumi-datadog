// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetFreeTextDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetFreeTextDefinitionArgs Empty = new DashboardWidgetFreeTextDefinitionArgs();

    /**
     * The color of the text in the widget.
     * 
     */
    @Import(name="color")
    private @Nullable Output<String> color;

    /**
     * @return The color of the text in the widget.
     * 
     */
    public Optional<Output<String>> color() {
        return Optional.ofNullable(this.color);
    }

    /**
     * The size of the text in the widget.
     * 
     */
    @Import(name="fontSize")
    private @Nullable Output<String> fontSize;

    /**
     * @return The size of the text in the widget.
     * 
     */
    public Optional<Output<String>> fontSize() {
        return Optional.ofNullable(this.fontSize);
    }

    /**
     * The text to display in the widget.
     * 
     */
    @Import(name="text", required=true)
    private Output<String> text;

    /**
     * @return The text to display in the widget.
     * 
     */
    public Output<String> text() {
        return this.text;
    }

    /**
     * The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
     * 
     */
    @Import(name="textAlign")
    private @Nullable Output<String> textAlign;

    /**
     * @return The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
     * 
     */
    public Optional<Output<String>> textAlign() {
        return Optional.ofNullable(this.textAlign);
    }

    private DashboardWidgetFreeTextDefinitionArgs() {}

    private DashboardWidgetFreeTextDefinitionArgs(DashboardWidgetFreeTextDefinitionArgs $) {
        this.color = $.color;
        this.fontSize = $.fontSize;
        this.text = $.text;
        this.textAlign = $.textAlign;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetFreeTextDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetFreeTextDefinitionArgs $;

        public Builder() {
            $ = new DashboardWidgetFreeTextDefinitionArgs();
        }

        public Builder(DashboardWidgetFreeTextDefinitionArgs defaults) {
            $ = new DashboardWidgetFreeTextDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param color The color of the text in the widget.
         * 
         * @return builder
         * 
         */
        public Builder color(@Nullable Output<String> color) {
            $.color = color;
            return this;
        }

        /**
         * @param color The color of the text in the widget.
         * 
         * @return builder
         * 
         */
        public Builder color(String color) {
            return color(Output.of(color));
        }

        /**
         * @param fontSize The size of the text in the widget.
         * 
         * @return builder
         * 
         */
        public Builder fontSize(@Nullable Output<String> fontSize) {
            $.fontSize = fontSize;
            return this;
        }

        /**
         * @param fontSize The size of the text in the widget.
         * 
         * @return builder
         * 
         */
        public Builder fontSize(String fontSize) {
            return fontSize(Output.of(fontSize));
        }

        /**
         * @param text The text to display in the widget.
         * 
         * @return builder
         * 
         */
        public Builder text(Output<String> text) {
            $.text = text;
            return this;
        }

        /**
         * @param text The text to display in the widget.
         * 
         * @return builder
         * 
         */
        public Builder text(String text) {
            return text(Output.of(text));
        }

        /**
         * @param textAlign The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
         * 
         * @return builder
         * 
         */
        public Builder textAlign(@Nullable Output<String> textAlign) {
            $.textAlign = textAlign;
            return this;
        }

        /**
         * @param textAlign The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
         * 
         * @return builder
         * 
         */
        public Builder textAlign(String textAlign) {
            return textAlign(Output.of(textAlign));
        }

        public DashboardWidgetFreeTextDefinitionArgs build() {
            if ($.text == null) {
                throw new MissingRequiredPropertyException("DashboardWidgetFreeTextDefinitionArgs", "text");
            }
            return $;
        }
    }

}
