// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMetricActiveTagsAndAggregationsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMetricActiveTagsAndAggregationsArgs Empty = new GetMetricActiveTagsAndAggregationsArgs();

    /**
     * The metric for which to fetch tags.
     * 
     */
    @Import(name="metric", required=true)
    private Output<String> metric;

    /**
     * @return The metric for which to fetch tags.
     * 
     */
    public Output<String> metric() {
        return this.metric;
    }

    /**
     * The number of seconds to look back from now.
     * 
     */
    @Import(name="window")
    private @Nullable Output<Integer> window;

    /**
     * @return The number of seconds to look back from now.
     * 
     */
    public Optional<Output<Integer>> window() {
        return Optional.ofNullable(this.window);
    }

    private GetMetricActiveTagsAndAggregationsArgs() {}

    private GetMetricActiveTagsAndAggregationsArgs(GetMetricActiveTagsAndAggregationsArgs $) {
        this.metric = $.metric;
        this.window = $.window;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMetricActiveTagsAndAggregationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMetricActiveTagsAndAggregationsArgs $;

        public Builder() {
            $ = new GetMetricActiveTagsAndAggregationsArgs();
        }

        public Builder(GetMetricActiveTagsAndAggregationsArgs defaults) {
            $ = new GetMetricActiveTagsAndAggregationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param metric The metric for which to fetch tags.
         * 
         * @return builder
         * 
         */
        public Builder metric(Output<String> metric) {
            $.metric = metric;
            return this;
        }

        /**
         * @param metric The metric for which to fetch tags.
         * 
         * @return builder
         * 
         */
        public Builder metric(String metric) {
            return metric(Output.of(metric));
        }

        /**
         * @param window The number of seconds to look back from now.
         * 
         * @return builder
         * 
         */
        public Builder window(@Nullable Output<Integer> window) {
            $.window = window;
            return this;
        }

        /**
         * @param window The number of seconds to look back from now.
         * 
         * @return builder
         * 
         */
        public Builder window(Integer window) {
            return window(Output.of(window));
        }

        public GetMetricActiveTagsAndAggregationsArgs build() {
            if ($.metric == null) {
                throw new MissingRequiredPropertyException("GetMetricActiveTagsAndAggregationsArgs", "metric");
            }
            return $;
        }
    }

}
