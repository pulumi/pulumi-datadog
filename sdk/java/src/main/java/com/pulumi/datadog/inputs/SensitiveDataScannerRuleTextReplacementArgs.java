// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SensitiveDataScannerRuleTextReplacementArgs extends com.pulumi.resources.ResourceArgs {

    public static final SensitiveDataScannerRuleTextReplacementArgs Empty = new SensitiveDataScannerRuleTextReplacementArgs();

    /**
     * Required if type == &#39;partial*replacement*from*beginning&#39; or &#39;partial*replacement*from*end&#39;. It must be &gt; 0.
     * 
     */
    @Import(name="numberOfChars")
    private @Nullable Output<Integer> numberOfChars;

    /**
     * @return Required if type == &#39;partial*replacement*from*beginning&#39; or &#39;partial*replacement*from*end&#39;. It must be &gt; 0.
     * 
     */
    public Optional<Output<Integer>> numberOfChars() {
        return Optional.ofNullable(this.numberOfChars);
    }

    /**
     * Required if type == &#39;replacement_string&#39;.
     * 
     */
    @Import(name="replacementString")
    private @Nullable Output<String> replacementString;

    /**
     * @return Required if type == &#39;replacement_string&#39;.
     * 
     */
    public Optional<Output<String>> replacementString() {
        return Optional.ofNullable(this.replacementString);
    }

    /**
     * Type of the replacement text. None means no replacement. hash means the data will be stubbed. replacement*string means that one can chose a text to replace the data. partial*replacement*from*beginning allows a user to partially replace the data from the beginning, and partial*replacement*from_end on the other hand, allows to replace data from the end. Valid values are `none`, `hash`, `replacement_string`, `partial_replacement_from_beginning`, `partial_replacement_from_end`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the replacement text. None means no replacement. hash means the data will be stubbed. replacement*string means that one can chose a text to replace the data. partial*replacement*from*beginning allows a user to partially replace the data from the beginning, and partial*replacement*from_end on the other hand, allows to replace data from the end. Valid values are `none`, `hash`, `replacement_string`, `partial_replacement_from_beginning`, `partial_replacement_from_end`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private SensitiveDataScannerRuleTextReplacementArgs() {}

    private SensitiveDataScannerRuleTextReplacementArgs(SensitiveDataScannerRuleTextReplacementArgs $) {
        this.numberOfChars = $.numberOfChars;
        this.replacementString = $.replacementString;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SensitiveDataScannerRuleTextReplacementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SensitiveDataScannerRuleTextReplacementArgs $;

        public Builder() {
            $ = new SensitiveDataScannerRuleTextReplacementArgs();
        }

        public Builder(SensitiveDataScannerRuleTextReplacementArgs defaults) {
            $ = new SensitiveDataScannerRuleTextReplacementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param numberOfChars Required if type == &#39;partial*replacement*from*beginning&#39; or &#39;partial*replacement*from*end&#39;. It must be &gt; 0.
         * 
         * @return builder
         * 
         */
        public Builder numberOfChars(@Nullable Output<Integer> numberOfChars) {
            $.numberOfChars = numberOfChars;
            return this;
        }

        /**
         * @param numberOfChars Required if type == &#39;partial*replacement*from*beginning&#39; or &#39;partial*replacement*from*end&#39;. It must be &gt; 0.
         * 
         * @return builder
         * 
         */
        public Builder numberOfChars(Integer numberOfChars) {
            return numberOfChars(Output.of(numberOfChars));
        }

        /**
         * @param replacementString Required if type == &#39;replacement_string&#39;.
         * 
         * @return builder
         * 
         */
        public Builder replacementString(@Nullable Output<String> replacementString) {
            $.replacementString = replacementString;
            return this;
        }

        /**
         * @param replacementString Required if type == &#39;replacement_string&#39;.
         * 
         * @return builder
         * 
         */
        public Builder replacementString(String replacementString) {
            return replacementString(Output.of(replacementString));
        }

        /**
         * @param type Type of the replacement text. None means no replacement. hash means the data will be stubbed. replacement*string means that one can chose a text to replace the data. partial*replacement*from*beginning allows a user to partially replace the data from the beginning, and partial*replacement*from_end on the other hand, allows to replace data from the end. Valid values are `none`, `hash`, `replacement_string`, `partial_replacement_from_beginning`, `partial_replacement_from_end`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the replacement text. None means no replacement. hash means the data will be stubbed. replacement*string means that one can chose a text to replace the data. partial*replacement*from*beginning allows a user to partially replace the data from the beginning, and partial*replacement*from_end on the other hand, allows to replace data from the end. Valid values are `none`, `hash`, `replacement_string`, `partial_replacement_from_beginning`, `partial_replacement_from_end`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public SensitiveDataScannerRuleTextReplacementArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("SensitiveDataScannerRuleTextReplacementArgs", "type");
            }
            return $;
        }
    }

}
