// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.GetActionConnectionHttpTokenAuthArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetActionConnectionHttpArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetActionConnectionHttpArgs Empty = new GetActionConnectionHttpArgs();

    /**
     * Base HTTP url for the integration
     * 
     */
    @Import(name="baseUrl", required=true)
    private Output<String> baseUrl;

    /**
     * @return Base HTTP url for the integration
     * 
     */
    public Output<String> baseUrl() {
        return this.baseUrl;
    }

    /**
     * Configuration for an HTTP connection that uses token auth
     * 
     */
    @Import(name="tokenAuth")
    private @Nullable Output<GetActionConnectionHttpTokenAuthArgs> tokenAuth;

    /**
     * @return Configuration for an HTTP connection that uses token auth
     * 
     */
    public Optional<Output<GetActionConnectionHttpTokenAuthArgs>> tokenAuth() {
        return Optional.ofNullable(this.tokenAuth);
    }

    private GetActionConnectionHttpArgs() {}

    private GetActionConnectionHttpArgs(GetActionConnectionHttpArgs $) {
        this.baseUrl = $.baseUrl;
        this.tokenAuth = $.tokenAuth;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetActionConnectionHttpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetActionConnectionHttpArgs $;

        public Builder() {
            $ = new GetActionConnectionHttpArgs();
        }

        public Builder(GetActionConnectionHttpArgs defaults) {
            $ = new GetActionConnectionHttpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseUrl Base HTTP url for the integration
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(Output<String> baseUrl) {
            $.baseUrl = baseUrl;
            return this;
        }

        /**
         * @param baseUrl Base HTTP url for the integration
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(String baseUrl) {
            return baseUrl(Output.of(baseUrl));
        }

        /**
         * @param tokenAuth Configuration for an HTTP connection that uses token auth
         * 
         * @return builder
         * 
         */
        public Builder tokenAuth(@Nullable Output<GetActionConnectionHttpTokenAuthArgs> tokenAuth) {
            $.tokenAuth = tokenAuth;
            return this;
        }

        /**
         * @param tokenAuth Configuration for an HTTP connection that uses token auth
         * 
         * @return builder
         * 
         */
        public Builder tokenAuth(GetActionConnectionHttpTokenAuthArgs tokenAuth) {
            return tokenAuth(Output.of(tokenAuth));
        }

        public GetActionConnectionHttpArgs build() {
            if ($.baseUrl == null) {
                throw new MissingRequiredPropertyException("GetActionConnectionHttpArgs", "baseUrl");
            }
            return $;
        }
    }

}
