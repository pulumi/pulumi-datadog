// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.GetCustomAllocationRuleStrategyAllocatedByAllocatedTag;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCustomAllocationRuleStrategyAllocatedBy extends com.pulumi.resources.InvokeArgs {

    public static final GetCustomAllocationRuleStrategyAllocatedBy Empty = new GetCustomAllocationRuleStrategyAllocatedBy();

    @Import(name="allocatedTags")
    private @Nullable List<GetCustomAllocationRuleStrategyAllocatedByAllocatedTag> allocatedTags;

    public Optional<List<GetCustomAllocationRuleStrategyAllocatedByAllocatedTag>> allocatedTags() {
        return Optional.ofNullable(this.allocatedTags);
    }

    /**
     * The percentage of costs allocated to this target as a decimal (e.g., 0.33 for 33%).
     * 
     */
    @Import(name="percentage", required=true)
    private Double percentage;

    /**
     * @return The percentage of costs allocated to this target as a decimal (e.g., 0.33 for 33%).
     * 
     */
    public Double percentage() {
        return this.percentage;
    }

    private GetCustomAllocationRuleStrategyAllocatedBy() {}

    private GetCustomAllocationRuleStrategyAllocatedBy(GetCustomAllocationRuleStrategyAllocatedBy $) {
        this.allocatedTags = $.allocatedTags;
        this.percentage = $.percentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCustomAllocationRuleStrategyAllocatedBy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCustomAllocationRuleStrategyAllocatedBy $;

        public Builder() {
            $ = new GetCustomAllocationRuleStrategyAllocatedBy();
        }

        public Builder(GetCustomAllocationRuleStrategyAllocatedBy defaults) {
            $ = new GetCustomAllocationRuleStrategyAllocatedBy(Objects.requireNonNull(defaults));
        }

        public Builder allocatedTags(@Nullable List<GetCustomAllocationRuleStrategyAllocatedByAllocatedTag> allocatedTags) {
            $.allocatedTags = allocatedTags;
            return this;
        }

        public Builder allocatedTags(GetCustomAllocationRuleStrategyAllocatedByAllocatedTag... allocatedTags) {
            return allocatedTags(List.of(allocatedTags));
        }

        /**
         * @param percentage The percentage of costs allocated to this target as a decimal (e.g., 0.33 for 33%).
         * 
         * @return builder
         * 
         */
        public Builder percentage(Double percentage) {
            $.percentage = percentage;
            return this;
        }

        public GetCustomAllocationRuleStrategyAllocatedBy build() {
            if ($.percentage == null) {
                throw new MissingRequiredPropertyException("GetCustomAllocationRuleStrategyAllocatedBy", "percentage");
            }
            return $;
        }
    }

}
