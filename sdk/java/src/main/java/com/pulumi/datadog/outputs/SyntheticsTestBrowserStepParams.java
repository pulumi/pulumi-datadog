// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.SyntheticsTestBrowserStepParamsElementUserLocator;
import com.pulumi.datadog.outputs.SyntheticsTestBrowserStepParamsVariable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SyntheticsTestBrowserStepParams {
    /**
     * @return Name of the attribute to use for an &#34;assert attribute&#34; step.
     * 
     */
    private @Nullable String attribute;
    /**
     * @return Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.
     * 
     */
    private @Nullable String check;
    /**
     * @return Type of click to use for a &#34;click&#34; step.
     * 
     */
    private @Nullable String clickType;
    /**
     * @return Javascript code to use for the step.
     * 
     */
    private @Nullable String code;
    /**
     * @return Delay between each key stroke for a &#34;type test&#34; step.
     * 
     */
    private @Nullable Integer delay;
    /**
     * @return Element to use for the step, json encoded string.
     * 
     */
    private @Nullable String element;
    /**
     * @return Custom user selector to use for the step.
     * 
     */
    private @Nullable SyntheticsTestBrowserStepParamsElementUserLocator elementUserLocator;
    /**
     * @return Details of the email for an &#34;assert email&#34; step.
     * 
     */
    private @Nullable String email;
    /**
     * @return For an &#34;assert download&#34; step.
     * 
     */
    private @Nullable String file;
    /**
     * @return Details of the files for an &#34;upload files&#34; step, json encoded string.
     * 
     */
    private @Nullable String files;
    /**
     * @return Modifier to use for a &#34;press key&#34; step.
     * 
     */
    private @Nullable List<String> modifiers;
    /**
     * @return ID of the tab to play the subtest.
     * 
     */
    private @Nullable String playingTabId;
    /**
     * @return Request for an API step.
     * 
     */
    private @Nullable String request;
    /**
     * @return ID of the Synthetics test to use as subtest.
     * 
     */
    private @Nullable String subtestPublicId;
    /**
     * @return Regex or JSON path used for the parser. Not used with type `raw`.
     * 
     */
    private @Nullable String value;
    /**
     * @return Details of the variable to extract.
     * 
     */
    private @Nullable SyntheticsTestBrowserStepParamsVariable variable;
    /**
     * @return For &#34;file upload&#34; steps.
     * 
     */
    private @Nullable Boolean withClick;
    /**
     * @return X coordinates for a &#34;scroll step&#34;.
     * 
     */
    private @Nullable Integer x;
    /**
     * @return Y coordinates for a &#34;scroll step&#34;.
     * 
     */
    private @Nullable Integer y;

    private SyntheticsTestBrowserStepParams() {}
    /**
     * @return Name of the attribute to use for an &#34;assert attribute&#34; step.
     * 
     */
    public Optional<String> attribute() {
        return Optional.ofNullable(this.attribute);
    }
    /**
     * @return Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.
     * 
     */
    public Optional<String> check() {
        return Optional.ofNullable(this.check);
    }
    /**
     * @return Type of click to use for a &#34;click&#34; step.
     * 
     */
    public Optional<String> clickType() {
        return Optional.ofNullable(this.clickType);
    }
    /**
     * @return Javascript code to use for the step.
     * 
     */
    public Optional<String> code() {
        return Optional.ofNullable(this.code);
    }
    /**
     * @return Delay between each key stroke for a &#34;type test&#34; step.
     * 
     */
    public Optional<Integer> delay() {
        return Optional.ofNullable(this.delay);
    }
    /**
     * @return Element to use for the step, json encoded string.
     * 
     */
    public Optional<String> element() {
        return Optional.ofNullable(this.element);
    }
    /**
     * @return Custom user selector to use for the step.
     * 
     */
    public Optional<SyntheticsTestBrowserStepParamsElementUserLocator> elementUserLocator() {
        return Optional.ofNullable(this.elementUserLocator);
    }
    /**
     * @return Details of the email for an &#34;assert email&#34; step.
     * 
     */
    public Optional<String> email() {
        return Optional.ofNullable(this.email);
    }
    /**
     * @return For an &#34;assert download&#34; step.
     * 
     */
    public Optional<String> file() {
        return Optional.ofNullable(this.file);
    }
    /**
     * @return Details of the files for an &#34;upload files&#34; step, json encoded string.
     * 
     */
    public Optional<String> files() {
        return Optional.ofNullable(this.files);
    }
    /**
     * @return Modifier to use for a &#34;press key&#34; step.
     * 
     */
    public List<String> modifiers() {
        return this.modifiers == null ? List.of() : this.modifiers;
    }
    /**
     * @return ID of the tab to play the subtest.
     * 
     */
    public Optional<String> playingTabId() {
        return Optional.ofNullable(this.playingTabId);
    }
    /**
     * @return Request for an API step.
     * 
     */
    public Optional<String> request() {
        return Optional.ofNullable(this.request);
    }
    /**
     * @return ID of the Synthetics test to use as subtest.
     * 
     */
    public Optional<String> subtestPublicId() {
        return Optional.ofNullable(this.subtestPublicId);
    }
    /**
     * @return Regex or JSON path used for the parser. Not used with type `raw`.
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }
    /**
     * @return Details of the variable to extract.
     * 
     */
    public Optional<SyntheticsTestBrowserStepParamsVariable> variable() {
        return Optional.ofNullable(this.variable);
    }
    /**
     * @return For &#34;file upload&#34; steps.
     * 
     */
    public Optional<Boolean> withClick() {
        return Optional.ofNullable(this.withClick);
    }
    /**
     * @return X coordinates for a &#34;scroll step&#34;.
     * 
     */
    public Optional<Integer> x() {
        return Optional.ofNullable(this.x);
    }
    /**
     * @return Y coordinates for a &#34;scroll step&#34;.
     * 
     */
    public Optional<Integer> y() {
        return Optional.ofNullable(this.y);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyntheticsTestBrowserStepParams defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String attribute;
        private @Nullable String check;
        private @Nullable String clickType;
        private @Nullable String code;
        private @Nullable Integer delay;
        private @Nullable String element;
        private @Nullable SyntheticsTestBrowserStepParamsElementUserLocator elementUserLocator;
        private @Nullable String email;
        private @Nullable String file;
        private @Nullable String files;
        private @Nullable List<String> modifiers;
        private @Nullable String playingTabId;
        private @Nullable String request;
        private @Nullable String subtestPublicId;
        private @Nullable String value;
        private @Nullable SyntheticsTestBrowserStepParamsVariable variable;
        private @Nullable Boolean withClick;
        private @Nullable Integer x;
        private @Nullable Integer y;
        public Builder() {}
        public Builder(SyntheticsTestBrowserStepParams defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attribute = defaults.attribute;
    	      this.check = defaults.check;
    	      this.clickType = defaults.clickType;
    	      this.code = defaults.code;
    	      this.delay = defaults.delay;
    	      this.element = defaults.element;
    	      this.elementUserLocator = defaults.elementUserLocator;
    	      this.email = defaults.email;
    	      this.file = defaults.file;
    	      this.files = defaults.files;
    	      this.modifiers = defaults.modifiers;
    	      this.playingTabId = defaults.playingTabId;
    	      this.request = defaults.request;
    	      this.subtestPublicId = defaults.subtestPublicId;
    	      this.value = defaults.value;
    	      this.variable = defaults.variable;
    	      this.withClick = defaults.withClick;
    	      this.x = defaults.x;
    	      this.y = defaults.y;
        }

        @CustomType.Setter
        public Builder attribute(@Nullable String attribute) {

            this.attribute = attribute;
            return this;
        }
        @CustomType.Setter
        public Builder check(@Nullable String check) {

            this.check = check;
            return this;
        }
        @CustomType.Setter
        public Builder clickType(@Nullable String clickType) {

            this.clickType = clickType;
            return this;
        }
        @CustomType.Setter
        public Builder code(@Nullable String code) {

            this.code = code;
            return this;
        }
        @CustomType.Setter
        public Builder delay(@Nullable Integer delay) {

            this.delay = delay;
            return this;
        }
        @CustomType.Setter
        public Builder element(@Nullable String element) {

            this.element = element;
            return this;
        }
        @CustomType.Setter
        public Builder elementUserLocator(@Nullable SyntheticsTestBrowserStepParamsElementUserLocator elementUserLocator) {

            this.elementUserLocator = elementUserLocator;
            return this;
        }
        @CustomType.Setter
        public Builder email(@Nullable String email) {

            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder file(@Nullable String file) {

            this.file = file;
            return this;
        }
        @CustomType.Setter
        public Builder files(@Nullable String files) {

            this.files = files;
            return this;
        }
        @CustomType.Setter
        public Builder modifiers(@Nullable List<String> modifiers) {

            this.modifiers = modifiers;
            return this;
        }
        public Builder modifiers(String... modifiers) {
            return modifiers(List.of(modifiers));
        }
        @CustomType.Setter
        public Builder playingTabId(@Nullable String playingTabId) {

            this.playingTabId = playingTabId;
            return this;
        }
        @CustomType.Setter
        public Builder request(@Nullable String request) {

            this.request = request;
            return this;
        }
        @CustomType.Setter
        public Builder subtestPublicId(@Nullable String subtestPublicId) {

            this.subtestPublicId = subtestPublicId;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {

            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder variable(@Nullable SyntheticsTestBrowserStepParamsVariable variable) {

            this.variable = variable;
            return this;
        }
        @CustomType.Setter
        public Builder withClick(@Nullable Boolean withClick) {

            this.withClick = withClick;
            return this;
        }
        @CustomType.Setter
        public Builder x(@Nullable Integer x) {

            this.x = x;
            return this;
        }
        @CustomType.Setter
        public Builder y(@Nullable Integer y) {

            this.y = y;
            return this;
        }
        public SyntheticsTestBrowserStepParams build() {
            final var _resultValue = new SyntheticsTestBrowserStepParams();
            _resultValue.attribute = attribute;
            _resultValue.check = check;
            _resultValue.clickType = clickType;
            _resultValue.code = code;
            _resultValue.delay = delay;
            _resultValue.element = element;
            _resultValue.elementUserLocator = elementUserLocator;
            _resultValue.email = email;
            _resultValue.file = file;
            _resultValue.files = files;
            _resultValue.modifiers = modifiers;
            _resultValue.playingTabId = playingTabId;
            _resultValue.request = request;
            _resultValue.subtestPublicId = subtestPublicId;
            _resultValue.value = value;
            _resultValue.variable = variable;
            _resultValue.withClick = withClick;
            _resultValue.x = x;
            _resultValue.y = y;
            return _resultValue;
        }
    }
}
